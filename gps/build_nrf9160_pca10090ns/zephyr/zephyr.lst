
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20022cb8 	.word	0x20022cb8
    c004:	0000e4bd 	.word	0x0000e4bd
    c008:	0001b0e7 	.word	0x0001b0e7
    c00c:	0000e2d5 	.word	0x0000e2d5
    c010:	0000e2d5 	.word	0x0000e2d5
    c014:	0000e2d5 	.word	0x0000e2d5
    c018:	0000e2d5 	.word	0x0000e2d5
    c01c:	0000e2d5 	.word	0x0000e2d5
    c020:	0000e2d5 	.word	0x0000e2d5
    c024:	0000e2d5 	.word	0x0000e2d5
    c028:	0000e2d5 	.word	0x0000e2d5
    c02c:	0000e29d 	.word	0x0000e29d
    c030:	0000e2d5 	.word	0x0000e2d5
    c034:	0000e2d5 	.word	0x0000e2d5
    c038:	0000e1ed 	.word	0x0000e1ed
    c03c:	0001b0d3 	.word	0x0001b0d3

0000c040 <_irq_vector_table>:
    c040:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c050:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c060:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c070:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c080:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c090:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c0a0:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c0b0:	0000f1c1 0001b577 0000e2f1 0000e2f1     ....w...........
    c0c0:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c0d0:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c0e0:	0000e2f1 0000e2f1 0001b595 0000e2f1     ................
    c0f0:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c100:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c110:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c120:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c130:	0000e2f1 0000e2f1 0000e2f1 0000e2f1     ................
    c140:	0000e2f1                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0001234c 00000001 0000c000 0000c000     L#..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c37e:	f1a4 0401 	sub.w	r4, r4, #1
    c382:	d1e9      	bne.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_uldivmod>:
    c5b8:	b953      	cbnz	r3, c5d0 <__aeabi_uldivmod+0x18>
    c5ba:	b94a      	cbnz	r2, c5d0 <__aeabi_uldivmod+0x18>
    c5bc:	2900      	cmp	r1, #0
    c5be:	bf08      	it	eq
    c5c0:	2800      	cmpeq	r0, #0
    c5c2:	bf1c      	itt	ne
    c5c4:	f04f 31ff 	movne.w	r1, #4294967295
    c5c8:	f04f 30ff 	movne.w	r0, #4294967295
    c5cc:	f000 b970 	b.w	c8b0 <__aeabi_idiv0>
    c5d0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5d8:	f000 f806 	bl	c5e8 <__udivmoddi4>
    c5dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5e4:	b004      	add	sp, #16
    c5e6:	4770      	bx	lr

0000c5e8 <__udivmoddi4>:
    c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c5ee:	4604      	mov	r4, r0
    c5f0:	4689      	mov	r9, r1
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	f040 8083 	bne.w	c6fe <__udivmoddi4+0x116>
    c5f8:	428a      	cmp	r2, r1
    c5fa:	4615      	mov	r5, r2
    c5fc:	d945      	bls.n	c68a <__udivmoddi4+0xa2>
    c5fe:	fab2 f282 	clz	r2, r2
    c602:	b14a      	cbz	r2, c618 <__udivmoddi4+0x30>
    c604:	f1c2 0720 	rsb	r7, r2, #32
    c608:	fa01 f302 	lsl.w	r3, r1, r2
    c60c:	4095      	lsls	r5, r2
    c60e:	4094      	lsls	r4, r2
    c610:	fa20 f707 	lsr.w	r7, r0, r7
    c614:	ea47 0903 	orr.w	r9, r7, r3
    c618:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c61c:	0c23      	lsrs	r3, r4, #16
    c61e:	fa1f f885 	uxth.w	r8, r5
    c622:	fbb9 fcfe 	udiv	ip, r9, lr
    c626:	fb0e 991c 	mls	r9, lr, ip, r9
    c62a:	fb0c f108 	mul.w	r1, ip, r8
    c62e:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c632:	4299      	cmp	r1, r3
    c634:	d90a      	bls.n	c64c <__udivmoddi4+0x64>
    c636:	18eb      	adds	r3, r5, r3
    c638:	bf2c      	ite	cs
    c63a:	2001      	movcs	r0, #1
    c63c:	2000      	movcc	r0, #0
    c63e:	4299      	cmp	r1, r3
    c640:	d902      	bls.n	c648 <__udivmoddi4+0x60>
    c642:	2800      	cmp	r0, #0
    c644:	f000 811d 	beq.w	c882 <__udivmoddi4+0x29a>
    c648:	f10c 3cff 	add.w	ip, ip, #4294967295
    c64c:	1a59      	subs	r1, r3, r1
    c64e:	b2a3      	uxth	r3, r4
    c650:	fbb1 f0fe 	udiv	r0, r1, lr
    c654:	fb0e 1110 	mls	r1, lr, r0, r1
    c658:	fb00 f808 	mul.w	r8, r0, r8
    c65c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c660:	45a0      	cmp	r8, r4
    c662:	d905      	bls.n	c670 <__udivmoddi4+0x88>
    c664:	192c      	adds	r4, r5, r4
    c666:	d202      	bcs.n	c66e <__udivmoddi4+0x86>
    c668:	45a0      	cmp	r8, r4
    c66a:	f200 810e 	bhi.w	c88a <__udivmoddi4+0x2a2>
    c66e:	3801      	subs	r0, #1
    c670:	eba4 0408 	sub.w	r4, r4, r8
    c674:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c678:	2700      	movs	r7, #0
    c67a:	b11e      	cbz	r6, c684 <__udivmoddi4+0x9c>
    c67c:	40d4      	lsrs	r4, r2
    c67e:	2300      	movs	r3, #0
    c680:	e9c6 4300 	strd	r4, r3, [r6]
    c684:	4639      	mov	r1, r7
    c686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c68a:	2a00      	cmp	r2, #0
    c68c:	d051      	beq.n	c732 <__udivmoddi4+0x14a>
    c68e:	fab2 f282 	clz	r2, r2
    c692:	2a00      	cmp	r2, #0
    c694:	f040 80af 	bne.w	c7f6 <__udivmoddi4+0x20e>
    c698:	1b49      	subs	r1, r1, r5
    c69a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c69e:	fa1f f885 	uxth.w	r8, r5
    c6a2:	2701      	movs	r7, #1
    c6a4:	0c23      	lsrs	r3, r4, #16
    c6a6:	fbb1 fcfe 	udiv	ip, r1, lr
    c6aa:	fb0e 111c 	mls	r1, lr, ip, r1
    c6ae:	fb08 f00c 	mul.w	r0, r8, ip
    c6b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c6b6:	4298      	cmp	r0, r3
    c6b8:	d90a      	bls.n	c6d0 <__udivmoddi4+0xe8>
    c6ba:	18eb      	adds	r3, r5, r3
    c6bc:	bf2c      	ite	cs
    c6be:	2101      	movcs	r1, #1
    c6c0:	2100      	movcc	r1, #0
    c6c2:	4298      	cmp	r0, r3
    c6c4:	d902      	bls.n	c6cc <__udivmoddi4+0xe4>
    c6c6:	2900      	cmp	r1, #0
    c6c8:	f000 80d7 	beq.w	c87a <__udivmoddi4+0x292>
    c6cc:	f10c 3cff 	add.w	ip, ip, #4294967295
    c6d0:	1a19      	subs	r1, r3, r0
    c6d2:	b2a3      	uxth	r3, r4
    c6d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c6d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c6dc:	fb08 f800 	mul.w	r8, r8, r0
    c6e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c6e4:	45a0      	cmp	r8, r4
    c6e6:	d905      	bls.n	c6f4 <__udivmoddi4+0x10c>
    c6e8:	192c      	adds	r4, r5, r4
    c6ea:	d202      	bcs.n	c6f2 <__udivmoddi4+0x10a>
    c6ec:	45a0      	cmp	r8, r4
    c6ee:	f200 80c1 	bhi.w	c874 <__udivmoddi4+0x28c>
    c6f2:	3801      	subs	r0, #1
    c6f4:	eba4 0408 	sub.w	r4, r4, r8
    c6f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6fc:	e7bd      	b.n	c67a <__udivmoddi4+0x92>
    c6fe:	428b      	cmp	r3, r1
    c700:	d908      	bls.n	c714 <__udivmoddi4+0x12c>
    c702:	2e00      	cmp	r6, #0
    c704:	d074      	beq.n	c7f0 <__udivmoddi4+0x208>
    c706:	2700      	movs	r7, #0
    c708:	e9c6 0100 	strd	r0, r1, [r6]
    c70c:	4638      	mov	r0, r7
    c70e:	4639      	mov	r1, r7
    c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c714:	fab3 f783 	clz	r7, r3
    c718:	b967      	cbnz	r7, c734 <__udivmoddi4+0x14c>
    c71a:	428b      	cmp	r3, r1
    c71c:	f0c0 80a4 	bcc.w	c868 <__udivmoddi4+0x280>
    c720:	4282      	cmp	r2, r0
    c722:	f240 80a1 	bls.w	c868 <__udivmoddi4+0x280>
    c726:	4638      	mov	r0, r7
    c728:	2e00      	cmp	r6, #0
    c72a:	d0ab      	beq.n	c684 <__udivmoddi4+0x9c>
    c72c:	e9c6 4900 	strd	r4, r9, [r6]
    c730:	e7a8      	b.n	c684 <__udivmoddi4+0x9c>
    c732:	deff      	udf	#255	; 0xff
    c734:	f1c7 0520 	rsb	r5, r7, #32
    c738:	40bb      	lsls	r3, r7
    c73a:	fa02 fc07 	lsl.w	ip, r2, r7
    c73e:	fa01 f407 	lsl.w	r4, r1, r7
    c742:	40ea      	lsrs	r2, r5
    c744:	fa20 f805 	lsr.w	r8, r0, r5
    c748:	40e9      	lsrs	r1, r5
    c74a:	fa00 fe07 	lsl.w	lr, r0, r7
    c74e:	431a      	orrs	r2, r3
    c750:	ea48 0404 	orr.w	r4, r8, r4
    c754:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c758:	0c20      	lsrs	r0, r4, #16
    c75a:	fa1f f982 	uxth.w	r9, r2
    c75e:	fbb1 faf8 	udiv	sl, r1, r8
    c762:	fb08 111a 	mls	r1, r8, sl, r1
    c766:	fb0a fb09 	mul.w	fp, sl, r9
    c76a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c76e:	458b      	cmp	fp, r1
    c770:	d90a      	bls.n	c788 <__udivmoddi4+0x1a0>
    c772:	1851      	adds	r1, r2, r1
    c774:	bf2c      	ite	cs
    c776:	2301      	movcs	r3, #1
    c778:	2300      	movcc	r3, #0
    c77a:	458b      	cmp	fp, r1
    c77c:	d902      	bls.n	c784 <__udivmoddi4+0x19c>
    c77e:	2b00      	cmp	r3, #0
    c780:	f000 8088 	beq.w	c894 <__udivmoddi4+0x2ac>
    c784:	f10a 3aff 	add.w	sl, sl, #4294967295
    c788:	eba1 010b 	sub.w	r1, r1, fp
    c78c:	b2a4      	uxth	r4, r4
    c78e:	fbb1 f0f8 	udiv	r0, r1, r8
    c792:	fb08 1110 	mls	r1, r8, r0, r1
    c796:	fb00 f909 	mul.w	r9, r0, r9
    c79a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c79e:	4589      	cmp	r9, r1
    c7a0:	d904      	bls.n	c7ac <__udivmoddi4+0x1c4>
    c7a2:	1851      	adds	r1, r2, r1
    c7a4:	d201      	bcs.n	c7aa <__udivmoddi4+0x1c2>
    c7a6:	4589      	cmp	r9, r1
    c7a8:	d87b      	bhi.n	c8a2 <__udivmoddi4+0x2ba>
    c7aa:	3801      	subs	r0, #1
    c7ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c7b0:	eba1 0109 	sub.w	r1, r1, r9
    c7b4:	fba0 890c 	umull	r8, r9, r0, ip
    c7b8:	4549      	cmp	r1, r9
    c7ba:	4644      	mov	r4, r8
    c7bc:	464b      	mov	r3, r9
    c7be:	d302      	bcc.n	c7c6 <__udivmoddi4+0x1de>
    c7c0:	d106      	bne.n	c7d0 <__udivmoddi4+0x1e8>
    c7c2:	45c6      	cmp	lr, r8
    c7c4:	d204      	bcs.n	c7d0 <__udivmoddi4+0x1e8>
    c7c6:	3801      	subs	r0, #1
    c7c8:	ebb8 040c 	subs.w	r4, r8, ip
    c7cc:	eb69 0302 	sbc.w	r3, r9, r2
    c7d0:	2e00      	cmp	r6, #0
    c7d2:	d05d      	beq.n	c890 <__udivmoddi4+0x2a8>
    c7d4:	ebbe 0204 	subs.w	r2, lr, r4
    c7d8:	eb61 0103 	sbc.w	r1, r1, r3
    c7dc:	fa01 f505 	lsl.w	r5, r1, r5
    c7e0:	fa22 f307 	lsr.w	r3, r2, r7
    c7e4:	40f9      	lsrs	r1, r7
    c7e6:	2700      	movs	r7, #0
    c7e8:	431d      	orrs	r5, r3
    c7ea:	e9c6 5100 	strd	r5, r1, [r6]
    c7ee:	e749      	b.n	c684 <__udivmoddi4+0x9c>
    c7f0:	4637      	mov	r7, r6
    c7f2:	4630      	mov	r0, r6
    c7f4:	e746      	b.n	c684 <__udivmoddi4+0x9c>
    c7f6:	f1c2 0020 	rsb	r0, r2, #32
    c7fa:	4095      	lsls	r5, r2
    c7fc:	fa01 f702 	lsl.w	r7, r1, r2
    c800:	fa21 f300 	lsr.w	r3, r1, r0
    c804:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c808:	fa24 f100 	lsr.w	r1, r4, r0
    c80c:	fa1f f885 	uxth.w	r8, r5
    c810:	4094      	lsls	r4, r2
    c812:	4339      	orrs	r1, r7
    c814:	fbb3 f0fe 	udiv	r0, r3, lr
    c818:	0c0f      	lsrs	r7, r1, #16
    c81a:	fb0e 3310 	mls	r3, lr, r0, r3
    c81e:	fb00 fc08 	mul.w	ip, r0, r8
    c822:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c826:	459c      	cmp	ip, r3
    c828:	d907      	bls.n	c83a <__udivmoddi4+0x252>
    c82a:	18eb      	adds	r3, r5, r3
    c82c:	bf2c      	ite	cs
    c82e:	2701      	movcs	r7, #1
    c830:	2700      	movcc	r7, #0
    c832:	459c      	cmp	ip, r3
    c834:	d900      	bls.n	c838 <__udivmoddi4+0x250>
    c836:	b38f      	cbz	r7, c89c <__udivmoddi4+0x2b4>
    c838:	3801      	subs	r0, #1
    c83a:	eba3 030c 	sub.w	r3, r3, ip
    c83e:	b289      	uxth	r1, r1
    c840:	fbb3 f7fe 	udiv	r7, r3, lr
    c844:	fb0e 3317 	mls	r3, lr, r7, r3
    c848:	fb07 fc08 	mul.w	ip, r7, r8
    c84c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c850:	458c      	cmp	ip, r1
    c852:	d904      	bls.n	c85e <__udivmoddi4+0x276>
    c854:	1869      	adds	r1, r5, r1
    c856:	d201      	bcs.n	c85c <__udivmoddi4+0x274>
    c858:	458c      	cmp	ip, r1
    c85a:	d825      	bhi.n	c8a8 <__udivmoddi4+0x2c0>
    c85c:	3f01      	subs	r7, #1
    c85e:	eba1 010c 	sub.w	r1, r1, ip
    c862:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c866:	e71d      	b.n	c6a4 <__udivmoddi4+0xbc>
    c868:	1a84      	subs	r4, r0, r2
    c86a:	eb61 0303 	sbc.w	r3, r1, r3
    c86e:	2001      	movs	r0, #1
    c870:	4699      	mov	r9, r3
    c872:	e759      	b.n	c728 <__udivmoddi4+0x140>
    c874:	3802      	subs	r0, #2
    c876:	442c      	add	r4, r5
    c878:	e73c      	b.n	c6f4 <__udivmoddi4+0x10c>
    c87a:	f1ac 0c02 	sub.w	ip, ip, #2
    c87e:	442b      	add	r3, r5
    c880:	e726      	b.n	c6d0 <__udivmoddi4+0xe8>
    c882:	f1ac 0c02 	sub.w	ip, ip, #2
    c886:	442b      	add	r3, r5
    c888:	e6e0      	b.n	c64c <__udivmoddi4+0x64>
    c88a:	3802      	subs	r0, #2
    c88c:	442c      	add	r4, r5
    c88e:	e6ef      	b.n	c670 <__udivmoddi4+0x88>
    c890:	4637      	mov	r7, r6
    c892:	e6f7      	b.n	c684 <__udivmoddi4+0x9c>
    c894:	f1aa 0a02 	sub.w	sl, sl, #2
    c898:	4411      	add	r1, r2
    c89a:	e775      	b.n	c788 <__udivmoddi4+0x1a0>
    c89c:	3802      	subs	r0, #2
    c89e:	442b      	add	r3, r5
    c8a0:	e7cb      	b.n	c83a <__udivmoddi4+0x252>
    c8a2:	3802      	subs	r0, #2
    c8a4:	4411      	add	r1, r2
    c8a6:	e781      	b.n	c7ac <__udivmoddi4+0x1c4>
    c8a8:	3f02      	subs	r7, #2
    c8aa:	4429      	add	r1, r5
    c8ac:	e7d7      	b.n	c85e <__udivmoddi4+0x276>
    c8ae:	bf00      	nop

0000c8b0 <__aeabi_idiv0>:
    c8b0:	4770      	bx	lr
    c8b2:	bf00      	nop

0000c8b4 <__aeabi_dmul>:
    c8b4:	b570      	push	{r4, r5, r6, lr}
    c8b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c8ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c8be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c8c2:	bf1d      	ittte	ne
    c8c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c8c8:	ea94 0f0c 	teqne	r4, ip
    c8cc:	ea95 0f0c 	teqne	r5, ip
    c8d0:	f000 f8de 	bleq	ca90 <__aeabi_dmul+0x1dc>
    c8d4:	442c      	add	r4, r5
    c8d6:	ea81 0603 	eor.w	r6, r1, r3
    c8da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c8de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c8e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c8e6:	bf18      	it	ne
    c8e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c8ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c8f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c8f4:	d038      	beq.n	c968 <__aeabi_dmul+0xb4>
    c8f6:	fba0 ce02 	umull	ip, lr, r0, r2
    c8fa:	f04f 0500 	mov.w	r5, #0
    c8fe:	fbe1 e502 	umlal	lr, r5, r1, r2
    c902:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c906:	fbe0 e503 	umlal	lr, r5, r0, r3
    c90a:	f04f 0600 	mov.w	r6, #0
    c90e:	fbe1 5603 	umlal	r5, r6, r1, r3
    c912:	f09c 0f00 	teq	ip, #0
    c916:	bf18      	it	ne
    c918:	f04e 0e01 	orrne.w	lr, lr, #1
    c91c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c920:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c924:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c928:	d204      	bcs.n	c934 <__aeabi_dmul+0x80>
    c92a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c92e:	416d      	adcs	r5, r5
    c930:	eb46 0606 	adc.w	r6, r6, r6
    c934:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c938:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c93c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c940:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c944:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c948:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c94c:	bf88      	it	hi
    c94e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c952:	d81e      	bhi.n	c992 <__aeabi_dmul+0xde>
    c954:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c958:	bf08      	it	eq
    c95a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c95e:	f150 0000 	adcs.w	r0, r0, #0
    c962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c966:	bd70      	pop	{r4, r5, r6, pc}
    c968:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c96c:	ea46 0101 	orr.w	r1, r6, r1
    c970:	ea40 0002 	orr.w	r0, r0, r2
    c974:	ea81 0103 	eor.w	r1, r1, r3
    c978:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c97c:	bfc2      	ittt	gt
    c97e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c986:	bd70      	popgt	{r4, r5, r6, pc}
    c988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c98c:	f04f 0e00 	mov.w	lr, #0
    c990:	3c01      	subs	r4, #1
    c992:	f300 80ab 	bgt.w	caec <__aeabi_dmul+0x238>
    c996:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c99a:	bfde      	ittt	le
    c99c:	2000      	movle	r0, #0
    c99e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c9a2:	bd70      	pople	{r4, r5, r6, pc}
    c9a4:	f1c4 0400 	rsb	r4, r4, #0
    c9a8:	3c20      	subs	r4, #32
    c9aa:	da35      	bge.n	ca18 <__aeabi_dmul+0x164>
    c9ac:	340c      	adds	r4, #12
    c9ae:	dc1b      	bgt.n	c9e8 <__aeabi_dmul+0x134>
    c9b0:	f104 0414 	add.w	r4, r4, #20
    c9b4:	f1c4 0520 	rsb	r5, r4, #32
    c9b8:	fa00 f305 	lsl.w	r3, r0, r5
    c9bc:	fa20 f004 	lsr.w	r0, r0, r4
    c9c0:	fa01 f205 	lsl.w	r2, r1, r5
    c9c4:	ea40 0002 	orr.w	r0, r0, r2
    c9c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c9cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c9d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c9d4:	fa21 f604 	lsr.w	r6, r1, r4
    c9d8:	eb42 0106 	adc.w	r1, r2, r6
    c9dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c9e0:	bf08      	it	eq
    c9e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c9e6:	bd70      	pop	{r4, r5, r6, pc}
    c9e8:	f1c4 040c 	rsb	r4, r4, #12
    c9ec:	f1c4 0520 	rsb	r5, r4, #32
    c9f0:	fa00 f304 	lsl.w	r3, r0, r4
    c9f4:	fa20 f005 	lsr.w	r0, r0, r5
    c9f8:	fa01 f204 	lsl.w	r2, r1, r4
    c9fc:	ea40 0002 	orr.w	r0, r0, r2
    ca00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ca04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ca08:	f141 0100 	adc.w	r1, r1, #0
    ca0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ca10:	bf08      	it	eq
    ca12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ca16:	bd70      	pop	{r4, r5, r6, pc}
    ca18:	f1c4 0520 	rsb	r5, r4, #32
    ca1c:	fa00 f205 	lsl.w	r2, r0, r5
    ca20:	ea4e 0e02 	orr.w	lr, lr, r2
    ca24:	fa20 f304 	lsr.w	r3, r0, r4
    ca28:	fa01 f205 	lsl.w	r2, r1, r5
    ca2c:	ea43 0302 	orr.w	r3, r3, r2
    ca30:	fa21 f004 	lsr.w	r0, r1, r4
    ca34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ca38:	fa21 f204 	lsr.w	r2, r1, r4
    ca3c:	ea20 0002 	bic.w	r0, r0, r2
    ca40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    ca44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ca48:	bf08      	it	eq
    ca4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ca4e:	bd70      	pop	{r4, r5, r6, pc}
    ca50:	f094 0f00 	teq	r4, #0
    ca54:	d10f      	bne.n	ca76 <__aeabi_dmul+0x1c2>
    ca56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    ca5a:	0040      	lsls	r0, r0, #1
    ca5c:	eb41 0101 	adc.w	r1, r1, r1
    ca60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ca64:	bf08      	it	eq
    ca66:	3c01      	subeq	r4, #1
    ca68:	d0f7      	beq.n	ca5a <__aeabi_dmul+0x1a6>
    ca6a:	ea41 0106 	orr.w	r1, r1, r6
    ca6e:	f095 0f00 	teq	r5, #0
    ca72:	bf18      	it	ne
    ca74:	4770      	bxne	lr
    ca76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    ca7a:	0052      	lsls	r2, r2, #1
    ca7c:	eb43 0303 	adc.w	r3, r3, r3
    ca80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    ca84:	bf08      	it	eq
    ca86:	3d01      	subeq	r5, #1
    ca88:	d0f7      	beq.n	ca7a <__aeabi_dmul+0x1c6>
    ca8a:	ea43 0306 	orr.w	r3, r3, r6
    ca8e:	4770      	bx	lr
    ca90:	ea94 0f0c 	teq	r4, ip
    ca94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ca98:	bf18      	it	ne
    ca9a:	ea95 0f0c 	teqne	r5, ip
    ca9e:	d00c      	beq.n	caba <__aeabi_dmul+0x206>
    caa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    caa4:	bf18      	it	ne
    caa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    caaa:	d1d1      	bne.n	ca50 <__aeabi_dmul+0x19c>
    caac:	ea81 0103 	eor.w	r1, r1, r3
    cab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cab4:	f04f 0000 	mov.w	r0, #0
    cab8:	bd70      	pop	{r4, r5, r6, pc}
    caba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cabe:	bf06      	itte	eq
    cac0:	4610      	moveq	r0, r2
    cac2:	4619      	moveq	r1, r3
    cac4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cac8:	d019      	beq.n	cafe <__aeabi_dmul+0x24a>
    caca:	ea94 0f0c 	teq	r4, ip
    cace:	d102      	bne.n	cad6 <__aeabi_dmul+0x222>
    cad0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    cad4:	d113      	bne.n	cafe <__aeabi_dmul+0x24a>
    cad6:	ea95 0f0c 	teq	r5, ip
    cada:	d105      	bne.n	cae8 <__aeabi_dmul+0x234>
    cadc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    cae0:	bf1c      	itt	ne
    cae2:	4610      	movne	r0, r2
    cae4:	4619      	movne	r1, r3
    cae6:	d10a      	bne.n	cafe <__aeabi_dmul+0x24a>
    cae8:	ea81 0103 	eor.w	r1, r1, r3
    caec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    caf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    caf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    caf8:	f04f 0000 	mov.w	r0, #0
    cafc:	bd70      	pop	{r4, r5, r6, pc}
    cafe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cb02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    cb06:	bd70      	pop	{r4, r5, r6, pc}

0000cb08 <__aeabi_ddiv>:
    cb08:	b570      	push	{r4, r5, r6, lr}
    cb0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cb0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cb12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cb16:	bf1d      	ittte	ne
    cb18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cb1c:	ea94 0f0c 	teqne	r4, ip
    cb20:	ea95 0f0c 	teqne	r5, ip
    cb24:	f000 f8a7 	bleq	cc76 <__aeabi_ddiv+0x16e>
    cb28:	eba4 0405 	sub.w	r4, r4, r5
    cb2c:	ea81 0e03 	eor.w	lr, r1, r3
    cb30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cb34:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cb38:	f000 8088 	beq.w	cc4c <__aeabi_ddiv+0x144>
    cb3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cb40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cb44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    cb48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    cb4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    cb50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    cb54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    cb58:	ea4f 2600 	mov.w	r6, r0, lsl #8
    cb5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    cb60:	429d      	cmp	r5, r3
    cb62:	bf08      	it	eq
    cb64:	4296      	cmpeq	r6, r2
    cb66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    cb6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    cb6e:	d202      	bcs.n	cb76 <__aeabi_ddiv+0x6e>
    cb70:	085b      	lsrs	r3, r3, #1
    cb72:	ea4f 0232 	mov.w	r2, r2, rrx
    cb76:	1ab6      	subs	r6, r6, r2
    cb78:	eb65 0503 	sbc.w	r5, r5, r3
    cb7c:	085b      	lsrs	r3, r3, #1
    cb7e:	ea4f 0232 	mov.w	r2, r2, rrx
    cb82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    cb86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    cb8a:	ebb6 0e02 	subs.w	lr, r6, r2
    cb8e:	eb75 0e03 	sbcs.w	lr, r5, r3
    cb92:	bf22      	ittt	cs
    cb94:	1ab6      	subcs	r6, r6, r2
    cb96:	4675      	movcs	r5, lr
    cb98:	ea40 000c 	orrcs.w	r0, r0, ip
    cb9c:	085b      	lsrs	r3, r3, #1
    cb9e:	ea4f 0232 	mov.w	r2, r2, rrx
    cba2:	ebb6 0e02 	subs.w	lr, r6, r2
    cba6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbaa:	bf22      	ittt	cs
    cbac:	1ab6      	subcs	r6, r6, r2
    cbae:	4675      	movcs	r5, lr
    cbb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cbb4:	085b      	lsrs	r3, r3, #1
    cbb6:	ea4f 0232 	mov.w	r2, r2, rrx
    cbba:	ebb6 0e02 	subs.w	lr, r6, r2
    cbbe:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbc2:	bf22      	ittt	cs
    cbc4:	1ab6      	subcs	r6, r6, r2
    cbc6:	4675      	movcs	r5, lr
    cbc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cbcc:	085b      	lsrs	r3, r3, #1
    cbce:	ea4f 0232 	mov.w	r2, r2, rrx
    cbd2:	ebb6 0e02 	subs.w	lr, r6, r2
    cbd6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbda:	bf22      	ittt	cs
    cbdc:	1ab6      	subcs	r6, r6, r2
    cbde:	4675      	movcs	r5, lr
    cbe0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cbe4:	ea55 0e06 	orrs.w	lr, r5, r6
    cbe8:	d018      	beq.n	cc1c <__aeabi_ddiv+0x114>
    cbea:	ea4f 1505 	mov.w	r5, r5, lsl #4
    cbee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    cbf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    cbf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    cbfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    cbfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    cc02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    cc06:	d1c0      	bne.n	cb8a <__aeabi_ddiv+0x82>
    cc08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc0c:	d10b      	bne.n	cc26 <__aeabi_ddiv+0x11e>
    cc0e:	ea41 0100 	orr.w	r1, r1, r0
    cc12:	f04f 0000 	mov.w	r0, #0
    cc16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    cc1a:	e7b6      	b.n	cb8a <__aeabi_ddiv+0x82>
    cc1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc20:	bf04      	itt	eq
    cc22:	4301      	orreq	r1, r0
    cc24:	2000      	moveq	r0, #0
    cc26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cc2a:	bf88      	it	hi
    cc2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cc30:	f63f aeaf 	bhi.w	c992 <__aeabi_dmul+0xde>
    cc34:	ebb5 0c03 	subs.w	ip, r5, r3
    cc38:	bf04      	itt	eq
    cc3a:	ebb6 0c02 	subseq.w	ip, r6, r2
    cc3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cc42:	f150 0000 	adcs.w	r0, r0, #0
    cc46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cc4a:	bd70      	pop	{r4, r5, r6, pc}
    cc4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cc50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cc54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cc58:	bfc2      	ittt	gt
    cc5a:	ebd4 050c 	rsbsgt	r5, r4, ip
    cc5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cc62:	bd70      	popgt	{r4, r5, r6, pc}
    cc64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cc68:	f04f 0e00 	mov.w	lr, #0
    cc6c:	3c01      	subs	r4, #1
    cc6e:	e690      	b.n	c992 <__aeabi_dmul+0xde>
    cc70:	ea45 0e06 	orr.w	lr, r5, r6
    cc74:	e68d      	b.n	c992 <__aeabi_dmul+0xde>
    cc76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cc7a:	ea94 0f0c 	teq	r4, ip
    cc7e:	bf08      	it	eq
    cc80:	ea95 0f0c 	teqeq	r5, ip
    cc84:	f43f af3b 	beq.w	cafe <__aeabi_dmul+0x24a>
    cc88:	ea94 0f0c 	teq	r4, ip
    cc8c:	d10a      	bne.n	cca4 <__aeabi_ddiv+0x19c>
    cc8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cc92:	f47f af34 	bne.w	cafe <__aeabi_dmul+0x24a>
    cc96:	ea95 0f0c 	teq	r5, ip
    cc9a:	f47f af25 	bne.w	cae8 <__aeabi_dmul+0x234>
    cc9e:	4610      	mov	r0, r2
    cca0:	4619      	mov	r1, r3
    cca2:	e72c      	b.n	cafe <__aeabi_dmul+0x24a>
    cca4:	ea95 0f0c 	teq	r5, ip
    cca8:	d106      	bne.n	ccb8 <__aeabi_ddiv+0x1b0>
    ccaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ccae:	f43f aefd 	beq.w	caac <__aeabi_dmul+0x1f8>
    ccb2:	4610      	mov	r0, r2
    ccb4:	4619      	mov	r1, r3
    ccb6:	e722      	b.n	cafe <__aeabi_dmul+0x24a>
    ccb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ccbc:	bf18      	it	ne
    ccbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ccc2:	f47f aec5 	bne.w	ca50 <__aeabi_dmul+0x19c>
    ccc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ccca:	f47f af0d 	bne.w	cae8 <__aeabi_dmul+0x234>
    ccce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ccd2:	f47f aeeb 	bne.w	caac <__aeabi_dmul+0x1f8>
    ccd6:	e712      	b.n	cafe <__aeabi_dmul+0x24a>

0000ccd8 <__gedf2>:
    ccd8:	f04f 3cff 	mov.w	ip, #4294967295
    ccdc:	e006      	b.n	ccec <__cmpdf2+0x4>
    ccde:	bf00      	nop

0000cce0 <__ledf2>:
    cce0:	f04f 0c01 	mov.w	ip, #1
    cce4:	e002      	b.n	ccec <__cmpdf2+0x4>
    cce6:	bf00      	nop

0000cce8 <__cmpdf2>:
    cce8:	f04f 0c01 	mov.w	ip, #1
    ccec:	f84d cd04 	str.w	ip, [sp, #-4]!
    ccf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ccf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ccf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ccfc:	bf18      	it	ne
    ccfe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    cd02:	d01b      	beq.n	cd3c <__cmpdf2+0x54>
    cd04:	b001      	add	sp, #4
    cd06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cd0a:	bf0c      	ite	eq
    cd0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cd10:	ea91 0f03 	teqne	r1, r3
    cd14:	bf02      	ittt	eq
    cd16:	ea90 0f02 	teqeq	r0, r2
    cd1a:	2000      	moveq	r0, #0
    cd1c:	4770      	bxeq	lr
    cd1e:	f110 0f00 	cmn.w	r0, #0
    cd22:	ea91 0f03 	teq	r1, r3
    cd26:	bf58      	it	pl
    cd28:	4299      	cmppl	r1, r3
    cd2a:	bf08      	it	eq
    cd2c:	4290      	cmpeq	r0, r2
    cd2e:	bf2c      	ite	cs
    cd30:	17d8      	asrcs	r0, r3, #31
    cd32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cd36:	f040 0001 	orr.w	r0, r0, #1
    cd3a:	4770      	bx	lr
    cd3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cd40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd44:	d102      	bne.n	cd4c <__cmpdf2+0x64>
    cd46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cd4a:	d107      	bne.n	cd5c <__cmpdf2+0x74>
    cd4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cd50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd54:	d1d6      	bne.n	cd04 <__cmpdf2+0x1c>
    cd56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cd5a:	d0d3      	beq.n	cd04 <__cmpdf2+0x1c>
    cd5c:	f85d 0b04 	ldr.w	r0, [sp], #4
    cd60:	4770      	bx	lr
    cd62:	bf00      	nop

0000cd64 <__aeabi_cdrcmple>:
    cd64:	4684      	mov	ip, r0
    cd66:	4610      	mov	r0, r2
    cd68:	4662      	mov	r2, ip
    cd6a:	468c      	mov	ip, r1
    cd6c:	4619      	mov	r1, r3
    cd6e:	4663      	mov	r3, ip
    cd70:	e000      	b.n	cd74 <__aeabi_cdcmpeq>
    cd72:	bf00      	nop

0000cd74 <__aeabi_cdcmpeq>:
    cd74:	b501      	push	{r0, lr}
    cd76:	f7ff ffb7 	bl	cce8 <__cmpdf2>
    cd7a:	2800      	cmp	r0, #0
    cd7c:	bf48      	it	mi
    cd7e:	f110 0f00 	cmnmi.w	r0, #0
    cd82:	bd01      	pop	{r0, pc}

0000cd84 <__aeabi_dcmpeq>:
    cd84:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd88:	f7ff fff4 	bl	cd74 <__aeabi_cdcmpeq>
    cd8c:	bf0c      	ite	eq
    cd8e:	2001      	moveq	r0, #1
    cd90:	2000      	movne	r0, #0
    cd92:	f85d fb08 	ldr.w	pc, [sp], #8
    cd96:	bf00      	nop

0000cd98 <__aeabi_dcmplt>:
    cd98:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd9c:	f7ff ffea 	bl	cd74 <__aeabi_cdcmpeq>
    cda0:	bf34      	ite	cc
    cda2:	2001      	movcc	r0, #1
    cda4:	2000      	movcs	r0, #0
    cda6:	f85d fb08 	ldr.w	pc, [sp], #8
    cdaa:	bf00      	nop

0000cdac <__aeabi_dcmple>:
    cdac:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdb0:	f7ff ffe0 	bl	cd74 <__aeabi_cdcmpeq>
    cdb4:	bf94      	ite	ls
    cdb6:	2001      	movls	r0, #1
    cdb8:	2000      	movhi	r0, #0
    cdba:	f85d fb08 	ldr.w	pc, [sp], #8
    cdbe:	bf00      	nop

0000cdc0 <__aeabi_dcmpge>:
    cdc0:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdc4:	f7ff ffce 	bl	cd64 <__aeabi_cdrcmple>
    cdc8:	bf94      	ite	ls
    cdca:	2001      	movls	r0, #1
    cdcc:	2000      	movhi	r0, #0
    cdce:	f85d fb08 	ldr.w	pc, [sp], #8
    cdd2:	bf00      	nop

0000cdd4 <__aeabi_dcmpgt>:
    cdd4:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdd8:	f7ff ffc4 	bl	cd64 <__aeabi_cdrcmple>
    cddc:	bf34      	ite	cc
    cdde:	2001      	movcc	r0, #1
    cde0:	2000      	movcs	r0, #0
    cde2:	f85d fb08 	ldr.w	pc, [sp], #8
    cde6:	bf00      	nop

0000cde8 <__aeabi_dcmpun>:
    cde8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cdec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cdf0:	d102      	bne.n	cdf8 <__aeabi_dcmpun+0x10>
    cdf2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cdf6:	d10a      	bne.n	ce0e <__aeabi_dcmpun+0x26>
    cdf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cdfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ce00:	d102      	bne.n	ce08 <__aeabi_dcmpun+0x20>
    ce02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ce06:	d102      	bne.n	ce0e <__aeabi_dcmpun+0x26>
    ce08:	f04f 0000 	mov.w	r0, #0
    ce0c:	4770      	bx	lr
    ce0e:	f04f 0001 	mov.w	r0, #1
    ce12:	4770      	bx	lr

0000ce14 <__aeabi_d2iz>:
    ce14:	ea4f 0241 	mov.w	r2, r1, lsl #1
    ce18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    ce1c:	d215      	bcs.n	ce4a <__aeabi_d2iz+0x36>
    ce1e:	d511      	bpl.n	ce44 <__aeabi_d2iz+0x30>
    ce20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ce24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ce28:	d912      	bls.n	ce50 <__aeabi_d2iz+0x3c>
    ce2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ce2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ce32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ce36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ce3a:	fa23 f002 	lsr.w	r0, r3, r2
    ce3e:	bf18      	it	ne
    ce40:	4240      	negne	r0, r0
    ce42:	4770      	bx	lr
    ce44:	f04f 0000 	mov.w	r0, #0
    ce48:	4770      	bx	lr
    ce4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    ce4e:	d105      	bne.n	ce5c <__aeabi_d2iz+0x48>
    ce50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    ce54:	bf08      	it	eq
    ce56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    ce5a:	4770      	bx	lr
    ce5c:	f04f 0000 	mov.w	r0, #0
    ce60:	4770      	bx	lr
    ce62:	bf00      	nop

0000ce64 <strcmp>:
    ce64:	f810 2b01 	ldrb.w	r2, [r0], #1
    ce68:	f811 3b01 	ldrb.w	r3, [r1], #1
    ce6c:	2a01      	cmp	r2, #1
    ce6e:	bf28      	it	cs
    ce70:	429a      	cmpcs	r2, r3
    ce72:	d0f7      	beq.n	ce64 <strcmp>
    ce74:	1ad0      	subs	r0, r2, r3
    ce76:	4770      	bx	lr

0000ce78 <strlen>:
    ce78:	4603      	mov	r3, r0
    ce7a:	f813 2b01 	ldrb.w	r2, [r3], #1
    ce7e:	2a00      	cmp	r2, #0
    ce80:	d1fb      	bne.n	ce7a <strlen+0x2>
    ce82:	1a18      	subs	r0, r3, r0
    ce84:	3801      	subs	r0, #1
    ce86:	4770      	bx	lr

0000ce88 <_dtoa_r>:
    ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce8c:	6a47      	ldr	r7, [r0, #36]	; 0x24
    ce8e:	b099      	sub	sp, #100	; 0x64
    ce90:	4683      	mov	fp, r0
    ce92:	9108      	str	r1, [sp, #32]
    ce94:	920d      	str	r2, [sp, #52]	; 0x34
    ce96:	9314      	str	r3, [sp, #80]	; 0x50
    ce98:	9e22      	ldr	r6, [sp, #136]	; 0x88
    ce9a:	ec55 4b10 	vmov	r4, r5, d0
    ce9e:	e9cd 4500 	strd	r4, r5, [sp]
    cea2:	b947      	cbnz	r7, ceb6 <_dtoa_r+0x2e>
    cea4:	2010      	movs	r0, #16
    cea6:	f00d fa8b 	bl	1a3c0 <malloc>
    ceaa:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    ceae:	6007      	str	r7, [r0, #0]
    ceb0:	60c7      	str	r7, [r0, #12]
    ceb2:	e9c0 7701 	strd	r7, r7, [r0, #4]
    ceb6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ceba:	6819      	ldr	r1, [r3, #0]
    cebc:	b159      	cbz	r1, ced6 <_dtoa_r+0x4e>
    cebe:	685a      	ldr	r2, [r3, #4]
    cec0:	2301      	movs	r3, #1
    cec2:	4658      	mov	r0, fp
    cec4:	4093      	lsls	r3, r2
    cec6:	604a      	str	r2, [r1, #4]
    cec8:	608b      	str	r3, [r1, #8]
    ceca:	f00f fd86 	bl	1c9da <_Bfree>
    cece:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ced2:	2200      	movs	r2, #0
    ced4:	601a      	str	r2, [r3, #0]
    ced6:	1e2b      	subs	r3, r5, #0
    ced8:	bfb7      	itett	lt
    ceda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    cede:	2300      	movge	r3, #0
    cee0:	2201      	movlt	r2, #1
    cee2:	9301      	strlt	r3, [sp, #4]
    cee4:	bfa8      	it	ge
    cee6:	6033      	strge	r3, [r6, #0]
    cee8:	9c01      	ldr	r4, [sp, #4]
    ceea:	4bb1      	ldr	r3, [pc, #708]	; (d1b0 <_dtoa_r+0x328>)
    ceec:	bfb8      	it	lt
    ceee:	6032      	strlt	r2, [r6, #0]
    cef0:	43a3      	bics	r3, r4
    cef2:	d11a      	bne.n	cf2a <_dtoa_r+0xa2>
    cef4:	f242 730f 	movw	r3, #9999	; 0x270f
    cef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cefa:	6013      	str	r3, [r2, #0]
    cefc:	f3c4 0313 	ubfx	r3, r4, #0, #20
    cf00:	9a00      	ldr	r2, [sp, #0]
    cf02:	4313      	orrs	r3, r2
    cf04:	f000 8547 	beq.w	d996 <_dtoa_r+0xb0e>
    cf08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cf0a:	b953      	cbnz	r3, cf22 <_dtoa_r+0x9a>
    cf0c:	4ba9      	ldr	r3, [pc, #676]	; (d1b4 <_dtoa_r+0x32c>)
    cf0e:	e023      	b.n	cf58 <_dtoa_r+0xd0>
    cf10:	4ba9      	ldr	r3, [pc, #676]	; (d1b8 <_dtoa_r+0x330>)
    cf12:	9303      	str	r3, [sp, #12]
    cf14:	3308      	adds	r3, #8
    cf16:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    cf18:	6013      	str	r3, [r2, #0]
    cf1a:	9803      	ldr	r0, [sp, #12]
    cf1c:	b019      	add	sp, #100	; 0x64
    cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf22:	4ba4      	ldr	r3, [pc, #656]	; (d1b4 <_dtoa_r+0x32c>)
    cf24:	9303      	str	r3, [sp, #12]
    cf26:	3303      	adds	r3, #3
    cf28:	e7f5      	b.n	cf16 <_dtoa_r+0x8e>
    cf2a:	ed9d 7b00 	vldr	d7, [sp]
    cf2e:	2200      	movs	r2, #0
    cf30:	2300      	movs	r3, #0
    cf32:	ec51 0b17 	vmov	r0, r1, d7
    cf36:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    cf3a:	f7ff ff23 	bl	cd84 <__aeabi_dcmpeq>
    cf3e:	4607      	mov	r7, r0
    cf40:	b160      	cbz	r0, cf5c <_dtoa_r+0xd4>
    cf42:	2301      	movs	r3, #1
    cf44:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cf46:	6013      	str	r3, [r2, #0]
    cf48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	f000 8520 	beq.w	d990 <_dtoa_r+0xb08>
    cf50:	4b9a      	ldr	r3, [pc, #616]	; (d1bc <_dtoa_r+0x334>)
    cf52:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    cf54:	6013      	str	r3, [r2, #0]
    cf56:	3b01      	subs	r3, #1
    cf58:	9303      	str	r3, [sp, #12]
    cf5a:	e7de      	b.n	cf1a <_dtoa_r+0x92>
    cf5c:	f3c4 560a 	ubfx	r6, r4, #20, #11
    cf60:	aa16      	add	r2, sp, #88	; 0x58
    cf62:	a917      	add	r1, sp, #92	; 0x5c
    cf64:	4658      	mov	r0, fp
    cf66:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
    cf6a:	f00f ff3f 	bl	1cdec <__d2b>
    cf6e:	4680      	mov	r8, r0
    cf70:	2e00      	cmp	r6, #0
    cf72:	d07d      	beq.n	d070 <_dtoa_r+0x1e8>
    cf74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf76:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    cf7a:	9715      	str	r7, [sp, #84]	; 0x54
    cf7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    cf80:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    cf84:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
    cf88:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    cf8c:	2200      	movs	r2, #0
    cf8e:	4b8c      	ldr	r3, [pc, #560]	; (d1c0 <_dtoa_r+0x338>)
    cf90:	4620      	mov	r0, r4
    cf92:	4629      	mov	r1, r5
    cf94:	f7ff f958 	bl	c248 <__aeabi_dsub>
    cf98:	a37f      	add	r3, pc, #508	; (adr r3, d198 <_dtoa_r+0x310>)
    cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf9e:	f7ff fc89 	bl	c8b4 <__aeabi_dmul>
    cfa2:	a37f      	add	r3, pc, #508	; (adr r3, d1a0 <_dtoa_r+0x318>)
    cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfa8:	f7ff f950 	bl	c24c <__adddf3>
    cfac:	4604      	mov	r4, r0
    cfae:	460d      	mov	r5, r1
    cfb0:	4630      	mov	r0, r6
    cfb2:	f7ff fa97 	bl	c4e4 <__aeabi_i2d>
    cfb6:	a37c      	add	r3, pc, #496	; (adr r3, d1a8 <_dtoa_r+0x320>)
    cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfbc:	f7ff fc7a 	bl	c8b4 <__aeabi_dmul>
    cfc0:	4602      	mov	r2, r0
    cfc2:	460b      	mov	r3, r1
    cfc4:	4620      	mov	r0, r4
    cfc6:	4629      	mov	r1, r5
    cfc8:	f7ff f940 	bl	c24c <__adddf3>
    cfcc:	4604      	mov	r4, r0
    cfce:	460d      	mov	r5, r1
    cfd0:	f7ff ff20 	bl	ce14 <__aeabi_d2iz>
    cfd4:	2200      	movs	r2, #0
    cfd6:	4682      	mov	sl, r0
    cfd8:	2300      	movs	r3, #0
    cfda:	4620      	mov	r0, r4
    cfdc:	4629      	mov	r1, r5
    cfde:	f7ff fedb 	bl	cd98 <__aeabi_dcmplt>
    cfe2:	b148      	cbz	r0, cff8 <_dtoa_r+0x170>
    cfe4:	4650      	mov	r0, sl
    cfe6:	f7ff fa7d 	bl	c4e4 <__aeabi_i2d>
    cfea:	4622      	mov	r2, r4
    cfec:	462b      	mov	r3, r5
    cfee:	f7ff fec9 	bl	cd84 <__aeabi_dcmpeq>
    cff2:	b908      	cbnz	r0, cff8 <_dtoa_r+0x170>
    cff4:	f10a 3aff 	add.w	sl, sl, #4294967295
    cff8:	f1ba 0f16 	cmp.w	sl, #22
    cffc:	d857      	bhi.n	d0ae <_dtoa_r+0x226>
    cffe:	4b71      	ldr	r3, [pc, #452]	; (d1c4 <_dtoa_r+0x33c>)
    d000:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d004:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d008:	e9d3 2300 	ldrd	r2, r3, [r3]
    d00c:	f7ff fec4 	bl	cd98 <__aeabi_dcmplt>
    d010:	2800      	cmp	r0, #0
    d012:	d04e      	beq.n	d0b2 <_dtoa_r+0x22a>
    d014:	f10a 3aff 	add.w	sl, sl, #4294967295
    d018:	2300      	movs	r3, #0
    d01a:	9311      	str	r3, [sp, #68]	; 0x44
    d01c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d01e:	1b9e      	subs	r6, r3, r6
    d020:	1e73      	subs	r3, r6, #1
    d022:	9307      	str	r3, [sp, #28]
    d024:	bf49      	itett	mi
    d026:	f1c6 0301 	rsbmi	r3, r6, #1
    d02a:	2300      	movpl	r3, #0
    d02c:	9306      	strmi	r3, [sp, #24]
    d02e:	2300      	movmi	r3, #0
    d030:	bf54      	ite	pl
    d032:	9306      	strpl	r3, [sp, #24]
    d034:	9307      	strmi	r3, [sp, #28]
    d036:	f1ba 0f00 	cmp.w	sl, #0
    d03a:	db3c      	blt.n	d0b6 <_dtoa_r+0x22e>
    d03c:	9b07      	ldr	r3, [sp, #28]
    d03e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    d042:	4453      	add	r3, sl
    d044:	9307      	str	r3, [sp, #28]
    d046:	2300      	movs	r3, #0
    d048:	9309      	str	r3, [sp, #36]	; 0x24
    d04a:	9b08      	ldr	r3, [sp, #32]
    d04c:	2b09      	cmp	r3, #9
    d04e:	f200 808d 	bhi.w	d16c <_dtoa_r+0x2e4>
    d052:	2b05      	cmp	r3, #5
    d054:	bfc5      	ittet	gt
    d056:	3b04      	subgt	r3, #4
    d058:	2400      	movgt	r4, #0
    d05a:	2401      	movle	r4, #1
    d05c:	9308      	strgt	r3, [sp, #32]
    d05e:	9b08      	ldr	r3, [sp, #32]
    d060:	3b02      	subs	r3, #2
    d062:	2b03      	cmp	r3, #3
    d064:	f200 808d 	bhi.w	d182 <_dtoa_r+0x2fa>
    d068:	e8df f003 	tbb	[pc, r3]
    d06c:	7e3a3c2f 	.word	0x7e3a3c2f
    d070:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
    d074:	441e      	add	r6, r3
    d076:	f206 4032 	addw	r0, r6, #1074	; 0x432
    d07a:	2820      	cmp	r0, #32
    d07c:	dd11      	ble.n	d0a2 <_dtoa_r+0x21a>
    d07e:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
    d082:	9b00      	ldr	r3, [sp, #0]
    d084:	4084      	lsls	r4, r0
    d086:	f206 4012 	addw	r0, r6, #1042	; 0x412
    d08a:	fa23 f000 	lsr.w	r0, r3, r0
    d08e:	4320      	orrs	r0, r4
    d090:	f7ff fa18 	bl	c4c4 <__aeabi_ui2d>
    d094:	2301      	movs	r3, #1
    d096:	4604      	mov	r4, r0
    d098:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
    d09c:	3e01      	subs	r6, #1
    d09e:	9315      	str	r3, [sp, #84]	; 0x54
    d0a0:	e774      	b.n	cf8c <_dtoa_r+0x104>
    d0a2:	f1c0 0020 	rsb	r0, r0, #32
    d0a6:	9b00      	ldr	r3, [sp, #0]
    d0a8:	fa03 f000 	lsl.w	r0, r3, r0
    d0ac:	e7f0      	b.n	d090 <_dtoa_r+0x208>
    d0ae:	2301      	movs	r3, #1
    d0b0:	e7b3      	b.n	d01a <_dtoa_r+0x192>
    d0b2:	9011      	str	r0, [sp, #68]	; 0x44
    d0b4:	e7b2      	b.n	d01c <_dtoa_r+0x194>
    d0b6:	9b06      	ldr	r3, [sp, #24]
    d0b8:	eba3 030a 	sub.w	r3, r3, sl
    d0bc:	9306      	str	r3, [sp, #24]
    d0be:	f1ca 0300 	rsb	r3, sl, #0
    d0c2:	9309      	str	r3, [sp, #36]	; 0x24
    d0c4:	2300      	movs	r3, #0
    d0c6:	9310      	str	r3, [sp, #64]	; 0x40
    d0c8:	e7bf      	b.n	d04a <_dtoa_r+0x1c2>
    d0ca:	2300      	movs	r3, #0
    d0cc:	930c      	str	r3, [sp, #48]	; 0x30
    d0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	dc59      	bgt.n	d188 <_dtoa_r+0x300>
    d0d4:	2301      	movs	r3, #1
    d0d6:	4699      	mov	r9, r3
    d0d8:	461a      	mov	r2, r3
    d0da:	9304      	str	r3, [sp, #16]
    d0dc:	920d      	str	r2, [sp, #52]	; 0x34
    d0de:	e00c      	b.n	d0fa <_dtoa_r+0x272>
    d0e0:	2301      	movs	r3, #1
    d0e2:	e7f3      	b.n	d0cc <_dtoa_r+0x244>
    d0e4:	2300      	movs	r3, #0
    d0e6:	930c      	str	r3, [sp, #48]	; 0x30
    d0e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0ea:	4453      	add	r3, sl
    d0ec:	f103 0901 	add.w	r9, r3, #1
    d0f0:	9304      	str	r3, [sp, #16]
    d0f2:	464b      	mov	r3, r9
    d0f4:	2b01      	cmp	r3, #1
    d0f6:	bfb8      	it	lt
    d0f8:	2301      	movlt	r3, #1
    d0fa:	2200      	movs	r2, #0
    d0fc:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
    d100:	606a      	str	r2, [r5, #4]
    d102:	2204      	movs	r2, #4
    d104:	f102 0014 	add.w	r0, r2, #20
    d108:	6869      	ldr	r1, [r5, #4]
    d10a:	4298      	cmp	r0, r3
    d10c:	d940      	bls.n	d190 <_dtoa_r+0x308>
    d10e:	4658      	mov	r0, fp
    d110:	f00f fc2f 	bl	1c972 <_Balloc>
    d114:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    d118:	6028      	str	r0, [r5, #0]
    d11a:	f1b9 0f0e 	cmp.w	r9, #14
    d11e:	681b      	ldr	r3, [r3, #0]
    d120:	9303      	str	r3, [sp, #12]
    d122:	f200 80d4 	bhi.w	d2ce <_dtoa_r+0x446>
    d126:	2c00      	cmp	r4, #0
    d128:	f000 80d1 	beq.w	d2ce <_dtoa_r+0x446>
    d12c:	f1ba 0f00 	cmp.w	sl, #0
    d130:	dd66      	ble.n	d200 <_dtoa_r+0x378>
    d132:	4a24      	ldr	r2, [pc, #144]	; (d1c4 <_dtoa_r+0x33c>)
    d134:	f00a 030f 	and.w	r3, sl, #15
    d138:	ea4f 142a 	mov.w	r4, sl, asr #4
    d13c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d140:	06e2      	lsls	r2, r4, #27
    d142:	ed93 7b00 	vldr	d7, [r3]
    d146:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    d14a:	d557      	bpl.n	d1fc <_dtoa_r+0x374>
    d14c:	4b1e      	ldr	r3, [pc, #120]	; (d1c8 <_dtoa_r+0x340>)
    d14e:	f004 040f 	and.w	r4, r4, #15
    d152:	2603      	movs	r6, #3
    d154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    d158:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d15c:	f7ff fcd4 	bl	cb08 <__aeabi_ddiv>
    d160:	e9cd 0100 	strd	r0, r1, [sp]
    d164:	4d18      	ldr	r5, [pc, #96]	; (d1c8 <_dtoa_r+0x340>)
    d166:	e03e      	b.n	d1e6 <_dtoa_r+0x35e>
    d168:	2301      	movs	r3, #1
    d16a:	e7bc      	b.n	d0e6 <_dtoa_r+0x25e>
    d16c:	2401      	movs	r4, #1
    d16e:	2300      	movs	r3, #0
    d170:	940c      	str	r4, [sp, #48]	; 0x30
    d172:	9308      	str	r3, [sp, #32]
    d174:	f04f 33ff 	mov.w	r3, #4294967295
    d178:	2200      	movs	r2, #0
    d17a:	9304      	str	r3, [sp, #16]
    d17c:	4699      	mov	r9, r3
    d17e:	2312      	movs	r3, #18
    d180:	e7ac      	b.n	d0dc <_dtoa_r+0x254>
    d182:	2301      	movs	r3, #1
    d184:	930c      	str	r3, [sp, #48]	; 0x30
    d186:	e7f5      	b.n	d174 <_dtoa_r+0x2ec>
    d188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d18a:	9304      	str	r3, [sp, #16]
    d18c:	4699      	mov	r9, r3
    d18e:	e7b4      	b.n	d0fa <_dtoa_r+0x272>
    d190:	3101      	adds	r1, #1
    d192:	0052      	lsls	r2, r2, #1
    d194:	6069      	str	r1, [r5, #4]
    d196:	e7b5      	b.n	d104 <_dtoa_r+0x27c>
    d198:	636f4361 	.word	0x636f4361
    d19c:	3fd287a7 	.word	0x3fd287a7
    d1a0:	8b60c8b3 	.word	0x8b60c8b3
    d1a4:	3fc68a28 	.word	0x3fc68a28
    d1a8:	509f79fb 	.word	0x509f79fb
    d1ac:	3fd34413 	.word	0x3fd34413
    d1b0:	7ff00000 	.word	0x7ff00000
    d1b4:	0001df33 	.word	0x0001df33
    d1b8:	0001df2a 	.word	0x0001df2a
    d1bc:	0001dc4b 	.word	0x0001dc4b
    d1c0:	3ff80000 	.word	0x3ff80000
    d1c4:	0001d3f0 	.word	0x0001d3f0
    d1c8:	0001d3c8 	.word	0x0001d3c8
    d1cc:	07e3      	lsls	r3, r4, #31
    d1ce:	d508      	bpl.n	d1e2 <_dtoa_r+0x35a>
    d1d0:	3601      	adds	r6, #1
    d1d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d1d6:	e9d5 2300 	ldrd	r2, r3, [r5]
    d1da:	f7ff fb6b 	bl	c8b4 <__aeabi_dmul>
    d1de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    d1e2:	1064      	asrs	r4, r4, #1
    d1e4:	3508      	adds	r5, #8
    d1e6:	2c00      	cmp	r4, #0
    d1e8:	d1f0      	bne.n	d1cc <_dtoa_r+0x344>
    d1ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    d1ee:	e9dd 0100 	ldrd	r0, r1, [sp]
    d1f2:	f7ff fc89 	bl	cb08 <__aeabi_ddiv>
    d1f6:	e9cd 0100 	strd	r0, r1, [sp]
    d1fa:	e01a      	b.n	d232 <_dtoa_r+0x3aa>
    d1fc:	2602      	movs	r6, #2
    d1fe:	e7b1      	b.n	d164 <_dtoa_r+0x2dc>
    d200:	f000 809f 	beq.w	d342 <_dtoa_r+0x4ba>
    d204:	f1ca 0400 	rsb	r4, sl, #0
    d208:	4b9e      	ldr	r3, [pc, #632]	; (d484 <_dtoa_r+0x5fc>)
    d20a:	4d9f      	ldr	r5, [pc, #636]	; (d488 <_dtoa_r+0x600>)
    d20c:	2602      	movs	r6, #2
    d20e:	f004 020f 	and.w	r2, r4, #15
    d212:	1124      	asrs	r4, r4, #4
    d214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d218:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d220:	f7ff fb48 	bl	c8b4 <__aeabi_dmul>
    d224:	2300      	movs	r3, #0
    d226:	e9cd 0100 	strd	r0, r1, [sp]
    d22a:	2c00      	cmp	r4, #0
    d22c:	d17e      	bne.n	d32c <_dtoa_r+0x4a4>
    d22e:	2b00      	cmp	r3, #0
    d230:	d1e1      	bne.n	d1f6 <_dtoa_r+0x36e>
    d232:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d234:	2b00      	cmp	r3, #0
    d236:	f000 8086 	beq.w	d346 <_dtoa_r+0x4be>
    d23a:	2200      	movs	r2, #0
    d23c:	4b93      	ldr	r3, [pc, #588]	; (d48c <_dtoa_r+0x604>)
    d23e:	e9dd 4500 	ldrd	r4, r5, [sp]
    d242:	4620      	mov	r0, r4
    d244:	4629      	mov	r1, r5
    d246:	f7ff fda7 	bl	cd98 <__aeabi_dcmplt>
    d24a:	2800      	cmp	r0, #0
    d24c:	d07b      	beq.n	d346 <_dtoa_r+0x4be>
    d24e:	f1b9 0f00 	cmp.w	r9, #0
    d252:	d078      	beq.n	d346 <_dtoa_r+0x4be>
    d254:	9b04      	ldr	r3, [sp, #16]
    d256:	2b00      	cmp	r3, #0
    d258:	dd35      	ble.n	d2c6 <_dtoa_r+0x43e>
    d25a:	f10a 33ff 	add.w	r3, sl, #4294967295
    d25e:	4620      	mov	r0, r4
    d260:	2200      	movs	r2, #0
    d262:	4629      	mov	r1, r5
    d264:	930a      	str	r3, [sp, #40]	; 0x28
    d266:	3601      	adds	r6, #1
    d268:	4b89      	ldr	r3, [pc, #548]	; (d490 <_dtoa_r+0x608>)
    d26a:	f7ff fb23 	bl	c8b4 <__aeabi_dmul>
    d26e:	9c04      	ldr	r4, [sp, #16]
    d270:	e9cd 0100 	strd	r0, r1, [sp]
    d274:	4630      	mov	r0, r6
    d276:	f7ff f935 	bl	c4e4 <__aeabi_i2d>
    d27a:	e9dd 2300 	ldrd	r2, r3, [sp]
    d27e:	f7ff fb19 	bl	c8b4 <__aeabi_dmul>
    d282:	2200      	movs	r2, #0
    d284:	4b83      	ldr	r3, [pc, #524]	; (d494 <_dtoa_r+0x60c>)
    d286:	f7fe ffe1 	bl	c24c <__adddf3>
    d28a:	4606      	mov	r6, r0
    d28c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    d290:	2c00      	cmp	r4, #0
    d292:	d15c      	bne.n	d34e <_dtoa_r+0x4c6>
    d294:	2200      	movs	r2, #0
    d296:	4b80      	ldr	r3, [pc, #512]	; (d498 <_dtoa_r+0x610>)
    d298:	e9dd 0100 	ldrd	r0, r1, [sp]
    d29c:	f7fe ffd4 	bl	c248 <__aeabi_dsub>
    d2a0:	4632      	mov	r2, r6
    d2a2:	463b      	mov	r3, r7
    d2a4:	e9cd 0100 	strd	r0, r1, [sp]
    d2a8:	f7ff fd94 	bl	cdd4 <__aeabi_dcmpgt>
    d2ac:	2800      	cmp	r0, #0
    d2ae:	f040 8289 	bne.w	d7c4 <_dtoa_r+0x93c>
    d2b2:	4632      	mov	r2, r6
    d2b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    d2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
    d2bc:	f7ff fd6c 	bl	cd98 <__aeabi_dcmplt>
    d2c0:	2800      	cmp	r0, #0
    d2c2:	f040 827d 	bne.w	d7c0 <_dtoa_r+0x938>
    d2c6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
    d2ca:	e9cd 3400 	strd	r3, r4, [sp]
    d2ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	f2c0 814c 	blt.w	d56e <_dtoa_r+0x6e6>
    d2d6:	f1ba 0f0e 	cmp.w	sl, #14
    d2da:	f300 8148 	bgt.w	d56e <_dtoa_r+0x6e6>
    d2de:	4b69      	ldr	r3, [pc, #420]	; (d484 <_dtoa_r+0x5fc>)
    d2e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d2e4:	ed93 7b00 	vldr	d7, [r3]
    d2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	ed8d 7b04 	vstr	d7, [sp, #16]
    d2f0:	f280 80d6 	bge.w	d4a0 <_dtoa_r+0x618>
    d2f4:	f1b9 0f00 	cmp.w	r9, #0
    d2f8:	f300 80d2 	bgt.w	d4a0 <_dtoa_r+0x618>
    d2fc:	f040 825f 	bne.w	d7be <_dtoa_r+0x936>
    d300:	2200      	movs	r2, #0
    d302:	4b65      	ldr	r3, [pc, #404]	; (d498 <_dtoa_r+0x610>)
    d304:	464c      	mov	r4, r9
    d306:	464e      	mov	r6, r9
    d308:	ec51 0b17 	vmov	r0, r1, d7
    d30c:	f7ff fad2 	bl	c8b4 <__aeabi_dmul>
    d310:	e9dd 2300 	ldrd	r2, r3, [sp]
    d314:	f7ff fd54 	bl	cdc0 <__aeabi_dcmpge>
    d318:	2800      	cmp	r0, #0
    d31a:	f040 8238 	bne.w	d78e <_dtoa_r+0x906>
    d31e:	9d03      	ldr	r5, [sp, #12]
    d320:	2331      	movs	r3, #49	; 0x31
    d322:	f10a 0a01 	add.w	sl, sl, #1
    d326:	f805 3b01 	strb.w	r3, [r5], #1
    d32a:	e234      	b.n	d796 <_dtoa_r+0x90e>
    d32c:	07e7      	lsls	r7, r4, #31
    d32e:	d505      	bpl.n	d33c <_dtoa_r+0x4b4>
    d330:	3601      	adds	r6, #1
    d332:	e9d5 2300 	ldrd	r2, r3, [r5]
    d336:	f7ff fabd 	bl	c8b4 <__aeabi_dmul>
    d33a:	2301      	movs	r3, #1
    d33c:	1064      	asrs	r4, r4, #1
    d33e:	3508      	adds	r5, #8
    d340:	e773      	b.n	d22a <_dtoa_r+0x3a2>
    d342:	2602      	movs	r6, #2
    d344:	e775      	b.n	d232 <_dtoa_r+0x3aa>
    d346:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    d34a:	464c      	mov	r4, r9
    d34c:	e792      	b.n	d274 <_dtoa_r+0x3ec>
    d34e:	4b4d      	ldr	r3, [pc, #308]	; (d484 <_dtoa_r+0x5fc>)
    d350:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    d354:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    d358:	9b03      	ldr	r3, [sp, #12]
    d35a:	441c      	add	r4, r3
    d35c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d35e:	2b00      	cmp	r3, #0
    d360:	d046      	beq.n	d3f0 <_dtoa_r+0x568>
    d362:	4602      	mov	r2, r0
    d364:	460b      	mov	r3, r1
    d366:	2000      	movs	r0, #0
    d368:	494c      	ldr	r1, [pc, #304]	; (d49c <_dtoa_r+0x614>)
    d36a:	f7ff fbcd 	bl	cb08 <__aeabi_ddiv>
    d36e:	4632      	mov	r2, r6
    d370:	463b      	mov	r3, r7
    d372:	f7fe ff69 	bl	c248 <__aeabi_dsub>
    d376:	9d03      	ldr	r5, [sp, #12]
    d378:	4606      	mov	r6, r0
    d37a:	460f      	mov	r7, r1
    d37c:	e9dd 0100 	ldrd	r0, r1, [sp]
    d380:	f7ff fd48 	bl	ce14 <__aeabi_d2iz>
    d384:	9012      	str	r0, [sp, #72]	; 0x48
    d386:	f7ff f8ad 	bl	c4e4 <__aeabi_i2d>
    d38a:	4602      	mov	r2, r0
    d38c:	460b      	mov	r3, r1
    d38e:	e9dd 0100 	ldrd	r0, r1, [sp]
    d392:	f7fe ff59 	bl	c248 <__aeabi_dsub>
    d396:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d398:	4632      	mov	r2, r6
    d39a:	3330      	adds	r3, #48	; 0x30
    d39c:	f805 3b01 	strb.w	r3, [r5], #1
    d3a0:	463b      	mov	r3, r7
    d3a2:	e9cd 0100 	strd	r0, r1, [sp]
    d3a6:	f7ff fcf7 	bl	cd98 <__aeabi_dcmplt>
    d3aa:	2800      	cmp	r0, #0
    d3ac:	d15f      	bne.n	d46e <_dtoa_r+0x5e6>
    d3ae:	2000      	movs	r0, #0
    d3b0:	4936      	ldr	r1, [pc, #216]	; (d48c <_dtoa_r+0x604>)
    d3b2:	e9dd 2300 	ldrd	r2, r3, [sp]
    d3b6:	f7fe ff47 	bl	c248 <__aeabi_dsub>
    d3ba:	4632      	mov	r2, r6
    d3bc:	463b      	mov	r3, r7
    d3be:	f7ff fceb 	bl	cd98 <__aeabi_dcmplt>
    d3c2:	2800      	cmp	r0, #0
    d3c4:	f040 80b2 	bne.w	d52c <_dtoa_r+0x6a4>
    d3c8:	42a5      	cmp	r5, r4
    d3ca:	f43f af7c 	beq.w	d2c6 <_dtoa_r+0x43e>
    d3ce:	2200      	movs	r2, #0
    d3d0:	4b2f      	ldr	r3, [pc, #188]	; (d490 <_dtoa_r+0x608>)
    d3d2:	4630      	mov	r0, r6
    d3d4:	4639      	mov	r1, r7
    d3d6:	f7ff fa6d 	bl	c8b4 <__aeabi_dmul>
    d3da:	2200      	movs	r2, #0
    d3dc:	4606      	mov	r6, r0
    d3de:	460f      	mov	r7, r1
    d3e0:	4b2b      	ldr	r3, [pc, #172]	; (d490 <_dtoa_r+0x608>)
    d3e2:	e9dd 0100 	ldrd	r0, r1, [sp]
    d3e6:	f7ff fa65 	bl	c8b4 <__aeabi_dmul>
    d3ea:	e9cd 0100 	strd	r0, r1, [sp]
    d3ee:	e7c5      	b.n	d37c <_dtoa_r+0x4f4>
    d3f0:	4632      	mov	r2, r6
    d3f2:	463b      	mov	r3, r7
    d3f4:	f7ff fa5e 	bl	c8b4 <__aeabi_dmul>
    d3f8:	4625      	mov	r5, r4
    d3fa:	9e03      	ldr	r6, [sp, #12]
    d3fc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    d400:	e9dd 0100 	ldrd	r0, r1, [sp]
    d404:	f7ff fd06 	bl	ce14 <__aeabi_d2iz>
    d408:	4607      	mov	r7, r0
    d40a:	f7ff f86b 	bl	c4e4 <__aeabi_i2d>
    d40e:	4602      	mov	r2, r0
    d410:	3730      	adds	r7, #48	; 0x30
    d412:	460b      	mov	r3, r1
    d414:	e9dd 0100 	ldrd	r0, r1, [sp]
    d418:	f7fe ff16 	bl	c248 <__aeabi_dsub>
    d41c:	f806 7b01 	strb.w	r7, [r6], #1
    d420:	42a6      	cmp	r6, r4
    d422:	f04f 0200 	mov.w	r2, #0
    d426:	e9cd 0100 	strd	r0, r1, [sp]
    d42a:	d125      	bne.n	d478 <_dtoa_r+0x5f0>
    d42c:	4b1b      	ldr	r3, [pc, #108]	; (d49c <_dtoa_r+0x614>)
    d42e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d432:	f7fe ff0b 	bl	c24c <__adddf3>
    d436:	4602      	mov	r2, r0
    d438:	460b      	mov	r3, r1
    d43a:	e9dd 0100 	ldrd	r0, r1, [sp]
    d43e:	f7ff fcc9 	bl	cdd4 <__aeabi_dcmpgt>
    d442:	2800      	cmp	r0, #0
    d444:	d172      	bne.n	d52c <_dtoa_r+0x6a4>
    d446:	2000      	movs	r0, #0
    d448:	4914      	ldr	r1, [pc, #80]	; (d49c <_dtoa_r+0x614>)
    d44a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d44e:	f7fe fefb 	bl	c248 <__aeabi_dsub>
    d452:	4602      	mov	r2, r0
    d454:	460b      	mov	r3, r1
    d456:	e9dd 0100 	ldrd	r0, r1, [sp]
    d45a:	f7ff fc9d 	bl	cd98 <__aeabi_dcmplt>
    d45e:	2800      	cmp	r0, #0
    d460:	f43f af31 	beq.w	d2c6 <_dtoa_r+0x43e>
    d464:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d468:	1e6a      	subs	r2, r5, #1
    d46a:	2b30      	cmp	r3, #48	; 0x30
    d46c:	d002      	beq.n	d474 <_dtoa_r+0x5ec>
    d46e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d472:	e049      	b.n	d508 <_dtoa_r+0x680>
    d474:	4615      	mov	r5, r2
    d476:	e7f5      	b.n	d464 <_dtoa_r+0x5dc>
    d478:	4b05      	ldr	r3, [pc, #20]	; (d490 <_dtoa_r+0x608>)
    d47a:	f7ff fa1b 	bl	c8b4 <__aeabi_dmul>
    d47e:	e9cd 0100 	strd	r0, r1, [sp]
    d482:	e7bd      	b.n	d400 <_dtoa_r+0x578>
    d484:	0001d3f0 	.word	0x0001d3f0
    d488:	0001d3c8 	.word	0x0001d3c8
    d48c:	3ff00000 	.word	0x3ff00000
    d490:	40240000 	.word	0x40240000
    d494:	401c0000 	.word	0x401c0000
    d498:	40140000 	.word	0x40140000
    d49c:	3fe00000 	.word	0x3fe00000
    d4a0:	e9dd 6700 	ldrd	r6, r7, [sp]
    d4a4:	9d03      	ldr	r5, [sp, #12]
    d4a6:	4630      	mov	r0, r6
    d4a8:	4639      	mov	r1, r7
    d4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4ae:	f7ff fb2b 	bl	cb08 <__aeabi_ddiv>
    d4b2:	f7ff fcaf 	bl	ce14 <__aeabi_d2iz>
    d4b6:	4604      	mov	r4, r0
    d4b8:	f7ff f814 	bl	c4e4 <__aeabi_i2d>
    d4bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4c0:	f7ff f9f8 	bl	c8b4 <__aeabi_dmul>
    d4c4:	4602      	mov	r2, r0
    d4c6:	4630      	mov	r0, r6
    d4c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    d4cc:	460b      	mov	r3, r1
    d4ce:	4639      	mov	r1, r7
    d4d0:	f7fe feba 	bl	c248 <__aeabi_dsub>
    d4d4:	f805 6b01 	strb.w	r6, [r5], #1
    d4d8:	9e03      	ldr	r6, [sp, #12]
    d4da:	4602      	mov	r2, r0
    d4dc:	460b      	mov	r3, r1
    d4de:	1bae      	subs	r6, r5, r6
    d4e0:	45b1      	cmp	r9, r6
    d4e2:	d137      	bne.n	d554 <_dtoa_r+0x6cc>
    d4e4:	f7fe feb2 	bl	c24c <__adddf3>
    d4e8:	4606      	mov	r6, r0
    d4ea:	460f      	mov	r7, r1
    d4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4f0:	f7ff fc70 	bl	cdd4 <__aeabi_dcmpgt>
    d4f4:	b9c0      	cbnz	r0, d528 <_dtoa_r+0x6a0>
    d4f6:	4630      	mov	r0, r6
    d4f8:	4639      	mov	r1, r7
    d4fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4fe:	f7ff fc41 	bl	cd84 <__aeabi_dcmpeq>
    d502:	b108      	cbz	r0, d508 <_dtoa_r+0x680>
    d504:	07e1      	lsls	r1, r4, #31
    d506:	d40f      	bmi.n	d528 <_dtoa_r+0x6a0>
    d508:	4641      	mov	r1, r8
    d50a:	4658      	mov	r0, fp
    d50c:	f00f fa65 	bl	1c9da <_Bfree>
    d510:	2300      	movs	r3, #0
    d512:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d514:	702b      	strb	r3, [r5, #0]
    d516:	f10a 0301 	add.w	r3, sl, #1
    d51a:	6013      	str	r3, [r2, #0]
    d51c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d51e:	2b00      	cmp	r3, #0
    d520:	f43f acfb 	beq.w	cf1a <_dtoa_r+0x92>
    d524:	601d      	str	r5, [r3, #0]
    d526:	e4f8      	b.n	cf1a <_dtoa_r+0x92>
    d528:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    d52c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    d530:	1e6b      	subs	r3, r5, #1
    d532:	2a39      	cmp	r2, #57	; 0x39
    d534:	d108      	bne.n	d548 <_dtoa_r+0x6c0>
    d536:	9a03      	ldr	r2, [sp, #12]
    d538:	429a      	cmp	r2, r3
    d53a:	d109      	bne.n	d550 <_dtoa_r+0x6c8>
    d53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d53e:	9903      	ldr	r1, [sp, #12]
    d540:	3201      	adds	r2, #1
    d542:	920a      	str	r2, [sp, #40]	; 0x28
    d544:	2230      	movs	r2, #48	; 0x30
    d546:	700a      	strb	r2, [r1, #0]
    d548:	781a      	ldrb	r2, [r3, #0]
    d54a:	3201      	adds	r2, #1
    d54c:	701a      	strb	r2, [r3, #0]
    d54e:	e78e      	b.n	d46e <_dtoa_r+0x5e6>
    d550:	461d      	mov	r5, r3
    d552:	e7eb      	b.n	d52c <_dtoa_r+0x6a4>
    d554:	2200      	movs	r2, #0
    d556:	4b9d      	ldr	r3, [pc, #628]	; (d7cc <_dtoa_r+0x944>)
    d558:	f7ff f9ac 	bl	c8b4 <__aeabi_dmul>
    d55c:	2200      	movs	r2, #0
    d55e:	2300      	movs	r3, #0
    d560:	4606      	mov	r6, r0
    d562:	460f      	mov	r7, r1
    d564:	f7ff fc0e 	bl	cd84 <__aeabi_dcmpeq>
    d568:	2800      	cmp	r0, #0
    d56a:	d09c      	beq.n	d4a6 <_dtoa_r+0x61e>
    d56c:	e7cc      	b.n	d508 <_dtoa_r+0x680>
    d56e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d570:	2a00      	cmp	r2, #0
    d572:	f000 80cb 	beq.w	d70c <_dtoa_r+0x884>
    d576:	9a08      	ldr	r2, [sp, #32]
    d578:	2a01      	cmp	r2, #1
    d57a:	f300 80ae 	bgt.w	d6da <_dtoa_r+0x852>
    d57e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d580:	2a00      	cmp	r2, #0
    d582:	f000 80a6 	beq.w	d6d2 <_dtoa_r+0x84a>
    d586:	f203 4333 	addw	r3, r3, #1075	; 0x433
    d58a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d58c:	9d06      	ldr	r5, [sp, #24]
    d58e:	9a06      	ldr	r2, [sp, #24]
    d590:	2101      	movs	r1, #1
    d592:	4658      	mov	r0, fp
    d594:	441a      	add	r2, r3
    d596:	9206      	str	r2, [sp, #24]
    d598:	9a07      	ldr	r2, [sp, #28]
    d59a:	441a      	add	r2, r3
    d59c:	9207      	str	r2, [sp, #28]
    d59e:	f00f fac0 	bl	1cb22 <__i2b>
    d5a2:	4606      	mov	r6, r0
    d5a4:	2d00      	cmp	r5, #0
    d5a6:	dd0c      	ble.n	d5c2 <_dtoa_r+0x73a>
    d5a8:	9b07      	ldr	r3, [sp, #28]
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	dd09      	ble.n	d5c2 <_dtoa_r+0x73a>
    d5ae:	42ab      	cmp	r3, r5
    d5b0:	9a06      	ldr	r2, [sp, #24]
    d5b2:	bfa8      	it	ge
    d5b4:	462b      	movge	r3, r5
    d5b6:	1ad2      	subs	r2, r2, r3
    d5b8:	1aed      	subs	r5, r5, r3
    d5ba:	9206      	str	r2, [sp, #24]
    d5bc:	9a07      	ldr	r2, [sp, #28]
    d5be:	1ad3      	subs	r3, r2, r3
    d5c0:	9307      	str	r3, [sp, #28]
    d5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5c4:	b1f3      	cbz	r3, d604 <_dtoa_r+0x77c>
    d5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	f000 80a3 	beq.w	d714 <_dtoa_r+0x88c>
    d5ce:	2c00      	cmp	r4, #0
    d5d0:	dd10      	ble.n	d5f4 <_dtoa_r+0x76c>
    d5d2:	4631      	mov	r1, r6
    d5d4:	4622      	mov	r2, r4
    d5d6:	4658      	mov	r0, fp
    d5d8:	f00c fefa 	bl	1a3d0 <__pow5mult>
    d5dc:	4642      	mov	r2, r8
    d5de:	4601      	mov	r1, r0
    d5e0:	4606      	mov	r6, r0
    d5e2:	4658      	mov	r0, fp
    d5e4:	f00f faa6 	bl	1cb34 <__multiply>
    d5e8:	4607      	mov	r7, r0
    d5ea:	4641      	mov	r1, r8
    d5ec:	4658      	mov	r0, fp
    d5ee:	46b8      	mov	r8, r7
    d5f0:	f00f f9f3 	bl	1c9da <_Bfree>
    d5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5f6:	1b1a      	subs	r2, r3, r4
    d5f8:	d004      	beq.n	d604 <_dtoa_r+0x77c>
    d5fa:	4641      	mov	r1, r8
    d5fc:	4658      	mov	r0, fp
    d5fe:	f00c fee7 	bl	1a3d0 <__pow5mult>
    d602:	4680      	mov	r8, r0
    d604:	2101      	movs	r1, #1
    d606:	4658      	mov	r0, fp
    d608:	f00f fa8b 	bl	1cb22 <__i2b>
    d60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d60e:	4604      	mov	r4, r0
    d610:	2b00      	cmp	r3, #0
    d612:	f340 8081 	ble.w	d718 <_dtoa_r+0x890>
    d616:	461a      	mov	r2, r3
    d618:	4601      	mov	r1, r0
    d61a:	4658      	mov	r0, fp
    d61c:	f00c fed8 	bl	1a3d0 <__pow5mult>
    d620:	9b08      	ldr	r3, [sp, #32]
    d622:	4604      	mov	r4, r0
    d624:	2b01      	cmp	r3, #1
    d626:	dd7a      	ble.n	d71e <_dtoa_r+0x896>
    d628:	2700      	movs	r7, #0
    d62a:	6923      	ldr	r3, [r4, #16]
    d62c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d630:	6918      	ldr	r0, [r3, #16]
    d632:	f00f fa26 	bl	1ca82 <__hi0bits>
    d636:	f1c0 0020 	rsb	r0, r0, #32
    d63a:	9b07      	ldr	r3, [sp, #28]
    d63c:	4418      	add	r0, r3
    d63e:	f010 001f 	ands.w	r0, r0, #31
    d642:	f000 808b 	beq.w	d75c <_dtoa_r+0x8d4>
    d646:	f1c0 0320 	rsb	r3, r0, #32
    d64a:	2b04      	cmp	r3, #4
    d64c:	f340 8084 	ble.w	d758 <_dtoa_r+0x8d0>
    d650:	f1c0 001c 	rsb	r0, r0, #28
    d654:	9b06      	ldr	r3, [sp, #24]
    d656:	4405      	add	r5, r0
    d658:	4403      	add	r3, r0
    d65a:	9306      	str	r3, [sp, #24]
    d65c:	9b07      	ldr	r3, [sp, #28]
    d65e:	4403      	add	r3, r0
    d660:	9307      	str	r3, [sp, #28]
    d662:	9b06      	ldr	r3, [sp, #24]
    d664:	2b00      	cmp	r3, #0
    d666:	dd05      	ble.n	d674 <_dtoa_r+0x7ec>
    d668:	4641      	mov	r1, r8
    d66a:	461a      	mov	r2, r3
    d66c:	4658      	mov	r0, fp
    d66e:	f00f faf0 	bl	1cc52 <__lshift>
    d672:	4680      	mov	r8, r0
    d674:	9b07      	ldr	r3, [sp, #28]
    d676:	2b00      	cmp	r3, #0
    d678:	dd05      	ble.n	d686 <_dtoa_r+0x7fe>
    d67a:	4621      	mov	r1, r4
    d67c:	461a      	mov	r2, r3
    d67e:	4658      	mov	r0, fp
    d680:	f00f fae7 	bl	1cc52 <__lshift>
    d684:	4604      	mov	r4, r0
    d686:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d688:	2b00      	cmp	r3, #0
    d68a:	d069      	beq.n	d760 <_dtoa_r+0x8d8>
    d68c:	4621      	mov	r1, r4
    d68e:	4640      	mov	r0, r8
    d690:	f00f fb32 	bl	1ccf8 <__mcmp>
    d694:	2800      	cmp	r0, #0
    d696:	da63      	bge.n	d760 <_dtoa_r+0x8d8>
    d698:	2300      	movs	r3, #0
    d69a:	4641      	mov	r1, r8
    d69c:	220a      	movs	r2, #10
    d69e:	4658      	mov	r0, fp
    d6a0:	f00f f9b2 	bl	1ca08 <__multadd>
    d6a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d6a6:	f10a 3aff 	add.w	sl, sl, #4294967295
    d6aa:	4680      	mov	r8, r0
    d6ac:	2b00      	cmp	r3, #0
    d6ae:	f000 8179 	beq.w	d9a4 <_dtoa_r+0xb1c>
    d6b2:	2300      	movs	r3, #0
    d6b4:	4631      	mov	r1, r6
    d6b6:	220a      	movs	r2, #10
    d6b8:	4658      	mov	r0, fp
    d6ba:	f00f f9a5 	bl	1ca08 <__multadd>
    d6be:	9b04      	ldr	r3, [sp, #16]
    d6c0:	4606      	mov	r6, r0
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	f300 808a 	bgt.w	d7dc <_dtoa_r+0x954>
    d6c8:	9b08      	ldr	r3, [sp, #32]
    d6ca:	2b02      	cmp	r3, #2
    d6cc:	f340 8086 	ble.w	d7dc <_dtoa_r+0x954>
    d6d0:	e04e      	b.n	d770 <_dtoa_r+0x8e8>
    d6d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d6d4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    d6d8:	e757      	b.n	d58a <_dtoa_r+0x702>
    d6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6dc:	f109 34ff 	add.w	r4, r9, #4294967295
    d6e0:	42a3      	cmp	r3, r4
    d6e2:	bfb7      	itett	lt
    d6e4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
    d6e6:	1b1c      	subge	r4, r3, r4
    d6e8:	9409      	strlt	r4, [sp, #36]	; 0x24
    d6ea:	1ae2      	sublt	r2, r4, r3
    d6ec:	bfbf      	itttt	lt
    d6ee:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
    d6f0:	2400      	movlt	r4, #0
    d6f2:	189b      	addlt	r3, r3, r2
    d6f4:	9310      	strlt	r3, [sp, #64]	; 0x40
    d6f6:	f1b9 0f00 	cmp.w	r9, #0
    d6fa:	bfb3      	iteet	lt
    d6fc:	9b06      	ldrlt	r3, [sp, #24]
    d6fe:	464b      	movge	r3, r9
    d700:	9d06      	ldrge	r5, [sp, #24]
    d702:	eba3 0509 	sublt.w	r5, r3, r9
    d706:	bfb8      	it	lt
    d708:	2300      	movlt	r3, #0
    d70a:	e740      	b.n	d58e <_dtoa_r+0x706>
    d70c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d70e:	9d06      	ldr	r5, [sp, #24]
    d710:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    d712:	e747      	b.n	d5a4 <_dtoa_r+0x71c>
    d714:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d716:	e770      	b.n	d5fa <_dtoa_r+0x772>
    d718:	9b08      	ldr	r3, [sp, #32]
    d71a:	2b01      	cmp	r3, #1
    d71c:	dc18      	bgt.n	d750 <_dtoa_r+0x8c8>
    d71e:	9b00      	ldr	r3, [sp, #0]
    d720:	b9b3      	cbnz	r3, d750 <_dtoa_r+0x8c8>
    d722:	9b01      	ldr	r3, [sp, #4]
    d724:	f3c3 0313 	ubfx	r3, r3, #0, #20
    d728:	b9a3      	cbnz	r3, d754 <_dtoa_r+0x8cc>
    d72a:	9b01      	ldr	r3, [sp, #4]
    d72c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    d730:	0d3f      	lsrs	r7, r7, #20
    d732:	053f      	lsls	r7, r7, #20
    d734:	b137      	cbz	r7, d744 <_dtoa_r+0x8bc>
    d736:	9b06      	ldr	r3, [sp, #24]
    d738:	2701      	movs	r7, #1
    d73a:	3301      	adds	r3, #1
    d73c:	9306      	str	r3, [sp, #24]
    d73e:	9b07      	ldr	r3, [sp, #28]
    d740:	3301      	adds	r3, #1
    d742:	9307      	str	r3, [sp, #28]
    d744:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d746:	2b00      	cmp	r3, #0
    d748:	f47f af6f 	bne.w	d62a <_dtoa_r+0x7a2>
    d74c:	2001      	movs	r0, #1
    d74e:	e774      	b.n	d63a <_dtoa_r+0x7b2>
    d750:	2700      	movs	r7, #0
    d752:	e7f7      	b.n	d744 <_dtoa_r+0x8bc>
    d754:	9f00      	ldr	r7, [sp, #0]
    d756:	e7f5      	b.n	d744 <_dtoa_r+0x8bc>
    d758:	d083      	beq.n	d662 <_dtoa_r+0x7da>
    d75a:	4618      	mov	r0, r3
    d75c:	301c      	adds	r0, #28
    d75e:	e779      	b.n	d654 <_dtoa_r+0x7cc>
    d760:	f1b9 0f00 	cmp.w	r9, #0
    d764:	dc34      	bgt.n	d7d0 <_dtoa_r+0x948>
    d766:	9b08      	ldr	r3, [sp, #32]
    d768:	2b02      	cmp	r3, #2
    d76a:	dd31      	ble.n	d7d0 <_dtoa_r+0x948>
    d76c:	f8cd 9010 	str.w	r9, [sp, #16]
    d770:	9b04      	ldr	r3, [sp, #16]
    d772:	b963      	cbnz	r3, d78e <_dtoa_r+0x906>
    d774:	4621      	mov	r1, r4
    d776:	2205      	movs	r2, #5
    d778:	4658      	mov	r0, fp
    d77a:	f00f f945 	bl	1ca08 <__multadd>
    d77e:	4601      	mov	r1, r0
    d780:	4604      	mov	r4, r0
    d782:	4640      	mov	r0, r8
    d784:	f00f fab8 	bl	1ccf8 <__mcmp>
    d788:	2800      	cmp	r0, #0
    d78a:	f73f adc8 	bgt.w	d31e <_dtoa_r+0x496>
    d78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d790:	9d03      	ldr	r5, [sp, #12]
    d792:	ea6f 0a03 	mvn.w	sl, r3
    d796:	2700      	movs	r7, #0
    d798:	4621      	mov	r1, r4
    d79a:	4658      	mov	r0, fp
    d79c:	f00f f91d 	bl	1c9da <_Bfree>
    d7a0:	2e00      	cmp	r6, #0
    d7a2:	f43f aeb1 	beq.w	d508 <_dtoa_r+0x680>
    d7a6:	b12f      	cbz	r7, d7b4 <_dtoa_r+0x92c>
    d7a8:	42b7      	cmp	r7, r6
    d7aa:	d003      	beq.n	d7b4 <_dtoa_r+0x92c>
    d7ac:	4639      	mov	r1, r7
    d7ae:	4658      	mov	r0, fp
    d7b0:	f00f f913 	bl	1c9da <_Bfree>
    d7b4:	4631      	mov	r1, r6
    d7b6:	4658      	mov	r0, fp
    d7b8:	f00f f90f 	bl	1c9da <_Bfree>
    d7bc:	e6a4      	b.n	d508 <_dtoa_r+0x680>
    d7be:	2400      	movs	r4, #0
    d7c0:	4626      	mov	r6, r4
    d7c2:	e7e4      	b.n	d78e <_dtoa_r+0x906>
    d7c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d7c8:	4626      	mov	r6, r4
    d7ca:	e5a8      	b.n	d31e <_dtoa_r+0x496>
    d7cc:	40240000 	.word	0x40240000
    d7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d7d2:	f8cd 9010 	str.w	r9, [sp, #16]
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	f000 80eb 	beq.w	d9b2 <_dtoa_r+0xb2a>
    d7dc:	2d00      	cmp	r5, #0
    d7de:	dd05      	ble.n	d7ec <_dtoa_r+0x964>
    d7e0:	4631      	mov	r1, r6
    d7e2:	462a      	mov	r2, r5
    d7e4:	4658      	mov	r0, fp
    d7e6:	f00f fa34 	bl	1cc52 <__lshift>
    d7ea:	4606      	mov	r6, r0
    d7ec:	2f00      	cmp	r7, #0
    d7ee:	d056      	beq.n	d89e <_dtoa_r+0xa16>
    d7f0:	6871      	ldr	r1, [r6, #4]
    d7f2:	4658      	mov	r0, fp
    d7f4:	f00f f8bd 	bl	1c972 <_Balloc>
    d7f8:	6932      	ldr	r2, [r6, #16]
    d7fa:	4605      	mov	r5, r0
    d7fc:	f106 010c 	add.w	r1, r6, #12
    d800:	3202      	adds	r2, #2
    d802:	300c      	adds	r0, #12
    d804:	0092      	lsls	r2, r2, #2
    d806:	f00e fe2e 	bl	1c466 <memcpy>
    d80a:	2201      	movs	r2, #1
    d80c:	4629      	mov	r1, r5
    d80e:	4658      	mov	r0, fp
    d810:	f00f fa1f 	bl	1cc52 <__lshift>
    d814:	9b03      	ldr	r3, [sp, #12]
    d816:	4637      	mov	r7, r6
    d818:	4606      	mov	r6, r0
    d81a:	f103 0901 	add.w	r9, r3, #1
    d81e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    d822:	4413      	add	r3, r2
    d824:	9309      	str	r3, [sp, #36]	; 0x24
    d826:	9b00      	ldr	r3, [sp, #0]
    d828:	f003 0301 	and.w	r3, r3, #1
    d82c:	9307      	str	r3, [sp, #28]
    d82e:	f109 33ff 	add.w	r3, r9, #4294967295
    d832:	4621      	mov	r1, r4
    d834:	4640      	mov	r0, r8
    d836:	9300      	str	r3, [sp, #0]
    d838:	f00e ff98 	bl	1c76c <quorem>
    d83c:	4603      	mov	r3, r0
    d83e:	9004      	str	r0, [sp, #16]
    d840:	4639      	mov	r1, r7
    d842:	4640      	mov	r0, r8
    d844:	3330      	adds	r3, #48	; 0x30
    d846:	930a      	str	r3, [sp, #40]	; 0x28
    d848:	f00f fa56 	bl	1ccf8 <__mcmp>
    d84c:	4632      	mov	r2, r6
    d84e:	9006      	str	r0, [sp, #24]
    d850:	4621      	mov	r1, r4
    d852:	4658      	mov	r0, fp
    d854:	f00f fa6a 	bl	1cd2c <__mdiff>
    d858:	68c2      	ldr	r2, [r0, #12]
    d85a:	4605      	mov	r5, r0
    d85c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d85e:	bb02      	cbnz	r2, d8a2 <_dtoa_r+0xa1a>
    d860:	4601      	mov	r1, r0
    d862:	4640      	mov	r0, r8
    d864:	f00f fa48 	bl	1ccf8 <__mcmp>
    d868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d86a:	4602      	mov	r2, r0
    d86c:	4629      	mov	r1, r5
    d86e:	4658      	mov	r0, fp
    d870:	920c      	str	r2, [sp, #48]	; 0x30
    d872:	464d      	mov	r5, r9
    d874:	930a      	str	r3, [sp, #40]	; 0x28
    d876:	f00f f8b0 	bl	1c9da <_Bfree>
    d87a:	9b08      	ldr	r3, [sp, #32]
    d87c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d87e:	ea43 0102 	orr.w	r1, r3, r2
    d882:	9b07      	ldr	r3, [sp, #28]
    d884:	430b      	orrs	r3, r1
    d886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d888:	d10d      	bne.n	d8a6 <_dtoa_r+0xa1e>
    d88a:	2b39      	cmp	r3, #57	; 0x39
    d88c:	d027      	beq.n	d8de <_dtoa_r+0xa56>
    d88e:	9a06      	ldr	r2, [sp, #24]
    d890:	2a00      	cmp	r2, #0
    d892:	dd01      	ble.n	d898 <_dtoa_r+0xa10>
    d894:	9b04      	ldr	r3, [sp, #16]
    d896:	3331      	adds	r3, #49	; 0x31
    d898:	9a00      	ldr	r2, [sp, #0]
    d89a:	7013      	strb	r3, [r2, #0]
    d89c:	e77c      	b.n	d798 <_dtoa_r+0x910>
    d89e:	4630      	mov	r0, r6
    d8a0:	e7b8      	b.n	d814 <_dtoa_r+0x98c>
    d8a2:	2201      	movs	r2, #1
    d8a4:	e7e2      	b.n	d86c <_dtoa_r+0x9e4>
    d8a6:	9906      	ldr	r1, [sp, #24]
    d8a8:	2900      	cmp	r1, #0
    d8aa:	db04      	blt.n	d8b6 <_dtoa_r+0xa2e>
    d8ac:	9808      	ldr	r0, [sp, #32]
    d8ae:	4301      	orrs	r1, r0
    d8b0:	9807      	ldr	r0, [sp, #28]
    d8b2:	4301      	orrs	r1, r0
    d8b4:	d11d      	bne.n	d8f2 <_dtoa_r+0xa6a>
    d8b6:	2a00      	cmp	r2, #0
    d8b8:	ddee      	ble.n	d898 <_dtoa_r+0xa10>
    d8ba:	4641      	mov	r1, r8
    d8bc:	2201      	movs	r2, #1
    d8be:	4658      	mov	r0, fp
    d8c0:	9306      	str	r3, [sp, #24]
    d8c2:	f00f f9c6 	bl	1cc52 <__lshift>
    d8c6:	4621      	mov	r1, r4
    d8c8:	4680      	mov	r8, r0
    d8ca:	f00f fa15 	bl	1ccf8 <__mcmp>
    d8ce:	2800      	cmp	r0, #0
    d8d0:	9b06      	ldr	r3, [sp, #24]
    d8d2:	dc02      	bgt.n	d8da <_dtoa_r+0xa52>
    d8d4:	d1e0      	bne.n	d898 <_dtoa_r+0xa10>
    d8d6:	07da      	lsls	r2, r3, #31
    d8d8:	d5de      	bpl.n	d898 <_dtoa_r+0xa10>
    d8da:	2b39      	cmp	r3, #57	; 0x39
    d8dc:	d1da      	bne.n	d894 <_dtoa_r+0xa0c>
    d8de:	2339      	movs	r3, #57	; 0x39
    d8e0:	9a00      	ldr	r2, [sp, #0]
    d8e2:	7013      	strb	r3, [r2, #0]
    d8e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d8e8:	1e6a      	subs	r2, r5, #1
    d8ea:	2b39      	cmp	r3, #57	; 0x39
    d8ec:	d046      	beq.n	d97c <_dtoa_r+0xaf4>
    d8ee:	3301      	adds	r3, #1
    d8f0:	e7d3      	b.n	d89a <_dtoa_r+0xa12>
    d8f2:	2a00      	cmp	r2, #0
    d8f4:	dd03      	ble.n	d8fe <_dtoa_r+0xa76>
    d8f6:	2b39      	cmp	r3, #57	; 0x39
    d8f8:	d0f1      	beq.n	d8de <_dtoa_r+0xa56>
    d8fa:	3301      	adds	r3, #1
    d8fc:	e7cc      	b.n	d898 <_dtoa_r+0xa10>
    d8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d900:	f809 3c01 	strb.w	r3, [r9, #-1]
    d904:	4591      	cmp	r9, r2
    d906:	d021      	beq.n	d94c <_dtoa_r+0xac4>
    d908:	4641      	mov	r1, r8
    d90a:	2300      	movs	r3, #0
    d90c:	220a      	movs	r2, #10
    d90e:	4658      	mov	r0, fp
    d910:	f00f f87a 	bl	1ca08 <__multadd>
    d914:	42b7      	cmp	r7, r6
    d916:	4680      	mov	r8, r0
    d918:	f04f 0300 	mov.w	r3, #0
    d91c:	f04f 020a 	mov.w	r2, #10
    d920:	4639      	mov	r1, r7
    d922:	4658      	mov	r0, fp
    d924:	d106      	bne.n	d934 <_dtoa_r+0xaac>
    d926:	f00f f86f 	bl	1ca08 <__multadd>
    d92a:	4607      	mov	r7, r0
    d92c:	4606      	mov	r6, r0
    d92e:	f109 0901 	add.w	r9, r9, #1
    d932:	e77c      	b.n	d82e <_dtoa_r+0x9a6>
    d934:	f00f f868 	bl	1ca08 <__multadd>
    d938:	4631      	mov	r1, r6
    d93a:	4607      	mov	r7, r0
    d93c:	2300      	movs	r3, #0
    d93e:	220a      	movs	r2, #10
    d940:	4658      	mov	r0, fp
    d942:	f00f f861 	bl	1ca08 <__multadd>
    d946:	4606      	mov	r6, r0
    d948:	e7f1      	b.n	d92e <_dtoa_r+0xaa6>
    d94a:	2700      	movs	r7, #0
    d94c:	4641      	mov	r1, r8
    d94e:	2201      	movs	r2, #1
    d950:	4658      	mov	r0, fp
    d952:	9300      	str	r3, [sp, #0]
    d954:	f00f f97d 	bl	1cc52 <__lshift>
    d958:	4621      	mov	r1, r4
    d95a:	4680      	mov	r8, r0
    d95c:	f00f f9cc 	bl	1ccf8 <__mcmp>
    d960:	2800      	cmp	r0, #0
    d962:	dcbf      	bgt.n	d8e4 <_dtoa_r+0xa5c>
    d964:	d102      	bne.n	d96c <_dtoa_r+0xae4>
    d966:	9b00      	ldr	r3, [sp, #0]
    d968:	07db      	lsls	r3, r3, #31
    d96a:	d4bb      	bmi.n	d8e4 <_dtoa_r+0xa5c>
    d96c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d970:	1e6a      	subs	r2, r5, #1
    d972:	2b30      	cmp	r3, #48	; 0x30
    d974:	f47f af10 	bne.w	d798 <_dtoa_r+0x910>
    d978:	4615      	mov	r5, r2
    d97a:	e7f7      	b.n	d96c <_dtoa_r+0xae4>
    d97c:	9b03      	ldr	r3, [sp, #12]
    d97e:	4293      	cmp	r3, r2
    d980:	d104      	bne.n	d98c <_dtoa_r+0xb04>
    d982:	f10a 0a01 	add.w	sl, sl, #1
    d986:	2331      	movs	r3, #49	; 0x31
    d988:	9a03      	ldr	r2, [sp, #12]
    d98a:	e786      	b.n	d89a <_dtoa_r+0xa12>
    d98c:	4615      	mov	r5, r2
    d98e:	e7a9      	b.n	d8e4 <_dtoa_r+0xa5c>
    d990:	4b13      	ldr	r3, [pc, #76]	; (d9e0 <_dtoa_r+0xb58>)
    d992:	f7ff bae1 	b.w	cf58 <_dtoa_r+0xd0>
    d996:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d998:	2b00      	cmp	r3, #0
    d99a:	f47f aab9 	bne.w	cf10 <_dtoa_r+0x88>
    d99e:	4b11      	ldr	r3, [pc, #68]	; (d9e4 <_dtoa_r+0xb5c>)
    d9a0:	f7ff bada 	b.w	cf58 <_dtoa_r+0xd0>
    d9a4:	9b04      	ldr	r3, [sp, #16]
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	dc03      	bgt.n	d9b2 <_dtoa_r+0xb2a>
    d9aa:	9b08      	ldr	r3, [sp, #32]
    d9ac:	2b02      	cmp	r3, #2
    d9ae:	f73f aedf 	bgt.w	d770 <_dtoa_r+0x8e8>
    d9b2:	9d03      	ldr	r5, [sp, #12]
    d9b4:	4621      	mov	r1, r4
    d9b6:	4640      	mov	r0, r8
    d9b8:	f00e fed8 	bl	1c76c <quorem>
    d9bc:	9a03      	ldr	r2, [sp, #12]
    d9be:	f100 0330 	add.w	r3, r0, #48	; 0x30
    d9c2:	9904      	ldr	r1, [sp, #16]
    d9c4:	f805 3b01 	strb.w	r3, [r5], #1
    d9c8:	1aaa      	subs	r2, r5, r2
    d9ca:	4291      	cmp	r1, r2
    d9cc:	ddbd      	ble.n	d94a <_dtoa_r+0xac2>
    d9ce:	4641      	mov	r1, r8
    d9d0:	2300      	movs	r3, #0
    d9d2:	220a      	movs	r2, #10
    d9d4:	4658      	mov	r0, fp
    d9d6:	f00f f817 	bl	1ca08 <__multadd>
    d9da:	4680      	mov	r8, r0
    d9dc:	e7ea      	b.n	d9b4 <_dtoa_r+0xb2c>
    d9de:	bf00      	nop
    d9e0:	0001dc4a 	.word	0x0001dc4a
    d9e4:	0001df2a 	.word	0x0001df2a

0000d9e8 <print_nmea_data>:
					       pvt_data->pvt.datetime.minute,
					      pvt_data->pvt.datetime.seconds);
}

static void print_nmea_data(void)
{
    d9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printk("NMEA strings:\n");
    d9ea:	4809      	ldr	r0, [pc, #36]	; (da10 <print_nmea_data+0x28>)
    d9ec:	f00d fab5 	bl	1af5a <printk>

	for (int i = 0; i < nmea_string_cnt; ++i) {
    d9f0:	2400      	movs	r4, #0
    d9f2:	4d08      	ldr	r5, [pc, #32]	; (da14 <print_nmea_data+0x2c>)
		printk("%s\n", nmea_strings[i]);
    d9f4:	4e08      	ldr	r6, [pc, #32]	; (da18 <print_nmea_data+0x30>)
    d9f6:	4f09      	ldr	r7, [pc, #36]	; (da1c <print_nmea_data+0x34>)
	for (int i = 0; i < nmea_string_cnt; ++i) {
    d9f8:	682b      	ldr	r3, [r5, #0]
    d9fa:	42a3      	cmp	r3, r4
    d9fc:	d800      	bhi.n	da00 <print_nmea_data+0x18>
	}
}
    d9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("%s\n", nmea_strings[i]);
    da00:	2153      	movs	r1, #83	; 0x53
    da02:	4638      	mov	r0, r7
    da04:	fb01 6104 	mla	r1, r1, r4, r6
    da08:	f00d faa7 	bl	1af5a <printk>
	for (int i = 0; i < nmea_string_cnt; ++i) {
    da0c:	3401      	adds	r4, #1
    da0e:	e7f3      	b.n	d9f8 <print_nmea_data+0x10>
    da10:	0001dbd1 	.word	0x0001dbd1
    da14:	200200ec 	.word	0x200200ec
    da18:	200213f7 	.word	0x200213f7
    da1c:	0001dde2 	.word	0x0001dde2

0000da20 <print_satellite_stats>:
	u8_t  unhealthy        = 0;
    da20:	2300      	movs	r3, #0
	u8_t  in_fix           = 0;
    da22:	461a      	mov	r2, r3
	u8_t  tracked          = 0;
    da24:	4619      	mov	r1, r3
{
    da26:	b570      	push	{r4, r5, r6, lr}
    da28:	f100 0590 	add.w	r5, r0, #144	; 0x90
		if ((pvt_data->pvt.sv[i].sv > 0) &&
    da2c:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
    da30:	3c01      	subs	r4, #1
    da32:	2c1f      	cmp	r4, #31
    da34:	d80c      	bhi.n	da50 <print_satellite_stats+0x30>
			if (pvt_data->pvt.sv[i].flags &
    da36:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
			tracked++;
    da3a:	3101      	adds	r1, #1
			if (pvt_data->pvt.sv[i].flags &
    da3c:	07a6      	lsls	r6, r4, #30
				in_fix++;
    da3e:	bf44      	itt	mi
    da40:	3201      	addmi	r2, #1
    da42:	b2d2      	uxtbmi	r2, r2
			if (pvt_data->pvt.sv[i].flags &
    da44:	0724      	lsls	r4, r4, #28
				unhealthy++;
    da46:	bf48      	it	mi
    da48:	3301      	addmi	r3, #1
			tracked++;
    da4a:	b2c9      	uxtb	r1, r1
				unhealthy++;
    da4c:	bf48      	it	mi
    da4e:	b2db      	uxtbmi	r3, r3
    da50:	300c      	adds	r0, #12
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    da52:	42a8      	cmp	r0, r5
    da54:	d1ea      	bne.n	da2c <print_satellite_stats+0xc>
	printk("Tracking: %d Using: %d Unhealthy: %d", tracked,
    da56:	480c      	ldr	r0, [pc, #48]	; (da88 <print_satellite_stats+0x68>)
    da58:	f00d fa7f 	bl	1af5a <printk>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    da5c:	f00e fbd4 	bl	1c208 <z_impl_k_uptime_get>
			(k_uptime_get() - fix_timestamp) / 1000);
    da60:	4b0a      	ldr	r3, [pc, #40]	; (da8c <print_satellite_stats+0x6c>)
	printk("\nSeconds since last fix %lld\n",
    da62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			(k_uptime_get() - fix_timestamp) / 1000);
    da66:	e9d3 4500 	ldrd	r4, r5, [r3]
	printk("\nSeconds since last fix %lld\n",
    da6a:	1b00      	subs	r0, r0, r4
    da6c:	f04f 0300 	mov.w	r3, #0
    da70:	eb61 0105 	sbc.w	r1, r1, r5
    da74:	f7fe fda0 	bl	c5b8 <__aeabi_uldivmod>
}
    da78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("\nSeconds since last fix %lld\n",
    da7c:	4602      	mov	r2, r0
    da7e:	460b      	mov	r3, r1
    da80:	4803      	ldr	r0, [pc, #12]	; (da90 <print_satellite_stats+0x70>)
    da82:	f00d ba6a 	b.w	1af5a <printk>
    da86:	bf00      	nop
    da88:	0001dbe0 	.word	0x0001dbe0
    da8c:	20020000 	.word	0x20020000
    da90:	0001dc05 	.word	0x0001dc05

0000da94 <bsd_recoverable_error_handler>:
	printf("Err: %lu\n", (unsigned long)error);
    da94:	4601      	mov	r1, r0
    da96:	4801      	ldr	r0, [pc, #4]	; (da9c <bsd_recoverable_error_handler+0x8>)
    da98:	f00c b940 	b.w	19d1c <iprintf>
    da9c:	0001d9f0 	.word	0x0001d9f0

0000daa0 <process_gps_data>:

int process_gps_data(nrf_gnss_data_frame_t *gps_data)
{
    daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int retval;

	retval = nrf_recv(gnss_fd,
    daa2:	4601      	mov	r1, r0
{
    daa4:	4604      	mov	r4, r0
	retval = nrf_recv(gnss_fd,
    daa6:	481f      	ldr	r0, [pc, #124]	; (db24 <process_gps_data+0x84>)
    daa8:	2302      	movs	r3, #2
    daaa:	22d8      	movs	r2, #216	; 0xd8
    daac:	6800      	ldr	r0, [r0, #0]
    daae:	f006 fcc3 	bl	14438 <nrf_recv>
			  gps_data,
			  sizeof(nrf_gnss_data_frame_t),
			  NRF_MSG_DONTWAIT);

	if (retval > 0) 
    dab2:	1e06      	subs	r6, r0, #0
    dab4:	dd04      	ble.n	dac0 <process_gps_data+0x20>
	{	
		switch (gps_data->data_id)
    dab6:	7823      	ldrb	r3, [r4, #0]
    dab8:	2b01      	cmp	r3, #1
    daba:	d003      	beq.n	dac4 <process_gps_data+0x24>
    dabc:	2b02      	cmp	r3, #2
    dabe:	d01c      	beq.n	dafa <process_gps_data+0x5a>
			break;
		}
	}

	return retval;
}
    dac0:	4630      	mov	r0, r6
    dac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((gps_data->pvt.flags &
    dac4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    dac8:	4d17      	ldr	r5, [pc, #92]	; (db28 <process_gps_data+0x88>)
    daca:	f012 0f01 	tst.w	r2, #1
    dace:	d00f      	beq.n	daf0 <process_gps_data+0x50>
				if (!got_first_fix) {
    dad0:	4a16      	ldr	r2, [pc, #88]	; (db2c <process_gps_data+0x8c>)
    dad2:	7811      	ldrb	r1, [r2, #0]
    dad4:	b901      	cbnz	r1, dad8 <process_gps_data+0x38>
					got_first_fix = true;
    dad6:	7013      	strb	r3, [r2, #0]
    dad8:	f00e fb96 	bl	1c208 <z_impl_k_uptime_get>
				fix_timestamp = k_uptime_get();
    dadc:	4b14      	ldr	r3, [pc, #80]	; (db30 <process_gps_data+0x90>)
				memcpy(&last_fix,
    dade:	22d8      	movs	r2, #216	; 0xd8
				fix_timestamp = k_uptime_get();
    dae0:	e9c3 0100 	strd	r0, r1, [r3]
				memcpy(&last_fix,
    dae4:	4621      	mov	r1, r4
    dae6:	4813      	ldr	r0, [pc, #76]	; (db34 <process_gps_data+0x94>)
    dae8:	f00e fcbd 	bl	1c466 <memcpy>
				nmea_string_cnt = 0;
    daec:	2300      	movs	r3, #0
    daee:	602b      	str	r3, [r5, #0]
			print_nmea_data();
    daf0:	f7ff ff7a 	bl	d9e8 <print_nmea_data>
			nmea_string_cnt = 0;
    daf4:	2300      	movs	r3, #0
    daf6:	602b      	str	r3, [r5, #0]
			break;
    daf8:	e7e2      	b.n	dac0 <process_gps_data+0x20>
			if (nmea_string_cnt < 10) 
    dafa:	4f0b      	ldr	r7, [pc, #44]	; (db28 <process_gps_data+0x88>)
    dafc:	683d      	ldr	r5, [r7, #0]
    dafe:	2d09      	cmp	r5, #9
    db00:	d8de      	bhi.n	dac0 <process_gps_data+0x20>
				memset(nmea_strings[nmea_string_cnt],
    db02:	2253      	movs	r2, #83	; 0x53
    db04:	4b0c      	ldr	r3, [pc, #48]	; (db38 <process_gps_data+0x98>)

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    db06:	2100      	movs	r1, #0
    db08:	fb02 3305 	mla	r3, r2, r5, r3
    db0c:	4618      	mov	r0, r3
    db0e:	f00e fcb7 	bl	1c480 <memset>
				memcpy(nmea_strings[nmea_string_cnt++],
    db12:	3501      	adds	r5, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    db14:	4632      	mov	r2, r6
    db16:	f104 0108 	add.w	r1, r4, #8
    db1a:	603d      	str	r5, [r7, #0]
    db1c:	f00e fca3 	bl	1c466 <memcpy>
	return retval;
    db20:	e7ce      	b.n	dac0 <process_gps_data+0x20>
    db22:	bf00      	nop
    db24:	200200e8 	.word	0x200200e8
    db28:	200200ec 	.word	0x200200ec
    db2c:	200213f6 	.word	0x200213f6
    db30:	20020000 	.word	0x20020000
    db34:	20020008 	.word	0x20020008
    db38:	200213f7 	.word	0x200213f7

0000db3c <main>:
	return 0;
}
#endif

int main(void)
{
    db3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		.logger     = supl_logger,
		.counter_ms = k_uptime_get
	};
#endif

	printk("Staring GPS application\n");
    db40:	4870      	ldr	r0, [pc, #448]	; (dd04 <main+0x1c8>)
{
    db42:	b0ba      	sub	sp, #232	; 0xe8
	printk("Staring GPS application\n");
    db44:	f00d fa09 	bl	1af5a <printk>
	for (int i = 0; i < ARRAY_SIZE(at_commands); i++) {
    db48:	2500      	movs	r5, #0
    db4a:	4c6f      	ldr	r4, [pc, #444]	; (dd08 <main+0x1cc>)
		if (at_cmd_write(at_commands[i], NULL, 0, NULL) != 0) {
    db4c:	2300      	movs	r3, #0
    db4e:	4620      	mov	r0, r4
    db50:	461a      	mov	r2, r3
    db52:	4619      	mov	r1, r3
    db54:	f001 fed2 	bl	f8fc <at_cmd_write>
    db58:	2800      	cmp	r0, #0
    db5a:	f040 80d0 	bne.w	dcfe <main+0x1c2>
	for (int i = 0; i < ARRAY_SIZE(at_commands); i++) {
    db5e:	3501      	adds	r5, #1
    db60:	2d04      	cmp	r5, #4
    db62:	f104 041f 	add.w	r4, r4, #31
    db66:	d1f1      	bne.n	db4c <main+0x10>
	nrf_gnss_fix_interval_t fix_interval = 1;
    db68:	2701      	movs	r7, #1
	nrf_gnss_nmea_mask_t	nmea_mask    = NRF_GNSS_NMEA_GSV_MASK |
    db6a:	231f      	movs	r3, #31
	nrf_gnss_fix_retry_t    fix_retry    = 0;
    db6c:	f8ad 000a 	strh.w	r0, [sp, #10]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    db70:	9004      	str	r0, [sp, #16]
		gnss_fd = nrf_socket(NRF_AF_LOCAL,
    db72:	2102      	movs	r1, #2
    db74:	f44f 7201 	mov.w	r2, #516	; 0x204
    db78:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1;
    db7a:	f8ad 700c 	strh.w	r7, [sp, #12]
	nrf_gnss_nmea_mask_t	nmea_mask    = NRF_GNSS_NMEA_GSV_MASK |
    db7e:	f8ad 300e 	strh.w	r3, [sp, #14]
		gnss_fd = nrf_socket(NRF_AF_LOCAL,
    db82:	f006 fbe7 	bl	14354 <nrf_socket>
    db86:	4c61      	ldr	r4, [pc, #388]	; (dd0c <main+0x1d0>)
		if (gnss_fd >= 0) {
    db88:	2800      	cmp	r0, #0
		gnss_fd = nrf_socket(NRF_AF_LOCAL,
    db8a:	4601      	mov	r1, r0
    db8c:	6020      	str	r0, [r4, #0]
		if (gnss_fd >= 0) {
    db8e:	da07      	bge.n	dba0 <main+0x64>
			printk("Could not init socket (err: %d)\n", gnss_fd);
    db90:	485f      	ldr	r0, [pc, #380]	; (dd10 <main+0x1d4>)
    db92:	f00d f9e2 	bl	1af5a <printk>
		//print_nmea_data();
		k_sleep(K_MSEC(500));
	}

	return 0;
}
    db96:	f04f 30ff 	mov.w	r0, #4294967295
    db9a:	b03a      	add	sp, #232	; 0xe8
    db9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		retval = nrf_setsockopt(gnss_fd,
    dba0:	2602      	movs	r6, #2
			printk("GPS Socket created\n");
    dba2:	485c      	ldr	r0, [pc, #368]	; (dd14 <main+0x1d8>)
    dba4:	f00d f9d9 	bl	1af5a <printk>
		retval = nrf_setsockopt(gnss_fd,
    dba8:	9600      	str	r6, [sp, #0]
    dbaa:	f10d 030a 	add.w	r3, sp, #10
    dbae:	4632      	mov	r2, r6
    dbb0:	f44f 7101 	mov.w	r1, #516	; 0x204
    dbb4:	6820      	ldr	r0, [r4, #0]
    dbb6:	f006 fca3 	bl	14500 <nrf_setsockopt>
		if (retval != 0) {
    dbba:	b118      	cbz	r0, dbc4 <main+0x88>
			printk("Failed to set fix retry value\n");
    dbbc:	4856      	ldr	r0, [pc, #344]	; (dd18 <main+0x1dc>)
		printk("Failed to initialize modem\n");
    dbbe:	f00d f9cc 	bl	1af5a <printk>
		return -1;
    dbc2:	e7e8      	b.n	db96 <main+0x5a>
		retval = nrf_setsockopt(gnss_fd,
    dbc4:	9600      	str	r6, [sp, #0]
    dbc6:	ab03      	add	r3, sp, #12
    dbc8:	463a      	mov	r2, r7
    dbca:	f44f 7101 	mov.w	r1, #516	; 0x204
    dbce:	6820      	ldr	r0, [r4, #0]
    dbd0:	f006 fc96 	bl	14500 <nrf_setsockopt>
		if (retval != 0) {
    dbd4:	b108      	cbz	r0, dbda <main+0x9e>
			printk("Failed to set fix interval value\n");
    dbd6:	4851      	ldr	r0, [pc, #324]	; (dd1c <main+0x1e0>)
    dbd8:	e7f1      	b.n	dbbe <main+0x82>
		retval = nrf_setsockopt(gnss_fd,
    dbda:	9600      	str	r6, [sp, #0]
    dbdc:	f10d 030e 	add.w	r3, sp, #14
    dbe0:	462a      	mov	r2, r5
    dbe2:	f44f 7101 	mov.w	r1, #516	; 0x204
    dbe6:	6820      	ldr	r0, [r4, #0]
    dbe8:	f006 fc8a 	bl	14500 <nrf_setsockopt>
		if (retval != 0) {
    dbec:	b108      	cbz	r0, dbf2 <main+0xb6>
			printk("Failed to set nmea mask\n");
    dbee:	484c      	ldr	r0, [pc, #304]	; (dd20 <main+0x1e4>)
    dbf0:	e7e5      	b.n	dbbe <main+0x82>
		retval = nrf_setsockopt(gnss_fd,
    dbf2:	9500      	str	r5, [sp, #0]
    dbf4:	ab04      	add	r3, sp, #16
    dbf6:	2207      	movs	r2, #7
    dbf8:	f44f 7101 	mov.w	r1, #516	; 0x204
    dbfc:	6820      	ldr	r0, [r4, #0]
    dbfe:	f006 fc7f 	bl	14500 <nrf_setsockopt>
		if (retval != 0) {
    dc02:	4605      	mov	r5, r0
    dc04:	2800      	cmp	r0, #0
    dc06:	d178      	bne.n	dcfa <main+0x1be>
		if (!got_first_fix) {
    dc08:	4e46      	ldr	r6, [pc, #280]	; (dd24 <main+0x1e8>)
	printk("Getting GPS data...\n");
    dc0a:	4847      	ldr	r0, [pc, #284]	; (dd28 <main+0x1ec>)
    dc0c:	f00d f9a5 	bl	1af5a <printk>
    dc10:	46b0      	mov	r8, r6
			printk("\033[1;1H");
    dc12:	4f46      	ldr	r7, [pc, #280]	; (dd2c <main+0x1f0>)
		} while (process_gps_data(&gps_data) > 0);
    dc14:	a804      	add	r0, sp, #16
    dc16:	f7ff ff43 	bl	daa0 <process_gps_data>
    dc1a:	2800      	cmp	r0, #0
    dc1c:	dcfa      	bgt.n	dc14 <main+0xd8>
		if (!got_first_fix) {
    dc1e:	7833      	ldrb	r3, [r6, #0]
    dc20:	b98b      	cbnz	r3, dc46 <main+0x10a>
			printk("\033[1;1H");
    dc22:	4638      	mov	r0, r7
    dc24:	f00d f999 	bl	1af5a <printk>
			printk("\033[2J");
    dc28:	4841      	ldr	r0, [pc, #260]	; (dd30 <main+0x1f4>)
    dc2a:	f00d f996 	bl	1af5a <printk>
			cnt++;
    dc2e:	3501      	adds	r5, #1
			print_satellite_stats(&gps_data);
    dc30:	a804      	add	r0, sp, #16
    dc32:	f7ff fef5 	bl	da20 <print_satellite_stats>
			cnt++;
    dc36:	b2ed      	uxtb	r5, r5
			printk("\nScanning [%c] ",
    dc38:	4a3e      	ldr	r2, [pc, #248]	; (dd34 <main+0x1f8>)
					update_indicator[cnt%4]);
    dc3a:	f005 0303 	and.w	r3, r5, #3
			printk("\nScanning [%c] ",
    dc3e:	5cd1      	ldrb	r1, [r2, r3]
    dc40:	483d      	ldr	r0, [pc, #244]	; (dd38 <main+0x1fc>)
    dc42:	f00d f98a 	bl	1af5a <printk>
    dc46:	f00e fadf 	bl	1c208 <z_impl_k_uptime_get>
		if (((k_uptime_get() - fix_timestamp) >= 1) &&
    dc4a:	4b3c      	ldr	r3, [pc, #240]	; (dd3c <main+0x200>)
    dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    dc50:	428b      	cmp	r3, r1
    dc52:	bf08      	it	eq
    dc54:	4282      	cmpeq	r2, r0
    dc56:	d04b      	beq.n	dcf0 <main+0x1b4>
    dc58:	f898 3000 	ldrb.w	r3, [r8]
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	d047      	beq.n	dcf0 <main+0x1b4>
			printk("\033[1;1H");
    dc60:	4638      	mov	r0, r7
    dc62:	f00d f97a 	bl	1af5a <printk>
			printk("\033[2J");
    dc66:	4832      	ldr	r0, [pc, #200]	; (dd30 <main+0x1f4>)
	printf("Longitude:  %f\n", pvt_data->pvt.longitude);
    dc68:	4c35      	ldr	r4, [pc, #212]	; (dd40 <main+0x204>)
			printk("\033[2J");
    dc6a:	f00d f976 	bl	1af5a <printk>
			print_satellite_stats(&gps_data);
    dc6e:	a804      	add	r0, sp, #16
    dc70:	f7ff fed6 	bl	da20 <print_satellite_stats>
			printk("---------------------------------\n");
    dc74:	4833      	ldr	r0, [pc, #204]	; (dd44 <main+0x208>)
    dc76:	f00d f970 	bl	1af5a <printk>
	printf("Longitude:  %f\n", pvt_data->pvt.longitude);
    dc7a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dc7e:	4832      	ldr	r0, [pc, #200]	; (dd48 <main+0x20c>)
    dc80:	f00c f84c 	bl	19d1c <iprintf>
	printf("Latitude:   %f\n", pvt_data->pvt.latitude);
    dc84:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    dc88:	4830      	ldr	r0, [pc, #192]	; (dd4c <main+0x210>)
    dc8a:	f00c f847 	bl	19d1c <iprintf>
	printf("Altitude:   %f\n", pvt_data->pvt.altitude);
    dc8e:	69a0      	ldr	r0, [r4, #24]
    dc90:	f7fe fc3a 	bl	c508 <__aeabi_f2d>
    dc94:	4602      	mov	r2, r0
    dc96:	460b      	mov	r3, r1
    dc98:	482d      	ldr	r0, [pc, #180]	; (dd50 <main+0x214>)
    dc9a:	f00c f83f 	bl	19d1c <iprintf>
	printf("Speed:      %f\n", pvt_data->pvt.speed);
    dc9e:	6a20      	ldr	r0, [r4, #32]
    dca0:	f7fe fc32 	bl	c508 <__aeabi_f2d>
    dca4:	4602      	mov	r2, r0
    dca6:	460b      	mov	r3, r1
    dca8:	482a      	ldr	r0, [pc, #168]	; (dd54 <main+0x218>)
    dcaa:	f00c f837 	bl	19d1c <iprintf>
	printf("Heading:    %f\n", pvt_data->pvt.heading);
    dcae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dcb0:	f7fe fc2a 	bl	c508 <__aeabi_f2d>
    dcb4:	4602      	mov	r2, r0
    dcb6:	460b      	mov	r3, r1
    dcb8:	4827      	ldr	r0, [pc, #156]	; (dd58 <main+0x21c>)
    dcba:	f00c f82f 	bl	19d1c <iprintf>
	printk("Date:       %02u-%02u-%02u\n", pvt_data->pvt.datetime.day,
    dcbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    dcc0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
    dcc4:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
    dcc8:	4824      	ldr	r0, [pc, #144]	; (dd5c <main+0x220>)
    dcca:	f00d f946 	bl	1af5a <printk>
	printk("Time (UTC): %02u:%02u:%02u\n", pvt_data->pvt.datetime.hour,
    dcce:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    dcd2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    dcd6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    dcda:	4821      	ldr	r0, [pc, #132]	; (dd60 <main+0x224>)
    dcdc:	f00d f93d 	bl	1af5a <printk>
			printk("\n");
    dce0:	4820      	ldr	r0, [pc, #128]	; (dd64 <main+0x228>)
    dce2:	f00d f93a 	bl	1af5a <printk>
			print_nmea_data();
    dce6:	f7ff fe7f 	bl	d9e8 <print_nmea_data>
			printk("---------------------------------");
    dcea:	481f      	ldr	r0, [pc, #124]	; (dd68 <main+0x22c>)
    dcec:	f00d f935 	bl	1af5a <printk>
	return z_impl_k_sleep(ms);
    dcf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    dcf4:	f00b f882 	bl	18dfc <z_impl_k_sleep>
    dcf8:	e78c      	b.n	dc14 <main+0xd8>
			printk("Failed to start GPS\n");
    dcfa:	481c      	ldr	r0, [pc, #112]	; (dd6c <main+0x230>)
    dcfc:	e75f      	b.n	dbbe <main+0x82>
		printk("Failed to initialize modem\n");
    dcfe:	481c      	ldr	r0, [pc, #112]	; (dd70 <main+0x234>)
    dd00:	e75d      	b.n	dbbe <main+0x82>
    dd02:	bf00      	nop
    dd04:	0001d9fa 	.word	0x0001d9fa
    dd08:	0001d974 	.word	0x0001d974
    dd0c:	200200e8 	.word	0x200200e8
    dd10:	0001da27 	.word	0x0001da27
    dd14:	0001da13 	.word	0x0001da13
    dd18:	0001da48 	.word	0x0001da48
    dd1c:	0001da67 	.word	0x0001da67
    dd20:	0001da89 	.word	0x0001da89
    dd24:	200213f6 	.word	0x200213f6
    dd28:	0001daa2 	.word	0x0001daa2
    dd2c:	0001dacc 	.word	0x0001dacc
    dd30:	0001dad3 	.word	0x0001dad3
    dd34:	0001dc23 	.word	0x0001dc23
    dd38:	0001dad8 	.word	0x0001dad8
    dd3c:	20020000 	.word	0x20020000
    dd40:	20020008 	.word	0x20020008
    dd44:	0001dae8 	.word	0x0001dae8
    dd48:	0001db0b 	.word	0x0001db0b
    dd4c:	0001db1b 	.word	0x0001db1b
    dd50:	0001db2b 	.word	0x0001db2b
    dd54:	0001db3b 	.word	0x0001db3b
    dd58:	0001db4b 	.word	0x0001db4b
    dd5c:	0001db5b 	.word	0x0001db5b
    dd60:	0001db77 	.word	0x0001db77
    dd64:	0001dd46 	.word	0x0001dd46
    dd68:	0001db93 	.word	0x0001db93
    dd6c:	0001dab7 	.word	0x0001dab7
    dd70:	0001dbb5 	.word	0x0001dbb5

0000dd74 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    dd74:	680b      	ldr	r3, [r1, #0]
    dd76:	3301      	adds	r3, #1
    dd78:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    dd7a:	4b01      	ldr	r3, [pc, #4]	; (dd80 <char_out+0xc>)
    dd7c:	681b      	ldr	r3, [r3, #0]
    dd7e:	4718      	bx	r3
    dd80:	20024f38 	.word	0x20024f38

0000dd84 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    dd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd88:	b085      	sub	sp, #20
    dd8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    dd8c:	469b      	mov	fp, r3
    dd8e:	2c01      	cmp	r4, #1
    dd90:	bfb8      	it	lt
    dd92:	2401      	movlt	r4, #1
    dd94:	2b01      	cmp	r3, #1
    dd96:	bf0c      	ite	eq
    dd98:	2330      	moveq	r3, #48	; 0x30
    dd9a:	2320      	movne	r3, #32
    dd9c:	4616      	mov	r6, r2
    dd9e:	4682      	mov	sl, r0
    dda0:	4688      	mov	r8, r1
    dda2:	2501      	movs	r5, #1
    dda4:	270a      	movs	r7, #10
    dda6:	2200      	movs	r2, #0
    dda8:	f8df 906c 	ldr.w	r9, [pc, #108]	; de18 <_printk_dec_ulong+0x94>
    ddac:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    ddae:	fbb6 f3f9 	udiv	r3, r6, r9
    ddb2:	9301      	str	r3, [sp, #4]
    ddb4:	b90a      	cbnz	r2, ddba <_printk_dec_ulong+0x36>
    ddb6:	45b1      	cmp	r9, r6
    ddb8:	d81c      	bhi.n	ddf4 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    ddba:	9b01      	ldr	r3, [sp, #4]
    ddbc:	4641      	mov	r1, r8
    ddbe:	f103 0030 	add.w	r0, r3, #48	; 0x30
    ddc2:	47d0      	blx	sl
			found_largest_digit = 1;
    ddc4:	2201      	movs	r2, #1
			digits++;
    ddc6:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    ddc8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    ddca:	3f01      	subs	r7, #1
		remainder %= pos;
    ddcc:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    ddd0:	230a      	movs	r3, #10
	while (pos >= 10) {
    ddd2:	2f01      	cmp	r7, #1
		pos /= 10;
    ddd4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    ddd8:	d1e9      	bne.n	ddae <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    ddda:	4641      	mov	r1, r8
    dddc:	f106 0030 	add.w	r0, r6, #48	; 0x30
    dde0:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    dde2:	f1bb 0f03 	cmp.w	fp, #3
    dde6:	d102      	bne.n	ddee <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    dde8:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    ddea:	2c00      	cmp	r4, #0
    ddec:	dc0e      	bgt.n	de0c <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    ddee:	b005      	add	sp, #20
    ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    ddf4:	42bc      	cmp	r4, r7
    ddf6:	dbe7      	blt.n	ddc8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    ddf8:	f1bb 0f02 	cmp.w	fp, #2
    ddfc:	d8e4      	bhi.n	ddc8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    ddfe:	4641      	mov	r1, r8
    de00:	9802      	ldr	r0, [sp, #8]
    de02:	9203      	str	r2, [sp, #12]
			digits++;
    de04:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    de06:	47d0      	blx	sl
			digits++;
    de08:	9a03      	ldr	r2, [sp, #12]
    de0a:	e7dd      	b.n	ddc8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    de0c:	4641      	mov	r1, r8
    de0e:	2020      	movs	r0, #32
    de10:	47d0      	blx	sl
    de12:	3c01      	subs	r4, #1
    de14:	e7e9      	b.n	ddea <_printk_dec_ulong+0x66>
    de16:	bf00      	nop
    de18:	3b9aca00 	.word	0x3b9aca00

0000de1c <__printk_hook_install>:
	_char_out = fn;
    de1c:	4b01      	ldr	r3, [pc, #4]	; (de24 <__printk_hook_install+0x8>)
    de1e:	6018      	str	r0, [r3, #0]
}
    de20:	4770      	bx	lr
    de22:	bf00      	nop
    de24:	20024f38 	.word	0x20024f38

0000de28 <vprintk>:
	struct out_context ctx = { 0 };
    de28:	2300      	movs	r3, #0
{
    de2a:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    de2c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    de2e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    de30:	4803      	ldr	r0, [pc, #12]	; (de40 <vprintk+0x18>)
    de32:	460b      	mov	r3, r1
    de34:	a901      	add	r1, sp, #4
    de36:	f00c ff20 	bl	1ac7a <z_vprintk>
}
    de3a:	b003      	add	sp, #12
    de3c:	f85d fb04 	ldr.w	pc, [sp], #4
    de40:	0000dd75 	.word	0x0000dd75

0000de44 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    de44:	f04f 0220 	mov.w	r2, #32
    de48:	f3ef 8311 	mrs	r3, BASEPRI
    de4c:	f382 8811 	msr	BASEPRI, r2
    de50:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    de54:	2101      	movs	r1, #1
    de56:	4a04      	ldr	r2, [pc, #16]	; (de68 <nordicsemi_nrf91_init+0x24>)
    de58:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    de5c:	f383 8811 	msr	BASEPRI, r3
    de60:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    de64:	2000      	movs	r0, #0
    de66:	4770      	bx	lr
    de68:	40039000 	.word	0x40039000

0000de6c <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    de6c:	4b01      	ldr	r3, [pc, #4]	; (de74 <socket_offload_register+0x8>)
    de6e:	6018      	str	r0, [r3, #0]
}
    de70:	4770      	bx	lr
    de72:	bf00      	nop
    de74:	200200f0 	.word	0x200200f0

0000de78 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    de78:	280a      	cmp	r0, #10
{
    de7a:	b538      	push	{r3, r4, r5, lr}
    de7c:	4604      	mov	r4, r0
    de7e:	4d07      	ldr	r5, [pc, #28]	; (de9c <console_out+0x24>)
	if ('\n' == c) {
    de80:	d104      	bne.n	de8c <console_out+0x14>
    de82:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    de84:	6843      	ldr	r3, [r0, #4]
    de86:	210d      	movs	r1, #13
    de88:	685b      	ldr	r3, [r3, #4]
    de8a:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    de8c:	6828      	ldr	r0, [r5, #0]
    de8e:	6843      	ldr	r3, [r0, #4]
    de90:	b2e1      	uxtb	r1, r4
    de92:	685b      	ldr	r3, [r3, #4]
    de94:	4798      	blx	r3

	return c;
}
    de96:	4620      	mov	r0, r4
    de98:	bd38      	pop	{r3, r4, r5, pc}
    de9a:	bf00      	nop
    de9c:	200200f4 	.word	0x200200f4

0000dea0 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    dea0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    dea2:	4c04      	ldr	r4, [pc, #16]	; (deb4 <uart_console_hook_install+0x14>)
    dea4:	4620      	mov	r0, r4
    dea6:	f000 fdc7 	bl	ea38 <__stdout_hook_install>
	__printk_hook_install(console_out);
    deaa:	4620      	mov	r0, r4
}
    deac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    deb0:	f7ff bfb4 	b.w	de1c <__printk_hook_install>
    deb4:	0000de79 	.word	0x0000de79

0000deb8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    deb8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    deba:	4804      	ldr	r0, [pc, #16]	; (decc <uart_console_init+0x14>)
    debc:	f00a f8c4 	bl	18048 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    dec0:	4b03      	ldr	r3, [pc, #12]	; (ded0 <uart_console_init+0x18>)
    dec2:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    dec4:	f7ff ffec 	bl	dea0 <uart_console_hook_install>

	return 0;
}
    dec8:	2000      	movs	r0, #0
    deca:	bd08      	pop	{r3, pc}
    decc:	0001dc27 	.word	0x0001dc27
    ded0:	200200f4 	.word	0x200200f4

0000ded4 <clock_async_start>:

static const struct nrf_clock_control_sub_config *get_sub_config(
					struct device *dev,
					enum clock_control_nrf_type type)
{
	const struct nrf_clock_control_config *config =
    ded4:	6803      	ldr	r3, [r0, #0]
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    ded6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
	clk_data = get_sub_data(dev, type);
    deda:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    dede:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
    dee0:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
    dee2:	b2ce      	uxtb	r6, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
    dee4:	b14a      	cbz	r2, defa <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    dee6:	230c      	movs	r3, #12
    dee8:	4373      	muls	r3, r6
    deea:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    deee:	429a      	cmp	r2, r3
    def0:	d05c      	beq.n	dfac <clock_async_start+0xd8>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    def2:	b113      	cbz	r3, defa <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    def4:	681b      	ldr	r3, [r3, #0]
	} while (item);
    def6:	2b00      	cmp	r3, #0
    def8:	d1f9      	bne.n	deee <clock_async_start+0x1a>
	__asm__ volatile(
    defa:	f04f 0320 	mov.w	r3, #32
    defe:	f3ef 8011 	mrs	r0, BASEPRI
    df02:	f383 8811 	msr	BASEPRI, r3
    df06:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    df0a:	210c      	movs	r1, #12
    df0c:	4371      	muls	r1, r6
    df0e:	eb0c 0301 	add.w	r3, ip, r1
    df12:	7a1c      	ldrb	r4, [r3, #8]
    df14:	3401      	adds	r4, #1
    df16:	b2e4      	uxtb	r4, r4
    df18:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    df1a:	f380 8811 	msr	BASEPRI, r0
    df1e:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
    df22:	b322      	cbz	r2, df6e <clock_async_start+0x9a>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    df24:	f04f 0e03 	mov.w	lr, #3
    df28:	4822      	ldr	r0, [pc, #136]	; (dfb4 <clock_async_start+0xe0>)
    df2a:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    df2e:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    df30:	b9a0      	cbnz	r0, df5c <clock_async_start+0x88>
	__asm__ volatile(
    df32:	f04f 0e20 	mov.w	lr, #32
    df36:	f3ef 8811 	mrs	r8, BASEPRI
    df3a:	f38e 8811 	msr	BASEPRI, lr
    df3e:	f3bf 8f6f 	isb	sy
	parent->next = child;
    df42:	6010      	str	r0, [r2, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    df44:	f8d3 e004 	ldr.w	lr, [r3, #4]
    df48:	f1be 0f00 	cmp.w	lr, #0
    df4c:	d121      	bne.n	df92 <clock_async_start+0xbe>
	list->tail = node;
    df4e:	605a      	str	r2, [r3, #4]
	list->head = node;
    df50:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    df54:	f388 8811 	msr	BASEPRI, r8
    df58:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    df5c:	2103      	movs	r1, #3
    df5e:	4b15      	ldr	r3, [pc, #84]	; (dfb4 <clock_async_start+0xe0>)
    df60:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    df64:	b118      	cbz	r0, df6e <clock_async_start+0x9a>
			data->cb(dev, data->user_data);
    df66:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    df6a:	4628      	mov	r0, r5
    df6c:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    df6e:	2c01      	cmp	r4, #1
    df70:	d10d      	bne.n	df8e <clock_async_start+0xba>
		bool do_start;

		do_start =  (config->start_handler) ?
    df72:	230c      	movs	r3, #12
    df74:	4373      	muls	r3, r6
    df76:	58fb      	ldr	r3, [r7, r3]
				config->start_handler(dev) : true;
    df78:	b97b      	cbnz	r3, df9a <clock_async_start+0xc6>
			if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			    (subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
				anomaly_132_workaround();
			}

			nrf_clock_task_trigger(NRF_CLOCK,
    df7a:	230c      	movs	r3, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df7c:	2201      	movs	r2, #1
    df7e:	fb03 7606 	mla	r6, r3, r6, r7
    df82:	7ab3      	ldrb	r3, [r6, #10]
    df84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    df88:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    df8c:	601a      	str	r2, [r3, #0]
			 */
			clkstarted_handle(dev, type);
		}
	}

	return 0;
    df8e:	2000      	movs	r0, #0
    df90:	e00e      	b.n	dfb0 <clock_async_start+0xdc>
	parent->next = child;
    df92:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    df96:	605a      	str	r2, [r3, #4]
    df98:	e7dc      	b.n	df54 <clock_async_start+0x80>
				config->start_handler(dev) : true;
    df9a:	4628      	mov	r0, r5
    df9c:	4798      	blx	r3
    df9e:	2800      	cmp	r0, #0
    dfa0:	d1eb      	bne.n	df7a <clock_async_start+0xa6>
			clkstarted_handle(dev, type);
    dfa2:	4631      	mov	r1, r6
    dfa4:	4628      	mov	r0, r5
    dfa6:	f00d f86e 	bl	1b086 <clkstarted_handle>
    dfaa:	e7f0      	b.n	df8e <clock_async_start+0xba>
		return -EBUSY;
    dfac:	f06f 000f 	mvn.w	r0, #15
}
    dfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfb4:	40005000 	.word	0x40005000

0000dfb8 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    dfb8:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    dfba:	2200      	movs	r2, #0
{
    dfbc:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    dfbe:	2101      	movs	r1, #1
    dfc0:	2005      	movs	r0, #5
    dfc2:	f000 f9df 	bl	e384 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    dfc6:	2005      	movs	r0, #5
    dfc8:	f000 f9cc 	bl	e364 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    dfcc:	2202      	movs	r2, #2
    dfce:	4b07      	ldr	r3, [pc, #28]	; (dfec <clk_init+0x34>)
	list->head = NULL;
    dfd0:	2000      	movs	r0, #0
    dfd2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    dfd6:	2203      	movs	r2, #3
    dfd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    dfdc:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    dfde:	e9c3 0000 	strd	r0, r0, [r3]
    dfe2:	68a3      	ldr	r3, [r4, #8]
    dfe4:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    dfe8:	bd10      	pop	{r4, pc}
    dfea:	bf00      	nop
    dfec:	40005000 	.word	0x40005000

0000dff0 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    dff0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    dff2:	4b10      	ldr	r3, [pc, #64]	; (e034 <nrf_power_clock_isr+0x44>)
    dff4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    dff6:	b162      	cbz	r2, e012 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    dff8:	4a0f      	ldr	r2, [pc, #60]	; (e038 <nrf_power_clock_isr+0x48>)
    dffa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    dffe:	07d1      	lsls	r1, r2, #31
    e000:	d507      	bpl.n	e012 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e002:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    e004:	480d      	ldr	r0, [pc, #52]	; (e03c <nrf_power_clock_isr+0x4c>)
    e006:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    e008:	6883      	ldr	r3, [r0, #8]
    e00a:	7a59      	ldrb	r1, [r3, #9]
    e00c:	b909      	cbnz	r1, e012 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    e00e:	f00d f83a 	bl	1b086 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e012:	4b0b      	ldr	r3, [pc, #44]	; (e040 <nrf_power_clock_isr+0x50>)
    e014:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    e016:	b162      	cbz	r2, e032 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
    e018:	4a07      	ldr	r2, [pc, #28]	; (e038 <nrf_power_clock_isr+0x48>)
    e01a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    e01e:	0792      	lsls	r2, r2, #30
    e020:	d507      	bpl.n	e032 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e022:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    e024:	2101      	movs	r1, #1
    e026:	601a      	str	r2, [r3, #0]
    e028:	4804      	ldr	r0, [pc, #16]	; (e03c <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    e02a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    e02e:	f00d b82a 	b.w	1b086 <clkstarted_handle>
}
    e032:	bd08      	pop	{r3, pc}
    e034:	40005100 	.word	0x40005100
    e038:	40005000 	.word	0x40005000
    e03c:	20025178 	.word	0x20025178
    e040:	40005104 	.word	0x40005104

0000e044 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    e044:	2200      	movs	r2, #0
    e046:	4b0d      	ldr	r3, [pc, #52]	; (e07c <rtc1_nrf_isr+0x38>)
    e048:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    e04c:	f04f 0220 	mov.w	r2, #32
    e050:	f3ef 8111 	mrs	r1, BASEPRI
    e054:	f382 8811 	msr	BASEPRI, r2
    e058:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    e05c:	4a08      	ldr	r2, [pc, #32]	; (e080 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    e05e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    e062:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    e064:	1ac0      	subs	r0, r0, r3
    e066:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    e06a:	4403      	add	r3, r0
    e06c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    e06e:	f381 8811 	msr	BASEPRI, r1
    e072:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    e076:	f00b b8df 	b.w	19238 <z_clock_announce>
    e07a:	bf00      	nop
    e07c:	40015000 	.word	0x40015000
    e080:	20020110 	.word	0x20020110

0000e084 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    e084:	b570      	push	{r4, r5, r6, lr}
    e086:	4815      	ldr	r0, [pc, #84]	; (e0dc <z_clock_driver_init+0x58>)
    e088:	f009 ffde 	bl	18048 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    e08c:	b310      	cbz	r0, e0d4 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    e08e:	6843      	ldr	r3, [r0, #4]
    e090:	2101      	movs	r1, #1
    e092:	681b      	ldr	r3, [r3, #0]
    e094:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    e096:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    e098:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    e09a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e09e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    e0a2:	4d0f      	ldr	r5, [pc, #60]	; (e0e0 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    e0a4:	4631      	mov	r1, r6
    e0a6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    e0aa:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    e0ae:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e0b2:	4b0c      	ldr	r3, [pc, #48]	; (e0e4 <z_clock_driver_init+0x60>)
    e0b4:	2015      	movs	r0, #21
    e0b6:	601c      	str	r4, [r3, #0]
    e0b8:	4b0b      	ldr	r3, [pc, #44]	; (e0e8 <z_clock_driver_init+0x64>)
    e0ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    e0be:	4622      	mov	r2, r4
    e0c0:	f000 f960 	bl	e384 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    e0c4:	2015      	movs	r0, #21
    e0c6:	f000 f94d 	bl	e364 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    e0ca:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    e0cc:	4b07      	ldr	r3, [pc, #28]	; (e0ec <z_clock_driver_init+0x68>)
    e0ce:	601e      	str	r6, [r3, #0]
    e0d0:	602e      	str	r6, [r5, #0]
}
    e0d2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    e0d4:	f04f 30ff 	mov.w	r0, #4294967295
    e0d8:	e7fb      	b.n	e0d2 <z_clock_driver_init+0x4e>
    e0da:	bf00      	nop
    e0dc:	0001dc2e 	.word	0x0001dc2e
    e0e0:	40015000 	.word	0x40015000
    e0e4:	40015140 	.word	0x40015140
    e0e8:	e000e100 	.word	0xe000e100
    e0ec:	40015008 	.word	0x40015008

0000e0f0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    e0f0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    e0f2:	4c25      	ldr	r4, [pc, #148]	; (e188 <z_clock_set_timeout+0x98>)
    e0f4:	f1b0 3fff 	cmp.w	r0, #4294967295
    e0f8:	bf08      	it	eq
    e0fa:	4620      	moveq	r0, r4
	__asm__ volatile(
    e0fc:	f04f 0320 	mov.w	r3, #32
    e100:	f3ef 8511 	mrs	r5, BASEPRI
    e104:	f383 8811 	msr	BASEPRI, r3
    e108:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    e10c:	4b1f      	ldr	r3, [pc, #124]	; (e18c <z_clock_set_timeout+0x9c>)
    e10e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    e112:	4b1f      	ldr	r3, [pc, #124]	; (e190 <z_clock_set_timeout+0xa0>)
    e114:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    e116:	1aca      	subs	r2, r1, r3
    e118:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    e11c:	0212      	lsls	r2, r2, #8
    e11e:	d41a      	bmi.n	e156 <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    e120:	1e42      	subs	r2, r0, #1
    e122:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e126:	42a2      	cmp	r2, r4
    e128:	bfa8      	it	ge
    e12a:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    e12c:	1c70      	adds	r0, r6, #1
    e12e:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    e130:	42a0      	cmp	r0, r4
    e132:	bf94      	ite	ls
    e134:	1818      	addls	r0, r3, r0
    e136:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    e138:	1a41      	subs	r1, r0, r1
    e13a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e13e:	4a13      	ldr	r2, [pc, #76]	; (e18c <z_clock_set_timeout+0x9c>)
    e140:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    e144:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    e146:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    e14a:	d906      	bls.n	e15a <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    e14c:	f385 8811 	msr	BASEPRI, r5
    e150:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    e154:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    e156:	2200      	movs	r2, #0
    e158:	e7e8      	b.n	e12c <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    e15a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    e15e:	490d      	ldr	r1, [pc, #52]	; (e194 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    e160:	1ac3      	subs	r3, r0, r3
    e162:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    e166:	1e5c      	subs	r4, r3, #1
    e168:	428c      	cmp	r4, r1
    e16a:	d905      	bls.n	e178 <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e16c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    e170:	4b09      	ldr	r3, [pc, #36]	; (e198 <z_clock_set_timeout+0xa8>)
    e172:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    e176:	e7e9      	b.n	e14c <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    e178:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    e17a:	bf02      	ittt	eq
    e17c:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    e17e:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    e182:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    e186:	e7e1      	b.n	e14c <z_clock_set_timeout+0x5c>
    e188:	00fffffe 	.word	0x00fffffe
    e18c:	40015000 	.word	0x40015000
    e190:	20020110 	.word	0x20020110
    e194:	007ffffe 	.word	0x007ffffe
    e198:	e000e100 	.word	0xe000e100

0000e19c <z_clock_elapsed>:
	__asm__ volatile(
    e19c:	f04f 0220 	mov.w	r2, #32
    e1a0:	f3ef 8311 	mrs	r3, BASEPRI
    e1a4:	f382 8811 	msr	BASEPRI, r2
    e1a8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    e1ac:	4a06      	ldr	r2, [pc, #24]	; (e1c8 <z_clock_elapsed+0x2c>)
    e1ae:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    e1b2:	4a06      	ldr	r2, [pc, #24]	; (e1cc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    e1b4:	6812      	ldr	r2, [r2, #0]
    e1b6:	1a80      	subs	r0, r0, r2
    e1b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    e1bc:	f383 8811 	msr	BASEPRI, r3
    e1c0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    e1c4:	4770      	bx	lr
    e1c6:	bf00      	nop
    e1c8:	40015000 	.word	0x40015000
    e1cc:	20020110 	.word	0x20020110

0000e1d0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    e1d0:	4804      	ldr	r0, [pc, #16]	; (e1e4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    e1d2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    e1d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    e1d6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    e1d8:	d003      	beq.n	e1e2 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    e1da:	4903      	ldr	r1, [pc, #12]	; (e1e8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    e1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    e1e0:	600a      	str	r2, [r1, #0]

0000e1e2 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    e1e2:	4770      	bx	lr
    ldr r0, =_kernel
    e1e4:	200212e0 	.word	0x200212e0
    ldr r1, =_SCS_ICSR
    e1e8:	e000ed04 	.word	0xe000ed04

0000e1ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    e1ec:	4929      	ldr	r1, [pc, #164]	; (e294 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    e1ee:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    e1f0:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    e1f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    e1f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    e1fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    e1fe:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    e202:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    e206:	d004      	beq.n	e212 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    e208:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    e20c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    e210:	e007      	b.n	e222 <out_fp_endif>

0000e212 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    e212:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    e216:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    e21a:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    e21e:	f050 0004 	orrs.w	r0, r0, #4

0000e222 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    e222:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e226:	2020      	movs	r0, #32
    msr BASEPRI, r0
    e228:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    e22c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    e230:	4f19      	ldr	r7, [pc, #100]	; (e298 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    e232:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    e236:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    e238:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    e23a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    e23c:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    e23e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    e240:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    e242:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    e246:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    e24a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    e24e:	d105      	bne.n	e25c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    e250:	2300      	movs	r3, #0
    vmsr fpscr, r3
    e252:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    e256:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    e25a:	e005      	b.n	e268 <in_fp_endif>

0000e25c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    e25c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    e260:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    e264:	ec90 8a10 	vldmia	r0, {s16-s31}

0000e268 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    e268:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    e26c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    e270:	f383 8814 	msr	CONTROL, r3
    isb
    e274:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    e278:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    e27a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    e27c:	f00c ff3a 	bl	1b0f4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    e280:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    e284:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    e288:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    e28c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    e290:	4770      	bx	lr
    e292:	0000      	.short	0x0000
    ldr r1, =_kernel
    e294:	200212e0 	.word	0x200212e0
    ldr v4, =_SCS_ICSR
    e298:	e000ed04 	.word	0xe000ed04

0000e29c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    e29c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    e2a0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    e2a2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    e2a6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    e2aa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    e2ac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    e2b0:	2902      	cmp	r1, #2
    beq _oops
    e2b2:	d0ff      	beq.n	e2b4 <_oops>

0000e2b4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    e2b4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    e2b6:	f00c ff12 	bl	1b0de <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    e2ba:	bd01      	pop	{r0, pc}

0000e2bc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    e2bc:	4901      	ldr	r1, [pc, #4]	; (e2c4 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    e2be:	2210      	movs	r2, #16
	str r2, [r1]
    e2c0:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    e2c2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    e2c4:	e000ed10 	.word	0xe000ed10

0000e2c8 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    e2c8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    e2ca:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    e2ce:	bf30      	wfi

	bx lr
    e2d0:	4770      	bx	lr
    e2d2:	bf00      	nop

0000e2d4 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    e2d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    e2d8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    e2dc:	4672      	mov	r2, lr

	push {r0, lr}
    e2de:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    e2e0:	f000 f950 	bl	e584 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    e2e4:	bd01      	pop	{r0, pc}
    e2e6:	bf00      	nop

0000e2e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    e2e8:	bf30      	wfi
    b z_SysNmiOnReset
    e2ea:	f7ff bffd 	b.w	e2e8 <z_SysNmiOnReset>
    e2ee:	bf00      	nop

0000e2f0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    e2f0:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    e2f2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    e2f4:	4a0b      	ldr	r2, [pc, #44]	; (e324 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    e2f6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    e2f8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    e2fa:	bf1e      	ittt	ne
	movne	r1, #0
    e2fc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    e2fe:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    e300:	f00d fd62 	blne	1bdc8 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    e304:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    e306:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    e30a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    e30e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    e312:	4905      	ldr	r1, [pc, #20]	; (e328 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    e314:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    e316:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    e318:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    e31a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    e31e:	4903      	ldr	r1, [pc, #12]	; (e32c <_isr_wrapper+0x3c>)
	bx r1
    e320:	4708      	bx	r1
    e322:	0000      	.short	0x0000
	ldr r2, =_kernel
    e324:	200212e0 	.word	0x200212e0
	ldr r1, =_sw_isr_table
    e328:	0001d0d8 	.word	0x0001d0d8
	ldr r1, =z_arm_int_exit
    e32c:	0000e1d1 	.word	0x0000e1d1

0000e330 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    e330:	4a09      	ldr	r2, [pc, #36]	; (e358 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    e332:	490a      	ldr	r1, [pc, #40]	; (e35c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    e334:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    e336:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    e338:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    e33a:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e33c:	4908      	ldr	r1, [pc, #32]	; (e360 <arch_swap+0x30>)
    e33e:	684b      	ldr	r3, [r1, #4]
    e340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e344:	604b      	str	r3, [r1, #4]
    e346:	2300      	movs	r3, #0
    e348:	f383 8811 	msr	BASEPRI, r3
    e34c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    e350:	6893      	ldr	r3, [r2, #8]
}
    e352:	6e98      	ldr	r0, [r3, #104]	; 0x68
    e354:	4770      	bx	lr
    e356:	bf00      	nop
    e358:	200212e0 	.word	0x200212e0
    e35c:	0001d900 	.word	0x0001d900
    e360:	e000ed00 	.word	0xe000ed00

0000e364 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    e364:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    e366:	2b00      	cmp	r3, #0
    e368:	db08      	blt.n	e37c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e36a:	2201      	movs	r2, #1
    e36c:	f000 001f 	and.w	r0, r0, #31
    e370:	fa02 f000 	lsl.w	r0, r2, r0
    e374:	4a02      	ldr	r2, [pc, #8]	; (e380 <arch_irq_enable+0x1c>)
    e376:	095b      	lsrs	r3, r3, #5
    e378:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    e37c:	4770      	bx	lr
    e37e:	bf00      	nop
    e380:	e000e100 	.word	0xe000e100

0000e384 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    e384:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    e386:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    e388:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e38c:	bfa8      	it	ge
    e38e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    e392:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e396:	bfb8      	it	lt
    e398:	4b05      	ldrlt	r3, [pc, #20]	; (e3b0 <z_arm_irq_priority_set+0x2c>)
    e39a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e39c:	bfab      	itete	ge
    e39e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e3a2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e3a6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e3aa:	5419      	strblt	r1, [r3, r0]
}
    e3ac:	4770      	bx	lr
    e3ae:	bf00      	nop
    e3b0:	e000ed14 	.word	0xe000ed14

0000e3b4 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    e3b4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    e3b6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    e3b8:	4b04      	ldr	r3, [pc, #16]	; (e3cc <_arch_isr_direct_pm+0x18>)
    e3ba:	6a18      	ldr	r0, [r3, #32]
    e3bc:	b118      	cbz	r0, e3c6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    e3be:	2200      	movs	r2, #0
    e3c0:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    e3c2:	f00d fd01 	bl	1bdc8 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    e3c6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    e3c8:	bd08      	pop	{r3, pc}
    e3ca:	bf00      	nop
    e3cc:	200212e0 	.word	0x200212e0

0000e3d0 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    e3d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e3d2:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    e3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    e3d6:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    e3d8:	9300      	str	r3, [sp, #0]
    e3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    e3dc:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    e3de:	f00d fec0 	bl	1c162 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    e3e2:	4a0c      	ldr	r2, [pc, #48]	; (e414 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    e3e4:	f1a4 0320 	sub.w	r3, r4, #32
    e3e8:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    e3ec:	f022 0201 	bic.w	r2, r2, #1
    e3f0:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    e3f2:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    e3f4:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    e3f6:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    e3f8:	9a07      	ldr	r2, [sp, #28]
    e3fa:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    e3fc:	9a08      	ldr	r2, [sp, #32]
    e3fe:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    e400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    e404:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    e406:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    e408:	2300      	movs	r3, #0
    e40a:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    e40c:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    e410:	b002      	add	sp, #8
    e412:	bd70      	pop	{r4, r5, r6, pc}
    e414:	0001af9d 	.word	0x0001af9d

0000e418 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e41c:	461f      	mov	r7, r3
    e41e:	4606      	mov	r6, r0
    e420:	460c      	mov	r4, r1
    e422:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    e424:	2300      	movs	r3, #0
    e426:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    e42a:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    e42e:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    e432:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    e436:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    e43a:	f000 f96b 	bl	e714 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    e43e:	4b0a      	ldr	r3, [pc, #40]	; (e468 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    e440:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    e442:	4630      	mov	r0, r6
	_current = main_thread;
    e444:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    e446:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    e44a:	f00c fe53 	bl	1b0f4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    e44e:	4638      	mov	r0, r7
    e450:	f384 8809 	msr	PSP, r4
    e454:	2100      	movs	r1, #0
    e456:	b663      	cpsie	if
    e458:	f381 8811 	msr	BASEPRI, r1
    e45c:	f3bf 8f6f 	isb	sy
    e460:	2200      	movs	r2, #0
    e462:	2300      	movs	r3, #0
    e464:	f00c fd9a 	bl	1af9c <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    e468:	200212e0 	.word	0x200212e0

0000e46c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    e46c:	4a11      	ldr	r2, [pc, #68]	; (e4b4 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    e46e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    e470:	4b11      	ldr	r3, [pc, #68]	; (e4b8 <z_arm_prep_c+0x4c>)
    e472:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    e476:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    e478:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e47c:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    e480:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    e484:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    e488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    e48c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    e490:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    e494:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e498:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    e49c:	2300      	movs	r3, #0
    e49e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    e4a2:	f009 fe17 	bl	180d4 <z_bss_zero>
	z_data_copy();
    e4a6:	f009 fe1f 	bl	180e8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    e4aa:	f000 f901 	bl	e6b0 <z_arm_int_lib_init>
	z_cstart();
    e4ae:	f009 fe59 	bl	18164 <z_cstart>
    e4b2:	bf00      	nop
    e4b4:	0000c000 	.word	0x0000c000
    e4b8:	e000ed00 	.word	0xe000ed00

0000e4bc <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    e4bc:	f00c fd94 	bl	1afe8 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e4c0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    e4c2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    e4c6:	4808      	ldr	r0, [pc, #32]	; (e4e8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    e4c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    e4cc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    e4ce:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    e4d2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    e4d6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    e4d8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    e4da:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    e4de:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    e4e2:	f7ff ffc3 	bl	e46c <z_arm_prep_c>
    e4e6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    e4e8:	20022df8 	.word	0x20022df8

0000e4ec <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    e4ec:	4b0c      	ldr	r3, [pc, #48]	; (e520 <mem_manage_fault.isra.2+0x34>)
    e4ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    e4f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    e4f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e4f4:	0792      	lsls	r2, r2, #30
    e4f6:	d508      	bpl.n	e50a <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    e4f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    e4fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e4fc:	0612      	lsls	r2, r2, #24
    e4fe:	d504      	bpl.n	e50a <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    e500:	b118      	cbz	r0, e50a <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    e502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e508:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    e50a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    e50c:	4b04      	ldr	r3, [pc, #16]	; (e520 <mem_manage_fault.isra.2+0x34>)
    e50e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    e510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    e512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    e514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e516:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    e51a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e51c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    e51e:	4770      	bx	lr
    e520:	e000ed00 	.word	0xe000ed00

0000e524 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    e524:	4b0d      	ldr	r3, [pc, #52]	; (e55c <bus_fault.isra.3+0x38>)
    e526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    e528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    e52a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e52c:	0592      	lsls	r2, r2, #22
    e52e:	d508      	bpl.n	e542 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    e530:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    e532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e534:	0412      	lsls	r2, r2, #16
    e536:	d504      	bpl.n	e542 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    e538:	b118      	cbz	r0, e542 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    e53a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e53c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    e540:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    e542:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    e544:	4b05      	ldr	r3, [pc, #20]	; (e55c <bus_fault.isra.3+0x38>)
    e546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    e548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e54a:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    e54c:	bf58      	it	pl
    e54e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    e550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e552:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    e556:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e558:	7008      	strb	r0, [r1, #0]

	return reason;
}
    e55a:	4770      	bx	lr
    e55c:	e000ed00 	.word	0xe000ed00

0000e560 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    e560:	4b07      	ldr	r3, [pc, #28]	; (e580 <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    e562:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    e564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    e566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    e568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    e56a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    e56c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    e56e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    e570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    e572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e574:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    e578:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    e57c:	629a      	str	r2, [r3, #40]	; 0x28
}
    e57e:	4770      	bx	lr
    e580:	e000ed00 	.word	0xe000ed00

0000e584 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    e584:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e586:	4b3a      	ldr	r3, [pc, #232]	; (e670 <z_arm_fault+0xec>)
{
    e588:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e58a:	685b      	ldr	r3, [r3, #4]
    e58c:	2500      	movs	r5, #0
    e58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    e592:	f385 8811 	msr	BASEPRI, r5
    e596:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e59a:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    e59e:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    e5a2:	d119      	bne.n	e5d8 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e5a4:	07d6      	lsls	r6, r2, #31
    e5a6:	d417      	bmi.n	e5d8 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e5a8:	0655      	lsls	r5, r2, #25
    e5aa:	d404      	bmi.n	e5b6 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e5ac:	0714      	lsls	r4, r2, #28
    e5ae:	d405      	bmi.n	e5bc <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
    e5b0:	4606      	mov	r6, r0
			*nested_exc = true;
    e5b2:	2501      	movs	r5, #1
    e5b4:	e004      	b.n	e5c0 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e5b6:	f012 0504 	ands.w	r5, r2, #4
    e5ba:	d00b      	beq.n	e5d4 <z_arm_fault+0x50>
			ptr_esf = (z_arch_esf_t *)psp;
    e5bc:	460e      	mov	r6, r1
	*nested_exc = false;
    e5be:	2500      	movs	r5, #0
	*recoverable = false;
    e5c0:	2200      	movs	r2, #0
	switch (fault) {
    e5c2:	3b03      	subs	r3, #3
	*recoverable = false;
    e5c4:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    e5c8:	2b03      	cmp	r3, #3
    e5ca:	d849      	bhi.n	e660 <z_arm_fault+0xdc>
    e5cc:	e8df f003 	tbb	[pc, r3]
    e5d0:	3d444006 	.word	0x3d444006
			ptr_esf = (z_arch_esf_t *)msp;
    e5d4:	4606      	mov	r6, r0
	if (!alternative_state_exc) {
    e5d6:	e7f3      	b.n	e5c0 <z_arm_fault+0x3c>
		return NULL;
    e5d8:	462e      	mov	r6, r5
    e5da:	e7f1      	b.n	e5c0 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e5dc:	4b24      	ldr	r3, [pc, #144]	; (e670 <z_arm_fault+0xec>)
    e5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e5e0:	0792      	lsls	r2, r2, #30
    e5e2:	d43d      	bmi.n	e660 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e5e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    e5e6:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    e5ea:	d008      	beq.n	e5fe <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
    e5ec:	3328      	adds	r3, #40	; 0x28
    e5ee:	781b      	ldrb	r3, [r3, #0]
    e5f0:	b1eb      	cbz	r3, e62e <z_arm_fault+0xaa>
			reason = mem_manage_fault(esf, 1, recoverable);
    e5f2:	2001      	movs	r0, #1
    e5f4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e5f8:	f7ff ff78 	bl	e4ec <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
    e5fc:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e5fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e602:	b993      	cbnz	r3, e62a <z_arm_fault+0xa6>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e604:	2268      	movs	r2, #104	; 0x68
    e606:	4631      	mov	r1, r6
    e608:	a802      	add	r0, sp, #8
    e60a:	f00d ff2c 	bl	1c466 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e610:	b345      	cbz	r5, e664 <z_arm_fault+0xe0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e612:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e616:	b922      	cbnz	r2, e622 <z_arm_fault+0x9e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e618:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e61c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e620:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e622:	a902      	add	r1, sp, #8
    e624:	4620      	mov	r0, r4
    e626:	f00c fd58 	bl	1b0da <z_arm_fatal_error>
}
    e62a:	b01c      	add	sp, #112	; 0x70
    e62c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    e62e:	4b11      	ldr	r3, [pc, #68]	; (e674 <z_arm_fault+0xf0>)
    e630:	781b      	ldrb	r3, [r3, #0]
    e632:	b12b      	cbz	r3, e640 <z_arm_fault+0xbc>
			reason = bus_fault(esf, 1, recoverable);
    e634:	2001      	movs	r0, #1
    e636:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e63a:	f7ff ff73 	bl	e524 <bus_fault.isra.3>
    e63e:	e7dd      	b.n	e5fc <z_arm_fault+0x78>
		} else if (SCB_UFSR != 0) {
    e640:	4b0d      	ldr	r3, [pc, #52]	; (e678 <z_arm_fault+0xf4>)
    e642:	881c      	ldrh	r4, [r3, #0]
    e644:	b2a4      	uxth	r4, r4
    e646:	2c00      	cmp	r4, #0
    e648:	d0d9      	beq.n	e5fe <z_arm_fault+0x7a>
		reason = usage_fault(esf);
    e64a:	f7ff ff89 	bl	e560 <usage_fault.isra.4>
    e64e:	e7d5      	b.n	e5fc <z_arm_fault+0x78>
		reason = mem_manage_fault(esf, 0, recoverable);
    e650:	f10d 0107 	add.w	r1, sp, #7
    e654:	2000      	movs	r0, #0
    e656:	e7cf      	b.n	e5f8 <z_arm_fault+0x74>
		reason = bus_fault(esf, 0, recoverable);
    e658:	f10d 0107 	add.w	r1, sp, #7
    e65c:	2000      	movs	r0, #0
    e65e:	e7ec      	b.n	e63a <z_arm_fault+0xb6>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e660:	2400      	movs	r4, #0
    e662:	e7cc      	b.n	e5fe <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e664:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e668:	f023 0301 	bic.w	r3, r3, #1
    e66c:	e7d8      	b.n	e620 <z_arm_fault+0x9c>
    e66e:	bf00      	nop
    e670:	e000ed00 	.word	0xe000ed00
    e674:	e000ed29 	.word	0xe000ed29
    e678:	e000ed2a 	.word	0xe000ed2a

0000e67c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e67c:	4a02      	ldr	r2, [pc, #8]	; (e688 <z_arm_fault_init+0xc>)
    e67e:	6953      	ldr	r3, [r2, #20]
    e680:	f043 0310 	orr.w	r3, r3, #16
    e684:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e686:	4770      	bx	lr
    e688:	e000ed00 	.word	0xe000ed00

0000e68c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e68c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e690:	4905      	ldr	r1, [pc, #20]	; (e6a8 <sys_arch_reboot+0x1c>)
    e692:	4b06      	ldr	r3, [pc, #24]	; (e6ac <sys_arch_reboot+0x20>)
    e694:	68ca      	ldr	r2, [r1, #12]
    e696:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e69a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e69c:	60cb      	str	r3, [r1, #12]
    e69e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e6a2:	bf00      	nop
    e6a4:	e7fd      	b.n	e6a2 <sys_arch_reboot+0x16>
    e6a6:	bf00      	nop
    e6a8:	e000ed00 	.word	0xe000ed00
    e6ac:	05fa0004 	.word	0x05fa0004

0000e6b0 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    e6b0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e6b2:	2120      	movs	r1, #32
    e6b4:	4803      	ldr	r0, [pc, #12]	; (e6c4 <z_arm_int_lib_init+0x14>)
    e6b6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e6b8:	3301      	adds	r3, #1
    e6ba:	2b41      	cmp	r3, #65	; 0x41
    e6bc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e6c0:	d1f9      	bne.n	e6b6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e6c2:	4770      	bx	lr
    e6c4:	e000e100 	.word	0xe000e100

0000e6c8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    e6c8:	b538      	push	{r3, r4, r5, lr}
    e6ca:	4605      	mov	r5, r0
	__asm__ volatile(
    e6cc:	f04f 0320 	mov.w	r3, #32
    e6d0:	f3ef 8411 	mrs	r4, BASEPRI
    e6d4:	f383 8811 	msr	BASEPRI, r3
    e6d8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    e6dc:	f00a f9e0 	bl	18aa0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    e6e0:	4b0a      	ldr	r3, [pc, #40]	; (e70c <z_impl_k_thread_abort+0x44>)
    e6e2:	689b      	ldr	r3, [r3, #8]
    e6e4:	42ab      	cmp	r3, r5
    e6e6:	d10b      	bne.n	e700 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e6e8:	4b09      	ldr	r3, [pc, #36]	; (e710 <z_impl_k_thread_abort+0x48>)
    e6ea:	685a      	ldr	r2, [r3, #4]
    e6ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
    e6f0:	b912      	cbnz	r2, e6f8 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    e6f2:	4620      	mov	r0, r4
    e6f4:	f7ff fe1c 	bl	e330 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e6f8:	685a      	ldr	r2, [r3, #4]
    e6fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e6fe:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    e700:	4620      	mov	r0, r4
}
    e702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    e706:	f00d bc65 	b.w	1bfd4 <z_reschedule_irqlock>
    e70a:	bf00      	nop
    e70c:	200212e0 	.word	0x200212e0
    e710:	e000ed00 	.word	0xe000ed00

0000e714 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e714:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e716:	4b0e      	ldr	r3, [pc, #56]	; (e750 <z_arm_configure_static_mpu_regions+0x3c>)
{
    e718:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e71a:	9302      	str	r3, [sp, #8]
    e71c:	4b0d      	ldr	r3, [pc, #52]	; (e754 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e71e:	4c0e      	ldr	r4, [pc, #56]	; (e758 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e720:	9303      	str	r3, [sp, #12]
    e722:	4b0e      	ldr	r3, [pc, #56]	; (e75c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e724:	4a0e      	ldr	r2, [pc, #56]	; (e760 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e726:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e728:	ab02      	add	r3, sp, #8
    e72a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e72c:	a801      	add	r0, sp, #4
    e72e:	4623      	mov	r3, r4
    e730:	2101      	movs	r1, #1
    e732:	f000 f903 	bl	e93c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e736:	2300      	movs	r3, #0
    e738:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e73a:	4b0a      	ldr	r3, [pc, #40]	; (e764 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e73c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e73e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e740:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e742:	9305      	str	r3, [sp, #20]
    e744:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e746:	f000 f903 	bl	e950 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e74a:	b008      	add	sp, #32
    e74c:	bd10      	pop	{r4, pc}
    e74e:	bf00      	nop
    e750:	20020000 	.word	0x20020000
    e754:	00000000 	.word	0x00000000
    e758:	20040000 	.word	0x20040000
    e75c:	00010006 	.word	0x00010006
    e760:	20020000 	.word	0x20020000
    e764:	20020000 	.word	0x20020000

0000e768 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    e768:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e76a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e76c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e76e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e772:	f004 031f 	and.w	r3, r4, #31
    e776:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e778:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e77a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e77c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e780:	4904      	ldr	r1, [pc, #16]	; (e794 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e782:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e786:	f043 0301 	orr.w	r3, r3, #1
    e78a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e78c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e78e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e790:	bd10      	pop	{r4, pc}
    e792:	bf00      	nop
    e794:	e000ed90 	.word	0xe000ed90

0000e798 <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e79c:	4680      	mov	r8, r0
    e79e:	4689      	mov	r9, r1
    e7a0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e7a2:	2700      	movs	r7, #0
	MPU->RNR = index;
    e7a4:	4d48      	ldr	r5, [pc, #288]	; (e8c8 <mpu_configure_regions_and_partition.constprop.1+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e7a6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e7a8:	454f      	cmp	r7, r9
    e7aa:	da07      	bge.n	e7bc <mpu_configure_regions_and_partition.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    e7ac:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    e7b0:	685e      	ldr	r6, [r3, #4]
    e7b2:	b3c6      	cbz	r6, e826 <mpu_configure_regions_and_partition.constprop.1+0x8e>
		&&
    e7b4:	2e1f      	cmp	r6, #31
    e7b6:	d805      	bhi.n	e7c4 <mpu_configure_regions_and_partition.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e7b8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e7bc:	4620      	mov	r0, r4
    e7be:	b005      	add	sp, #20
    e7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    e7c4:	06f2      	lsls	r2, r6, #27
    e7c6:	d1f7      	bne.n	e7b8 <mpu_configure_regions_and_partition.constprop.1+0x20>
		((part->start &
    e7c8:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e7cc:	f01a 0f1f 	tst.w	sl, #31
    e7d0:	d1f2      	bne.n	e7b8 <mpu_configure_regions_and_partition.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e7d2:	4650      	mov	r0, sl
    e7d4:	f00c fcb8 	bl	1b148 <arm_cmse_mpu_region_get>
    e7d8:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e7da:	eb06 000a 	add.w	r0, r6, sl
    e7de:	3801      	subs	r0, #1
    e7e0:	f00c fcb2 	bl	1b148 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e7e4:	4583      	cmp	fp, r0
    e7e6:	d1e7      	bne.n	e7b8 <mpu_configure_regions_and_partition.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    e7e8:	f11b 0f16 	cmn.w	fp, #22
    e7ec:	d0e4      	beq.n	e7b8 <mpu_configure_regions_and_partition.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    e7ee:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e7f0:	455b      	cmp	r3, fp
    e7f2:	dbe1      	blt.n	e7b8 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    e7f4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e7f8:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e7fa:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    e7fe:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e802:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e804:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e808:	e9d1 3200 	ldrd	r3, r2, [r1]
    e80c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e80e:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e810:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e814:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    e818:	d118      	bne.n	e84c <mpu_configure_regions_and_partition.constprop.1+0xb4>
    e81a:	4556      	cmp	r6, sl
    e81c:	d105      	bne.n	e82a <mpu_configure_regions_and_partition.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    e81e:	fa5f f08b 	uxtb.w	r0, fp
    e822:	f00c fc6f 	bl	1b104 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e826:	3701      	adds	r7, #1
    e828:	e7be      	b.n	e7a8 <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
    e82a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e82e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e830:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e834:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e838:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e83a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e83c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e83e:	f00c fc61 	bl	1b104 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e842:	f110 0f16 	cmn.w	r0, #22
    e846:	d0b7      	beq.n	e7b8 <mpu_configure_regions_and_partition.constprop.1+0x20>
			reg_index++;
    e848:	1c44      	adds	r4, r0, #1
    e84a:	e7ec      	b.n	e826 <mpu_configure_regions_and_partition.constprop.1+0x8e>
	MPU->RNR = index;
    e84c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e850:	692a      	ldr	r2, [r5, #16]
    e852:	3b01      	subs	r3, #1
    e854:	f023 031f 	bic.w	r3, r3, #31
    e858:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e85c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e85e:	4556      	cmp	r6, sl
    e860:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e862:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e864:	d0eb      	beq.n	e83e <mpu_configure_regions_and_partition.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    e866:	f00c fc4d 	bl	1b104 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e86a:	f110 0f16 	cmn.w	r0, #22
    e86e:	d0a3      	beq.n	e7b8 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    e870:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e874:	68ea      	ldr	r2, [r5, #12]
    e876:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e87a:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    e87c:	f362 0304 	bfi	r3, r2, #0, #5
    e880:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e884:	692b      	ldr	r3, [r5, #16]
    e886:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e88a:	085b      	lsrs	r3, r3, #1
    e88c:	f363 1247 	bfi	r2, r3, #5, #3
    e890:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e894:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    e898:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    e89a:	e9d2 3200 	ldrd	r3, r2, [r2]
    e89e:	4413      	add	r3, r2
    e8a0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e8a2:	f023 031f 	bic.w	r3, r3, #31
    e8a6:	441e      	add	r6, r3
    e8a8:	eba6 060a 	sub.w	r6, r6, sl
    e8ac:	b2c4      	uxtb	r4, r0
    e8ae:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    e8b2:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    e8b4:	9603      	str	r6, [sp, #12]
    e8b6:	f63f af7f 	bhi.w	e7b8 <mpu_configure_regions_and_partition.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    e8ba:	4620      	mov	r0, r4
    e8bc:	4669      	mov	r1, sp
    e8be:	f7ff ff53 	bl	e768 <region_init>
			reg_index++;
    e8c2:	3401      	adds	r4, #1
    e8c4:	e7af      	b.n	e826 <mpu_configure_regions_and_partition.constprop.1+0x8e>
    e8c6:	bf00      	nop
    e8c8:	e000ed90 	.word	0xe000ed90

0000e8cc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e8cc:	2205      	movs	r2, #5
    e8ce:	4b03      	ldr	r3, [pc, #12]	; (e8dc <arm_core_mpu_enable+0x10>)
    e8d0:	605a      	str	r2, [r3, #4]
    e8d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e8d6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e8da:	4770      	bx	lr
    e8dc:	e000ed90 	.word	0xe000ed90

0000e8e0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e8e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e8e4:	2200      	movs	r2, #0
    e8e6:	4b01      	ldr	r3, [pc, #4]	; (e8ec <arm_core_mpu_disable+0xc>)
    e8e8:	605a      	str	r2, [r3, #4]
}
    e8ea:	4770      	bx	lr
    e8ec:	e000ed90 	.word	0xe000ed90

0000e8f0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e8f0:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e8f2:	4d0e      	ldr	r5, [pc, #56]	; (e92c <arm_mpu_init+0x3c>)
    e8f4:	682e      	ldr	r6, [r5, #0]
    e8f6:	2e10      	cmp	r6, #16
    e8f8:	d815      	bhi.n	e926 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e8fa:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e8fc:	f7ff fff0 	bl	e8e0 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e900:	4b0b      	ldr	r3, [pc, #44]	; (e930 <arm_mpu_init+0x40>)
    e902:	4a0c      	ldr	r2, [pc, #48]	; (e934 <arm_mpu_init+0x44>)
    e904:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e906:	42a6      	cmp	r6, r4
    e908:	d105      	bne.n	e916 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e90a:	4b0b      	ldr	r3, [pc, #44]	; (e938 <arm_mpu_init+0x48>)
    e90c:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    e90e:	f7ff ffdd 	bl	e8cc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e912:	2000      	movs	r0, #0
}
    e914:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e916:	6869      	ldr	r1, [r5, #4]
    e918:	4620      	mov	r0, r4
    e91a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e91e:	f7ff ff23 	bl	e768 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e922:	3401      	adds	r4, #1
    e924:	e7ef      	b.n	e906 <arm_mpu_init+0x16>
		return -1;
    e926:	f04f 30ff 	mov.w	r0, #4294967295
    e92a:	e7f3      	b.n	e914 <arm_mpu_init+0x24>
    e92c:	0001d4e4 	.word	0x0001d4e4
    e930:	e000ed90 	.word	0xe000ed90
    e934:	0044ffaa 	.word	0x0044ffaa
    e938:	20021735 	.word	0x20021735

0000e93c <arm_core_mpu_configure_static_mpu_regions>:
{
    e93c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e93e:	4c03      	ldr	r4, [pc, #12]	; (e94c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e940:	7822      	ldrb	r2, [r4, #0]
    e942:	f7ff ff29 	bl	e798 <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e946:	7020      	strb	r0, [r4, #0]
}
    e948:	bd10      	pop	{r4, pc}
    e94a:	bf00      	nop
    e94c:	20021735 	.word	0x20021735

0000e950 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e954:	4c25      	ldr	r4, [pc, #148]	; (e9ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    e956:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e958:	4680      	mov	r8, r0
    e95a:	2700      	movs	r7, #0
    e95c:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    e95e:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    e962:	4d23      	ldr	r5, [pc, #140]	; (e9f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e964:	4557      	cmp	r7, sl
    e966:	da1a      	bge.n	e99e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e968:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e96c:	9301      	str	r3, [sp, #4]
    e96e:	2b00      	cmp	r3, #0
    e970:	d036      	beq.n	e9e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e972:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e976:	4608      	mov	r0, r1
    e978:	9100      	str	r1, [sp, #0]
    e97a:	f00c fbe5 	bl	1b148 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e97e:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e982:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e984:	1858      	adds	r0, r3, r1
    e986:	3801      	subs	r0, #1
    e988:	f00c fbde 	bl	1b148 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e98c:	4286      	cmp	r6, r0
    e98e:	4a19      	ldr	r2, [pc, #100]	; (e9f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    e990:	d008      	beq.n	e9a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e992:	2314      	movs	r3, #20
    e994:	435f      	muls	r7, r3
    e996:	f06f 0315 	mvn.w	r3, #21
    e99a:	f849 3007 	str.w	r3, [r9, r7]
}
    e99e:	b003      	add	sp, #12
    e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e9a4:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    e9a8:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e9aa:	d0f8      	beq.n	e99e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e9ac:	7813      	ldrb	r3, [r2, #0]
    e9ae:	42b3      	cmp	r3, r6
    e9b0:	ddf5      	ble.n	e99e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    e9b2:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    e9b6:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    e9b8:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    e9ba:	68e8      	ldr	r0, [r5, #12]
    e9bc:	7b19      	ldrb	r1, [r3, #12]
    e9be:	f360 0104 	bfi	r1, r0, #0, #5
    e9c2:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e9c4:	6929      	ldr	r1, [r5, #16]
    e9c6:	7b18      	ldrb	r0, [r3, #12]
    e9c8:	0849      	lsrs	r1, r1, #1
    e9ca:	f361 1047 	bfi	r0, r1, #5, #3
    e9ce:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e9d0:	68eb      	ldr	r3, [r5, #12]
    e9d2:	f023 031f 	bic.w	r3, r3, #31
    e9d6:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e9d8:	692b      	ldr	r3, [r5, #16]
    e9da:	f023 031f 	bic.w	r3, r3, #31
    e9de:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e9e0:	3701      	adds	r7, #1
    e9e2:	3414      	adds	r4, #20
    e9e4:	f108 080c 	add.w	r8, r8, #12
    e9e8:	e7bc      	b.n	e964 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e9ea:	bf00      	nop
    e9ec:	20020114 	.word	0x20020114
    e9f0:	e000ed90 	.word	0xe000ed90
    e9f4:	20021735 	.word	0x20021735

0000e9f8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e9f8:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    e9fa:	4b0c      	ldr	r3, [pc, #48]	; (ea2c <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    e9fc:	460e      	mov	r6, r1
    e9fe:	781c      	ldrb	r4, [r3, #0]
    ea00:	4605      	mov	r5, r0
    ea02:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    ea04:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    ea06:	4a0a      	ldr	r2, [pc, #40]	; (ea30 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    ea08:	2b0f      	cmp	r3, #15
    ea0a:	dd0b      	ble.n	ea24 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    ea0c:	4909      	ldr	r1, [pc, #36]	; (ea34 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    ea0e:	f851 0b04 	ldr.w	r0, [r1], #4
    ea12:	f7ff fea9 	bl	e768 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    ea16:	4622      	mov	r2, r4
    ea18:	4631      	mov	r1, r6
    ea1a:	4628      	mov	r0, r5
}
    ea1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ea20:	f7ff beba 	b.w	e798 <mpu_configure_regions_and_partition.constprop.1>
    ea24:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    ea26:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    ea28:	3301      	adds	r3, #1
    ea2a:	e7ed      	b.n	ea08 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    ea2c:	20021735 	.word	0x20021735
    ea30:	e000ed90 	.word	0xe000ed90
    ea34:	20020114 	.word	0x20020114

0000ea38 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    ea38:	4b01      	ldr	r3, [pc, #4]	; (ea40 <__stdout_hook_install+0x8>)
    ea3a:	6018      	str	r0, [r3, #0]
}
    ea3c:	4770      	bx	lr
    ea3e:	bf00      	nop
    ea40:	20024f40 	.word	0x20024f40

0000ea44 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    ea44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea46:	4606      	mov	r6, r0
    ea48:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    ea4a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    ea4c:	4f06      	ldr	r7, [pc, #24]	; (ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>)
	for (i = 0; i < nbytes; i++) {
    ea4e:	42ac      	cmp	r4, r5
    ea50:	da08      	bge.n	ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
		*(buf + i) = _stdin_hook();
    ea52:	683b      	ldr	r3, [r7, #0]
    ea54:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    ea56:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    ea58:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    ea5a:	f104 0401 	add.w	r4, r4, #1
    ea5e:	d001      	beq.n	ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
    ea60:	280d      	cmp	r0, #13
    ea62:	d1f4      	bne.n	ea4e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    ea64:	4620      	mov	r0, r4
    ea66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea68:	20024f3c 	.word	0x20024f3c

0000ea6c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea6e:	460e      	mov	r6, r1
    ea70:	4f09      	ldr	r7, [pc, #36]	; (ea98 <z_impl_zephyr_write_stdout+0x2c>)
    ea72:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    ea74:	f1c0 0501 	rsb	r5, r0, #1
    ea78:	192b      	adds	r3, r5, r4
    ea7a:	429e      	cmp	r6, r3
    ea7c:	dc01      	bgt.n	ea82 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    ea7e:	4630      	mov	r0, r6
    ea80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    ea82:	7863      	ldrb	r3, [r4, #1]
    ea84:	2b0a      	cmp	r3, #10
    ea86:	d102      	bne.n	ea8e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    ea88:	683b      	ldr	r3, [r7, #0]
    ea8a:	200d      	movs	r0, #13
    ea8c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    ea8e:	683b      	ldr	r3, [r7, #0]
    ea90:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    ea94:	4798      	blx	r3
    ea96:	e7ef      	b.n	ea78 <z_impl_zephyr_write_stdout+0xc>
    ea98:	20024f40 	.word	0x20024f40

0000ea9c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    ea9c:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    ea9e:	2105      	movs	r1, #5
    eaa0:	4801      	ldr	r0, [pc, #4]	; (eaa8 <_exit+0xc>)
    eaa2:	f7ff ffe3 	bl	ea6c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
    eaa6:	e7fe      	b.n	eaa6 <_exit+0xa>
    eaa8:	0001dc3e 	.word	0x0001dc3e

0000eaac <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
    eaac:	b538      	push	{r3, r4, r5, lr}
    eaae:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
    eab0:	f04f 31ff 	mov.w	r1, #4294967295
    eab4:	480b      	ldr	r0, [pc, #44]	; (eae4 <_sbrk+0x38>)
    eab6:	f00c fa62 	bl	1af7e <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
    eaba:	4a0b      	ldr	r2, [pc, #44]	; (eae8 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    eabc:	490b      	ldr	r1, [pc, #44]	; (eaec <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
    eabe:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    eac0:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
    eac4:	4425      	add	r5, r4
    eac6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eaca:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
    eacc:	bf2c      	ite	cs
    eace:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    ead2:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
    ead4:	4803      	ldr	r0, [pc, #12]	; (eae4 <_sbrk+0x38>)
		heap_sz += count;
    ead6:	bf38      	it	cc
    ead8:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
    eada:	f00c fa4b 	bl	1af74 <sys_sem_give>

	return ret;
}
    eade:	4620      	mov	r0, r4
    eae0:	bd38      	pop	{r3, r4, r5, pc}
    eae2:	bf00      	nop
    eae4:	2002527c 	.word	0x2002527c
    eae8:	20020128 	.word	0x20020128
    eaec:	2002533c 	.word	0x2002533c

0000eaf0 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    eaf0:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    eaf2:	4c07      	ldr	r4, [pc, #28]	; (eb10 <net_if_init+0x20>)
    eaf4:	4d07      	ldr	r5, [pc, #28]	; (eb14 <net_if_init+0x24>)
    eaf6:	42ac      	cmp	r4, r5
    eaf8:	d100      	bne.n	eafc <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    eafa:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    eafc:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    eafe:	681b      	ldr	r3, [r3, #0]
    eb00:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
    eb02:	b11b      	cbz	r3, eb0c <net_if_init+0x1c>
    eb04:	681b      	ldr	r3, [r3, #0]
    eb06:	b10b      	cbz	r3, eb0c <net_if_init+0x1c>
	api->init(iface);
    eb08:	4620      	mov	r0, r4
    eb0a:	4798      	blx	r3
	     iface++, if_count++) {
    eb0c:	3420      	adds	r4, #32
    eb0e:	e7f2      	b.n	eaf6 <net_if_init+0x6>
    eb10:	20025300 	.word	0x20025300
    eb14:	20025320 	.word	0x20025320

0000eb18 <net_if_post_init>:

void net_if_post_init(void)
{
    eb18:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    eb1a:	4c08      	ldr	r4, [pc, #32]	; (eb3c <net_if_post_init+0x24>)
    eb1c:	4d08      	ldr	r5, [pc, #32]	; (eb40 <net_if_post_init+0x28>)
    eb1e:	42ac      	cmp	r4, r5
    eb20:	d100      	bne.n	eb24 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    eb22:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
    eb24:	6820      	ldr	r0, [r4, #0]
    eb26:	2103      	movs	r1, #3
    eb28:	300c      	adds	r0, #12
    eb2a:	f00c fb4e 	bl	1b1ca <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    eb2e:	b910      	cbnz	r0, eb36 <net_if_post_init+0x1e>
			net_if_up(iface);
    eb30:	4620      	mov	r0, r4
    eb32:	f00c fb50 	bl	1b1d6 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    eb36:	3420      	adds	r4, #32
    eb38:	e7f1      	b.n	eb1e <net_if_post_init+0x6>
    eb3a:	bf00      	nop
    eb3c:	20025300 	.word	0x20025300
    eb40:	20025320 	.word	0x20025320

0000eb44 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
    eb44:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    eb46:	4a03      	ldr	r2, [pc, #12]	; (eb54 <nrf_gpio_pin_port_decode.isra.8.part.9+0x10>)
    eb48:	4b03      	ldr	r3, [pc, #12]	; (eb58 <nrf_gpio_pin_port_decode.isra.8.part.9+0x14>)
    eb4a:	f240 11ff 	movw	r1, #511	; 0x1ff
    eb4e:	4803      	ldr	r0, [pc, #12]	; (eb5c <nrf_gpio_pin_port_decode.isra.8.part.9+0x18>)
    eb50:	f00a fc4e 	bl	193f0 <__assert_func>
    eb54:	0001dc53 	.word	0x0001dc53
    eb58:	0001dc6c 	.word	0x0001dc6c
    eb5c:	0001dc7a 	.word	0x0001dc7a

0000eb60 <nrf_gpio_cfg_sense_set>:
    eb60:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    eb62:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    eb64:	d901      	bls.n	eb6a <nrf_gpio_cfg_sense_set+0xa>
    eb66:	f7ff ffed 	bl	eb44 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    eb6a:	4a06      	ldr	r2, [pc, #24]	; (eb84 <nrf_gpio_cfg_sense_set+0x24>)
    eb6c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    eb70:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    eb74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    eb78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    eb7c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    eb80:	bd08      	pop	{r3, pc}
    eb82:	bf00      	nop
    eb84:	40842500 	.word	0x40842500

0000eb88 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    eb88:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    eb8a:	4b09      	ldr	r3, [pc, #36]	; (ebb0 <gpio_nrfx_init+0x28>)
    eb8c:	781a      	ldrb	r2, [r3, #0]
    eb8e:	b96a      	cbnz	r2, ebac <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    eb90:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    eb92:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    eb94:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    eb96:	2105      	movs	r1, #5
    eb98:	f7ff fbf4 	bl	e384 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    eb9c:	2031      	movs	r0, #49	; 0x31
    eb9e:	f7ff fbe1 	bl	e364 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    eba2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    eba6:	4b03      	ldr	r3, [pc, #12]	; (ebb4 <gpio_nrfx_init+0x2c>)
    eba8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    ebac:	2000      	movs	r0, #0
    ebae:	bd08      	pop	{r3, pc}
    ebb0:	20021736 	.word	0x20021736
    ebb4:	40031000 	.word	0x40031000

0000ebb8 <gpiote_pin_int_cfg>:
{
    ebb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
    ebbc:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ebbe:	f001 041f 	and.w	r4, r1, #31
    ebc2:	689b      	ldr	r3, [r3, #8]
{
    ebc4:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ebc6:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    ebc8:	4e4b      	ldr	r6, [pc, #300]	; (ecf8 <gpiote_pin_int_cfg+0x140>)
    ebca:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    ebce:	2300      	movs	r3, #0
    ebd0:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    ebd4:	6887      	ldr	r7, [r0, #8]
    ebd6:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ebd8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    ebdc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    ebe0:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    ebe4:	428c      	cmp	r4, r1
    ebe6:	d16c      	bne.n	ecc2 <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
    ebe8:	fa22 f103 	lsr.w	r1, r2, r3
    ebec:	07c9      	lsls	r1, r1, #31
    ebee:	d568      	bpl.n	ecc2 <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    ebf0:	009a      	lsls	r2, r3, #2
    ebf2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ebf6:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    ebfa:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    ebfe:	f021 0101 	bic.w	r1, r1, #1
    ec02:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    ec06:	2201      	movs	r2, #1
    ec08:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    ec0c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    ec10:	4620      	mov	r0, r4
    ec12:	2100      	movs	r1, #0
    ec14:	f7ff ffa4 	bl	eb60 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    ec18:	68b8      	ldr	r0, [r7, #8]
    ec1a:	40e8      	lsrs	r0, r5
    ec1c:	f010 0001 	ands.w	r0, r0, #1
    ec20:	d04d      	beq.n	ecbe <gpiote_pin_int_cfg+0x106>
    ec22:	68f8      	ldr	r0, [r7, #12]
    ec24:	40e8      	lsrs	r0, r5
    ec26:	f010 0001 	ands.w	r0, r0, #1
    ec2a:	d048      	beq.n	ecbe <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
    ec2c:	6978      	ldr	r0, [r7, #20]
    ec2e:	40e8      	lsrs	r0, r5
    ec30:	f010 0801 	ands.w	r8, r0, #1
    ec34:	d051      	beq.n	ecda <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
    ec36:	69bb      	ldr	r3, [r7, #24]
    ec38:	40eb      	lsrs	r3, r5
    ec3a:	07db      	lsls	r3, r3, #31
    ec3c:	d445      	bmi.n	ecca <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
    ec3e:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    ec40:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    ec42:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    ec44:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    ec48:	f003 0301 	and.w	r3, r3, #1
    ec4c:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    ec50:	42ab      	cmp	r3, r5
    ec52:	bf14      	ite	ne
    ec54:	2501      	movne	r5, #1
    ec56:	2502      	moveq	r5, #2
    ec58:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    ec5a:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    ec5e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    ec62:	f010 0003 	ands.w	r0, r0, #3
    ec66:	d132      	bne.n	ecce <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    ec68:	008b      	lsls	r3, r1, #2
    ec6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ec6e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    ec72:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ec76:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    ec78:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    ec7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    ec80:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ec84:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    ec88:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    ec8c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    ec90:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
    ec92:	f101 0240 	add.w	r2, r1, #64	; 0x40
    ec96:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
    ec98:	b292      	uxth	r2, r2
    ec9a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ec9e:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    eca2:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    eca6:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    eca8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    ecac:	f042 0201 	orr.w	r2, r2, #1
    ecb0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    ecb4:	2301      	movs	r3, #1
    ecb6:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
    ecba:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    ecbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    ecc2:	3301      	adds	r3, #1
    ecc4:	2b08      	cmp	r3, #8
    ecc6:	d187      	bne.n	ebd8 <gpiote_pin_int_cfg+0x20>
    ecc8:	e7a2      	b.n	ec10 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    ecca:	2503      	movs	r5, #3
    eccc:	e7c4      	b.n	ec58 <gpiote_pin_int_cfg+0xa0>
    ecce:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    ecd0:	2908      	cmp	r1, #8
    ecd2:	d1c2      	bne.n	ec5a <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    ecd4:	f06f 0012 	mvn.w	r0, #18
    ecd8:	e7f1      	b.n	ecbe <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    ecda:	693b      	ldr	r3, [r7, #16]
    ecdc:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ecde:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    ece0:	4053      	eors	r3, r2
    ece2:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    ece6:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ecea:	bf0c      	ite	eq
    ecec:	2103      	moveq	r1, #3
    ecee:	2102      	movne	r1, #2
    ecf0:	f7ff ff36 	bl	eb60 <nrf_gpio_cfg_sense_set>
	int res = 0;
    ecf4:	4640      	mov	r0, r8
    ecf6:	e7e2      	b.n	ecbe <gpiote_pin_int_cfg+0x106>
    ecf8:	40031000 	.word	0x40031000

0000ecfc <gpio_nrfx_config>:
{
    ecfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed00:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    ed02:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    ed04:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    ed08:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    ed0c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    ed0e:	d040      	beq.n	ed92 <gpio_nrfx_config+0x96>
    ed10:	dc09      	bgt.n	ed26 <gpio_nrfx_config+0x2a>
    ed12:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    ed16:	d03e      	beq.n	ed96 <gpio_nrfx_config+0x9a>
    ed18:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    ed1c:	d03d      	beq.n	ed9a <gpio_nrfx_config+0x9e>
    ed1e:	b190      	cbz	r0, ed46 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    ed20:	f06f 0015 	mvn.w	r0, #21
    ed24:	e032      	b.n	ed8c <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    ed26:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    ed2a:	d038      	beq.n	ed9e <gpio_nrfx_config+0xa2>
    ed2c:	dc04      	bgt.n	ed38 <gpio_nrfx_config+0x3c>
    ed2e:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    ed32:	d1f5      	bne.n	ed20 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    ed34:	2003      	movs	r0, #3
    ed36:	e006      	b.n	ed46 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    ed38:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    ed3c:	d031      	beq.n	eda2 <gpio_nrfx_config+0xa6>
    ed3e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    ed42:	d1ed      	bne.n	ed20 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    ed44:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    ed46:	f406 7740 	and.w	r7, r6, #768	; 0x300
    ed4a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    ed4e:	d02a      	beq.n	eda6 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
    ed50:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    ed54:	4263      	negs	r3, r4
    ed56:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    ed58:	2901      	cmp	r1, #1
		from_pin = pin;
    ed5a:	bf19      	ittee	ne
    ed5c:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
    ed5e:	46a1      	movne	r9, r4
		to_pin   = 31U;
    ed60:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    ed64:	2400      	moveq	r4, #0
    ed66:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    ed6a:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    ed6e:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    ed72:	ea47 070c 	orr.w	r7, r7, ip
    ed76:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    ed7a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; ee24 <gpio_nrfx_config+0x128>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    ed7e:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    ed82:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    ed86:	45a1      	cmp	r9, r4
    ed88:	d20f      	bcs.n	edaa <gpio_nrfx_config+0xae>
	return 0;
    ed8a:	2000      	movs	r0, #0
}
    ed8c:	b003      	add	sp, #12
    ed8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    ed92:	2002      	movs	r0, #2
    ed94:	e7d7      	b.n	ed46 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    ed96:	2001      	movs	r0, #1
    ed98:	e7d5      	b.n	ed46 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    ed9a:	2004      	movs	r0, #4
    ed9c:	e7d3      	b.n	ed46 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    ed9e:	2005      	movs	r0, #5
    eda0:	e7d1      	b.n	ed46 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    eda2:	2006      	movs	r0, #6
    eda4:	e7cf      	b.n	ed46 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    eda6:	2303      	movs	r3, #3
    eda8:	e7d6      	b.n	ed58 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    edaa:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    edae:	6892      	ldr	r2, [r2, #8]
    edb0:	7911      	ldrb	r1, [r2, #4]
    edb2:	f004 021f 	and.w	r2, r4, #31
    edb6:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    edba:	2a1f      	cmp	r2, #31
    edbc:	dd01      	ble.n	edc2 <gpio_nrfx_config+0xc6>
    edbe:	f7ff fec1 	bl	eb44 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    edc2:	3280      	adds	r2, #128	; 0x80
    edc4:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    edc8:	68a9      	ldr	r1, [r5, #8]
    edca:	fa0b f204 	lsl.w	r2, fp, r4
    edce:	2b00      	cmp	r3, #0
    edd0:	d025      	beq.n	ee1e <gpio_nrfx_config+0x122>
    edd2:	4311      	orrs	r1, r2
    edd4:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    edd6:	6969      	ldr	r1, [r5, #20]
    edd8:	06b0      	lsls	r0, r6, #26
    edda:	bf4c      	ite	mi
    eddc:	4311      	orrmi	r1, r2
    edde:	4391      	bicpl	r1, r2
    ede0:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    ede2:	69a9      	ldr	r1, [r5, #24]
    ede4:	0670      	lsls	r0, r6, #25
    ede6:	bf4c      	ite	mi
    ede8:	4311      	orrmi	r1, r2
    edea:	4391      	bicpl	r1, r2
    edec:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    edee:	6929      	ldr	r1, [r5, #16]
    edf0:	0770      	lsls	r0, r6, #29
    edf2:	bf4c      	ite	mi
    edf4:	4311      	orrmi	r1, r2
    edf6:	4391      	bicpl	r1, r2
    edf8:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    edfa:	69e9      	ldr	r1, [r5, #28]
    edfc:	0630      	lsls	r0, r6, #24
    edfe:	bf4c      	ite	mi
    ee00:	430a      	orrmi	r2, r1
    ee02:	ea21 0202 	bicpl.w	r2, r1, r2
    ee06:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    ee08:	4621      	mov	r1, r4
    ee0a:	4640      	mov	r0, r8
    ee0c:	9301      	str	r3, [sp, #4]
    ee0e:	f7ff fed3 	bl	ebb8 <gpiote_pin_int_cfg>
		if (res != 0) {
    ee12:	2800      	cmp	r0, #0
    ee14:	d1ba      	bne.n	ed8c <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    ee16:	3401      	adds	r4, #1
    ee18:	b2e4      	uxtb	r4, r4
    ee1a:	9b01      	ldr	r3, [sp, #4]
    ee1c:	e7b3      	b.n	ed86 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    ee1e:	ea21 0102 	bic.w	r1, r1, r2
    ee22:	e7d7      	b.n	edd4 <gpio_nrfx_config+0xd8>
    ee24:	40842500 	.word	0x40842500

0000ee28 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ee28:	4b4b      	ldr	r3, [pc, #300]	; (ef58 <gpiote_event_handler+0x130>)
{
    ee2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee2e:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
    ee30:	4698      	mov	r8, r3
    ee32:	2e00      	cmp	r6, #0
    ee34:	d05d      	beq.n	eef2 <gpiote_event_handler+0xca>
	u32_t bit = 1U << pin;
    ee36:	2701      	movs	r7, #1
	u32_t pin = 0U;
    ee38:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    ee3c:	4a47      	ldr	r2, [pc, #284]	; (ef5c <gpiote_event_handler+0x134>)
    ee3e:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    ee40:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    ee42:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    ee44:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    ee48:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
    ee4c:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
    ee4e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    ee52:	430a      	orrs	r2, r1
    ee54:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    ee58:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    ee5c:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    ee5e:	6912      	ldr	r2, [r2, #16]
    ee60:	405c      	eors	r4, r3
    ee62:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
    ee64:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    ee68:	bb95      	cbnz	r5, eed0 <gpiote_event_handler+0xa8>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ee6a:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    ee6e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    ee70:	2001      	movs	r0, #1
    ee72:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    ee74:	493a      	ldr	r1, [pc, #232]	; (ef60 <gpiote_event_handler+0x138>)
    ee76:	4d3b      	ldr	r5, [pc, #236]	; (ef64 <gpiote_event_handler+0x13c>)
    ee78:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    ee7c:	fa00 fc03 	lsl.w	ip, r0, r3
    ee80:	ea1c 0f02 	tst.w	ip, r2
    ee84:	d00d      	beq.n	eea2 <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ee86:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    ee8a:	b152      	cbz	r2, eea2 <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ee8c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    ee90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ee94:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ee98:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    ee9c:	fa00 f202 	lsl.w	r2, r0, r2
    eea0:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    eea2:	3301      	adds	r3, #1
    eea4:	2b08      	cmp	r3, #8
    eea6:	d1e7      	bne.n	ee78 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
    eea8:	bb2c      	cbnz	r4, eef6 <gpiote_event_handler+0xce>
	if (port_event) {
    eeaa:	b17e      	cbz	r6, eecc <gpiote_event_handler+0xa4>
	u32_t bit = 1U << pin;
    eeac:	2701      	movs	r7, #1
	u32_t pin = 0U;
    eeae:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    eeb2:	4b2a      	ldr	r3, [pc, #168]	; (ef5c <gpiote_event_handler+0x134>)
    eeb4:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
    eeb6:	681b      	ldr	r3, [r3, #0]
    eeb8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    eeba:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    eebe:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
    eec0:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
    eec4:	4313      	orrs	r3, r2
    eec6:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    eeca:	bb5c      	cbnz	r4, ef24 <gpiote_event_handler+0xfc>
}
    eecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
    eed0:	423d      	tst	r5, r7
    eed2:	d00a      	beq.n	eeea <gpiote_event_handler+0xc2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    eed4:	f899 3004 	ldrb.w	r3, [r9, #4]
    eed8:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    eedc:	2100      	movs	r1, #0
    eede:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    eee2:	f7ff fe3d 	bl	eb60 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    eee6:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
    eeea:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    eeee:	007f      	lsls	r7, r7, #1
    eef0:	e7ba      	b.n	ee68 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    eef2:	4634      	mov	r4, r6
    eef4:	e7bb      	b.n	ee6e <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    eef6:	4f19      	ldr	r7, [pc, #100]	; (ef5c <gpiote_event_handler+0x134>)
    eef8:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    eefc:	f8d8 1000 	ldr.w	r1, [r8]
    ef00:	2900      	cmp	r1, #0
    ef02:	d0d2      	beq.n	eeaa <gpiote_event_handler+0x82>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ef04:	680d      	ldr	r5, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    ef06:	f8d8 300c 	ldr.w	r3, [r8, #12]
    ef0a:	688a      	ldr	r2, [r1, #8]
    ef0c:	4023      	ands	r3, r4
    ef0e:	4213      	tst	r3, r2
    ef10:	d003      	beq.n	ef1a <gpiote_event_handler+0xf2>
			cb->handler(port, cb, pins);
    ef12:	684b      	ldr	r3, [r1, #4]
    ef14:	4622      	mov	r2, r4
    ef16:	4638      	mov	r0, r7
    ef18:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ef1a:	2d00      	cmp	r5, #0
    ef1c:	d0c5      	beq.n	eeaa <gpiote_event_handler+0x82>
    ef1e:	4629      	mov	r1, r5
    ef20:	682d      	ldr	r5, [r5, #0]
    ef22:	e7f0      	b.n	ef06 <gpiote_event_handler+0xde>
		if (level_pins & bit) {
    ef24:	4227      	tst	r7, r4
    ef26:	d013      	beq.n	ef50 <gpiote_event_handler+0x128>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    ef28:	692b      	ldr	r3, [r5, #16]
    ef2a:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ef2c:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    ef30:	4053      	eors	r3, r2
    ef32:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
    ef36:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ef3a:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ef3e:	bf0c      	ite	eq
    ef40:	2103      	moveq	r1, #3
    ef42:	2102      	movne	r1, #2
    ef44:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    ef48:	f7ff fe0a 	bl	eb60 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ef4c:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
    ef50:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    ef54:	007f      	lsls	r7, r7, #1
    ef56:	e7b8      	b.n	eeca <gpiote_event_handler+0xa2>
    ef58:	4003117c 	.word	0x4003117c
    ef5c:	200251c0 	.word	0x200251c0
    ef60:	40031000 	.word	0x40031000
    ef64:	40031100 	.word	0x40031100

0000ef68 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    ef68:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    ef6a:	794b      	ldrb	r3, [r1, #5]
    ef6c:	2b01      	cmp	r3, #1
    ef6e:	d029      	beq.n	efc4 <uarte_nrfx_configure+0x5c>
    ef70:	2b03      	cmp	r3, #3
    ef72:	d124      	bne.n	efbe <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    ef74:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    ef76:	798b      	ldrb	r3, [r1, #6]
    ef78:	2b03      	cmp	r3, #3
    ef7a:	d120      	bne.n	efbe <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    ef7c:	79cc      	ldrb	r4, [r1, #7]
    ef7e:	b12c      	cbz	r4, ef8c <uarte_nrfx_configure+0x24>
    ef80:	2c01      	cmp	r4, #1
    ef82:	d11c      	bne.n	efbe <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    ef84:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    ef86:	689b      	ldr	r3, [r3, #8]
    ef88:	791b      	ldrb	r3, [r3, #4]
    ef8a:	b1c3      	cbz	r3, efbe <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    ef8c:	790a      	ldrb	r2, [r1, #4]
    ef8e:	b112      	cbz	r2, ef96 <uarte_nrfx_configure+0x2e>
    ef90:	2a02      	cmp	r2, #2
    ef92:	d114      	bne.n	efbe <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ef94:	220e      	movs	r2, #14
	switch (baudrate) {
    ef96:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    ef9a:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    ef9c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    ef9e:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
    efa0:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    efa2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    efa4:	d062      	beq.n	f06c <uarte_nrfx_configure+0x104>
    efa6:	d829      	bhi.n	effc <uarte_nrfx_configure+0x94>
    efa8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    efac:	d061      	beq.n	f072 <uarte_nrfx_configure+0x10a>
    efae:	d814      	bhi.n	efda <uarte_nrfx_configure+0x72>
    efb0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    efb4:	d05f      	beq.n	f076 <uarte_nrfx_configure+0x10e>
    efb6:	d807      	bhi.n	efc8 <uarte_nrfx_configure+0x60>
    efb8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    efbc:	d05e      	beq.n	f07c <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    efbe:	f06f 0085 	mvn.w	r0, #133	; 0x85
    efc2:	e052      	b.n	f06a <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    efc4:	2600      	movs	r6, #0
    efc6:	e7d6      	b.n	ef76 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    efc8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    efcc:	d059      	beq.n	f082 <uarte_nrfx_configure+0x11a>
    efce:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    efd2:	d1f4      	bne.n	efbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    efd4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    efd8:	e03c      	b.n	f054 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    efda:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    efde:	d053      	beq.n	f088 <uarte_nrfx_configure+0x120>
    efe0:	d804      	bhi.n	efec <uarte_nrfx_configure+0x84>
    efe2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    efe6:	d1ea      	bne.n	efbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    efe8:	4b32      	ldr	r3, [pc, #200]	; (f0b4 <uarte_nrfx_configure+0x14c>)
    efea:	e033      	b.n	f054 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    efec:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    eff0:	d04c      	beq.n	f08c <uarte_nrfx_configure+0x124>
    eff2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    eff6:	d1e2      	bne.n	efbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    eff8:	4b2f      	ldr	r3, [pc, #188]	; (f0b8 <uarte_nrfx_configure+0x150>)
    effa:	e02b      	b.n	f054 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    effc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f000:	d046      	beq.n	f090 <uarte_nrfx_configure+0x128>
    f002:	d812      	bhi.n	f02a <uarte_nrfx_configure+0xc2>
    f004:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f008:	42bb      	cmp	r3, r7
    f00a:	d044      	beq.n	f096 <uarte_nrfx_configure+0x12e>
    f00c:	d805      	bhi.n	f01a <uarte_nrfx_configure+0xb2>
    f00e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    f012:	d1d4      	bne.n	efbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f014:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f018:	e01c      	b.n	f054 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f01a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f01e:	d03d      	beq.n	f09c <uarte_nrfx_configure+0x134>
    f020:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f024:	d1cb      	bne.n	efbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f026:	4b25      	ldr	r3, [pc, #148]	; (f0bc <uarte_nrfx_configure+0x154>)
    f028:	e014      	b.n	f054 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f02a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f02e:	d038      	beq.n	f0a2 <uarte_nrfx_configure+0x13a>
    f030:	d808      	bhi.n	f044 <uarte_nrfx_configure+0xdc>
    f032:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f036:	d037      	beq.n	f0a8 <uarte_nrfx_configure+0x140>
    f038:	4f21      	ldr	r7, [pc, #132]	; (f0c0 <uarte_nrfx_configure+0x158>)
    f03a:	42bb      	cmp	r3, r7
    f03c:	d1bf      	bne.n	efbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f03e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f042:	e007      	b.n	f054 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f044:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f048:	d031      	beq.n	f0ae <uarte_nrfx_configure+0x146>
    f04a:	4f1e      	ldr	r7, [pc, #120]	; (f0c4 <uarte_nrfx_configure+0x15c>)
    f04c:	42bb      	cmp	r3, r7
    f04e:	d1b6      	bne.n	efbe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f054:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    f058:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    f05a:	6883      	ldr	r3, [r0, #8]
    f05c:	4322      	orrs	r2, r4
    f05e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f060:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    f064:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f068:	2000      	movs	r0, #0
}
    f06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f06c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f070:	e7f0      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f072:	4b15      	ldr	r3, [pc, #84]	; (f0c8 <uarte_nrfx_configure+0x160>)
    f074:	e7ee      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
    f076:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f07a:	e7eb      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    f07c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f080:	e7e8      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f082:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f086:	e7e5      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f088:	4b10      	ldr	r3, [pc, #64]	; (f0cc <uarte_nrfx_configure+0x164>)
    f08a:	e7e3      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f08c:	4b10      	ldr	r3, [pc, #64]	; (f0d0 <uarte_nrfx_configure+0x168>)
    f08e:	e7e1      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f090:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f094:	e7de      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f096:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f09a:	e7db      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f09c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f0a0:	e7d8      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f0a2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f0a6:	e7d5      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f0a8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f0ac:	e7d2      	b.n	f054 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f0ae:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f0b2:	e7cf      	b.n	f054 <uarte_nrfx_configure+0xec>
    f0b4:	00275000 	.word	0x00275000
    f0b8:	0075c000 	.word	0x0075c000
    f0bc:	013a9000 	.word	0x013a9000
    f0c0:	0003d090 	.word	0x0003d090
    f0c4:	000f4240 	.word	0x000f4240
    f0c8:	0013b000 	.word	0x0013b000
    f0cc:	003af000 	.word	0x003af000
    f0d0:	004ea000 	.word	0x004ea000

0000f0d4 <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
    f0d4:	b570      	push	{r4, r5, r6, lr}
    f0d6:	4606      	mov	r6, r0
    f0d8:	2200      	movs	r2, #0
    f0da:	2101      	movs	r1, #1
    f0dc:	2008      	movs	r0, #8
    f0de:	f7ff f951 	bl	e384 <z_arm_irq_priority_set>
    f0e2:	2008      	movs	r0, #8
    f0e4:	f7ff f93e 	bl	e364 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    f0e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	return dev->config->config_info;
    f0ec:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f0ee:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
    f0f0:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f0f2:	2103      	movs	r1, #3
    f0f4:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    f0f6:	4b1a      	ldr	r3, [pc, #104]	; (f160 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
    f0f8:	2012      	movs	r0, #18
    f0fa:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f0fc:	2200      	movs	r2, #0
    f0fe:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
    f102:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
    f106:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    f10a:	2013      	movs	r0, #19
    f10c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    f110:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    f114:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f116:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    f11a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    f11e:	231b      	movs	r3, #27
    f120:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    f124:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    f126:	4629      	mov	r1, r5
    f128:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    f12c:	4630      	mov	r0, r6
    f12e:	f7ff ff1b 	bl	ef68 <uarte_nrfx_configure>
	if (err) {
    f132:	b9a0      	cbnz	r0, f15e <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f134:	2308      	movs	r3, #8
    f136:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    f13a:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f13e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f142:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f146:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    f148:	68aa      	ldr	r2, [r5, #8]
    f14a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f14e:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f150:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f152:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f156:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f15a:	60a3      	str	r3, [r4, #8]
    f15c:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
    f15e:	bd70      	pop	{r4, r5, r6, pc}
    f160:	40842500 	.word	0x40842500

0000f164 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f164:	2200      	movs	r2, #0
{
    f166:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f168:	4611      	mov	r1, r2
    f16a:	202a      	movs	r0, #42	; 0x2a
    f16c:	f7ff f90a 	bl	e384 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
    f170:	f002 fe26 	bl	11dc0 <bsd_init>
    f174:	4b01      	ldr	r3, [pc, #4]	; (f17c <_bsdlib_init+0x18>)
    f176:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
    f178:	2000      	movs	r0, #0
    f17a:	bd08      	pop	{r3, pc}
    f17c:	2002014c 	.word	0x2002014c

0000f180 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    f180:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    f182:	4b0d      	ldr	r3, [pc, #52]	; (f1b8 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    f184:	4c0d      	ldr	r4, [pc, #52]	; (f1bc <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
    f186:	681a      	ldr	r2, [r3, #0]
    f188:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    f18a:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    f18c:	4623      	mov	r3, r4
		if (entry->id == id) {
    f18e:	6819      	ldr	r1, [r3, #0]
    f190:	4281      	cmp	r1, r0
    f192:	d00e      	beq.n	f1b2 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
    f194:	b151      	cbz	r1, f1ac <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
    f196:	6859      	ldr	r1, [r3, #4]
    f198:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
    f19a:	42b1      	cmp	r1, r6
    f19c:	bfc4      	itt	gt
    f19e:	461c      	movgt	r4, r3
    f1a0:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    f1a2:	3d01      	subs	r5, #1
    f1a4:	f103 0308 	add.w	r3, r3, #8
    f1a8:	d1f1      	bne.n	f18e <thread_monitor_entry_get+0xe>
    f1aa:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
    f1ac:	3a01      	subs	r2, #1
	new_entry->id = id;
    f1ae:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    f1b0:	605a      	str	r2, [r3, #4]

	return new_entry;
}
    f1b2:	4618      	mov	r0, r3
    f1b4:	bd70      	pop	{r4, r5, r6, pc}
    f1b6:	bf00      	nop
    f1b8:	20020150 	.word	0x20020150
    f1bc:	2002015c 	.word	0x2002015c

0000f1c0 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f1c0:	4668      	mov	r0, sp
    f1c2:	f020 0107 	bic.w	r1, r0, #7
    f1c6:	468d      	mov	sp, r1
    f1c8:	b519      	push	{r0, r3, r4, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f1ca:	4b0d      	ldr	r3, [pc, #52]	; (f200 <rpc_proxy_irq_handler+0x40>)
    f1cc:	e8d3 2fef 	ldaex	r2, [r3]
    f1d0:	3201      	adds	r2, #1
    f1d2:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f1d6:	2900      	cmp	r1, #0
    f1d8:	d1f8      	bne.n	f1cc <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
    f1da:	f006 ffa9 	bl	16130 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    f1de:	4b09      	ldr	r3, [pc, #36]	; (f204 <rpc_proxy_irq_handler+0x44>)
    f1e0:	681c      	ldr	r4, [r3, #0]
    f1e2:	b93c      	cbnz	r4, f1f4 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    f1e4:	f7ff f8e6 	bl	e3b4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    f1e8:	f7fe fff2 	bl	e1d0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f1ec:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    f1f0:	4685      	mov	sp, r0
    f1f2:	4770      	bx	lr
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f1f4:	1d20      	adds	r0, r4, #4
    f1f6:	f009 fe2f 	bl	18e58 <z_impl_k_sem_give>
    f1fa:	6824      	ldr	r4, [r4, #0]
	return node->next;
    f1fc:	e7f1      	b.n	f1e2 <rpc_proxy_irq_handler+0x22>
    f1fe:	bf00      	nop
    f200:	20020150 	.word	0x20020150
    f204:	20020154 	.word	0x20020154

0000f208 <bsd_os_timedwait>:
{
    f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f20c:	4688      	mov	r8, r1
    f20e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
    f210:	f00c fffa 	bl	1c208 <z_impl_k_uptime_get>
	if (*timeout == 0) {
    f214:	f8d8 3000 	ldr.w	r3, [r8]
    f218:	4606      	mov	r6, r0
    f21a:	2b00      	cmp	r3, #0
    f21c:	460f      	mov	r7, r1
    f21e:	d103      	bne.n	f228 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
    f220:	f009 fda0 	bl	18d64 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
    f224:	203c      	movs	r0, #60	; 0x3c
    f226:	e06e      	b.n	f306 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
    f228:	bfbc      	itt	lt
    f22a:	f04f 33ff 	movlt.w	r3, #4294967295
    f22e:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f232:	2201      	movs	r2, #1
    f234:	2100      	movs	r1, #0
    f236:	a802      	add	r0, sp, #8
    f238:	f00c ff7a 	bl	1c130 <z_impl_k_sem_init>
    f23c:	f10d 0a04 	add.w	sl, sp, #4
    f240:	f04f 0320 	mov.w	r3, #32
    f244:	f3ef 8b11 	mrs	fp, BASEPRI
    f248:	f383 8811 	msr	BASEPRI, r3
    f24c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    f250:	f009 fdfc 	bl	18e4c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f254:	f7ff ff94 	bl	f180 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    f258:	4933      	ldr	r1, [pc, #204]	; (f328 <bsd_os_timedwait+0x120>)
    f25a:	6843      	ldr	r3, [r0, #4]
    f25c:	680a      	ldr	r2, [r1, #0]
    f25e:	4689      	mov	r9, r1
    f260:	4293      	cmp	r3, r2
    f262:	f04f 0300 	mov.w	r3, #0
    f266:	d108      	bne.n	f27a <bsd_os_timedwait+0x72>
	parent->next = child;
    f268:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    f26a:	4b30      	ldr	r3, [pc, #192]	; (f32c <bsd_os_timedwait+0x124>)
    f26c:	685a      	ldr	r2, [r3, #4]
    f26e:	2a00      	cmp	r2, #0
    f270:	d14c      	bne.n	f30c <bsd_os_timedwait+0x104>
	list->head = node;
    f272:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
    f276:	2301      	movs	r3, #1
    f278:	e000      	b.n	f27c <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
    f27a:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    f27c:	f38b 8811 	msr	BASEPRI, fp
    f280:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    f284:	2b00      	cmp	r3, #0
    f286:	d03d      	beq.n	f304 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
    f288:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
    f28c:	a802      	add	r0, sp, #8
    f28e:	f009 fe0f 	bl	18eb0 <z_impl_k_sem_take>
	__asm__ volatile(
    f292:	f04f 0320 	mov.w	r3, #32
    f296:	f3ef 8b11 	mrs	fp, BASEPRI
    f29a:	f383 8811 	msr	BASEPRI, r3
    f29e:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f2a2:	2000      	movs	r0, #0
    f2a4:	4b21      	ldr	r3, [pc, #132]	; (f32c <bsd_os_timedwait+0x124>)
    f2a6:	681a      	ldr	r2, [r3, #0]
    f2a8:	b152      	cbz	r2, f2c0 <bsd_os_timedwait+0xb8>
    f2aa:	4552      	cmp	r2, sl
    f2ac:	d139      	bne.n	f322 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
    f2ae:	9901      	ldr	r1, [sp, #4]
    f2b0:	bb88      	cbnz	r0, f316 <bsd_os_timedwait+0x10e>
    f2b2:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    f2b4:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    f2b6:	4290      	cmp	r0, r2
    f2b8:	d100      	bne.n	f2bc <bsd_os_timedwait+0xb4>
	list->tail = node;
    f2ba:	6059      	str	r1, [r3, #4]
	parent->next = child;
    f2bc:	2300      	movs	r3, #0
    f2be:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
    f2c0:	f009 fdc4 	bl	18e4c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f2c4:	f7ff ff5c 	bl	f180 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    f2c8:	f8d9 3000 	ldr.w	r3, [r9]
    f2cc:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    f2ce:	f38b 8811 	msr	BASEPRI, fp
    f2d2:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
    f2d6:	f8d8 9000 	ldr.w	r9, [r8]
    f2da:	f1b9 3fff 	cmp.w	r9, #4294967295
    f2de:	d011      	beq.n	f304 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
    f2e0:	f00c ff92 	bl	1c208 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
    f2e4:	eb16 0209 	adds.w	r2, r6, r9
    f2e8:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
    f2ec:	1a14      	subs	r4, r2, r0
    f2ee:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
    f2f2:	2c00      	cmp	r4, #0
    f2f4:	f175 0300 	sbcs.w	r3, r5, #0
    f2f8:	bfb8      	it	lt
    f2fa:	2400      	movlt	r4, #0
    f2fc:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
    f300:	2c00      	cmp	r4, #0
    f302:	d08f      	beq.n	f224 <bsd_os_timedwait+0x1c>
	return 0;
    f304:	2000      	movs	r0, #0
}
    f306:	b009      	add	sp, #36	; 0x24
    f308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f30c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    f310:	f8c3 a004 	str.w	sl, [r3, #4]
    f314:	e7af      	b.n	f276 <bsd_os_timedwait+0x6e>
	parent->next = child;
    f316:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    f318:	6859      	ldr	r1, [r3, #4]
    f31a:	4291      	cmp	r1, r2
	list->tail = node;
    f31c:	bf08      	it	eq
    f31e:	6058      	streq	r0, [r3, #4]
    f320:	e7cc      	b.n	f2bc <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f322:	4610      	mov	r0, r2
    f324:	6812      	ldr	r2, [r2, #0]
    f326:	e7bf      	b.n	f2a8 <bsd_os_timedwait+0xa0>
    f328:	20020150 	.word	0x20020150
    f32c:	20020154 	.word	0x20020154

0000f330 <bsd_os_errno_set>:
	switch (err_code) {
    f330:	282d      	cmp	r0, #45	; 0x2d
{
    f332:	b510      	push	{r4, lr}
    f334:	4604      	mov	r4, r0
	switch (err_code) {
    f336:	f000 8089 	beq.w	f44c <bsd_os_errno_set+0x11c>
    f33a:	dc31      	bgt.n	f3a0 <bsd_os_errno_set+0x70>
    f33c:	2816      	cmp	r0, #22
    f33e:	d009      	beq.n	f354 <bsd_os_errno_set+0x24>
    f340:	dc19      	bgt.n	f376 <bsd_os_errno_set+0x46>
    f342:	2808      	cmp	r0, #8
    f344:	d006      	beq.n	f354 <bsd_os_errno_set+0x24>
    f346:	dc09      	bgt.n	f35c <bsd_os_errno_set+0x2c>
    f348:	2802      	cmp	r0, #2
    f34a:	d003      	beq.n	f354 <bsd_os_errno_set+0x24>
    f34c:	2805      	cmp	r0, #5
    f34e:	d001      	beq.n	f354 <bsd_os_errno_set+0x24>
    f350:	2801      	cmp	r0, #1
    f352:	d10c      	bne.n	f36e <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
    f354:	f00b ff1e 	bl	1b194 <__errno>
    f358:	6004      	str	r4, [r0, #0]
}
    f35a:	bd10      	pop	{r4, pc}
	switch (err_code) {
    f35c:	280c      	cmp	r0, #12
    f35e:	d0f9      	beq.n	f354 <bsd_os_errno_set+0x24>
    f360:	dc01      	bgt.n	f366 <bsd_os_errno_set+0x36>
    f362:	2809      	cmp	r0, #9
    f364:	e7f5      	b.n	f352 <bsd_os_errno_set+0x22>
    f366:	280d      	cmp	r0, #13
    f368:	d0f4      	beq.n	f354 <bsd_os_errno_set+0x24>
    f36a:	280e      	cmp	r0, #14
    f36c:	d055      	beq.n	f41a <bsd_os_errno_set+0xea>
		errno = 0xBAADBAAD;
    f36e:	f00b ff11 	bl	1b194 <__errno>
    f372:	4b54      	ldr	r3, [pc, #336]	; (f4c4 <bsd_os_errno_set+0x194>)
    f374:	e054      	b.n	f420 <bsd_os_errno_set+0xf0>
	switch (err_code) {
    f376:	2828      	cmp	r0, #40	; 0x28
    f378:	f000 809f 	beq.w	f4ba <bsd_os_errno_set+0x18a>
    f37c:	dc05      	bgt.n	f38a <bsd_os_errno_set+0x5a>
    f37e:	2823      	cmp	r0, #35	; 0x23
    f380:	d050      	beq.n	f424 <bsd_os_errno_set+0xf4>
    f382:	2825      	cmp	r0, #37	; 0x25
    f384:	d052      	beq.n	f42c <bsd_os_errno_set+0xfc>
    f386:	2818      	cmp	r0, #24
    f388:	e7e3      	b.n	f352 <bsd_os_errno_set+0x22>
    f38a:	282a      	cmp	r0, #42	; 0x2a
    f38c:	d056      	beq.n	f43c <bsd_os_errno_set+0x10c>
    f38e:	db51      	blt.n	f434 <bsd_os_errno_set+0x104>
    f390:	282b      	cmp	r0, #43	; 0x2b
    f392:	d057      	beq.n	f444 <bsd_os_errno_set+0x114>
    f394:	282c      	cmp	r0, #44	; 0x2c
    f396:	d1ea      	bne.n	f36e <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
    f398:	f00b fefc 	bl	1b194 <__errno>
    f39c:	237c      	movs	r3, #124	; 0x7c
    f39e:	e03f      	b.n	f420 <bsd_os_errno_set+0xf0>
	switch (err_code) {
    f3a0:	283c      	cmp	r0, #60	; 0x3c
    f3a2:	d06b      	beq.n	f47c <bsd_os_errno_set+0x14c>
    f3a4:	dc1d      	bgt.n	f3e2 <bsd_os_errno_set+0xb2>
    f3a6:	2833      	cmp	r0, #51	; 0x33
    f3a8:	d05c      	beq.n	f464 <bsd_os_errno_set+0x134>
    f3aa:	dc09      	bgt.n	f3c0 <bsd_os_errno_set+0x90>
    f3ac:	2830      	cmp	r0, #48	; 0x30
    f3ae:	d051      	beq.n	f454 <bsd_os_errno_set+0x124>
    f3b0:	2832      	cmp	r0, #50	; 0x32
    f3b2:	d053      	beq.n	f45c <bsd_os_errno_set+0x12c>
    f3b4:	282f      	cmp	r0, #47	; 0x2f
    f3b6:	d1da      	bne.n	f36e <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
    f3b8:	f00b feec 	bl	1b194 <__errno>
    f3bc:	236a      	movs	r3, #106	; 0x6a
    f3be:	e02f      	b.n	f420 <bsd_os_errno_set+0xf0>
	switch (err_code) {
    f3c0:	2836      	cmp	r0, #54	; 0x36
    f3c2:	d053      	beq.n	f46c <bsd_os_errno_set+0x13c>
    f3c4:	dc05      	bgt.n	f3d2 <bsd_os_errno_set+0xa2>
    f3c6:	2834      	cmp	r0, #52	; 0x34
    f3c8:	d1d1      	bne.n	f36e <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
    f3ca:	f00b fee3 	bl	1b194 <__errno>
    f3ce:	237e      	movs	r3, #126	; 0x7e
    f3d0:	e026      	b.n	f420 <bsd_os_errno_set+0xf0>
	switch (err_code) {
    f3d2:	2838      	cmp	r0, #56	; 0x38
    f3d4:	d04e      	beq.n	f474 <bsd_os_errno_set+0x144>
    f3d6:	2839      	cmp	r0, #57	; 0x39
    f3d8:	d1c9      	bne.n	f36e <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
    f3da:	f00b fedb 	bl	1b194 <__errno>
    f3de:	2380      	movs	r3, #128	; 0x80
    f3e0:	e01e      	b.n	f420 <bsd_os_errno_set+0xf0>
	switch (err_code) {
    f3e2:	287d      	cmp	r0, #125	; 0x7d
    f3e4:	d056      	beq.n	f494 <bsd_os_errno_set+0x164>
    f3e6:	dc0c      	bgt.n	f402 <bsd_os_errno_set+0xd2>
    f3e8:	2870      	cmp	r0, #112	; 0x70
    f3ea:	d04b      	beq.n	f484 <bsd_os_errno_set+0x154>
    f3ec:	dc01      	bgt.n	f3f2 <bsd_os_errno_set+0xc2>
    f3ee:	2869      	cmp	r0, #105	; 0x69
    f3f0:	e7af      	b.n	f352 <bsd_os_errno_set+0x22>
    f3f2:	2872      	cmp	r0, #114	; 0x72
    f3f4:	d04a      	beq.n	f48c <bsd_os_errno_set+0x15c>
    f3f6:	2873      	cmp	r0, #115	; 0x73
    f3f8:	d1b9      	bne.n	f36e <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
    f3fa:	f00b fecb 	bl	1b194 <__errno>
    f3fe:	2377      	movs	r3, #119	; 0x77
    f400:	e00e      	b.n	f420 <bsd_os_errno_set+0xf0>
	switch (err_code) {
    f402:	287f      	cmp	r0, #127	; 0x7f
    f404:	d04f      	beq.n	f4a6 <bsd_os_errno_set+0x176>
    f406:	db49      	blt.n	f49c <bsd_os_errno_set+0x16c>
    f408:	2880      	cmp	r0, #128	; 0x80
    f40a:	d051      	beq.n	f4b0 <bsd_os_errno_set+0x180>
    f40c:	2881      	cmp	r0, #129	; 0x81
    f40e:	d1ae      	bne.n	f36e <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
    f410:	f00b fec0 	bl	1b194 <__errno>
    f414:	f240 73d4 	movw	r3, #2004	; 0x7d4
    f418:	e002      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EFAULT;
    f41a:	f00b febb 	bl	1b194 <__errno>
    f41e:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
    f420:	6003      	str	r3, [r0, #0]
}
    f422:	e79a      	b.n	f35a <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
    f424:	f00b feb6 	bl	1b194 <__errno>
    f428:	230b      	movs	r3, #11
    f42a:	e7f9      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EDOM;
    f42c:	f00b feb2 	bl	1b194 <__errno>
    f430:	2321      	movs	r3, #33	; 0x21
    f432:	e7f5      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EPROTOTYPE;
    f434:	f00b feae 	bl	1b194 <__errno>
    f438:	236b      	movs	r3, #107	; 0x6b
    f43a:	e7f1      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = ENOPROTOOPT;
    f43c:	f00b feaa 	bl	1b194 <__errno>
    f440:	236d      	movs	r3, #109	; 0x6d
    f442:	e7ed      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EPROTONOSUPPORT;
    f444:	f00b fea6 	bl	1b194 <__errno>
    f448:	237b      	movs	r3, #123	; 0x7b
    f44a:	e7e9      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EOPNOTSUPP;
    f44c:	f00b fea2 	bl	1b194 <__errno>
    f450:	235f      	movs	r3, #95	; 0x5f
    f452:	e7e5      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EADDRINUSE;
    f454:	f00b fe9e 	bl	1b194 <__errno>
    f458:	2370      	movs	r3, #112	; 0x70
    f45a:	e7e1      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = ENETDOWN;
    f45c:	f00b fe9a 	bl	1b194 <__errno>
    f460:	2373      	movs	r3, #115	; 0x73
    f462:	e7dd      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = ENETUNREACH;
    f464:	f00b fe96 	bl	1b194 <__errno>
    f468:	2372      	movs	r3, #114	; 0x72
    f46a:	e7d9      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = ECONNRESET;
    f46c:	f00b fe92 	bl	1b194 <__errno>
    f470:	2368      	movs	r3, #104	; 0x68
    f472:	e7d5      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EISCONN;
    f474:	f00b fe8e 	bl	1b194 <__errno>
    f478:	237f      	movs	r3, #127	; 0x7f
    f47a:	e7d1      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = ETIMEDOUT;
    f47c:	f00b fe8a 	bl	1b194 <__errno>
    f480:	2374      	movs	r3, #116	; 0x74
    f482:	e7cd      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EHOSTDOWN;
    f484:	f00b fe86 	bl	1b194 <__errno>
    f488:	2375      	movs	r3, #117	; 0x75
    f48a:	e7c9      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EALREADY;
    f48c:	f00b fe82 	bl	1b194 <__errno>
    f490:	2378      	movs	r3, #120	; 0x78
    f492:	e7c5      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = ECANCELED;
    f494:	f00b fe7e 	bl	1b194 <__errno>
    f498:	238c      	movs	r3, #140	; 0x8c
    f49a:	e7c1      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = ENOKEY;
    f49c:	f00b fe7a 	bl	1b194 <__errno>
    f4a0:	f240 73d1 	movw	r3, #2001	; 0x7d1
    f4a4:	e7bc      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EKEYEXPIRED;
    f4a6:	f00b fe75 	bl	1b194 <__errno>
    f4aa:	f240 73d2 	movw	r3, #2002	; 0x7d2
    f4ae:	e7b7      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EKEYREVOKED;
    f4b0:	f00b fe70 	bl	1b194 <__errno>
    f4b4:	f240 73d3 	movw	r3, #2003	; 0x7d3
    f4b8:	e7b2      	b.n	f420 <bsd_os_errno_set+0xf0>
		errno = EMSGSIZE;
    f4ba:	f00b fe6b 	bl	1b194 <__errno>
    f4be:	237a      	movs	r3, #122	; 0x7a
    f4c0:	e7ae      	b.n	f420 <bsd_os_errno_set+0xf0>
    f4c2:	bf00      	nop
    f4c4:	baadbaad 	.word	0xbaadbaad

0000f4c8 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f4c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f4cc:	4b01      	ldr	r3, [pc, #4]	; (f4d4 <bsd_os_application_irq_set+0xc>)
    f4ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    f4d2:	4770      	bx	lr
    f4d4:	e000e100 	.word	0xe000e100

0000f4d8 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f4dc:	4b01      	ldr	r3, [pc, #4]	; (f4e4 <bsd_os_application_irq_clear+0xc>)
    f4de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    f4e2:	4770      	bx	lr
    f4e4:	e000e100 	.word	0xe000e100

0000f4e8 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f4e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    f4ec:	4b01      	ldr	r3, [pc, #4]	; (f4f4 <bsd_os_trace_irq_set+0xc>)
    f4ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    f4f2:	4770      	bx	lr
    f4f4:	e000e100 	.word	0xe000e100

0000f4f8 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f4f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    f4fc:	4b01      	ldr	r3, [pc, #4]	; (f504 <bsd_os_trace_irq_clear+0xc>)
    f4fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    f502:	4770      	bx	lr
    f504:	e000e100 	.word	0xe000e100

0000f508 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
    f508:	b508      	push	{r3, lr}
	list->head = NULL;
    f50a:	2300      	movs	r3, #0
    f50c:	4a07      	ldr	r2, [pc, #28]	; (f52c <bsd_os_init+0x24>)
	list->tail = NULL;
    f50e:	e9c2 3300 	strd	r3, r3, [r2]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f512:	4a07      	ldr	r2, [pc, #28]	; (f530 <bsd_os_init+0x28>)
    f514:	e8d2 1fef 	ldaex	r1, [r2]
    f518:	e8c2 3fe0 	stlex	r0, r3, [r2]
    f51c:	2800      	cmp	r0, #0
    f51e:	d1f9      	bne.n	f514 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
    f520:	f00c f852 	bl	1b5c8 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
    f524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
    f528:	f00c b843 	b.w	1b5b2 <trace_task_create>
    f52c:	20020154 	.word	0x20020154
    f530:	20020150 	.word	0x20020150

0000f534 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    f534:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    f538:	d03c      	beq.n	f5b4 <z_to_nrf_optname+0x80>
    f53a:	dc04      	bgt.n	f546 <z_to_nrf_optname+0x12>
    f53c:	2801      	cmp	r0, #1
    f53e:	d044      	beq.n	f5ca <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
    f540:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
    f544:	4770      	bx	lr
	switch (z_in_level) {
    f546:	f240 2302 	movw	r3, #514	; 0x202
    f54a:	4298      	cmp	r0, r3
    f54c:	d052      	beq.n	f5f4 <z_to_nrf_optname+0xc0>
    f54e:	f240 2303 	movw	r3, #515	; 0x203
    f552:	4298      	cmp	r0, r3
    f554:	d1f4      	bne.n	f540 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
    f556:	3901      	subs	r1, #1
    f558:	2913      	cmp	r1, #19
    f55a:	d8f1      	bhi.n	f540 <z_to_nrf_optname+0xc>
    f55c:	a301      	add	r3, pc, #4	; (adr r3, f564 <z_to_nrf_optname+0x30>)
    f55e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    f562:	bf00      	nop
    f564:	0000f601 	.word	0x0000f601
    f568:	0000f5c5 	.word	0x0000f5c5
    f56c:	0000f5e5 	.word	0x0000f5e5
    f570:	0000f5d7 	.word	0x0000f5d7
    f574:	0000f5e9 	.word	0x0000f5e9
    f578:	0000f5ed 	.word	0x0000f5ed
    f57c:	0000f5f1 	.word	0x0000f5f1
    f580:	0000f541 	.word	0x0000f541
    f584:	0000f541 	.word	0x0000f541
    f588:	0000f541 	.word	0x0000f541
    f58c:	0000f541 	.word	0x0000f541
    f590:	0000f541 	.word	0x0000f541
    f594:	0000f541 	.word	0x0000f541
    f598:	0000f541 	.word	0x0000f541
    f59c:	0000f541 	.word	0x0000f541
    f5a0:	0000f541 	.word	0x0000f541
    f5a4:	0000f541 	.word	0x0000f541
    f5a8:	0000f541 	.word	0x0000f541
    f5ac:	0000f541 	.word	0x0000f541
    f5b0:	0000f5db 	.word	0x0000f5db
		switch (z_in_optname) {
    f5b4:	3901      	subs	r1, #1
    f5b6:	2905      	cmp	r1, #5
    f5b8:	d8c2      	bhi.n	f540 <z_to_nrf_optname+0xc>
    f5ba:	e8df f001 	tbb	[pc, r1]
    f5be:	1503      	.short	0x1503
    f5c0:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
    f5c4:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    f5c6:	6013      	str	r3, [r2, #0]
    f5c8:	e00a      	b.n	f5e0 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
    f5ca:	2914      	cmp	r1, #20
    f5cc:	d005      	beq.n	f5da <z_to_nrf_optname+0xa6>
    f5ce:	2919      	cmp	r1, #25
    f5d0:	d005      	beq.n	f5de <z_to_nrf_optname+0xaa>
    f5d2:	2904      	cmp	r1, #4
    f5d4:	d1b4      	bne.n	f540 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
    f5d6:	2304      	movs	r3, #4
    f5d8:	e7f5      	b.n	f5c6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    f5da:	2314      	movs	r3, #20
    f5dc:	e7f3      	b.n	f5c6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
    f5de:	6011      	str	r1, [r2, #0]
	int retval = 0;
    f5e0:	2000      	movs	r0, #0
			break;
    f5e2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
    f5e4:	2303      	movs	r3, #3
    f5e6:	e7ee      	b.n	f5c6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
    f5e8:	2305      	movs	r3, #5
    f5ea:	e7ec      	b.n	f5c6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
    f5ec:	2306      	movs	r3, #6
    f5ee:	e7ea      	b.n	f5c6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    f5f0:	2307      	movs	r3, #7
    f5f2:	e7e8      	b.n	f5c6 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
    f5f4:	2902      	cmp	r1, #2
    f5f6:	d0e5      	beq.n	f5c4 <z_to_nrf_optname+0x90>
    f5f8:	2903      	cmp	r1, #3
    f5fa:	d0f3      	beq.n	f5e4 <z_to_nrf_optname+0xb0>
    f5fc:	2901      	cmp	r1, #1
    f5fe:	d19f      	bne.n	f540 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
    f600:	2301      	movs	r3, #1
    f602:	e7e0      	b.n	f5c6 <z_to_nrf_optname+0x92>

0000f604 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
    f604:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
    f606:	4b03      	ldr	r3, [pc, #12]	; (f614 <nrf91_socket_iface_init+0x10>)
    f608:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
    f60a:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
    f60c:	4802      	ldr	r0, [pc, #8]	; (f618 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
    f60e:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
    f610:	f7fe bc2c 	b.w	de6c <socket_offload_register>
    f614:	200201ac 	.word	0x200201ac
    f618:	0001d58c 	.word	0x0001d58c

0000f61c <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
    f61c:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
    f61e:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
    f620:	b118      	cbz	r0, f62a <callback_worker+0xe>
		data->callback(data->data);
    f622:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
    f626:	300c      	adds	r0, #12
    f628:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
    f62a:	a901      	add	r1, sp, #4
    f62c:	4802      	ldr	r0, [pc, #8]	; (f638 <callback_worker+0x1c>)
    f62e:	f008 fe69 	bl	18304 <k_mem_slab_free>
}
    f632:	b003      	add	sp, #12
    f634:	f85d fb04 	ldr.w	pc, [sp], #4
    f638:	20025214 	.word	0x20025214

0000f63c <open_socket>:
{
    f63c:	b508      	push	{r3, lr}
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    f63e:	4b09      	ldr	r3, [pc, #36]	; (f664 <open_socket+0x28>)
    f640:	f240 2201 	movw	r2, #513	; 0x201
    f644:	681b      	ldr	r3, [r3, #0]
    f646:	2102      	movs	r1, #2
    f648:	681b      	ldr	r3, [r3, #0]
    f64a:	2066      	movs	r0, #102	; 0x66
    f64c:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
    f64e:	4b06      	ldr	r3, [pc, #24]	; (f668 <open_socket+0x2c>)
    f650:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
    f652:	3001      	adds	r0, #1
    f654:	d104      	bne.n	f660 <open_socket+0x24>
		return -errno;
    f656:	f00b fd9d 	bl	1b194 <__errno>
    f65a:	6800      	ldr	r0, [r0, #0]
    f65c:	4240      	negs	r0, r0
}
    f65e:	bd08      	pop	{r3, pc}
	return 0;
    f660:	2000      	movs	r0, #0
    f662:	e7fc      	b.n	f65e <open_socket+0x22>
    f664:	200200f0 	.word	0x200200f0
    f668:	200201b0 	.word	0x200201b0

0000f66c <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
    f66c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f66e:	4606      	mov	r6, r0
    f670:	460c      	mov	r4, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
    f672:	f7fd fc01 	bl	ce78 <strlen>
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    f676:	4b10      	ldr	r3, [pc, #64]	; (f6b8 <at_write+0x4c>)
    f678:	4602      	mov	r2, r0
    f67a:	681b      	ldr	r3, [r3, #0]
    f67c:	480f      	ldr	r0, [pc, #60]	; (f6bc <at_write+0x50>)
    f67e:	6add      	ldr	r5, [r3, #44]	; 0x2c
    f680:	4631      	mov	r1, r6
    f682:	2300      	movs	r3, #0
    f684:	6800      	ldr	r0, [r0, #0]
    f686:	47a8      	blx	r5

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);

	if (bytes_sent == -1) {
    f688:	3001      	adds	r0, #1
    f68a:	d10e      	bne.n	f6aa <at_write+0x3e>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
		ret.code  = -errno;
    f68c:	f00b fd82 	bl	1b194 <__errno>
    f690:	6803      	ldr	r3, [r0, #0]
    f692:	425b      	negs	r3, r3
    f694:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
    f696:	2301      	movs	r3, #1
    f698:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
    f69c:	b114      	cbz	r4, f6a4 <at_write+0x38>
		*state = ret.state;
    f69e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f6a2:	7023      	strb	r3, [r4, #0]
	}

	return ret.code;
}
    f6a4:	9800      	ldr	r0, [sp, #0]
    f6a6:	b002      	add	sp, #8
    f6a8:	bd70      	pop	{r4, r5, r6, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    f6aa:	f04f 32ff 	mov.w	r2, #4294967295
    f6ae:	4669      	mov	r1, sp
    f6b0:	4803      	ldr	r0, [pc, #12]	; (f6c0 <at_write+0x54>)
    f6b2:	f008 ff4f 	bl	18554 <z_impl_k_msgq_get>
    f6b6:	e7f1      	b.n	f69c <at_write+0x30>
    f6b8:	200200f0 	.word	0x200200f0
    f6bc:	200201b0 	.word	0x200201b0
    f6c0:	200252bc 	.word	0x200252bc

0000f6c4 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
    f6c4:	b510      	push	{r4, lr}
	static bool initialized;

	if (initialized) {
    f6c6:	4b0e      	ldr	r3, [pc, #56]	; (f700 <at_cmd_driver_init+0x3c>)
{
    f6c8:	b086      	sub	sp, #24
	if (initialized) {
    f6ca:	781a      	ldrb	r2, [r3, #0]
    f6cc:	b9b2      	cbnz	r2, f6fc <at_cmd_driver_init+0x38>
		return 0;
	}

	initialized = true;
    f6ce:	2201      	movs	r2, #1
    f6d0:	701a      	strb	r2, [r3, #0]

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
    f6d2:	f7ff ffb3 	bl	f63c <open_socket>
	if (err) {
    f6d6:	4604      	mov	r4, r0
    f6d8:	b968      	cbnz	r0, f6f6 <at_cmd_driver_init+0x32>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f6da:	230a      	movs	r3, #10
    f6dc:	e9cd 0004 	strd	r0, r0, [sp, #16]
    f6e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
    f6e4:	e9cd 0000 	strd	r0, r0, [sp]
    f6e8:	4b06      	ldr	r3, [pc, #24]	; (f704 <at_cmd_driver_init+0x40>)
    f6ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f6ee:	4906      	ldr	r1, [pc, #24]	; (f708 <at_cmd_driver_init+0x44>)
    f6f0:	4806      	ldr	r0, [pc, #24]	; (f70c <at_cmd_driver_init+0x48>)
    f6f2:	f009 fc57 	bl	18fa4 <z_impl_k_thread_create>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
    f6f6:	4620      	mov	r0, r4
    f6f8:	b006      	add	sp, #24
    f6fa:	bd10      	pop	{r4, pc}
		return 0;
    f6fc:	2400      	movs	r4, #0
    f6fe:	e7fa      	b.n	f6f6 <at_cmd_driver_init+0x32>
    f700:	20021757 	.word	0x20021757
    f704:	0000f711 	.word	0x0000f711
    f708:	200218b8 	.word	0x200218b8
    f70c:	200201c4 	.word	0x200201c4

0000f710 <socket_thread_fn>:
{
    f710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, item->data,
    f714:	4e6a      	ldr	r6, [pc, #424]	; (f8c0 <socket_thread_fn+0x1b0>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
    f716:	4f6b      	ldr	r7, [pc, #428]	; (f8c4 <socket_thread_fn+0x1b4>)
    f718:	46b0      	mov	r8, r6
    f71a:	f04f 32ff 	mov.w	r2, #4294967295
    f71e:	a901      	add	r1, sp, #4
    f720:	4638      	mov	r0, r7
    f722:	f008 fdc3 	bl	182ac <k_mem_slab_alloc>
		ret.code  = 0;
    f726:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
    f728:	4c67      	ldr	r4, [pc, #412]	; (f8c8 <socket_thread_fn+0x1b8>)
		item->callback = NULL;
    f72a:	9901      	ldr	r1, [sp, #4]
    f72c:	6822      	ldr	r2, [r4, #0]
    f72e:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
    f732:	6a55      	ldr	r5, [r2, #36]	; 0x24
		ret.code  = 0;
    f734:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_OK;
    f736:	f88d 300c 	strb.w	r3, [sp, #12]
    f73a:	f640 228c 	movw	r2, #2700	; 0xa8c
    f73e:	310c      	adds	r1, #12
    f740:	6830      	ldr	r0, [r6, #0]
    f742:	47a8      	blx	r5
		if (bytes_read < 0) {
    f744:	2800      	cmp	r0, #0
    f746:	4625      	mov	r5, r4
    f748:	da31      	bge.n	f7ae <socket_thread_fn+0x9e>
	return socket_ops->close(sock);
    f74a:	6823      	ldr	r3, [r4, #0]
    f74c:	6830      	ldr	r0, [r6, #0]
    f74e:	685b      	ldr	r3, [r3, #4]
    f750:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
    f752:	bb20      	cbnz	r0, f79e <socket_thread_fn+0x8e>
			    (open_socket() == 0)) {
    f754:	f7ff ff72 	bl	f63c <open_socket>
			if ((close(common_socket_fd) == 0) &&
    f758:	bb08      	cbnz	r0, f79e <socket_thread_fn+0x8e>
				ret.state = AT_CMD_ERROR;
    f75a:	2301      	movs	r3, #1
    f75c:	f88d 300c 	strb.w	r3, [sp, #12]
				ret.code  = -errno;
    f760:	f00b fd18 	bl	1b194 <__errno>
    f764:	6803      	ldr	r3, [r0, #0]
    f766:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
    f768:	9302      	str	r3, [sp, #8]
		if (item->callback == NULL) {
    f76a:	9901      	ldr	r1, [sp, #4]
    f76c:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
    f770:	2b00      	cmp	r3, #0
    f772:	d17c      	bne.n	f86e <socket_thread_fn+0x15e>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
    f774:	a901      	add	r1, sp, #4
    f776:	4638      	mov	r0, r7
    f778:	f008 fdc4 	bl	18304 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
    f77c:	4b53      	ldr	r3, [pc, #332]	; (f8cc <socket_thread_fn+0x1bc>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
    f77e:	689b      	ldr	r3, [r3, #8]
    f780:	2b00      	cmp	r3, #0
    f782:	d1ca      	bne.n	f71a <socket_thread_fn+0xa>
    f784:	f89d 200c 	ldrb.w	r2, [sp, #12]
    f788:	2a04      	cmp	r2, #4
    f78a:	d0c6      	beq.n	f71a <socket_thread_fn+0xa>
			current_cmd_handler = NULL;
    f78c:	4a50      	ldr	r2, [pc, #320]	; (f8d0 <socket_thread_fn+0x1c0>)
    f78e:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
    f790:	f04f 32ff 	mov.w	r2, #4294967295
    f794:	a902      	add	r1, sp, #8
    f796:	484f      	ldr	r0, [pc, #316]	; (f8d4 <socket_thread_fn+0x1c4>)
    f798:	f008 fe8a 	bl	184b0 <z_impl_k_msgq_put>
    f79c:	e7bd      	b.n	f71a <socket_thread_fn+0xa>
    f79e:	682b      	ldr	r3, [r5, #0]
    f7a0:	f8d8 0000 	ldr.w	r0, [r8]
    f7a4:	685b      	ldr	r3, [r3, #4]
    f7a6:	4798      	blx	r3
}
    f7a8:	b004      	add	sp, #16
    f7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (bytes_read == sizeof(item->data) ||
    f7ae:	f640 238c 	movw	r3, #2700	; 0xa8c
    f7b2:	4298      	cmp	r0, r3
    f7b4:	d007      	beq.n	f7c6 <socket_thread_fn+0xb6>
    f7b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
			   item->data[bytes_read - 1] != '\0') {
    f7ba:	4448      	add	r0, r9
		} else if (bytes_read == sizeof(item->data) ||
    f7bc:	f890 a00b 	ldrb.w	sl, [r0, #11]
    f7c0:	f1ba 0f00 	cmp.w	sl, #0
    f7c4:	d002      	beq.n	f7cc <socket_thread_fn+0xbc>
			ret.code  = -ENOBUFS;
    f7c6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    f7ca:	e7cd      	b.n	f768 <socket_thread_fn+0x58>
	ret->state = AT_CMD_NOTIFICATION;
    f7cc:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
    f7ce:	f109 040c 	add.w	r4, r9, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
    f7d2:	4941      	ldr	r1, [pc, #260]	; (f8d8 <socket_thread_fn+0x1c8>)
    f7d4:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
    f7d6:	f88d 300c 	strb.w	r3, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
    f7da:	f00c ffa9 	bl	1c730 <strstr>
		if (tmpstr) {
    f7de:	4605      	mov	r5, r0
    f7e0:	b1e8      	cbz	r0, f81e <socket_thread_fn+0x10e>
			ret->state = AT_CMD_OK;
    f7e2:	f88d a00c 	strb.w	sl, [sp, #12]
			ret->code  = 0;
    f7e6:	f8cd a008 	str.w	sl, [sp, #8]
		buf[new_len++] = '\0';
    f7ea:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
    f7ec:	1b2a      	subs	r2, r5, r4
		buf[new_len++] = '\0';
    f7ee:	3201      	adds	r2, #1
    f7f0:	702b      	strb	r3, [r5, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
    f7f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f7f6:	9901      	ldr	r1, [sp, #4]
    f7f8:	2b04      	cmp	r3, #4
    f7fa:	d04e      	beq.n	f89a <socket_thread_fn+0x18a>
			if ((response_buf_len > 0) &&
    f7fc:	4d37      	ldr	r5, [pc, #220]	; (f8dc <socket_thread_fn+0x1cc>)
    f7fe:	682b      	ldr	r3, [r5, #0]
    f800:	2b00      	cmp	r3, #0
    f802:	d052      	beq.n	f8aa <socket_thread_fn+0x19a>
			    (response_buf != NULL)) {
    f804:	4c36      	ldr	r4, [pc, #216]	; (f8e0 <socket_thread_fn+0x1d0>)
    f806:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
    f808:	2800      	cmp	r0, #0
    f80a:	d04e      	beq.n	f8aa <socket_thread_fn+0x19a>
				if (response_buf_len > payload_len) {
    f80c:	4293      	cmp	r3, r2
    f80e:	d92a      	bls.n	f866 <socket_thread_fn+0x156>
    f810:	310c      	adds	r1, #12
    f812:	f00c fe28 	bl	1c466 <memcpy>
				response_buf_len = 0;
    f816:	2300      	movs	r3, #0
    f818:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
    f81a:	6023      	str	r3, [r4, #0]
				goto next;
    f81c:	e7a5      	b.n	f76a <socket_thread_fn+0x5a>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
    f81e:	4931      	ldr	r1, [pc, #196]	; (f8e4 <socket_thread_fn+0x1d4>)
    f820:	4620      	mov	r0, r4
    f822:	f00c ff85 	bl	1c730 <strstr>
		if (tmpstr) {
    f826:	4605      	mov	r5, r0
    f828:	b140      	cbz	r0, f83c <socket_thread_fn+0x12c>
			ret->state = AT_CMD_ERROR_CMS;
    f82a:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
    f82c:	f109 0017 	add.w	r0, r9, #23
			ret->state = AT_CMD_ERROR_CME;
    f830:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
    f834:	f00c fdf7 	bl	1c426 <atoi>
    f838:	9002      	str	r0, [sp, #8]
			break;
    f83a:	e7d6      	b.n	f7ea <socket_thread_fn+0xda>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
    f83c:	492a      	ldr	r1, [pc, #168]	; (f8e8 <socket_thread_fn+0x1d8>)
    f83e:	4620      	mov	r0, r4
    f840:	f00c ff76 	bl	1c730 <strstr>
		if (tmpstr) {
    f844:	4605      	mov	r5, r0
    f846:	b108      	cbz	r0, f84c <socket_thread_fn+0x13c>
			ret->state = AT_CMD_ERROR_CME;
    f848:	2303      	movs	r3, #3
    f84a:	e7ef      	b.n	f82c <socket_thread_fn+0x11c>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
    f84c:	4927      	ldr	r1, [pc, #156]	; (f8ec <socket_thread_fn+0x1dc>)
    f84e:	4620      	mov	r0, r4
    f850:	f00c ff6e 	bl	1c730 <strstr>
		if (tmpstr) {
    f854:	4605      	mov	r5, r0
    f856:	b368      	cbz	r0, f8b4 <socket_thread_fn+0x1a4>
			ret->state = AT_CMD_ERROR;
    f858:	2301      	movs	r3, #1
    f85a:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code  = -ENOEXEC;
    f85e:	f06f 0307 	mvn.w	r3, #7
    f862:	9302      	str	r3, [sp, #8]
			break;
    f864:	e7c1      	b.n	f7ea <socket_thread_fn+0xda>
					ret.code  = -EMSGSIZE;
    f866:	f06f 0379 	mvn.w	r3, #121	; 0x79
    f86a:	9302      	str	r3, [sp, #8]
    f86c:	e7d3      	b.n	f816 <socket_thread_fn+0x106>
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    f86e:	4b20      	ldr	r3, [pc, #128]	; (f8f0 <socket_thread_fn+0x1e0>)
    f870:	2200      	movs	r2, #0
    f872:	604b      	str	r3, [r1, #4]
    f874:	460b      	mov	r3, r1
    f876:	600a      	str	r2, [r1, #0]
    f878:	f843 2f08 	str.w	r2, [r3, #8]!
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f87c:	e8d3 2fef 	ldaex	r2, [r3]
    f880:	f042 0001 	orr.w	r0, r2, #1
    f884:	e8c3 0fe4 	stlex	r4, r0, [r3]
    f888:	2c00      	cmp	r4, #0
    f88a:	d1f7      	bne.n	f87c <socket_thread_fn+0x16c>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f88c:	07d3      	lsls	r3, r2, #31
    f88e:	f53f af75 	bmi.w	f77c <socket_thread_fn+0x6c>
		k_queue_append(&work_q->queue, work);
    f892:	4818      	ldr	r0, [pc, #96]	; (f8f4 <socket_thread_fn+0x1e4>)
    f894:	f00c fb17 	bl	1bec6 <k_queue_append>
    f898:	e770      	b.n	f77c <socket_thread_fn+0x6c>
		if (payload_len == 0) {
    f89a:	2a00      	cmp	r2, #0
    f89c:	f43f af65 	beq.w	f76a <socket_thread_fn+0x5a>
			item->callback = notification_handler;
    f8a0:	4b15      	ldr	r3, [pc, #84]	; (f8f8 <socket_thread_fn+0x1e8>)
			item->callback = current_cmd_handler;
    f8a2:	681b      	ldr	r3, [r3, #0]
    f8a4:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
    f8a8:	e75f      	b.n	f76a <socket_thread_fn+0x5a>
		if (payload_len == 0) {
    f8aa:	2a00      	cmp	r2, #0
    f8ac:	f43f af5d 	beq.w	f76a <socket_thread_fn+0x5a>
			item->callback = current_cmd_handler;
    f8b0:	4b07      	ldr	r3, [pc, #28]	; (f8d0 <socket_thread_fn+0x1c0>)
    f8b2:	e7f6      	b.n	f8a2 <socket_thread_fn+0x192>
		new_len = strlen(buf) + 1;
    f8b4:	4620      	mov	r0, r4
    f8b6:	f7fd fadf 	bl	ce78 <strlen>
    f8ba:	1c42      	adds	r2, r0, #1
    f8bc:	e799      	b.n	f7f2 <socket_thread_fn+0xe2>
    f8be:	bf00      	nop
    f8c0:	200201b0 	.word	0x200201b0
    f8c4:	20025214 	.word	0x20025214
    f8c8:	200200f0 	.word	0x200200f0
    f8cc:	20025264 	.word	0x20025264
    f8d0:	200201b4 	.word	0x200201b4
    f8d4:	200252bc 	.word	0x200252bc
    f8d8:	0001dccb 	.word	0x0001dccb
    f8dc:	200201c0 	.word	0x200201c0
    f8e0:	200201bc 	.word	0x200201bc
    f8e4:	0001dcce 	.word	0x0001dcce
    f8e8:	0001dcda 	.word	0x0001dcda
    f8ec:	0001dce6 	.word	0x0001dce6
    f8f0:	0000f61d 	.word	0x0000f61d
    f8f4:	20021320 	.word	0x20021320
    f8f8:	200201b8 	.word	0x200201b8

0000f8fc <at_cmd_write>:
{
    f8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f900:	4605      	mov	r5, r0
    f902:	4688      	mov	r8, r1
    f904:	4617      	mov	r7, r2
    f906:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
    f908:	4c0a      	ldr	r4, [pc, #40]	; (f934 <at_cmd_write+0x38>)
    f90a:	f04f 31ff 	mov.w	r1, #4294967295
    f90e:	4620      	mov	r0, r4
    f910:	f009 face 	bl	18eb0 <z_impl_k_sem_take>
	response_buf     = buf;
    f914:	4b08      	ldr	r3, [pc, #32]	; (f938 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
    f916:	4631      	mov	r1, r6
	response_buf     = buf;
    f918:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
    f91c:	4b07      	ldr	r3, [pc, #28]	; (f93c <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
    f91e:	4628      	mov	r0, r5
	response_buf_len = buf_len;
    f920:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
    f922:	f7ff fea3 	bl	f66c <at_write>
    f926:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
    f928:	4620      	mov	r0, r4
    f92a:	f009 fa95 	bl	18e58 <z_impl_k_sem_give>
}
    f92e:	4628      	mov	r0, r5
    f930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f934:	20025264 	.word	0x20025264
    f938:	200201bc 	.word	0x200201bc
    f93c:	200201c0 	.word	0x200201c0

0000f940 <at_cmd_set_notification_handler>:
{
    f940:	b538      	push	{r3, r4, r5, lr}
    f942:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
    f944:	4c06      	ldr	r4, [pc, #24]	; (f960 <at_cmd_set_notification_handler+0x20>)
    f946:	f04f 31ff 	mov.w	r1, #4294967295
    f94a:	4620      	mov	r0, r4
    f94c:	f009 fab0 	bl	18eb0 <z_impl_k_sem_take>
	notification_handler = handler;
    f950:	4b04      	ldr	r3, [pc, #16]	; (f964 <at_cmd_set_notification_handler+0x24>)
    f952:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
    f954:	4620      	mov	r0, r4
}
    f956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f95a:	f009 ba7d 	b.w	18e58 <z_impl_k_sem_give>
    f95e:	bf00      	nop
    f960:	20025264 	.word	0x20025264
    f964:	200201b8 	.word	0x200201b8

0000f968 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
    f968:	4a06      	ldr	r2, [pc, #24]	; (f984 <module_init+0x1c>)
{
    f96a:	b508      	push	{r3, lr}
	if (initialized) {
    f96c:	7813      	ldrb	r3, [r2, #0]
    f96e:	b93b      	cbnz	r3, f980 <module_init+0x18>
		LOG_WRN("Already initialized. Nothing to do");
		return 0;
	}

	initialized = true;
    f970:	2101      	movs	r1, #1
    f972:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
    f974:	4a04      	ldr	r2, [pc, #16]	; (f988 <module_init+0x20>)

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
    f976:	4805      	ldr	r0, [pc, #20]	; (f98c <module_init+0x24>)
	list->tail = NULL;
    f978:	e9c2 3300 	strd	r3, r3, [r2]
    f97c:	f7ff ffe0 	bl	f940 <at_cmd_set_notification_handler>
	return 0;
}
    f980:	2000      	movs	r0, #0
    f982:	bd08      	pop	{r3, pc}
    f984:	20021758 	.word	0x20021758
    f988:	20020274 	.word	0x20020274
    f98c:	0000f99d 	.word	0x0000f99d

0000f990 <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
    f990:	4801      	ldr	r0, [pc, #4]	; (f998 <k_mutex_unlock.constprop.7+0x8>)
    f992:	f008 beaf 	b.w	186f4 <z_impl_k_mutex_unlock>
    f996:	bf00      	nop
    f998:	200252a8 	.word	0x200252a8

0000f99c <notif_dispatch>:
{
    f99c:	b538      	push	{r3, r4, r5, lr}
    f99e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    f9a0:	f04f 31ff 	mov.w	r1, #4294967295
    f9a4:	4809      	ldr	r0, [pc, #36]	; (f9cc <notif_dispatch+0x30>)
    f9a6:	f008 fe33 	bl	18610 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    f9aa:	4b09      	ldr	r3, [pc, #36]	; (f9d0 <notif_dispatch+0x34>)
    f9ac:	681b      	ldr	r3, [r3, #0]
    f9ae:	b91b      	cbnz	r3, f9b8 <notif_dispatch+0x1c>
}
    f9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
    f9b4:	f7ff bfec 	b.w	f990 <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f9b8:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
    f9ba:	689a      	ldr	r2, [r3, #8]
    f9bc:	4629      	mov	r1, r5
    f9be:	6858      	ldr	r0, [r3, #4]
    f9c0:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    f9c2:	2c00      	cmp	r4, #0
    f9c4:	d0f4      	beq.n	f9b0 <notif_dispatch+0x14>
    f9c6:	4623      	mov	r3, r4
    f9c8:	6824      	ldr	r4, [r4, #0]
    f9ca:	e7f6      	b.n	f9ba <notif_dispatch+0x1e>
    f9cc:	200252a8 	.word	0x200252a8
    f9d0:	20020274 	.word	0x20020274

0000f9d4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
    f9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f9d8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    f9da:	4c21      	ldr	r4, [pc, #132]	; (fa60 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
    f9dc:	4e21      	ldr	r6, [pc, #132]	; (fa64 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f9de:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    f9e2:	f8df 9088 	ldr.w	r9, [pc, #136]	; fa6c <check_ext_api_requests+0x98>
{
    f9e6:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f9e8:	45a8      	cmp	r8, r5
    f9ea:	d803      	bhi.n	f9f4 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    f9ec:	2000      	movs	r0, #0
    f9ee:	b005      	add	sp, #20
    f9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
    f9f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9f6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    f9fa:	681f      	ldr	r7, [r3, #0]
    f9fc:	ab01      	add	r3, sp, #4
    f9fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    fa02:	220c      	movs	r2, #12
    fa04:	4619      	mov	r1, r3
    fa06:	4638      	mov	r0, r7
    fa08:	f00c fd1f 	bl	1c44a <memcmp>
    fa0c:	b990      	cbnz	r0, fa34 <check_ext_api_requests+0x60>
    fa0e:	b18f      	cbz	r7, fa34 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    fa10:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
    fa12:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    fa14:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    fa16:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    fa18:	4291      	cmp	r1, r2
    fa1a:	d10b      	bne.n	fa34 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    fa1c:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
    fa1e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    fa20:	4291      	cmp	r1, r2
    fa22:	d807      	bhi.n	fa34 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
    fa24:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    fa26:	4291      	cmp	r1, r2
    fa28:	d904      	bls.n	fa34 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
    fa2a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    fa2c:	695b      	ldr	r3, [r3, #20]
    fa2e:	ea32 0303 	bics.w	r3, r2, r3
    fa32:	d00a      	beq.n	fa4a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    fa34:	6a27      	ldr	r7, [r4, #32]
    fa36:	b167      	cbz	r7, fa52 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    fa38:	480b      	ldr	r0, [pc, #44]	; (fa68 <check_ext_api_requests+0x94>)
    fa3a:	f00b fa8e 	bl	1af5a <printk>
			k_panic();
    fa3e:	4040      	eors	r0, r0
    fa40:	f380 8811 	msr	BASEPRI, r0
    fa44:	f04f 0004 	mov.w	r0, #4
    fa48:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    fa4a:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fa4c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    fa4e:	441c      	add	r4, r3
    fa50:	e7ca      	b.n	f9e8 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    fa52:	4648      	mov	r0, r9
    fa54:	f00b fa81 	bl	1af5a <printk>
			*ext_api_req->ext_api = NULL;
    fa58:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa5a:	601f      	str	r7, [r3, #0]
    fa5c:	e7f5      	b.n	fa4a <check_ext_api_requests+0x76>
    fa5e:	bf00      	nop
    fa60:	0000c23c 	.word	0x0000c23c
    fa64:	0001d3b0 	.word	0x0001d3b0
    fa68:	0001dcec 	.word	0x0001dcec
    fa6c:	0001dd15 	.word	0x0001dd15

0000fa70 <rpc_logobj_client_evt_handler>:
    fa70:	b120      	cbz	r0, fa7c <rpc_logobj_client_evt_handler+0xc>
    fa72:	f850 1b08 	ldr.w	r1, [r0], #8
    fa76:	0c09      	lsrs	r1, r1, #16
    fa78:	f000 b852 	b.w	fb20 <logobj_event_handler>
    fa7c:	4770      	bx	lr
    fa7e:	bf00      	nop

0000fa80 <rpc_logobj_client_init>:
    fa80:	4801      	ldr	r0, [pc, #4]	; (fa88 <rpc_logobj_client_init+0x8>)
    fa82:	f006 bbcf 	b.w	16224 <rpc_client_register>
    fa86:	bf00      	nop
    fa88:	0001d5cc 	.word	0x0001d5cc

0000fa8c <rpc_logobj_client_request_alloc>:
    fa8c:	2300      	movs	r3, #0
    fa8e:	b510      	push	{r4, lr}
    fa90:	b082      	sub	sp, #8
    fa92:	9301      	str	r3, [sp, #4]
    fa94:	b961      	cbnz	r1, fab0 <rpc_logobj_client_request_alloc+0x24>
    fa96:	b170      	cbz	r0, fab6 <rpc_logobj_client_request_alloc+0x2a>
    fa98:	4604      	mov	r4, r0
    fa9a:	aa01      	add	r2, sp, #4
    fa9c:	2009      	movs	r0, #9
    fa9e:	f006 fdf9 	bl	16694 <rpc_message_alloc>
    faa2:	b918      	cbnz	r0, faac <rpc_logobj_client_request_alloc+0x20>
    faa4:	9b01      	ldr	r3, [sp, #4]
    faa6:	b10b      	cbz	r3, faac <rpc_logobj_client_request_alloc+0x20>
    faa8:	3308      	adds	r3, #8
    faaa:	6023      	str	r3, [r4, #0]
    faac:	b002      	add	sp, #8
    faae:	bd10      	pop	{r4, pc}
    fab0:	200f      	movs	r0, #15
    fab2:	b002      	add	sp, #8
    fab4:	bd10      	pop	{r4, pc}
    fab6:	200e      	movs	r0, #14
    fab8:	b002      	add	sp, #8
    faba:	bd10      	pop	{r4, pc}

0000fabc <rpc_logobj_client_request_send>:
    fabc:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    fac0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
    fac4:	d10b      	bne.n	fade <rpc_logobj_client_request_send+0x22>
    fac6:	b160      	cbz	r0, fae2 <rpc_logobj_client_request_send+0x26>
    fac8:	4603      	mov	r3, r0
    faca:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    face:	2009      	movs	r0, #9
    fad0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    fad4:	f843 1d08 	str.w	r1, [r3, #-8]!
    fad8:	4619      	mov	r1, r3
    fada:	f006 bdc3 	b.w	16664 <rpc_message_send>
    fade:	200f      	movs	r0, #15
    fae0:	4770      	bx	lr
    fae2:	200e      	movs	r0, #14
    fae4:	4770      	bx	lr
    fae6:	bf00      	nop

0000fae8 <rpc_logobj_client_message_free>:
    fae8:	b120      	cbz	r0, faf4 <rpc_logobj_client_message_free+0xc>
    faea:	f1a0 0108 	sub.w	r1, r0, #8
    faee:	2009      	movs	r0, #9
    faf0:	f006 be02 	b.w	166f8 <rpc_message_free>
    faf4:	200e      	movs	r0, #14
    faf6:	4770      	bx	lr

0000faf8 <rpc_logobj_client_data_free>:
    faf8:	b118      	cbz	r0, fb02 <rpc_logobj_client_data_free+0xa>
    fafa:	4601      	mov	r1, r0
    fafc:	2009      	movs	r0, #9
    fafe:	f006 bf0d 	b.w	1691c <rpc_message_data_free>
    fb02:	200e      	movs	r0, #14
    fb04:	4770      	bx	lr
    fb06:	bf00      	nop

0000fb08 <packet_free_cb>:
    fb08:	b510      	push	{r4, lr}
    fb0a:	4604      	mov	r4, r0
    fb0c:	6800      	ldr	r0, [r0, #0]
    fb0e:	f7ff fff3 	bl	faf8 <rpc_logobj_client_data_free>
    fb12:	68a0      	ldr	r0, [r4, #8]
    fb14:	b118      	cbz	r0, fb1e <packet_free_cb+0x16>
    fb16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb1a:	f001 b935 	b.w	10d88 <nrf_free>
    fb1e:	bd10      	pop	{r4, pc}

0000fb20 <logobj_event_handler>:
    fb20:	b530      	push	{r4, r5, lr}
    fb22:	4b3b      	ldr	r3, [pc, #236]	; (fc10 <logobj_event_handler+0xf0>)
    fb24:	b085      	sub	sp, #20
    fb26:	681d      	ldr	r5, [r3, #0]
    fb28:	2d00      	cmp	r5, #0
    fb2a:	d04c      	beq.n	fbc6 <logobj_event_handler+0xa6>
    fb2c:	f248 0302 	movw	r3, #32770	; 0x8002
    fb30:	4299      	cmp	r1, r3
    fb32:	d053      	beq.n	fbdc <logobj_event_handler+0xbc>
    fb34:	d91c      	bls.n	fb70 <logobj_event_handler+0x50>
    fb36:	f248 0303 	movw	r3, #32771	; 0x8003
    fb3a:	4299      	cmp	r1, r3
    fb3c:	d05a      	beq.n	fbf4 <logobj_event_handler+0xd4>
    fb3e:	f249 0301 	movw	r3, #36865	; 0x9001
    fb42:	4299      	cmp	r1, r3
    fb44:	d147      	bne.n	fbd6 <logobj_event_handler+0xb6>
    fb46:	2400      	movs	r4, #0
    fb48:	6843      	ldr	r3, [r0, #4]
    fb4a:	6802      	ldr	r2, [r0, #0]
    fb4c:	e9cd 4402 	strd	r4, r4, [sp, #8]
    fb50:	e9cd 2300 	strd	r2, r3, [sp]
    fb54:	69e8      	ldr	r0, [r5, #28]
    fb56:	4669      	mov	r1, sp
    fb58:	6803      	ldr	r3, [r0, #0]
    fb5a:	685b      	ldr	r3, [r3, #4]
    fb5c:	4798      	blx	r3
    fb5e:	3001      	adds	r0, #1
    fb60:	d04e      	beq.n	fc00 <logobj_event_handler+0xe0>
    fb62:	4620      	mov	r0, r4
    fb64:	682b      	ldr	r3, [r5, #0]
    fb66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    fb6a:	602b      	str	r3, [r5, #0]
    fb6c:	b005      	add	sp, #20
    fb6e:	bd30      	pop	{r4, r5, pc}
    fb70:	f248 0301 	movw	r3, #32769	; 0x8001
    fb74:	4299      	cmp	r1, r3
    fb76:	d12e      	bne.n	fbd6 <logobj_event_handler+0xb6>
    fb78:	68c3      	ldr	r3, [r0, #12]
    fb7a:	2b00      	cmp	r3, #0
    fb7c:	d135      	bne.n	fbea <logobj_event_handler+0xca>
    fb7e:	6828      	ldr	r0, [r5, #0]
    fb80:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    fb84:	d03e      	beq.n	fc04 <logobj_event_handler+0xe4>
    fb86:	682b      	ldr	r3, [r5, #0]
    fb88:	b29b      	uxth	r3, r3
    fb8a:	2b01      	cmp	r3, #1
    fb8c:	d105      	bne.n	fb9a <logobj_event_handler+0x7a>
    fb8e:	682b      	ldr	r3, [r5, #0]
    fb90:	0c1b      	lsrs	r3, r3, #16
    fb92:	041b      	lsls	r3, r3, #16
    fb94:	f043 0302 	orr.w	r3, r3, #2
    fb98:	602b      	str	r3, [r5, #0]
    fb9a:	4b1e      	ldr	r3, [pc, #120]	; (fc14 <logobj_event_handler+0xf4>)
    fb9c:	781a      	ldrb	r2, [r3, #0]
    fb9e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    fba2:	2a00      	cmp	r2, #0
    fba4:	d031      	beq.n	fc0a <logobj_event_handler+0xea>
    fba6:	4a1c      	ldr	r2, [pc, #112]	; (fc18 <logobj_event_handler+0xf8>)
    fba8:	7811      	ldrb	r1, [r2, #0]
    fbaa:	b909      	cbnz	r1, fbb0 <logobj_event_handler+0x90>
    fbac:	2101      	movs	r1, #1
    fbae:	7011      	strb	r1, [r2, #0]
    fbb0:	2000      	movs	r0, #0
    fbb2:	7018      	strb	r0, [r3, #0]
    fbb4:	682b      	ldr	r3, [r5, #0]
    fbb6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    fbba:	602b      	str	r3, [r5, #0]
    fbbc:	682b      	ldr	r3, [r5, #0]
    fbbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    fbc2:	602b      	str	r3, [r5, #0]
    fbc4:	e7d2      	b.n	fb6c <logobj_event_handler+0x4c>
    fbc6:	6800      	ldr	r0, [r0, #0]
    fbc8:	2800      	cmp	r0, #0
    fbca:	d0cf      	beq.n	fb6c <logobj_event_handler+0x4c>
    fbcc:	f7ff ff94 	bl	faf8 <rpc_logobj_client_data_free>
    fbd0:	4628      	mov	r0, r5
    fbd2:	b005      	add	sp, #20
    fbd4:	bd30      	pop	{r4, r5, pc}
    fbd6:	2000      	movs	r0, #0
    fbd8:	b005      	add	sp, #20
    fbda:	bd30      	pop	{r4, r5, pc}
    fbdc:	682b      	ldr	r3, [r5, #0]
    fbde:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
    fbe2:	d00b      	beq.n	fbfc <logobj_event_handler+0xdc>
    fbe4:	68c0      	ldr	r0, [r0, #12]
    fbe6:	2800      	cmp	r0, #0
    fbe8:	d0e4      	beq.n	fbb4 <logobj_event_handler+0x94>
    fbea:	230e      	movs	r3, #14
    fbec:	2000      	movs	r0, #0
    fbee:	606b      	str	r3, [r5, #4]
    fbf0:	b005      	add	sp, #20
    fbf2:	bd30      	pop	{r4, r5, pc}
    fbf4:	68c3      	ldr	r3, [r0, #12]
    fbf6:	2b01      	cmp	r3, #1
    fbf8:	d1a5      	bne.n	fb46 <logobj_event_handler+0x26>
    fbfa:	e7f6      	b.n	fbea <logobj_event_handler+0xca>
    fbfc:	4618      	mov	r0, r3
    fbfe:	e7b5      	b.n	fb6c <logobj_event_handler+0x4c>
    fc00:	2002      	movs	r0, #2
    fc02:	e7b3      	b.n	fb6c <logobj_event_handler+0x4c>
    fc04:	230e      	movs	r3, #14
    fc06:	606b      	str	r3, [r5, #4]
    fc08:	e7b0      	b.n	fb6c <logobj_event_handler+0x4c>
    fc0a:	4a03      	ldr	r2, [pc, #12]	; (fc18 <logobj_event_handler+0xf8>)
    fc0c:	7011      	strb	r1, [r2, #0]
    fc0e:	e7cf      	b.n	fbb0 <logobj_event_handler+0x90>
    fc10:	20020280 	.word	0x20020280
    fc14:	20021759 	.word	0x20021759
    fc18:	2002175a 	.word	0x2002175a

0000fc1c <logobj_interface_init>:
    fc1c:	2300      	movs	r3, #0
    fc1e:	b510      	push	{r4, lr}
    fc20:	4907      	ldr	r1, [pc, #28]	; (fc40 <logobj_interface_init+0x24>)
    fc22:	4a08      	ldr	r2, [pc, #32]	; (fc44 <logobj_interface_init+0x28>)
    fc24:	4c08      	ldr	r4, [pc, #32]	; (fc48 <logobj_interface_init+0x2c>)
    fc26:	4809      	ldr	r0, [pc, #36]	; (fc4c <logobj_interface_init+0x30>)
    fc28:	7023      	strb	r3, [r4, #0]
    fc2a:	6003      	str	r3, [r0, #0]
    fc2c:	700b      	strb	r3, [r1, #0]
    fc2e:	6013      	str	r3, [r2, #0]
    fc30:	f7ff ff26 	bl	fa80 <rpc_logobj_client_init>
    fc34:	3000      	adds	r0, #0
    fc36:	bf18      	it	ne
    fc38:	2001      	movne	r0, #1
    fc3a:	4240      	negs	r0, r0
    fc3c:	bd10      	pop	{r4, pc}
    fc3e:	bf00      	nop
    fc40:	20021759 	.word	0x20021759
    fc44:	2002027c 	.word	0x2002027c
    fc48:	2002175a 	.word	0x2002175a
    fc4c:	20020280 	.word	0x20020280

0000fc50 <logobj_interface_open>:
    fc50:	2300      	movs	r3, #0
    fc52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fc56:	2866      	cmp	r0, #102	; 0x66
    fc58:	b082      	sub	sp, #8
    fc5a:	9300      	str	r3, [sp, #0]
    fc5c:	d172      	bne.n	fd44 <logobj_interface_open+0xf4>
    fc5e:	2902      	cmp	r1, #2
    fc60:	4689      	mov	r9, r1
    fc62:	d16f      	bne.n	fd44 <logobj_interface_open+0xf4>
    fc64:	f240 2305 	movw	r3, #517	; 0x205
    fc68:	429a      	cmp	r2, r3
    fc6a:	4692      	mov	sl, r2
    fc6c:	d16a      	bne.n	fd44 <logobj_interface_open+0xf4>
    fc6e:	4f48      	ldr	r7, [pc, #288]	; (fd90 <logobj_interface_open+0x140>)
    fc70:	683d      	ldr	r5, [r7, #0]
    fc72:	2d00      	cmp	r5, #0
    fc74:	d17c      	bne.n	fd70 <logobj_interface_open+0x120>
    fc76:	4680      	mov	r8, r0
    fc78:	4a46      	ldr	r2, [pc, #280]	; (fd94 <logobj_interface_open+0x144>)
    fc7a:	4668      	mov	r0, sp
    fc7c:	f006 f870 	bl	15d60 <interface_socket_allocate>
    fc80:	9b00      	ldr	r3, [sp, #0]
    fc82:	4606      	mov	r6, r0
    fc84:	2b00      	cmp	r3, #0
    fc86:	d07d      	beq.n	fd84 <logobj_interface_open+0x134>
    fc88:	4629      	mov	r1, r5
    fc8a:	2204      	movs	r2, #4
    fc8c:	4842      	ldr	r0, [pc, #264]	; (fd98 <logobj_interface_open+0x148>)
    fc8e:	603b      	str	r3, [r7, #0]
    fc90:	f00c fbf6 	bl	1c480 <memset>
    fc94:	9c00      	ldr	r4, [sp, #0]
    fc96:	4629      	mov	r1, r5
    fc98:	e9c4 8903 	strd	r8, r9, [r4, #12]
    fc9c:	f8c4 a014 	str.w	sl, [r4, #20]
    fca0:	a801      	add	r0, sp, #4
    fca2:	f7ff fef3 	bl	fa8c <rpc_logobj_client_request_alloc>
    fca6:	2800      	cmp	r0, #0
    fca8:	d13c      	bne.n	fd24 <logobj_interface_open+0xd4>
    fcaa:	2201      	movs	r2, #1
    fcac:	2104      	movs	r1, #4
    fcae:	9b01      	ldr	r3, [sp, #4]
    fcb0:	4d3a      	ldr	r5, [pc, #232]	; (fd9c <logobj_interface_open+0x14c>)
    fcb2:	7358      	strb	r0, [r3, #13]
    fcb4:	7398      	strb	r0, [r3, #14]
    fcb6:	73d8      	strb	r0, [r3, #15]
    fcb8:	7258      	strb	r0, [r3, #9]
    fcba:	7298      	strb	r0, [r3, #10]
    fcbc:	72d8      	strb	r0, [r3, #11]
    fcbe:	7219      	strb	r1, [r3, #8]
    fcc0:	702a      	strb	r2, [r5, #0]
    fcc2:	731a      	strb	r2, [r3, #12]
    fcc4:	6822      	ldr	r2, [r4, #0]
    fcc6:	4618      	mov	r0, r3
    fcc8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
    fccc:	6022      	str	r2, [r4, #0]
    fcce:	f247 0101 	movw	r1, #28673	; 0x7001
    fcd2:	f7ff fef3 	bl	fabc <rpc_logobj_client_request_send>
    fcd6:	bb38      	cbnz	r0, fd28 <logobj_interface_open+0xd8>
    fcd8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    fcdc:	f04f 33ff 	mov.w	r3, #4294967295
    fce0:	4611      	mov	r1, r2
    fce2:	4630      	mov	r0, r6
    fce4:	f006 f8ee 	bl	15ec4 <interface_socket_wait>
    fce8:	4604      	mov	r4, r0
    fcea:	b310      	cbz	r0, fd32 <logobj_interface_open+0xe2>
    fcec:	9a00      	ldr	r2, [sp, #0]
    fcee:	2e00      	cmp	r6, #0
    fcf0:	6813      	ldr	r3, [r2, #0]
    fcf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fcf6:	6013      	str	r3, [r2, #0]
    fcf8:	9a00      	ldr	r2, [sp, #0]
    fcfa:	6813      	ldr	r3, [r2, #0]
    fcfc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    fd00:	6013      	str	r3, [r2, #0]
    fd02:	9a00      	ldr	r2, [sp, #0]
    fd04:	6813      	ldr	r3, [r2, #0]
    fd06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    fd0a:	6013      	str	r3, [r2, #0]
    fd0c:	da36      	bge.n	fd7c <logobj_interface_open+0x12c>
    fd0e:	2300      	movs	r3, #0
    fd10:	4620      	mov	r0, r4
    fd12:	603b      	str	r3, [r7, #0]
    fd14:	f04f 36ff 	mov.w	r6, #4294967295
    fd18:	f7ff fb0a 	bl	f330 <bsd_os_errno_set>
    fd1c:	4630      	mov	r0, r6
    fd1e:	b002      	add	sp, #8
    fd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd24:	240c      	movs	r4, #12
    fd26:	e7e1      	b.n	fcec <logobj_interface_open+0x9c>
    fd28:	9801      	ldr	r0, [sp, #4]
    fd2a:	f7ff fedd 	bl	fae8 <rpc_logobj_client_message_free>
    fd2e:	2405      	movs	r4, #5
    fd30:	e7dc      	b.n	fcec <logobj_interface_open+0x9c>
    fd32:	4630      	mov	r0, r6
    fd34:	f006 f93a 	bl	15fac <interface_socket_from_handle_get>
    fd38:	b150      	cbz	r0, fd50 <logobj_interface_open+0x100>
    fd3a:	6844      	ldr	r4, [r0, #4]
    fd3c:	b144      	cbz	r4, fd50 <logobj_interface_open+0x100>
    fd3e:	2300      	movs	r3, #0
    fd40:	6043      	str	r3, [r0, #4]
    fd42:	e7d3      	b.n	fcec <logobj_interface_open+0x9c>
    fd44:	2016      	movs	r0, #22
    fd46:	f7ff faf3 	bl	f330 <bsd_os_errno_set>
    fd4a:	f04f 36ff 	mov.w	r6, #4294967295
    fd4e:	e7e5      	b.n	fd1c <logobj_interface_open+0xcc>
    fd50:	9a00      	ldr	r2, [sp, #0]
    fd52:	6813      	ldr	r3, [r2, #0]
    fd54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fd58:	6013      	str	r3, [r2, #0]
    fd5a:	9a00      	ldr	r2, [sp, #0]
    fd5c:	6813      	ldr	r3, [r2, #0]
    fd5e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    fd62:	6013      	str	r3, [r2, #0]
    fd64:	9a00      	ldr	r2, [sp, #0]
    fd66:	6813      	ldr	r3, [r2, #0]
    fd68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    fd6c:	6013      	str	r3, [r2, #0]
    fd6e:	e7d5      	b.n	fd1c <logobj_interface_open+0xcc>
    fd70:	2001      	movs	r0, #1
    fd72:	f7ff fadd 	bl	f330 <bsd_os_errno_set>
    fd76:	f04f 36ff 	mov.w	r6, #4294967295
    fd7a:	e7cf      	b.n	fd1c <logobj_interface_open+0xcc>
    fd7c:	4630      	mov	r0, r6
    fd7e:	f006 f853 	bl	15e28 <interface_socket_free>
    fd82:	e7c4      	b.n	fd0e <logobj_interface_open+0xbe>
    fd84:	2018      	movs	r0, #24
    fd86:	f7ff fad3 	bl	f330 <bsd_os_errno_set>
    fd8a:	f04f 36ff 	mov.w	r6, #4294967295
    fd8e:	e7c5      	b.n	fd1c <logobj_interface_open+0xcc>
    fd90:	20020280 	.word	0x20020280
    fd94:	0000fb09 	.word	0x0000fb09
    fd98:	2002027c 	.word	0x2002027c
    fd9c:	20021759 	.word	0x20021759

0000fda0 <logobj_interface_read>:
    fda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fda4:	b085      	sub	sp, #20
    fda6:	2900      	cmp	r1, #0
    fda8:	d068      	beq.n	fe7c <logobj_interface_read+0xdc>
    fdaa:	2a00      	cmp	r2, #0
    fdac:	4617      	mov	r7, r2
    fdae:	dd65      	ble.n	fe7c <logobj_interface_read+0xdc>
    fdb0:	461d      	mov	r5, r3
    fdb2:	4680      	mov	r8, r0
    fdb4:	460e      	mov	r6, r1
    fdb6:	f006 f8f9 	bl	15fac <interface_socket_from_handle_get>
    fdba:	4604      	mov	r4, r0
    fdbc:	2800      	cmp	r0, #0
    fdbe:	d063      	beq.n	fe88 <logobj_interface_read+0xe8>
    fdc0:	bb4d      	cbnz	r5, fe16 <logobj_interface_read+0x76>
    fdc2:	69e0      	ldr	r0, [r4, #28]
    fdc4:	07aa      	lsls	r2, r5, #30
    fdc6:	6803      	ldr	r3, [r0, #0]
    fdc8:	68db      	ldr	r3, [r3, #12]
    fdca:	d52d      	bpl.n	fe28 <logobj_interface_read+0x88>
    fdcc:	4798      	blx	r3
    fdce:	3001      	adds	r0, #1
    fdd0:	d044      	beq.n	fe5c <logobj_interface_read+0xbc>
    fdd2:	6823      	ldr	r3, [r4, #0]
    fdd4:	69e0      	ldr	r0, [r4, #28]
    fdd6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    fdda:	d041      	beq.n	fe60 <logobj_interface_read+0xc0>
    fddc:	2100      	movs	r1, #0
    fdde:	6823      	ldr	r3, [r4, #0]
    fde0:	462a      	mov	r2, r5
    fde2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    fde6:	6023      	str	r3, [r4, #0]
    fde8:	e9cd 1102 	strd	r1, r1, [sp, #8]
    fdec:	e9cd 6700 	strd	r6, r7, [sp]
    fdf0:	6803      	ldr	r3, [r0, #0]
    fdf2:	4669      	mov	r1, sp
    fdf4:	689b      	ldr	r3, [r3, #8]
    fdf6:	4798      	blx	r3
    fdf8:	4605      	mov	r5, r0
    fdfa:	69e0      	ldr	r0, [r4, #28]
    fdfc:	6803      	ldr	r3, [r0, #0]
    fdfe:	68db      	ldr	r3, [r3, #12]
    fe00:	4798      	blx	r3
    fe02:	3001      	adds	r0, #1
    fe04:	d003      	beq.n	fe0e <logobj_interface_read+0x6e>
    fe06:	6823      	ldr	r3, [r4, #0]
    fe08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    fe0c:	6023      	str	r3, [r4, #0]
    fe0e:	4628      	mov	r0, r5
    fe10:	b005      	add	sp, #20
    fe12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fe16:	f015 0f0a 	tst.w	r5, #10
    fe1a:	d1d2      	bne.n	fdc2 <logobj_interface_read+0x22>
    fe1c:	202d      	movs	r0, #45	; 0x2d
    fe1e:	f7ff fa87 	bl	f330 <bsd_os_errno_set>
    fe22:	f04f 35ff 	mov.w	r5, #4294967295
    fe26:	e7f2      	b.n	fe0e <logobj_interface_read+0x6e>
    fe28:	6822      	ldr	r2, [r4, #0]
    fe2a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
    fe2e:	d1cd      	bne.n	fdcc <logobj_interface_read+0x2c>
    fe30:	4798      	blx	r3
    fe32:	1c43      	adds	r3, r0, #1
    fe34:	d1cd      	bne.n	fdd2 <logobj_interface_read+0x32>
    fe36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    fe3a:	6a23      	ldr	r3, [r4, #32]
    fe3c:	4611      	mov	r1, r2
    fe3e:	2b00      	cmp	r3, #0
    fe40:	bf08      	it	eq
    fe42:	4603      	moveq	r3, r0
    fe44:	4640      	mov	r0, r8
    fe46:	f006 f83d 	bl	15ec4 <interface_socket_wait>
    fe4a:	b158      	cbz	r0, fe64 <logobj_interface_read+0xc4>
    fe4c:	f04f 35ff 	mov.w	r5, #4294967295
    fe50:	f7ff fa6e 	bl	f330 <bsd_os_errno_set>
    fe54:	4628      	mov	r0, r5
    fe56:	b005      	add	sp, #20
    fe58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fe5c:	2023      	movs	r0, #35	; 0x23
    fe5e:	e7f5      	b.n	fe4c <logobj_interface_read+0xac>
    fe60:	461d      	mov	r5, r3
    fe62:	e7cb      	b.n	fdfc <logobj_interface_read+0x5c>
    fe64:	4640      	mov	r0, r8
    fe66:	f006 f8a1 	bl	15fac <interface_socket_from_handle_get>
    fe6a:	4603      	mov	r3, r0
    fe6c:	2800      	cmp	r0, #0
    fe6e:	d0b0      	beq.n	fdd2 <logobj_interface_read+0x32>
    fe70:	6840      	ldr	r0, [r0, #4]
    fe72:	2800      	cmp	r0, #0
    fe74:	d0ad      	beq.n	fdd2 <logobj_interface_read+0x32>
    fe76:	f8c3 9004 	str.w	r9, [r3, #4]
    fe7a:	e7e7      	b.n	fe4c <logobj_interface_read+0xac>
    fe7c:	2016      	movs	r0, #22
    fe7e:	f7ff fa57 	bl	f330 <bsd_os_errno_set>
    fe82:	f04f 35ff 	mov.w	r5, #4294967295
    fe86:	e7c2      	b.n	fe0e <logobj_interface_read+0x6e>
    fe88:	2009      	movs	r0, #9
    fe8a:	f7ff fa51 	bl	f330 <bsd_os_errno_set>
    fe8e:	f04f 35ff 	mov.w	r5, #4294967295
    fe92:	e7bc      	b.n	fe0e <logobj_interface_read+0x6e>

0000fe94 <logobj_interface_write>:
    fe94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe98:	b082      	sub	sp, #8
    fe9a:	2900      	cmp	r1, #0
    fe9c:	d05e      	beq.n	ff5c <logobj_interface_write+0xc8>
    fe9e:	2a04      	cmp	r2, #4
    fea0:	d15c      	bne.n	ff5c <logobj_interface_write+0xc8>
    fea2:	461e      	mov	r6, r3
    fea4:	4607      	mov	r7, r0
    fea6:	460d      	mov	r5, r1
    fea8:	f006 f880 	bl	15fac <interface_socket_from_handle_get>
    feac:	4604      	mov	r4, r0
    feae:	2800      	cmp	r0, #0
    feb0:	d070      	beq.n	ff94 <logobj_interface_write+0x100>
    feb2:	b1e6      	cbz	r6, feee <logobj_interface_write+0x5a>
    feb4:	07b0      	lsls	r0, r6, #30
    feb6:	d567      	bpl.n	ff88 <logobj_interface_write+0xf4>
    feb8:	6823      	ldr	r3, [r4, #0]
    feba:	039b      	lsls	r3, r3, #14
    febc:	d560      	bpl.n	ff80 <logobj_interface_write+0xec>
    febe:	2600      	movs	r6, #0
    fec0:	6823      	ldr	r3, [r4, #0]
    fec2:	2100      	movs	r1, #0
    fec4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    fec8:	6023      	str	r3, [r4, #0]
    feca:	a801      	add	r0, sp, #4
    fecc:	f8d5 8000 	ldr.w	r8, [r5]
    fed0:	f7ff fddc 	bl	fa8c <rpc_logobj_client_request_alloc>
    fed4:	b198      	cbz	r0, fefe <logobj_interface_write+0x6a>
    fed6:	200c      	movs	r0, #12
    fed8:	6823      	ldr	r3, [r4, #0]
    feda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fede:	6023      	str	r3, [r4, #0]
    fee0:	f7ff fa26 	bl	f330 <bsd_os_errno_set>
    fee4:	f04f 30ff 	mov.w	r0, #4294967295
    fee8:	b002      	add	sp, #8
    feea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    feee:	6803      	ldr	r3, [r0, #0]
    fef0:	00d9      	lsls	r1, r3, #3
    fef2:	d4e1      	bmi.n	feb8 <logobj_interface_write+0x24>
    fef4:	6803      	ldr	r3, [r0, #0]
    fef6:	039a      	lsls	r2, r3, #14
    fef8:	d544      	bpl.n	ff84 <logobj_interface_write+0xf0>
    fefa:	2601      	movs	r6, #1
    fefc:	e7e0      	b.n	fec0 <logobj_interface_write+0x2c>
    fefe:	2504      	movs	r5, #4
    ff00:	9b01      	ldr	r3, [sp, #4]
    ff02:	f247 0103 	movw	r1, #28675	; 0x7003
    ff06:	f8c3 800c 	str.w	r8, [r3, #12]
    ff0a:	7258      	strb	r0, [r3, #9]
    ff0c:	7298      	strb	r0, [r3, #10]
    ff0e:	72d8      	strb	r0, [r3, #11]
    ff10:	721d      	strb	r5, [r3, #8]
    ff12:	4618      	mov	r0, r3
    ff14:	f7ff fdd2 	bl	fabc <rpc_logobj_client_request_send>
    ff18:	4680      	mov	r8, r0
    ff1a:	b9b0      	cbnz	r0, ff4a <logobj_interface_write+0xb6>
    ff1c:	b93e      	cbnz	r6, ff2e <logobj_interface_write+0x9a>
    ff1e:	4628      	mov	r0, r5
    ff20:	6823      	ldr	r3, [r4, #0]
    ff22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ff26:	6023      	str	r3, [r4, #0]
    ff28:	b002      	add	sp, #8
    ff2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ff32:	f04f 33ff 	mov.w	r3, #4294967295
    ff36:	4611      	mov	r1, r2
    ff38:	4638      	mov	r0, r7
    ff3a:	f005 ffc3 	bl	15ec4 <interface_socket_wait>
    ff3e:	b198      	cbz	r0, ff68 <logobj_interface_write+0xd4>
    ff40:	6823      	ldr	r3, [r4, #0]
    ff42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ff46:	6023      	str	r3, [r4, #0]
    ff48:	e7ca      	b.n	fee0 <logobj_interface_write+0x4c>
    ff4a:	9801      	ldr	r0, [sp, #4]
    ff4c:	f7ff fdcc 	bl	fae8 <rpc_logobj_client_message_free>
    ff50:	6823      	ldr	r3, [r4, #0]
    ff52:	2005      	movs	r0, #5
    ff54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ff58:	6023      	str	r3, [r4, #0]
    ff5a:	e7c1      	b.n	fee0 <logobj_interface_write+0x4c>
    ff5c:	2016      	movs	r0, #22
    ff5e:	f7ff f9e7 	bl	f330 <bsd_os_errno_set>
    ff62:	f04f 30ff 	mov.w	r0, #4294967295
    ff66:	e7bf      	b.n	fee8 <logobj_interface_write+0x54>
    ff68:	4638      	mov	r0, r7
    ff6a:	f006 f81f 	bl	15fac <interface_socket_from_handle_get>
    ff6e:	4603      	mov	r3, r0
    ff70:	2800      	cmp	r0, #0
    ff72:	d0d4      	beq.n	ff1e <logobj_interface_write+0x8a>
    ff74:	6840      	ldr	r0, [r0, #4]
    ff76:	2800      	cmp	r0, #0
    ff78:	d0d1      	beq.n	ff1e <logobj_interface_write+0x8a>
    ff7a:	f8c3 8004 	str.w	r8, [r3, #4]
    ff7e:	e7df      	b.n	ff40 <logobj_interface_write+0xac>
    ff80:	2073      	movs	r0, #115	; 0x73
    ff82:	e7ad      	b.n	fee0 <logobj_interface_write+0x4c>
    ff84:	2009      	movs	r0, #9
    ff86:	e7ab      	b.n	fee0 <logobj_interface_write+0x4c>
    ff88:	202d      	movs	r0, #45	; 0x2d
    ff8a:	f7ff f9d1 	bl	f330 <bsd_os_errno_set>
    ff8e:	f04f 30ff 	mov.w	r0, #4294967295
    ff92:	e7a9      	b.n	fee8 <logobj_interface_write+0x54>
    ff94:	2009      	movs	r0, #9
    ff96:	f7ff f9cb 	bl	f330 <bsd_os_errno_set>
    ff9a:	f04f 30ff 	mov.w	r0, #4294967295
    ff9e:	e7a3      	b.n	fee8 <logobj_interface_write+0x54>

0000ffa0 <logobj_interface_setopt>:
    ffa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffa2:	2901      	cmp	r1, #1
    ffa4:	b085      	sub	sp, #20
    ffa6:	d068      	beq.n	1007a <logobj_interface_setopt+0xda>
    ffa8:	461e      	mov	r6, r3
    ffaa:	f240 2305 	movw	r3, #517	; 0x205
    ffae:	4299      	cmp	r1, r3
    ffb0:	f040 8095 	bne.w	100de <logobj_interface_setopt+0x13e>
    ffb4:	4607      	mov	r7, r0
    ffb6:	4615      	mov	r5, r2
    ffb8:	f005 fff8 	bl	15fac <interface_socket_from_handle_get>
    ffbc:	4604      	mov	r4, r0
    ffbe:	2800      	cmp	r0, #0
    ffc0:	f000 80b2 	beq.w	10128 <logobj_interface_setopt+0x188>
    ffc4:	2d01      	cmp	r5, #1
    ffc6:	d019      	beq.n	fffc <logobj_interface_setopt+0x5c>
    ffc8:	2d02      	cmp	r5, #2
    ffca:	d010      	beq.n	ffee <logobj_interface_setopt+0x4e>
    ffcc:	252a      	movs	r5, #42	; 0x2a
    ffce:	6803      	ldr	r3, [r0, #0]
    ffd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    ffd4:	6023      	str	r3, [r4, #0]
    ffd6:	6823      	ldr	r3, [r4, #0]
    ffd8:	4628      	mov	r0, r5
    ffda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    ffde:	6023      	str	r3, [r4, #0]
    ffe0:	f7ff f9a6 	bl	f330 <bsd_os_errno_set>
    ffe4:	f04f 35ff 	mov.w	r5, #4294967295
    ffe8:	4628      	mov	r0, r5
    ffea:	b005      	add	sp, #20
    ffec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffee:	b116      	cbz	r6, fff6 <logobj_interface_setopt+0x56>
    fff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fff2:	2b01      	cmp	r3, #1
    fff4:	d049      	beq.n	1008a <logobj_interface_setopt+0xea>
    fff6:	6823      	ldr	r3, [r4, #0]
    fff8:	2516      	movs	r5, #22
    fffa:	e7e9      	b.n	ffd0 <logobj_interface_setopt+0x30>
    fffc:	2e00      	cmp	r6, #0
    fffe:	d0fa      	beq.n	fff6 <logobj_interface_setopt+0x56>
   10000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10002:	2b04      	cmp	r3, #4
   10004:	d1f7      	bne.n	fff6 <logobj_interface_setopt+0x56>
   10006:	2100      	movs	r1, #0
   10008:	a803      	add	r0, sp, #12
   1000a:	f7ff fd3f 	bl	fa8c <rpc_logobj_client_request_alloc>
   1000e:	4605      	mov	r5, r0
   10010:	2800      	cmp	r0, #0
   10012:	d16a      	bne.n	100ea <logobj_interface_setopt+0x14a>
   10014:	9803      	ldr	r0, [sp, #12]
   10016:	2208      	movs	r2, #8
   10018:	4629      	mov	r1, r5
   1001a:	300c      	adds	r0, #12
   1001c:	f00c fa30 	bl	1c480 <memset>
   10020:	9803      	ldr	r0, [sp, #12]
   10022:	4631      	mov	r1, r6
   10024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10026:	300c      	adds	r0, #12
   10028:	f00c fa1d 	bl	1c466 <memcpy>
   1002c:	2308      	movs	r3, #8
   1002e:	9803      	ldr	r0, [sp, #12]
   10030:	f247 0102 	movw	r1, #28674	; 0x7002
   10034:	7203      	strb	r3, [r0, #8]
   10036:	7245      	strb	r5, [r0, #9]
   10038:	7285      	strb	r5, [r0, #10]
   1003a:	72c5      	strb	r5, [r0, #11]
   1003c:	6823      	ldr	r3, [r4, #0]
   1003e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   10042:	6023      	str	r3, [r4, #0]
   10044:	f7ff fd3a 	bl	fabc <rpc_logobj_client_request_send>
   10048:	2800      	cmp	r0, #0
   1004a:	d151      	bne.n	100f0 <logobj_interface_setopt+0x150>
   1004c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   10050:	f04f 33ff 	mov.w	r3, #4294967295
   10054:	4611      	mov	r1, r2
   10056:	4638      	mov	r0, r7
   10058:	f005 ff34 	bl	15ec4 <interface_socket_wait>
   1005c:	4605      	mov	r5, r0
   1005e:	2800      	cmp	r0, #0
   10060:	d13b      	bne.n	100da <logobj_interface_setopt+0x13a>
   10062:	4638      	mov	r0, r7
   10064:	f005 ffa2 	bl	15fac <interface_socket_from_handle_get>
   10068:	2800      	cmp	r0, #0
   1006a:	d04f      	beq.n	1010c <logobj_interface_setopt+0x16c>
   1006c:	6843      	ldr	r3, [r0, #4]
   1006e:	2b00      	cmp	r3, #0
   10070:	d04c      	beq.n	1010c <logobj_interface_setopt+0x16c>
   10072:	2200      	movs	r2, #0
   10074:	461d      	mov	r5, r3
   10076:	6042      	str	r2, [r0, #4]
   10078:	e02f      	b.n	100da <logobj_interface_setopt+0x13a>
   1007a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1007c:	9400      	str	r4, [sp, #0]
   1007e:	f005 ffbd 	bl	15ffc <interface_socket_setopt>
   10082:	4605      	mov	r5, r0
   10084:	4628      	mov	r0, r5
   10086:	b005      	add	sp, #20
   10088:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1008a:	2100      	movs	r1, #0
   1008c:	a803      	add	r0, sp, #12
   1008e:	7835      	ldrb	r5, [r6, #0]
   10090:	f7ff fcfc 	bl	fa8c <rpc_logobj_client_request_alloc>
   10094:	bb48      	cbnz	r0, 100ea <logobj_interface_setopt+0x14a>
   10096:	2d01      	cmp	r5, #1
   10098:	bf08      	it	eq
   1009a:	4b26      	ldreq	r3, [pc, #152]	; (10134 <logobj_interface_setopt+0x194>)
   1009c:	f04f 0204 	mov.w	r2, #4
   100a0:	bf08      	it	eq
   100a2:	701d      	strbeq	r5, [r3, #0]
   100a4:	2300      	movs	r3, #0
   100a6:	9803      	ldr	r0, [sp, #12]
   100a8:	f247 0101 	movw	r1, #28673	; 0x7001
   100ac:	7243      	strb	r3, [r0, #9]
   100ae:	60c5      	str	r5, [r0, #12]
   100b0:	7283      	strb	r3, [r0, #10]
   100b2:	72c3      	strb	r3, [r0, #11]
   100b4:	7202      	strb	r2, [r0, #8]
   100b6:	6823      	ldr	r3, [r4, #0]
   100b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   100bc:	6023      	str	r3, [r4, #0]
   100be:	f7ff fcfd 	bl	fabc <rpc_logobj_client_request_send>
   100c2:	4606      	mov	r6, r0
   100c4:	b9a0      	cbnz	r0, 100f0 <logobj_interface_setopt+0x150>
   100c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   100ca:	f04f 33ff 	mov.w	r3, #4294967295
   100ce:	4611      	mov	r1, r2
   100d0:	4638      	mov	r0, r7
   100d2:	f005 fef7 	bl	15ec4 <interface_socket_wait>
   100d6:	4605      	mov	r5, r0
   100d8:	b180      	cbz	r0, 100fc <logobj_interface_setopt+0x15c>
   100da:	6823      	ldr	r3, [r4, #0]
   100dc:	e778      	b.n	ffd0 <logobj_interface_setopt+0x30>
   100de:	202a      	movs	r0, #42	; 0x2a
   100e0:	f7ff f926 	bl	f330 <bsd_os_errno_set>
   100e4:	f04f 35ff 	mov.w	r5, #4294967295
   100e8:	e77e      	b.n	ffe8 <logobj_interface_setopt+0x48>
   100ea:	6823      	ldr	r3, [r4, #0]
   100ec:	250c      	movs	r5, #12
   100ee:	e76f      	b.n	ffd0 <logobj_interface_setopt+0x30>
   100f0:	9803      	ldr	r0, [sp, #12]
   100f2:	f7ff fcf9 	bl	fae8 <rpc_logobj_client_message_free>
   100f6:	2505      	movs	r5, #5
   100f8:	6823      	ldr	r3, [r4, #0]
   100fa:	e769      	b.n	ffd0 <logobj_interface_setopt+0x30>
   100fc:	4638      	mov	r0, r7
   100fe:	f005 ff55 	bl	15fac <interface_socket_from_handle_get>
   10102:	b140      	cbz	r0, 10116 <logobj_interface_setopt+0x176>
   10104:	6845      	ldr	r5, [r0, #4]
   10106:	b135      	cbz	r5, 10116 <logobj_interface_setopt+0x176>
   10108:	6046      	str	r6, [r0, #4]
   1010a:	e7e6      	b.n	100da <logobj_interface_setopt+0x13a>
   1010c:	4631      	mov	r1, r6
   1010e:	2204      	movs	r2, #4
   10110:	4809      	ldr	r0, [pc, #36]	; (10138 <logobj_interface_setopt+0x198>)
   10112:	f00c f9a8 	bl	1c466 <memcpy>
   10116:	6823      	ldr	r3, [r4, #0]
   10118:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1011c:	6023      	str	r3, [r4, #0]
   1011e:	6823      	ldr	r3, [r4, #0]
   10120:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   10124:	6023      	str	r3, [r4, #0]
   10126:	e75f      	b.n	ffe8 <logobj_interface_setopt+0x48>
   10128:	2009      	movs	r0, #9
   1012a:	f7ff f901 	bl	f330 <bsd_os_errno_set>
   1012e:	f04f 35ff 	mov.w	r5, #4294967295
   10132:	e759      	b.n	ffe8 <logobj_interface_setopt+0x48>
   10134:	20021759 	.word	0x20021759
   10138:	2002027c 	.word	0x2002027c

0001013c <logobj_interface_getopt>:
   1013c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1013e:	2901      	cmp	r1, #1
   10140:	b083      	sub	sp, #12
   10142:	9e08      	ldr	r6, [sp, #32]
   10144:	d030      	beq.n	101a8 <logobj_interface_getopt+0x6c>
   10146:	461f      	mov	r7, r3
   10148:	f240 2305 	movw	r3, #517	; 0x205
   1014c:	4299      	cmp	r1, r3
   1014e:	d134      	bne.n	101ba <logobj_interface_getopt+0x7e>
   10150:	4615      	mov	r5, r2
   10152:	f005 ff2b 	bl	15fac <interface_socket_from_handle_get>
   10156:	2800      	cmp	r0, #0
   10158:	d037      	beq.n	101ca <logobj_interface_getopt+0x8e>
   1015a:	2d01      	cmp	r5, #1
   1015c:	d015      	beq.n	1018a <logobj_interface_getopt+0x4e>
   1015e:	2d02      	cmp	r5, #2
   10160:	d10b      	bne.n	1017a <logobj_interface_getopt+0x3e>
   10162:	b387      	cbz	r7, 101c6 <logobj_interface_getopt+0x8a>
   10164:	6833      	ldr	r3, [r6, #0]
   10166:	b373      	cbz	r3, 101c6 <logobj_interface_getopt+0x8a>
   10168:	2300      	movs	r3, #0
   1016a:	2201      	movs	r2, #1
   1016c:	4618      	mov	r0, r3
   1016e:	491a      	ldr	r1, [pc, #104]	; (101d8 <logobj_interface_getopt+0x9c>)
   10170:	7809      	ldrb	r1, [r1, #0]
   10172:	7039      	strb	r1, [r7, #0]
   10174:	6032      	str	r2, [r6, #0]
   10176:	b003      	add	sp, #12
   10178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1017a:	2009      	movs	r0, #9
   1017c:	f7ff f8d8 	bl	f330 <bsd_os_errno_set>
   10180:	f04f 33ff 	mov.w	r3, #4294967295
   10184:	4618      	mov	r0, r3
   10186:	b003      	add	sp, #12
   10188:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1018a:	b1e7      	cbz	r7, 101c6 <logobj_interface_getopt+0x8a>
   1018c:	6833      	ldr	r3, [r6, #0]
   1018e:	2b03      	cmp	r3, #3
   10190:	d919      	bls.n	101c6 <logobj_interface_getopt+0x8a>
   10192:	4638      	mov	r0, r7
   10194:	2204      	movs	r2, #4
   10196:	4911      	ldr	r1, [pc, #68]	; (101dc <logobj_interface_getopt+0xa0>)
   10198:	f00c f965 	bl	1c466 <memcpy>
   1019c:	2300      	movs	r3, #0
   1019e:	2204      	movs	r2, #4
   101a0:	4618      	mov	r0, r3
   101a2:	6032      	str	r2, [r6, #0]
   101a4:	b003      	add	sp, #12
   101a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101a8:	9600      	str	r6, [sp, #0]
   101aa:	f005 ff69 	bl	16080 <interface_socket_getopt>
   101ae:	4603      	mov	r3, r0
   101b0:	2800      	cmp	r0, #0
   101b2:	d1e3      	bne.n	1017c <logobj_interface_getopt+0x40>
   101b4:	4618      	mov	r0, r3
   101b6:	b003      	add	sp, #12
   101b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ba:	202a      	movs	r0, #42	; 0x2a
   101bc:	f7ff f8b8 	bl	f330 <bsd_os_errno_set>
   101c0:	f04f 33ff 	mov.w	r3, #4294967295
   101c4:	e7de      	b.n	10184 <logobj_interface_getopt+0x48>
   101c6:	2016      	movs	r0, #22
   101c8:	e7d8      	b.n	1017c <logobj_interface_getopt+0x40>
   101ca:	2009      	movs	r0, #9
   101cc:	f7ff f8b0 	bl	f330 <bsd_os_errno_set>
   101d0:	f04f 33ff 	mov.w	r3, #4294967295
   101d4:	e7d6      	b.n	10184 <logobj_interface_getopt+0x48>
   101d6:	bf00      	nop
   101d8:	2002175a 	.word	0x2002175a
   101dc:	2002027c 	.word	0x2002027c

000101e0 <logobj_interface_close>:
   101e0:	b510      	push	{r4, lr}
   101e2:	4604      	mov	r4, r0
   101e4:	f005 fee2 	bl	15fac <interface_socket_from_handle_get>
   101e8:	b138      	cbz	r0, 101fa <logobj_interface_close+0x1a>
   101ea:	4620      	mov	r0, r4
   101ec:	f005 fe1c 	bl	15e28 <interface_socket_free>
   101f0:	2300      	movs	r3, #0
   101f2:	4a05      	ldr	r2, [pc, #20]	; (10208 <logobj_interface_close+0x28>)
   101f4:	4618      	mov	r0, r3
   101f6:	6013      	str	r3, [r2, #0]
   101f8:	bd10      	pop	{r4, pc}
   101fa:	2009      	movs	r0, #9
   101fc:	f7ff f898 	bl	f330 <bsd_os_errno_set>
   10200:	f04f 30ff 	mov.w	r0, #4294967295
   10204:	bd10      	pop	{r4, pc}
   10206:	bf00      	nop
   10208:	20020280 	.word	0x20020280

0001020c <packet_free_cb>:
   1020c:	6800      	ldr	r0, [r0, #0]
   1020e:	f004 b9ef 	b.w	145f0 <rpc_at_client_data_free>
   10212:	bf00      	nop

00010214 <at_interface_write>:
   10214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10218:	b082      	sub	sp, #8
   1021a:	9c08      	ldr	r4, [sp, #32]
   1021c:	2c00      	cmp	r4, #0
   1021e:	d15b      	bne.n	102d8 <at_interface_write+0xc4>
   10220:	460f      	mov	r7, r1
   10222:	4615      	mov	r5, r2
   10224:	4698      	mov	r8, r3
   10226:	4606      	mov	r6, r0
   10228:	f005 fec0 	bl	15fac <interface_socket_from_handle_get>
   1022c:	4604      	mov	r4, r0
   1022e:	f1b8 0f00 	cmp.w	r8, #0
   10232:	d12b      	bne.n	1028c <at_interface_write+0x78>
   10234:	2800      	cmp	r0, #0
   10236:	d055      	beq.n	102e4 <at_interface_write+0xd0>
   10238:	6803      	ldr	r3, [r0, #0]
   1023a:	039b      	lsls	r3, r3, #14
   1023c:	d552      	bpl.n	102e4 <at_interface_write+0xd0>
   1023e:	6803      	ldr	r3, [r0, #0]
   10240:	4629      	mov	r1, r5
   10242:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10246:	6003      	str	r3, [r0, #0]
   10248:	6803      	ldr	r3, [r0, #0]
   1024a:	a801      	add	r0, sp, #4
   1024c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   10250:	6023      	str	r3, [r4, #0]
   10252:	f004 f9a3 	bl	1459c <rpc_at_client_request_alloc>
   10256:	bb08      	cbnz	r0, 1029c <at_interface_write+0x88>
   10258:	2204      	movs	r2, #4
   1025a:	9b01      	ldr	r3, [sp, #4]
   1025c:	721a      	strb	r2, [r3, #8]
   1025e:	7258      	strb	r0, [r3, #9]
   10260:	7298      	strb	r0, [r3, #10]
   10262:	72d8      	strb	r0, [r3, #11]
   10264:	60de      	str	r6, [r3, #12]
   10266:	b9fd      	cbnz	r5, 102a8 <at_interface_write+0x94>
   10268:	4618      	mov	r0, r3
   1026a:	2101      	movs	r1, #1
   1026c:	f004 f9aa 	bl	145c4 <rpc_at_client_request_send>
   10270:	bb48      	cbnz	r0, 102c6 <at_interface_write+0xb2>
   10272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10276:	4630      	mov	r0, r6
   10278:	4611      	mov	r1, r2
   1027a:	f04f 33ff 	mov.w	r3, #4294967295
   1027e:	f005 fe21 	bl	15ec4 <interface_socket_wait>
   10282:	b960      	cbnz	r0, 1029e <at_interface_write+0x8a>
   10284:	4628      	mov	r0, r5
   10286:	b002      	add	sp, #8
   10288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1028c:	b360      	cbz	r0, 102e8 <at_interface_write+0xd4>
   1028e:	6803      	ldr	r3, [r0, #0]
   10290:	202d      	movs	r0, #45	; 0x2d
   10292:	f7ff f84d 	bl	f330 <bsd_os_errno_set>
   10296:	f04f 30ff 	mov.w	r0, #4294967295
   1029a:	e7f4      	b.n	10286 <at_interface_write+0x72>
   1029c:	200c      	movs	r0, #12
   1029e:	6823      	ldr	r3, [r4, #0]
   102a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   102a4:	6023      	str	r3, [r4, #0]
   102a6:	e7f4      	b.n	10292 <at_interface_write+0x7e>
   102a8:	4639      	mov	r1, r7
   102aa:	6818      	ldr	r0, [r3, #0]
   102ac:	462a      	mov	r2, r5
   102ae:	f00c f8da 	bl	1c466 <memcpy>
   102b2:	2101      	movs	r1, #1
   102b4:	9801      	ldr	r0, [sp, #4]
   102b6:	f004 f985 	bl	145c4 <rpc_at_client_request_send>
   102ba:	2800      	cmp	r0, #0
   102bc:	d0d9      	beq.n	10272 <at_interface_write+0x5e>
   102be:	9b01      	ldr	r3, [sp, #4]
   102c0:	6818      	ldr	r0, [r3, #0]
   102c2:	f004 f995 	bl	145f0 <rpc_at_client_data_free>
   102c6:	9801      	ldr	r0, [sp, #4]
   102c8:	f004 f98a 	bl	145e0 <rpc_at_client_message_free>
   102cc:	6823      	ldr	r3, [r4, #0]
   102ce:	2023      	movs	r0, #35	; 0x23
   102d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   102d4:	6023      	str	r3, [r4, #0]
   102d6:	e7dc      	b.n	10292 <at_interface_write+0x7e>
   102d8:	2038      	movs	r0, #56	; 0x38
   102da:	f7ff f829 	bl	f330 <bsd_os_errno_set>
   102de:	f04f 30ff 	mov.w	r0, #4294967295
   102e2:	e7d0      	b.n	10286 <at_interface_write+0x72>
   102e4:	2016      	movs	r0, #22
   102e6:	e7d4      	b.n	10292 <at_interface_write+0x7e>
   102e8:	202d      	movs	r0, #45	; 0x2d
   102ea:	e7d2      	b.n	10292 <at_interface_write+0x7e>

000102ec <at_interface_init>:
   102ec:	f004 b950 	b.w	14590 <rpc_at_client_init>

000102f0 <at_interface_open>:
   102f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102f4:	2600      	movs	r6, #0
   102f6:	b082      	sub	sp, #8
   102f8:	2902      	cmp	r1, #2
   102fa:	9600      	str	r6, [sp, #0]
   102fc:	d13e      	bne.n	1037c <at_interface_open+0x8c>
   102fe:	4680      	mov	r8, r0
   10300:	4617      	mov	r7, r2
   10302:	4668      	mov	r0, sp
   10304:	4a20      	ldr	r2, [pc, #128]	; (10388 <at_interface_open+0x98>)
   10306:	460c      	mov	r4, r1
   10308:	f005 fd2a 	bl	15d60 <interface_socket_allocate>
   1030c:	9b00      	ldr	r3, [sp, #0]
   1030e:	4605      	mov	r5, r0
   10310:	b30b      	cbz	r3, 10356 <at_interface_open+0x66>
   10312:	e9c3 8403 	strd	r8, r4, [r3, #12]
   10316:	615f      	str	r7, [r3, #20]
   10318:	4631      	mov	r1, r6
   1031a:	a801      	add	r0, sp, #4
   1031c:	f004 f93e 	bl	1459c <rpc_at_client_request_alloc>
   10320:	bb50      	cbnz	r0, 10378 <at_interface_open+0x88>
   10322:	2204      	movs	r2, #4
   10324:	9b01      	ldr	r3, [sp, #4]
   10326:	2105      	movs	r1, #5
   10328:	7258      	strb	r0, [r3, #9]
   1032a:	7298      	strb	r0, [r3, #10]
   1032c:	72d8      	strb	r0, [r3, #11]
   1032e:	721a      	strb	r2, [r3, #8]
   10330:	60dd      	str	r5, [r3, #12]
   10332:	4618      	mov	r0, r3
   10334:	f004 f946 	bl	145c4 <rpc_at_client_request_send>
   10338:	b988      	cbnz	r0, 1035e <at_interface_open+0x6e>
   1033a:	4622      	mov	r2, r4
   1033c:	4621      	mov	r1, r4
   1033e:	f04f 33ff 	mov.w	r3, #4294967295
   10342:	4628      	mov	r0, r5
   10344:	f005 fdbe 	bl	15ec4 <interface_socket_wait>
   10348:	4604      	mov	r4, r0
   1034a:	b960      	cbnz	r0, 10366 <at_interface_open+0x76>
   1034c:	9a00      	ldr	r2, [sp, #0]
   1034e:	6813      	ldr	r3, [r2, #0]
   10350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10354:	6013      	str	r3, [r2, #0]
   10356:	4628      	mov	r0, r5
   10358:	b002      	add	sp, #8
   1035a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1035e:	9801      	ldr	r0, [sp, #4]
   10360:	f004 f93e 	bl	145e0 <rpc_at_client_message_free>
   10364:	2423      	movs	r4, #35	; 0x23
   10366:	4628      	mov	r0, r5
   10368:	f005 fd5e 	bl	15e28 <interface_socket_free>
   1036c:	4620      	mov	r0, r4
   1036e:	f7fe ffdf 	bl	f330 <bsd_os_errno_set>
   10372:	f04f 35ff 	mov.w	r5, #4294967295
   10376:	e7ee      	b.n	10356 <at_interface_open+0x66>
   10378:	240c      	movs	r4, #12
   1037a:	e7f4      	b.n	10366 <at_interface_open+0x76>
   1037c:	2029      	movs	r0, #41	; 0x29
   1037e:	f7fe ffd7 	bl	f330 <bsd_os_errno_set>
   10382:	f04f 35ff 	mov.w	r5, #4294967295
   10386:	e7e6      	b.n	10356 <at_interface_open+0x66>
   10388:	0001020d 	.word	0x0001020d

0001038c <at_interface_close>:
   1038c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1038e:	b083      	sub	sp, #12
   10390:	4606      	mov	r6, r0
   10392:	f005 fe0b 	bl	15fac <interface_socket_from_handle_get>
   10396:	2800      	cmp	r0, #0
   10398:	d03d      	beq.n	10416 <at_interface_close+0x8a>
   1039a:	230d      	movs	r3, #13
   1039c:	6807      	ldr	r7, [r0, #0]
   1039e:	6003      	str	r3, [r0, #0]
   103a0:	6803      	ldr	r3, [r0, #0]
   103a2:	4604      	mov	r4, r0
   103a4:	039b      	lsls	r3, r3, #14
   103a6:	d41f      	bmi.n	103e8 <at_interface_close+0x5c>
   103a8:	2100      	movs	r1, #0
   103aa:	a801      	add	r0, sp, #4
   103ac:	f004 f8f6 	bl	1459c <rpc_at_client_request_alloc>
   103b0:	bb20      	cbnz	r0, 103fc <at_interface_close+0x70>
   103b2:	2204      	movs	r2, #4
   103b4:	9b01      	ldr	r3, [sp, #4]
   103b6:	2106      	movs	r1, #6
   103b8:	7258      	strb	r0, [r3, #9]
   103ba:	7298      	strb	r0, [r3, #10]
   103bc:	72d8      	strb	r0, [r3, #11]
   103be:	721a      	strb	r2, [r3, #8]
   103c0:	60de      	str	r6, [r3, #12]
   103c2:	4618      	mov	r0, r3
   103c4:	f004 f8fe 	bl	145c4 <rpc_at_client_request_send>
   103c8:	b9d0      	cbnz	r0, 10400 <at_interface_close+0x74>
   103ca:	220e      	movs	r2, #14
   103cc:	f04f 33ff 	mov.w	r3, #4294967295
   103d0:	4611      	mov	r1, r2
   103d2:	4630      	mov	r0, r6
   103d4:	f005 fd76 	bl	15ec4 <interface_socket_wait>
   103d8:	4605      	mov	r5, r0
   103da:	b9a8      	cbnz	r0, 10408 <at_interface_close+0x7c>
   103dc:	4630      	mov	r0, r6
   103de:	f005 fd23 	bl	15e28 <interface_socket_free>
   103e2:	4628      	mov	r0, r5
   103e4:	b003      	add	sp, #12
   103e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103e8:	6803      	ldr	r3, [r0, #0]
   103ea:	2100      	movs	r1, #0
   103ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   103f0:	6003      	str	r3, [r0, #0]
   103f2:	a801      	add	r0, sp, #4
   103f4:	f004 f8d2 	bl	1459c <rpc_at_client_request_alloc>
   103f8:	2800      	cmp	r0, #0
   103fa:	d0da      	beq.n	103b2 <at_interface_close+0x26>
   103fc:	250c      	movs	r5, #12
   103fe:	e003      	b.n	10408 <at_interface_close+0x7c>
   10400:	9801      	ldr	r0, [sp, #4]
   10402:	f004 f8ed 	bl	145e0 <rpc_at_client_message_free>
   10406:	2523      	movs	r5, #35	; 0x23
   10408:	6027      	str	r7, [r4, #0]
   1040a:	4628      	mov	r0, r5
   1040c:	f7fe ff90 	bl	f330 <bsd_os_errno_set>
   10410:	f04f 35ff 	mov.w	r5, #4294967295
   10414:	e7e5      	b.n	103e2 <at_interface_close+0x56>
   10416:	2516      	movs	r5, #22
   10418:	e7f7      	b.n	1040a <at_interface_close+0x7e>
   1041a:	bf00      	nop

0001041c <at_interface_read>:
   1041c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10420:	b084      	sub	sp, #16
   10422:	4688      	mov	r8, r1
   10424:	4615      	mov	r5, r2
   10426:	461e      	mov	r6, r3
   10428:	4607      	mov	r7, r0
   1042a:	f005 fdbf 	bl	15fac <interface_socket_from_handle_get>
   1042e:	2800      	cmp	r0, #0
   10430:	d043      	beq.n	104ba <at_interface_read+0x9e>
   10432:	2300      	movs	r3, #0
   10434:	4604      	mov	r4, r0
   10436:	e9cd 8500 	strd	r8, r5, [sp]
   1043a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1043e:	bb2e      	cbnz	r6, 1048c <at_interface_read+0x70>
   10440:	f016 0502 	ands.w	r5, r6, #2
   10444:	d00d      	beq.n	10462 <at_interface_read+0x46>
   10446:	e028      	b.n	1049a <at_interface_read+0x7e>
   10448:	b9cd      	cbnz	r5, 1047e <at_interface_read+0x62>
   1044a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1044e:	6a23      	ldr	r3, [r4, #32]
   10450:	4611      	mov	r1, r2
   10452:	2b00      	cmp	r3, #0
   10454:	bf08      	it	eq
   10456:	f04f 33ff 	moveq.w	r3, #4294967295
   1045a:	4638      	mov	r0, r7
   1045c:	f005 fd32 	bl	15ec4 <interface_socket_wait>
   10460:	4605      	mov	r5, r0
   10462:	6823      	ldr	r3, [r4, #0]
   10464:	69e0      	ldr	r0, [r4, #28]
   10466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1046a:	6023      	str	r3, [r4, #0]
   1046c:	6803      	ldr	r3, [r0, #0]
   1046e:	4632      	mov	r2, r6
   10470:	689b      	ldr	r3, [r3, #8]
   10472:	4669      	mov	r1, sp
   10474:	4798      	blx	r3
   10476:	f1b0 0800 	subs.w	r8, r0, #0
   1047a:	dbe5      	blt.n	10448 <at_interface_read+0x2c>
   1047c:	b115      	cbz	r5, 10484 <at_interface_read+0x68>
   1047e:	4628      	mov	r0, r5
   10480:	f7fe ff56 	bl	f330 <bsd_os_errno_set>
   10484:	4640      	mov	r0, r8
   10486:	b004      	add	sp, #16
   10488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1048c:	f016 0f0a 	tst.w	r6, #10
   10490:	d1d6      	bne.n	10440 <at_interface_read+0x24>
   10492:	252d      	movs	r5, #45	; 0x2d
   10494:	f04f 38ff 	mov.w	r8, #4294967295
   10498:	e7f1      	b.n	1047e <at_interface_read+0x62>
   1049a:	6823      	ldr	r3, [r4, #0]
   1049c:	69e0      	ldr	r0, [r4, #28]
   1049e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   104a2:	6023      	str	r3, [r4, #0]
   104a4:	6803      	ldr	r3, [r0, #0]
   104a6:	4632      	mov	r2, r6
   104a8:	689b      	ldr	r3, [r3, #8]
   104aa:	4669      	mov	r1, sp
   104ac:	4798      	blx	r3
   104ae:	f1b0 3fff 	cmp.w	r0, #4294967295
   104b2:	4680      	mov	r8, r0
   104b4:	d1e6      	bne.n	10484 <at_interface_read+0x68>
   104b6:	2523      	movs	r5, #35	; 0x23
   104b8:	e7e1      	b.n	1047e <at_interface_read+0x62>
   104ba:	2516      	movs	r5, #22
   104bc:	f04f 38ff 	mov.w	r8, #4294967295
   104c0:	e7dd      	b.n	1047e <at_interface_read+0x62>
   104c2:	bf00      	nop

000104c4 <at_interface_getopt>:
   104c4:	f005 bddc 	b.w	16080 <interface_socket_getopt>

000104c8 <at_interface_setopt>:
   104c8:	f005 bd98 	b.w	15ffc <interface_socket_setopt>

000104cc <rpc_at_event_handler>:
   104cc:	b570      	push	{r4, r5, r6, lr}
   104ce:	4606      	mov	r6, r0
   104d0:	b084      	sub	sp, #16
   104d2:	68c0      	ldr	r0, [r0, #12]
   104d4:	460d      	mov	r5, r1
   104d6:	f005 fd69 	bl	15fac <interface_socket_from_handle_get>
   104da:	4604      	mov	r4, r0
   104dc:	b348      	cbz	r0, 10532 <rpc_at_event_handler+0x66>
   104de:	6803      	ldr	r3, [r0, #0]
   104e0:	b29b      	uxth	r3, r3
   104e2:	2b01      	cmp	r3, #1
   104e4:	d01f      	beq.n	10526 <rpc_at_event_handler+0x5a>
   104e6:	6803      	ldr	r3, [r0, #0]
   104e8:	b29b      	uxth	r3, r3
   104ea:	2b0d      	cmp	r3, #13
   104ec:	d029      	beq.n	10542 <rpc_at_event_handler+0x76>
   104ee:	6803      	ldr	r3, [r0, #0]
   104f0:	b29b      	uxth	r3, r3
   104f2:	2b02      	cmp	r3, #2
   104f4:	d02d      	beq.n	10552 <rpc_at_event_handler+0x86>
   104f6:	3d03      	subs	r5, #3
   104f8:	2d01      	cmp	r5, #1
   104fa:	d817      	bhi.n	1052c <rpc_at_event_handler+0x60>
   104fc:	2500      	movs	r5, #0
   104fe:	6873      	ldr	r3, [r6, #4]
   10500:	6832      	ldr	r2, [r6, #0]
   10502:	e9cd 5502 	strd	r5, r5, [sp, #8]
   10506:	e9cd 2300 	strd	r2, r3, [sp]
   1050a:	69e0      	ldr	r0, [r4, #28]
   1050c:	4669      	mov	r1, sp
   1050e:	6803      	ldr	r3, [r0, #0]
   10510:	685b      	ldr	r3, [r3, #4]
   10512:	4798      	blx	r3
   10514:	3001      	adds	r0, #1
   10516:	d019      	beq.n	1054c <rpc_at_event_handler+0x80>
   10518:	4628      	mov	r0, r5
   1051a:	6823      	ldr	r3, [r4, #0]
   1051c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10520:	6023      	str	r3, [r4, #0]
   10522:	b004      	add	sp, #16
   10524:	bd70      	pop	{r4, r5, r6, pc}
   10526:	2d02      	cmp	r5, #2
   10528:	d1e5      	bne.n	104f6 <rpc_at_event_handler+0x2a>
   1052a:	6005      	str	r5, [r0, #0]
   1052c:	2000      	movs	r0, #0
   1052e:	b004      	add	sp, #16
   10530:	bd70      	pop	{r4, r5, r6, pc}
   10532:	6830      	ldr	r0, [r6, #0]
   10534:	2800      	cmp	r0, #0
   10536:	d0f9      	beq.n	1052c <rpc_at_event_handler+0x60>
   10538:	f004 f85a 	bl	145f0 <rpc_at_client_data_free>
   1053c:	4620      	mov	r0, r4
   1053e:	b004      	add	sp, #16
   10540:	bd70      	pop	{r4, r5, r6, pc}
   10542:	2d02      	cmp	r5, #2
   10544:	d1d7      	bne.n	104f6 <rpc_at_event_handler+0x2a>
   10546:	230e      	movs	r3, #14
   10548:	6003      	str	r3, [r0, #0]
   1054a:	e7ef      	b.n	1052c <rpc_at_event_handler+0x60>
   1054c:	2002      	movs	r0, #2
   1054e:	b004      	add	sp, #16
   10550:	bd70      	pop	{r4, r5, r6, pc}
   10552:	6803      	ldr	r3, [r0, #0]
   10554:	029b      	lsls	r3, r3, #10
   10556:	d5ce      	bpl.n	104f6 <rpc_at_event_handler+0x2a>
   10558:	2d02      	cmp	r5, #2
   1055a:	d1cc      	bne.n	104f6 <rpc_at_event_handler+0x2a>
   1055c:	6803      	ldr	r3, [r0, #0]
   1055e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   10562:	6003      	str	r3, [r0, #0]
   10564:	6803      	ldr	r3, [r0, #0]
   10566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1056a:	6003      	str	r3, [r0, #0]
   1056c:	e7de      	b.n	1052c <rpc_at_event_handler+0x60>
   1056e:	bf00      	nop

00010570 <dfu_client_event_handler>:
   10570:	f850 1b08 	ldr.w	r1, [r0], #8
   10574:	0c09      	lsrs	r1, r1, #16
   10576:	f001 b925 	b.w	117c4 <rpc_dfu_event_handler>
   1057a:	bf00      	nop

0001057c <rpc_dfu_client_init>:
   1057c:	4801      	ldr	r0, [pc, #4]	; (10584 <rpc_dfu_client_init+0x8>)
   1057e:	f005 be51 	b.w	16224 <rpc_client_register>
   10582:	bf00      	nop
   10584:	0001d5dc 	.word	0x0001d5dc

00010588 <rpc_dfu_client_request_alloc>:
   10588:	2300      	movs	r3, #0
   1058a:	b510      	push	{r4, lr}
   1058c:	b082      	sub	sp, #8
   1058e:	9301      	str	r3, [sp, #4]
   10590:	b158      	cbz	r0, 105aa <rpc_dfu_client_request_alloc+0x22>
   10592:	4604      	mov	r4, r0
   10594:	aa01      	add	r2, sp, #4
   10596:	2006      	movs	r0, #6
   10598:	f006 f87c 	bl	16694 <rpc_message_alloc>
   1059c:	b918      	cbnz	r0, 105a6 <rpc_dfu_client_request_alloc+0x1e>
   1059e:	9b01      	ldr	r3, [sp, #4]
   105a0:	b10b      	cbz	r3, 105a6 <rpc_dfu_client_request_alloc+0x1e>
   105a2:	3308      	adds	r3, #8
   105a4:	6023      	str	r3, [r4, #0]
   105a6:	b002      	add	sp, #8
   105a8:	bd10      	pop	{r4, pc}
   105aa:	2007      	movs	r0, #7
   105ac:	b002      	add	sp, #8
   105ae:	bd10      	pop	{r4, pc}

000105b0 <rpc_dfu_client_request_send>:
   105b0:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   105b4:	d10b      	bne.n	105ce <rpc_dfu_client_request_send+0x1e>
   105b6:	b160      	cbz	r0, 105d2 <rpc_dfu_client_request_send+0x22>
   105b8:	4603      	mov	r3, r0
   105ba:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   105be:	2006      	movs	r0, #6
   105c0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   105c4:	f843 1d08 	str.w	r1, [r3, #-8]!
   105c8:	4619      	mov	r1, r3
   105ca:	f006 b84b 	b.w	16664 <rpc_message_send>
   105ce:	200f      	movs	r0, #15
   105d0:	4770      	bx	lr
   105d2:	2007      	movs	r0, #7
   105d4:	4770      	bx	lr
   105d6:	bf00      	nop

000105d8 <rpc_dfu_client_message_free>:
   105d8:	b120      	cbz	r0, 105e4 <rpc_dfu_client_message_free+0xc>
   105da:	f1a0 0108 	sub.w	r1, r0, #8
   105de:	2006      	movs	r0, #6
   105e0:	f006 b88a 	b.w	166f8 <rpc_message_free>
   105e4:	2007      	movs	r0, #7
   105e6:	4770      	bx	lr

000105e8 <rpc_dfu_client_data_free>:
   105e8:	b118      	cbz	r0, 105f2 <rpc_dfu_client_data_free+0xa>
   105ea:	4601      	mov	r1, r0
   105ec:	2006      	movs	r0, #6
   105ee:	f006 b995 	b.w	1691c <rpc_message_data_free>
   105f2:	2007      	movs	r0, #7
   105f4:	4770      	bx	lr
   105f6:	bf00      	nop

000105f8 <mem_free>:
   105f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105fc:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 106cc <mem_free+0xd4>
   10600:	b083      	sub	sp, #12
   10602:	9000      	str	r0, [sp, #0]
   10604:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   10608:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1060c:	b12b      	cbz	r3, 1061a <mem_free+0x22>
   1060e:	f8dc 2000 	ldr.w	r2, [ip]
   10612:	9c00      	ldr	r4, [sp, #0]
   10614:	7810      	ldrb	r0, [r2, #0]
   10616:	42a0      	cmp	r0, r4
   10618:	d006      	beq.n	10628 <mem_free+0x30>
   1061a:	f10c 0c0c 	add.w	ip, ip, #12
   1061e:	45e3      	cmp	fp, ip
   10620:	d1f2      	bne.n	10608 <mem_free+0x10>
   10622:	b003      	add	sp, #12
   10624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10628:	f8dc a004 	ldr.w	sl, [ip, #4]
   1062c:	eb03 080a 	add.w	r8, r3, sl
   10630:	45c2      	cmp	sl, r8
   10632:	d2f2      	bcs.n	1061a <mem_free+0x22>
   10634:	6853      	ldr	r3, [r2, #4]
   10636:	f8cd c004 	str.w	ip, [sp, #4]
   1063a:	46d6      	mov	lr, sl
   1063c:	469c      	mov	ip, r3
   1063e:	f8d2 9010 	ldr.w	r9, [r2, #16]
   10642:	8997      	ldrh	r7, [r2, #12]
   10644:	ebae 000a 	sub.w	r0, lr, sl
   10648:	b3df      	cbz	r7, 106c2 <mem_free+0xca>
   1064a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1064e:	4290      	cmp	r0, r2
   10650:	d31c      	bcc.n	1068c <mem_free+0x94>
   10652:	4665      	mov	r5, ip
   10654:	2400      	movs	r4, #0
   10656:	f109 0304 	add.w	r3, r9, #4
   1065a:	e003      	b.n	10664 <mem_free+0x6c>
   1065c:	885a      	ldrh	r2, [r3, #2]
   1065e:	3304      	adds	r3, #4
   10660:	4282      	cmp	r2, r0
   10662:	d815      	bhi.n	10690 <mem_free+0x98>
   10664:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   10668:	3401      	adds	r4, #1
   1066a:	42a7      	cmp	r7, r4
   1066c:	fb02 5506 	mla	r5, r2, r6, r5
   10670:	eba0 0002 	sub.w	r0, r0, r2
   10674:	461e      	mov	r6, r3
   10676:	d1f1      	bne.n	1065c <mem_free+0x64>
   10678:	2000      	movs	r0, #0
   1067a:	4281      	cmp	r1, r0
   1067c:	d00d      	beq.n	1069a <mem_free+0xa2>
   1067e:	f10e 0e01 	add.w	lr, lr, #1
   10682:	45f0      	cmp	r8, lr
   10684:	d1de      	bne.n	10644 <mem_free+0x4c>
   10686:	f8dd c004 	ldr.w	ip, [sp, #4]
   1068a:	e7c6      	b.n	1061a <mem_free+0x22>
   1068c:	4665      	mov	r5, ip
   1068e:	464e      	mov	r6, r9
   10690:	8833      	ldrh	r3, [r6, #0]
   10692:	fb00 5003 	mla	r0, r0, r3, r5
   10696:	4281      	cmp	r1, r0
   10698:	d1f1      	bne.n	1067e <mem_free+0x86>
   1069a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1069e:	f8dd c004 	ldr.w	ip, [sp, #4]
   106a2:	d0ba      	beq.n	1061a <mem_free+0x22>
   106a4:	2301      	movs	r3, #1
   106a6:	4a08      	ldr	r2, [pc, #32]	; (106c8 <mem_free+0xd0>)
   106a8:	ea4f 115e 	mov.w	r1, lr, lsr #5
   106ac:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   106b0:	f00e 0e1f 	and.w	lr, lr, #31
   106b4:	fa03 fe0e 	lsl.w	lr, r3, lr
   106b8:	ea4e 0000 	orr.w	r0, lr, r0
   106bc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   106c0:	e7af      	b.n	10622 <mem_free+0x2a>
   106c2:	4638      	mov	r0, r7
   106c4:	e7d9      	b.n	1067a <mem_free+0x82>
   106c6:	bf00      	nop
   106c8:	20020284 	.word	0x20020284
   106cc:	200202c8 	.word	0x200202c8

000106d0 <mem_alloc.constprop.5>:
   106d0:	2800      	cmp	r0, #0
   106d2:	d050      	beq.n	10776 <mem_alloc.constprop.5+0xa6>
   106d4:	4b6d      	ldr	r3, [pc, #436]	; (1088c <mem_alloc.constprop.5+0x1bc>)
   106d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   106da:	4290      	cmp	r0, r2
   106dc:	d84b      	bhi.n	10776 <mem_alloc.constprop.5+0xa6>
   106de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106e2:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   106e6:	b083      	sub	sp, #12
   106e8:	f1bb 0f00 	cmp.w	fp, #0
   106ec:	d054      	beq.n	10798 <mem_alloc.constprop.5+0xc8>
   106ee:	f10b 32ff 	add.w	r2, fp, #4294967295
   106f2:	4691      	mov	r9, r2
   106f4:	2600      	movs	r6, #0
   106f6:	f04f 0812 	mov.w	r8, #18
   106fa:	4f65      	ldr	r7, [pc, #404]	; (10890 <mem_alloc.constprop.5+0x1c0>)
   106fc:	9201      	str	r2, [sp, #4]
   106fe:	f10b 0e11 	add.w	lr, fp, #17
   10702:	eb06 0209 	add.w	r2, r6, r9
   10706:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1070a:	3201      	adds	r2, #1
   1070c:	0852      	lsrs	r2, r2, #1
   1070e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   10712:	f102 0112 	add.w	r1, r2, #18
   10716:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1071a:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1071e:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   10722:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   10726:	f8dc c004 	ldr.w	ip, [ip, #4]
   1072a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1072e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   10732:	f8da a010 	ldr.w	sl, [sl, #16]
   10736:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1073a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1073e:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   10742:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   10746:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1074a:	6849      	ldr	r1, [r1, #4]
   1074c:	692d      	ldr	r5, [r5, #16]
   1074e:	6924      	ldr	r4, [r4, #16]
   10750:	f8dc c004 	ldr.w	ip, [ip, #4]
   10754:	4550      	cmp	r0, sl
   10756:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1075a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1075e:	d915      	bls.n	1078c <mem_alloc.constprop.5+0xbc>
   10760:	4288      	cmp	r0, r1
   10762:	d211      	bcs.n	10788 <mem_alloc.constprop.5+0xb8>
   10764:	42a8      	cmp	r0, r5
   10766:	d908      	bls.n	1077a <mem_alloc.constprop.5+0xaa>
   10768:	1c56      	adds	r6, r2, #1
   1076a:	45b1      	cmp	r9, r6
   1076c:	f0c0 8087 	bcc.w	1087e <mem_alloc.constprop.5+0x1ae>
   10770:	f102 0813 	add.w	r8, r2, #19
   10774:	e7c5      	b.n	10702 <mem_alloc.constprop.5+0x32>
   10776:	2000      	movs	r0, #0
   10778:	4770      	bx	lr
   1077a:	f102 39ff 	add.w	r9, r2, #4294967295
   1077e:	454e      	cmp	r6, r9
   10780:	d87d      	bhi.n	1087e <mem_alloc.constprop.5+0x1ae>
   10782:	f102 0e11 	add.w	lr, r2, #17
   10786:	e7bc      	b.n	10702 <mem_alloc.constprop.5+0x32>
   10788:	f109 0601 	add.w	r6, r9, #1
   1078c:	45b3      	cmp	fp, r6
   1078e:	d007      	beq.n	107a0 <mem_alloc.constprop.5+0xd0>
   10790:	2e10      	cmp	r6, #16
   10792:	d001      	beq.n	10798 <mem_alloc.constprop.5+0xc8>
   10794:	45b3      	cmp	fp, r6
   10796:	d808      	bhi.n	107aa <mem_alloc.constprop.5+0xda>
   10798:	2000      	movs	r0, #0
   1079a:	b003      	add	sp, #12
   1079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107a0:	9a01      	ldr	r2, [sp, #4]
   107a2:	2a10      	cmp	r2, #16
   107a4:	bf18      	it	ne
   107a6:	4616      	movne	r6, r2
   107a8:	d0f6      	beq.n	10798 <mem_alloc.constprop.5+0xc8>
   107aa:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 10894 <mem_alloc.constprop.5+0x1c4>
   107ae:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   107b2:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   107b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   107ba:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   107be:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   107c2:	f8d2 e004 	ldr.w	lr, [r2, #4]
   107c6:	691d      	ldr	r5, [r3, #16]
   107c8:	2c00      	cmp	r4, #0
   107ca:	d056      	beq.n	1087a <mem_alloc.constprop.5+0x1aa>
   107cc:	462a      	mov	r2, r5
   107ce:	4670      	mov	r0, lr
   107d0:	00a4      	lsls	r4, r4, #2
   107d2:	eb05 0904 	add.w	r9, r5, r4
   107d6:	8851      	ldrh	r1, [r2, #2]
   107d8:	3204      	adds	r2, #4
   107da:	4591      	cmp	r9, r2
   107dc:	4408      	add	r0, r1
   107de:	d1fa      	bne.n	107d6 <mem_alloc.constprop.5+0x106>
   107e0:	1929      	adds	r1, r5, r4
   107e2:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   107e6:	4482      	add	sl, r0
   107e8:	4582      	cmp	sl, r0
   107ea:	d918      	bls.n	1081e <mem_alloc.constprop.5+0x14e>
   107ec:	0941      	lsrs	r1, r0, #5
   107ee:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   107f2:	f000 041f 	and.w	r4, r0, #31
   107f6:	fa22 f904 	lsr.w	r9, r2, r4
   107fa:	f019 0f01 	tst.w	r9, #1
   107fe:	d007      	beq.n	10810 <mem_alloc.constprop.5+0x140>
   10800:	e013      	b.n	1082a <mem_alloc.constprop.5+0x15a>
   10802:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   10806:	fa22 f904 	lsr.w	r9, r2, r4
   1080a:	f019 0f01 	tst.w	r9, #1
   1080e:	d10c      	bne.n	1082a <mem_alloc.constprop.5+0x15a>
   10810:	3001      	adds	r0, #1
   10812:	4582      	cmp	sl, r0
   10814:	ea4f 1150 	mov.w	r1, r0, lsr #5
   10818:	f000 041f 	and.w	r4, r0, #31
   1081c:	d1f1      	bne.n	10802 <mem_alloc.constprop.5+0x132>
   1081e:	3601      	adds	r6, #1
   10820:	455e      	cmp	r6, fp
   10822:	f108 0808 	add.w	r8, r8, #8
   10826:	d3c4      	bcc.n	107b2 <mem_alloc.constprop.5+0xe2>
   10828:	e7b6      	b.n	10798 <mem_alloc.constprop.5+0xc8>
   1082a:	2601      	movs	r6, #1
   1082c:	fa06 f404 	lsl.w	r4, r6, r4
   10830:	899e      	ldrh	r6, [r3, #12]
   10832:	ea22 0204 	bic.w	r2, r2, r4
   10836:	eba0 000e 	sub.w	r0, r0, lr
   1083a:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1083e:	685c      	ldr	r4, [r3, #4]
   10840:	2e00      	cmp	r6, #0
   10842:	d0a9      	beq.n	10798 <mem_alloc.constprop.5+0xc8>
   10844:	886a      	ldrh	r2, [r5, #2]
   10846:	4282      	cmp	r2, r0
   10848:	d811      	bhi.n	1086e <mem_alloc.constprop.5+0x19e>
   1084a:	2100      	movs	r1, #0
   1084c:	1d2b      	adds	r3, r5, #4
   1084e:	e003      	b.n	10858 <mem_alloc.constprop.5+0x188>
   10850:	885a      	ldrh	r2, [r3, #2]
   10852:	3304      	adds	r3, #4
   10854:	4282      	cmp	r2, r0
   10856:	d80a      	bhi.n	1086e <mem_alloc.constprop.5+0x19e>
   10858:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1085c:	3101      	adds	r1, #1
   1085e:	428e      	cmp	r6, r1
   10860:	fb02 4405 	mla	r4, r2, r5, r4
   10864:	eba0 0002 	sub.w	r0, r0, r2
   10868:	461d      	mov	r5, r3
   1086a:	d1f1      	bne.n	10850 <mem_alloc.constprop.5+0x180>
   1086c:	e794      	b.n	10798 <mem_alloc.constprop.5+0xc8>
   1086e:	882b      	ldrh	r3, [r5, #0]
   10870:	fb00 4003 	mla	r0, r0, r3, r4
   10874:	b003      	add	sp, #12
   10876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1087a:	4670      	mov	r0, lr
   1087c:	e7b0      	b.n	107e0 <mem_alloc.constprop.5+0x110>
   1087e:	f1bb 0f10 	cmp.w	fp, #16
   10882:	bf08      	it	eq
   10884:	260f      	moveq	r6, #15
   10886:	d090      	beq.n	107aa <mem_alloc.constprop.5+0xda>
   10888:	e786      	b.n	10798 <mem_alloc.constprop.5+0xc8>
   1088a:	bf00      	nop
   1088c:	20020304 	.word	0x20020304
   10890:	200202c8 	.word	0x200202c8
   10894:	20020284 	.word	0x20020284

00010898 <mem_alloc.constprop.4>:
   10898:	2800      	cmp	r0, #0
   1089a:	d04c      	beq.n	10936 <mem_alloc.constprop.4+0x9e>
   1089c:	4b6b      	ldr	r3, [pc, #428]	; (10a4c <mem_alloc.constprop.4+0x1b4>)
   1089e:	681a      	ldr	r2, [r3, #0]
   108a0:	4290      	cmp	r0, r2
   108a2:	d848      	bhi.n	10936 <mem_alloc.constprop.4+0x9e>
   108a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108a8:	685f      	ldr	r7, [r3, #4]
   108aa:	b083      	sub	sp, #12
   108ac:	9700      	str	r7, [sp, #0]
   108ae:	2f00      	cmp	r7, #0
   108b0:	d051      	beq.n	10956 <mem_alloc.constprop.4+0xbe>
   108b2:	1e7a      	subs	r2, r7, #1
   108b4:	4696      	mov	lr, r2
   108b6:	2100      	movs	r1, #0
   108b8:	f04f 0c01 	mov.w	ip, #1
   108bc:	4c64      	ldr	r4, [pc, #400]	; (10a50 <mem_alloc.constprop.4+0x1b8>)
   108be:	9201      	str	r2, [sp, #4]
   108c0:	eb01 020e 	add.w	r2, r1, lr
   108c4:	3201      	adds	r2, #1
   108c6:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   108ca:	0852      	lsrs	r2, r2, #1
   108cc:	f102 0801 	add.w	r8, r2, #1
   108d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   108d4:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   108d8:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   108dc:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   108e0:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   108e4:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   108e8:	f8d9 9004 	ldr.w	r9, [r9, #4]
   108ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   108f0:	f8da a010 	ldr.w	sl, [sl, #16]
   108f4:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   108f8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   108fc:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   10900:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   10904:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   10908:	6936      	ldr	r6, [r6, #16]
   1090a:	f8db b004 	ldr.w	fp, [fp, #4]
   1090e:	692d      	ldr	r5, [r5, #16]
   10910:	f8d9 9004 	ldr.w	r9, [r9, #4]
   10914:	4550      	cmp	r0, sl
   10916:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1091a:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1091e:	d913      	bls.n	10948 <mem_alloc.constprop.4+0xb0>
   10920:	42a8      	cmp	r0, r5
   10922:	d210      	bcs.n	10946 <mem_alloc.constprop.4+0xae>
   10924:	42b0      	cmp	r0, r6
   10926:	d908      	bls.n	1093a <mem_alloc.constprop.4+0xa2>
   10928:	45c6      	cmp	lr, r8
   1092a:	4641      	mov	r1, r8
   1092c:	f0c0 8087 	bcc.w	10a3e <mem_alloc.constprop.4+0x1a6>
   10930:	f108 0c01 	add.w	ip, r8, #1
   10934:	e7c4      	b.n	108c0 <mem_alloc.constprop.4+0x28>
   10936:	2000      	movs	r0, #0
   10938:	4770      	bx	lr
   1093a:	f102 3eff 	add.w	lr, r2, #4294967295
   1093e:	4571      	cmp	r1, lr
   10940:	d87d      	bhi.n	10a3e <mem_alloc.constprop.4+0x1a6>
   10942:	4617      	mov	r7, r2
   10944:	e7bc      	b.n	108c0 <mem_alloc.constprop.4+0x28>
   10946:	4639      	mov	r1, r7
   10948:	9a00      	ldr	r2, [sp, #0]
   1094a:	428a      	cmp	r2, r1
   1094c:	d007      	beq.n	1095e <mem_alloc.constprop.4+0xc6>
   1094e:	2910      	cmp	r1, #16
   10950:	d001      	beq.n	10956 <mem_alloc.constprop.4+0xbe>
   10952:	428a      	cmp	r2, r1
   10954:	d808      	bhi.n	10968 <mem_alloc.constprop.4+0xd0>
   10956:	2000      	movs	r0, #0
   10958:	b003      	add	sp, #12
   1095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1095e:	9a01      	ldr	r2, [sp, #4]
   10960:	2a10      	cmp	r2, #16
   10962:	bf18      	it	ne
   10964:	4611      	movne	r1, r2
   10966:	d0f6      	beq.n	10956 <mem_alloc.constprop.4+0xbe>
   10968:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 10a54 <mem_alloc.constprop.4+0x1bc>
   1096c:	f8dd 9000 	ldr.w	r9, [sp]
   10970:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   10974:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   10978:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1097c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   10980:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   10984:	f8d2 e004 	ldr.w	lr, [r2, #4]
   10988:	691f      	ldr	r7, [r3, #16]
   1098a:	2e00      	cmp	r6, #0
   1098c:	d055      	beq.n	10a3a <mem_alloc.constprop.4+0x1a2>
   1098e:	463a      	mov	r2, r7
   10990:	4670      	mov	r0, lr
   10992:	00b6      	lsls	r6, r6, #2
   10994:	eb07 0a06 	add.w	sl, r7, r6
   10998:	8855      	ldrh	r5, [r2, #2]
   1099a:	3204      	adds	r2, #4
   1099c:	4592      	cmp	sl, r2
   1099e:	4428      	add	r0, r5
   109a0:	d1fa      	bne.n	10998 <mem_alloc.constprop.4+0x100>
   109a2:	19bd      	adds	r5, r7, r6
   109a4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   109a8:	4483      	add	fp, r0
   109aa:	4583      	cmp	fp, r0
   109ac:	d918      	bls.n	109e0 <mem_alloc.constprop.4+0x148>
   109ae:	0945      	lsrs	r5, r0, #5
   109b0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   109b4:	f000 061f 	and.w	r6, r0, #31
   109b8:	fa22 fa06 	lsr.w	sl, r2, r6
   109bc:	f01a 0f01 	tst.w	sl, #1
   109c0:	d007      	beq.n	109d2 <mem_alloc.constprop.4+0x13a>
   109c2:	e013      	b.n	109ec <mem_alloc.constprop.4+0x154>
   109c4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   109c8:	fa22 fa06 	lsr.w	sl, r2, r6
   109cc:	f01a 0f01 	tst.w	sl, #1
   109d0:	d10c      	bne.n	109ec <mem_alloc.constprop.4+0x154>
   109d2:	3001      	adds	r0, #1
   109d4:	4583      	cmp	fp, r0
   109d6:	ea4f 1550 	mov.w	r5, r0, lsr #5
   109da:	f000 061f 	and.w	r6, r0, #31
   109de:	d1f1      	bne.n	109c4 <mem_alloc.constprop.4+0x12c>
   109e0:	3101      	adds	r1, #1
   109e2:	4549      	cmp	r1, r9
   109e4:	f108 0808 	add.w	r8, r8, #8
   109e8:	d3c4      	bcc.n	10974 <mem_alloc.constprop.4+0xdc>
   109ea:	e7b4      	b.n	10956 <mem_alloc.constprop.4+0xbe>
   109ec:	2101      	movs	r1, #1
   109ee:	40b1      	lsls	r1, r6
   109f0:	899e      	ldrh	r6, [r3, #12]
   109f2:	ea22 0201 	bic.w	r2, r2, r1
   109f6:	eba0 000e 	sub.w	r0, r0, lr
   109fa:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   109fe:	685c      	ldr	r4, [r3, #4]
   10a00:	2e00      	cmp	r6, #0
   10a02:	d0a8      	beq.n	10956 <mem_alloc.constprop.4+0xbe>
   10a04:	887a      	ldrh	r2, [r7, #2]
   10a06:	4282      	cmp	r2, r0
   10a08:	d811      	bhi.n	10a2e <mem_alloc.constprop.4+0x196>
   10a0a:	2100      	movs	r1, #0
   10a0c:	1d3b      	adds	r3, r7, #4
   10a0e:	e003      	b.n	10a18 <mem_alloc.constprop.4+0x180>
   10a10:	885a      	ldrh	r2, [r3, #2]
   10a12:	3304      	adds	r3, #4
   10a14:	4282      	cmp	r2, r0
   10a16:	d80a      	bhi.n	10a2e <mem_alloc.constprop.4+0x196>
   10a18:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   10a1c:	3101      	adds	r1, #1
   10a1e:	428e      	cmp	r6, r1
   10a20:	eba0 0002 	sub.w	r0, r0, r2
   10a24:	fb02 4405 	mla	r4, r2, r5, r4
   10a28:	461f      	mov	r7, r3
   10a2a:	d1f1      	bne.n	10a10 <mem_alloc.constprop.4+0x178>
   10a2c:	e793      	b.n	10956 <mem_alloc.constprop.4+0xbe>
   10a2e:	883b      	ldrh	r3, [r7, #0]
   10a30:	fb00 4003 	mla	r0, r0, r3, r4
   10a34:	b003      	add	sp, #12
   10a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a3a:	4670      	mov	r0, lr
   10a3c:	e7b1      	b.n	109a2 <mem_alloc.constprop.4+0x10a>
   10a3e:	9a00      	ldr	r2, [sp, #0]
   10a40:	2a10      	cmp	r2, #16
   10a42:	bf08      	it	eq
   10a44:	210f      	moveq	r1, #15
   10a46:	d08f      	beq.n	10968 <mem_alloc.constprop.4+0xd0>
   10a48:	e785      	b.n	10956 <mem_alloc.constprop.4+0xbe>
   10a4a:	bf00      	nop
   10a4c:	20020304 	.word	0x20020304
   10a50:	200202c8 	.word	0x200202c8
   10a54:	20020284 	.word	0x20020284

00010a58 <nrf_mem_init>:
   10a58:	b570      	push	{r4, r5, r6, lr}
   10a5a:	2200      	movs	r2, #0
   10a5c:	2501      	movs	r5, #1
   10a5e:	4833      	ldr	r0, [pc, #204]	; (10b2c <nrf_mem_init+0xd4>)
   10a60:	0951      	lsrs	r1, r2, #5
   10a62:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   10a66:	f002 031f 	and.w	r3, r2, #31
   10a6a:	fa05 f303 	lsl.w	r3, r5, r3
   10a6e:	3201      	adds	r2, #1
   10a70:	4323      	orrs	r3, r4
   10a72:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10a76:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   10a7a:	d1f1      	bne.n	10a60 <nrf_mem_init+0x8>
   10a7c:	2400      	movs	r4, #0
   10a7e:	4b2c      	ldr	r3, [pc, #176]	; (10b30 <nrf_mem_init+0xd8>)
   10a80:	4621      	mov	r1, r4
   10a82:	223c      	movs	r2, #60	; 0x3c
   10a84:	482b      	ldr	r0, [pc, #172]	; (10b34 <nrf_mem_init+0xdc>)
   10a86:	601c      	str	r4, [r3, #0]
   10a88:	f00b fcfa 	bl	1c480 <memset>
   10a8c:	2110      	movs	r1, #16
   10a8e:	2205      	movs	r2, #5
   10a90:	4b29      	ldr	r3, [pc, #164]	; (10b38 <nrf_mem_init+0xe0>)
   10a92:	4e2a      	ldr	r6, [pc, #168]	; (10b3c <nrf_mem_init+0xe4>)
   10a94:	e9c3 4400 	strd	r4, r4, [r3]
   10a98:	60d9      	str	r1, [r3, #12]
   10a9a:	6159      	str	r1, [r3, #20]
   10a9c:	61d9      	str	r1, [r3, #28]
   10a9e:	6259      	str	r1, [r3, #36]	; 0x24
   10aa0:	62d9      	str	r1, [r3, #44]	; 0x2c
   10aa2:	6359      	str	r1, [r3, #52]	; 0x34
   10aa4:	63d9      	str	r1, [r3, #60]	; 0x3c
   10aa6:	6459      	str	r1, [r3, #68]	; 0x44
   10aa8:	64d9      	str	r1, [r3, #76]	; 0x4c
   10aaa:	6559      	str	r1, [r3, #84]	; 0x54
   10aac:	65d9      	str	r1, [r3, #92]	; 0x5c
   10aae:	6659      	str	r1, [r3, #100]	; 0x64
   10ab0:	66d9      	str	r1, [r3, #108]	; 0x6c
   10ab2:	6759      	str	r1, [r3, #116]	; 0x74
   10ab4:	67d9      	str	r1, [r3, #124]	; 0x7c
   10ab6:	609a      	str	r2, [r3, #8]
   10ab8:	611a      	str	r2, [r3, #16]
   10aba:	619a      	str	r2, [r3, #24]
   10abc:	621a      	str	r2, [r3, #32]
   10abe:	629a      	str	r2, [r3, #40]	; 0x28
   10ac0:	631a      	str	r2, [r3, #48]	; 0x30
   10ac2:	639a      	str	r2, [r3, #56]	; 0x38
   10ac4:	641a      	str	r2, [r3, #64]	; 0x40
   10ac6:	649a      	str	r2, [r3, #72]	; 0x48
   10ac8:	651a      	str	r2, [r3, #80]	; 0x50
   10aca:	659a      	str	r2, [r3, #88]	; 0x58
   10acc:	661a      	str	r2, [r3, #96]	; 0x60
   10ace:	669a      	str	r2, [r3, #104]	; 0x68
   10ad0:	671a      	str	r2, [r3, #112]	; 0x70
   10ad2:	679a      	str	r2, [r3, #120]	; 0x78
   10ad4:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   10ad8:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   10adc:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   10ae0:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   10ae4:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   10ae8:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   10aec:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   10af0:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   10af4:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   10af8:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   10afc:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   10b00:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   10b04:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   10b08:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   10b0c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   10b10:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   10b14:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   10b18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   10b1c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   10b20:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   10b24:	4620      	mov	r0, r4
   10b26:	7035      	strb	r5, [r6, #0]
   10b28:	bd70      	pop	{r4, r5, r6, pc}
   10b2a:	bf00      	nop
   10b2c:	20020284 	.word	0x20020284
   10b30:	200202c4 	.word	0x200202c4
   10b34:	200202c8 	.word	0x200202c8
   10b38:	20020304 	.word	0x20020304
   10b3c:	2002175b 	.word	0x2002175b

00010b40 <nrf_mem_register>:
   10b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b44:	4b87      	ldr	r3, [pc, #540]	; (10d64 <nrf_mem_register+0x224>)
   10b46:	b087      	sub	sp, #28
   10b48:	781b      	ldrb	r3, [r3, #0]
   10b4a:	2b00      	cmp	r3, #0
   10b4c:	f000 808c 	beq.w	10c68 <nrf_mem_register+0x128>
   10b50:	b328      	cbz	r0, 10b9e <nrf_mem_register+0x5e>
   10b52:	b321      	cbz	r1, 10b9e <nrf_mem_register+0x5e>
   10b54:	780b      	ldrb	r3, [r1, #0]
   10b56:	f8df 8218 	ldr.w	r8, [pc, #536]	; 10d70 <nrf_mem_register+0x230>
   10b5a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   10b5e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   10b62:	685b      	ldr	r3, [r3, #4]
   10b64:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   10b68:	4463      	add	r3, ip
   10b6a:	2b10      	cmp	r3, #16
   10b6c:	d811      	bhi.n	10b92 <nrf_mem_register+0x52>
   10b6e:	f04f 0a00 	mov.w	sl, #0
   10b72:	4689      	mov	r9, r1
   10b74:	4b7c      	ldr	r3, [pc, #496]	; (10d68 <nrf_mem_register+0x228>)
   10b76:	4f7d      	ldr	r7, [pc, #500]	; (10d6c <nrf_mem_register+0x22c>)
   10b78:	681b      	ldr	r3, [r3, #0]
   10b7a:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   10b7e:	9300      	str	r3, [sp, #0]
   10b80:	68b9      	ldr	r1, [r7, #8]
   10b82:	b191      	cbz	r1, 10baa <nrf_mem_register+0x6a>
   10b84:	f10a 0a01 	add.w	sl, sl, #1
   10b88:	f1ba 0f05 	cmp.w	sl, #5
   10b8c:	f107 070c 	add.w	r7, r7, #12
   10b90:	d1f6      	bne.n	10b80 <nrf_mem_register+0x40>
   10b92:	f248 1b07 	movw	fp, #33031	; 0x8107
   10b96:	4658      	mov	r0, fp
   10b98:	b007      	add	sp, #28
   10b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b9e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   10ba2:	4658      	mov	r0, fp
   10ba4:	b007      	add	sp, #28
   10ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10baa:	f1bc 0f00 	cmp.w	ip, #0
   10bae:	d061      	beq.n	10c74 <nrf_mem_register+0x134>
   10bb0:	460d      	mov	r5, r1
   10bb2:	460c      	mov	r4, r1
   10bb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   10bb8:	eb0e 0b03 	add.w	fp, lr, r3
   10bbc:	885a      	ldrh	r2, [r3, #2]
   10bbe:	f833 6b04 	ldrh.w	r6, [r3], #4
   10bc2:	4415      	add	r5, r2
   10bc4:	459b      	cmp	fp, r3
   10bc6:	fb02 4406 	mla	r4, r2, r6, r4
   10bca:	d1f7      	bne.n	10bbc <nrf_mem_register+0x7c>
   10bcc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10bd0:	42a3      	cmp	r3, r4
   10bd2:	d3d7      	bcc.n	10b84 <nrf_mem_register+0x44>
   10bd4:	9b00      	ldr	r3, [sp, #0]
   10bd6:	442b      	add	r3, r5
   10bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10bdc:	d2d2      	bcs.n	10b84 <nrf_mem_register+0x44>
   10bde:	4c63      	ldr	r4, [pc, #396]	; (10d6c <nrf_mem_register+0x22c>)
   10be0:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   10be4:	0092      	lsls	r2, r2, #2
   10be6:	f8c0 a000 	str.w	sl, [r0]
   10bea:	18a0      	adds	r0, r4, r2
   10bec:	f844 9002 	str.w	r9, [r4, r2]
   10bf0:	9a00      	ldr	r2, [sp, #0]
   10bf2:	468b      	mov	fp, r1
   10bf4:	e9c0 2501 	strd	r2, r5, [r0, #4]
   10bf8:	f899 2001 	ldrb.w	r2, [r9, #1]
   10bfc:	485a      	ldr	r0, [pc, #360]	; (10d68 <nrf_mem_register+0x228>)
   10bfe:	2a01      	cmp	r2, #1
   10c00:	6003      	str	r3, [r0, #0]
   10c02:	d0c8      	beq.n	10b96 <nrf_mem_register+0x56>
   10c04:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   10c08:	2b00      	cmp	r3, #0
   10c0a:	d0c4      	beq.n	10b96 <nrf_mem_register+0x56>
   10c0c:	2500      	movs	r5, #0
   10c0e:	f8cd 9004 	str.w	r9, [sp, #4]
   10c12:	f8cd a00c 	str.w	sl, [sp, #12]
   10c16:	f8cd b014 	str.w	fp, [sp, #20]
   10c1a:	9b01      	ldr	r3, [sp, #4]
   10c1c:	781f      	ldrb	r7, [r3, #0]
   10c1e:	691a      	ldr	r2, [r3, #16]
   10c20:	013b      	lsls	r3, r7, #4
   10c22:	eb03 0907 	add.w	r9, r3, r7
   10c26:	9300      	str	r3, [sp, #0]
   10c28:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   10c2c:	6859      	ldr	r1, [r3, #4]
   10c2e:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   10c32:	9102      	str	r1, [sp, #8]
   10c34:	bb39      	cbnz	r1, 10c86 <nrf_mem_register+0x146>
   10c36:	9a03      	ldr	r2, [sp, #12]
   10c38:	60dd      	str	r5, [r3, #12]
   10c3a:	609a      	str	r2, [r3, #8]
   10c3c:	9b00      	ldr	r3, [sp, #0]
   10c3e:	443b      	add	r3, r7
   10c40:	461f      	mov	r7, r3
   10c42:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   10c46:	684b      	ldr	r3, [r1, #4]
   10c48:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   10c4c:	3301      	adds	r3, #1
   10c4e:	4294      	cmp	r4, r2
   10c50:	604b      	str	r3, [r1, #4]
   10c52:	d912      	bls.n	10c7a <nrf_mem_register+0x13a>
   10c54:	9b01      	ldr	r3, [sp, #4]
   10c56:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   10c5a:	899b      	ldrh	r3, [r3, #12]
   10c5c:	3501      	adds	r5, #1
   10c5e:	429d      	cmp	r5, r3
   10c60:	d3db      	bcc.n	10c1a <nrf_mem_register+0xda>
   10c62:	f8dd b014 	ldr.w	fp, [sp, #20]
   10c66:	e796      	b.n	10b96 <nrf_mem_register+0x56>
   10c68:	f248 1b08 	movw	fp, #33032	; 0x8108
   10c6c:	4658      	mov	r0, fp
   10c6e:	b007      	add	sp, #28
   10c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c74:	9b00      	ldr	r3, [sp, #0]
   10c76:	4665      	mov	r5, ip
   10c78:	e7ae      	b.n	10bd8 <nrf_mem_register+0x98>
   10c7a:	9b01      	ldr	r3, [sp, #4]
   10c7c:	3501      	adds	r5, #1
   10c7e:	899b      	ldrh	r3, [r3, #12]
   10c80:	42ab      	cmp	r3, r5
   10c82:	d8ca      	bhi.n	10c1a <nrf_mem_register+0xda>
   10c84:	e7ed      	b.n	10c62 <nrf_mem_register+0x122>
   10c86:	2600      	movs	r6, #0
   10c88:	f101 3aff 	add.w	sl, r1, #4294967295
   10c8c:	9504      	str	r5, [sp, #16]
   10c8e:	eb06 000a 	add.w	r0, r6, sl
   10c92:	eb09 0206 	add.w	r2, r9, r6
   10c96:	3201      	adds	r2, #1
   10c98:	3001      	adds	r0, #1
   10c9a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   10c9e:	0840      	lsrs	r0, r0, #1
   10ca0:	4d32      	ldr	r5, [pc, #200]	; (10d6c <nrf_mem_register+0x22c>)
   10ca2:	eb09 0100 	add.w	r1, r9, r0
   10ca6:	eb09 030a 	add.w	r3, r9, sl
   10caa:	3101      	adds	r1, #1
   10cac:	3301      	adds	r3, #1
   10cae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   10cb2:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   10cb6:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   10cba:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   10cbe:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   10cc2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   10cc6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   10cca:	f8db b010 	ldr.w	fp, [fp, #16]
   10cce:	6852      	ldr	r2, [r2, #4]
   10cd0:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   10cd4:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   10cd8:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   10cdc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   10ce0:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   10ce4:	f8de e010 	ldr.w	lr, [lr, #16]
   10ce8:	6849      	ldr	r1, [r1, #4]
   10cea:	f8dc c010 	ldr.w	ip, [ip, #16]
   10cee:	685b      	ldr	r3, [r3, #4]
   10cf0:	4294      	cmp	r4, r2
   10cf2:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   10cf6:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   10cfa:	d92d      	bls.n	10d58 <nrf_mem_register+0x218>
   10cfc:	429c      	cmp	r4, r3
   10cfe:	d22d      	bcs.n	10d5c <nrf_mem_register+0x21c>
   10d00:	428c      	cmp	r4, r1
   10d02:	d924      	bls.n	10d4e <nrf_mem_register+0x20e>
   10d04:	1c46      	adds	r6, r0, #1
   10d06:	45b2      	cmp	sl, r6
   10d08:	d2c1      	bcs.n	10c8e <nrf_mem_register+0x14e>
   10d0a:	2610      	movs	r6, #16
   10d0c:	9d04      	ldr	r5, [sp, #16]
   10d0e:	9a02      	ldr	r2, [sp, #8]
   10d10:	42b2      	cmp	r2, r6
   10d12:	d911      	bls.n	10d38 <nrf_mem_register+0x1f8>
   10d14:	9b00      	ldr	r3, [sp, #0]
   10d16:	443b      	add	r3, r7
   10d18:	441a      	add	r2, r3
   10d1a:	4433      	add	r3, r6
   10d1c:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   10d20:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   10d24:	2208      	movs	r2, #8
   10d26:	4651      	mov	r1, sl
   10d28:	eb0a 0002 	add.w	r0, sl, r2
   10d2c:	f1aa 0a08 	sub.w	sl, sl, #8
   10d30:	f00b fb99 	bl	1c466 <memcpy>
   10d34:	45d1      	cmp	r9, sl
   10d36:	d1f5      	bne.n	10d24 <nrf_mem_register+0x1e4>
   10d38:	9b00      	ldr	r3, [sp, #0]
   10d3a:	9903      	ldr	r1, [sp, #12]
   10d3c:	443b      	add	r3, r7
   10d3e:	4433      	add	r3, r6
   10d40:	3301      	adds	r3, #1
   10d42:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   10d46:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   10d4a:	6055      	str	r5, [r2, #4]
   10d4c:	e776      	b.n	10c3c <nrf_mem_register+0xfc>
   10d4e:	f100 3aff 	add.w	sl, r0, #4294967295
   10d52:	4556      	cmp	r6, sl
   10d54:	d99b      	bls.n	10c8e <nrf_mem_register+0x14e>
   10d56:	e7d8      	b.n	10d0a <nrf_mem_register+0x1ca>
   10d58:	9d04      	ldr	r5, [sp, #16]
   10d5a:	e7d8      	b.n	10d0e <nrf_mem_register+0x1ce>
   10d5c:	9d04      	ldr	r5, [sp, #16]
   10d5e:	f10a 0601 	add.w	r6, sl, #1
   10d62:	e7d4      	b.n	10d0e <nrf_mem_register+0x1ce>
   10d64:	2002175b 	.word	0x2002175b
   10d68:	200202c4 	.word	0x200202c4
   10d6c:	200202c8 	.word	0x200202c8
   10d70:	20020304 	.word	0x20020304

00010d74 <nrf_malloc>:
   10d74:	4b03      	ldr	r3, [pc, #12]	; (10d84 <nrf_malloc+0x10>)
   10d76:	781b      	ldrb	r3, [r3, #0]
   10d78:	b10b      	cbz	r3, 10d7e <nrf_malloc+0xa>
   10d7a:	f7ff bd8d 	b.w	10898 <mem_alloc.constprop.4>
   10d7e:	4618      	mov	r0, r3
   10d80:	4770      	bx	lr
   10d82:	bf00      	nop
   10d84:	2002175b 	.word	0x2002175b

00010d88 <nrf_free>:
   10d88:	4b04      	ldr	r3, [pc, #16]	; (10d9c <nrf_free+0x14>)
   10d8a:	781b      	ldrb	r3, [r3, #0]
   10d8c:	b123      	cbz	r3, 10d98 <nrf_free+0x10>
   10d8e:	b118      	cbz	r0, 10d98 <nrf_free+0x10>
   10d90:	4601      	mov	r1, r0
   10d92:	2000      	movs	r0, #0
   10d94:	f7ff bc30 	b.w	105f8 <mem_free>
   10d98:	4770      	bx	lr
   10d9a:	bf00      	nop
   10d9c:	2002175b 	.word	0x2002175b

00010da0 <nrf_shared_malloc>:
   10da0:	4b03      	ldr	r3, [pc, #12]	; (10db0 <nrf_shared_malloc+0x10>)
   10da2:	781b      	ldrb	r3, [r3, #0]
   10da4:	b10b      	cbz	r3, 10daa <nrf_shared_malloc+0xa>
   10da6:	f7ff bc93 	b.w	106d0 <mem_alloc.constprop.5>
   10daa:	4618      	mov	r0, r3
   10dac:	4770      	bx	lr
   10dae:	bf00      	nop
   10db0:	2002175b 	.word	0x2002175b

00010db4 <nrf_shared_free>:
   10db4:	4b04      	ldr	r3, [pc, #16]	; (10dc8 <nrf_shared_free+0x14>)
   10db6:	781b      	ldrb	r3, [r3, #0]
   10db8:	b123      	cbz	r3, 10dc4 <nrf_shared_free+0x10>
   10dba:	b118      	cbz	r0, 10dc4 <nrf_shared_free+0x10>
   10dbc:	4601      	mov	r1, r0
   10dbe:	2001      	movs	r0, #1
   10dc0:	f7ff bc1a 	b.w	105f8 <mem_free>
   10dc4:	4770      	bx	lr
   10dc6:	bf00      	nop
   10dc8:	2002175b 	.word	0x2002175b

00010dcc <ip_client_event_handler>:
   10dcc:	f850 1b08 	ldr.w	r1, [r0], #8
   10dd0:	0c09      	lsrs	r1, r1, #16
   10dd2:	f004 bd33 	b.w	1583c <rpc_ip_event_handler>
   10dd6:	bf00      	nop

00010dd8 <rpc_ip_client_init>:
   10dd8:	4801      	ldr	r0, [pc, #4]	; (10de0 <rpc_ip_client_init+0x8>)
   10dda:	f005 ba23 	b.w	16224 <rpc_client_register>
   10dde:	bf00      	nop
   10de0:	0001d5ec 	.word	0x0001d5ec

00010de4 <rpc_ip_client_request_alloc>:
   10de4:	2300      	movs	r3, #0
   10de6:	b510      	push	{r4, lr}
   10de8:	b082      	sub	sp, #8
   10dea:	9301      	str	r3, [sp, #4]
   10dec:	b158      	cbz	r0, 10e06 <rpc_ip_client_request_alloc+0x22>
   10dee:	4604      	mov	r4, r0
   10df0:	aa01      	add	r2, sp, #4
   10df2:	2004      	movs	r0, #4
   10df4:	f005 fc4e 	bl	16694 <rpc_message_alloc>
   10df8:	b918      	cbnz	r0, 10e02 <rpc_ip_client_request_alloc+0x1e>
   10dfa:	9b01      	ldr	r3, [sp, #4]
   10dfc:	b10b      	cbz	r3, 10e02 <rpc_ip_client_request_alloc+0x1e>
   10dfe:	3308      	adds	r3, #8
   10e00:	6023      	str	r3, [r4, #0]
   10e02:	b002      	add	sp, #8
   10e04:	bd10      	pop	{r4, pc}
   10e06:	2007      	movs	r0, #7
   10e08:	b002      	add	sp, #8
   10e0a:	bd10      	pop	{r4, pc}

00010e0c <rpc_ip_client_request_send>:
   10e0c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   10e10:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   10e14:	d10b      	bne.n	10e2e <rpc_ip_client_request_send+0x22>
   10e16:	b160      	cbz	r0, 10e32 <rpc_ip_client_request_send+0x26>
   10e18:	4603      	mov	r3, r0
   10e1a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   10e1e:	2004      	movs	r0, #4
   10e20:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10e24:	f843 1d08 	str.w	r1, [r3, #-8]!
   10e28:	4619      	mov	r1, r3
   10e2a:	f005 bc1b 	b.w	16664 <rpc_message_send>
   10e2e:	200f      	movs	r0, #15
   10e30:	4770      	bx	lr
   10e32:	2007      	movs	r0, #7
   10e34:	4770      	bx	lr
   10e36:	bf00      	nop

00010e38 <rpc_ip_client_message_free>:
   10e38:	b120      	cbz	r0, 10e44 <rpc_ip_client_message_free+0xc>
   10e3a:	f1a0 0108 	sub.w	r1, r0, #8
   10e3e:	2004      	movs	r0, #4
   10e40:	f005 bc5a 	b.w	166f8 <rpc_message_free>
   10e44:	2007      	movs	r0, #7
   10e46:	4770      	bx	lr

00010e48 <rpc_ip_client_data_free>:
   10e48:	b118      	cbz	r0, 10e52 <rpc_ip_client_data_free+0xa>
   10e4a:	4601      	mov	r1, r0
   10e4c:	2004      	movs	r0, #4
   10e4e:	f005 bd65 	b.w	1691c <rpc_message_data_free>
   10e52:	2007      	movs	r0, #7
   10e54:	4770      	bx	lr
   10e56:	bf00      	nop

00010e58 <secure_client_socket>:
   10e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10e5c:	460c      	mov	r4, r1
   10e5e:	680b      	ldr	r3, [r1, #0]
   10e60:	4f46      	ldr	r7, [pc, #280]	; (10f7c <secure_client_socket+0x124>)
   10e62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10e66:	600b      	str	r3, [r1, #0]
   10e68:	680b      	ldr	r3, [r1, #0]
   10e6a:	00c6      	lsls	r6, r0, #3
   10e6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   10e70:	600b      	str	r3, [r1, #0]
   10e72:	eb07 0a06 	add.w	sl, r7, r6
   10e76:	b082      	sub	sp, #8
   10e78:	f8da 3004 	ldr.w	r3, [sl, #4]
   10e7c:	6989      	ldr	r1, [r1, #24]
   10e7e:	f247 0281 	movw	r2, #28801	; 0x7081
   10e82:	4605      	mov	r5, r0
   10e84:	f8d4 8000 	ldr.w	r8, [r4]
   10e88:	f003 fbd0 	bl	1462c <ip_interface_request_create>
   10e8c:	2800      	cmp	r0, #0
   10e8e:	d06f      	beq.n	10f70 <secure_client_socket+0x118>
   10e90:	f8da 2004 	ldr.w	r2, [sl, #4]
   10e94:	4681      	mov	r9, r0
   10e96:	2a00      	cmp	r2, #0
   10e98:	d15f      	bne.n	10f5a <secure_client_socket+0x102>
   10e9a:	4b39      	ldr	r3, [pc, #228]	; (10f80 <secure_client_socket+0x128>)
   10e9c:	1971      	adds	r1, r6, r5
   10e9e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   10ea2:	2224      	movs	r2, #36	; 0x24
   10ea4:	f109 0014 	add.w	r0, r9, #20
   10ea8:	f00b fadd 	bl	1c466 <memcpy>
   10eac:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10eb0:	4649      	mov	r1, r9
   10eb2:	3324      	adds	r3, #36	; 0x24
   10eb4:	f8c9 3008 	str.w	r3, [r9, #8]
   10eb8:	6822      	ldr	r2, [r4, #0]
   10eba:	4643      	mov	r3, r8
   10ebc:	0c12      	lsrs	r2, r2, #16
   10ebe:	0412      	lsls	r2, r2, #16
   10ec0:	f042 020a 	orr.w	r2, r2, #10
   10ec4:	6022      	str	r2, [r4, #0]
   10ec6:	4620      	mov	r0, r4
   10ec8:	f247 0281 	movw	r2, #28801	; 0x7081
   10ecc:	f003 fbce 	bl	1466c <ip_interface_request_send>
   10ed0:	4603      	mov	r3, r0
   10ed2:	b970      	cbnz	r0, 10ef2 <secure_client_socket+0x9a>
   10ed4:	6823      	ldr	r3, [r4, #0]
   10ed6:	00db      	lsls	r3, r3, #3
   10ed8:	d40f      	bmi.n	10efa <secure_client_socket+0xa2>
   10eda:	f04f 33ff 	mov.w	r3, #4294967295
   10ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10ee2:	210b      	movs	r1, #11
   10ee4:	4628      	mov	r0, r5
   10ee6:	f003 fbd5 	bl	14694 <ip_interface_wait>
   10eea:	4603      	mov	r3, r0
   10eec:	b150      	cbz	r0, 10f04 <secure_client_socket+0xac>
   10eee:	f8c4 8000 	str.w	r8, [r4]
   10ef2:	4618      	mov	r0, r3
   10ef4:	b002      	add	sp, #8
   10ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10efa:	2373      	movs	r3, #115	; 0x73
   10efc:	4618      	mov	r0, r3
   10efe:	b002      	add	sp, #8
   10f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   10f08:	f04f 33ff 	mov.w	r3, #4294967295
   10f0c:	4611      	mov	r1, r2
   10f0e:	4628      	mov	r0, r5
   10f10:	f003 fbc0 	bl	14694 <ip_interface_wait>
   10f14:	4603      	mov	r3, r0
   10f16:	bb30      	cbnz	r0, 10f66 <secure_client_socket+0x10e>
   10f18:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   10f1c:	b138      	cbz	r0, 10f2e <secure_client_socket+0xd6>
   10f1e:	9301      	str	r3, [sp, #4]
   10f20:	f7ff ff32 	bl	10d88 <nrf_free>
   10f24:	9b01      	ldr	r3, [sp, #4]
   10f26:	443e      	add	r6, r7
   10f28:	6073      	str	r3, [r6, #4]
   10f2a:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   10f2e:	4618      	mov	r0, r3
   10f30:	6822      	ldr	r2, [r4, #0]
   10f32:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   10f36:	6022      	str	r2, [r4, #0]
   10f38:	6822      	ldr	r2, [r4, #0]
   10f3a:	0c12      	lsrs	r2, r2, #16
   10f3c:	0412      	lsls	r2, r2, #16
   10f3e:	f042 020c 	orr.w	r2, r2, #12
   10f42:	6022      	str	r2, [r4, #0]
   10f44:	6822      	ldr	r2, [r4, #0]
   10f46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   10f4a:	6022      	str	r2, [r4, #0]
   10f4c:	6822      	ldr	r2, [r4, #0]
   10f4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   10f52:	6022      	str	r2, [r4, #0]
   10f54:	b002      	add	sp, #8
   10f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f5a:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   10f5e:	6800      	ldr	r0, [r0, #0]
   10f60:	f00b fa81 	bl	1c466 <memcpy>
   10f64:	e799      	b.n	10e9a <secure_client_socket+0x42>
   10f66:	2b73      	cmp	r3, #115	; 0x73
   10f68:	d0c3      	beq.n	10ef2 <secure_client_socket+0x9a>
   10f6a:	f8c4 8000 	str.w	r8, [r4]
   10f6e:	e7c0      	b.n	10ef2 <secure_client_socket+0x9a>
   10f70:	230c      	movs	r3, #12
   10f72:	4618      	mov	r0, r3
   10f74:	b002      	add	sp, #8
   10f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f7a:	bf00      	nop
   10f7c:	20020558 	.word	0x20020558
   10f80:	20020414 	.word	0x20020414

00010f84 <tls_interface_init>:
   10f84:	2000      	movs	r0, #0
   10f86:	4770      	bx	lr

00010f88 <tls_interface_open>:
   10f88:	b538      	push	{r3, r4, r5, lr}
   10f8a:	1e4b      	subs	r3, r1, #1
   10f8c:	2b01      	cmp	r3, #1
   10f8e:	d808      	bhi.n	10fa2 <tls_interface_open+0x1a>
   10f90:	4614      	mov	r4, r2
   10f92:	b162      	cbz	r2, 10fae <tls_interface_open+0x26>
   10f94:	2901      	cmp	r1, #1
   10f96:	d02d      	beq.n	10ff4 <tls_interface_open+0x6c>
   10f98:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   10f9c:	bf08      	it	eq
   10f9e:	2202      	moveq	r2, #2
   10fa0:	d00d      	beq.n	10fbe <tls_interface_open+0x36>
   10fa2:	2029      	movs	r0, #41	; 0x29
   10fa4:	f7fe f9c4 	bl	f330 <bsd_os_errno_set>
   10fa8:	f04f 35ff 	mov.w	r5, #4294967295
   10fac:	e020      	b.n	10ff0 <tls_interface_open+0x68>
   10fae:	2901      	cmp	r1, #1
   10fb0:	bf0b      	itete	eq
   10fb2:	2201      	moveq	r2, #1
   10fb4:	2202      	movne	r2, #2
   10fb6:	f44f 7482 	moveq.w	r4, #260	; 0x104
   10fba:	f44f 7487 	movne.w	r4, #270	; 0x10e
   10fbe:	f003 fb95 	bl	146ec <ip_interface_open>
   10fc2:	1e05      	subs	r5, r0, #0
   10fc4:	db1b      	blt.n	10ffe <tls_interface_open+0x76>
   10fc6:	4b0f      	ldr	r3, [pc, #60]	; (11004 <tls_interface_open+0x7c>)
   10fc8:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   10fcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   10fd0:	2224      	movs	r2, #36	; 0x24
   10fd2:	490d      	ldr	r1, [pc, #52]	; (11008 <tls_interface_open+0x80>)
   10fd4:	f00b fa47 	bl	1c466 <memcpy>
   10fd8:	4628      	mov	r0, r5
   10fda:	f004 ffe7 	bl	15fac <interface_socket_from_handle_get>
   10fde:	6803      	ldr	r3, [r0, #0]
   10fe0:	6144      	str	r4, [r0, #20]
   10fe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   10fe6:	6003      	str	r3, [r0, #0]
   10fe8:	6803      	ldr	r3, [r0, #0]
   10fea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10fee:	6003      	str	r3, [r0, #0]
   10ff0:	4628      	mov	r0, r5
   10ff2:	bd38      	pop	{r3, r4, r5, pc}
   10ff4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   10ff8:	d1d3      	bne.n	10fa2 <tls_interface_open+0x1a>
   10ffa:	460a      	mov	r2, r1
   10ffc:	e7df      	b.n	10fbe <tls_interface_open+0x36>
   10ffe:	f04f 35ff 	mov.w	r5, #4294967295
   11002:	e7f5      	b.n	10ff0 <tls_interface_open+0x68>
   11004:	20020414 	.word	0x20020414
   11008:	0001d5fc 	.word	0x0001d5fc

0001100c <tls_interface_close>:
   1100c:	b538      	push	{r3, r4, r5, lr}
   1100e:	4604      	mov	r4, r0
   11010:	f004 ffcc 	bl	15fac <interface_socket_from_handle_get>
   11014:	b180      	cbz	r0, 11038 <tls_interface_close+0x2c>
   11016:	4d0b      	ldr	r5, [pc, #44]	; (11044 <tls_interface_close+0x38>)
   11018:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   1101c:	b138      	cbz	r0, 1102e <tls_interface_close+0x22>
   1101e:	f7ff feb3 	bl	10d88 <nrf_free>
   11022:	2300      	movs	r3, #0
   11024:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   11028:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   1102c:	6053      	str	r3, [r2, #4]
   1102e:	4620      	mov	r0, r4
   11030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11034:	f003 bc0c 	b.w	14850 <ip_interface_close>
   11038:	2009      	movs	r0, #9
   1103a:	f7fe f979 	bl	f330 <bsd_os_errno_set>
   1103e:	f04f 30ff 	mov.w	r0, #4294967295
   11042:	bd38      	pop	{r3, r4, r5, pc}
   11044:	20020558 	.word	0x20020558

00011048 <tls_interface_sendto>:
   11048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1104c:	460d      	mov	r5, r1
   1104e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   11052:	4616      	mov	r6, r2
   11054:	461f      	mov	r7, r3
   11056:	4604      	mov	r4, r0
   11058:	f004 ffa8 	bl	15fac <interface_socket_from_handle_get>
   1105c:	2800      	cmp	r0, #0
   1105e:	d03b      	beq.n	110d8 <tls_interface_sendto+0x90>
   11060:	6803      	ldr	r3, [r0, #0]
   11062:	b29b      	uxth	r3, r3
   11064:	2b0c      	cmp	r3, #12
   11066:	d039      	beq.n	110dc <tls_interface_sendto+0x94>
   11068:	6803      	ldr	r3, [r0, #0]
   1106a:	b29b      	uxth	r3, r3
   1106c:	2b0b      	cmp	r3, #11
   1106e:	d111      	bne.n	11094 <tls_interface_sendto+0x4c>
   11070:	4b20      	ldr	r3, [pc, #128]	; (110f4 <tls_interface_sendto+0xac>)
   11072:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   11076:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   1107a:	2b02      	cmp	r3, #2
   1107c:	d038      	beq.n	110f0 <tls_interface_sendto+0xa8>
   1107e:	6903      	ldr	r3, [r0, #16]
   11080:	2b01      	cmp	r3, #1
   11082:	bf14      	ite	ne
   11084:	2039      	movne	r0, #57	; 0x39
   11086:	202a      	moveq	r0, #42	; 0x2a
   11088:	f7fe f952 	bl	f330 <bsd_os_errno_set>
   1108c:	f04f 30ff 	mov.w	r0, #4294967295
   11090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11094:	6903      	ldr	r3, [r0, #16]
   11096:	2b01      	cmp	r3, #1
   11098:	d00b      	beq.n	110b2 <tls_interface_sendto+0x6a>
   1109a:	2b02      	cmp	r3, #2
   1109c:	d001      	beq.n	110a2 <tls_interface_sendto+0x5a>
   1109e:	2039      	movs	r0, #57	; 0x39
   110a0:	e7f2      	b.n	11088 <tls_interface_sendto+0x40>
   110a2:	6803      	ldr	r3, [r0, #0]
   110a4:	b29b      	uxth	r3, r3
   110a6:	2b02      	cmp	r3, #2
   110a8:	d007      	beq.n	110ba <tls_interface_sendto+0x72>
   110aa:	6803      	ldr	r3, [r0, #0]
   110ac:	b29b      	uxth	r3, r3
   110ae:	2b04      	cmp	r3, #4
   110b0:	d003      	beq.n	110ba <tls_interface_sendto+0x72>
   110b2:	6803      	ldr	r3, [r0, #0]
   110b4:	b29b      	uxth	r3, r3
   110b6:	2b05      	cmp	r3, #5
   110b8:	d1f1      	bne.n	1109e <tls_interface_sendto+0x56>
   110ba:	4b0e      	ldr	r3, [pc, #56]	; (110f4 <tls_interface_sendto+0xac>)
   110bc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   110c0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   110c4:	2b02      	cmp	r3, #2
   110c6:	d1ea      	bne.n	1109e <tls_interface_sendto+0x56>
   110c8:	4601      	mov	r1, r0
   110ca:	4620      	mov	r0, r4
   110cc:	f7ff fec4 	bl	10e58 <secure_client_socket>
   110d0:	2800      	cmp	r0, #0
   110d2:	d003      	beq.n	110dc <tls_interface_sendto+0x94>
   110d4:	dcd8      	bgt.n	11088 <tls_interface_sendto+0x40>
   110d6:	e7d9      	b.n	1108c <tls_interface_sendto+0x44>
   110d8:	2009      	movs	r0, #9
   110da:	e7d5      	b.n	11088 <tls_interface_sendto+0x40>
   110dc:	e9cd 8908 	strd	r8, r9, [sp, #32]
   110e0:	463b      	mov	r3, r7
   110e2:	4632      	mov	r2, r6
   110e4:	4629      	mov	r1, r5
   110e6:	4620      	mov	r0, r4
   110e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   110ec:	f003 bc20 	b.w	14930 <ip_interface_sendto>
   110f0:	2023      	movs	r0, #35	; 0x23
   110f2:	e7c9      	b.n	11088 <tls_interface_sendto+0x40>
   110f4:	20020414 	.word	0x20020414

000110f8 <tls_interface_recvfrom>:
   110f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   110fc:	460d      	mov	r5, r1
   110fe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   11102:	4616      	mov	r6, r2
   11104:	461f      	mov	r7, r3
   11106:	4604      	mov	r4, r0
   11108:	f004 ff50 	bl	15fac <interface_socket_from_handle_get>
   1110c:	2800      	cmp	r0, #0
   1110e:	d038      	beq.n	11182 <tls_interface_recvfrom+0x8a>
   11110:	6803      	ldr	r3, [r0, #0]
   11112:	b29b      	uxth	r3, r3
   11114:	2b0c      	cmp	r3, #12
   11116:	d00f      	beq.n	11138 <tls_interface_recvfrom+0x40>
   11118:	6803      	ldr	r3, [r0, #0]
   1111a:	b29b      	uxth	r3, r3
   1111c:	2b0d      	cmp	r3, #13
   1111e:	d00b      	beq.n	11138 <tls_interface_recvfrom+0x40>
   11120:	6903      	ldr	r3, [r0, #16]
   11122:	2b01      	cmp	r3, #1
   11124:	d01a      	beq.n	1115c <tls_interface_recvfrom+0x64>
   11126:	2b02      	cmp	r3, #2
   11128:	d010      	beq.n	1114c <tls_interface_recvfrom+0x54>
   1112a:	2023      	movs	r0, #35	; 0x23
   1112c:	f7fe f900 	bl	f330 <bsd_os_errno_set>
   11130:	f04f 30ff 	mov.w	r0, #4294967295
   11134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11138:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1113c:	463b      	mov	r3, r7
   1113e:	4632      	mov	r2, r6
   11140:	4629      	mov	r1, r5
   11142:	4620      	mov	r0, r4
   11144:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11148:	f003 bd6a 	b.w	14c20 <ip_interface_recvfrom>
   1114c:	6803      	ldr	r3, [r0, #0]
   1114e:	b29b      	uxth	r3, r3
   11150:	2b02      	cmp	r3, #2
   11152:	d007      	beq.n	11164 <tls_interface_recvfrom+0x6c>
   11154:	6803      	ldr	r3, [r0, #0]
   11156:	b29b      	uxth	r3, r3
   11158:	2b04      	cmp	r3, #4
   1115a:	d003      	beq.n	11164 <tls_interface_recvfrom+0x6c>
   1115c:	6803      	ldr	r3, [r0, #0]
   1115e:	b29b      	uxth	r3, r3
   11160:	2b05      	cmp	r3, #5
   11162:	d1e2      	bne.n	1112a <tls_interface_recvfrom+0x32>
   11164:	4b08      	ldr	r3, [pc, #32]	; (11188 <tls_interface_recvfrom+0x90>)
   11166:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1116a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1116e:	2b02      	cmp	r3, #2
   11170:	d1db      	bne.n	1112a <tls_interface_recvfrom+0x32>
   11172:	4601      	mov	r1, r0
   11174:	4620      	mov	r0, r4
   11176:	f7ff fe6f 	bl	10e58 <secure_client_socket>
   1117a:	2800      	cmp	r0, #0
   1117c:	d0dc      	beq.n	11138 <tls_interface_recvfrom+0x40>
   1117e:	dcd5      	bgt.n	1112c <tls_interface_recvfrom+0x34>
   11180:	e7d6      	b.n	11130 <tls_interface_recvfrom+0x38>
   11182:	2009      	movs	r0, #9
   11184:	e7d2      	b.n	1112c <tls_interface_recvfrom+0x34>
   11186:	bf00      	nop
   11188:	20020414 	.word	0x20020414

0001118c <tls_interface_bind>:
   1118c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11190:	460c      	mov	r4, r1
   11192:	4617      	mov	r7, r2
   11194:	4606      	mov	r6, r0
   11196:	f004 ff09 	bl	15fac <interface_socket_from_handle_get>
   1119a:	2800      	cmp	r0, #0
   1119c:	d06d      	beq.n	1127a <tls_interface_bind+0xee>
   1119e:	6803      	ldr	r3, [r0, #0]
   111a0:	4605      	mov	r5, r0
   111a2:	b29b      	uxth	r3, r3
   111a4:	2b02      	cmp	r3, #2
   111a6:	d15a      	bne.n	1125e <tls_interface_bind+0xd2>
   111a8:	4621      	mov	r1, r4
   111aa:	463a      	mov	r2, r7
   111ac:	4630      	mov	r0, r6
   111ae:	f003 ff25 	bl	14ffc <ip_interface_bind>
   111b2:	4604      	mov	r4, r0
   111b4:	2800      	cmp	r0, #0
   111b6:	d148      	bne.n	1124a <tls_interface_bind+0xbe>
   111b8:	00f7      	lsls	r7, r6, #3
   111ba:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 11280 <tls_interface_bind+0xf4>
   111be:	19bb      	adds	r3, r7, r6
   111c0:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   111c4:	2b01      	cmp	r3, #1
   111c6:	d002      	beq.n	111ce <tls_interface_bind+0x42>
   111c8:	4620      	mov	r0, r4
   111ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111ce:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 11284 <tls_interface_bind+0xf8>
   111d2:	f247 0281 	movw	r2, #28801	; 0x7081
   111d6:	eb0b 0a07 	add.w	sl, fp, r7
   111da:	f8da 3004 	ldr.w	r3, [sl, #4]
   111de:	69a9      	ldr	r1, [r5, #24]
   111e0:	4630      	mov	r0, r6
   111e2:	f003 fa23 	bl	1462c <ip_interface_request_create>
   111e6:	4681      	mov	r9, r0
   111e8:	2800      	cmp	r0, #0
   111ea:	d044      	beq.n	11276 <tls_interface_bind+0xea>
   111ec:	f8da 2004 	ldr.w	r2, [sl, #4]
   111f0:	2a00      	cmp	r2, #0
   111f2:	d13a      	bne.n	1126a <tls_interface_bind+0xde>
   111f4:	19b9      	adds	r1, r7, r6
   111f6:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   111fa:	2224      	movs	r2, #36	; 0x24
   111fc:	f109 0014 	add.w	r0, r9, #20
   11200:	f00b f931 	bl	1c466 <memcpy>
   11204:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11208:	4649      	mov	r1, r9
   1120a:	3324      	adds	r3, #36	; 0x24
   1120c:	f8c9 3008 	str.w	r3, [r9, #8]
   11210:	682a      	ldr	r2, [r5, #0]
   11212:	2304      	movs	r3, #4
   11214:	0c12      	lsrs	r2, r2, #16
   11216:	0412      	lsls	r2, r2, #16
   11218:	f042 020a 	orr.w	r2, r2, #10
   1121c:	602a      	str	r2, [r5, #0]
   1121e:	4628      	mov	r0, r5
   11220:	f247 0281 	movw	r2, #28801	; 0x7081
   11224:	f003 fa22 	bl	1466c <ip_interface_request_send>
   11228:	b9e8      	cbnz	r0, 11266 <tls_interface_bind+0xda>
   1122a:	682b      	ldr	r3, [r5, #0]
   1122c:	00db      	lsls	r3, r3, #3
   1122e:	d418      	bmi.n	11262 <tls_interface_bind+0xd6>
   11230:	4630      	mov	r0, r6
   11232:	f04f 33ff 	mov.w	r3, #4294967295
   11236:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1123a:	210b      	movs	r1, #11
   1123c:	f003 fa2a 	bl	14694 <ip_interface_wait>
   11240:	2800      	cmp	r0, #0
   11242:	d0c1      	beq.n	111c8 <tls_interface_bind+0x3c>
   11244:	2304      	movs	r3, #4
   11246:	4604      	mov	r4, r0
   11248:	602b      	str	r3, [r5, #0]
   1124a:	2c00      	cmp	r4, #0
   1124c:	ddbc      	ble.n	111c8 <tls_interface_bind+0x3c>
   1124e:	4620      	mov	r0, r4
   11250:	f04f 34ff 	mov.w	r4, #4294967295
   11254:	f7fe f86c 	bl	f330 <bsd_os_errno_set>
   11258:	4620      	mov	r0, r4
   1125a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1125e:	242d      	movs	r4, #45	; 0x2d
   11260:	e7f5      	b.n	1124e <tls_interface_bind+0xc2>
   11262:	2473      	movs	r4, #115	; 0x73
   11264:	e7f3      	b.n	1124e <tls_interface_bind+0xc2>
   11266:	4604      	mov	r4, r0
   11268:	e7ef      	b.n	1124a <tls_interface_bind+0xbe>
   1126a:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   1126e:	6800      	ldr	r0, [r0, #0]
   11270:	f00b f8f9 	bl	1c466 <memcpy>
   11274:	e7be      	b.n	111f4 <tls_interface_bind+0x68>
   11276:	240c      	movs	r4, #12
   11278:	e7e9      	b.n	1124e <tls_interface_bind+0xc2>
   1127a:	2409      	movs	r4, #9
   1127c:	e7e7      	b.n	1124e <tls_interface_bind+0xc2>
   1127e:	bf00      	nop
   11280:	20020414 	.word	0x20020414
   11284:	20020558 	.word	0x20020558

00011288 <tls_interface_connect>:
   11288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1128a:	460e      	mov	r6, r1
   1128c:	4617      	mov	r7, r2
   1128e:	4604      	mov	r4, r0
   11290:	f004 fe8c 	bl	15fac <interface_socket_from_handle_get>
   11294:	b1e8      	cbz	r0, 112d2 <tls_interface_connect+0x4a>
   11296:	4b13      	ldr	r3, [pc, #76]	; (112e4 <tls_interface_connect+0x5c>)
   11298:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1129c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   112a0:	2b02      	cmp	r3, #2
   112a2:	d11c      	bne.n	112de <tls_interface_connect+0x56>
   112a4:	6803      	ldr	r3, [r0, #0]
   112a6:	4605      	mov	r5, r0
   112a8:	b29b      	uxth	r3, r3
   112aa:	2b02      	cmp	r3, #2
   112ac:	d003      	beq.n	112b6 <tls_interface_connect+0x2e>
   112ae:	6803      	ldr	r3, [r0, #0]
   112b0:	b29b      	uxth	r3, r3
   112b2:	2b04      	cmp	r3, #4
   112b4:	d113      	bne.n	112de <tls_interface_connect+0x56>
   112b6:	463a      	mov	r2, r7
   112b8:	4631      	mov	r1, r6
   112ba:	4620      	mov	r0, r4
   112bc:	f003 fde4 	bl	14e88 <ip_interface_connect>
   112c0:	b110      	cbz	r0, 112c8 <tls_interface_connect+0x40>
   112c2:	2800      	cmp	r0, #0
   112c4:	dc06      	bgt.n	112d4 <tls_interface_connect+0x4c>
   112c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112c8:	4629      	mov	r1, r5
   112ca:	4620      	mov	r0, r4
   112cc:	f7ff fdc4 	bl	10e58 <secure_client_socket>
   112d0:	e7f7      	b.n	112c2 <tls_interface_connect+0x3a>
   112d2:	2009      	movs	r0, #9
   112d4:	f7fe f82c 	bl	f330 <bsd_os_errno_set>
   112d8:	f04f 30ff 	mov.w	r0, #4294967295
   112dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112de:	202d      	movs	r0, #45	; 0x2d
   112e0:	e7f8      	b.n	112d4 <tls_interface_connect+0x4c>
   112e2:	bf00      	nop
   112e4:	20020414 	.word	0x20020414

000112e8 <tls_interface_listen>:
   112e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112ec:	b083      	sub	sp, #12
   112ee:	9101      	str	r1, [sp, #4]
   112f0:	4605      	mov	r5, r0
   112f2:	f004 fe5b 	bl	15fac <interface_socket_from_handle_get>
   112f6:	2800      	cmp	r0, #0
   112f8:	d079      	beq.n	113ee <tls_interface_listen+0x106>
   112fa:	6903      	ldr	r3, [r0, #16]
   112fc:	4604      	mov	r4, r0
   112fe:	2b01      	cmp	r3, #1
   11300:	d173      	bne.n	113ea <tls_interface_listen+0x102>
   11302:	6803      	ldr	r3, [r0, #0]
   11304:	b29b      	uxth	r3, r3
   11306:	2b04      	cmp	r3, #4
   11308:	d05f      	beq.n	113ca <tls_interface_listen+0xe2>
   1130a:	6823      	ldr	r3, [r4, #0]
   1130c:	b29b      	uxth	r3, r3
   1130e:	2b0b      	cmp	r3, #11
   11310:	d16b      	bne.n	113ea <tls_interface_listen+0x102>
   11312:	00ee      	lsls	r6, r5, #3
   11314:	4f37      	ldr	r7, [pc, #220]	; (113f4 <tls_interface_listen+0x10c>)
   11316:	1973      	adds	r3, r6, r5
   11318:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1131c:	2b01      	cmp	r3, #1
   1131e:	d164      	bne.n	113ea <tls_interface_listen+0x102>
   11320:	2201      	movs	r2, #1
   11322:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 113f8 <tls_interface_listen+0x110>
   11326:	1973      	adds	r3, r6, r5
   11328:	00ee      	lsls	r6, r5, #3
   1132a:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   1132e:	eb09 0806 	add.w	r8, r9, r6
   11332:	69a1      	ldr	r1, [r4, #24]
   11334:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11338:	f247 0281 	movw	r2, #28801	; 0x7081
   1133c:	4628      	mov	r0, r5
   1133e:	f8d4 a000 	ldr.w	sl, [r4]
   11342:	f003 f973 	bl	1462c <ip_interface_request_create>
   11346:	4683      	mov	fp, r0
   11348:	2800      	cmp	r0, #0
   1134a:	d04c      	beq.n	113e6 <tls_interface_listen+0xfe>
   1134c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   11350:	2a00      	cmp	r2, #0
   11352:	d142      	bne.n	113da <tls_interface_listen+0xf2>
   11354:	1971      	adds	r1, r6, r5
   11356:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1135a:	2224      	movs	r2, #36	; 0x24
   1135c:	f10b 0014 	add.w	r0, fp, #20
   11360:	f00b f881 	bl	1c466 <memcpy>
   11364:	f8db 2008 	ldr.w	r2, [fp, #8]
   11368:	4659      	mov	r1, fp
   1136a:	3224      	adds	r2, #36	; 0x24
   1136c:	f8cb 2008 	str.w	r2, [fp, #8]
   11370:	6822      	ldr	r2, [r4, #0]
   11372:	4653      	mov	r3, sl
   11374:	0c12      	lsrs	r2, r2, #16
   11376:	0412      	lsls	r2, r2, #16
   11378:	f042 020a 	orr.w	r2, r2, #10
   1137c:	6022      	str	r2, [r4, #0]
   1137e:	4620      	mov	r0, r4
   11380:	f247 0281 	movw	r2, #28801	; 0x7081
   11384:	f003 f972 	bl	1466c <ip_interface_request_send>
   11388:	b968      	cbnz	r0, 113a6 <tls_interface_listen+0xbe>
   1138a:	6823      	ldr	r3, [r4, #0]
   1138c:	00db      	lsls	r3, r3, #3
   1138e:	d40f      	bmi.n	113b0 <tls_interface_listen+0xc8>
   11390:	f04f 33ff 	mov.w	r3, #4294967295
   11394:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11398:	210b      	movs	r1, #11
   1139a:	4628      	mov	r0, r5
   1139c:	f003 f97a 	bl	14694 <ip_interface_wait>
   113a0:	b170      	cbz	r0, 113c0 <tls_interface_listen+0xd8>
   113a2:	f8c4 a000 	str.w	sl, [r4]
   113a6:	2800      	cmp	r0, #0
   113a8:	dc03      	bgt.n	113b2 <tls_interface_listen+0xca>
   113aa:	b003      	add	sp, #12
   113ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113b0:	2073      	movs	r0, #115	; 0x73
   113b2:	f7fd ffbd 	bl	f330 <bsd_os_errno_set>
   113b6:	f04f 30ff 	mov.w	r0, #4294967295
   113ba:	b003      	add	sp, #12
   113bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113c0:	9901      	ldr	r1, [sp, #4]
   113c2:	4628      	mov	r0, r5
   113c4:	f003 feba 	bl	1513c <ip_interface_listen>
   113c8:	e7ed      	b.n	113a6 <tls_interface_listen+0xbe>
   113ca:	00ee      	lsls	r6, r5, #3
   113cc:	4f09      	ldr	r7, [pc, #36]	; (113f4 <tls_interface_listen+0x10c>)
   113ce:	1973      	adds	r3, r6, r5
   113d0:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   113d4:	2b02      	cmp	r3, #2
   113d6:	d198      	bne.n	1130a <tls_interface_listen+0x22>
   113d8:	e7a2      	b.n	11320 <tls_interface_listen+0x38>
   113da:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   113de:	6800      	ldr	r0, [r0, #0]
   113e0:	f00b f841 	bl	1c466 <memcpy>
   113e4:	e7b6      	b.n	11354 <tls_interface_listen+0x6c>
   113e6:	200c      	movs	r0, #12
   113e8:	e7e3      	b.n	113b2 <tls_interface_listen+0xca>
   113ea:	202d      	movs	r0, #45	; 0x2d
   113ec:	e7e1      	b.n	113b2 <tls_interface_listen+0xca>
   113ee:	2009      	movs	r0, #9
   113f0:	e7df      	b.n	113b2 <tls_interface_listen+0xca>
   113f2:	bf00      	nop
   113f4:	20020414 	.word	0x20020414
   113f8:	20020558 	.word	0x20020558

000113fc <tls_interface_accept>:
   113fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113fe:	460c      	mov	r4, r1
   11400:	4616      	mov	r6, r2
   11402:	461f      	mov	r7, r3
   11404:	4605      	mov	r5, r0
   11406:	f004 fdd1 	bl	15fac <interface_socket_from_handle_get>
   1140a:	2800      	cmp	r0, #0
   1140c:	d03b      	beq.n	11486 <tls_interface_accept+0x8a>
   1140e:	6800      	ldr	r0, [r0, #0]
   11410:	b280      	uxth	r0, r0
   11412:	2806      	cmp	r0, #6
   11414:	d137      	bne.n	11486 <tls_interface_accept+0x8a>
   11416:	4621      	mov	r1, r4
   11418:	463b      	mov	r3, r7
   1141a:	4632      	mov	r2, r6
   1141c:	4628      	mov	r0, r5
   1141e:	f003 ff03 	bl	15228 <ip_interface_accept>
   11422:	4604      	mov	r4, r0
   11424:	b118      	cbz	r0, 1142e <tls_interface_accept+0x32>
   11426:	2c00      	cmp	r4, #0
   11428:	dc2e      	bgt.n	11488 <tls_interface_accept+0x8c>
   1142a:	4620      	mov	r0, r4
   1142c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1142e:	4628      	mov	r0, r5
   11430:	f004 fdbc 	bl	15fac <interface_socket_from_handle_get>
   11434:	6803      	ldr	r3, [r0, #0]
   11436:	4f18      	ldr	r7, [pc, #96]	; (11498 <tls_interface_accept+0x9c>)
   11438:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1143c:	6003      	str	r3, [r0, #0]
   1143e:	6803      	ldr	r3, [r0, #0]
   11440:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   11444:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   11448:	4606      	mov	r6, r0
   1144a:	6003      	str	r3, [r0, #0]
   1144c:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   11450:	2224      	movs	r2, #36	; 0x24
   11452:	4638      	mov	r0, r7
   11454:	f00b f807 	bl	1c466 <memcpy>
   11458:	2302      	movs	r3, #2
   1145a:	703b      	strb	r3, [r7, #0]
   1145c:	6833      	ldr	r3, [r6, #0]
   1145e:	4620      	mov	r0, r4
   11460:	0c1b      	lsrs	r3, r3, #16
   11462:	041b      	lsls	r3, r3, #16
   11464:	f043 030b 	orr.w	r3, r3, #11
   11468:	6033      	str	r3, [r6, #0]
   1146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1146e:	f04f 33ff 	mov.w	r3, #4294967295
   11472:	210c      	movs	r1, #12
   11474:	f003 f90e 	bl	14694 <ip_interface_wait>
   11478:	4604      	mov	r4, r0
   1147a:	2800      	cmp	r0, #0
   1147c:	d0d5      	beq.n	1142a <tls_interface_accept+0x2e>
   1147e:	2000      	movs	r0, #0
   11480:	f003 f9e6 	bl	14850 <ip_interface_close>
   11484:	e7cf      	b.n	11426 <tls_interface_accept+0x2a>
   11486:	2409      	movs	r4, #9
   11488:	4620      	mov	r0, r4
   1148a:	f04f 34ff 	mov.w	r4, #4294967295
   1148e:	f7fd ff4f 	bl	f330 <bsd_os_errno_set>
   11492:	4620      	mov	r0, r4
   11494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11496:	bf00      	nop
   11498:	20020414 	.word	0x20020414

0001149c <tls_interface_setopt>:
   1149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114a0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   114a4:	9e06      	ldr	r6, [sp, #24]
   114a6:	d11e      	bne.n	114e6 <tls_interface_setopt+0x4a>
   114a8:	461f      	mov	r7, r3
   114aa:	4605      	mov	r5, r0
   114ac:	2b00      	cmp	r3, #0
   114ae:	f000 808c 	beq.w	115ca <tls_interface_setopt+0x12e>
   114b2:	4690      	mov	r8, r2
   114b4:	f004 fd7a 	bl	15fac <interface_socket_from_handle_get>
   114b8:	2800      	cmp	r0, #0
   114ba:	d07b      	beq.n	115b4 <tls_interface_setopt+0x118>
   114bc:	6804      	ldr	r4, [r0, #0]
   114be:	b2a4      	uxth	r4, r4
   114c0:	2c02      	cmp	r4, #2
   114c2:	d007      	beq.n	114d4 <tls_interface_setopt+0x38>
   114c4:	6803      	ldr	r3, [r0, #0]
   114c6:	b29b      	uxth	r3, r3
   114c8:	2b04      	cmp	r3, #4
   114ca:	d003      	beq.n	114d4 <tls_interface_setopt+0x38>
   114cc:	6803      	ldr	r3, [r0, #0]
   114ce:	b29b      	uxth	r3, r3
   114d0:	2b05      	cmp	r3, #5
   114d2:	d16f      	bne.n	115b4 <tls_interface_setopt+0x118>
   114d4:	f108 32ff 	add.w	r2, r8, #4294967295
   114d8:	2a04      	cmp	r2, #4
   114da:	d87c      	bhi.n	115d6 <tls_interface_setopt+0x13a>
   114dc:	e8df f002 	tbb	[pc, r2]
   114e0:	41324e24 	.word	0x41324e24
   114e4:	07          	.byte	0x07
   114e5:	00          	.byte	0x00
   114e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   114ea:	f003 bfd5 	b.w	15498 <ip_interface_setopt>
   114ee:	4c3b      	ldr	r4, [pc, #236]	; (115dc <tls_interface_setopt+0x140>)
   114f0:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   114f4:	b138      	cbz	r0, 11506 <tls_interface_setopt+0x6a>
   114f6:	f7ff fc47 	bl	10d88 <nrf_free>
   114fa:	2200      	movs	r2, #0
   114fc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   11500:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   11504:	605a      	str	r2, [r3, #4]
   11506:	4630      	mov	r0, r6
   11508:	b34e      	cbz	r6, 1155e <tls_interface_setopt+0xc2>
   1150a:	f7ff fc33 	bl	10d74 <nrf_malloc>
   1150e:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   11512:	2800      	cmp	r0, #0
   11514:	d057      	beq.n	115c6 <tls_interface_setopt+0x12a>
   11516:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1151a:	4632      	mov	r2, r6
   1151c:	4639      	mov	r1, r7
   1151e:	6066      	str	r6, [r4, #4]
   11520:	f00a ffa1 	bl	1c466 <memcpy>
   11524:	2000      	movs	r0, #0
   11526:	e01a      	b.n	1155e <tls_interface_setopt+0xc2>
   11528:	2e04      	cmp	r6, #4
   1152a:	d14a      	bne.n	115c2 <tls_interface_setopt+0x126>
   1152c:	6838      	ldr	r0, [r7, #0]
   1152e:	2800      	cmp	r0, #0
   11530:	d039      	beq.n	115a6 <tls_interface_setopt+0x10a>
   11532:	2801      	cmp	r0, #1
   11534:	d145      	bne.n	115c2 <tls_interface_setopt+0x126>
   11536:	4a2a      	ldr	r2, [pc, #168]	; (115e0 <tls_interface_setopt+0x144>)
   11538:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1153c:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   11540:	2000      	movs	r0, #0
   11542:	e00c      	b.n	1155e <tls_interface_setopt+0xc2>
   11544:	2e01      	cmp	r6, #1
   11546:	d13c      	bne.n	115c2 <tls_interface_setopt+0x126>
   11548:	783a      	ldrb	r2, [r7, #0]
   1154a:	2000      	movs	r0, #0
   1154c:	3200      	adds	r2, #0
   1154e:	bf18      	it	ne
   11550:	2201      	movne	r2, #1
   11552:	4b23      	ldr	r3, [pc, #140]	; (115e0 <tls_interface_setopt+0x144>)
   11554:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   11558:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1155c:	7062      	strb	r2, [r4, #1]
   1155e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11562:	2e04      	cmp	r6, #4
   11564:	d12d      	bne.n	115c2 <tls_interface_setopt+0x126>
   11566:	683a      	ldr	r2, [r7, #0]
   11568:	2a02      	cmp	r2, #2
   1156a:	d82a      	bhi.n	115c2 <tls_interface_setopt+0x126>
   1156c:	4b1c      	ldr	r3, [pc, #112]	; (115e0 <tls_interface_setopt+0x144>)
   1156e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   11572:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   11576:	70a2      	strb	r2, [r4, #2]
   11578:	2000      	movs	r0, #0
   1157a:	e7f0      	b.n	1155e <tls_interface_setopt+0xc2>
   1157c:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   11580:	d01f      	beq.n	115c2 <tls_interface_setopt+0x126>
   11582:	f016 0403 	ands.w	r4, r6, #3
   11586:	d11c      	bne.n	115c2 <tls_interface_setopt+0x126>
   11588:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1158c:	00ad      	lsls	r5, r5, #2
   1158e:	4b14      	ldr	r3, [pc, #80]	; (115e0 <tls_interface_setopt+0x144>)
   11590:	1d28      	adds	r0, r5, #4
   11592:	4418      	add	r0, r3
   11594:	442b      	add	r3, r5
   11596:	4632      	mov	r2, r6
   11598:	4639      	mov	r1, r7
   1159a:	f883 c003 	strb.w	ip, [r3, #3]
   1159e:	f00a ff62 	bl	1c466 <memcpy>
   115a2:	4620      	mov	r0, r4
   115a4:	e7db      	b.n	1155e <tls_interface_setopt+0xc2>
   115a6:	2102      	movs	r1, #2
   115a8:	4a0d      	ldr	r2, [pc, #52]	; (115e0 <tls_interface_setopt+0x144>)
   115aa:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   115ae:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   115b2:	e7d4      	b.n	1155e <tls_interface_setopt+0xc2>
   115b4:	2009      	movs	r0, #9
   115b6:	f7fd febb 	bl	f330 <bsd_os_errno_set>
   115ba:	f04f 30ff 	mov.w	r0, #4294967295
   115be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115c2:	2016      	movs	r0, #22
   115c4:	e7f7      	b.n	115b6 <tls_interface_setopt+0x11a>
   115c6:	200c      	movs	r0, #12
   115c8:	e7f5      	b.n	115b6 <tls_interface_setopt+0x11a>
   115ca:	200e      	movs	r0, #14
   115cc:	f7fd feb0 	bl	f330 <bsd_os_errno_set>
   115d0:	f04f 30ff 	mov.w	r0, #4294967295
   115d4:	e7c3      	b.n	1155e <tls_interface_setopt+0xc2>
   115d6:	202a      	movs	r0, #42	; 0x2a
   115d8:	e7ed      	b.n	115b6 <tls_interface_setopt+0x11a>
   115da:	bf00      	nop
   115dc:	20020558 	.word	0x20020558
   115e0:	20020414 	.word	0x20020414

000115e4 <tls_interface_getopt>:
   115e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115e8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   115ec:	9f06      	ldr	r7, [sp, #24]
   115ee:	d112      	bne.n	11616 <tls_interface_getopt+0x32>
   115f0:	461d      	mov	r5, r3
   115f2:	b16b      	cbz	r3, 11610 <tls_interface_getopt+0x2c>
   115f4:	b167      	cbz	r7, 11610 <tls_interface_getopt+0x2c>
   115f6:	4606      	mov	r6, r0
   115f8:	4614      	mov	r4, r2
   115fa:	f004 fcd7 	bl	15fac <interface_socket_from_handle_get>
   115fe:	2800      	cmp	r0, #0
   11600:	d04f      	beq.n	116a2 <tls_interface_getopt+0xbe>
   11602:	3c01      	subs	r4, #1
   11604:	2c03      	cmp	r4, #3
   11606:	d852      	bhi.n	116ae <tls_interface_getopt+0xca>
   11608:	e8df f004 	tbb	[pc, r4]
   1160c:	09152139 	.word	0x09152139
   11610:	200e      	movs	r0, #14
   11612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1161a:	f003 bff9 	b.w	15610 <ip_interface_getopt>
   1161e:	683b      	ldr	r3, [r7, #0]
   11620:	2b04      	cmp	r3, #4
   11622:	d13c      	bne.n	1169e <tls_interface_getopt+0xba>
   11624:	4b23      	ldr	r3, [pc, #140]	; (116b4 <tls_interface_getopt+0xd0>)
   11626:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1162a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1162e:	78b3      	ldrb	r3, [r6, #2]
   11630:	2000      	movs	r0, #0
   11632:	602b      	str	r3, [r5, #0]
   11634:	e7ed      	b.n	11612 <tls_interface_getopt+0x2e>
   11636:	683b      	ldr	r3, [r7, #0]
   11638:	2b01      	cmp	r3, #1
   1163a:	d130      	bne.n	1169e <tls_interface_getopt+0xba>
   1163c:	4b1d      	ldr	r3, [pc, #116]	; (116b4 <tls_interface_getopt+0xd0>)
   1163e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   11642:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   11646:	7873      	ldrb	r3, [r6, #1]
   11648:	2000      	movs	r0, #0
   1164a:	702b      	strb	r3, [r5, #0]
   1164c:	e7e1      	b.n	11612 <tls_interface_getopt+0x2e>
   1164e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   11652:	4918      	ldr	r1, [pc, #96]	; (116b4 <tls_interface_getopt+0xd0>)
   11654:	683b      	ldr	r3, [r7, #0]
   11656:	00b6      	lsls	r6, r6, #2
   11658:	198a      	adds	r2, r1, r6
   1165a:	f013 0403 	ands.w	r4, r3, #3
   1165e:	78d0      	ldrb	r0, [r2, #3]
   11660:	d121      	bne.n	116a6 <tls_interface_getopt+0xc2>
   11662:	089b      	lsrs	r3, r3, #2
   11664:	4283      	cmp	r3, r0
   11666:	bf28      	it	cs
   11668:	4603      	movcs	r3, r0
   1166a:	009a      	lsls	r2, r3, #2
   1166c:	b1db      	cbz	r3, 116a6 <tls_interface_getopt+0xc2>
   1166e:	3604      	adds	r6, #4
   11670:	4431      	add	r1, r6
   11672:	603a      	str	r2, [r7, #0]
   11674:	4628      	mov	r0, r5
   11676:	f00a fef6 	bl	1c466 <memcpy>
   1167a:	4620      	mov	r0, r4
   1167c:	e7c9      	b.n	11612 <tls_interface_getopt+0x2e>
   1167e:	683b      	ldr	r3, [r7, #0]
   11680:	2b04      	cmp	r3, #4
   11682:	d10c      	bne.n	1169e <tls_interface_getopt+0xba>
   11684:	4b0b      	ldr	r3, [pc, #44]	; (116b4 <tls_interface_getopt+0xd0>)
   11686:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1168a:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1168e:	2000      	movs	r0, #0
   11690:	f1a3 0301 	sub.w	r3, r3, #1
   11694:	fab3 f383 	clz	r3, r3
   11698:	095b      	lsrs	r3, r3, #5
   1169a:	602b      	str	r3, [r5, #0]
   1169c:	e7b9      	b.n	11612 <tls_interface_getopt+0x2e>
   1169e:	2016      	movs	r0, #22
   116a0:	e7b7      	b.n	11612 <tls_interface_getopt+0x2e>
   116a2:	2009      	movs	r0, #9
   116a4:	e7b5      	b.n	11612 <tls_interface_getopt+0x2e>
   116a6:	2800      	cmp	r0, #0
   116a8:	d1f9      	bne.n	1169e <tls_interface_getopt+0xba>
   116aa:	6038      	str	r0, [r7, #0]
   116ac:	e7b1      	b.n	11612 <tls_interface_getopt+0x2e>
   116ae:	202a      	movs	r0, #42	; 0x2a
   116b0:	e7af      	b.n	11612 <tls_interface_getopt+0x2e>
   116b2:	bf00      	nop
   116b4:	20020414 	.word	0x20020414

000116b8 <tls_rpc_ip_event_handler>:
   116b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116ba:	f248 0581 	movw	r5, #32897	; 0x8081
   116be:	42ab      	cmp	r3, r5
   116c0:	460c      	mov	r4, r1
   116c2:	d062      	beq.n	1178a <tls_rpc_ip_event_handler+0xd2>
   116c4:	f249 0182 	movw	r1, #36994	; 0x9082
   116c8:	428b      	cmp	r3, r1
   116ca:	4606      	mov	r6, r0
   116cc:	d02e      	beq.n	1172c <tls_rpc_ip_event_handler+0x74>
   116ce:	f248 0102 	movw	r1, #32770	; 0x8002
   116d2:	428b      	cmp	r3, r1
   116d4:	d001      	beq.n	116da <tls_rpc_ip_event_handler+0x22>
   116d6:	2001      	movs	r0, #1
   116d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116da:	2c00      	cmp	r4, #0
   116dc:	d0fb      	beq.n	116d6 <tls_rpc_ip_event_handler+0x1e>
   116de:	6963      	ldr	r3, [r4, #20]
   116e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   116e4:	d002      	beq.n	116ec <tls_rpc_ip_event_handler+0x34>
   116e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   116ea:	d1f4      	bne.n	116d6 <tls_rpc_ip_event_handler+0x1e>
   116ec:	6823      	ldr	r3, [r4, #0]
   116ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   116f2:	6023      	str	r3, [r4, #0]
   116f4:	6955      	ldr	r5, [r2, #20]
   116f6:	2d00      	cmp	r5, #0
   116f8:	d156      	bne.n	117a8 <tls_rpc_ip_event_handler+0xf0>
   116fa:	6823      	ldr	r3, [r4, #0]
   116fc:	0c1b      	lsrs	r3, r3, #16
   116fe:	041b      	lsls	r3, r3, #16
   11700:	f043 0305 	orr.w	r3, r3, #5
   11704:	6023      	str	r3, [r4, #0]
   11706:	6823      	ldr	r3, [r4, #0]
   11708:	00da      	lsls	r2, r3, #3
   1170a:	d50d      	bpl.n	11728 <tls_rpc_ip_event_handler+0x70>
   1170c:	4b2b      	ldr	r3, [pc, #172]	; (117bc <tls_rpc_ip_event_handler+0x104>)
   1170e:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   11712:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   11716:	2b02      	cmp	r3, #2
   11718:	d106      	bne.n	11728 <tls_rpc_ip_event_handler+0x70>
   1171a:	4630      	mov	r0, r6
   1171c:	4621      	mov	r1, r4
   1171e:	f7ff fb9b 	bl	10e58 <secure_client_socket>
   11722:	b108      	cbz	r0, 11728 <tls_rpc_ip_event_handler+0x70>
   11724:	2873      	cmp	r0, #115	; 0x73
   11726:	d142      	bne.n	117ae <tls_rpc_ip_event_handler+0xf6>
   11728:	2000      	movs	r0, #0
   1172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1172c:	2c00      	cmp	r4, #0
   1172e:	d0fb      	beq.n	11728 <tls_rpc_ip_event_handler+0x70>
   11730:	6823      	ldr	r3, [r4, #0]
   11732:	b29b      	uxth	r3, r3
   11734:	2b0b      	cmp	r3, #11
   11736:	d1f7      	bne.n	11728 <tls_rpc_ip_event_handler+0x70>
   11738:	6915      	ldr	r5, [r2, #16]
   1173a:	2d00      	cmp	r5, #0
   1173c:	d134      	bne.n	117a8 <tls_rpc_ip_event_handler+0xf0>
   1173e:	6823      	ldr	r3, [r4, #0]
   11740:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   11744:	6023      	str	r3, [r4, #0]
   11746:	6823      	ldr	r3, [r4, #0]
   11748:	00db      	lsls	r3, r3, #3
   1174a:	d5ed      	bpl.n	11728 <tls_rpc_ip_event_handler+0x70>
   1174c:	4f1c      	ldr	r7, [pc, #112]	; (117c0 <tls_rpc_ip_event_handler+0x108>)
   1174e:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   11752:	b130      	cbz	r0, 11762 <tls_rpc_ip_event_handler+0xaa>
   11754:	f7ff fb18 	bl	10d88 <nrf_free>
   11758:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1175c:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   11760:	605d      	str	r5, [r3, #4]
   11762:	6823      	ldr	r3, [r4, #0]
   11764:	2000      	movs	r0, #0
   11766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1176a:	6023      	str	r3, [r4, #0]
   1176c:	6823      	ldr	r3, [r4, #0]
   1176e:	0c1b      	lsrs	r3, r3, #16
   11770:	041b      	lsls	r3, r3, #16
   11772:	f043 030c 	orr.w	r3, r3, #12
   11776:	6023      	str	r3, [r4, #0]
   11778:	6823      	ldr	r3, [r4, #0]
   1177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1177e:	6023      	str	r3, [r4, #0]
   11780:	6823      	ldr	r3, [r4, #0]
   11782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11786:	6023      	str	r3, [r4, #0]
   11788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1178a:	2900      	cmp	r1, #0
   1178c:	d0cc      	beq.n	11728 <tls_rpc_ip_event_handler+0x70>
   1178e:	680b      	ldr	r3, [r1, #0]
   11790:	b29b      	uxth	r3, r3
   11792:	2b0a      	cmp	r3, #10
   11794:	d1c8      	bne.n	11728 <tls_rpc_ip_event_handler+0x70>
   11796:	6950      	ldr	r0, [r2, #20]
   11798:	b938      	cbnz	r0, 117aa <tls_rpc_ip_event_handler+0xf2>
   1179a:	680b      	ldr	r3, [r1, #0]
   1179c:	0c1b      	lsrs	r3, r3, #16
   1179e:	041b      	lsls	r3, r3, #16
   117a0:	f043 030b 	orr.w	r3, r3, #11
   117a4:	600b      	str	r3, [r1, #0]
   117a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117a8:	4628      	mov	r0, r5
   117aa:	f002 ff35 	bl	14618 <rpc_error_to_nrf_bsd_error>
   117ae:	6060      	str	r0, [r4, #4]
   117b0:	6823      	ldr	r3, [r4, #0]
   117b2:	2000      	movs	r0, #0
   117b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   117b8:	6023      	str	r3, [r4, #0]
   117ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117bc:	20020414 	.word	0x20020414
   117c0:	20020558 	.word	0x20020558

000117c4 <rpc_dfu_event_handler>:
   117c4:	b508      	push	{r3, lr}
   117c6:	4a08      	ldr	r2, [pc, #32]	; (117e8 <rpc_dfu_event_handler+0x24>)
   117c8:	68c1      	ldr	r1, [r0, #12]
   117ca:	8812      	ldrh	r2, [r2, #0]
   117cc:	4603      	mov	r3, r0
   117ce:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   117d2:	d005      	beq.n	117e0 <rpc_dfu_event_handler+0x1c>
   117d4:	6800      	ldr	r0, [r0, #0]
   117d6:	b110      	cbz	r0, 117de <rpc_dfu_event_handler+0x1a>
   117d8:	f7fe ff06 	bl	105e8 <rpc_dfu_client_data_free>
   117dc:	2000      	movs	r0, #0
   117de:	bd08      	pop	{r3, pc}
   117e0:	4a02      	ldr	r2, [pc, #8]	; (117ec <rpc_dfu_event_handler+0x28>)
   117e2:	2001      	movs	r0, #1
   117e4:	6013      	str	r3, [r2, #0]
   117e6:	bd08      	pop	{r3, pc}
   117e8:	200213ec 	.word	0x200213ec
   117ec:	200205a4 	.word	0x200205a4

000117f0 <mfu_interface_init>:
   117f0:	2300      	movs	r3, #0
   117f2:	b510      	push	{r4, lr}
   117f4:	4808      	ldr	r0, [pc, #32]	; (11818 <mfu_interface_init+0x28>)
   117f6:	4909      	ldr	r1, [pc, #36]	; (1181c <mfu_interface_init+0x2c>)
   117f8:	4a09      	ldr	r2, [pc, #36]	; (11820 <mfu_interface_init+0x30>)
   117fa:	4c0a      	ldr	r4, [pc, #40]	; (11824 <mfu_interface_init+0x34>)
   117fc:	8003      	strh	r3, [r0, #0]
   117fe:	600b      	str	r3, [r1, #0]
   11800:	6013      	str	r3, [r2, #0]
   11802:	6023      	str	r3, [r4, #0]
   11804:	f7fe feba 	bl	1057c <rpc_dfu_client_init>
   11808:	b910      	cbnz	r0, 11810 <mfu_interface_init+0x20>
   1180a:	2301      	movs	r3, #1
   1180c:	6023      	str	r3, [r4, #0]
   1180e:	bd10      	pop	{r4, pc}
   11810:	f04f 30ff 	mov.w	r0, #4294967295
   11814:	bd10      	pop	{r4, pc}
   11816:	bf00      	nop
   11818:	200213ec 	.word	0x200213ec
   1181c:	200205a4 	.word	0x200205a4
   11820:	200205a0 	.word	0x200205a0
   11824:	20020598 	.word	0x20020598

00011828 <mfu_interface_open>:
   11828:	b508      	push	{r3, lr}
   1182a:	4b07      	ldr	r3, [pc, #28]	; (11848 <mfu_interface_open+0x20>)
   1182c:	681a      	ldr	r2, [r3, #0]
   1182e:	2a01      	cmp	r2, #1
   11830:	d103      	bne.n	1183a <mfu_interface_open+0x12>
   11832:	2202      	movs	r2, #2
   11834:	601a      	str	r2, [r3, #0]
   11836:	4805      	ldr	r0, [pc, #20]	; (1184c <mfu_interface_open+0x24>)
   11838:	bd08      	pop	{r3, pc}
   1183a:	2001      	movs	r0, #1
   1183c:	f7fd fd78 	bl	f330 <bsd_os_errno_set>
   11840:	f04f 30ff 	mov.w	r0, #4294967295
   11844:	bd08      	pop	{r3, pc}
   11846:	bf00      	nop
   11848:	20020598 	.word	0x20020598
   1184c:	49765432 	.word	0x49765432

00011850 <mfu_interface_close>:
   11850:	b5f0      	push	{r4, r5, r6, r7, lr}
   11852:	4c32      	ldr	r4, [pc, #200]	; (1191c <mfu_interface_close+0xcc>)
   11854:	b083      	sub	sp, #12
   11856:	6823      	ldr	r3, [r4, #0]
   11858:	1e9a      	subs	r2, r3, #2
   1185a:	2a01      	cmp	r2, #1
   1185c:	d857      	bhi.n	1190e <mfu_interface_close+0xbe>
   1185e:	2b03      	cmp	r3, #3
   11860:	d004      	beq.n	1186c <mfu_interface_close+0x1c>
   11862:	2301      	movs	r3, #1
   11864:	2000      	movs	r0, #0
   11866:	6023      	str	r3, [r4, #0]
   11868:	b003      	add	sp, #12
   1186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1186c:	2100      	movs	r1, #0
   1186e:	4668      	mov	r0, sp
   11870:	f7fe fe8a 	bl	10588 <rpc_dfu_client_request_alloc>
   11874:	4603      	mov	r3, r0
   11876:	2800      	cmp	r0, #0
   11878:	d13d      	bne.n	118f6 <mfu_interface_close+0xa6>
   1187a:	2104      	movs	r1, #4
   1187c:	4e28      	ldr	r6, [pc, #160]	; (11920 <mfu_interface_close+0xd0>)
   1187e:	9800      	ldr	r0, [sp, #0]
   11880:	8832      	ldrh	r2, [r6, #0]
   11882:	7201      	strb	r1, [r0, #8]
   11884:	3201      	adds	r2, #1
   11886:	b292      	uxth	r2, r2
   11888:	0411      	lsls	r1, r2, #16
   1188a:	f041 0106 	orr.w	r1, r1, #6
   1188e:	4d25      	ldr	r5, [pc, #148]	; (11924 <mfu_interface_close+0xd4>)
   11890:	60c1      	str	r1, [r0, #12]
   11892:	7103      	strb	r3, [r0, #4]
   11894:	7143      	strb	r3, [r0, #5]
   11896:	7183      	strb	r3, [r0, #6]
   11898:	71c3      	strb	r3, [r0, #7]
   1189a:	7243      	strb	r3, [r0, #9]
   1189c:	7283      	strb	r3, [r0, #10]
   1189e:	72c3      	strb	r3, [r0, #11]
   118a0:	2106      	movs	r1, #6
   118a2:	8032      	strh	r2, [r6, #0]
   118a4:	602b      	str	r3, [r5, #0]
   118a6:	f7fe fe83 	bl	105b0 <rpc_dfu_client_request_send>
   118aa:	b9d8      	cbnz	r0, 118e4 <mfu_interface_close+0x94>
   118ac:	f04f 33ff 	mov.w	r3, #4294967295
   118b0:	ae02      	add	r6, sp, #8
   118b2:	4627      	mov	r7, r4
   118b4:	f846 3d04 	str.w	r3, [r6, #-4]!
   118b8:	e004      	b.n	118c4 <mfu_interface_close+0x74>
   118ba:	4631      	mov	r1, r6
   118bc:	4638      	mov	r0, r7
   118be:	f7fd fca3 	bl	f208 <bsd_os_timedwait>
   118c2:	b9f0      	cbnz	r0, 11902 <mfu_interface_close+0xb2>
   118c4:	6828      	ldr	r0, [r5, #0]
   118c6:	2800      	cmp	r0, #0
   118c8:	d0f7      	beq.n	118ba <mfu_interface_close+0x6a>
   118ca:	6905      	ldr	r5, [r0, #16]
   118cc:	f7fe fe84 	bl	105d8 <rpc_dfu_client_message_free>
   118d0:	2d00      	cmp	r5, #0
   118d2:	d0c6      	beq.n	11862 <mfu_interface_close+0x12>
   118d4:	4b14      	ldr	r3, [pc, #80]	; (11928 <mfu_interface_close+0xd8>)
   118d6:	2008      	movs	r0, #8
   118d8:	601d      	str	r5, [r3, #0]
   118da:	f7fd fd29 	bl	f330 <bsd_os_errno_set>
   118de:	f04f 30ff 	mov.w	r0, #4294967295
   118e2:	e7c1      	b.n	11868 <mfu_interface_close+0x18>
   118e4:	9800      	ldr	r0, [sp, #0]
   118e6:	6803      	ldr	r3, [r0, #0]
   118e8:	b11b      	cbz	r3, 118f2 <mfu_interface_close+0xa2>
   118ea:	4618      	mov	r0, r3
   118ec:	f7fe fe7c 	bl	105e8 <rpc_dfu_client_data_free>
   118f0:	9800      	ldr	r0, [sp, #0]
   118f2:	f7fe fe71 	bl	105d8 <rpc_dfu_client_message_free>
   118f6:	200c      	movs	r0, #12
   118f8:	f7fd fd1a 	bl	f330 <bsd_os_errno_set>
   118fc:	f04f 30ff 	mov.w	r0, #4294967295
   11900:	e7b2      	b.n	11868 <mfu_interface_close+0x18>
   11902:	203c      	movs	r0, #60	; 0x3c
   11904:	f7fd fd14 	bl	f330 <bsd_os_errno_set>
   11908:	f04f 30ff 	mov.w	r0, #4294967295
   1190c:	e7ac      	b.n	11868 <mfu_interface_close+0x18>
   1190e:	2001      	movs	r0, #1
   11910:	f7fd fd0e 	bl	f330 <bsd_os_errno_set>
   11914:	f04f 30ff 	mov.w	r0, #4294967295
   11918:	e7a6      	b.n	11868 <mfu_interface_close+0x18>
   1191a:	bf00      	nop
   1191c:	20020598 	.word	0x20020598
   11920:	200213ec 	.word	0x200213ec
   11924:	200205a4 	.word	0x200205a4
   11928:	2002059c 	.word	0x2002059c

0001192c <mfu_interface_sendto>:
   1192c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11930:	4e64      	ldr	r6, [pc, #400]	; (11ac4 <mfu_interface_sendto+0x198>)
   11932:	460f      	mov	r7, r1
   11934:	6831      	ldr	r1, [r6, #0]
   11936:	4615      	mov	r5, r2
   11938:	1e8a      	subs	r2, r1, #2
   1193a:	2a01      	cmp	r2, #1
   1193c:	b082      	sub	sp, #8
   1193e:	f200 80b4 	bhi.w	11aaa <mfu_interface_sendto+0x17e>
   11942:	2f00      	cmp	r7, #0
   11944:	f000 80a5 	beq.w	11a92 <mfu_interface_sendto+0x166>
   11948:	2d00      	cmp	r5, #0
   1194a:	f000 80a2 	beq.w	11a92 <mfu_interface_sendto+0x166>
   1194e:	2b00      	cmp	r3, #0
   11950:	f040 80b1 	bne.w	11ab6 <mfu_interface_sendto+0x18a>
   11954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11956:	2b00      	cmp	r3, #0
   11958:	f040 80a1 	bne.w	11a9e <mfu_interface_sendto+0x172>
   1195c:	2902      	cmp	r1, #2
   1195e:	d04f      	beq.n	11a00 <mfu_interface_sendto+0xd4>
   11960:	46e8      	mov	r8, sp
   11962:	4640      	mov	r0, r8
   11964:	4629      	mov	r1, r5
   11966:	f7fe fe0f 	bl	10588 <rpc_dfu_client_request_alloc>
   1196a:	4606      	mov	r6, r0
   1196c:	b140      	cbz	r0, 11980 <mfu_interface_sendto+0x54>
   1196e:	200c      	movs	r0, #12
   11970:	f7fd fcde 	bl	f330 <bsd_os_errno_set>
   11974:	f04f 35ff 	mov.w	r5, #4294967295
   11978:	4628      	mov	r0, r5
   1197a:	b002      	add	sp, #8
   1197c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11980:	9b00      	ldr	r3, [sp, #0]
   11982:	4639      	mov	r1, r7
   11984:	6818      	ldr	r0, [r3, #0]
   11986:	462a      	mov	r2, r5
   11988:	f00a fd6d 	bl	1c466 <memcpy>
   1198c:	2104      	movs	r1, #4
   1198e:	4c4e      	ldr	r4, [pc, #312]	; (11ac8 <mfu_interface_sendto+0x19c>)
   11990:	9800      	ldr	r0, [sp, #0]
   11992:	8823      	ldrh	r3, [r4, #0]
   11994:	6045      	str	r5, [r0, #4]
   11996:	3301      	adds	r3, #1
   11998:	b29b      	uxth	r3, r3
   1199a:	041a      	lsls	r2, r3, #16
   1199c:	8023      	strh	r3, [r4, #0]
   1199e:	430a      	orrs	r2, r1
   119a0:	4c4a      	ldr	r4, [pc, #296]	; (11acc <mfu_interface_sendto+0x1a0>)
   119a2:	60c2      	str	r2, [r0, #12]
   119a4:	7246      	strb	r6, [r0, #9]
   119a6:	7286      	strb	r6, [r0, #10]
   119a8:	72c6      	strb	r6, [r0, #11]
   119aa:	7201      	strb	r1, [r0, #8]
   119ac:	6026      	str	r6, [r4, #0]
   119ae:	f7fe fdff 	bl	105b0 <rpc_dfu_client_request_send>
   119b2:	2800      	cmp	r0, #0
   119b4:	d163      	bne.n	11a7e <mfu_interface_sendto+0x152>
   119b6:	f04f 33ff 	mov.w	r3, #4294967295
   119ba:	ae02      	add	r6, sp, #8
   119bc:	4f41      	ldr	r7, [pc, #260]	; (11ac4 <mfu_interface_sendto+0x198>)
   119be:	f846 3d04 	str.w	r3, [r6, #-4]!
   119c2:	e004      	b.n	119ce <mfu_interface_sendto+0xa2>
   119c4:	4631      	mov	r1, r6
   119c6:	4638      	mov	r0, r7
   119c8:	f7fd fc1e 	bl	f208 <bsd_os_timedwait>
   119cc:	b978      	cbnz	r0, 119ee <mfu_interface_sendto+0xc2>
   119ce:	6820      	ldr	r0, [r4, #0]
   119d0:	2800      	cmp	r0, #0
   119d2:	d0f7      	beq.n	119c4 <mfu_interface_sendto+0x98>
   119d4:	6904      	ldr	r4, [r0, #16]
   119d6:	f7fe fdff 	bl	105d8 <rpc_dfu_client_message_free>
   119da:	2c00      	cmp	r4, #0
   119dc:	d0cc      	beq.n	11978 <mfu_interface_sendto+0x4c>
   119de:	4b3c      	ldr	r3, [pc, #240]	; (11ad0 <mfu_interface_sendto+0x1a4>)
   119e0:	2008      	movs	r0, #8
   119e2:	601c      	str	r4, [r3, #0]
   119e4:	f04f 35ff 	mov.w	r5, #4294967295
   119e8:	f7fd fca2 	bl	f330 <bsd_os_errno_set>
   119ec:	e7c4      	b.n	11978 <mfu_interface_sendto+0x4c>
   119ee:	f04f 35ff 	mov.w	r5, #4294967295
   119f2:	203c      	movs	r0, #60	; 0x3c
   119f4:	f7fd fc9c 	bl	f330 <bsd_os_errno_set>
   119f8:	4628      	mov	r0, r5
   119fa:	b002      	add	sp, #8
   119fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11a00:	46e8      	mov	r8, sp
   11a02:	4619      	mov	r1, r3
   11a04:	4640      	mov	r0, r8
   11a06:	f7fe fdbf 	bl	10588 <rpc_dfu_client_request_alloc>
   11a0a:	4602      	mov	r2, r0
   11a0c:	2800      	cmp	r0, #0
   11a0e:	d1ae      	bne.n	1196e <mfu_interface_sendto+0x42>
   11a10:	f04f 0c08 	mov.w	ip, #8
   11a14:	492c      	ldr	r1, [pc, #176]	; (11ac8 <mfu_interface_sendto+0x19c>)
   11a16:	482f      	ldr	r0, [pc, #188]	; (11ad4 <mfu_interface_sendto+0x1a8>)
   11a18:	880b      	ldrh	r3, [r1, #0]
   11a1a:	6804      	ldr	r4, [r0, #0]
   11a1c:	3301      	adds	r3, #1
   11a1e:	9800      	ldr	r0, [sp, #0]
   11a20:	b29b      	uxth	r3, r3
   11a22:	800b      	strh	r3, [r1, #0]
   11a24:	041b      	lsls	r3, r3, #16
   11a26:	f043 0303 	orr.w	r3, r3, #3
   11a2a:	6104      	str	r4, [r0, #16]
   11a2c:	4c27      	ldr	r4, [pc, #156]	; (11acc <mfu_interface_sendto+0x1a0>)
   11a2e:	60c3      	str	r3, [r0, #12]
   11a30:	7102      	strb	r2, [r0, #4]
   11a32:	7142      	strb	r2, [r0, #5]
   11a34:	7182      	strb	r2, [r0, #6]
   11a36:	71c2      	strb	r2, [r0, #7]
   11a38:	7242      	strb	r2, [r0, #9]
   11a3a:	7282      	strb	r2, [r0, #10]
   11a3c:	72c2      	strb	r2, [r0, #11]
   11a3e:	f880 c008 	strb.w	ip, [r0, #8]
   11a42:	2103      	movs	r1, #3
   11a44:	6022      	str	r2, [r4, #0]
   11a46:	f7fe fdb3 	bl	105b0 <rpc_dfu_client_request_send>
   11a4a:	b9c0      	cbnz	r0, 11a7e <mfu_interface_sendto+0x152>
   11a4c:	f04f 33ff 	mov.w	r3, #4294967295
   11a50:	f10d 0908 	add.w	r9, sp, #8
   11a54:	f849 3d04 	str.w	r3, [r9, #-4]!
   11a58:	46b2      	mov	sl, r6
   11a5a:	e005      	b.n	11a68 <mfu_interface_sendto+0x13c>
   11a5c:	4649      	mov	r1, r9
   11a5e:	4650      	mov	r0, sl
   11a60:	f7fd fbd2 	bl	f208 <bsd_os_timedwait>
   11a64:	2800      	cmp	r0, #0
   11a66:	d1c2      	bne.n	119ee <mfu_interface_sendto+0xc2>
   11a68:	6820      	ldr	r0, [r4, #0]
   11a6a:	2800      	cmp	r0, #0
   11a6c:	d0f6      	beq.n	11a5c <mfu_interface_sendto+0x130>
   11a6e:	6904      	ldr	r4, [r0, #16]
   11a70:	f7fe fdb2 	bl	105d8 <rpc_dfu_client_message_free>
   11a74:	2c00      	cmp	r4, #0
   11a76:	d1b2      	bne.n	119de <mfu_interface_sendto+0xb2>
   11a78:	2303      	movs	r3, #3
   11a7a:	6033      	str	r3, [r6, #0]
   11a7c:	e771      	b.n	11962 <mfu_interface_sendto+0x36>
   11a7e:	9800      	ldr	r0, [sp, #0]
   11a80:	6803      	ldr	r3, [r0, #0]
   11a82:	b11b      	cbz	r3, 11a8c <mfu_interface_sendto+0x160>
   11a84:	4618      	mov	r0, r3
   11a86:	f7fe fdaf 	bl	105e8 <rpc_dfu_client_data_free>
   11a8a:	9800      	ldr	r0, [sp, #0]
   11a8c:	f7fe fda4 	bl	105d8 <rpc_dfu_client_message_free>
   11a90:	e76d      	b.n	1196e <mfu_interface_sendto+0x42>
   11a92:	2016      	movs	r0, #22
   11a94:	f7fd fc4c 	bl	f330 <bsd_os_errno_set>
   11a98:	f04f 35ff 	mov.w	r5, #4294967295
   11a9c:	e76c      	b.n	11978 <mfu_interface_sendto+0x4c>
   11a9e:	2038      	movs	r0, #56	; 0x38
   11aa0:	f7fd fc46 	bl	f330 <bsd_os_errno_set>
   11aa4:	f04f 35ff 	mov.w	r5, #4294967295
   11aa8:	e766      	b.n	11978 <mfu_interface_sendto+0x4c>
   11aaa:	2001      	movs	r0, #1
   11aac:	f7fd fc40 	bl	f330 <bsd_os_errno_set>
   11ab0:	f04f 35ff 	mov.w	r5, #4294967295
   11ab4:	e760      	b.n	11978 <mfu_interface_sendto+0x4c>
   11ab6:	202d      	movs	r0, #45	; 0x2d
   11ab8:	f7fd fc3a 	bl	f330 <bsd_os_errno_set>
   11abc:	f04f 35ff 	mov.w	r5, #4294967295
   11ac0:	e75a      	b.n	11978 <mfu_interface_sendto+0x4c>
   11ac2:	bf00      	nop
   11ac4:	20020598 	.word	0x20020598
   11ac8:	200213ec 	.word	0x200213ec
   11acc:	200205a4 	.word	0x200205a4
   11ad0:	2002059c 	.word	0x2002059c
   11ad4:	200205a0 	.word	0x200205a0

00011ad8 <mfu_interface_setopt>:
   11ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ada:	4846      	ldr	r0, [pc, #280]	; (11bf4 <mfu_interface_setopt+0x11c>)
   11adc:	b083      	sub	sp, #12
   11ade:	6800      	ldr	r0, [r0, #0]
   11ae0:	3802      	subs	r0, #2
   11ae2:	2801      	cmp	r0, #1
   11ae4:	d877      	bhi.n	11bd6 <mfu_interface_setopt+0xfe>
   11ae6:	f240 2003 	movw	r0, #515	; 0x203
   11aea:	4281      	cmp	r1, r0
   11aec:	d16d      	bne.n	11bca <mfu_interface_setopt+0xf2>
   11aee:	3a04      	subs	r2, #4
   11af0:	2a03      	cmp	r2, #3
   11af2:	d85c      	bhi.n	11bae <mfu_interface_setopt+0xd6>
   11af4:	e8df f002 	tbb	[pc, r2]
   11af8:	514e024b 	.word	0x514e024b
   11afc:	2407      	movs	r4, #7
   11afe:	4625      	mov	r5, r4
   11b00:	2100      	movs	r1, #0
   11b02:	4668      	mov	r0, sp
   11b04:	f7fe fd40 	bl	10588 <rpc_dfu_client_request_alloc>
   11b08:	4603      	mov	r3, r0
   11b0a:	2800      	cmp	r0, #0
   11b0c:	d138      	bne.n	11b80 <mfu_interface_setopt+0xa8>
   11b0e:	2704      	movs	r7, #4
   11b10:	4e39      	ldr	r6, [pc, #228]	; (11bf8 <mfu_interface_setopt+0x120>)
   11b12:	9800      	ldr	r0, [sp, #0]
   11b14:	8832      	ldrh	r2, [r6, #0]
   11b16:	4629      	mov	r1, r5
   11b18:	3201      	adds	r2, #1
   11b1a:	b292      	uxth	r2, r2
   11b1c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   11b20:	4c36      	ldr	r4, [pc, #216]	; (11bfc <mfu_interface_setopt+0x124>)
   11b22:	60c5      	str	r5, [r0, #12]
   11b24:	7103      	strb	r3, [r0, #4]
   11b26:	7143      	strb	r3, [r0, #5]
   11b28:	7183      	strb	r3, [r0, #6]
   11b2a:	71c3      	strb	r3, [r0, #7]
   11b2c:	7243      	strb	r3, [r0, #9]
   11b2e:	7283      	strb	r3, [r0, #10]
   11b30:	72c3      	strb	r3, [r0, #11]
   11b32:	7207      	strb	r7, [r0, #8]
   11b34:	8032      	strh	r2, [r6, #0]
   11b36:	6023      	str	r3, [r4, #0]
   11b38:	f7fe fd3a 	bl	105b0 <rpc_dfu_client_request_send>
   11b3c:	b9b8      	cbnz	r0, 11b6e <mfu_interface_setopt+0x96>
   11b3e:	f04f 33ff 	mov.w	r3, #4294967295
   11b42:	ad02      	add	r5, sp, #8
   11b44:	4e2b      	ldr	r6, [pc, #172]	; (11bf4 <mfu_interface_setopt+0x11c>)
   11b46:	f845 3d04 	str.w	r3, [r5, #-4]!
   11b4a:	e005      	b.n	11b58 <mfu_interface_setopt+0x80>
   11b4c:	4629      	mov	r1, r5
   11b4e:	4630      	mov	r0, r6
   11b50:	f7fd fb5a 	bl	f208 <bsd_os_timedwait>
   11b54:	2800      	cmp	r0, #0
   11b56:	d131      	bne.n	11bbc <mfu_interface_setopt+0xe4>
   11b58:	6820      	ldr	r0, [r4, #0]
   11b5a:	2800      	cmp	r0, #0
   11b5c:	d0f6      	beq.n	11b4c <mfu_interface_setopt+0x74>
   11b5e:	6904      	ldr	r4, [r0, #16]
   11b60:	f7fe fd3a 	bl	105d8 <rpc_dfu_client_message_free>
   11b64:	2c00      	cmp	r4, #0
   11b66:	d13c      	bne.n	11be2 <mfu_interface_setopt+0x10a>
   11b68:	4620      	mov	r0, r4
   11b6a:	b003      	add	sp, #12
   11b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b6e:	9800      	ldr	r0, [sp, #0]
   11b70:	6803      	ldr	r3, [r0, #0]
   11b72:	b11b      	cbz	r3, 11b7c <mfu_interface_setopt+0xa4>
   11b74:	4618      	mov	r0, r3
   11b76:	f7fe fd37 	bl	105e8 <rpc_dfu_client_data_free>
   11b7a:	9800      	ldr	r0, [sp, #0]
   11b7c:	f7fe fd2c 	bl	105d8 <rpc_dfu_client_message_free>
   11b80:	200c      	movs	r0, #12
   11b82:	f7fd fbd5 	bl	f330 <bsd_os_errno_set>
   11b86:	f04f 30ff 	mov.w	r0, #4294967295
   11b8a:	b003      	add	sp, #12
   11b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b8e:	2405      	movs	r4, #5
   11b90:	4625      	mov	r5, r4
   11b92:	e7b5      	b.n	11b00 <mfu_interface_setopt+0x28>
   11b94:	2408      	movs	r4, #8
   11b96:	4625      	mov	r5, r4
   11b98:	e7b2      	b.n	11b00 <mfu_interface_setopt+0x28>
   11b9a:	b1b3      	cbz	r3, 11bca <mfu_interface_setopt+0xf2>
   11b9c:	9a08      	ldr	r2, [sp, #32]
   11b9e:	2a04      	cmp	r2, #4
   11ba0:	d113      	bne.n	11bca <mfu_interface_setopt+0xf2>
   11ba2:	2000      	movs	r0, #0
   11ba4:	681a      	ldr	r2, [r3, #0]
   11ba6:	4b16      	ldr	r3, [pc, #88]	; (11c00 <mfu_interface_setopt+0x128>)
   11ba8:	601a      	str	r2, [r3, #0]
   11baa:	b003      	add	sp, #12
   11bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bae:	202a      	movs	r0, #42	; 0x2a
   11bb0:	f7fd fbbe 	bl	f330 <bsd_os_errno_set>
   11bb4:	f04f 30ff 	mov.w	r0, #4294967295
   11bb8:	b003      	add	sp, #12
   11bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bbc:	203c      	movs	r0, #60	; 0x3c
   11bbe:	f7fd fbb7 	bl	f330 <bsd_os_errno_set>
   11bc2:	f04f 30ff 	mov.w	r0, #4294967295
   11bc6:	b003      	add	sp, #12
   11bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bca:	2016      	movs	r0, #22
   11bcc:	f7fd fbb0 	bl	f330 <bsd_os_errno_set>
   11bd0:	f04f 30ff 	mov.w	r0, #4294967295
   11bd4:	e7c9      	b.n	11b6a <mfu_interface_setopt+0x92>
   11bd6:	2001      	movs	r0, #1
   11bd8:	f7fd fbaa 	bl	f330 <bsd_os_errno_set>
   11bdc:	f04f 30ff 	mov.w	r0, #4294967295
   11be0:	e7c3      	b.n	11b6a <mfu_interface_setopt+0x92>
   11be2:	4b08      	ldr	r3, [pc, #32]	; (11c04 <mfu_interface_setopt+0x12c>)
   11be4:	2008      	movs	r0, #8
   11be6:	601c      	str	r4, [r3, #0]
   11be8:	f7fd fba2 	bl	f330 <bsd_os_errno_set>
   11bec:	f04f 30ff 	mov.w	r0, #4294967295
   11bf0:	e7bb      	b.n	11b6a <mfu_interface_setopt+0x92>
   11bf2:	bf00      	nop
   11bf4:	20020598 	.word	0x20020598
   11bf8:	200213ec 	.word	0x200213ec
   11bfc:	200205a4 	.word	0x200205a4
   11c00:	200205a0 	.word	0x200205a0
   11c04:	2002059c 	.word	0x2002059c

00011c08 <mfu_interface_getopt>:
   11c08:	f240 2003 	movw	r0, #515	; 0x203
   11c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c10:	4281      	cmp	r1, r0
   11c12:	b082      	sub	sp, #8
   11c14:	9e08      	ldr	r6, [sp, #32]
   11c16:	f040 80ae 	bne.w	11d76 <mfu_interface_getopt+0x16e>
   11c1a:	461d      	mov	r5, r3
   11c1c:	2b00      	cmp	r3, #0
   11c1e:	f000 80aa 	beq.w	11d76 <mfu_interface_getopt+0x16e>
   11c22:	2e00      	cmp	r6, #0
   11c24:	f000 80a7 	beq.w	11d76 <mfu_interface_getopt+0x16e>
   11c28:	4b5e      	ldr	r3, [pc, #376]	; (11da4 <mfu_interface_getopt+0x19c>)
   11c2a:	681b      	ldr	r3, [r3, #0]
   11c2c:	3b02      	subs	r3, #2
   11c2e:	2b01      	cmp	r3, #1
   11c30:	f200 80a7 	bhi.w	11d82 <mfu_interface_getopt+0x17a>
   11c34:	3a01      	subs	r2, #1
   11c36:	2a13      	cmp	r2, #19
   11c38:	d879      	bhi.n	11d2e <mfu_interface_getopt+0x126>
   11c3a:	e8df f002 	tbb	[pc, r2]
   11c3e:	5f17      	.short	0x5f17
   11c40:	78787878 	.word	0x78787878
   11c44:	78787872 	.word	0x78787872
   11c48:	78787878 	.word	0x78787878
   11c4c:	78787878 	.word	0x78787878
   11c50:	0a78      	.short	0x0a78
   11c52:	6833      	ldr	r3, [r6, #0]
   11c54:	2b04      	cmp	r3, #4
   11c56:	f040 808e 	bne.w	11d76 <mfu_interface_getopt+0x16e>
   11c5a:	2200      	movs	r2, #0
   11c5c:	4610      	mov	r0, r2
   11c5e:	4b52      	ldr	r3, [pc, #328]	; (11da8 <mfu_interface_getopt+0x1a0>)
   11c60:	6819      	ldr	r1, [r3, #0]
   11c62:	601a      	str	r2, [r3, #0]
   11c64:	6029      	str	r1, [r5, #0]
   11c66:	b002      	add	sp, #8
   11c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c6c:	6833      	ldr	r3, [r6, #0]
   11c6e:	2b24      	cmp	r3, #36	; 0x24
   11c70:	f040 8081 	bne.w	11d76 <mfu_interface_getopt+0x16e>
   11c74:	2401      	movs	r4, #1
   11c76:	46a0      	mov	r8, r4
   11c78:	2100      	movs	r1, #0
   11c7a:	4668      	mov	r0, sp
   11c7c:	f7fe fc84 	bl	10588 <rpc_dfu_client_request_alloc>
   11c80:	2800      	cmp	r0, #0
   11c82:	d146      	bne.n	11d12 <mfu_interface_getopt+0x10a>
   11c84:	4949      	ldr	r1, [pc, #292]	; (11dac <mfu_interface_getopt+0x1a4>)
   11c86:	9b00      	ldr	r3, [sp, #0]
   11c88:	880a      	ldrh	r2, [r1, #0]
   11c8a:	f1b8 0f03 	cmp.w	r8, #3
   11c8e:	f102 0201 	add.w	r2, r2, #1
   11c92:	b292      	uxth	r2, r2
   11c94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   11c98:	7118      	strb	r0, [r3, #4]
   11c9a:	800a      	strh	r2, [r1, #0]
   11c9c:	60dc      	str	r4, [r3, #12]
   11c9e:	7158      	strb	r0, [r3, #5]
   11ca0:	7198      	strb	r0, [r3, #6]
   11ca2:	71d8      	strb	r0, [r3, #7]
   11ca4:	d04b      	beq.n	11d3e <mfu_interface_getopt+0x136>
   11ca6:	2104      	movs	r1, #4
   11ca8:	2200      	movs	r2, #0
   11caa:	4f41      	ldr	r7, [pc, #260]	; (11db0 <mfu_interface_getopt+0x1a8>)
   11cac:	6099      	str	r1, [r3, #8]
   11cae:	4618      	mov	r0, r3
   11cb0:	4641      	mov	r1, r8
   11cb2:	603a      	str	r2, [r7, #0]
   11cb4:	f7fe fc7c 	bl	105b0 <rpc_dfu_client_request_send>
   11cb8:	2800      	cmp	r0, #0
   11cba:	d14d      	bne.n	11d58 <mfu_interface_getopt+0x150>
   11cbc:	f04f 33ff 	mov.w	r3, #4294967295
   11cc0:	ac02      	add	r4, sp, #8
   11cc2:	f844 3d04 	str.w	r3, [r4, #-4]!
   11cc6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 11da4 <mfu_interface_getopt+0x19c>
   11cca:	e005      	b.n	11cd8 <mfu_interface_getopt+0xd0>
   11ccc:	4621      	mov	r1, r4
   11cce:	4640      	mov	r0, r8
   11cd0:	f7fd fa9a 	bl	f208 <bsd_os_timedwait>
   11cd4:	2800      	cmp	r0, #0
   11cd6:	d137      	bne.n	11d48 <mfu_interface_getopt+0x140>
   11cd8:	6839      	ldr	r1, [r7, #0]
   11cda:	2900      	cmp	r1, #0
   11cdc:	d0f6      	beq.n	11ccc <mfu_interface_getopt+0xc4>
   11cde:	690c      	ldr	r4, [r1, #16]
   11ce0:	2c00      	cmp	r4, #0
   11ce2:	d154      	bne.n	11d8e <mfu_interface_getopt+0x186>
   11ce4:	6832      	ldr	r2, [r6, #0]
   11ce6:	3114      	adds	r1, #20
   11ce8:	4628      	mov	r0, r5
   11cea:	f00a fbbc 	bl	1c466 <memcpy>
   11cee:	6838      	ldr	r0, [r7, #0]
   11cf0:	f7fe fc72 	bl	105d8 <rpc_dfu_client_message_free>
   11cf4:	4620      	mov	r0, r4
   11cf6:	b002      	add	sp, #8
   11cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11cfc:	6833      	ldr	r3, [r6, #0]
   11cfe:	2b04      	cmp	r3, #4
   11d00:	d139      	bne.n	11d76 <mfu_interface_getopt+0x16e>
   11d02:	2402      	movs	r4, #2
   11d04:	2100      	movs	r1, #0
   11d06:	4668      	mov	r0, sp
   11d08:	46a0      	mov	r8, r4
   11d0a:	f7fe fc3d 	bl	10588 <rpc_dfu_client_request_alloc>
   11d0e:	2800      	cmp	r0, #0
   11d10:	d0b8      	beq.n	11c84 <mfu_interface_getopt+0x7c>
   11d12:	200c      	movs	r0, #12
   11d14:	f7fd fb0c 	bl	f330 <bsd_os_errno_set>
   11d18:	f04f 30ff 	mov.w	r0, #4294967295
   11d1c:	b002      	add	sp, #8
   11d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d22:	6833      	ldr	r3, [r6, #0]
   11d24:	2b04      	cmp	r3, #4
   11d26:	d126      	bne.n	11d76 <mfu_interface_getopt+0x16e>
   11d28:	2409      	movs	r4, #9
   11d2a:	46a0      	mov	r8, r4
   11d2c:	e7a4      	b.n	11c78 <mfu_interface_getopt+0x70>
   11d2e:	202a      	movs	r0, #42	; 0x2a
   11d30:	f7fd fafe 	bl	f330 <bsd_os_errno_set>
   11d34:	f04f 30ff 	mov.w	r0, #4294967295
   11d38:	b002      	add	sp, #8
   11d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d3e:	4a1d      	ldr	r2, [pc, #116]	; (11db4 <mfu_interface_getopt+0x1ac>)
   11d40:	2108      	movs	r1, #8
   11d42:	6812      	ldr	r2, [r2, #0]
   11d44:	611a      	str	r2, [r3, #16]
   11d46:	e7af      	b.n	11ca8 <mfu_interface_getopt+0xa0>
   11d48:	203c      	movs	r0, #60	; 0x3c
   11d4a:	f7fd faf1 	bl	f330 <bsd_os_errno_set>
   11d4e:	f04f 30ff 	mov.w	r0, #4294967295
   11d52:	b002      	add	sp, #8
   11d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d58:	9800      	ldr	r0, [sp, #0]
   11d5a:	6803      	ldr	r3, [r0, #0]
   11d5c:	b11b      	cbz	r3, 11d66 <mfu_interface_getopt+0x15e>
   11d5e:	4618      	mov	r0, r3
   11d60:	f7fe fc42 	bl	105e8 <rpc_dfu_client_data_free>
   11d64:	9800      	ldr	r0, [sp, #0]
   11d66:	f7fe fc37 	bl	105d8 <rpc_dfu_client_message_free>
   11d6a:	200c      	movs	r0, #12
   11d6c:	f7fd fae0 	bl	f330 <bsd_os_errno_set>
   11d70:	f04f 30ff 	mov.w	r0, #4294967295
   11d74:	e7d2      	b.n	11d1c <mfu_interface_getopt+0x114>
   11d76:	2016      	movs	r0, #22
   11d78:	f7fd fada 	bl	f330 <bsd_os_errno_set>
   11d7c:	f04f 30ff 	mov.w	r0, #4294967295
   11d80:	e771      	b.n	11c66 <mfu_interface_getopt+0x5e>
   11d82:	2001      	movs	r0, #1
   11d84:	f7fd fad4 	bl	f330 <bsd_os_errno_set>
   11d88:	f04f 30ff 	mov.w	r0, #4294967295
   11d8c:	e76b      	b.n	11c66 <mfu_interface_getopt+0x5e>
   11d8e:	4b06      	ldr	r3, [pc, #24]	; (11da8 <mfu_interface_getopt+0x1a0>)
   11d90:	2008      	movs	r0, #8
   11d92:	601c      	str	r4, [r3, #0]
   11d94:	f7fd facc 	bl	f330 <bsd_os_errno_set>
   11d98:	6838      	ldr	r0, [r7, #0]
   11d9a:	f7fe fc1d 	bl	105d8 <rpc_dfu_client_message_free>
   11d9e:	f04f 30ff 	mov.w	r0, #4294967295
   11da2:	e760      	b.n	11c66 <mfu_interface_getopt+0x5e>
   11da4:	20020598 	.word	0x20020598
   11da8:	2002059c 	.word	0x2002059c
   11dac:	200213ec 	.word	0x200213ec
   11db0:	200205a4 	.word	0x200205a4
   11db4:	200205a0 	.word	0x200205a0

00011db8 <bsd_platform_error_handler>:
   11db8:	b508      	push	{r3, lr}
   11dba:	f7fb fe6b 	bl	da94 <bsd_recoverable_error_handler>
   11dbe:	bd08      	pop	{r3, pc}

00011dc0 <bsd_init>:
   11dc0:	b510      	push	{r4, lr}
   11dc2:	4c06      	ldr	r4, [pc, #24]	; (11ddc <bsd_init+0x1c>)
   11dc4:	7823      	ldrb	r3, [r4, #0]
   11dc6:	b92b      	cbnz	r3, 11dd4 <bsd_init+0x14>
   11dc8:	f000 f818 	bl	11dfc <bsd_platform_init>
   11dcc:	b908      	cbnz	r0, 11dd2 <bsd_init+0x12>
   11dce:	2301      	movs	r3, #1
   11dd0:	7023      	strb	r3, [r4, #0]
   11dd2:	bd10      	pop	{r4, pc}
   11dd4:	f04f 30ff 	mov.w	r0, #4294967295
   11dd8:	bd10      	pop	{r4, pc}
   11dda:	bf00      	nop
   11ddc:	2002175c 	.word	0x2002175c

00011de0 <unimplemented_method>:
   11de0:	b40f      	push	{r0, r1, r2, r3}
   11de2:	b508      	push	{r3, lr}
   11de4:	202d      	movs	r0, #45	; 0x2d
   11de6:	f7fd faa3 	bl	f330 <bsd_os_errno_set>
   11dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11dee:	f04f 30ff 	mov.w	r0, #4294967295
   11df2:	b004      	add	sp, #16
   11df4:	4770      	bx	lr
   11df6:	bf00      	nop

00011df8 <rpc_transport_ipc_fault_handler>:
   11df8:	f7ff bfde 	b.w	11db8 <bsd_platform_error_handler>

00011dfc <bsd_platform_init>:
   11dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dfe:	b093      	sub	sp, #76	; 0x4c
   11e00:	f7fe fe2a 	bl	10a58 <nrf_mem_init>
   11e04:	2800      	cmp	r0, #0
   11e06:	d14c      	bne.n	11ea2 <bsd_platform_init+0xa6>
   11e08:	4928      	ldr	r1, [pc, #160]	; (11eac <bsd_platform_init+0xb0>)
   11e0a:	a801      	add	r0, sp, #4
   11e0c:	f7fe fe98 	bl	10b40 <nrf_mem_register>
   11e10:	2800      	cmp	r0, #0
   11e12:	d146      	bne.n	11ea2 <bsd_platform_init+0xa6>
   11e14:	f7fd fb78 	bl	f508 <bsd_os_init>
   11e18:	f004 f9fa 	bl	16210 <rpc_framework_init>
   11e1c:	2800      	cmp	r0, #0
   11e1e:	d140      	bne.n	11ea2 <bsd_platform_init+0xa6>
   11e20:	2320      	movs	r3, #32
   11e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   11e26:	2208      	movs	r2, #8
   11e28:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   11e2c:	4f20      	ldr	r7, [pc, #128]	; (11eb0 <bsd_platform_init+0xb4>)
   11e2e:	4e21      	ldr	r6, [pc, #132]	; (11eb4 <bsd_platform_init+0xb8>)
   11e30:	9303      	str	r3, [sp, #12]
   11e32:	9305      	str	r3, [sp, #20]
   11e34:	9307      	str	r3, [sp, #28]
   11e36:	4d20      	ldr	r5, [pc, #128]	; (11eb8 <bsd_platform_init+0xbc>)
   11e38:	9109      	str	r1, [sp, #36]	; 0x24
   11e3a:	910d      	str	r1, [sp, #52]	; 0x34
   11e3c:	4c1f      	ldr	r4, [pc, #124]	; (11ebc <bsd_platform_init+0xc0>)
   11e3e:	4920      	ldr	r1, [pc, #128]	; (11ec0 <bsd_platform_init+0xc4>)
   11e40:	4b20      	ldr	r3, [pc, #128]	; (11ec4 <bsd_platform_init+0xc8>)
   11e42:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   11e46:	eb0d 0002 	add.w	r0, sp, r2
   11e4a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   11e4e:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   11e52:	9702      	str	r7, [sp, #8]
   11e54:	9604      	str	r6, [sp, #16]
   11e56:	9506      	str	r5, [sp, #24]
   11e58:	9408      	str	r4, [sp, #32]
   11e5a:	910a      	str	r1, [sp, #40]	; 0x28
   11e5c:	930c      	str	r3, [sp, #48]	; 0x30
   11e5e:	f000 fbe9 	bl	12634 <rpc_transport_ipc_init>
   11e62:	b108      	cbz	r0, 11e68 <bsd_platform_init+0x6c>
   11e64:	b013      	add	sp, #76	; 0x4c
   11e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e68:	f003 ff6e 	bl	15d48 <interface_init>
   11e6c:	b9c8      	cbnz	r0, 11ea2 <bsd_platform_init+0xa6>
   11e6e:	f7fe fa3d 	bl	102ec <at_interface_init>
   11e72:	b9b0      	cbnz	r0, 11ea2 <bsd_platform_init+0xa6>
   11e74:	f002 fc22 	bl	146bc <ip_interface_init>
   11e78:	b998      	cbnz	r0, 11ea2 <bsd_platform_init+0xa6>
   11e7a:	f7ff f883 	bl	10f84 <tls_interface_init>
   11e7e:	b980      	cbnz	r0, 11ea2 <bsd_platform_init+0xa6>
   11e80:	f7ff fcb6 	bl	117f0 <mfu_interface_init>
   11e84:	b968      	cbnz	r0, 11ea2 <bsd_platform_init+0xa6>
   11e86:	f001 f9e9 	bl	1325c <pdn_interface_init>
   11e8a:	b950      	cbnz	r0, 11ea2 <bsd_platform_init+0xa6>
   11e8c:	f005 fc94 	bl	177b8 <gnss_interface_init>
   11e90:	b938      	cbnz	r0, 11ea2 <bsd_platform_init+0xa6>
   11e92:	f7fd fec3 	bl	fc1c <logobj_interface_init>
   11e96:	3000      	adds	r0, #0
   11e98:	bf18      	it	ne
   11e9a:	2001      	movne	r0, #1
   11e9c:	4240      	negs	r0, r0
   11e9e:	b013      	add	sp, #76	; 0x4c
   11ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ea2:	f04f 30ff 	mov.w	r0, #4294967295
   11ea6:	b013      	add	sp, #76	; 0x4c
   11ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11eaa:	bf00      	nop
   11eac:	0001d778 	.word	0x0001d778
   11eb0:	20010000 	.word	0x20010000
   11eb4:	20010040 	.word	0x20010040
   11eb8:	20010020 	.word	0x20010020
   11ebc:	20017060 	.word	0x20017060
   11ec0:	20010060 	.word	0x20010060
   11ec4:	20013060 	.word	0x20013060

00011ec8 <bsd_platform_af_method_table_get>:
   11ec8:	2805      	cmp	r0, #5
   11eca:	d02a      	beq.n	11f22 <bsd_platform_af_method_table_get+0x5a>
   11ecc:	b508      	push	{r3, lr}
   11ece:	d914      	bls.n	11efa <bsd_platform_af_method_table_get+0x32>
   11ed0:	280a      	cmp	r0, #10
   11ed2:	d016      	beq.n	11f02 <bsd_platform_af_method_table_get+0x3a>
   11ed4:	2866      	cmp	r0, #102	; 0x66
   11ed6:	d11f      	bne.n	11f18 <bsd_platform_af_method_table_get+0x50>
   11ed8:	f240 2302 	movw	r3, #514	; 0x202
   11edc:	429a      	cmp	r2, r3
   11ede:	d035      	beq.n	11f4c <bsd_platform_af_method_table_get+0x84>
   11ee0:	f240 2305 	movw	r3, #517	; 0x205
   11ee4:	429a      	cmp	r2, r3
   11ee6:	d035      	beq.n	11f54 <bsd_platform_af_method_table_get+0x8c>
   11ee8:	f240 2301 	movw	r3, #513	; 0x201
   11eec:	429a      	cmp	r2, r3
   11eee:	d02f      	beq.n	11f50 <bsd_platform_af_method_table_get+0x88>
   11ef0:	202b      	movs	r0, #43	; 0x2b
   11ef2:	f7fd fa1d 	bl	f330 <bsd_os_errno_set>
   11ef6:	2000      	movs	r0, #0
   11ef8:	bd08      	pop	{r3, pc}
   11efa:	2801      	cmp	r0, #1
   11efc:	d016      	beq.n	11f2c <bsd_platform_af_method_table_get+0x64>
   11efe:	2802      	cmp	r0, #2
   11f00:	d10a      	bne.n	11f18 <bsd_platform_af_method_table_get+0x50>
   11f02:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   11f06:	d21a      	bcs.n	11f3e <bsd_platform_af_method_table_get+0x76>
   11f08:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   11f0c:	d21a      	bcs.n	11f44 <bsd_platform_af_method_table_get+0x7c>
   11f0e:	3a01      	subs	r2, #1
   11f10:	2a01      	cmp	r2, #1
   11f12:	d8ed      	bhi.n	11ef0 <bsd_platform_af_method_table_get+0x28>
   11f14:	4810      	ldr	r0, [pc, #64]	; (11f58 <bsd_platform_af_method_table_get+0x90>)
   11f16:	bd08      	pop	{r3, pc}
   11f18:	2016      	movs	r0, #22
   11f1a:	f7fd fa09 	bl	f330 <bsd_os_errno_set>
   11f1e:	2000      	movs	r0, #0
   11f20:	bd08      	pop	{r3, pc}
   11f22:	2903      	cmp	r1, #3
   11f24:	480d      	ldr	r0, [pc, #52]	; (11f5c <bsd_platform_af_method_table_get+0x94>)
   11f26:	bf18      	it	ne
   11f28:	2000      	movne	r0, #0
   11f2a:	4770      	bx	lr
   11f2c:	f240 2303 	movw	r3, #515	; 0x203
   11f30:	429a      	cmp	r2, r3
   11f32:	d009      	beq.n	11f48 <bsd_platform_af_method_table_get+0x80>
   11f34:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   11f38:	d1da      	bne.n	11ef0 <bsd_platform_af_method_table_get+0x28>
   11f3a:	4809      	ldr	r0, [pc, #36]	; (11f60 <bsd_platform_af_method_table_get+0x98>)
   11f3c:	bd08      	pop	{r3, pc}
   11f3e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   11f42:	d1d5      	bne.n	11ef0 <bsd_platform_af_method_table_get+0x28>
   11f44:	4807      	ldr	r0, [pc, #28]	; (11f64 <bsd_platform_af_method_table_get+0x9c>)
   11f46:	bd08      	pop	{r3, pc}
   11f48:	4807      	ldr	r0, [pc, #28]	; (11f68 <bsd_platform_af_method_table_get+0xa0>)
   11f4a:	bd08      	pop	{r3, pc}
   11f4c:	4807      	ldr	r0, [pc, #28]	; (11f6c <bsd_platform_af_method_table_get+0xa4>)
   11f4e:	bd08      	pop	{r3, pc}
   11f50:	4807      	ldr	r0, [pc, #28]	; (11f70 <bsd_platform_af_method_table_get+0xa8>)
   11f52:	bd08      	pop	{r3, pc}
   11f54:	4807      	ldr	r0, [pc, #28]	; (11f74 <bsd_platform_af_method_table_get+0xac>)
   11f56:	bd08      	pop	{r3, pc}
   11f58:	0001d648 	.word	0x0001d648
   11f5c:	0001d738 	.word	0x0001d738
   11f60:	0001d6e8 	.word	0x0001d6e8
   11f64:	0001d670 	.word	0x0001d670
   11f68:	0001d698 	.word	0x0001d698
   11f6c:	0001d6c0 	.word	0x0001d6c0
   11f70:	0001d620 	.word	0x0001d620
   11f74:	0001d710 	.word	0x0001d710

00011f78 <bsd_platform_fd_method_table_get>:
   11f78:	b538      	push	{r3, r4, r5, lr}
   11f7a:	4605      	mov	r5, r0
   11f7c:	f004 f816 	bl	15fac <interface_socket_from_handle_get>
   11f80:	4604      	mov	r4, r0
   11f82:	b960      	cbnz	r0, 11f9e <bsd_platform_fd_method_table_get+0x26>
   11f84:	4b2c      	ldr	r3, [pc, #176]	; (12038 <bsd_platform_fd_method_table_get+0xc0>)
   11f86:	429d      	cmp	r5, r3
   11f88:	d02f      	beq.n	11fea <bsd_platform_fd_method_table_get+0x72>
   11f8a:	0c2b      	lsrs	r3, r5, #16
   11f8c:	4a2b      	ldr	r2, [pc, #172]	; (1203c <bsd_platform_fd_method_table_get+0xc4>)
   11f8e:	041b      	lsls	r3, r3, #16
   11f90:	4293      	cmp	r3, r2
   11f92:	d03d      	beq.n	12010 <bsd_platform_fd_method_table_get+0x98>
   11f94:	4b2a      	ldr	r3, [pc, #168]	; (12040 <bsd_platform_fd_method_table_get+0xc8>)
   11f96:	429d      	cmp	r5, r3
   11f98:	d149      	bne.n	1202e <bsd_platform_fd_method_table_get+0xb6>
   11f9a:	482a      	ldr	r0, [pc, #168]	; (12044 <bsd_platform_fd_method_table_get+0xcc>)
   11f9c:	bd38      	pop	{r3, r4, r5, pc}
   11f9e:	68c3      	ldr	r3, [r0, #12]
   11fa0:	6942      	ldr	r2, [r0, #20]
   11fa2:	2b05      	cmp	r3, #5
   11fa4:	d036      	beq.n	12014 <bsd_platform_fd_method_table_get+0x9c>
   11fa6:	d911      	bls.n	11fcc <bsd_platform_fd_method_table_get+0x54>
   11fa8:	2b0a      	cmp	r3, #10
   11faa:	d013      	beq.n	11fd4 <bsd_platform_fd_method_table_get+0x5c>
   11fac:	2b66      	cmp	r3, #102	; 0x66
   11fae:	d11e      	bne.n	11fee <bsd_platform_fd_method_table_get+0x76>
   11fb0:	f240 2302 	movw	r3, #514	; 0x202
   11fb4:	429a      	cmp	r2, r3
   11fb6:	d02b      	beq.n	12010 <bsd_platform_fd_method_table_get+0x98>
   11fb8:	f240 2305 	movw	r3, #517	; 0x205
   11fbc:	429a      	cmp	r2, r3
   11fbe:	d02f      	beq.n	12020 <bsd_platform_fd_method_table_get+0xa8>
   11fc0:	f240 2301 	movw	r3, #513	; 0x201
   11fc4:	429a      	cmp	r2, r3
   11fc6:	d11e      	bne.n	12006 <bsd_platform_fd_method_table_get+0x8e>
   11fc8:	481f      	ldr	r0, [pc, #124]	; (12048 <bsd_platform_fd_method_table_get+0xd0>)
   11fca:	bd38      	pop	{r3, r4, r5, pc}
   11fcc:	2b01      	cmp	r3, #1
   11fce:	d013      	beq.n	11ff8 <bsd_platform_fd_method_table_get+0x80>
   11fd0:	2b02      	cmp	r3, #2
   11fd2:	d10c      	bne.n	11fee <bsd_platform_fd_method_table_get+0x76>
   11fd4:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   11fd8:	d224      	bcs.n	12024 <bsd_platform_fd_method_table_get+0xac>
   11fda:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   11fde:	d224      	bcs.n	1202a <bsd_platform_fd_method_table_get+0xb2>
   11fe0:	3a01      	subs	r2, #1
   11fe2:	2a01      	cmp	r2, #1
   11fe4:	d80f      	bhi.n	12006 <bsd_platform_fd_method_table_get+0x8e>
   11fe6:	4819      	ldr	r0, [pc, #100]	; (1204c <bsd_platform_fd_method_table_get+0xd4>)
   11fe8:	bd38      	pop	{r3, r4, r5, pc}
   11fea:	4819      	ldr	r0, [pc, #100]	; (12050 <bsd_platform_fd_method_table_get+0xd8>)
   11fec:	bd38      	pop	{r3, r4, r5, pc}
   11fee:	2016      	movs	r0, #22
   11ff0:	f7fd f99e 	bl	f330 <bsd_os_errno_set>
   11ff4:	2000      	movs	r0, #0
   11ff6:	bd38      	pop	{r3, r4, r5, pc}
   11ff8:	f240 2303 	movw	r3, #515	; 0x203
   11ffc:	429a      	cmp	r2, r3
   11ffe:	d0f4      	beq.n	11fea <bsd_platform_fd_method_table_get+0x72>
   12000:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   12004:	d0c9      	beq.n	11f9a <bsd_platform_fd_method_table_get+0x22>
   12006:	202b      	movs	r0, #43	; 0x2b
   12008:	f7fd f992 	bl	f330 <bsd_os_errno_set>
   1200c:	2000      	movs	r0, #0
   1200e:	bd38      	pop	{r3, r4, r5, pc}
   12010:	4810      	ldr	r0, [pc, #64]	; (12054 <bsd_platform_fd_method_table_get+0xdc>)
   12012:	bd38      	pop	{r3, r4, r5, pc}
   12014:	6903      	ldr	r3, [r0, #16]
   12016:	4810      	ldr	r0, [pc, #64]	; (12058 <bsd_platform_fd_method_table_get+0xe0>)
   12018:	2b03      	cmp	r3, #3
   1201a:	bf18      	it	ne
   1201c:	2000      	movne	r0, #0
   1201e:	bd38      	pop	{r3, r4, r5, pc}
   12020:	480e      	ldr	r0, [pc, #56]	; (1205c <bsd_platform_fd_method_table_get+0xe4>)
   12022:	bd38      	pop	{r3, r4, r5, pc}
   12024:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   12028:	d1ed      	bne.n	12006 <bsd_platform_fd_method_table_get+0x8e>
   1202a:	480d      	ldr	r0, [pc, #52]	; (12060 <bsd_platform_fd_method_table_get+0xe8>)
   1202c:	bd38      	pop	{r3, r4, r5, pc}
   1202e:	2009      	movs	r0, #9
   12030:	f7fd f97e 	bl	f330 <bsd_os_errno_set>
   12034:	4620      	mov	r0, r4
   12036:	bd38      	pop	{r3, r4, r5, pc}
   12038:	49765432 	.word	0x49765432
   1203c:	789a0000 	.word	0x789a0000
   12040:	49765443 	.word	0x49765443
   12044:	0001d6e8 	.word	0x0001d6e8
   12048:	0001d620 	.word	0x0001d620
   1204c:	0001d648 	.word	0x0001d648
   12050:	0001d698 	.word	0x0001d698
   12054:	0001d6c0 	.word	0x0001d6c0
   12058:	0001d738 	.word	0x0001d738
   1205c:	0001d710 	.word	0x0001d710
   12060:	0001d670 	.word	0x0001d670

00012064 <bsd_platform_getaddrinfo>:
   12064:	f003 bad6 	b.w	15614 <ip_interface_getaddrinfo>

00012068 <bsd_platform_freeaddrinfo>:
   12068:	f003 bbca 	b.w	15800 <ip_interface_freeaddrinfo>

0001206c <bsd_platform_poll>:
   1206c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12070:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   12074:	b083      	sub	sp, #12
   12076:	9200      	str	r2, [sp, #0]
   12078:	2800      	cmp	r0, #0
   1207a:	d048      	beq.n	1210e <bsd_platform_poll+0xa2>
   1207c:	1e4b      	subs	r3, r1, #1
   1207e:	2b08      	cmp	r3, #8
   12080:	d845      	bhi.n	1210e <bsd_platform_poll+0xa2>
   12082:	4680      	mov	r8, r0
   12084:	4605      	mov	r5, r0
   12086:	2400      	movs	r4, #0
   12088:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   1208c:	88ab      	ldrh	r3, [r5, #4]
   1208e:	6828      	ldr	r0, [r5, #0]
   12090:	f003 0303 	and.w	r3, r3, #3
   12094:	a901      	add	r1, sp, #4
   12096:	f043 061c 	orr.w	r6, r3, #28
   1209a:	f003 ff95 	bl	15fc8 <interface_socket_event_get>
   1209e:	9b01      	ldr	r3, [sp, #4]
   120a0:	3508      	adds	r5, #8
   120a2:	4033      	ands	r3, r6
   120a4:	f825 3c02 	strh.w	r3, [r5, #-2]
   120a8:	b103      	cbz	r3, 120ac <bsd_platform_poll+0x40>
   120aa:	3401      	adds	r4, #1
   120ac:	42af      	cmp	r7, r5
   120ae:	d1ed      	bne.n	1208c <bsd_platform_poll+0x20>
   120b0:	bb9c      	cbnz	r4, 1211a <bsd_platform_poll+0xae>
   120b2:	4669      	mov	r1, sp
   120b4:	4640      	mov	r0, r8
   120b6:	f7fd f8a7 	bl	f208 <bsd_os_timedwait>
   120ba:	4607      	mov	r7, r0
   120bc:	b108      	cbz	r0, 120c2 <bsd_platform_poll+0x56>
   120be:	283c      	cmp	r0, #60	; 0x3c
   120c0:	d11d      	bne.n	120fe <bsd_platform_poll+0x92>
   120c2:	46c1      	mov	r9, r8
   120c4:	2600      	movs	r6, #0
   120c6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   120ca:	f8d9 0000 	ldr.w	r0, [r9]
   120ce:	f003 0303 	and.w	r3, r3, #3
   120d2:	a901      	add	r1, sp, #4
   120d4:	f043 041c 	orr.w	r4, r3, #28
   120d8:	f003 ff76 	bl	15fc8 <interface_socket_event_get>
   120dc:	9b01      	ldr	r3, [sp, #4]
   120de:	f109 0908 	add.w	r9, r9, #8
   120e2:	4023      	ands	r3, r4
   120e4:	f829 3c02 	strh.w	r3, [r9, #-2]
   120e8:	b103      	cbz	r3, 120ec <bsd_platform_poll+0x80>
   120ea:	3601      	adds	r6, #1
   120ec:	454d      	cmp	r5, r9
   120ee:	d1ea      	bne.n	120c6 <bsd_platform_poll+0x5a>
   120f0:	b90e      	cbnz	r6, 120f6 <bsd_platform_poll+0x8a>
   120f2:	2f00      	cmp	r7, #0
   120f4:	d0dd      	beq.n	120b2 <bsd_platform_poll+0x46>
   120f6:	4630      	mov	r0, r6
   120f8:	b003      	add	sp, #12
   120fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   120fe:	2023      	movs	r0, #35	; 0x23
   12100:	f7fd f916 	bl	f330 <bsd_os_errno_set>
   12104:	f04f 30ff 	mov.w	r0, #4294967295
   12108:	b003      	add	sp, #12
   1210a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1210e:	2016      	movs	r0, #22
   12110:	f7fd f90e 	bl	f330 <bsd_os_errno_set>
   12114:	f04f 30ff 	mov.w	r0, #4294967295
   12118:	e7ee      	b.n	120f8 <bsd_platform_poll+0x8c>
   1211a:	4620      	mov	r0, r4
   1211c:	e7ec      	b.n	120f8 <bsd_platform_poll+0x8c>
   1211e:	bf00      	nop

00012120 <bsd_platform_fcntl>:
   12120:	b508      	push	{r3, lr}
   12122:	4b06      	ldr	r3, [pc, #24]	; (1213c <bsd_platform_fcntl+0x1c>)
   12124:	4298      	cmp	r0, r3
   12126:	d003      	beq.n	12130 <bsd_platform_fcntl+0x10>
   12128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1212c:	f003 bfd6 	b.w	160dc <interface_socket_fcntl>
   12130:	202d      	movs	r0, #45	; 0x2d
   12132:	f7fd f8fd 	bl	f330 <bsd_os_errno_set>
   12136:	f04f 30ff 	mov.w	r0, #4294967295
   1213a:	bd08      	pop	{r3, pc}
   1213c:	49765432 	.word	0x49765432

00012140 <ipc_trace_init>:
   12140:	4b01      	ldr	r3, [pc, #4]	; (12148 <ipc_trace_init+0x8>)
   12142:	6018      	str	r0, [r3, #0]
   12144:	4770      	bx	lr
   12146:	bf00      	nop
   12148:	200205b4 	.word	0x200205b4

0001214c <bsd_os_trace_irq_handler>:
   1214c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1214e:	4b6c      	ldr	r3, [pc, #432]	; (12300 <bsd_os_trace_irq_handler+0x1b4>)
   12150:	b083      	sub	sp, #12
   12152:	781b      	ldrb	r3, [r3, #0]
   12154:	2b00      	cmp	r3, #0
   12156:	f000 80ad 	beq.w	122b4 <bsd_os_trace_irq_handler+0x168>
   1215a:	4b6a      	ldr	r3, [pc, #424]	; (12304 <bsd_os_trace_irq_handler+0x1b8>)
   1215c:	681c      	ldr	r4, [r3, #0]
   1215e:	68a2      	ldr	r2, [r4, #8]
   12160:	6863      	ldr	r3, [r4, #4]
   12162:	429a      	cmp	r2, r3
   12164:	d02d      	beq.n	121c2 <bsd_os_trace_irq_handler+0x76>
   12166:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1216a:	f8ad 3000 	strh.w	r3, [sp]
   1216e:	7823      	ldrb	r3, [r4, #0]
   12170:	466e      	mov	r6, sp
   12172:	f88d 3004 	strb.w	r3, [sp, #4]
   12176:	6863      	ldr	r3, [r4, #4]
   12178:	2105      	movs	r1, #5
   1217a:	429a      	cmp	r2, r3
   1217c:	bf2a      	itet	cs
   1217e:	6927      	ldrcs	r7, [r4, #16]
   12180:	1a9f      	subcc	r7, r3, r2
   12182:	1abf      	subcs	r7, r7, r2
   12184:	429a      	cmp	r2, r3
   12186:	bf94      	ite	ls
   12188:	2500      	movls	r5, #0
   1218a:	68e5      	ldrhi	r5, [r4, #12]
   1218c:	b2bf      	uxth	r7, r7
   1218e:	bf88      	it	hi
   12190:	1b5b      	subhi	r3, r3, r5
   12192:	4630      	mov	r0, r6
   12194:	bf88      	it	hi
   12196:	b29d      	uxthhi	r5, r3
   12198:	f8ad 7002 	strh.w	r7, [sp, #2]
   1219c:	f009 fa1f 	bl	1b5de <bsd_os_trace_put>
   121a0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   121a4:	68a0      	ldr	r0, [r4, #8]
   121a6:	f009 fa1a 	bl	1b5de <bsd_os_trace_put>
   121aa:	68a3      	ldr	r3, [r4, #8]
   121ac:	6922      	ldr	r2, [r4, #16]
   121ae:	441f      	add	r7, r3
   121b0:	4297      	cmp	r7, r2
   121b2:	bf08      	it	eq
   121b4:	68e3      	ldreq	r3, [r4, #12]
   121b6:	60a7      	str	r7, [r4, #8]
   121b8:	bf08      	it	eq
   121ba:	60a3      	streq	r3, [r4, #8]
   121bc:	2d00      	cmp	r5, #0
   121be:	f040 808d 	bne.w	122dc <bsd_os_trace_irq_handler+0x190>
   121c2:	4b51      	ldr	r3, [pc, #324]	; (12308 <bsd_os_trace_irq_handler+0x1bc>)
   121c4:	681c      	ldr	r4, [r3, #0]
   121c6:	68a2      	ldr	r2, [r4, #8]
   121c8:	6863      	ldr	r3, [r4, #4]
   121ca:	429a      	cmp	r2, r3
   121cc:	d02c      	beq.n	12228 <bsd_os_trace_irq_handler+0xdc>
   121ce:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   121d2:	f8ad 3000 	strh.w	r3, [sp]
   121d6:	7823      	ldrb	r3, [r4, #0]
   121d8:	466e      	mov	r6, sp
   121da:	f88d 3004 	strb.w	r3, [sp, #4]
   121de:	6863      	ldr	r3, [r4, #4]
   121e0:	2105      	movs	r1, #5
   121e2:	429a      	cmp	r2, r3
   121e4:	bf2a      	itet	cs
   121e6:	6927      	ldrcs	r7, [r4, #16]
   121e8:	1a9f      	subcc	r7, r3, r2
   121ea:	1abf      	subcs	r7, r7, r2
   121ec:	429a      	cmp	r2, r3
   121ee:	bf94      	ite	ls
   121f0:	2500      	movls	r5, #0
   121f2:	68e5      	ldrhi	r5, [r4, #12]
   121f4:	b2bf      	uxth	r7, r7
   121f6:	bf88      	it	hi
   121f8:	1b5b      	subhi	r3, r3, r5
   121fa:	4630      	mov	r0, r6
   121fc:	bf88      	it	hi
   121fe:	b29d      	uxthhi	r5, r3
   12200:	f8ad 7002 	strh.w	r7, [sp, #2]
   12204:	f009 f9eb 	bl	1b5de <bsd_os_trace_put>
   12208:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1220c:	68a0      	ldr	r0, [r4, #8]
   1220e:	f009 f9e6 	bl	1b5de <bsd_os_trace_put>
   12212:	68a3      	ldr	r3, [r4, #8]
   12214:	6922      	ldr	r2, [r4, #16]
   12216:	441f      	add	r7, r3
   12218:	4297      	cmp	r7, r2
   1221a:	bf08      	it	eq
   1221c:	68e3      	ldreq	r3, [r4, #12]
   1221e:	60a7      	str	r7, [r4, #8]
   12220:	bf08      	it	eq
   12222:	60a3      	streq	r3, [r4, #8]
   12224:	2d00      	cmp	r5, #0
   12226:	d148      	bne.n	122ba <bsd_os_trace_irq_handler+0x16e>
   12228:	4b38      	ldr	r3, [pc, #224]	; (1230c <bsd_os_trace_irq_handler+0x1c0>)
   1222a:	681c      	ldr	r4, [r3, #0]
   1222c:	68a2      	ldr	r2, [r4, #8]
   1222e:	6863      	ldr	r3, [r4, #4]
   12230:	429a      	cmp	r2, r3
   12232:	d02b      	beq.n	1228c <bsd_os_trace_irq_handler+0x140>
   12234:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   12238:	f8ad 3000 	strh.w	r3, [sp]
   1223c:	7823      	ldrb	r3, [r4, #0]
   1223e:	466e      	mov	r6, sp
   12240:	f88d 3004 	strb.w	r3, [sp, #4]
   12244:	6863      	ldr	r3, [r4, #4]
   12246:	2105      	movs	r1, #5
   12248:	429a      	cmp	r2, r3
   1224a:	bf2a      	itet	cs
   1224c:	6927      	ldrcs	r7, [r4, #16]
   1224e:	1a9f      	subcc	r7, r3, r2
   12250:	1abf      	subcs	r7, r7, r2
   12252:	429a      	cmp	r2, r3
   12254:	bf94      	ite	ls
   12256:	2500      	movls	r5, #0
   12258:	68e5      	ldrhi	r5, [r4, #12]
   1225a:	b2bf      	uxth	r7, r7
   1225c:	bf88      	it	hi
   1225e:	1b5b      	subhi	r3, r3, r5
   12260:	4630      	mov	r0, r6
   12262:	bf88      	it	hi
   12264:	b29d      	uxthhi	r5, r3
   12266:	f8ad 7002 	strh.w	r7, [sp, #2]
   1226a:	f009 f9b8 	bl	1b5de <bsd_os_trace_put>
   1226e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12272:	68a0      	ldr	r0, [r4, #8]
   12274:	f009 f9b3 	bl	1b5de <bsd_os_trace_put>
   12278:	68a3      	ldr	r3, [r4, #8]
   1227a:	6922      	ldr	r2, [r4, #16]
   1227c:	441f      	add	r7, r3
   1227e:	4297      	cmp	r7, r2
   12280:	bf08      	it	eq
   12282:	68e3      	ldreq	r3, [r4, #12]
   12284:	60a7      	str	r7, [r4, #8]
   12286:	bf08      	it	eq
   12288:	60a3      	streq	r3, [r4, #8]
   1228a:	b90d      	cbnz	r5, 12290 <bsd_os_trace_irq_handler+0x144>
   1228c:	b003      	add	sp, #12
   1228e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12290:	4630      	mov	r0, r6
   12292:	2105      	movs	r1, #5
   12294:	f8ad 5002 	strh.w	r5, [sp, #2]
   12298:	f009 f9a1 	bl	1b5de <bsd_os_trace_put>
   1229c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   122a0:	68e0      	ldr	r0, [r4, #12]
   122a2:	f009 f99c 	bl	1b5de <bsd_os_trace_put>
   122a6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   122aa:	68e3      	ldr	r3, [r4, #12]
   122ac:	4413      	add	r3, r2
   122ae:	60a3      	str	r3, [r4, #8]
   122b0:	b003      	add	sp, #12
   122b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   122b4:	f7fd f920 	bl	f4f8 <bsd_os_trace_irq_clear>
   122b8:	e74f      	b.n	1215a <bsd_os_trace_irq_handler+0xe>
   122ba:	2105      	movs	r1, #5
   122bc:	4630      	mov	r0, r6
   122be:	f8ad 5002 	strh.w	r5, [sp, #2]
   122c2:	f009 f98c 	bl	1b5de <bsd_os_trace_put>
   122c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   122ca:	68e0      	ldr	r0, [r4, #12]
   122cc:	f009 f987 	bl	1b5de <bsd_os_trace_put>
   122d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   122d4:	68e3      	ldr	r3, [r4, #12]
   122d6:	4413      	add	r3, r2
   122d8:	60a3      	str	r3, [r4, #8]
   122da:	e7a5      	b.n	12228 <bsd_os_trace_irq_handler+0xdc>
   122dc:	2105      	movs	r1, #5
   122de:	4630      	mov	r0, r6
   122e0:	f8ad 5002 	strh.w	r5, [sp, #2]
   122e4:	f009 f97b 	bl	1b5de <bsd_os_trace_put>
   122e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   122ec:	68e0      	ldr	r0, [r4, #12]
   122ee:	f009 f976 	bl	1b5de <bsd_os_trace_put>
   122f2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   122f6:	68e3      	ldr	r3, [r4, #12]
   122f8:	4413      	add	r3, r2
   122fa:	60a3      	str	r3, [r4, #8]
   122fc:	e761      	b.n	121c2 <bsd_os_trace_irq_handler+0x76>
   122fe:	bf00      	nop
   12300:	2002175d 	.word	0x2002175d
   12304:	200205b0 	.word	0x200205b0
   12308:	200205a8 	.word	0x200205a8
   1230c:	200205ac 	.word	0x200205ac

00012310 <ipc_trace_handle>:
   12310:	2200      	movs	r2, #0
   12312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12316:	4bb0      	ldr	r3, [pc, #704]	; (125d8 <_flash_used+0x28c>)
   12318:	b083      	sub	sp, #12
   1231a:	681b      	ldr	r3, [r3, #0]
   1231c:	6919      	ldr	r1, [r3, #16]
   1231e:	695c      	ldr	r4, [r3, #20]
   12320:	7c18      	ldrb	r0, [r3, #16]
   12322:	741a      	strb	r2, [r3, #16]
   12324:	7c58      	ldrb	r0, [r3, #17]
   12326:	745a      	strb	r2, [r3, #17]
   12328:	7c98      	ldrb	r0, [r3, #18]
   1232a:	749a      	strb	r2, [r3, #18]
   1232c:	7cd8      	ldrb	r0, [r3, #19]
   1232e:	74da      	strb	r2, [r3, #19]
   12330:	7d18      	ldrb	r0, [r3, #20]
   12332:	751a      	strb	r2, [r3, #20]
   12334:	7d58      	ldrb	r0, [r3, #21]
   12336:	755a      	strb	r2, [r3, #21]
   12338:	7d98      	ldrb	r0, [r3, #22]
   1233a:	759a      	strb	r2, [r3, #22]
   1233c:	7dd8      	ldrb	r0, [r3, #23]
   1233e:	75da      	strb	r2, [r3, #23]
   12340:	b1b9      	cbz	r1, 12372 <_flash_used+0x26>
   12342:	3901      	subs	r1, #1
   12344:	2903      	cmp	r1, #3
   12346:	d814      	bhi.n	12372 <_flash_used+0x26>
   12348:	e8df f011 	tbh	[pc, r1, lsl #1]
   1234c:	010300d6 	.word	0x010300d6
   12350:	00160004 	.word	0x00160004
   12354:	2501      	movs	r5, #1
   12356:	2003      	movs	r0, #3
   12358:	2200      	movs	r2, #0
   1235a:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1235e:	4c9f      	ldr	r4, [pc, #636]	; (125dc <_flash_used+0x290>)
   12360:	7025      	strb	r5, [r4, #0]
   12362:	7a1c      	ldrb	r4, [r3, #8]
   12364:	7218      	strb	r0, [r3, #8]
   12366:	7a58      	ldrb	r0, [r3, #9]
   12368:	725a      	strb	r2, [r3, #9]
   1236a:	7a98      	ldrb	r0, [r3, #10]
   1236c:	729a      	strb	r2, [r3, #10]
   1236e:	7ada      	ldrb	r2, [r3, #11]
   12370:	72d9      	strb	r1, [r3, #11]
   12372:	b003      	add	sp, #12
   12374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12378:	2104      	movs	r1, #4
   1237a:	2200      	movs	r2, #0
   1237c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   12380:	7a1c      	ldrb	r4, [r3, #8]
   12382:	7219      	strb	r1, [r3, #8]
   12384:	7a59      	ldrb	r1, [r3, #9]
   12386:	725a      	strb	r2, [r3, #9]
   12388:	4994      	ldr	r1, [pc, #592]	; (125dc <_flash_used+0x290>)
   1238a:	7a9c      	ldrb	r4, [r3, #10]
   1238c:	729a      	strb	r2, [r3, #10]
   1238e:	7adc      	ldrb	r4, [r3, #11]
   12390:	72d8      	strb	r0, [r3, #11]
   12392:	700a      	strb	r2, [r1, #0]
   12394:	780b      	ldrb	r3, [r1, #0]
   12396:	2b00      	cmp	r3, #0
   12398:	f000 8117 	beq.w	125ca <_flash_used+0x27e>
   1239c:	4b90      	ldr	r3, [pc, #576]	; (125e0 <_flash_used+0x294>)
   1239e:	681c      	ldr	r4, [r3, #0]
   123a0:	68a2      	ldr	r2, [r4, #8]
   123a2:	6863      	ldr	r3, [r4, #4]
   123a4:	429a      	cmp	r2, r3
   123a6:	d02d      	beq.n	12404 <_flash_used+0xb8>
   123a8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   123ac:	f8ad 3000 	strh.w	r3, [sp]
   123b0:	7823      	ldrb	r3, [r4, #0]
   123b2:	466e      	mov	r6, sp
   123b4:	f88d 3004 	strb.w	r3, [sp, #4]
   123b8:	6863      	ldr	r3, [r4, #4]
   123ba:	2105      	movs	r1, #5
   123bc:	429a      	cmp	r2, r3
   123be:	bf2a      	itet	cs
   123c0:	6927      	ldrcs	r7, [r4, #16]
   123c2:	1a9f      	subcc	r7, r3, r2
   123c4:	1abf      	subcs	r7, r7, r2
   123c6:	429a      	cmp	r2, r3
   123c8:	bf94      	ite	ls
   123ca:	2500      	movls	r5, #0
   123cc:	68e5      	ldrhi	r5, [r4, #12]
   123ce:	b2bf      	uxth	r7, r7
   123d0:	bf88      	it	hi
   123d2:	1b5b      	subhi	r3, r3, r5
   123d4:	4630      	mov	r0, r6
   123d6:	bf88      	it	hi
   123d8:	b29d      	uxthhi	r5, r3
   123da:	f8ad 7002 	strh.w	r7, [sp, #2]
   123de:	f009 f8fe 	bl	1b5de <bsd_os_trace_put>
   123e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   123e6:	68a0      	ldr	r0, [r4, #8]
   123e8:	f009 f8f9 	bl	1b5de <bsd_os_trace_put>
   123ec:	68a3      	ldr	r3, [r4, #8]
   123ee:	6922      	ldr	r2, [r4, #16]
   123f0:	441f      	add	r7, r3
   123f2:	4297      	cmp	r7, r2
   123f4:	bf08      	it	eq
   123f6:	68e3      	ldreq	r3, [r4, #12]
   123f8:	60a7      	str	r7, [r4, #8]
   123fa:	bf08      	it	eq
   123fc:	60a3      	streq	r3, [r4, #8]
   123fe:	2d00      	cmp	r5, #0
   12400:	f040 80d2 	bne.w	125a8 <_flash_used+0x25c>
   12404:	4b77      	ldr	r3, [pc, #476]	; (125e4 <_flash_used+0x298>)
   12406:	681c      	ldr	r4, [r3, #0]
   12408:	68a2      	ldr	r2, [r4, #8]
   1240a:	6863      	ldr	r3, [r4, #4]
   1240c:	429a      	cmp	r2, r3
   1240e:	d02d      	beq.n	1246c <_flash_used+0x120>
   12410:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   12414:	f8ad 3000 	strh.w	r3, [sp]
   12418:	7823      	ldrb	r3, [r4, #0]
   1241a:	466e      	mov	r6, sp
   1241c:	f88d 3004 	strb.w	r3, [sp, #4]
   12420:	6863      	ldr	r3, [r4, #4]
   12422:	2105      	movs	r1, #5
   12424:	429a      	cmp	r2, r3
   12426:	bf2a      	itet	cs
   12428:	6927      	ldrcs	r7, [r4, #16]
   1242a:	1a9f      	subcc	r7, r3, r2
   1242c:	1abf      	subcs	r7, r7, r2
   1242e:	429a      	cmp	r2, r3
   12430:	bf94      	ite	ls
   12432:	2500      	movls	r5, #0
   12434:	68e5      	ldrhi	r5, [r4, #12]
   12436:	b2bf      	uxth	r7, r7
   12438:	bf88      	it	hi
   1243a:	1b5b      	subhi	r3, r3, r5
   1243c:	4630      	mov	r0, r6
   1243e:	bf88      	it	hi
   12440:	b29d      	uxthhi	r5, r3
   12442:	f8ad 7002 	strh.w	r7, [sp, #2]
   12446:	f009 f8ca 	bl	1b5de <bsd_os_trace_put>
   1244a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1244e:	68a0      	ldr	r0, [r4, #8]
   12450:	f009 f8c5 	bl	1b5de <bsd_os_trace_put>
   12454:	68a3      	ldr	r3, [r4, #8]
   12456:	6922      	ldr	r2, [r4, #16]
   12458:	441f      	add	r7, r3
   1245a:	4297      	cmp	r7, r2
   1245c:	bf08      	it	eq
   1245e:	68e3      	ldreq	r3, [r4, #12]
   12460:	60a7      	str	r7, [r4, #8]
   12462:	bf08      	it	eq
   12464:	60a3      	streq	r3, [r4, #8]
   12466:	2d00      	cmp	r5, #0
   12468:	f040 808d 	bne.w	12586 <_flash_used+0x23a>
   1246c:	4b5e      	ldr	r3, [pc, #376]	; (125e8 <_flash_used+0x29c>)
   1246e:	681c      	ldr	r4, [r3, #0]
   12470:	68a2      	ldr	r2, [r4, #8]
   12472:	6863      	ldr	r3, [r4, #4]
   12474:	429a      	cmp	r2, r3
   12476:	f43f af7c 	beq.w	12372 <_flash_used+0x26>
   1247a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1247e:	f8ad 3000 	strh.w	r3, [sp]
   12482:	7823      	ldrb	r3, [r4, #0]
   12484:	466e      	mov	r6, sp
   12486:	f88d 3004 	strb.w	r3, [sp, #4]
   1248a:	6863      	ldr	r3, [r4, #4]
   1248c:	2105      	movs	r1, #5
   1248e:	429a      	cmp	r2, r3
   12490:	bf2a      	itet	cs
   12492:	6927      	ldrcs	r7, [r4, #16]
   12494:	1a9f      	subcc	r7, r3, r2
   12496:	1abf      	subcs	r7, r7, r2
   12498:	429a      	cmp	r2, r3
   1249a:	bf94      	ite	ls
   1249c:	2500      	movls	r5, #0
   1249e:	68e5      	ldrhi	r5, [r4, #12]
   124a0:	b2bf      	uxth	r7, r7
   124a2:	bf88      	it	hi
   124a4:	1b5b      	subhi	r3, r3, r5
   124a6:	4630      	mov	r0, r6
   124a8:	bf88      	it	hi
   124aa:	b29d      	uxthhi	r5, r3
   124ac:	f8ad 7002 	strh.w	r7, [sp, #2]
   124b0:	f009 f895 	bl	1b5de <bsd_os_trace_put>
   124b4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   124b8:	68a0      	ldr	r0, [r4, #8]
   124ba:	f009 f890 	bl	1b5de <bsd_os_trace_put>
   124be:	68a3      	ldr	r3, [r4, #8]
   124c0:	6922      	ldr	r2, [r4, #16]
   124c2:	441f      	add	r7, r3
   124c4:	4297      	cmp	r7, r2
   124c6:	bf08      	it	eq
   124c8:	68e3      	ldreq	r3, [r4, #12]
   124ca:	60a7      	str	r7, [r4, #8]
   124cc:	bf08      	it	eq
   124ce:	60a3      	streq	r3, [r4, #8]
   124d0:	2d00      	cmp	r5, #0
   124d2:	f43f af4e 	beq.w	12372 <_flash_used+0x26>
   124d6:	2105      	movs	r1, #5
   124d8:	4630      	mov	r0, r6
   124da:	f8ad 5002 	strh.w	r5, [sp, #2]
   124de:	f009 f87e 	bl	1b5de <bsd_os_trace_put>
   124e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   124e6:	68e0      	ldr	r0, [r4, #12]
   124e8:	f009 f879 	bl	1b5de <bsd_os_trace_put>
   124ec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   124f0:	68e3      	ldr	r3, [r4, #12]
   124f2:	4413      	add	r3, r2
   124f4:	60a3      	str	r3, [r4, #8]
   124f6:	e73c      	b.n	12372 <_flash_used+0x26>
   124f8:	4a38      	ldr	r2, [pc, #224]	; (125dc <_flash_used+0x290>)
   124fa:	7811      	ldrb	r1, [r2, #0]
   124fc:	b109      	cbz	r1, 12502 <_flash_used+0x1b6>
   124fe:	2100      	movs	r1, #0
   12500:	7011      	strb	r1, [r2, #0]
   12502:	68a5      	ldr	r5, [r4, #8]
   12504:	2d00      	cmp	r5, #0
   12506:	d039      	beq.n	1257c <_flash_used+0x230>
   12508:	f04f 0c00 	mov.w	ip, #0
   1250c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 125e4 <_flash_used+0x298>
   12510:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 125e0 <_flash_used+0x294>
   12514:	4934      	ldr	r1, [pc, #208]	; (125e8 <_flash_used+0x29c>)
   12516:	46e1      	mov	r9, ip
   12518:	4666      	mov	r6, ip
   1251a:	4662      	mov	r2, ip
   1251c:	f8d1 e000 	ldr.w	lr, [r1]
   12520:	f8da 8000 	ldr.w	r8, [sl]
   12524:	f8db 7000 	ldr.w	r7, [fp]
   12528:	e008      	b.n	1253c <_flash_used+0x1f0>
   1252a:	2963      	cmp	r1, #99	; 0x63
   1252c:	d016      	beq.n	1255c <_flash_used+0x210>
   1252e:	2961      	cmp	r1, #97	; 0x61
   12530:	bf04      	itt	eq
   12532:	4607      	moveq	r7, r0
   12534:	2601      	moveq	r6, #1
   12536:	3201      	adds	r2, #1
   12538:	42aa      	cmp	r2, r5
   1253a:	d013      	beq.n	12564 <_flash_used+0x218>
   1253c:	1c91      	adds	r1, r2, #2
   1253e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   12542:	6848      	ldr	r0, [r1, #4]
   12544:	7801      	ldrb	r1, [r0, #0]
   12546:	2962      	cmp	r1, #98	; 0x62
   12548:	d1ef      	bne.n	1252a <_flash_used+0x1de>
   1254a:	4680      	mov	r8, r0
   1254c:	f04f 0901 	mov.w	r9, #1
   12550:	e7f1      	b.n	12536 <_flash_used+0x1ea>
   12552:	f7fc ffc9 	bl	f4e8 <bsd_os_trace_irq_set>
   12556:	b003      	add	sp, #12
   12558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1255c:	4686      	mov	lr, r0
   1255e:	f04f 0c01 	mov.w	ip, #1
   12562:	e7e8      	b.n	12536 <_flash_used+0x1ea>
   12564:	bba6      	cbnz	r6, 125d0 <_flash_used+0x284>
   12566:	f1b9 0f00 	cmp.w	r9, #0
   1256a:	d001      	beq.n	12570 <_flash_used+0x224>
   1256c:	f8ca 8000 	str.w	r8, [sl]
   12570:	f1bc 0f00 	cmp.w	ip, #0
   12574:	d002      	beq.n	1257c <_flash_used+0x230>
   12576:	4a1c      	ldr	r2, [pc, #112]	; (125e8 <_flash_used+0x29c>)
   12578:	f8c2 e000 	str.w	lr, [r2]
   1257c:	2001      	movs	r0, #1
   1257e:	2200      	movs	r2, #0
   12580:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   12584:	e6ed      	b.n	12362 <_flash_used+0x16>
   12586:	2105      	movs	r1, #5
   12588:	4630      	mov	r0, r6
   1258a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1258e:	f009 f826 	bl	1b5de <bsd_os_trace_put>
   12592:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12596:	68e0      	ldr	r0, [r4, #12]
   12598:	f009 f821 	bl	1b5de <bsd_os_trace_put>
   1259c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   125a0:	68e3      	ldr	r3, [r4, #12]
   125a2:	4413      	add	r3, r2
   125a4:	60a3      	str	r3, [r4, #8]
   125a6:	e761      	b.n	1246c <_flash_used+0x120>
   125a8:	2105      	movs	r1, #5
   125aa:	4630      	mov	r0, r6
   125ac:	f8ad 5002 	strh.w	r5, [sp, #2]
   125b0:	f009 f815 	bl	1b5de <bsd_os_trace_put>
   125b4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   125b8:	68e0      	ldr	r0, [r4, #12]
   125ba:	f009 f810 	bl	1b5de <bsd_os_trace_put>
   125be:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   125c2:	68e3      	ldr	r3, [r4, #12]
   125c4:	4413      	add	r3, r2
   125c6:	60a3      	str	r3, [r4, #8]
   125c8:	e71c      	b.n	12404 <_flash_used+0xb8>
   125ca:	f7fc ff95 	bl	f4f8 <bsd_os_trace_irq_clear>
   125ce:	e6e5      	b.n	1239c <_flash_used+0x50>
   125d0:	f8cb 7000 	str.w	r7, [fp]
   125d4:	e7c7      	b.n	12566 <_flash_used+0x21a>
   125d6:	bf00      	nop
   125d8:	200205b4 	.word	0x200205b4
   125dc:	2002175d 	.word	0x2002175d
   125e0:	200205b0 	.word	0x200205b0
   125e4:	200205a8 	.word	0x200205a8
   125e8:	200205ac 	.word	0x200205ac

000125ec <rpc_trace_coredump_in_progress>:
   125ec:	4b01      	ldr	r3, [pc, #4]	; (125f4 <rpc_trace_coredump_in_progress+0x8>)
   125ee:	7818      	ldrb	r0, [r3, #0]
   125f0:	4770      	bx	lr
   125f2:	bf00      	nop
   125f4:	2002175d 	.word	0x2002175d

000125f8 <transport_reset>:
   125f8:	2000      	movs	r0, #0
   125fa:	4770      	bx	lr

000125fc <transport_data_free>:
   125fc:	4b0b      	ldr	r3, [pc, #44]	; (1262c <transport_data_free+0x30>)
   125fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   12602:	4413      	add	r3, r2
   12604:	4298      	cmp	r0, r3
   12606:	d20d      	bcs.n	12624 <transport_data_free+0x28>
   12608:	4282      	cmp	r2, r0
   1260a:	d80b      	bhi.n	12624 <transport_data_free+0x28>
   1260c:	b510      	push	{r4, lr}
   1260e:	4604      	mov	r4, r0
   12610:	f000 fd5a 	bl	130c8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   12614:	b140      	cbz	r0, 12628 <transport_data_free+0x2c>
   12616:	4a06      	ldr	r2, [pc, #24]	; (12630 <transport_data_free+0x34>)
   12618:	6084      	str	r4, [r0, #8]
   1261a:	6002      	str	r2, [r0, #0]
   1261c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12620:	f000 bc9a 	b.w	12f58 <rpc_transport_ipc_tx_send>
   12624:	f7fe bbc6 	b.w	10db4 <nrf_shared_free>
   12628:	bd10      	pop	{r4, pc}
   1262a:	bf00      	nop
   1262c:	200205b8 	.word	0x200205b8
   12630:	00020001 	.word	0x00020001

00012634 <rpc_transport_ipc_init>:
   12634:	2800      	cmp	r0, #0
   12636:	d02b      	beq.n	12690 <rpc_transport_ipc_init+0x5c>
   12638:	b530      	push	{r4, r5, lr}
   1263a:	b089      	sub	sp, #36	; 0x24
   1263c:	aa01      	add	r2, sp, #4
   1263e:	4669      	mov	r1, sp
   12640:	4604      	mov	r4, r0
   12642:	f000 fb9f 	bl	12d84 <rpc_transport_ipc_tx_init>
   12646:	4603      	mov	r3, r0
   12648:	b140      	cbz	r0, 1265c <rpc_transport_ipc_init+0x28>
   1264a:	4a13      	ldr	r2, [pc, #76]	; (12698 <rpc_transport_ipc_init+0x64>)
   1264c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12650:	c803      	ldmia	r0, {r0, r1}
   12652:	e882 0003 	stmia.w	r2, {r0, r1}
   12656:	4618      	mov	r0, r3
   12658:	b009      	add	sp, #36	; 0x24
   1265a:	bd30      	pop	{r4, r5, pc}
   1265c:	e9dd 1200 	ldrd	r1, r2, [sp]
   12660:	4620      	mov	r0, r4
   12662:	f000 f84b 	bl	126fc <rpc_transport_ipc_rx_init>
   12666:	4603      	mov	r3, r0
   12668:	2800      	cmp	r0, #0
   1266a:	d1ee      	bne.n	1264a <rpc_transport_ipc_init+0x16>
   1266c:	4b0b      	ldr	r3, [pc, #44]	; (1269c <rpc_transport_ipc_init+0x68>)
   1266e:	490c      	ldr	r1, [pc, #48]	; (126a0 <rpc_transport_ipc_init+0x6c>)
   12670:	480c      	ldr	r0, [pc, #48]	; (126a4 <rpc_transport_ipc_init+0x70>)
   12672:	4a0d      	ldr	r2, [pc, #52]	; (126a8 <rpc_transport_ipc_init+0x74>)
   12674:	9303      	str	r3, [sp, #12]
   12676:	4d0d      	ldr	r5, [pc, #52]	; (126ac <rpc_transport_ipc_init+0x78>)
   12678:	4b0d      	ldr	r3, [pc, #52]	; (126b0 <rpc_transport_ipc_init+0x7c>)
   1267a:	9104      	str	r1, [sp, #16]
   1267c:	9005      	str	r0, [sp, #20]
   1267e:	490d      	ldr	r1, [pc, #52]	; (126b4 <rpc_transport_ipc_init+0x80>)
   12680:	a802      	add	r0, sp, #8
   12682:	9307      	str	r3, [sp, #28]
   12684:	9506      	str	r5, [sp, #24]
   12686:	9202      	str	r2, [sp, #8]
   12688:	f003 ff44 	bl	16514 <rpc_transport_register>
   1268c:	4603      	mov	r3, r0
   1268e:	e7dc      	b.n	1264a <rpc_transport_ipc_init+0x16>
   12690:	230e      	movs	r3, #14
   12692:	4618      	mov	r0, r3
   12694:	4770      	bx	lr
   12696:	bf00      	nop
   12698:	200205b8 	.word	0x200205b8
   1269c:	00013059 	.word	0x00013059
   126a0:	00013129 	.word	0x00013129
   126a4:	00012d19 	.word	0x00012d19
   126a8:	00012f59 	.word	0x00012f59
   126ac:	000125fd 	.word	0x000125fd
   126b0:	000125f9 	.word	0x000125f9
   126b4:	200205c0 	.word	0x200205c0

000126b8 <rpc_transport_rx_handle>:
   126b8:	b160      	cbz	r0, 126d4 <rpc_transport_rx_handle+0x1c>
   126ba:	b508      	push	{r3, lr}
   126bc:	6843      	ldr	r3, [r0, #4]
   126be:	b2db      	uxtb	r3, r3
   126c0:	2b02      	cmp	r3, #2
   126c2:	d00e      	beq.n	126e2 <rpc_transport_rx_handle+0x2a>
   126c4:	6803      	ldr	r3, [r0, #0]
   126c6:	0c1b      	lsrs	r3, r3, #16
   126c8:	2b02      	cmp	r3, #2
   126ca:	d005      	beq.n	126d8 <rpc_transport_rx_handle+0x20>
   126cc:	2b04      	cmp	r3, #4
   126ce:	d00e      	beq.n	126ee <rpc_transport_rx_handle+0x36>
   126d0:	2000      	movs	r0, #0
   126d2:	bd08      	pop	{r3, pc}
   126d4:	2000      	movs	r0, #0
   126d6:	4770      	bx	lr
   126d8:	6880      	ldr	r0, [r0, #8]
   126da:	f7fe fb6b 	bl	10db4 <nrf_shared_free>
   126de:	2000      	movs	r0, #0
   126e0:	bd08      	pop	{r3, pc}
   126e2:	4601      	mov	r1, r0
   126e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   126e8:	4803      	ldr	r0, [pc, #12]	; (126f8 <rpc_transport_rx_handle+0x40>)
   126ea:	f003 be05 	b.w	162f8 <rpc_transport_input>
   126ee:	4802      	ldr	r0, [pc, #8]	; (126f8 <rpc_transport_rx_handle+0x40>)
   126f0:	f003 ff70 	bl	165d4 <rpc_transport_unregister>
   126f4:	2000      	movs	r0, #0
   126f6:	bd08      	pop	{r3, pc}
   126f8:	200205c0 	.word	0x200205c0

000126fc <rpc_transport_ipc_rx_init>:
   126fc:	2800      	cmp	r0, #0
   126fe:	f000 80ff 	beq.w	12900 <rpc_transport_ipc_rx_init+0x204>
   12702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12706:	6805      	ldr	r5, [r0, #0]
   12708:	b095      	sub	sp, #84	; 0x54
   1270a:	2d00      	cmp	r5, #0
   1270c:	f000 80ee 	beq.w	128ec <rpc_transport_ipc_rx_init+0x1f0>
   12710:	6883      	ldr	r3, [r0, #8]
   12712:	2b00      	cmp	r3, #0
   12714:	f000 80ea 	beq.w	128ec <rpc_transport_ipc_rx_init+0x1f0>
   12718:	6907      	ldr	r7, [r0, #16]
   1271a:	2f00      	cmp	r7, #0
   1271c:	f000 80e6 	beq.w	128ec <rpc_transport_ipc_rx_init+0x1f0>
   12720:	6a84      	ldr	r4, [r0, #40]	; 0x28
   12722:	2c00      	cmp	r4, #0
   12724:	f000 80e2 	beq.w	128ec <rpc_transport_ipc_rx_init+0x1f0>
   12728:	6844      	ldr	r4, [r0, #4]
   1272a:	2c1b      	cmp	r4, #27
   1272c:	f240 80e3 	bls.w	128f6 <rpc_transport_ipc_rx_init+0x1fa>
   12730:	68c4      	ldr	r4, [r0, #12]
   12732:	2c0b      	cmp	r4, #11
   12734:	f240 80df 	bls.w	128f6 <rpc_transport_ipc_rx_init+0x1fa>
   12738:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1273c:	f1be 0f17 	cmp.w	lr, #23
   12740:	f240 80d9 	bls.w	128f6 <rpc_transport_ipc_rx_init+0x1fa>
   12744:	2600      	movs	r6, #0
   12746:	4604      	mov	r4, r0
   12748:	486f      	ldr	r0, [pc, #444]	; (12908 <rpc_transport_ipc_rx_init+0x20c>)
   1274a:	e9cd 1200 	strd	r1, r2, [sp]
   1274e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 12928 <rpc_transport_ipc_rx_init+0x22c>
   12752:	496e      	ldr	r1, [pc, #440]	; (1290c <rpc_transport_ipc_rx_init+0x210>)
   12754:	8006      	strh	r6, [r0, #0]
   12756:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   12758:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 1292c <rpc_transport_ipc_rx_init+0x230>
   1275c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 12930 <rpc_transport_ipc_rx_init+0x234>
   12760:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 12934 <rpc_transport_ipc_rx_init+0x238>
   12764:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 12938 <rpc_transport_ipc_rx_init+0x23c>
   12768:	4672      	mov	r2, lr
   1276a:	600e      	str	r6, [r1, #0]
   1276c:	f8ca 0000 	str.w	r0, [sl]
   12770:	4631      	mov	r1, r6
   12772:	4638      	mov	r0, r7
   12774:	f8cc 6000 	str.w	r6, [ip]
   12778:	f8cb 3000 	str.w	r3, [fp]
   1277c:	f8c8 6000 	str.w	r6, [r8]
   12780:	f8c9 6000 	str.w	r6, [r9]
   12784:	f009 fe7c 	bl	1c480 <memset>
   12788:	69e3      	ldr	r3, [r4, #28]
   1278a:	4638      	mov	r0, r7
   1278c:	603b      	str	r3, [r7, #0]
   1278e:	69a3      	ldr	r3, [r4, #24]
   12790:	607b      	str	r3, [r7, #4]
   12792:	f7ff fcd5 	bl	12140 <ipc_trace_init>
   12796:	2201      	movs	r2, #1
   12798:	f04f 0c04 	mov.w	ip, #4
   1279c:	4b5c      	ldr	r3, [pc, #368]	; (12910 <rpc_transport_ipc_rx_init+0x214>)
   1279e:	495d      	ldr	r1, [pc, #372]	; (12914 <rpc_transport_ipc_rx_init+0x218>)
   127a0:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   127a4:	6809      	ldr	r1, [r1, #0]
   127a6:	2080      	movs	r0, #128	; 0x80
   127a8:	9104      	str	r1, [sp, #16]
   127aa:	495b      	ldr	r1, [pc, #364]	; (12918 <rpc_transport_ipc_rx_init+0x21c>)
   127ac:	f8dd e010 	ldr.w	lr, [sp, #16]
   127b0:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   127b4:	6809      	ldr	r1, [r1, #0]
   127b6:	702e      	strb	r6, [r5, #0]
   127b8:	9103      	str	r1, [sp, #12]
   127ba:	706e      	strb	r6, [r5, #1]
   127bc:	70ee      	strb	r6, [r5, #3]
   127be:	70aa      	strb	r2, [r5, #2]
   127c0:	9903      	ldr	r1, [sp, #12]
   127c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   127c4:	f8db e000 	ldr.w	lr, [fp]
   127c8:	6069      	str	r1, [r5, #4]
   127ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   127cc:	9c01      	ldr	r4, [sp, #4]
   127ce:	60a9      	str	r1, [r5, #8]
   127d0:	60ec      	str	r4, [r5, #12]
   127d2:	9c00      	ldr	r4, [sp, #0]
   127d4:	4951      	ldr	r1, [pc, #324]	; (1291c <rpc_transport_ipc_rx_init+0x220>)
   127d6:	61af      	str	r7, [r5, #24]
   127d8:	f8c5 e014 	str.w	lr, [r5, #20]
   127dc:	612c      	str	r4, [r5, #16]
   127de:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   127e2:	680c      	ldr	r4, [r1, #0]
   127e4:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   127e8:	9405      	str	r4, [sp, #20]
   127ea:	9c05      	ldr	r4, [sp, #20]
   127ec:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   127f0:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   127f4:	f44f 6780 	mov.w	r7, #1024	; 0x400
   127f8:	9406      	str	r4, [sp, #24]
   127fa:	9c06      	ldr	r4, [sp, #24]
   127fc:	2410      	movs	r4, #16
   127fe:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   12802:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   12806:	4d46      	ldr	r5, [pc, #280]	; (12920 <rpc_transport_ipc_rx_init+0x224>)
   12808:	9407      	str	r4, [sp, #28]
   1280a:	9c07      	ldr	r4, [sp, #28]
   1280c:	2440      	movs	r4, #64	; 0x40
   1280e:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   12812:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   12816:	9408      	str	r4, [sp, #32]
   12818:	9c08      	ldr	r4, [sp, #32]
   1281a:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   1281e:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   12822:	9009      	str	r0, [sp, #36]	; 0x24
   12824:	9809      	ldr	r0, [sp, #36]	; 0x24
   12826:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   1282a:	6808      	ldr	r0, [r1, #0]
   1282c:	900a      	str	r0, [sp, #40]	; 0x28
   1282e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12830:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   12834:	6888      	ldr	r0, [r1, #8]
   12836:	900b      	str	r0, [sp, #44]	; 0x2c
   12838:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1283a:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   1283e:	6908      	ldr	r0, [r1, #16]
   12840:	900c      	str	r0, [sp, #48]	; 0x30
   12842:	980c      	ldr	r0, [sp, #48]	; 0x30
   12844:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   12848:	6988      	ldr	r0, [r1, #24]
   1284a:	900d      	str	r0, [sp, #52]	; 0x34
   1284c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1284e:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   12852:	69c8      	ldr	r0, [r1, #28]
   12854:	f501 7101 	add.w	r1, r1, #516	; 0x204
   12858:	900e      	str	r0, [sp, #56]	; 0x38
   1285a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1285c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   12860:	4310      	orrs	r0, r2
   12862:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   12866:	680c      	ldr	r4, [r1, #0]
   12868:	482e      	ldr	r0, [pc, #184]	; (12924 <rpc_transport_ipc_rx_init+0x228>)
   1286a:	940f      	str	r4, [sp, #60]	; 0x3c
   1286c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1286e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   12872:	ea44 040c 	orr.w	r4, r4, ip
   12876:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1287a:	680c      	ldr	r4, [r1, #0]
   1287c:	9410      	str	r4, [sp, #64]	; 0x40
   1287e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   12880:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   12884:	f044 0410 	orr.w	r4, r4, #16
   12888:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1288c:	680c      	ldr	r4, [r1, #0]
   1288e:	9411      	str	r4, [sp, #68]	; 0x44
   12890:	9c11      	ldr	r4, [sp, #68]	; 0x44
   12892:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   12896:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1289a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1289e:	680c      	ldr	r4, [r1, #0]
   128a0:	9412      	str	r4, [sp, #72]	; 0x48
   128a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
   128a4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   128a8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   128ac:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   128b0:	f8da 3000 	ldr.w	r3, [sl]
   128b4:	6809      	ldr	r1, [r1, #0]
   128b6:	015b      	lsls	r3, r3, #5
   128b8:	9113      	str	r1, [sp, #76]	; 0x4c
   128ba:	b2db      	uxtb	r3, r3
   128bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
   128be:	f8c8 2000 	str.w	r2, [r8]
   128c2:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   128c6:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   128ca:	6047      	str	r7, [r0, #4]
   128cc:	9602      	str	r6, [sp, #8]
   128ce:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   128d2:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   128d6:	9302      	str	r3, [sp, #8]
   128d8:	9b02      	ldr	r3, [sp, #8]
   128da:	f8d8 3000 	ldr.w	r3, [r8]
   128de:	2b01      	cmp	r3, #1
   128e0:	d0fb      	beq.n	128da <rpc_transport_ipc_rx_init+0x1de>
   128e2:	f8d9 0000 	ldr.w	r0, [r9]
   128e6:	b015      	add	sp, #84	; 0x54
   128e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128ec:	f24c 000e 	movw	r0, #49166	; 0xc00e
   128f0:	b015      	add	sp, #84	; 0x54
   128f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128f6:	f24c 0009 	movw	r0, #49161	; 0xc009
   128fa:	b015      	add	sp, #84	; 0x54
   128fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12900:	f24c 000e 	movw	r0, #49166	; 0xc00e
   12904:	4770      	bx	lr
   12906:	bf00      	nop
   12908:	200213ee 	.word	0x200213ee
   1290c:	200205d0 	.word	0x200205d0
   12910:	4002a000 	.word	0x4002a000
   12914:	4002a610 	.word	0x4002a610
   12918:	4002a614 	.word	0x4002a614
   1291c:	4002a590 	.word	0x4002a590
   12920:	40005000 	.word	0x40005000
   12924:	e000e100 	.word	0xe000e100
   12928:	200205c8 	.word	0x200205c8
   1292c:	200205d4 	.word	0x200205d4
   12930:	200205cc 	.word	0x200205cc
   12934:	200205d8 	.word	0x200205d8
   12938:	200205c4 	.word	0x200205c4

0001293c <IPC_IRQHandler>:
   1293c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12940:	f44f 6580 	mov.w	r5, #1024	; 0x400
   12944:	4ca7      	ldr	r4, [pc, #668]	; (12be4 <IPC_IRQHandler+0x2a8>)
   12946:	b087      	sub	sp, #28
   12948:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   1294c:	f3bf 8f4f 	dsb	sy
   12950:	f3bf 8f6f 	isb	sy
   12954:	4ea4      	ldr	r6, [pc, #656]	; (12be8 <IPC_IRQHandler+0x2ac>)
   12956:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   1295a:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1295e:	061f      	lsls	r7, r3, #24
   12960:	f100 80c8 	bmi.w	12af4 <IPC_IRQHandler+0x1b8>
   12964:	4ba0      	ldr	r3, [pc, #640]	; (12be8 <IPC_IRQHandler+0x2ac>)
   12966:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1296a:	07d0      	lsls	r0, r2, #31
   1296c:	f100 80d4 	bmi.w	12b18 <IPC_IRQHandler+0x1dc>
   12970:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   12974:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   12978:	f040 80b6 	bne.w	12ae8 <IPC_IRQHandler+0x1ac>
   1297c:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   12980:	0749      	lsls	r1, r1, #29
   12982:	f100 80e6 	bmi.w	12b52 <IPC_IRQHandler+0x216>
   12986:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1298a:	06da      	lsls	r2, r3, #27
   1298c:	f140 809d 	bpl.w	12aca <IPC_IRQHandler+0x18e>
   12990:	2100      	movs	r1, #0
   12992:	4a95      	ldr	r2, [pc, #596]	; (12be8 <IPC_IRQHandler+0x2ac>)
   12994:	4b95      	ldr	r3, [pc, #596]	; (12bec <IPC_IRQHandler+0x2b0>)
   12996:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   1299a:	681b      	ldr	r3, [r3, #0]
   1299c:	9304      	str	r3, [sp, #16]
   1299e:	9b04      	ldr	r3, [sp, #16]
   129a0:	f8df 8270 	ldr.w	r8, [pc, #624]	; 12c14 <IPC_IRQHandler+0x2d8>
   129a4:	4f92      	ldr	r7, [pc, #584]	; (12bf0 <IPC_IRQHandler+0x2b4>)
   129a6:	f8df 9270 	ldr.w	r9, [pc, #624]	; 12c18 <IPC_IRQHandler+0x2dc>
   129aa:	f8d8 a000 	ldr.w	sl, [r8]
   129ae:	f8da 1000 	ldr.w	r1, [sl]
   129b2:	2900      	cmp	r1, #0
   129b4:	d03f      	beq.n	12a36 <IPC_IRQHandler+0xfa>
   129b6:	2200      	movs	r2, #0
   129b8:	4614      	mov	r4, r2
   129ba:	e002      	b.n	129c2 <IPC_IRQHandler+0x86>
   129bc:	3401      	adds	r4, #1
   129be:	428c      	cmp	r4, r1
   129c0:	d227      	bcs.n	12a12 <IPC_IRQHandler+0xd6>
   129c2:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   129c6:	68ab      	ldr	r3, [r5, #8]
   129c8:	2b00      	cmp	r3, #0
   129ca:	d0f7      	beq.n	129bc <IPC_IRQHandler+0x80>
   129cc:	686e      	ldr	r6, [r5, #4]
   129ce:	b2f6      	uxtb	r6, r6
   129d0:	2e01      	cmp	r6, #1
   129d2:	d1f3      	bne.n	129bc <IPC_IRQHandler+0x80>
   129d4:	6868      	ldr	r0, [r5, #4]
   129d6:	f8b9 3000 	ldrh.w	r3, [r9]
   129da:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   129de:	d1ed      	bne.n	129bc <IPC_IRQHandler+0x80>
   129e0:	686a      	ldr	r2, [r5, #4]
   129e2:	3301      	adds	r3, #1
   129e4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   129e8:	f042 0202 	orr.w	r2, r2, #2
   129ec:	606a      	str	r2, [r5, #4]
   129ee:	68a8      	ldr	r0, [r5, #8]
   129f0:	f8a9 3000 	strh.w	r3, [r9]
   129f4:	f7ff fe60 	bl	126b8 <rpc_transport_rx_handle>
   129f8:	4632      	mov	r2, r6
   129fa:	b928      	cbnz	r0, 12a08 <IPC_IRQHandler+0xcc>
   129fc:	686b      	ldr	r3, [r5, #4]
   129fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12a02:	f043 0303 	orr.w	r3, r3, #3
   12a06:	606b      	str	r3, [r5, #4]
   12a08:	f8da 1000 	ldr.w	r1, [sl]
   12a0c:	3401      	adds	r4, #1
   12a0e:	428c      	cmp	r4, r1
   12a10:	d3d7      	bcc.n	129c2 <IPC_IRQHandler+0x86>
   12a12:	2a00      	cmp	r2, #0
   12a14:	d1cd      	bne.n	129b2 <IPC_IRQHandler+0x76>
   12a16:	b171      	cbz	r1, 12a36 <IPC_IRQHandler+0xfa>
   12a18:	4613      	mov	r3, r2
   12a1a:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   12a1e:	6890      	ldr	r0, [r2, #8]
   12a20:	3301      	adds	r3, #1
   12a22:	b130      	cbz	r0, 12a32 <IPC_IRQHandler+0xf6>
   12a24:	f8d2 b004 	ldr.w	fp, [r2, #4]
   12a28:	fa5f fb8b 	uxtb.w	fp, fp
   12a2c:	f1bb 0f01 	cmp.w	fp, #1
   12a30:	d003      	beq.n	12a3a <IPC_IRQHandler+0xfe>
   12a32:	428b      	cmp	r3, r1
   12a34:	d1f1      	bne.n	12a1a <IPC_IRQHandler+0xde>
   12a36:	f04f 0b00 	mov.w	fp, #0
   12a3a:	f8d7 a000 	ldr.w	sl, [r7]
   12a3e:	f8da 2000 	ldr.w	r2, [sl]
   12a42:	2a00      	cmp	r2, #0
   12a44:	d03d      	beq.n	12ac2 <IPC_IRQHandler+0x186>
   12a46:	2100      	movs	r1, #0
   12a48:	460c      	mov	r4, r1
   12a4a:	e002      	b.n	12a52 <IPC_IRQHandler+0x116>
   12a4c:	3401      	adds	r4, #1
   12a4e:	4294      	cmp	r4, r2
   12a50:	d227      	bcs.n	12aa2 <IPC_IRQHandler+0x166>
   12a52:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   12a56:	68ab      	ldr	r3, [r5, #8]
   12a58:	2b00      	cmp	r3, #0
   12a5a:	d0f7      	beq.n	12a4c <IPC_IRQHandler+0x110>
   12a5c:	686e      	ldr	r6, [r5, #4]
   12a5e:	b2f6      	uxtb	r6, r6
   12a60:	2e01      	cmp	r6, #1
   12a62:	d1f3      	bne.n	12a4c <IPC_IRQHandler+0x110>
   12a64:	6868      	ldr	r0, [r5, #4]
   12a66:	f8b9 3000 	ldrh.w	r3, [r9]
   12a6a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   12a6e:	d1ed      	bne.n	12a4c <IPC_IRQHandler+0x110>
   12a70:	686a      	ldr	r2, [r5, #4]
   12a72:	3301      	adds	r3, #1
   12a74:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12a78:	f042 0202 	orr.w	r2, r2, #2
   12a7c:	606a      	str	r2, [r5, #4]
   12a7e:	68a8      	ldr	r0, [r5, #8]
   12a80:	f8a9 3000 	strh.w	r3, [r9]
   12a84:	f7ff fe18 	bl	126b8 <rpc_transport_rx_handle>
   12a88:	4631      	mov	r1, r6
   12a8a:	b928      	cbnz	r0, 12a98 <IPC_IRQHandler+0x15c>
   12a8c:	686a      	ldr	r2, [r5, #4]
   12a8e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   12a92:	f043 0303 	orr.w	r3, r3, #3
   12a96:	606b      	str	r3, [r5, #4]
   12a98:	f8da 2000 	ldr.w	r2, [sl]
   12a9c:	3401      	adds	r4, #1
   12a9e:	4294      	cmp	r4, r2
   12aa0:	d3d7      	bcc.n	12a52 <IPC_IRQHandler+0x116>
   12aa2:	2900      	cmp	r1, #0
   12aa4:	d1cd      	bne.n	12a42 <IPC_IRQHandler+0x106>
   12aa6:	b162      	cbz	r2, 12ac2 <IPC_IRQHandler+0x186>
   12aa8:	460b      	mov	r3, r1
   12aaa:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   12aae:	6888      	ldr	r0, [r1, #8]
   12ab0:	3301      	adds	r3, #1
   12ab2:	b120      	cbz	r0, 12abe <IPC_IRQHandler+0x182>
   12ab4:	6849      	ldr	r1, [r1, #4]
   12ab6:	b2c9      	uxtb	r1, r1
   12ab8:	2901      	cmp	r1, #1
   12aba:	f43f af76 	beq.w	129aa <IPC_IRQHandler+0x6e>
   12abe:	4293      	cmp	r3, r2
   12ac0:	d1f3      	bne.n	12aaa <IPC_IRQHandler+0x16e>
   12ac2:	f1bb 0f00 	cmp.w	fp, #0
   12ac6:	f47f af70 	bne.w	129aa <IPC_IRQHandler+0x6e>
   12aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12ace:	4b49      	ldr	r3, [pc, #292]	; (12bf4 <IPC_IRQHandler+0x2b8>)
   12ad0:	4a44      	ldr	r2, [pc, #272]	; (12be4 <IPC_IRQHandler+0x2a8>)
   12ad2:	681b      	ldr	r3, [r3, #0]
   12ad4:	015b      	lsls	r3, r3, #5
   12ad6:	b2db      	uxtb	r3, r3
   12ad8:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   12adc:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   12ae0:	6051      	str	r1, [r2, #4]
   12ae2:	b007      	add	sp, #28
   12ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ae8:	2206      	movs	r2, #6
   12aea:	4b43      	ldr	r3, [pc, #268]	; (12bf8 <IPC_IRQHandler+0x2bc>)
   12aec:	601a      	str	r2, [r3, #0]
   12aee:	b007      	add	sp, #28
   12af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12af4:	f7ff fc0c 	bl	12310 <ipc_trace_handle>
   12af8:	f7ff fd78 	bl	125ec <rpc_trace_coredump_in_progress>
   12afc:	2800      	cmp	r0, #0
   12afe:	d149      	bne.n	12b94 <IPC_IRQHandler+0x258>
   12b00:	4b3e      	ldr	r3, [pc, #248]	; (12bfc <IPC_IRQHandler+0x2c0>)
   12b02:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   12b06:	681b      	ldr	r3, [r3, #0]
   12b08:	9301      	str	r3, [sp, #4]
   12b0a:	9b01      	ldr	r3, [sp, #4]
   12b0c:	4b36      	ldr	r3, [pc, #216]	; (12be8 <IPC_IRQHandler+0x2ac>)
   12b0e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   12b12:	07d0      	lsls	r0, r2, #31
   12b14:	f57f af2c 	bpl.w	12970 <IPC_IRQHandler+0x34>
   12b18:	2000      	movs	r0, #0
   12b1a:	f248 0202 	movw	r2, #32770	; 0x8002
   12b1e:	4938      	ldr	r1, [pc, #224]	; (12c00 <IPC_IRQHandler+0x2c4>)
   12b20:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   12b24:	6809      	ldr	r1, [r1, #0]
   12b26:	9102      	str	r1, [sp, #8]
   12b28:	9902      	ldr	r1, [sp, #8]
   12b2a:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   12b2e:	4293      	cmp	r3, r2
   12b30:	d040      	beq.n	12bb4 <IPC_IRQHandler+0x278>
   12b32:	d81e      	bhi.n	12b72 <IPC_IRQHandler+0x236>
   12b34:	2b00      	cmp	r3, #0
   12b36:	d04f      	beq.n	12bd8 <IPC_IRQHandler+0x29c>
   12b38:	2b02      	cmp	r3, #2
   12b3a:	d942      	bls.n	12bc2 <IPC_IRQHandler+0x286>
   12b3c:	f248 0201 	movw	r2, #32769	; 0x8001
   12b40:	4293      	cmp	r3, r2
   12b42:	d149      	bne.n	12bd8 <IPC_IRQHandler+0x29c>
   12b44:	2003      	movs	r0, #3
   12b46:	2207      	movs	r2, #7
   12b48:	492b      	ldr	r1, [pc, #172]	; (12bf8 <IPC_IRQHandler+0x2bc>)
   12b4a:	4b2e      	ldr	r3, [pc, #184]	; (12c04 <IPC_IRQHandler+0x2c8>)
   12b4c:	6008      	str	r0, [r1, #0]
   12b4e:	601a      	str	r2, [r3, #0]
   12b50:	e7cd      	b.n	12aee <IPC_IRQHandler+0x1b2>
   12b52:	4d29      	ldr	r5, [pc, #164]	; (12bf8 <IPC_IRQHandler+0x2bc>)
   12b54:	6829      	ldr	r1, [r5, #0]
   12b56:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   12b5a:	2901      	cmp	r1, #1
   12b5c:	492a      	ldr	r1, [pc, #168]	; (12c08 <IPC_IRQHandler+0x2cc>)
   12b5e:	d05d      	beq.n	12c1c <IPC_IRQHandler+0x2e0>
   12b60:	680a      	ldr	r2, [r1, #0]
   12b62:	9203      	str	r2, [sp, #12]
   12b64:	9a03      	ldr	r2, [sp, #12]
   12b66:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   12b6a:	06db      	lsls	r3, r3, #27
   12b6c:	f53f af10 	bmi.w	12990 <IPC_IRQHandler+0x54>
   12b70:	e716      	b.n	129a0 <IPC_IRQHandler+0x64>
   12b72:	4a26      	ldr	r2, [pc, #152]	; (12c0c <IPC_IRQHandler+0x2d0>)
   12b74:	4293      	cmp	r3, r2
   12b76:	d814      	bhi.n	12ba2 <IPC_IRQHandler+0x266>
   12b78:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   12b7c:	d814      	bhi.n	12ba8 <IPC_IRQHandler+0x26c>
   12b7e:	f248 0203 	movw	r2, #32771	; 0x8003
   12b82:	4293      	cmp	r3, r2
   12b84:	d128      	bne.n	12bd8 <IPC_IRQHandler+0x29c>
   12b86:	2003      	movs	r0, #3
   12b88:	2204      	movs	r2, #4
   12b8a:	491b      	ldr	r1, [pc, #108]	; (12bf8 <IPC_IRQHandler+0x2bc>)
   12b8c:	4b1d      	ldr	r3, [pc, #116]	; (12c04 <IPC_IRQHandler+0x2c8>)
   12b8e:	6008      	str	r0, [r1, #0]
   12b90:	601a      	str	r2, [r3, #0]
   12b92:	e7ac      	b.n	12aee <IPC_IRQHandler+0x1b2>
   12b94:	23e0      	movs	r3, #224	; 0xe0
   12b96:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   12b9a:	6065      	str	r5, [r4, #4]
   12b9c:	b007      	add	sp, #28
   12b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ba2:	4a1b      	ldr	r2, [pc, #108]	; (12c10 <IPC_IRQHandler+0x2d4>)
   12ba4:	4293      	cmp	r3, r2
   12ba6:	d117      	bne.n	12bd8 <IPC_IRQHandler+0x29c>
   12ba8:	2003      	movs	r0, #3
   12baa:	4913      	ldr	r1, [pc, #76]	; (12bf8 <IPC_IRQHandler+0x2bc>)
   12bac:	4a15      	ldr	r2, [pc, #84]	; (12c04 <IPC_IRQHandler+0x2c8>)
   12bae:	6008      	str	r0, [r1, #0]
   12bb0:	6013      	str	r3, [r2, #0]
   12bb2:	e79c      	b.n	12aee <IPC_IRQHandler+0x1b2>
   12bb4:	2003      	movs	r0, #3
   12bb6:	2206      	movs	r2, #6
   12bb8:	490f      	ldr	r1, [pc, #60]	; (12bf8 <IPC_IRQHandler+0x2bc>)
   12bba:	4b12      	ldr	r3, [pc, #72]	; (12c04 <IPC_IRQHandler+0x2c8>)
   12bbc:	6008      	str	r0, [r1, #0]
   12bbe:	601a      	str	r2, [r3, #0]
   12bc0:	e795      	b.n	12aee <IPC_IRQHandler+0x1b2>
   12bc2:	2303      	movs	r3, #3
   12bc4:	4618      	mov	r0, r3
   12bc6:	490c      	ldr	r1, [pc, #48]	; (12bf8 <IPC_IRQHandler+0x2bc>)
   12bc8:	4a0e      	ldr	r2, [pc, #56]	; (12c04 <IPC_IRQHandler+0x2c8>)
   12bca:	600b      	str	r3, [r1, #0]
   12bcc:	6013      	str	r3, [r2, #0]
   12bce:	b007      	add	sp, #28
   12bd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bd4:	f7ff b910 	b.w	11df8 <rpc_transport_ipc_fault_handler>
   12bd8:	2303      	movs	r3, #3
   12bda:	4907      	ldr	r1, [pc, #28]	; (12bf8 <IPC_IRQHandler+0x2bc>)
   12bdc:	4a09      	ldr	r2, [pc, #36]	; (12c04 <IPC_IRQHandler+0x2c8>)
   12bde:	600b      	str	r3, [r1, #0]
   12be0:	6013      	str	r3, [r2, #0]
   12be2:	e784      	b.n	12aee <IPC_IRQHandler+0x1b2>
   12be4:	e000e100 	.word	0xe000e100
   12be8:	4002a000 	.word	0x4002a000
   12bec:	4002a110 	.word	0x4002a110
   12bf0:	200205d0 	.word	0x200205d0
   12bf4:	200205c8 	.word	0x200205c8
   12bf8:	200205cc 	.word	0x200205cc
   12bfc:	4002a11c 	.word	0x4002a11c
   12c00:	4002a100 	.word	0x4002a100
   12c04:	200205c4 	.word	0x200205c4
   12c08:	4002a108 	.word	0x4002a108
   12c0c:	04400004 	.word	0x04400004
   12c10:	05500001 	.word	0x05500001
   12c14:	200205d4 	.word	0x200205d4
   12c18:	200213ee 	.word	0x200213ee
   12c1c:	4a37      	ldr	r2, [pc, #220]	; (12cfc <IPC_IRQHandler+0x3c0>)
   12c1e:	680b      	ldr	r3, [r1, #0]
   12c20:	6812      	ldr	r2, [r2, #0]
   12c22:	9305      	str	r3, [sp, #20]
   12c24:	6893      	ldr	r3, [r2, #8]
   12c26:	4836      	ldr	r0, [pc, #216]	; (12d00 <IPC_IRQHandler+0x3c4>)
   12c28:	4936      	ldr	r1, [pc, #216]	; (12d04 <IPC_IRQHandler+0x3c8>)
   12c2a:	6003      	str	r3, [r0, #0]
   12c2c:	6854      	ldr	r4, [r2, #4]
   12c2e:	9a05      	ldr	r2, [sp, #20]
   12c30:	600c      	str	r4, [r1, #0]
   12c32:	b16b      	cbz	r3, 12c50 <IPC_IRQHandler+0x314>
   12c34:	b164      	cbz	r4, 12c50 <IPC_IRQHandler+0x314>
   12c36:	681b      	ldr	r3, [r3, #0]
   12c38:	2b10      	cmp	r3, #16
   12c3a:	d802      	bhi.n	12c42 <IPC_IRQHandler+0x306>
   12c3c:	6822      	ldr	r2, [r4, #0]
   12c3e:	2a10      	cmp	r2, #16
   12c40:	d90c      	bls.n	12c5c <IPC_IRQHandler+0x320>
   12c42:	2103      	movs	r1, #3
   12c44:	f24c 0206 	movw	r2, #49158	; 0xc006
   12c48:	4b2f      	ldr	r3, [pc, #188]	; (12d08 <IPC_IRQHandler+0x3cc>)
   12c4a:	6029      	str	r1, [r5, #0]
   12c4c:	601a      	str	r2, [r3, #0]
   12c4e:	e74e      	b.n	12aee <IPC_IRQHandler+0x1b2>
   12c50:	2103      	movs	r1, #3
   12c52:	2210      	movs	r2, #16
   12c54:	4b2c      	ldr	r3, [pc, #176]	; (12d08 <IPC_IRQHandler+0x3cc>)
   12c56:	6029      	str	r1, [r5, #0]
   12c58:	601a      	str	r2, [r3, #0]
   12c5a:	e748      	b.n	12aee <IPC_IRQHandler+0x1b2>
   12c5c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 12d14 <IPC_IRQHandler+0x3d8>
   12c60:	2a00      	cmp	r2, #0
   12c62:	d042      	beq.n	12cea <IPC_IRQHandler+0x3ae>
   12c64:	2300      	movs	r3, #0
   12c66:	f104 0904 	add.w	r9, r4, #4
   12c6a:	461e      	mov	r6, r3
   12c6c:	e002      	b.n	12c74 <IPC_IRQHandler+0x338>
   12c6e:	3601      	adds	r6, #1
   12c70:	4296      	cmp	r6, r2
   12c72:	d22a      	bcs.n	12cca <IPC_IRQHandler+0x38e>
   12c74:	00f7      	lsls	r7, r6, #3
   12c76:	19e1      	adds	r1, r4, r7
   12c78:	6888      	ldr	r0, [r1, #8]
   12c7a:	2800      	cmp	r0, #0
   12c7c:	d0f7      	beq.n	12c6e <IPC_IRQHandler+0x332>
   12c7e:	f8d1 a004 	ldr.w	sl, [r1, #4]
   12c82:	fa5f fa8a 	uxtb.w	sl, sl
   12c86:	f1ba 0f01 	cmp.w	sl, #1
   12c8a:	d1f0      	bne.n	12c6e <IPC_IRQHandler+0x332>
   12c8c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   12c90:	f8b8 0000 	ldrh.w	r0, [r8]
   12c94:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   12c98:	d1e9      	bne.n	12c6e <IPC_IRQHandler+0x332>
   12c9a:	684b      	ldr	r3, [r1, #4]
   12c9c:	1c42      	adds	r2, r0, #1
   12c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12ca2:	f043 0302 	orr.w	r3, r3, #2
   12ca6:	604b      	str	r3, [r1, #4]
   12ca8:	6888      	ldr	r0, [r1, #8]
   12caa:	f8a8 2000 	strh.w	r2, [r8]
   12cae:	f7ff fd03 	bl	126b8 <rpc_transport_rx_handle>
   12cb2:	4653      	mov	r3, sl
   12cb4:	b938      	cbnz	r0, 12cc6 <IPC_IRQHandler+0x38a>
   12cb6:	f859 2007 	ldr.w	r2, [r9, r7]
   12cba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12cbe:	f042 0203 	orr.w	r2, r2, #3
   12cc2:	f849 2007 	str.w	r2, [r9, r7]
   12cc6:	6822      	ldr	r2, [r4, #0]
   12cc8:	e7d1      	b.n	12c6e <IPC_IRQHandler+0x332>
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d1c8      	bne.n	12c60 <IPC_IRQHandler+0x324>
   12cce:	b912      	cbnz	r2, 12cd6 <IPC_IRQHandler+0x39a>
   12cd0:	e00b      	b.n	12cea <IPC_IRQHandler+0x3ae>
   12cd2:	4293      	cmp	r3, r2
   12cd4:	d009      	beq.n	12cea <IPC_IRQHandler+0x3ae>
   12cd6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   12cda:	6888      	ldr	r0, [r1, #8]
   12cdc:	3301      	adds	r3, #1
   12cde:	2800      	cmp	r0, #0
   12ce0:	d0f7      	beq.n	12cd2 <IPC_IRQHandler+0x396>
   12ce2:	6849      	ldr	r1, [r1, #4]
   12ce4:	b2c9      	uxtb	r1, r1
   12ce6:	2901      	cmp	r1, #1
   12ce8:	d1f3      	bne.n	12cd2 <IPC_IRQHandler+0x396>
   12cea:	2002      	movs	r0, #2
   12cec:	4b07      	ldr	r3, [pc, #28]	; (12d0c <IPC_IRQHandler+0x3d0>)
   12cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12cf2:	4a07      	ldr	r2, [pc, #28]	; (12d10 <IPC_IRQHandler+0x3d4>)
   12cf4:	681b      	ldr	r3, [r3, #0]
   12cf6:	6028      	str	r0, [r5, #0]
   12cf8:	e6ec      	b.n	12ad4 <IPC_IRQHandler+0x198>
   12cfa:	bf00      	nop
   12cfc:	200205d8 	.word	0x200205d8
   12d00:	200205d4 	.word	0x200205d4
   12d04:	200205d0 	.word	0x200205d0
   12d08:	200205c4 	.word	0x200205c4
   12d0c:	200205c8 	.word	0x200205c8
   12d10:	e000e100 	.word	0xe000e100
   12d14:	200213ee 	.word	0x200213ee

00012d18 <rpc_transport_msg_free>:
   12d18:	b430      	push	{r4, r5}
   12d1a:	4b18      	ldr	r3, [pc, #96]	; (12d7c <rpc_transport_msg_free+0x64>)
   12d1c:	681c      	ldr	r4, [r3, #0]
   12d1e:	6825      	ldr	r5, [r4, #0]
   12d20:	b16d      	cbz	r5, 12d3e <rpc_transport_msg_free+0x26>
   12d22:	68a3      	ldr	r3, [r4, #8]
   12d24:	4283      	cmp	r3, r0
   12d26:	d027      	beq.n	12d78 <rpc_transport_msg_free+0x60>
   12d28:	2300      	movs	r3, #0
   12d2a:	e002      	b.n	12d32 <rpc_transport_msg_free+0x1a>
   12d2c:	6889      	ldr	r1, [r1, #8]
   12d2e:	4281      	cmp	r1, r0
   12d30:	d019      	beq.n	12d66 <rpc_transport_msg_free+0x4e>
   12d32:	3301      	adds	r3, #1
   12d34:	00da      	lsls	r2, r3, #3
   12d36:	42ab      	cmp	r3, r5
   12d38:	eb04 0102 	add.w	r1, r4, r2
   12d3c:	d1f6      	bne.n	12d2c <rpc_transport_msg_free+0x14>
   12d3e:	4b10      	ldr	r3, [pc, #64]	; (12d80 <rpc_transport_msg_free+0x68>)
   12d40:	681c      	ldr	r4, [r3, #0]
   12d42:	6825      	ldr	r5, [r4, #0]
   12d44:	b16d      	cbz	r5, 12d62 <rpc_transport_msg_free+0x4a>
   12d46:	68a3      	ldr	r3, [r4, #8]
   12d48:	4283      	cmp	r3, r0
   12d4a:	d015      	beq.n	12d78 <rpc_transport_msg_free+0x60>
   12d4c:	2300      	movs	r3, #0
   12d4e:	e002      	b.n	12d56 <rpc_transport_msg_free+0x3e>
   12d50:	6889      	ldr	r1, [r1, #8]
   12d52:	4281      	cmp	r1, r0
   12d54:	d007      	beq.n	12d66 <rpc_transport_msg_free+0x4e>
   12d56:	3301      	adds	r3, #1
   12d58:	00da      	lsls	r2, r3, #3
   12d5a:	429d      	cmp	r5, r3
   12d5c:	eb04 0102 	add.w	r1, r4, r2
   12d60:	d1f6      	bne.n	12d50 <rpc_transport_msg_free+0x38>
   12d62:	bc30      	pop	{r4, r5}
   12d64:	4770      	bx	lr
   12d66:	3204      	adds	r2, #4
   12d68:	58a3      	ldr	r3, [r4, r2]
   12d6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12d6e:	f043 0303 	orr.w	r3, r3, #3
   12d72:	50a3      	str	r3, [r4, r2]
   12d74:	bc30      	pop	{r4, r5}
   12d76:	4770      	bx	lr
   12d78:	2204      	movs	r2, #4
   12d7a:	e7f5      	b.n	12d68 <rpc_transport_msg_free+0x50>
   12d7c:	200205d4 	.word	0x200205d4
   12d80:	200205d0 	.word	0x200205d0

00012d84 <rpc_transport_ipc_tx_init>:
   12d84:	2800      	cmp	r0, #0
   12d86:	f000 80b8 	beq.w	12efa <rpc_transport_ipc_tx_init+0x176>
   12d8a:	2900      	cmp	r1, #0
   12d8c:	f000 80b5 	beq.w	12efa <rpc_transport_ipc_tx_init+0x176>
   12d90:	2a00      	cmp	r2, #0
   12d92:	f000 80b2 	beq.w	12efa <rpc_transport_ipc_tx_init+0x176>
   12d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d9a:	6a04      	ldr	r4, [r0, #32]
   12d9c:	b085      	sub	sp, #20
   12d9e:	2c00      	cmp	r4, #0
   12da0:	f000 80a6 	beq.w	12ef0 <rpc_transport_ipc_tx_init+0x16c>
   12da4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   12da6:	2800      	cmp	r0, #0
   12da8:	f000 80a2 	beq.w	12ef0 <rpc_transport_ipc_tx_init+0x16c>
   12dac:	f642 4587 	movw	r5, #11399	; 0x2c87
   12db0:	f04f 0a00 	mov.w	sl, #0
   12db4:	4e55      	ldr	r6, [pc, #340]	; (12f0c <rpc_transport_ipc_tx_init+0x188>)
   12db6:	42a8      	cmp	r0, r5
   12db8:	f886 a000 	strb.w	sl, [r6]
   12dbc:	f240 80a0 	bls.w	12f00 <rpc_transport_ipc_tx_init+0x17c>
   12dc0:	2708      	movs	r7, #8
   12dc2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 12f44 <rpc_transport_ipc_tx_init+0x1c0>
   12dc6:	4620      	mov	r0, r4
   12dc8:	4616      	mov	r6, r2
   12dca:	460d      	mov	r5, r1
   12dcc:	2244      	movs	r2, #68	; 0x44
   12dce:	4651      	mov	r1, sl
   12dd0:	f8c9 4000 	str.w	r4, [r9]
   12dd4:	f009 fb54 	bl	1c480 <memset>
   12dd8:	f8d9 2000 	ldr.w	r2, [r9]
   12ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   12de0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 12f48 <rpc_transport_ipc_tx_init+0x1c4>
   12de4:	f882 a001 	strb.w	sl, [r2, #1]
   12de8:	f882 a002 	strb.w	sl, [r2, #2]
   12dec:	f882 a003 	strb.w	sl, [r2, #3]
   12df0:	7017      	strb	r7, [r2, #0]
   12df2:	4618      	mov	r0, r3
   12df4:	2244      	movs	r2, #68	; 0x44
   12df6:	4651      	mov	r1, sl
   12df8:	f8c8 3000 	str.w	r3, [r8]
   12dfc:	f009 fb40 	bl	1c480 <memset>
   12e00:	f8d8 2000 	ldr.w	r2, [r8]
   12e04:	f104 0388 	add.w	r3, r4, #136	; 0x88
   12e08:	f8df b140 	ldr.w	fp, [pc, #320]	; 12f4c <rpc_transport_ipc_tx_init+0x1c8>
   12e0c:	7017      	strb	r7, [r2, #0]
   12e0e:	f882 a001 	strb.w	sl, [r2, #1]
   12e12:	f882 a002 	strb.w	sl, [r2, #2]
   12e16:	f882 a003 	strb.w	sl, [r2, #3]
   12e1a:	4618      	mov	r0, r3
   12e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   12e20:	4651      	mov	r1, sl
   12e22:	f8cb 3000 	str.w	r3, [fp]
   12e26:	f009 fb2b 	bl	1c480 <memset>
   12e2a:	4b39      	ldr	r3, [pc, #228]	; (12f10 <rpc_transport_ipc_tx_init+0x18c>)
   12e2c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   12e30:	f8c3 c000 	str.w	ip, [r3]
   12e34:	4651      	mov	r1, sl
   12e36:	4660      	mov	r0, ip
   12e38:	f44f 7200 	mov.w	r2, #512	; 0x200
   12e3c:	f009 fb20 	bl	1c480 <memset>
   12e40:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   12e44:	2106      	movs	r1, #6
   12e46:	f04f 0e01 	mov.w	lr, #1
   12e4a:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   12e4e:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   12e52:	4b30      	ldr	r3, [pc, #192]	; (12f14 <rpc_transport_ipc_tx_init+0x190>)
   12e54:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   12e58:	605c      	str	r4, [r3, #4]
   12e5a:	4c2f      	ldr	r4, [pc, #188]	; (12f18 <rpc_transport_ipc_tx_init+0x194>)
   12e5c:	f8c3 c008 	str.w	ip, [r3, #8]
   12e60:	8199      	strh	r1, [r3, #12]
   12e62:	f8a3 e000 	strh.w	lr, [r3]
   12e66:	4619      	mov	r1, r3
   12e68:	611c      	str	r4, [r3, #16]
   12e6a:	4b2c      	ldr	r3, [pc, #176]	; (12f1c <rpc_transport_ipc_tx_init+0x198>)
   12e6c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 12f50 <rpc_transport_ipc_tx_init+0x1cc>
   12e70:	6120      	str	r0, [r4, #16]
   12e72:	482b      	ldr	r0, [pc, #172]	; (12f20 <rpc_transport_ipc_tx_init+0x19c>)
   12e74:	6063      	str	r3, [r4, #4]
   12e76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   12e7a:	60a0      	str	r0, [r4, #8]
   12e7c:	f8c4 c000 	str.w	ip, [r4]
   12e80:	4828      	ldr	r0, [pc, #160]	; (12f24 <rpc_transport_ipc_tx_init+0x1a0>)
   12e82:	60e3      	str	r3, [r4, #12]
   12e84:	6162      	str	r2, [r4, #20]
   12e86:	f7fd fe5b 	bl	10b40 <nrf_mem_register>
   12e8a:	2800      	cmp	r0, #0
   12e8c:	d132      	bne.n	12ef4 <rpc_transport_ipc_tx_init+0x170>
   12e8e:	f04f 0c02 	mov.w	ip, #2
   12e92:	2420      	movs	r4, #32
   12e94:	f8d9 1000 	ldr.w	r1, [r9]
   12e98:	f8db 2000 	ldr.w	r2, [fp]
   12e9c:	6029      	str	r1, [r5, #0]
   12e9e:	4b1c      	ldr	r3, [pc, #112]	; (12f10 <rpc_transport_ipc_tx_init+0x18c>)
   12ea0:	f8d8 1000 	ldr.w	r1, [r8]
   12ea4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 12f54 <rpc_transport_ipc_tx_init+0x1d0>
   12ea8:	4d1f      	ldr	r5, [pc, #124]	; (12f28 <rpc_transport_ipc_tx_init+0x1a4>)
   12eaa:	6031      	str	r1, [r6, #0]
   12eac:	f8ce 2000 	str.w	r2, [lr]
   12eb0:	681b      	ldr	r3, [r3, #0]
   12eb2:	491e      	ldr	r1, [pc, #120]	; (12f2c <rpc_transport_ipc_tx_init+0x1a8>)
   12eb4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   12eb8:	602a      	str	r2, [r5, #0]
   12eba:	4e1d      	ldr	r6, [pc, #116]	; (12f30 <rpc_transport_ipc_tx_init+0x1ac>)
   12ebc:	4a1d      	ldr	r2, [pc, #116]	; (12f34 <rpc_transport_ipc_tx_init+0x1b0>)
   12ebe:	4d1e      	ldr	r5, [pc, #120]	; (12f38 <rpc_transport_ipc_tx_init+0x1b4>)
   12ec0:	600b      	str	r3, [r1, #0]
   12ec2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   12ec6:	491d      	ldr	r1, [pc, #116]	; (12f3c <rpc_transport_ipc_tx_init+0x1b8>)
   12ec8:	6033      	str	r3, [r6, #0]
   12eca:	8028      	strh	r0, [r5, #0]
   12ecc:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   12ed0:	6809      	ldr	r1, [r1, #0]
   12ed2:	4b1b      	ldr	r3, [pc, #108]	; (12f40 <rpc_transport_ipc_tx_init+0x1bc>)
   12ed4:	9103      	str	r1, [sp, #12]
   12ed6:	9903      	ldr	r1, [sp, #12]
   12ed8:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   12edc:	6819      	ldr	r1, [r3, #0]
   12ede:	443b      	add	r3, r7
   12ee0:	9102      	str	r1, [sp, #8]
   12ee2:	9902      	ldr	r1, [sp, #8]
   12ee4:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   12ee8:	681b      	ldr	r3, [r3, #0]
   12eea:	9301      	str	r3, [sp, #4]
   12eec:	9b01      	ldr	r3, [sp, #4]
   12eee:	e001      	b.n	12ef4 <rpc_transport_ipc_tx_init+0x170>
   12ef0:	f24c 0007 	movw	r0, #49159	; 0xc007
   12ef4:	b005      	add	sp, #20
   12ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12efa:	f24c 000e 	movw	r0, #49166	; 0xc00e
   12efe:	4770      	bx	lr
   12f00:	f24c 0004 	movw	r0, #49156	; 0xc004
   12f04:	b005      	add	sp, #20
   12f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f0a:	bf00      	nop
   12f0c:	2002175e 	.word	0x2002175e
   12f10:	20020604 	.word	0x20020604
   12f14:	200205f0 	.word	0x200205f0
   12f18:	20020614 	.word	0x20020614
   12f1c:	00040080 	.word	0x00040080
   12f20:	00040100 	.word	0x00040100
   12f24:	200205dc 	.word	0x200205dc
   12f28:	200205e8 	.word	0x200205e8
   12f2c:	200205e4 	.word	0x200205e4
   12f30:	200205e0 	.word	0x200205e0
   12f34:	4002a000 	.word	0x4002a000
   12f38:	200213f0 	.word	0x200213f0
   12f3c:	4002a514 	.word	0x4002a514
   12f40:	4002a51c 	.word	0x4002a51c
   12f44:	20020610 	.word	0x20020610
   12f48:	20020608 	.word	0x20020608
   12f4c:	2002060c 	.word	0x2002060c
   12f50:	00080040 	.word	0x00080040
   12f54:	200205ec 	.word	0x200205ec

00012f58 <rpc_transport_ipc_tx_send>:
   12f58:	2800      	cmp	r0, #0
   12f5a:	d05f      	beq.n	1301c <rpc_transport_ipc_tx_send+0xc4>
   12f5c:	b470      	push	{r4, r5, r6}
   12f5e:	4b33      	ldr	r3, [pc, #204]	; (1302c <rpc_transport_ipc_tx_send+0xd4>)
   12f60:	b083      	sub	sp, #12
   12f62:	681a      	ldr	r2, [r3, #0]
   12f64:	4b32      	ldr	r3, [pc, #200]	; (13030 <rpc_transport_ipc_tx_send+0xd8>)
   12f66:	4282      	cmp	r2, r0
   12f68:	d81e      	bhi.n	12fa8 <rpc_transport_ipc_tx_send+0x50>
   12f6a:	681b      	ldr	r3, [r3, #0]
   12f6c:	4931      	ldr	r1, [pc, #196]	; (13034 <rpc_transport_ipc_tx_send+0xdc>)
   12f6e:	4283      	cmp	r3, r0
   12f70:	6809      	ldr	r1, [r1, #0]
   12f72:	d803      	bhi.n	12f7c <rpc_transport_ipc_tx_send+0x24>
   12f74:	4c30      	ldr	r4, [pc, #192]	; (13038 <rpc_transport_ipc_tx_send+0xe0>)
   12f76:	6824      	ldr	r4, [r4, #0]
   12f78:	4284      	cmp	r4, r0
   12f7a:	d847      	bhi.n	1300c <rpc_transport_ipc_tx_send+0xb4>
   12f7c:	4281      	cmp	r1, r0
   12f7e:	d90e      	bls.n	12f9e <rpc_transport_ipc_tx_send+0x46>
   12f80:	4b2e      	ldr	r3, [pc, #184]	; (1303c <rpc_transport_ipc_tx_send+0xe4>)
   12f82:	781b      	ldrb	r3, [r3, #0]
   12f84:	2b00      	cmp	r3, #0
   12f86:	d14c      	bne.n	13022 <rpc_transport_ipc_tx_send+0xca>
   12f88:	1a83      	subs	r3, r0, r2
   12f8a:	492d      	ldr	r1, [pc, #180]	; (13040 <rpc_transport_ipc_tx_send+0xe8>)
   12f8c:	099e      	lsrs	r6, r3, #6
   12f8e:	069b      	lsls	r3, r3, #26
   12f90:	680a      	ldr	r2, [r1, #0]
   12f92:	4c2c      	ldr	r4, [pc, #176]	; (13044 <rpc_transport_ipc_tx_send+0xec>)
   12f94:	f04f 0103 	mov.w	r1, #3
   12f98:	f04f 0502 	mov.w	r5, #2
   12f9c:	d014      	beq.n	12fc8 <rpc_transport_ipc_tx_send+0x70>
   12f9e:	f24c 0010 	movw	r0, #49168	; 0xc010
   12fa2:	b003      	add	sp, #12
   12fa4:	bc70      	pop	{r4, r5, r6}
   12fa6:	4770      	bx	lr
   12fa8:	681b      	ldr	r3, [r3, #0]
   12faa:	4298      	cmp	r0, r3
   12fac:	d3f7      	bcc.n	12f9e <rpc_transport_ipc_tx_send+0x46>
   12fae:	4a22      	ldr	r2, [pc, #136]	; (13038 <rpc_transport_ipc_tx_send+0xe0>)
   12fb0:	6812      	ldr	r2, [r2, #0]
   12fb2:	4290      	cmp	r0, r2
   12fb4:	d2f3      	bcs.n	12f9e <rpc_transport_ipc_tx_send+0x46>
   12fb6:	2101      	movs	r1, #1
   12fb8:	1ac3      	subs	r3, r0, r3
   12fba:	4a23      	ldr	r2, [pc, #140]	; (13048 <rpc_transport_ipc_tx_send+0xf0>)
   12fbc:	099e      	lsrs	r6, r3, #6
   12fbe:	069b      	lsls	r3, r3, #26
   12fc0:	460d      	mov	r5, r1
   12fc2:	6812      	ldr	r2, [r2, #0]
   12fc4:	4c21      	ldr	r4, [pc, #132]	; (1304c <rpc_transport_ipc_tx_send+0xf4>)
   12fc6:	d1ea      	bne.n	12f9e <rpc_transport_ipc_tx_send+0x46>
   12fc8:	6843      	ldr	r3, [r0, #4]
   12fca:	b2db      	uxtb	r3, r3
   12fcc:	429d      	cmp	r5, r3
   12fce:	d120      	bne.n	13012 <rpc_transport_ipc_tx_send+0xba>
   12fd0:	2020      	movs	r0, #32
   12fd2:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   12fd6:	4d1e      	ldr	r5, [pc, #120]	; (13050 <rpc_transport_ipc_tx_send+0xf8>)
   12fd8:	6853      	ldr	r3, [r2, #4]
   12fda:	882e      	ldrh	r6, [r5, #0]
   12fdc:	b29b      	uxth	r3, r3
   12fde:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   12fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12fe6:	f043 0301 	orr.w	r3, r3, #1
   12fea:	6053      	str	r3, [r2, #4]
   12fec:	bf00      	nop
   12fee:	3801      	subs	r0, #1
   12ff0:	d1fc      	bne.n	12fec <rpc_transport_ipc_tx_send+0x94>
   12ff2:	2201      	movs	r2, #1
   12ff4:	4b17      	ldr	r3, [pc, #92]	; (13054 <rpc_transport_ipc_tx_send+0xfc>)
   12ff6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   12ffa:	6822      	ldr	r2, [r4, #0]
   12ffc:	882b      	ldrh	r3, [r5, #0]
   12ffe:	9201      	str	r2, [sp, #4]
   13000:	9a01      	ldr	r2, [sp, #4]
   13002:	3301      	adds	r3, #1
   13004:	802b      	strh	r3, [r5, #0]
   13006:	b003      	add	sp, #12
   13008:	bc70      	pop	{r4, r5, r6}
   1300a:	4770      	bx	lr
   1300c:	4281      	cmp	r1, r0
   1300e:	d9d2      	bls.n	12fb6 <rpc_transport_ipc_tx_send+0x5e>
   13010:	e7b6      	b.n	12f80 <rpc_transport_ipc_tx_send+0x28>
   13012:	f24c 0007 	movw	r0, #49159	; 0xc007
   13016:	b003      	add	sp, #12
   13018:	bc70      	pop	{r4, r5, r6}
   1301a:	4770      	bx	lr
   1301c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   13020:	4770      	bx	lr
   13022:	f24c 000f 	movw	r0, #49167	; 0xc00f
   13026:	b003      	add	sp, #12
   13028:	bc70      	pop	{r4, r5, r6}
   1302a:	4770      	bx	lr
   1302c:	200205ec 	.word	0x200205ec
   13030:	200205e4 	.word	0x200205e4
   13034:	200205e8 	.word	0x200205e8
   13038:	200205e0 	.word	0x200205e0
   1303c:	2002175e 	.word	0x2002175e
   13040:	20020610 	.word	0x20020610
   13044:	4002a00c 	.word	0x4002a00c
   13048:	20020608 	.word	0x20020608
   1304c:	4002a004 	.word	0x4002a004
   13050:	200213f0 	.word	0x200213f0
   13054:	4002a000 	.word	0x4002a000

00013058 <rpc_transport_ipc_tx_rpc_data_alloc>:
   13058:	4b18      	ldr	r3, [pc, #96]	; (130bc <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1305a:	781b      	ldrb	r3, [r3, #0]
   1305c:	bb63      	cbnz	r3, 130b8 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1305e:	b4f0      	push	{r4, r5, r6, r7}
   13060:	4a17      	ldr	r2, [pc, #92]	; (130c0 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   13062:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   13066:	6814      	ldr	r4, [r2, #0]
   13068:	4b16      	ldr	r3, [pc, #88]	; (130c4 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1306a:	6825      	ldr	r5, [r4, #0]
   1306c:	681e      	ldr	r6, [r3, #0]
   1306e:	b1a5      	cbz	r5, 1309a <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   13070:	4607      	mov	r7, r0
   13072:	00c1      	lsls	r1, r0, #3
   13074:	1863      	adds	r3, r4, r1
   13076:	685a      	ldr	r2, [r3, #4]
   13078:	b2d2      	uxtb	r2, r2
   1307a:	2a03      	cmp	r2, #3
   1307c:	d104      	bne.n	13088 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1307e:	609f      	str	r7, [r3, #8]
   13080:	685a      	ldr	r2, [r3, #4]
   13082:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13086:	605a      	str	r2, [r3, #4]
   13088:	685a      	ldr	r2, [r3, #4]
   1308a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1308e:	d101      	bne.n	13094 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   13090:	689b      	ldr	r3, [r3, #8]
   13092:	b12b      	cbz	r3, 130a0 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   13094:	3001      	adds	r0, #1
   13096:	42a8      	cmp	r0, r5
   13098:	d1eb      	bne.n	13072 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1309a:	2000      	movs	r0, #0
   1309c:	bcf0      	pop	{r4, r5, r6, r7}
   1309e:	4770      	bx	lr
   130a0:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   130a4:	4421      	add	r1, r4
   130a6:	6088      	str	r0, [r1, #8]
   130a8:	6843      	ldr	r3, [r0, #4]
   130aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   130ae:	f043 0302 	orr.w	r3, r3, #2
   130b2:	6043      	str	r3, [r0, #4]
   130b4:	bcf0      	pop	{r4, r5, r6, r7}
   130b6:	4770      	bx	lr
   130b8:	2000      	movs	r0, #0
   130ba:	4770      	bx	lr
   130bc:	2002175e 	.word	0x2002175e
   130c0:	20020610 	.word	0x20020610
   130c4:	2002060c 	.word	0x2002060c

000130c8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   130c8:	b4f0      	push	{r4, r5, r6, r7}
   130ca:	4a15      	ldr	r2, [pc, #84]	; (13120 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   130cc:	4b15      	ldr	r3, [pc, #84]	; (13124 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   130ce:	6814      	ldr	r4, [r2, #0]
   130d0:	681e      	ldr	r6, [r3, #0]
   130d2:	6825      	ldr	r5, [r4, #0]
   130d4:	b1ad      	cbz	r5, 13102 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   130d6:	2000      	movs	r0, #0
   130d8:	4607      	mov	r7, r0
   130da:	00c1      	lsls	r1, r0, #3
   130dc:	1863      	adds	r3, r4, r1
   130de:	685a      	ldr	r2, [r3, #4]
   130e0:	b2d2      	uxtb	r2, r2
   130e2:	2a03      	cmp	r2, #3
   130e4:	d104      	bne.n	130f0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   130e6:	609f      	str	r7, [r3, #8]
   130e8:	685a      	ldr	r2, [r3, #4]
   130ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   130ee:	605a      	str	r2, [r3, #4]
   130f0:	685a      	ldr	r2, [r3, #4]
   130f2:	f012 0fff 	tst.w	r2, #255	; 0xff
   130f6:	d101      	bne.n	130fc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   130f8:	689b      	ldr	r3, [r3, #8]
   130fa:	b12b      	cbz	r3, 13108 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   130fc:	3001      	adds	r0, #1
   130fe:	4285      	cmp	r5, r0
   13100:	d1eb      	bne.n	130da <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   13102:	2000      	movs	r0, #0
   13104:	bcf0      	pop	{r4, r5, r6, r7}
   13106:	4770      	bx	lr
   13108:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1310c:	4421      	add	r1, r4
   1310e:	6088      	str	r0, [r1, #8]
   13110:	6843      	ldr	r3, [r0, #4]
   13112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13116:	f043 0301 	orr.w	r3, r3, #1
   1311a:	6043      	str	r3, [r0, #4]
   1311c:	bcf0      	pop	{r4, r5, r6, r7}
   1311e:	4770      	bx	lr
   13120:	20020608 	.word	0x20020608
   13124:	20020604 	.word	0x20020604

00013128 <rpc_transport_ipc_tx_data_alloc>:
   13128:	4b03      	ldr	r3, [pc, #12]	; (13138 <rpc_transport_ipc_tx_data_alloc+0x10>)
   1312a:	781b      	ldrb	r3, [r3, #0]
   1312c:	b90b      	cbnz	r3, 13132 <rpc_transport_ipc_tx_data_alloc+0xa>
   1312e:	f7fd be37 	b.w	10da0 <nrf_shared_malloc>
   13132:	2000      	movs	r0, #0
   13134:	4770      	bx	lr
   13136:	bf00      	nop
   13138:	2002175e 	.word	0x2002175e

0001313c <ok_rsp_parser>:
   1313c:	2000      	movs	r0, #0
   1313e:	4770      	bx	lr

00013140 <pdn_state_get_parser>:
   13140:	2200      	movs	r2, #0
   13142:	b570      	push	{r4, r5, r6, lr}
   13144:	780b      	ldrb	r3, [r1, #0]
   13146:	b084      	sub	sp, #16
   13148:	460e      	mov	r6, r1
   1314a:	e9cd 2200 	strd	r2, r2, [sp]
   1314e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   13152:	b323      	cbz	r3, 1319e <pdn_state_get_parser+0x5e>
   13154:	460c      	mov	r4, r1
   13156:	2b20      	cmp	r3, #32
   13158:	460d      	mov	r5, r1
   1315a:	d01b      	beq.n	13194 <pdn_state_get_parser+0x54>
   1315c:	700b      	strb	r3, [r1, #0]
   1315e:	3201      	adds	r2, #1
   13160:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13164:	18b1      	adds	r1, r6, r2
   13166:	460d      	mov	r5, r1
   13168:	2b00      	cmp	r3, #0
   1316a:	d1f4      	bne.n	13156 <pdn_state_get_parser+0x16>
   1316c:	2200      	movs	r2, #0
   1316e:	4b0d      	ldr	r3, [pc, #52]	; (131a4 <pdn_state_get_parser+0x64>)
   13170:	702a      	strb	r2, [r5, #0]
   13172:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   13176:	4a0c      	ldr	r2, [pc, #48]	; (131a8 <pdn_state_get_parser+0x68>)
   13178:	681b      	ldr	r3, [r3, #0]
   1317a:	2110      	movs	r1, #16
   1317c:	4668      	mov	r0, sp
   1317e:	f006 fde5 	bl	19d4c <sniprintf>
   13182:	4669      	mov	r1, sp
   13184:	4630      	mov	r0, r6
   13186:	f009 fad3 	bl	1c730 <strstr>
   1318a:	3000      	adds	r0, #0
   1318c:	bf18      	it	ne
   1318e:	2001      	movne	r0, #1
   13190:	b004      	add	sp, #16
   13192:	bd70      	pop	{r4, r5, r6, pc}
   13194:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13198:	2b00      	cmp	r3, #0
   1319a:	d1dc      	bne.n	13156 <pdn_state_get_parser+0x16>
   1319c:	e7e6      	b.n	1316c <pdn_state_get_parser+0x2c>
   1319e:	460d      	mov	r5, r1
   131a0:	e7e4      	b.n	1316c <pdn_state_get_parser+0x2c>
   131a2:	bf00      	nop
   131a4:	20020730 	.word	0x20020730
   131a8:	0001d834 	.word	0x0001d834

000131ac <pdn_id_get_parser>:
   131ac:	b570      	push	{r4, r5, r6, lr}
   131ae:	780b      	ldrb	r3, [r1, #0]
   131b0:	4606      	mov	r6, r0
   131b2:	b313      	cbz	r3, 131fa <pdn_id_get_parser+0x4e>
   131b4:	4608      	mov	r0, r1
   131b6:	2400      	movs	r4, #0
   131b8:	460a      	mov	r2, r1
   131ba:	2b20      	cmp	r3, #32
   131bc:	4615      	mov	r5, r2
   131be:	d017      	beq.n	131f0 <pdn_id_get_parser+0x44>
   131c0:	7013      	strb	r3, [r2, #0]
   131c2:	3401      	adds	r4, #1
   131c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   131c8:	190a      	adds	r2, r1, r4
   131ca:	4615      	mov	r5, r2
   131cc:	2b00      	cmp	r3, #0
   131ce:	d1f4      	bne.n	131ba <pdn_id_get_parser+0xe>
   131d0:	2300      	movs	r3, #0
   131d2:	4608      	mov	r0, r1
   131d4:	702b      	strb	r3, [r5, #0]
   131d6:	213a      	movs	r1, #58	; 0x3a
   131d8:	f009 fa8b 	bl	1c6f2 <strchr>
   131dc:	b130      	cbz	r0, 131ec <pdn_id_get_parser+0x40>
   131de:	3001      	adds	r0, #1
   131e0:	f009 f921 	bl	1c426 <atoi>
   131e4:	4b06      	ldr	r3, [pc, #24]	; (13200 <pdn_id_get_parser+0x54>)
   131e6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   131ea:	6058      	str	r0, [r3, #4]
   131ec:	2000      	movs	r0, #0
   131ee:	bd70      	pop	{r4, r5, r6, pc}
   131f0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   131f4:	2b00      	cmp	r3, #0
   131f6:	d1e0      	bne.n	131ba <pdn_id_get_parser+0xe>
   131f8:	e7ea      	b.n	131d0 <pdn_id_get_parser+0x24>
   131fa:	460d      	mov	r5, r1
   131fc:	e7e8      	b.n	131d0 <pdn_id_get_parser+0x24>
   131fe:	bf00      	nop
   13200:	20020730 	.word	0x20020730

00013204 <context_create_parser>:
   13204:	b570      	push	{r4, r5, r6, lr}
   13206:	780b      	ldrb	r3, [r1, #0]
   13208:	4606      	mov	r6, r0
   1320a:	b313      	cbz	r3, 13252 <context_create_parser+0x4e>
   1320c:	4608      	mov	r0, r1
   1320e:	2400      	movs	r4, #0
   13210:	460a      	mov	r2, r1
   13212:	2b20      	cmp	r3, #32
   13214:	4615      	mov	r5, r2
   13216:	d017      	beq.n	13248 <context_create_parser+0x44>
   13218:	7013      	strb	r3, [r2, #0]
   1321a:	3401      	adds	r4, #1
   1321c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   13220:	190a      	adds	r2, r1, r4
   13222:	4615      	mov	r5, r2
   13224:	2b00      	cmp	r3, #0
   13226:	d1f4      	bne.n	13212 <context_create_parser+0xe>
   13228:	2300      	movs	r3, #0
   1322a:	4608      	mov	r0, r1
   1322c:	702b      	strb	r3, [r5, #0]
   1322e:	213a      	movs	r1, #58	; 0x3a
   13230:	f009 fa5f 	bl	1c6f2 <strchr>
   13234:	b130      	cbz	r0, 13244 <context_create_parser+0x40>
   13236:	4b08      	ldr	r3, [pc, #32]	; (13258 <context_create_parser+0x54>)
   13238:	3001      	adds	r0, #1
   1323a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1323e:	f009 f8f2 	bl	1c426 <atoi>
   13242:	6020      	str	r0, [r4, #0]
   13244:	2000      	movs	r0, #0
   13246:	bd70      	pop	{r4, r5, r6, pc}
   13248:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1324c:	2b00      	cmp	r3, #0
   1324e:	d1e0      	bne.n	13212 <context_create_parser+0xe>
   13250:	e7ea      	b.n	13228 <context_create_parser+0x24>
   13252:	460d      	mov	r5, r1
   13254:	e7e8      	b.n	13228 <context_create_parser+0x24>
   13256:	bf00      	nop
   13258:	20020730 	.word	0x20020730

0001325c <pdn_interface_init>:
   1325c:	f04f 33ff 	mov.w	r3, #4294967295
   13260:	b510      	push	{r4, lr}
   13262:	4c09      	ldr	r4, [pc, #36]	; (13288 <pdn_interface_init+0x2c>)
   13264:	2228      	movs	r2, #40	; 0x28
   13266:	2100      	movs	r1, #0
   13268:	4808      	ldr	r0, [pc, #32]	; (1328c <pdn_interface_init+0x30>)
   1326a:	6023      	str	r3, [r4, #0]
   1326c:	f009 f908 	bl	1c480 <memset>
   13270:	f240 2201 	movw	r2, #513	; 0x201
   13274:	2102      	movs	r1, #2
   13276:	2066      	movs	r0, #102	; 0x66
   13278:	f7fd f83a 	bl	102f0 <at_interface_open>
   1327c:	2800      	cmp	r0, #0
   1327e:	6020      	str	r0, [r4, #0]
   13280:	bfb4      	ite	lt
   13282:	2003      	movlt	r0, #3
   13284:	2000      	movge	r0, #0
   13286:	bd10      	pop	{r4, pc}
   13288:	2002062c 	.word	0x2002062c
   1328c:	20020730 	.word	0x20020730

00013290 <pdn_interface_open>:
   13290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13294:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   13298:	b083      	sub	sp, #12
   1329a:	f040 80ad 	bne.w	133f8 <pdn_interface_open+0x168>
   1329e:	4c5f      	ldr	r4, [pc, #380]	; (1341c <pdn_interface_open+0x18c>)
   132a0:	6825      	ldr	r5, [r4, #0]
   132a2:	b34d      	cbz	r5, 132f8 <pdn_interface_open+0x68>
   132a4:	6863      	ldr	r3, [r4, #4]
   132a6:	2b00      	cmp	r3, #0
   132a8:	f000 8098 	beq.w	133dc <pdn_interface_open+0x14c>
   132ac:	68a3      	ldr	r3, [r4, #8]
   132ae:	2b00      	cmp	r3, #0
   132b0:	f000 8096 	beq.w	133e0 <pdn_interface_open+0x150>
   132b4:	68e3      	ldr	r3, [r4, #12]
   132b6:	2b00      	cmp	r3, #0
   132b8:	f000 8094 	beq.w	133e4 <pdn_interface_open+0x154>
   132bc:	6923      	ldr	r3, [r4, #16]
   132be:	2b00      	cmp	r3, #0
   132c0:	f000 8092 	beq.w	133e8 <pdn_interface_open+0x158>
   132c4:	6963      	ldr	r3, [r4, #20]
   132c6:	2b00      	cmp	r3, #0
   132c8:	f000 8090 	beq.w	133ec <pdn_interface_open+0x15c>
   132cc:	69a3      	ldr	r3, [r4, #24]
   132ce:	2b00      	cmp	r3, #0
   132d0:	f000 808e 	beq.w	133f0 <pdn_interface_open+0x160>
   132d4:	69e3      	ldr	r3, [r4, #28]
   132d6:	2b00      	cmp	r3, #0
   132d8:	f000 808c 	beq.w	133f4 <pdn_interface_open+0x164>
   132dc:	6a23      	ldr	r3, [r4, #32]
   132de:	b153      	cbz	r3, 132f6 <pdn_interface_open+0x66>
   132e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   132e2:	2509      	movs	r5, #9
   132e4:	b143      	cbz	r3, 132f8 <pdn_interface_open+0x68>
   132e6:	200c      	movs	r0, #12
   132e8:	f7fc f822 	bl	f330 <bsd_os_errno_set>
   132ec:	f04f 30ff 	mov.w	r0, #4294967295
   132f0:	b003      	add	sp, #12
   132f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   132f6:	2508      	movs	r5, #8
   132f8:	2074      	movs	r0, #116	; 0x74
   132fa:	f7fd fd3b 	bl	10d74 <nrf_malloc>
   132fe:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   13302:	2800      	cmp	r0, #0
   13304:	d0ef      	beq.n	132e6 <pdn_interface_open+0x56>
   13306:	2274      	movs	r2, #116	; 0x74
   13308:	2100      	movs	r1, #0
   1330a:	f009 f8b9 	bl	1c480 <memset>
   1330e:	2101      	movs	r1, #1
   13310:	2003      	movs	r0, #3
   13312:	f04f 37ff 	mov.w	r7, #4294967295
   13316:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1331a:	4a41      	ldr	r2, [pc, #260]	; (13420 <pdn_interface_open+0x190>)
   1331c:	6099      	str	r1, [r3, #8]
   1331e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   13322:	f44f 7180 	mov.w	r1, #256	; 0x100
   13326:	6718      	str	r0, [r3, #112]	; 0x70
   13328:	605f      	str	r7, [r3, #4]
   1332a:	483e      	ldr	r0, [pc, #248]	; (13424 <pdn_interface_open+0x194>)
   1332c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 13430 <pdn_interface_open+0x1a0>
   13330:	f006 fd0c 	bl	19d4c <sniprintf>
   13334:	483b      	ldr	r0, [pc, #236]	; (13424 <pdn_interface_open+0x194>)
   13336:	f8d8 9000 	ldr.w	r9, [r8]
   1333a:	2600      	movs	r6, #0
   1333c:	f7f9 fd9c 	bl	ce78 <strlen>
   13340:	4633      	mov	r3, r6
   13342:	4602      	mov	r2, r0
   13344:	4937      	ldr	r1, [pc, #220]	; (13424 <pdn_interface_open+0x194>)
   13346:	4648      	mov	r0, r9
   13348:	9601      	str	r6, [sp, #4]
   1334a:	9600      	str	r6, [sp, #0]
   1334c:	f7fc ff62 	bl	10214 <at_interface_write>
   13350:	4681      	mov	r9, r0
   13352:	4834      	ldr	r0, [pc, #208]	; (13424 <pdn_interface_open+0x194>)
   13354:	f7f9 fd90 	bl	ce78 <strlen>
   13358:	4548      	cmp	r0, r9
   1335a:	d153      	bne.n	13404 <pdn_interface_open+0x174>
   1335c:	4633      	mov	r3, r6
   1335e:	e9cd 6600 	strd	r6, r6, [sp]
   13362:	f44f 7280 	mov.w	r2, #256	; 0x100
   13366:	492f      	ldr	r1, [pc, #188]	; (13424 <pdn_interface_open+0x194>)
   13368:	f8d8 0000 	ldr.w	r0, [r8]
   1336c:	f7fd f856 	bl	1041c <at_interface_read>
   13370:	4606      	mov	r6, r0
   13372:	482d      	ldr	r0, [pc, #180]	; (13428 <pdn_interface_open+0x198>)
   13374:	f7f9 fd80 	bl	ce78 <strlen>
   13378:	4286      	cmp	r6, r0
   1337a:	db15      	blt.n	133a8 <pdn_interface_open+0x118>
   1337c:	4602      	mov	r2, r0
   1337e:	4929      	ldr	r1, [pc, #164]	; (13424 <pdn_interface_open+0x194>)
   13380:	4829      	ldr	r0, [pc, #164]	; (13428 <pdn_interface_open+0x198>)
   13382:	f009 f9c3 	bl	1c70c <strncmp>
   13386:	b978      	cbnz	r0, 133a8 <pdn_interface_open+0x118>
   13388:	4926      	ldr	r1, [pc, #152]	; (13424 <pdn_interface_open+0x194>)
   1338a:	4628      	mov	r0, r5
   1338c:	f7ff ff3a 	bl	13204 <context_create_parser>
   13390:	b9b0      	cbnz	r0, 133c0 <pdn_interface_open+0x130>
   13392:	2202      	movs	r2, #2
   13394:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   13398:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1339c:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   133a0:	609a      	str	r2, [r3, #8]
   133a2:	b003      	add	sp, #12
   133a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   133a8:	4820      	ldr	r0, [pc, #128]	; (1342c <pdn_interface_open+0x19c>)
   133aa:	f7f9 fd65 	bl	ce78 <strlen>
   133ae:	491d      	ldr	r1, [pc, #116]	; (13424 <pdn_interface_open+0x194>)
   133b0:	4602      	mov	r2, r0
   133b2:	481e      	ldr	r0, [pc, #120]	; (1342c <pdn_interface_open+0x19c>)
   133b4:	f009 f9aa 	bl	1c70c <strncmp>
   133b8:	b960      	cbnz	r0, 133d4 <pdn_interface_open+0x144>
   133ba:	2008      	movs	r0, #8
   133bc:	f7fb ffb8 	bl	f330 <bsd_os_errno_set>
   133c0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   133c4:	f7fd fce0 	bl	10d88 <nrf_free>
   133c8:	2300      	movs	r3, #0
   133ca:	f04f 30ff 	mov.w	r0, #4294967295
   133ce:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   133d2:	e78d      	b.n	132f0 <pdn_interface_open+0x60>
   133d4:	2005      	movs	r0, #5
   133d6:	f7fb ffab 	bl	f330 <bsd_os_errno_set>
   133da:	e7f1      	b.n	133c0 <pdn_interface_open+0x130>
   133dc:	2501      	movs	r5, #1
   133de:	e78b      	b.n	132f8 <pdn_interface_open+0x68>
   133e0:	2502      	movs	r5, #2
   133e2:	e789      	b.n	132f8 <pdn_interface_open+0x68>
   133e4:	2503      	movs	r5, #3
   133e6:	e787      	b.n	132f8 <pdn_interface_open+0x68>
   133e8:	2504      	movs	r5, #4
   133ea:	e785      	b.n	132f8 <pdn_interface_open+0x68>
   133ec:	2505      	movs	r5, #5
   133ee:	e783      	b.n	132f8 <pdn_interface_open+0x68>
   133f0:	2506      	movs	r5, #6
   133f2:	e781      	b.n	132f8 <pdn_interface_open+0x68>
   133f4:	2507      	movs	r5, #7
   133f6:	e77f      	b.n	132f8 <pdn_interface_open+0x68>
   133f8:	2029      	movs	r0, #41	; 0x29
   133fa:	f7fb ff99 	bl	f330 <bsd_os_errno_set>
   133fe:	f04f 30ff 	mov.w	r0, #4294967295
   13402:	e775      	b.n	132f0 <pdn_interface_open+0x60>
   13404:	2005      	movs	r0, #5
   13406:	f7fb ff93 	bl	f330 <bsd_os_errno_set>
   1340a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1340e:	f7fd fcbb 	bl	10d88 <nrf_free>
   13412:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   13416:	4638      	mov	r0, r7
   13418:	e76a      	b.n	132f0 <pdn_interface_open+0x60>
   1341a:	bf00      	nop
   1341c:	20020730 	.word	0x20020730
   13420:	0001d810 	.word	0x0001d810
   13424:	20020630 	.word	0x20020630
   13428:	0001d820 	.word	0x0001d820
   1342c:	0001d82c 	.word	0x0001d82c
   13430:	2002062c 	.word	0x2002062c

00013434 <pdn_interface_connect>:
   13434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13438:	b083      	sub	sp, #12
   1343a:	2900      	cmp	r1, #0
   1343c:	f000 813d 	beq.w	136ba <pdn_interface_connect+0x286>
   13440:	2a64      	cmp	r2, #100	; 0x64
   13442:	4691      	mov	r9, r2
   13444:	f200 8139 	bhi.w	136ba <pdn_interface_connect+0x286>
   13448:	4605      	mov	r5, r0
   1344a:	4608      	mov	r0, r1
   1344c:	4688      	mov	r8, r1
   1344e:	f7f9 fd13 	bl	ce78 <strlen>
   13452:	2864      	cmp	r0, #100	; 0x64
   13454:	f200 8131 	bhi.w	136ba <pdn_interface_connect+0x286>
   13458:	0c2b      	lsrs	r3, r5, #16
   1345a:	4aa5      	ldr	r2, [pc, #660]	; (136f0 <pdn_interface_connect+0x2bc>)
   1345c:	041b      	lsls	r3, r3, #16
   1345e:	4293      	cmp	r3, r2
   13460:	f040 8122 	bne.w	136a8 <pdn_interface_connect+0x274>
   13464:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   13468:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   1346c:	2d09      	cmp	r5, #9
   1346e:	f300 811b 	bgt.w	136a8 <pdn_interface_connect+0x274>
   13472:	4fa0      	ldr	r7, [pc, #640]	; (136f4 <pdn_interface_connect+0x2c0>)
   13474:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   13478:	2b00      	cmp	r3, #0
   1347a:	f000 8115 	beq.w	136a8 <pdn_interface_connect+0x274>
   1347e:	689a      	ldr	r2, [r3, #8]
   13480:	2a00      	cmp	r2, #0
   13482:	f000 8111 	beq.w	136a8 <pdn_interface_connect+0x274>
   13486:	689b      	ldr	r3, [r3, #8]
   13488:	2b02      	cmp	r3, #2
   1348a:	f040 810d 	bne.w	136a8 <pdn_interface_connect+0x274>
   1348e:	4e9a      	ldr	r6, [pc, #616]	; (136f8 <pdn_interface_connect+0x2c4>)
   13490:	4a9a      	ldr	r2, [pc, #616]	; (136fc <pdn_interface_connect+0x2c8>)
   13492:	f44f 7180 	mov.w	r1, #256	; 0x100
   13496:	4630      	mov	r0, r6
   13498:	f006 fc58 	bl	19d4c <sniprintf>
   1349c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   134a0:	4604      	mov	r4, r0
   134a2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   134a6:	681b      	ldr	r3, [r3, #0]
   134a8:	4a95      	ldr	r2, [pc, #596]	; (13700 <pdn_interface_connect+0x2cc>)
   134aa:	1830      	adds	r0, r6, r0
   134ac:	f006 fc4e 	bl	19d4c <sniprintf>
   134b0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   134b4:	4404      	add	r4, r0
   134b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   134b8:	f003 0203 	and.w	r2, r3, #3
   134bc:	2a03      	cmp	r2, #3
   134be:	f000 80ea 	beq.w	13696 <pdn_interface_connect+0x262>
   134c2:	079b      	lsls	r3, r3, #30
   134c4:	eb06 0004 	add.w	r0, r6, r4
   134c8:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   134cc:	bf4c      	ite	mi
   134ce:	4b8d      	ldrmi	r3, [pc, #564]	; (13704 <pdn_interface_connect+0x2d0>)
   134d0:	4b8d      	ldrpl	r3, [pc, #564]	; (13708 <pdn_interface_connect+0x2d4>)
   134d2:	4a8e      	ldr	r2, [pc, #568]	; (1370c <pdn_interface_connect+0x2d8>)
   134d4:	f006 fc3a 	bl	19d4c <sniprintf>
   134d8:	4404      	add	r4, r0
   134da:	4643      	mov	r3, r8
   134dc:	4a8c      	ldr	r2, [pc, #560]	; (13710 <pdn_interface_connect+0x2dc>)
   134de:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   134e2:	1930      	adds	r0, r6, r4
   134e4:	f006 fc32 	bl	19d4c <sniprintf>
   134e8:	4420      	add	r0, r4
   134ea:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   134ee:	f300 80f7 	bgt.w	136e0 <pdn_interface_connect+0x2ac>
   134f2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 13730 <pdn_interface_connect+0x2fc>
   134f6:	4880      	ldr	r0, [pc, #512]	; (136f8 <pdn_interface_connect+0x2c4>)
   134f8:	f8da b000 	ldr.w	fp, [sl]
   134fc:	2400      	movs	r4, #0
   134fe:	f7f9 fcbb 	bl	ce78 <strlen>
   13502:	4623      	mov	r3, r4
   13504:	4602      	mov	r2, r0
   13506:	497c      	ldr	r1, [pc, #496]	; (136f8 <pdn_interface_connect+0x2c4>)
   13508:	4658      	mov	r0, fp
   1350a:	9401      	str	r4, [sp, #4]
   1350c:	9400      	str	r4, [sp, #0]
   1350e:	f7fc fe81 	bl	10214 <at_interface_write>
   13512:	4683      	mov	fp, r0
   13514:	4878      	ldr	r0, [pc, #480]	; (136f8 <pdn_interface_connect+0x2c4>)
   13516:	f7f9 fcaf 	bl	ce78 <strlen>
   1351a:	4558      	cmp	r0, fp
   1351c:	d008      	beq.n	13530 <pdn_interface_connect+0xfc>
   1351e:	2005      	movs	r0, #5
   13520:	f7fb ff06 	bl	f330 <bsd_os_errno_set>
   13524:	f04f 34ff 	mov.w	r4, #4294967295
   13528:	4620      	mov	r0, r4
   1352a:	b003      	add	sp, #12
   1352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13530:	4623      	mov	r3, r4
   13532:	e9cd 4400 	strd	r4, r4, [sp]
   13536:	f44f 7280 	mov.w	r2, #256	; 0x100
   1353a:	496f      	ldr	r1, [pc, #444]	; (136f8 <pdn_interface_connect+0x2c4>)
   1353c:	f8da 0000 	ldr.w	r0, [sl]
   13540:	f7fc ff6c 	bl	1041c <at_interface_read>
   13544:	4604      	mov	r4, r0
   13546:	4873      	ldr	r0, [pc, #460]	; (13714 <pdn_interface_connect+0x2e0>)
   13548:	f7f9 fc96 	bl	ce78 <strlen>
   1354c:	4284      	cmp	r4, r0
   1354e:	f2c0 8091 	blt.w	13674 <pdn_interface_connect+0x240>
   13552:	4602      	mov	r2, r0
   13554:	4968      	ldr	r1, [pc, #416]	; (136f8 <pdn_interface_connect+0x2c4>)
   13556:	486f      	ldr	r0, [pc, #444]	; (13714 <pdn_interface_connect+0x2e0>)
   13558:	f009 f8d8 	bl	1c70c <strncmp>
   1355c:	2800      	cmp	r0, #0
   1355e:	f040 8089 	bne.w	13674 <pdn_interface_connect+0x240>
   13562:	4965      	ldr	r1, [pc, #404]	; (136f8 <pdn_interface_connect+0x2c4>)
   13564:	4628      	mov	r0, r5
   13566:	f7ff fde9 	bl	1313c <ok_rsp_parser>
   1356a:	4604      	mov	r4, r0
   1356c:	2800      	cmp	r0, #0
   1356e:	d1db      	bne.n	13528 <pdn_interface_connect+0xf4>
   13570:	4a69      	ldr	r2, [pc, #420]	; (13718 <pdn_interface_connect+0x2e4>)
   13572:	f44f 7180 	mov.w	r1, #256	; 0x100
   13576:	4860      	ldr	r0, [pc, #384]	; (136f8 <pdn_interface_connect+0x2c4>)
   13578:	f006 fbe8 	bl	19d4c <sniprintf>
   1357c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   13580:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   13584:	681b      	ldr	r3, [r3, #0]
   13586:	4a65      	ldr	r2, [pc, #404]	; (1371c <pdn_interface_connect+0x2e8>)
   13588:	4430      	add	r0, r6
   1358a:	f006 fbdf 	bl	19d4c <sniprintf>
   1358e:	485a      	ldr	r0, [pc, #360]	; (136f8 <pdn_interface_connect+0x2c4>)
   13590:	f8da b000 	ldr.w	fp, [sl]
   13594:	f7f9 fc70 	bl	ce78 <strlen>
   13598:	4623      	mov	r3, r4
   1359a:	4602      	mov	r2, r0
   1359c:	4956      	ldr	r1, [pc, #344]	; (136f8 <pdn_interface_connect+0x2c4>)
   1359e:	4658      	mov	r0, fp
   135a0:	9401      	str	r4, [sp, #4]
   135a2:	9400      	str	r4, [sp, #0]
   135a4:	f7fc fe36 	bl	10214 <at_interface_write>
   135a8:	4683      	mov	fp, r0
   135aa:	4853      	ldr	r0, [pc, #332]	; (136f8 <pdn_interface_connect+0x2c4>)
   135ac:	f7f9 fc64 	bl	ce78 <strlen>
   135b0:	4558      	cmp	r0, fp
   135b2:	d1b4      	bne.n	1351e <pdn_interface_connect+0xea>
   135b4:	4623      	mov	r3, r4
   135b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   135ba:	494f      	ldr	r1, [pc, #316]	; (136f8 <pdn_interface_connect+0x2c4>)
   135bc:	f8da 0000 	ldr.w	r0, [sl]
   135c0:	e9cd 4400 	strd	r4, r4, [sp]
   135c4:	f7fc ff2a 	bl	1041c <at_interface_read>
   135c8:	4683      	mov	fp, r0
   135ca:	4852      	ldr	r0, [pc, #328]	; (13714 <pdn_interface_connect+0x2e0>)
   135cc:	f7f9 fc54 	bl	ce78 <strlen>
   135d0:	4583      	cmp	fp, r0
   135d2:	db4f      	blt.n	13674 <pdn_interface_connect+0x240>
   135d4:	4602      	mov	r2, r0
   135d6:	4948      	ldr	r1, [pc, #288]	; (136f8 <pdn_interface_connect+0x2c4>)
   135d8:	484e      	ldr	r0, [pc, #312]	; (13714 <pdn_interface_connect+0x2e0>)
   135da:	f009 f897 	bl	1c70c <strncmp>
   135de:	2800      	cmp	r0, #0
   135e0:	d148      	bne.n	13674 <pdn_interface_connect+0x240>
   135e2:	2103      	movs	r1, #3
   135e4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   135e8:	464a      	mov	r2, r9
   135ea:	6099      	str	r1, [r3, #8]
   135ec:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   135f0:	4641      	mov	r1, r8
   135f2:	300c      	adds	r0, #12
   135f4:	f008 ff37 	bl	1c466 <memcpy>
   135f8:	4a49      	ldr	r2, [pc, #292]	; (13720 <pdn_interface_connect+0x2ec>)
   135fa:	f44f 7180 	mov.w	r1, #256	; 0x100
   135fe:	483e      	ldr	r0, [pc, #248]	; (136f8 <pdn_interface_connect+0x2c4>)
   13600:	f006 fba4 	bl	19d4c <sniprintf>
   13604:	4601      	mov	r1, r0
   13606:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1360a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1360e:	681b      	ldr	r3, [r3, #0]
   13610:	4a42      	ldr	r2, [pc, #264]	; (1371c <pdn_interface_connect+0x2e8>)
   13612:	1830      	adds	r0, r6, r0
   13614:	f006 fb9a 	bl	19d4c <sniprintf>
   13618:	4837      	ldr	r0, [pc, #220]	; (136f8 <pdn_interface_connect+0x2c4>)
   1361a:	f8da 6000 	ldr.w	r6, [sl]
   1361e:	f7f9 fc2b 	bl	ce78 <strlen>
   13622:	4623      	mov	r3, r4
   13624:	4602      	mov	r2, r0
   13626:	4934      	ldr	r1, [pc, #208]	; (136f8 <pdn_interface_connect+0x2c4>)
   13628:	4630      	mov	r0, r6
   1362a:	9401      	str	r4, [sp, #4]
   1362c:	9400      	str	r4, [sp, #0]
   1362e:	f7fc fdf1 	bl	10214 <at_interface_write>
   13632:	4606      	mov	r6, r0
   13634:	4830      	ldr	r0, [pc, #192]	; (136f8 <pdn_interface_connect+0x2c4>)
   13636:	f7f9 fc1f 	bl	ce78 <strlen>
   1363a:	42b0      	cmp	r0, r6
   1363c:	d153      	bne.n	136e6 <pdn_interface_connect+0x2b2>
   1363e:	4623      	mov	r3, r4
   13640:	f44f 7280 	mov.w	r2, #256	; 0x100
   13644:	492c      	ldr	r1, [pc, #176]	; (136f8 <pdn_interface_connect+0x2c4>)
   13646:	f8da 0000 	ldr.w	r0, [sl]
   1364a:	e9cd 4400 	strd	r4, r4, [sp]
   1364e:	f7fc fee5 	bl	1041c <at_interface_read>
   13652:	4606      	mov	r6, r0
   13654:	4833      	ldr	r0, [pc, #204]	; (13724 <pdn_interface_connect+0x2f0>)
   13656:	f7f9 fc0f 	bl	ce78 <strlen>
   1365a:	4286      	cmp	r6, r0
   1365c:	db33      	blt.n	136c6 <pdn_interface_connect+0x292>
   1365e:	4602      	mov	r2, r0
   13660:	4925      	ldr	r1, [pc, #148]	; (136f8 <pdn_interface_connect+0x2c4>)
   13662:	4830      	ldr	r0, [pc, #192]	; (13724 <pdn_interface_connect+0x2f0>)
   13664:	f009 f852 	bl	1c70c <strncmp>
   13668:	bb68      	cbnz	r0, 136c6 <pdn_interface_connect+0x292>
   1366a:	4628      	mov	r0, r5
   1366c:	4922      	ldr	r1, [pc, #136]	; (136f8 <pdn_interface_connect+0x2c4>)
   1366e:	f7ff fd9d 	bl	131ac <pdn_id_get_parser>
   13672:	e759      	b.n	13528 <pdn_interface_connect+0xf4>
   13674:	482c      	ldr	r0, [pc, #176]	; (13728 <pdn_interface_connect+0x2f4>)
   13676:	f7f9 fbff 	bl	ce78 <strlen>
   1367a:	491f      	ldr	r1, [pc, #124]	; (136f8 <pdn_interface_connect+0x2c4>)
   1367c:	4602      	mov	r2, r0
   1367e:	482a      	ldr	r0, [pc, #168]	; (13728 <pdn_interface_connect+0x2f4>)
   13680:	f009 f844 	bl	1c70c <strncmp>
   13684:	2800      	cmp	r0, #0
   13686:	f47f af4a 	bne.w	1351e <pdn_interface_connect+0xea>
   1368a:	2008      	movs	r0, #8
   1368c:	f7fb fe50 	bl	f330 <bsd_os_errno_set>
   13690:	f04f 34ff 	mov.w	r4, #4294967295
   13694:	e748      	b.n	13528 <pdn_interface_connect+0xf4>
   13696:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1369a:	1930      	adds	r0, r6, r4
   1369c:	4b23      	ldr	r3, [pc, #140]	; (1372c <pdn_interface_connect+0x2f8>)
   1369e:	4a1b      	ldr	r2, [pc, #108]	; (1370c <pdn_interface_connect+0x2d8>)
   136a0:	f006 fb54 	bl	19d4c <sniprintf>
   136a4:	4404      	add	r4, r0
   136a6:	e718      	b.n	134da <pdn_interface_connect+0xa6>
   136a8:	f04f 34ff 	mov.w	r4, #4294967295
   136ac:	2009      	movs	r0, #9
   136ae:	f7fb fe3f 	bl	f330 <bsd_os_errno_set>
   136b2:	4620      	mov	r0, r4
   136b4:	b003      	add	sp, #12
   136b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136ba:	2016      	movs	r0, #22
   136bc:	f7fb fe38 	bl	f330 <bsd_os_errno_set>
   136c0:	f04f 34ff 	mov.w	r4, #4294967295
   136c4:	e730      	b.n	13528 <pdn_interface_connect+0xf4>
   136c6:	4818      	ldr	r0, [pc, #96]	; (13728 <pdn_interface_connect+0x2f4>)
   136c8:	f7f9 fbd6 	bl	ce78 <strlen>
   136cc:	490a      	ldr	r1, [pc, #40]	; (136f8 <pdn_interface_connect+0x2c4>)
   136ce:	4602      	mov	r2, r0
   136d0:	4815      	ldr	r0, [pc, #84]	; (13728 <pdn_interface_connect+0x2f4>)
   136d2:	f009 f81b 	bl	1c70c <strncmp>
   136d6:	b930      	cbnz	r0, 136e6 <pdn_interface_connect+0x2b2>
   136d8:	2008      	movs	r0, #8
   136da:	f7fb fe29 	bl	f330 <bsd_os_errno_set>
   136de:	e723      	b.n	13528 <pdn_interface_connect+0xf4>
   136e0:	f04f 34ff 	mov.w	r4, #4294967295
   136e4:	e720      	b.n	13528 <pdn_interface_connect+0xf4>
   136e6:	2005      	movs	r0, #5
   136e8:	f7fb fe22 	bl	f330 <bsd_os_errno_set>
   136ec:	e71c      	b.n	13528 <pdn_interface_connect+0xf4>
   136ee:	bf00      	nop
   136f0:	789a0000 	.word	0x789a0000
   136f4:	20020730 	.word	0x20020730
   136f8:	20020630 	.word	0x20020630
   136fc:	0001d798 	.word	0x0001d798
   13700:	0001d7a4 	.word	0x0001d7a4
   13704:	0001d7b8 	.word	0x0001d7b8
   13708:	0001d7c0 	.word	0x0001d7c0
   1370c:	0001d7b0 	.word	0x0001d7b0
   13710:	0001d7f4 	.word	0x0001d7f4
   13714:	0001d7c4 	.word	0x0001d7c4
   13718:	0001d7c8 	.word	0x0001d7c8
   1371c:	0001d7d4 	.word	0x0001d7d4
   13720:	0001d7d8 	.word	0x0001d7d8
   13724:	0001d7e8 	.word	0x0001d7e8
   13728:	0001d82c 	.word	0x0001d82c
   1372c:	0001d7a8 	.word	0x0001d7a8
   13730:	2002062c 	.word	0x2002062c

00013734 <pdn_interface_close>:
   13734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13738:	4a64      	ldr	r2, [pc, #400]	; (138cc <pdn_interface_close+0x198>)
   1373a:	0c03      	lsrs	r3, r0, #16
   1373c:	041b      	lsls	r3, r3, #16
   1373e:	4293      	cmp	r3, r2
   13740:	b083      	sub	sp, #12
   13742:	f040 809d 	bne.w	13880 <pdn_interface_close+0x14c>
   13746:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1374a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1374e:	2c09      	cmp	r4, #9
   13750:	f300 8096 	bgt.w	13880 <pdn_interface_close+0x14c>
   13754:	4d5e      	ldr	r5, [pc, #376]	; (138d0 <pdn_interface_close+0x19c>)
   13756:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1375a:	2800      	cmp	r0, #0
   1375c:	f000 8090 	beq.w	13880 <pdn_interface_close+0x14c>
   13760:	6883      	ldr	r3, [r0, #8]
   13762:	2b00      	cmp	r3, #0
   13764:	f000 808c 	beq.w	13880 <pdn_interface_close+0x14c>
   13768:	6883      	ldr	r3, [r0, #8]
   1376a:	2b03      	cmp	r3, #3
   1376c:	d008      	beq.n	13780 <pdn_interface_close+0x4c>
   1376e:	f7fd fb0b 	bl	10d88 <nrf_free>
   13772:	2300      	movs	r3, #0
   13774:	4618      	mov	r0, r3
   13776:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1377a:	b003      	add	sp, #12
   1377c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13780:	4e54      	ldr	r6, [pc, #336]	; (138d4 <pdn_interface_close+0x1a0>)
   13782:	4a55      	ldr	r2, [pc, #340]	; (138d8 <pdn_interface_close+0x1a4>)
   13784:	f44f 7180 	mov.w	r1, #256	; 0x100
   13788:	4630      	mov	r0, r6
   1378a:	f006 fadf 	bl	19d4c <sniprintf>
   1378e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   13792:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   13796:	681b      	ldr	r3, [r3, #0]
   13798:	4a50      	ldr	r2, [pc, #320]	; (138dc <pdn_interface_close+0x1a8>)
   1379a:	4430      	add	r0, r6
   1379c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 138ec <pdn_interface_close+0x1b8>
   137a0:	f006 fad4 	bl	19d4c <sniprintf>
   137a4:	4630      	mov	r0, r6
   137a6:	f8d8 9000 	ldr.w	r9, [r8]
   137aa:	2700      	movs	r7, #0
   137ac:	f7f9 fb64 	bl	ce78 <strlen>
   137b0:	4631      	mov	r1, r6
   137b2:	4602      	mov	r2, r0
   137b4:	463b      	mov	r3, r7
   137b6:	4648      	mov	r0, r9
   137b8:	9701      	str	r7, [sp, #4]
   137ba:	9700      	str	r7, [sp, #0]
   137bc:	f7fc fd2a 	bl	10214 <at_interface_write>
   137c0:	4681      	mov	r9, r0
   137c2:	4630      	mov	r0, r6
   137c4:	f7f9 fb58 	bl	ce78 <strlen>
   137c8:	4548      	cmp	r0, r9
   137ca:	d176      	bne.n	138ba <pdn_interface_close+0x186>
   137cc:	463b      	mov	r3, r7
   137ce:	e9cd 7700 	strd	r7, r7, [sp]
   137d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   137d6:	4631      	mov	r1, r6
   137d8:	f8d8 0000 	ldr.w	r0, [r8]
   137dc:	f7fc fe1e 	bl	1041c <at_interface_read>
   137e0:	4607      	mov	r7, r0
   137e2:	483f      	ldr	r0, [pc, #252]	; (138e0 <pdn_interface_close+0x1ac>)
   137e4:	f7f9 fb48 	bl	ce78 <strlen>
   137e8:	4287      	cmp	r7, r0
   137ea:	da4f      	bge.n	1388c <pdn_interface_close+0x158>
   137ec:	483d      	ldr	r0, [pc, #244]	; (138e4 <pdn_interface_close+0x1b0>)
   137ee:	f7f9 fb43 	bl	ce78 <strlen>
   137f2:	4938      	ldr	r1, [pc, #224]	; (138d4 <pdn_interface_close+0x1a0>)
   137f4:	4602      	mov	r2, r0
   137f6:	483b      	ldr	r0, [pc, #236]	; (138e4 <pdn_interface_close+0x1b0>)
   137f8:	f008 ff88 	bl	1c70c <strncmp>
   137fc:	2800      	cmp	r0, #0
   137fe:	d15c      	bne.n	138ba <pdn_interface_close+0x186>
   13800:	2008      	movs	r0, #8
   13802:	f7fb fd95 	bl	f330 <bsd_os_errno_set>
   13806:	4a38      	ldr	r2, [pc, #224]	; (138e8 <pdn_interface_close+0x1b4>)
   13808:	f44f 7180 	mov.w	r1, #256	; 0x100
   1380c:	4831      	ldr	r0, [pc, #196]	; (138d4 <pdn_interface_close+0x1a0>)
   1380e:	f006 fa9d 	bl	19d4c <sniprintf>
   13812:	4601      	mov	r1, r0
   13814:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   13818:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1381c:	681b      	ldr	r3, [r3, #0]
   1381e:	4a2f      	ldr	r2, [pc, #188]	; (138dc <pdn_interface_close+0x1a8>)
   13820:	1830      	adds	r0, r6, r0
   13822:	f006 fa93 	bl	19d4c <sniprintf>
   13826:	482b      	ldr	r0, [pc, #172]	; (138d4 <pdn_interface_close+0x1a0>)
   13828:	f8d8 7000 	ldr.w	r7, [r8]
   1382c:	2600      	movs	r6, #0
   1382e:	f7f9 fb23 	bl	ce78 <strlen>
   13832:	4633      	mov	r3, r6
   13834:	4602      	mov	r2, r0
   13836:	4927      	ldr	r1, [pc, #156]	; (138d4 <pdn_interface_close+0x1a0>)
   13838:	4638      	mov	r0, r7
   1383a:	9601      	str	r6, [sp, #4]
   1383c:	9600      	str	r6, [sp, #0]
   1383e:	f7fc fce9 	bl	10214 <at_interface_write>
   13842:	4607      	mov	r7, r0
   13844:	4823      	ldr	r0, [pc, #140]	; (138d4 <pdn_interface_close+0x1a0>)
   13846:	f7f9 fb17 	bl	ce78 <strlen>
   1384a:	42b8      	cmp	r0, r7
   1384c:	d139      	bne.n	138c2 <pdn_interface_close+0x18e>
   1384e:	4633      	mov	r3, r6
   13850:	e9cd 6600 	strd	r6, r6, [sp]
   13854:	f44f 7280 	mov.w	r2, #256	; 0x100
   13858:	491e      	ldr	r1, [pc, #120]	; (138d4 <pdn_interface_close+0x1a0>)
   1385a:	f8d8 0000 	ldr.w	r0, [r8]
   1385e:	f7fc fddd 	bl	1041c <at_interface_read>
   13862:	4606      	mov	r6, r0
   13864:	481e      	ldr	r0, [pc, #120]	; (138e0 <pdn_interface_close+0x1ac>)
   13866:	f7f9 fb07 	bl	ce78 <strlen>
   1386a:	4286      	cmp	r6, r0
   1386c:	db16      	blt.n	1389c <pdn_interface_close+0x168>
   1386e:	4602      	mov	r2, r0
   13870:	4918      	ldr	r1, [pc, #96]	; (138d4 <pdn_interface_close+0x1a0>)
   13872:	481b      	ldr	r0, [pc, #108]	; (138e0 <pdn_interface_close+0x1ac>)
   13874:	f008 ff4a 	bl	1c70c <strncmp>
   13878:	b980      	cbnz	r0, 1389c <pdn_interface_close+0x168>
   1387a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1387e:	e776      	b.n	1376e <pdn_interface_close+0x3a>
   13880:	2009      	movs	r0, #9
   13882:	f7fb fd55 	bl	f330 <bsd_os_errno_set>
   13886:	f04f 30ff 	mov.w	r0, #4294967295
   1388a:	e776      	b.n	1377a <pdn_interface_close+0x46>
   1388c:	4602      	mov	r2, r0
   1388e:	4631      	mov	r1, r6
   13890:	4813      	ldr	r0, [pc, #76]	; (138e0 <pdn_interface_close+0x1ac>)
   13892:	f008 ff3b 	bl	1c70c <strncmp>
   13896:	2800      	cmp	r0, #0
   13898:	d0b5      	beq.n	13806 <pdn_interface_close+0xd2>
   1389a:	e7a7      	b.n	137ec <pdn_interface_close+0xb8>
   1389c:	4811      	ldr	r0, [pc, #68]	; (138e4 <pdn_interface_close+0x1b0>)
   1389e:	f7f9 faeb 	bl	ce78 <strlen>
   138a2:	490c      	ldr	r1, [pc, #48]	; (138d4 <pdn_interface_close+0x1a0>)
   138a4:	4602      	mov	r2, r0
   138a6:	480f      	ldr	r0, [pc, #60]	; (138e4 <pdn_interface_close+0x1b0>)
   138a8:	f008 ff30 	bl	1c70c <strncmp>
   138ac:	b948      	cbnz	r0, 138c2 <pdn_interface_close+0x18e>
   138ae:	2008      	movs	r0, #8
   138b0:	f7fb fd3e 	bl	f330 <bsd_os_errno_set>
   138b4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   138b8:	e759      	b.n	1376e <pdn_interface_close+0x3a>
   138ba:	2005      	movs	r0, #5
   138bc:	f7fb fd38 	bl	f330 <bsd_os_errno_set>
   138c0:	e7a1      	b.n	13806 <pdn_interface_close+0xd2>
   138c2:	2005      	movs	r0, #5
   138c4:	f7fb fd34 	bl	f330 <bsd_os_errno_set>
   138c8:	e7d7      	b.n	1387a <pdn_interface_close+0x146>
   138ca:	bf00      	nop
   138cc:	789a0000 	.word	0x789a0000
   138d0:	20020730 	.word	0x20020730
   138d4:	20020630 	.word	0x20020630
   138d8:	0001d78c 	.word	0x0001d78c
   138dc:	0001d7d4 	.word	0x0001d7d4
   138e0:	0001d7c4 	.word	0x0001d7c4
   138e4:	0001d82c 	.word	0x0001d82c
   138e8:	0001d798 	.word	0x0001d798
   138ec:	2002062c 	.word	0x2002062c

000138f0 <pdn_interface_setopt>:
   138f0:	b510      	push	{r4, lr}
   138f2:	f240 2402 	movw	r4, #514	; 0x202
   138f6:	42a1      	cmp	r1, r4
   138f8:	d10d      	bne.n	13916 <pdn_interface_setopt+0x26>
   138fa:	b163      	cbz	r3, 13916 <pdn_interface_setopt+0x26>
   138fc:	9902      	ldr	r1, [sp, #8]
   138fe:	b151      	cbz	r1, 13916 <pdn_interface_setopt+0x26>
   13900:	0c01      	lsrs	r1, r0, #16
   13902:	4c25      	ldr	r4, [pc, #148]	; (13998 <pdn_interface_setopt+0xa8>)
   13904:	0409      	lsls	r1, r1, #16
   13906:	42a1      	cmp	r1, r4
   13908:	d00b      	beq.n	13922 <pdn_interface_setopt+0x32>
   1390a:	2009      	movs	r0, #9
   1390c:	f7fb fd10 	bl	f330 <bsd_os_errno_set>
   13910:	f04f 30ff 	mov.w	r0, #4294967295
   13914:	bd10      	pop	{r4, pc}
   13916:	2016      	movs	r0, #22
   13918:	f7fb fd0a 	bl	f330 <bsd_os_errno_set>
   1391c:	f04f 30ff 	mov.w	r0, #4294967295
   13920:	bd10      	pop	{r4, pc}
   13922:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   13926:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1392a:	2809      	cmp	r0, #9
   1392c:	dced      	bgt.n	1390a <pdn_interface_setopt+0x1a>
   1392e:	491b      	ldr	r1, [pc, #108]	; (1399c <pdn_interface_setopt+0xac>)
   13930:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   13934:	2900      	cmp	r1, #0
   13936:	d0e8      	beq.n	1390a <pdn_interface_setopt+0x1a>
   13938:	6888      	ldr	r0, [r1, #8]
   1393a:	2800      	cmp	r0, #0
   1393c:	d0e5      	beq.n	1390a <pdn_interface_setopt+0x1a>
   1393e:	2a01      	cmp	r2, #1
   13940:	d001      	beq.n	13946 <pdn_interface_setopt+0x56>
   13942:	202d      	movs	r0, #45	; 0x2d
   13944:	e7e8      	b.n	13918 <pdn_interface_setopt+0x28>
   13946:	688a      	ldr	r2, [r1, #8]
   13948:	b1fa      	cbz	r2, 1398a <pdn_interface_setopt+0x9a>
   1394a:	688a      	ldr	r2, [r1, #8]
   1394c:	2a03      	cmp	r2, #3
   1394e:	d01c      	beq.n	1398a <pdn_interface_setopt+0x9a>
   13950:	688a      	ldr	r2, [r1, #8]
   13952:	2a04      	cmp	r2, #4
   13954:	d019      	beq.n	1398a <pdn_interface_setopt+0x9a>
   13956:	9a02      	ldr	r2, [sp, #8]
   13958:	0890      	lsrs	r0, r2, #2
   1395a:	1e42      	subs	r2, r0, #1
   1395c:	2a01      	cmp	r2, #1
   1395e:	d8da      	bhi.n	13916 <pdn_interface_setopt+0x26>
   13960:	9a02      	ldr	r2, [sp, #8]
   13962:	0792      	lsls	r2, r2, #30
   13964:	d1d7      	bne.n	13916 <pdn_interface_setopt+0x26>
   13966:	681a      	ldr	r2, [r3, #0]
   13968:	2a02      	cmp	r2, #2
   1396a:	d010      	beq.n	1398e <pdn_interface_setopt+0x9e>
   1396c:	2a0a      	cmp	r2, #10
   1396e:	d1d2      	bne.n	13916 <pdn_interface_setopt+0x26>
   13970:	2202      	movs	r2, #2
   13972:	2802      	cmp	r0, #2
   13974:	d106      	bne.n	13984 <pdn_interface_setopt+0x94>
   13976:	685b      	ldr	r3, [r3, #4]
   13978:	2b02      	cmp	r3, #2
   1397a:	d00a      	beq.n	13992 <pdn_interface_setopt+0xa2>
   1397c:	2b0a      	cmp	r3, #10
   1397e:	d1ca      	bne.n	13916 <pdn_interface_setopt+0x26>
   13980:	f042 0202 	orr.w	r2, r2, #2
   13984:	670a      	str	r2, [r1, #112]	; 0x70
   13986:	2000      	movs	r0, #0
   13988:	e7c6      	b.n	13918 <pdn_interface_setopt+0x28>
   1398a:	200e      	movs	r0, #14
   1398c:	e7c4      	b.n	13918 <pdn_interface_setopt+0x28>
   1398e:	2201      	movs	r2, #1
   13990:	e7ef      	b.n	13972 <pdn_interface_setopt+0x82>
   13992:	f042 0201 	orr.w	r2, r2, #1
   13996:	e7f5      	b.n	13984 <pdn_interface_setopt+0x94>
   13998:	789a0000 	.word	0x789a0000
   1399c:	20020730 	.word	0x20020730

000139a0 <pdn_interface_getopt>:
   139a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   139a4:	f240 2402 	movw	r4, #514	; 0x202
   139a8:	b083      	sub	sp, #12
   139aa:	42a1      	cmp	r1, r4
   139ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   139ae:	f040 80a9 	bne.w	13b04 <pdn_interface_getopt+0x164>
   139b2:	461e      	mov	r6, r3
   139b4:	2b00      	cmp	r3, #0
   139b6:	f000 80a5 	beq.w	13b04 <pdn_interface_getopt+0x164>
   139ba:	2d00      	cmp	r5, #0
   139bc:	f000 80a2 	beq.w	13b04 <pdn_interface_getopt+0x164>
   139c0:	0c03      	lsrs	r3, r0, #16
   139c2:	4956      	ldr	r1, [pc, #344]	; (13b1c <pdn_interface_getopt+0x17c>)
   139c4:	041b      	lsls	r3, r3, #16
   139c6:	428b      	cmp	r3, r1
   139c8:	f040 8082 	bne.w	13ad0 <pdn_interface_getopt+0x130>
   139cc:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   139d0:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   139d4:	2c09      	cmp	r4, #9
   139d6:	dc7b      	bgt.n	13ad0 <pdn_interface_getopt+0x130>
   139d8:	4b51      	ldr	r3, [pc, #324]	; (13b20 <pdn_interface_getopt+0x180>)
   139da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   139de:	2b00      	cmp	r3, #0
   139e0:	d076      	beq.n	13ad0 <pdn_interface_getopt+0x130>
   139e2:	6899      	ldr	r1, [r3, #8]
   139e4:	2900      	cmp	r1, #0
   139e6:	d073      	beq.n	13ad0 <pdn_interface_getopt+0x130>
   139e8:	2a02      	cmp	r2, #2
   139ea:	d00e      	beq.n	13a0a <pdn_interface_getopt+0x6a>
   139ec:	2a03      	cmp	r2, #3
   139ee:	d008      	beq.n	13a02 <pdn_interface_getopt+0x62>
   139f0:	2a01      	cmp	r2, #1
   139f2:	d015      	beq.n	13a20 <pdn_interface_getopt+0x80>
   139f4:	202d      	movs	r0, #45	; 0x2d
   139f6:	f7fb fc9b 	bl	f330 <bsd_os_errno_set>
   139fa:	2000      	movs	r0, #0
   139fc:	b003      	add	sp, #12
   139fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13a02:	682b      	ldr	r3, [r5, #0]
   13a04:	bb23      	cbnz	r3, 13a50 <pdn_interface_getopt+0xb0>
   13a06:	2016      	movs	r0, #22
   13a08:	e7f5      	b.n	139f6 <pdn_interface_getopt+0x56>
   13a0a:	682a      	ldr	r2, [r5, #0]
   13a0c:	2a00      	cmp	r2, #0
   13a0e:	d0fa      	beq.n	13a06 <pdn_interface_getopt+0x66>
   13a10:	2201      	movs	r2, #1
   13a12:	2000      	movs	r0, #0
   13a14:	681b      	ldr	r3, [r3, #0]
   13a16:	7033      	strb	r3, [r6, #0]
   13a18:	602a      	str	r2, [r5, #0]
   13a1a:	b003      	add	sp, #12
   13a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13a20:	689a      	ldr	r2, [r3, #8]
   13a22:	2a00      	cmp	r2, #0
   13a24:	d052      	beq.n	13acc <pdn_interface_getopt+0x12c>
   13a26:	689a      	ldr	r2, [r3, #8]
   13a28:	2a04      	cmp	r2, #4
   13a2a:	d04f      	beq.n	13acc <pdn_interface_getopt+0x12c>
   13a2c:	682a      	ldr	r2, [r5, #0]
   13a2e:	2a07      	cmp	r2, #7
   13a30:	d9e9      	bls.n	13a06 <pdn_interface_getopt+0x66>
   13a32:	f012 0203 	ands.w	r2, r2, #3
   13a36:	d1e6      	bne.n	13a06 <pdn_interface_getopt+0x66>
   13a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   13a3a:	0799      	lsls	r1, r3, #30
   13a3c:	d45d      	bmi.n	13afa <pdn_interface_getopt+0x15a>
   13a3e:	2104      	movs	r1, #4
   13a40:	07db      	lsls	r3, r3, #31
   13a42:	d502      	bpl.n	13a4a <pdn_interface_getopt+0xaa>
   13a44:	2302      	movs	r3, #2
   13a46:	50b3      	str	r3, [r6, r2]
   13a48:	460a      	mov	r2, r1
   13a4a:	602a      	str	r2, [r5, #0]
   13a4c:	2000      	movs	r0, #0
   13a4e:	e7d5      	b.n	139fc <pdn_interface_getopt+0x5c>
   13a50:	4a34      	ldr	r2, [pc, #208]	; (13b24 <pdn_interface_getopt+0x184>)
   13a52:	f44f 7180 	mov.w	r1, #256	; 0x100
   13a56:	4834      	ldr	r0, [pc, #208]	; (13b28 <pdn_interface_getopt+0x188>)
   13a58:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 13b34 <pdn_interface_getopt+0x194>
   13a5c:	f006 f976 	bl	19d4c <sniprintf>
   13a60:	4831      	ldr	r0, [pc, #196]	; (13b28 <pdn_interface_getopt+0x188>)
   13a62:	f8d8 9000 	ldr.w	r9, [r8]
   13a66:	2700      	movs	r7, #0
   13a68:	f7f9 fa06 	bl	ce78 <strlen>
   13a6c:	463b      	mov	r3, r7
   13a6e:	4602      	mov	r2, r0
   13a70:	492d      	ldr	r1, [pc, #180]	; (13b28 <pdn_interface_getopt+0x188>)
   13a72:	4648      	mov	r0, r9
   13a74:	9701      	str	r7, [sp, #4]
   13a76:	9700      	str	r7, [sp, #0]
   13a78:	f7fc fbcc 	bl	10214 <at_interface_write>
   13a7c:	4681      	mov	r9, r0
   13a7e:	482a      	ldr	r0, [pc, #168]	; (13b28 <pdn_interface_getopt+0x188>)
   13a80:	f7f9 f9fa 	bl	ce78 <strlen>
   13a84:	4548      	cmp	r0, r9
   13a86:	d143      	bne.n	13b10 <pdn_interface_getopt+0x170>
   13a88:	463b      	mov	r3, r7
   13a8a:	e9cd 7700 	strd	r7, r7, [sp]
   13a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
   13a92:	4925      	ldr	r1, [pc, #148]	; (13b28 <pdn_interface_getopt+0x188>)
   13a94:	f8d8 0000 	ldr.w	r0, [r8]
   13a98:	f7fc fcc0 	bl	1041c <at_interface_read>
   13a9c:	4607      	mov	r7, r0
   13a9e:	4823      	ldr	r0, [pc, #140]	; (13b2c <pdn_interface_getopt+0x18c>)
   13aa0:	f7f9 f9ea 	bl	ce78 <strlen>
   13aa4:	4287      	cmp	r7, r0
   13aa6:	db19      	blt.n	13adc <pdn_interface_getopt+0x13c>
   13aa8:	4602      	mov	r2, r0
   13aaa:	491f      	ldr	r1, [pc, #124]	; (13b28 <pdn_interface_getopt+0x188>)
   13aac:	481f      	ldr	r0, [pc, #124]	; (13b2c <pdn_interface_getopt+0x18c>)
   13aae:	f008 fe2d 	bl	1c70c <strncmp>
   13ab2:	4607      	mov	r7, r0
   13ab4:	b990      	cbnz	r0, 13adc <pdn_interface_getopt+0x13c>
   13ab6:	4620      	mov	r0, r4
   13ab8:	491b      	ldr	r1, [pc, #108]	; (13b28 <pdn_interface_getopt+0x188>)
   13aba:	f7ff fb41 	bl	13140 <pdn_state_get_parser>
   13abe:	2800      	cmp	r0, #0
   13ac0:	db99      	blt.n	139f6 <pdn_interface_getopt+0x56>
   13ac2:	2301      	movs	r3, #1
   13ac4:	7030      	strb	r0, [r6, #0]
   13ac6:	4638      	mov	r0, r7
   13ac8:	602b      	str	r3, [r5, #0]
   13aca:	e797      	b.n	139fc <pdn_interface_getopt+0x5c>
   13acc:	200e      	movs	r0, #14
   13ace:	e792      	b.n	139f6 <pdn_interface_getopt+0x56>
   13ad0:	2009      	movs	r0, #9
   13ad2:	f7fb fc2d 	bl	f330 <bsd_os_errno_set>
   13ad6:	f04f 30ff 	mov.w	r0, #4294967295
   13ada:	e78f      	b.n	139fc <pdn_interface_getopt+0x5c>
   13adc:	4814      	ldr	r0, [pc, #80]	; (13b30 <pdn_interface_getopt+0x190>)
   13ade:	f7f9 f9cb 	bl	ce78 <strlen>
   13ae2:	4911      	ldr	r1, [pc, #68]	; (13b28 <pdn_interface_getopt+0x188>)
   13ae4:	4602      	mov	r2, r0
   13ae6:	4812      	ldr	r0, [pc, #72]	; (13b30 <pdn_interface_getopt+0x190>)
   13ae8:	f008 fe10 	bl	1c70c <strncmp>
   13aec:	b980      	cbnz	r0, 13b10 <pdn_interface_getopt+0x170>
   13aee:	2008      	movs	r0, #8
   13af0:	f7fb fc1e 	bl	f330 <bsd_os_errno_set>
   13af4:	f04f 30ff 	mov.w	r0, #4294967295
   13af8:	e77d      	b.n	139f6 <pdn_interface_getopt+0x56>
   13afa:	220a      	movs	r2, #10
   13afc:	2108      	movs	r1, #8
   13afe:	6032      	str	r2, [r6, #0]
   13b00:	2204      	movs	r2, #4
   13b02:	e79d      	b.n	13a40 <pdn_interface_getopt+0xa0>
   13b04:	2016      	movs	r0, #22
   13b06:	f7fb fc13 	bl	f330 <bsd_os_errno_set>
   13b0a:	f04f 30ff 	mov.w	r0, #4294967295
   13b0e:	e775      	b.n	139fc <pdn_interface_getopt+0x5c>
   13b10:	2005      	movs	r0, #5
   13b12:	f7fb fc0d 	bl	f330 <bsd_os_errno_set>
   13b16:	f04f 30ff 	mov.w	r0, #4294967295
   13b1a:	e76c      	b.n	139f6 <pdn_interface_getopt+0x56>
   13b1c:	789a0000 	.word	0x789a0000
   13b20:	20020730 	.word	0x20020730
   13b24:	0001d7fc 	.word	0x0001d7fc
   13b28:	20020630 	.word	0x20020630
   13b2c:	0001d808 	.word	0x0001d808
   13b30:	0001d82c 	.word	0x0001d82c
   13b34:	2002062c 	.word	0x2002062c

00013b38 <pdn_interface_pdn_id_get>:
   13b38:	2900      	cmp	r1, #0
   13b3a:	f000 83b9 	beq.w	142b0 <pdn_interface_pdn_id_get+0x778>
   13b3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b42:	4ca3      	ldr	r4, [pc, #652]	; (13dd0 <pdn_interface_pdn_id_get+0x298>)
   13b44:	2802      	cmp	r0, #2
   13b46:	b083      	sub	sp, #12
   13b48:	460d      	mov	r5, r1
   13b4a:	6823      	ldr	r3, [r4, #0]
   13b4c:	f000 8094 	beq.w	13c78 <pdn_interface_pdn_id_get+0x140>
   13b50:	280a      	cmp	r0, #10
   13b52:	d03f      	beq.n	13bd4 <pdn_interface_pdn_id_get+0x9c>
   13b54:	b11b      	cbz	r3, 13b5e <pdn_interface_pdn_id_get+0x26>
   13b56:	689b      	ldr	r3, [r3, #8]
   13b58:	2b03      	cmp	r3, #3
   13b5a:	f000 8127 	beq.w	13dac <pdn_interface_pdn_id_get+0x274>
   13b5e:	6863      	ldr	r3, [r4, #4]
   13b60:	b11b      	cbz	r3, 13b6a <pdn_interface_pdn_id_get+0x32>
   13b62:	689b      	ldr	r3, [r3, #8]
   13b64:	2b03      	cmp	r3, #3
   13b66:	f000 8110 	beq.w	13d8a <pdn_interface_pdn_id_get+0x252>
   13b6a:	68a3      	ldr	r3, [r4, #8]
   13b6c:	b11b      	cbz	r3, 13b76 <pdn_interface_pdn_id_get+0x3e>
   13b6e:	689b      	ldr	r3, [r3, #8]
   13b70:	2b03      	cmp	r3, #3
   13b72:	f000 80f9 	beq.w	13d68 <pdn_interface_pdn_id_get+0x230>
   13b76:	68e3      	ldr	r3, [r4, #12]
   13b78:	b11b      	cbz	r3, 13b82 <pdn_interface_pdn_id_get+0x4a>
   13b7a:	689b      	ldr	r3, [r3, #8]
   13b7c:	2b03      	cmp	r3, #3
   13b7e:	f000 80e2 	beq.w	13d46 <pdn_interface_pdn_id_get+0x20e>
   13b82:	6923      	ldr	r3, [r4, #16]
   13b84:	b11b      	cbz	r3, 13b8e <pdn_interface_pdn_id_get+0x56>
   13b86:	689b      	ldr	r3, [r3, #8]
   13b88:	2b03      	cmp	r3, #3
   13b8a:	f000 8123 	beq.w	13dd4 <pdn_interface_pdn_id_get+0x29c>
   13b8e:	6963      	ldr	r3, [r4, #20]
   13b90:	b11b      	cbz	r3, 13b9a <pdn_interface_pdn_id_get+0x62>
   13b92:	689b      	ldr	r3, [r3, #8]
   13b94:	2b03      	cmp	r3, #3
   13b96:	f000 8161 	beq.w	13e5c <pdn_interface_pdn_id_get+0x324>
   13b9a:	69a3      	ldr	r3, [r4, #24]
   13b9c:	b11b      	cbz	r3, 13ba6 <pdn_interface_pdn_id_get+0x6e>
   13b9e:	689b      	ldr	r3, [r3, #8]
   13ba0:	2b03      	cmp	r3, #3
   13ba2:	f000 814a 	beq.w	13e3a <pdn_interface_pdn_id_get+0x302>
   13ba6:	69e3      	ldr	r3, [r4, #28]
   13ba8:	b11b      	cbz	r3, 13bb2 <pdn_interface_pdn_id_get+0x7a>
   13baa:	689b      	ldr	r3, [r3, #8]
   13bac:	2b03      	cmp	r3, #3
   13bae:	f000 8133 	beq.w	13e18 <pdn_interface_pdn_id_get+0x2e0>
   13bb2:	6a23      	ldr	r3, [r4, #32]
   13bb4:	b11b      	cbz	r3, 13bbe <pdn_interface_pdn_id_get+0x86>
   13bb6:	689b      	ldr	r3, [r3, #8]
   13bb8:	2b03      	cmp	r3, #3
   13bba:	f000 811c 	beq.w	13df6 <pdn_interface_pdn_id_get+0x2be>
   13bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13bc0:	b11b      	cbz	r3, 13bca <pdn_interface_pdn_id_get+0x92>
   13bc2:	689b      	ldr	r3, [r3, #8]
   13bc4:	2b03      	cmp	r3, #3
   13bc6:	f000 80ad 	beq.w	13d24 <pdn_interface_pdn_id_get+0x1ec>
   13bca:	f04f 30ff 	mov.w	r0, #4294967295
   13bce:	b003      	add	sp, #12
   13bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13bd4:	b11b      	cbz	r3, 13bde <pdn_interface_pdn_id_get+0xa6>
   13bd6:	689b      	ldr	r3, [r3, #8]
   13bd8:	2b03      	cmp	r3, #3
   13bda:	f000 8335 	beq.w	14248 <pdn_interface_pdn_id_get+0x710>
   13bde:	6863      	ldr	r3, [r4, #4]
   13be0:	b11b      	cbz	r3, 13bea <pdn_interface_pdn_id_get+0xb2>
   13be2:	689b      	ldr	r3, [r3, #8]
   13be4:	2b03      	cmp	r3, #3
   13be6:	f000 82fd 	beq.w	141e4 <pdn_interface_pdn_id_get+0x6ac>
   13bea:	68a3      	ldr	r3, [r4, #8]
   13bec:	b11b      	cbz	r3, 13bf6 <pdn_interface_pdn_id_get+0xbe>
   13bee:	689b      	ldr	r3, [r3, #8]
   13bf0:	2b03      	cmp	r3, #3
   13bf2:	f000 82d5 	beq.w	141a0 <pdn_interface_pdn_id_get+0x668>
   13bf6:	68e3      	ldr	r3, [r4, #12]
   13bf8:	b11b      	cbz	r3, 13c02 <pdn_interface_pdn_id_get+0xca>
   13bfa:	689e      	ldr	r6, [r3, #8]
   13bfc:	2e03      	cmp	r6, #3
   13bfe:	f000 81f0 	beq.w	13fe2 <pdn_interface_pdn_id_get+0x4aa>
   13c02:	6923      	ldr	r3, [r4, #16]
   13c04:	b11b      	cbz	r3, 13c0e <pdn_interface_pdn_id_get+0xd6>
   13c06:	689b      	ldr	r3, [r3, #8]
   13c08:	2b03      	cmp	r3, #3
   13c0a:	f000 8203 	beq.w	14014 <pdn_interface_pdn_id_get+0x4dc>
   13c0e:	6963      	ldr	r3, [r4, #20]
   13c10:	b11b      	cbz	r3, 13c1a <pdn_interface_pdn_id_get+0xe2>
   13c12:	689b      	ldr	r3, [r3, #8]
   13c14:	2b03      	cmp	r3, #3
   13c16:	f000 8215 	beq.w	14044 <pdn_interface_pdn_id_get+0x50c>
   13c1a:	69a3      	ldr	r3, [r4, #24]
   13c1c:	b11b      	cbz	r3, 13c26 <pdn_interface_pdn_id_get+0xee>
   13c1e:	689b      	ldr	r3, [r3, #8]
   13c20:	2b03      	cmp	r3, #3
   13c22:	f000 8227 	beq.w	14074 <pdn_interface_pdn_id_get+0x53c>
   13c26:	69e3      	ldr	r3, [r4, #28]
   13c28:	b11b      	cbz	r3, 13c32 <pdn_interface_pdn_id_get+0xfa>
   13c2a:	689b      	ldr	r3, [r3, #8]
   13c2c:	2b03      	cmp	r3, #3
   13c2e:	f000 8239 	beq.w	140a4 <pdn_interface_pdn_id_get+0x56c>
   13c32:	6a23      	ldr	r3, [r4, #32]
   13c34:	b11b      	cbz	r3, 13c3e <pdn_interface_pdn_id_get+0x106>
   13c36:	689b      	ldr	r3, [r3, #8]
   13c38:	2b03      	cmp	r3, #3
   13c3a:	f000 824d 	beq.w	140d8 <pdn_interface_pdn_id_get+0x5a0>
   13c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13c40:	2b00      	cmp	r3, #0
   13c42:	d0c2      	beq.n	13bca <pdn_interface_pdn_id_get+0x92>
   13c44:	689b      	ldr	r3, [r3, #8]
   13c46:	2b03      	cmp	r3, #3
   13c48:	d1bf      	bne.n	13bca <pdn_interface_pdn_id_get+0x92>
   13c4a:	4628      	mov	r0, r5
   13c4c:	f7f9 f914 	bl	ce78 <strlen>
   13c50:	4606      	mov	r6, r0
   13c52:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13c54:	300c      	adds	r0, #12
   13c56:	f7f9 f90f 	bl	ce78 <strlen>
   13c5a:	42b0      	cmp	r0, r6
   13c5c:	d1b5      	bne.n	13bca <pdn_interface_pdn_id_get+0x92>
   13c5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13c60:	4628      	mov	r0, r5
   13c62:	310c      	adds	r1, #12
   13c64:	f7f9 f8fe 	bl	ce64 <strcmp>
   13c68:	2800      	cmp	r0, #0
   13c6a:	d1ae      	bne.n	13bca <pdn_interface_pdn_id_get+0x92>
   13c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13c6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13c70:	0792      	lsls	r2, r2, #30
   13c72:	d5aa      	bpl.n	13bca <pdn_interface_pdn_id_get+0x92>
   13c74:	2609      	movs	r6, #9
   13c76:	e11a      	b.n	13eae <pdn_interface_pdn_id_get+0x376>
   13c78:	b11b      	cbz	r3, 13c82 <pdn_interface_pdn_id_get+0x14a>
   13c7a:	689b      	ldr	r3, [r3, #8]
   13c7c:	2b03      	cmp	r3, #3
   13c7e:	f000 82fd 	beq.w	1427c <pdn_interface_pdn_id_get+0x744>
   13c82:	6863      	ldr	r3, [r4, #4]
   13c84:	b11b      	cbz	r3, 13c8e <pdn_interface_pdn_id_get+0x156>
   13c86:	689b      	ldr	r3, [r3, #8]
   13c88:	2b03      	cmp	r3, #3
   13c8a:	f000 82c5 	beq.w	14218 <pdn_interface_pdn_id_get+0x6e0>
   13c8e:	68a3      	ldr	r3, [r4, #8]
   13c90:	b11b      	cbz	r3, 13c9a <pdn_interface_pdn_id_get+0x162>
   13c92:	689b      	ldr	r3, [r3, #8]
   13c94:	2b03      	cmp	r3, #3
   13c96:	f000 8269 	beq.w	1416c <pdn_interface_pdn_id_get+0x634>
   13c9a:	68e3      	ldr	r3, [r4, #12]
   13c9c:	b11b      	cbz	r3, 13ca6 <pdn_interface_pdn_id_get+0x16e>
   13c9e:	689e      	ldr	r6, [r3, #8]
   13ca0:	2e03      	cmp	r6, #3
   13ca2:	f000 80ec 	beq.w	13e7e <pdn_interface_pdn_id_get+0x346>
   13ca6:	6923      	ldr	r3, [r4, #16]
   13ca8:	b11b      	cbz	r3, 13cb2 <pdn_interface_pdn_id_get+0x17a>
   13caa:	689b      	ldr	r3, [r3, #8]
   13cac:	2b03      	cmp	r3, #3
   13cae:	f000 814a 	beq.w	13f46 <pdn_interface_pdn_id_get+0x40e>
   13cb2:	6963      	ldr	r3, [r4, #20]
   13cb4:	b11b      	cbz	r3, 13cbe <pdn_interface_pdn_id_get+0x186>
   13cb6:	689b      	ldr	r3, [r3, #8]
   13cb8:	2b03      	cmp	r3, #3
   13cba:	f000 815e 	beq.w	13f7a <pdn_interface_pdn_id_get+0x442>
   13cbe:	69a3      	ldr	r3, [r4, #24]
   13cc0:	b11b      	cbz	r3, 13cca <pdn_interface_pdn_id_get+0x192>
   13cc2:	689b      	ldr	r3, [r3, #8]
   13cc4:	2b03      	cmp	r3, #3
   13cc6:	f000 8172 	beq.w	13fae <pdn_interface_pdn_id_get+0x476>
   13cca:	69e3      	ldr	r3, [r4, #28]
   13ccc:	b11b      	cbz	r3, 13cd6 <pdn_interface_pdn_id_get+0x19e>
   13cce:	689b      	ldr	r3, [r3, #8]
   13cd0:	2b03      	cmp	r3, #3
   13cd2:	f000 821b 	beq.w	1410c <pdn_interface_pdn_id_get+0x5d4>
   13cd6:	6a23      	ldr	r3, [r4, #32]
   13cd8:	b11b      	cbz	r3, 13ce2 <pdn_interface_pdn_id_get+0x1aa>
   13cda:	689b      	ldr	r3, [r3, #8]
   13cdc:	2b03      	cmp	r3, #3
   13cde:	f000 822d 	beq.w	1413c <pdn_interface_pdn_id_get+0x604>
   13ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13ce4:	2b00      	cmp	r3, #0
   13ce6:	f43f af70 	beq.w	13bca <pdn_interface_pdn_id_get+0x92>
   13cea:	689b      	ldr	r3, [r3, #8]
   13cec:	2b03      	cmp	r3, #3
   13cee:	f47f af6c 	bne.w	13bca <pdn_interface_pdn_id_get+0x92>
   13cf2:	4628      	mov	r0, r5
   13cf4:	f7f9 f8c0 	bl	ce78 <strlen>
   13cf8:	4606      	mov	r6, r0
   13cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13cfc:	300c      	adds	r0, #12
   13cfe:	f7f9 f8bb 	bl	ce78 <strlen>
   13d02:	4286      	cmp	r6, r0
   13d04:	f47f af61 	bne.w	13bca <pdn_interface_pdn_id_get+0x92>
   13d08:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13d0a:	4628      	mov	r0, r5
   13d0c:	310c      	adds	r1, #12
   13d0e:	f7f9 f8a9 	bl	ce64 <strcmp>
   13d12:	2800      	cmp	r0, #0
   13d14:	f47f af59 	bne.w	13bca <pdn_interface_pdn_id_get+0x92>
   13d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13d1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13d1c:	07d2      	lsls	r2, r2, #31
   13d1e:	f57f af54 	bpl.w	13bca <pdn_interface_pdn_id_get+0x92>
   13d22:	e7a7      	b.n	13c74 <pdn_interface_pdn_id_get+0x13c>
   13d24:	4628      	mov	r0, r5
   13d26:	f7f9 f8a7 	bl	ce78 <strlen>
   13d2a:	4606      	mov	r6, r0
   13d2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13d2e:	300c      	adds	r0, #12
   13d30:	f7f9 f8a2 	bl	ce78 <strlen>
   13d34:	42b0      	cmp	r0, r6
   13d36:	f47f af48 	bne.w	13bca <pdn_interface_pdn_id_get+0x92>
   13d3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13d3c:	4628      	mov	r0, r5
   13d3e:	310c      	adds	r1, #12
   13d40:	f7f9 f890 	bl	ce64 <strcmp>
   13d44:	e741      	b.n	13bca <pdn_interface_pdn_id_get+0x92>
   13d46:	4628      	mov	r0, r5
   13d48:	f7f9 f896 	bl	ce78 <strlen>
   13d4c:	4606      	mov	r6, r0
   13d4e:	68e0      	ldr	r0, [r4, #12]
   13d50:	300c      	adds	r0, #12
   13d52:	f7f9 f891 	bl	ce78 <strlen>
   13d56:	4286      	cmp	r6, r0
   13d58:	f47f af13 	bne.w	13b82 <pdn_interface_pdn_id_get+0x4a>
   13d5c:	68e1      	ldr	r1, [r4, #12]
   13d5e:	4628      	mov	r0, r5
   13d60:	310c      	adds	r1, #12
   13d62:	f7f9 f87f 	bl	ce64 <strcmp>
   13d66:	e70c      	b.n	13b82 <pdn_interface_pdn_id_get+0x4a>
   13d68:	4628      	mov	r0, r5
   13d6a:	f7f9 f885 	bl	ce78 <strlen>
   13d6e:	4606      	mov	r6, r0
   13d70:	68a0      	ldr	r0, [r4, #8]
   13d72:	300c      	adds	r0, #12
   13d74:	f7f9 f880 	bl	ce78 <strlen>
   13d78:	4286      	cmp	r6, r0
   13d7a:	f47f aefc 	bne.w	13b76 <pdn_interface_pdn_id_get+0x3e>
   13d7e:	68a1      	ldr	r1, [r4, #8]
   13d80:	4628      	mov	r0, r5
   13d82:	310c      	adds	r1, #12
   13d84:	f7f9 f86e 	bl	ce64 <strcmp>
   13d88:	e6f5      	b.n	13b76 <pdn_interface_pdn_id_get+0x3e>
   13d8a:	4628      	mov	r0, r5
   13d8c:	f7f9 f874 	bl	ce78 <strlen>
   13d90:	4606      	mov	r6, r0
   13d92:	6860      	ldr	r0, [r4, #4]
   13d94:	300c      	adds	r0, #12
   13d96:	f7f9 f86f 	bl	ce78 <strlen>
   13d9a:	4286      	cmp	r6, r0
   13d9c:	f47f aee5 	bne.w	13b6a <pdn_interface_pdn_id_get+0x32>
   13da0:	6861      	ldr	r1, [r4, #4]
   13da2:	4628      	mov	r0, r5
   13da4:	310c      	adds	r1, #12
   13da6:	f7f9 f85d 	bl	ce64 <strcmp>
   13daa:	e6de      	b.n	13b6a <pdn_interface_pdn_id_get+0x32>
   13dac:	4608      	mov	r0, r1
   13dae:	f7f9 f863 	bl	ce78 <strlen>
   13db2:	4606      	mov	r6, r0
   13db4:	6820      	ldr	r0, [r4, #0]
   13db6:	300c      	adds	r0, #12
   13db8:	f7f9 f85e 	bl	ce78 <strlen>
   13dbc:	4286      	cmp	r6, r0
   13dbe:	f47f aece 	bne.w	13b5e <pdn_interface_pdn_id_get+0x26>
   13dc2:	6821      	ldr	r1, [r4, #0]
   13dc4:	4628      	mov	r0, r5
   13dc6:	310c      	adds	r1, #12
   13dc8:	f7f9 f84c 	bl	ce64 <strcmp>
   13dcc:	e6c7      	b.n	13b5e <pdn_interface_pdn_id_get+0x26>
   13dce:	bf00      	nop
   13dd0:	20020730 	.word	0x20020730
   13dd4:	4628      	mov	r0, r5
   13dd6:	f7f9 f84f 	bl	ce78 <strlen>
   13dda:	4606      	mov	r6, r0
   13ddc:	6920      	ldr	r0, [r4, #16]
   13dde:	300c      	adds	r0, #12
   13de0:	f7f9 f84a 	bl	ce78 <strlen>
   13de4:	4286      	cmp	r6, r0
   13de6:	f47f aed2 	bne.w	13b8e <pdn_interface_pdn_id_get+0x56>
   13dea:	6921      	ldr	r1, [r4, #16]
   13dec:	4628      	mov	r0, r5
   13dee:	310c      	adds	r1, #12
   13df0:	f7f9 f838 	bl	ce64 <strcmp>
   13df4:	e6cb      	b.n	13b8e <pdn_interface_pdn_id_get+0x56>
   13df6:	4628      	mov	r0, r5
   13df8:	f7f9 f83e 	bl	ce78 <strlen>
   13dfc:	4606      	mov	r6, r0
   13dfe:	6a20      	ldr	r0, [r4, #32]
   13e00:	300c      	adds	r0, #12
   13e02:	f7f9 f839 	bl	ce78 <strlen>
   13e06:	4286      	cmp	r6, r0
   13e08:	f47f aed9 	bne.w	13bbe <pdn_interface_pdn_id_get+0x86>
   13e0c:	6a21      	ldr	r1, [r4, #32]
   13e0e:	4628      	mov	r0, r5
   13e10:	310c      	adds	r1, #12
   13e12:	f7f9 f827 	bl	ce64 <strcmp>
   13e16:	e6d2      	b.n	13bbe <pdn_interface_pdn_id_get+0x86>
   13e18:	4628      	mov	r0, r5
   13e1a:	f7f9 f82d 	bl	ce78 <strlen>
   13e1e:	4606      	mov	r6, r0
   13e20:	69e0      	ldr	r0, [r4, #28]
   13e22:	300c      	adds	r0, #12
   13e24:	f7f9 f828 	bl	ce78 <strlen>
   13e28:	4286      	cmp	r6, r0
   13e2a:	f47f aec2 	bne.w	13bb2 <pdn_interface_pdn_id_get+0x7a>
   13e2e:	69e1      	ldr	r1, [r4, #28]
   13e30:	4628      	mov	r0, r5
   13e32:	310c      	adds	r1, #12
   13e34:	f7f9 f816 	bl	ce64 <strcmp>
   13e38:	e6bb      	b.n	13bb2 <pdn_interface_pdn_id_get+0x7a>
   13e3a:	4628      	mov	r0, r5
   13e3c:	f7f9 f81c 	bl	ce78 <strlen>
   13e40:	4606      	mov	r6, r0
   13e42:	69a0      	ldr	r0, [r4, #24]
   13e44:	300c      	adds	r0, #12
   13e46:	f7f9 f817 	bl	ce78 <strlen>
   13e4a:	4286      	cmp	r6, r0
   13e4c:	f47f aeab 	bne.w	13ba6 <pdn_interface_pdn_id_get+0x6e>
   13e50:	69a1      	ldr	r1, [r4, #24]
   13e52:	4628      	mov	r0, r5
   13e54:	310c      	adds	r1, #12
   13e56:	f7f9 f805 	bl	ce64 <strcmp>
   13e5a:	e6a4      	b.n	13ba6 <pdn_interface_pdn_id_get+0x6e>
   13e5c:	4628      	mov	r0, r5
   13e5e:	f7f9 f80b 	bl	ce78 <strlen>
   13e62:	4606      	mov	r6, r0
   13e64:	6960      	ldr	r0, [r4, #20]
   13e66:	300c      	adds	r0, #12
   13e68:	f7f9 f806 	bl	ce78 <strlen>
   13e6c:	4286      	cmp	r6, r0
   13e6e:	f47f ae94 	bne.w	13b9a <pdn_interface_pdn_id_get+0x62>
   13e72:	6961      	ldr	r1, [r4, #20]
   13e74:	4628      	mov	r0, r5
   13e76:	310c      	adds	r1, #12
   13e78:	f7f8 fff4 	bl	ce64 <strcmp>
   13e7c:	e68d      	b.n	13b9a <pdn_interface_pdn_id_get+0x62>
   13e7e:	4628      	mov	r0, r5
   13e80:	f7f8 fffa 	bl	ce78 <strlen>
   13e84:	4607      	mov	r7, r0
   13e86:	68e0      	ldr	r0, [r4, #12]
   13e88:	300c      	adds	r0, #12
   13e8a:	f7f8 fff5 	bl	ce78 <strlen>
   13e8e:	4287      	cmp	r7, r0
   13e90:	f47f af09 	bne.w	13ca6 <pdn_interface_pdn_id_get+0x16e>
   13e94:	68e1      	ldr	r1, [r4, #12]
   13e96:	4628      	mov	r0, r5
   13e98:	310c      	adds	r1, #12
   13e9a:	f7f8 ffe3 	bl	ce64 <strcmp>
   13e9e:	2800      	cmp	r0, #0
   13ea0:	f47f af01 	bne.w	13ca6 <pdn_interface_pdn_id_get+0x16e>
   13ea4:	68e3      	ldr	r3, [r4, #12]
   13ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13ea8:	07d1      	lsls	r1, r2, #31
   13eaa:	f57f aefc 	bpl.w	13ca6 <pdn_interface_pdn_id_get+0x16e>
   13eae:	6858      	ldr	r0, [r3, #4]
   13eb0:	1c43      	adds	r3, r0, #1
   13eb2:	f47f ae8c 	bne.w	13bce <pdn_interface_pdn_id_get+0x96>
   13eb6:	4dc6      	ldr	r5, [pc, #792]	; (141d0 <pdn_interface_pdn_id_get+0x698>)
   13eb8:	4ac6      	ldr	r2, [pc, #792]	; (141d4 <pdn_interface_pdn_id_get+0x69c>)
   13eba:	f44f 7180 	mov.w	r1, #256	; 0x100
   13ebe:	4628      	mov	r0, r5
   13ec0:	f005 ff44 	bl	19d4c <sniprintf>
   13ec4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   13ec8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   13ecc:	681b      	ldr	r3, [r3, #0]
   13ece:	4ac2      	ldr	r2, [pc, #776]	; (141d8 <pdn_interface_pdn_id_get+0x6a0>)
   13ed0:	4428      	add	r0, r5
   13ed2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 141e0 <pdn_interface_pdn_id_get+0x6a8>
   13ed6:	f005 ff39 	bl	19d4c <sniprintf>
   13eda:	4628      	mov	r0, r5
   13edc:	f8d8 9000 	ldr.w	r9, [r8]
   13ee0:	2700      	movs	r7, #0
   13ee2:	f7f8 ffc9 	bl	ce78 <strlen>
   13ee6:	4629      	mov	r1, r5
   13ee8:	4602      	mov	r2, r0
   13eea:	463b      	mov	r3, r7
   13eec:	4648      	mov	r0, r9
   13eee:	9701      	str	r7, [sp, #4]
   13ef0:	9700      	str	r7, [sp, #0]
   13ef2:	f7fc f98f 	bl	10214 <at_interface_write>
   13ef6:	4681      	mov	r9, r0
   13ef8:	4628      	mov	r0, r5
   13efa:	f7f8 ffbd 	bl	ce78 <strlen>
   13efe:	4548      	cmp	r0, r9
   13f00:	f040 81e9 	bne.w	142d6 <pdn_interface_pdn_id_get+0x79e>
   13f04:	463b      	mov	r3, r7
   13f06:	f44f 7280 	mov.w	r2, #256	; 0x100
   13f0a:	e9cd 7700 	strd	r7, r7, [sp]
   13f0e:	4629      	mov	r1, r5
   13f10:	f8d8 0000 	ldr.w	r0, [r8]
   13f14:	f7fc fa82 	bl	1041c <at_interface_read>
   13f18:	4607      	mov	r7, r0
   13f1a:	48b0      	ldr	r0, [pc, #704]	; (141dc <pdn_interface_pdn_id_get+0x6a4>)
   13f1c:	f7f8 ffac 	bl	ce78 <strlen>
   13f20:	4287      	cmp	r7, r0
   13f22:	4602      	mov	r2, r0
   13f24:	f2c0 81c7 	blt.w	142b6 <pdn_interface_pdn_id_get+0x77e>
   13f28:	4629      	mov	r1, r5
   13f2a:	48ac      	ldr	r0, [pc, #688]	; (141dc <pdn_interface_pdn_id_get+0x6a4>)
   13f2c:	f008 fbee 	bl	1c70c <strncmp>
   13f30:	2800      	cmp	r0, #0
   13f32:	f040 81c0 	bne.w	142b6 <pdn_interface_pdn_id_get+0x77e>
   13f36:	4629      	mov	r1, r5
   13f38:	4630      	mov	r0, r6
   13f3a:	f7ff f937 	bl	131ac <pdn_id_get_parser>
   13f3e:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   13f42:	6858      	ldr	r0, [r3, #4]
   13f44:	e643      	b.n	13bce <pdn_interface_pdn_id_get+0x96>
   13f46:	4628      	mov	r0, r5
   13f48:	f7f8 ff96 	bl	ce78 <strlen>
   13f4c:	4606      	mov	r6, r0
   13f4e:	6920      	ldr	r0, [r4, #16]
   13f50:	300c      	adds	r0, #12
   13f52:	f7f8 ff91 	bl	ce78 <strlen>
   13f56:	4286      	cmp	r6, r0
   13f58:	f47f aeab 	bne.w	13cb2 <pdn_interface_pdn_id_get+0x17a>
   13f5c:	6921      	ldr	r1, [r4, #16]
   13f5e:	4628      	mov	r0, r5
   13f60:	310c      	adds	r1, #12
   13f62:	f7f8 ff7f 	bl	ce64 <strcmp>
   13f66:	2800      	cmp	r0, #0
   13f68:	f47f aea3 	bne.w	13cb2 <pdn_interface_pdn_id_get+0x17a>
   13f6c:	6923      	ldr	r3, [r4, #16]
   13f6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13f70:	07d2      	lsls	r2, r2, #31
   13f72:	f57f ae9e 	bpl.w	13cb2 <pdn_interface_pdn_id_get+0x17a>
   13f76:	2604      	movs	r6, #4
   13f78:	e799      	b.n	13eae <pdn_interface_pdn_id_get+0x376>
   13f7a:	4628      	mov	r0, r5
   13f7c:	f7f8 ff7c 	bl	ce78 <strlen>
   13f80:	4606      	mov	r6, r0
   13f82:	6960      	ldr	r0, [r4, #20]
   13f84:	300c      	adds	r0, #12
   13f86:	f7f8 ff77 	bl	ce78 <strlen>
   13f8a:	4286      	cmp	r6, r0
   13f8c:	f47f ae97 	bne.w	13cbe <pdn_interface_pdn_id_get+0x186>
   13f90:	6961      	ldr	r1, [r4, #20]
   13f92:	4628      	mov	r0, r5
   13f94:	310c      	adds	r1, #12
   13f96:	f7f8 ff65 	bl	ce64 <strcmp>
   13f9a:	2800      	cmp	r0, #0
   13f9c:	f47f ae8f 	bne.w	13cbe <pdn_interface_pdn_id_get+0x186>
   13fa0:	6963      	ldr	r3, [r4, #20]
   13fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13fa4:	07d7      	lsls	r7, r2, #31
   13fa6:	f57f ae8a 	bpl.w	13cbe <pdn_interface_pdn_id_get+0x186>
   13faa:	2605      	movs	r6, #5
   13fac:	e77f      	b.n	13eae <pdn_interface_pdn_id_get+0x376>
   13fae:	4628      	mov	r0, r5
   13fb0:	f7f8 ff62 	bl	ce78 <strlen>
   13fb4:	4606      	mov	r6, r0
   13fb6:	69a0      	ldr	r0, [r4, #24]
   13fb8:	300c      	adds	r0, #12
   13fba:	f7f8 ff5d 	bl	ce78 <strlen>
   13fbe:	4286      	cmp	r6, r0
   13fc0:	f47f ae83 	bne.w	13cca <pdn_interface_pdn_id_get+0x192>
   13fc4:	69a1      	ldr	r1, [r4, #24]
   13fc6:	4628      	mov	r0, r5
   13fc8:	310c      	adds	r1, #12
   13fca:	f7f8 ff4b 	bl	ce64 <strcmp>
   13fce:	2800      	cmp	r0, #0
   13fd0:	f47f ae7b 	bne.w	13cca <pdn_interface_pdn_id_get+0x192>
   13fd4:	69a3      	ldr	r3, [r4, #24]
   13fd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13fd8:	07d6      	lsls	r6, r2, #31
   13fda:	f57f ae76 	bpl.w	13cca <pdn_interface_pdn_id_get+0x192>
   13fde:	2606      	movs	r6, #6
   13fe0:	e765      	b.n	13eae <pdn_interface_pdn_id_get+0x376>
   13fe2:	4628      	mov	r0, r5
   13fe4:	f7f8 ff48 	bl	ce78 <strlen>
   13fe8:	4607      	mov	r7, r0
   13fea:	68e0      	ldr	r0, [r4, #12]
   13fec:	300c      	adds	r0, #12
   13fee:	f7f8 ff43 	bl	ce78 <strlen>
   13ff2:	4287      	cmp	r7, r0
   13ff4:	f47f ae05 	bne.w	13c02 <pdn_interface_pdn_id_get+0xca>
   13ff8:	68e1      	ldr	r1, [r4, #12]
   13ffa:	4628      	mov	r0, r5
   13ffc:	310c      	adds	r1, #12
   13ffe:	f7f8 ff31 	bl	ce64 <strcmp>
   14002:	2800      	cmp	r0, #0
   14004:	f47f adfd 	bne.w	13c02 <pdn_interface_pdn_id_get+0xca>
   14008:	68e3      	ldr	r3, [r4, #12]
   1400a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1400c:	0791      	lsls	r1, r2, #30
   1400e:	f53f af4e 	bmi.w	13eae <pdn_interface_pdn_id_get+0x376>
   14012:	e5f6      	b.n	13c02 <pdn_interface_pdn_id_get+0xca>
   14014:	4628      	mov	r0, r5
   14016:	f7f8 ff2f 	bl	ce78 <strlen>
   1401a:	4606      	mov	r6, r0
   1401c:	6920      	ldr	r0, [r4, #16]
   1401e:	300c      	adds	r0, #12
   14020:	f7f8 ff2a 	bl	ce78 <strlen>
   14024:	4286      	cmp	r6, r0
   14026:	f47f adf2 	bne.w	13c0e <pdn_interface_pdn_id_get+0xd6>
   1402a:	6921      	ldr	r1, [r4, #16]
   1402c:	4628      	mov	r0, r5
   1402e:	310c      	adds	r1, #12
   14030:	f7f8 ff18 	bl	ce64 <strcmp>
   14034:	2800      	cmp	r0, #0
   14036:	f47f adea 	bne.w	13c0e <pdn_interface_pdn_id_get+0xd6>
   1403a:	6923      	ldr	r3, [r4, #16]
   1403c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1403e:	0792      	lsls	r2, r2, #30
   14040:	d499      	bmi.n	13f76 <pdn_interface_pdn_id_get+0x43e>
   14042:	e5e4      	b.n	13c0e <pdn_interface_pdn_id_get+0xd6>
   14044:	4628      	mov	r0, r5
   14046:	f7f8 ff17 	bl	ce78 <strlen>
   1404a:	4606      	mov	r6, r0
   1404c:	6960      	ldr	r0, [r4, #20]
   1404e:	300c      	adds	r0, #12
   14050:	f7f8 ff12 	bl	ce78 <strlen>
   14054:	4286      	cmp	r6, r0
   14056:	f47f ade0 	bne.w	13c1a <pdn_interface_pdn_id_get+0xe2>
   1405a:	6961      	ldr	r1, [r4, #20]
   1405c:	4628      	mov	r0, r5
   1405e:	310c      	adds	r1, #12
   14060:	f7f8 ff00 	bl	ce64 <strcmp>
   14064:	2800      	cmp	r0, #0
   14066:	f47f add8 	bne.w	13c1a <pdn_interface_pdn_id_get+0xe2>
   1406a:	6963      	ldr	r3, [r4, #20]
   1406c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1406e:	0797      	lsls	r7, r2, #30
   14070:	d49b      	bmi.n	13faa <pdn_interface_pdn_id_get+0x472>
   14072:	e5d2      	b.n	13c1a <pdn_interface_pdn_id_get+0xe2>
   14074:	4628      	mov	r0, r5
   14076:	f7f8 feff 	bl	ce78 <strlen>
   1407a:	4606      	mov	r6, r0
   1407c:	69a0      	ldr	r0, [r4, #24]
   1407e:	300c      	adds	r0, #12
   14080:	f7f8 fefa 	bl	ce78 <strlen>
   14084:	4286      	cmp	r6, r0
   14086:	f47f adce 	bne.w	13c26 <pdn_interface_pdn_id_get+0xee>
   1408a:	69a1      	ldr	r1, [r4, #24]
   1408c:	4628      	mov	r0, r5
   1408e:	310c      	adds	r1, #12
   14090:	f7f8 fee8 	bl	ce64 <strcmp>
   14094:	2800      	cmp	r0, #0
   14096:	f47f adc6 	bne.w	13c26 <pdn_interface_pdn_id_get+0xee>
   1409a:	69a3      	ldr	r3, [r4, #24]
   1409c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1409e:	0796      	lsls	r6, r2, #30
   140a0:	d49d      	bmi.n	13fde <pdn_interface_pdn_id_get+0x4a6>
   140a2:	e5c0      	b.n	13c26 <pdn_interface_pdn_id_get+0xee>
   140a4:	4628      	mov	r0, r5
   140a6:	f7f8 fee7 	bl	ce78 <strlen>
   140aa:	4606      	mov	r6, r0
   140ac:	69e0      	ldr	r0, [r4, #28]
   140ae:	300c      	adds	r0, #12
   140b0:	f7f8 fee2 	bl	ce78 <strlen>
   140b4:	4286      	cmp	r6, r0
   140b6:	f47f adbc 	bne.w	13c32 <pdn_interface_pdn_id_get+0xfa>
   140ba:	69e1      	ldr	r1, [r4, #28]
   140bc:	4628      	mov	r0, r5
   140be:	310c      	adds	r1, #12
   140c0:	f7f8 fed0 	bl	ce64 <strcmp>
   140c4:	2800      	cmp	r0, #0
   140c6:	f47f adb4 	bne.w	13c32 <pdn_interface_pdn_id_get+0xfa>
   140ca:	69e3      	ldr	r3, [r4, #28]
   140cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   140ce:	0790      	lsls	r0, r2, #30
   140d0:	f57f adaf 	bpl.w	13c32 <pdn_interface_pdn_id_get+0xfa>
   140d4:	2607      	movs	r6, #7
   140d6:	e6ea      	b.n	13eae <pdn_interface_pdn_id_get+0x376>
   140d8:	4628      	mov	r0, r5
   140da:	f7f8 fecd 	bl	ce78 <strlen>
   140de:	4606      	mov	r6, r0
   140e0:	6a20      	ldr	r0, [r4, #32]
   140e2:	300c      	adds	r0, #12
   140e4:	f7f8 fec8 	bl	ce78 <strlen>
   140e8:	4286      	cmp	r6, r0
   140ea:	f47f ada8 	bne.w	13c3e <pdn_interface_pdn_id_get+0x106>
   140ee:	6a21      	ldr	r1, [r4, #32]
   140f0:	4628      	mov	r0, r5
   140f2:	310c      	adds	r1, #12
   140f4:	f7f8 feb6 	bl	ce64 <strcmp>
   140f8:	2800      	cmp	r0, #0
   140fa:	f47f ada0 	bne.w	13c3e <pdn_interface_pdn_id_get+0x106>
   140fe:	6a23      	ldr	r3, [r4, #32]
   14100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14102:	0791      	lsls	r1, r2, #30
   14104:	f57f ad9b 	bpl.w	13c3e <pdn_interface_pdn_id_get+0x106>
   14108:	2608      	movs	r6, #8
   1410a:	e6d0      	b.n	13eae <pdn_interface_pdn_id_get+0x376>
   1410c:	4628      	mov	r0, r5
   1410e:	f7f8 feb3 	bl	ce78 <strlen>
   14112:	4606      	mov	r6, r0
   14114:	69e0      	ldr	r0, [r4, #28]
   14116:	300c      	adds	r0, #12
   14118:	f7f8 feae 	bl	ce78 <strlen>
   1411c:	4286      	cmp	r6, r0
   1411e:	f47f adda 	bne.w	13cd6 <pdn_interface_pdn_id_get+0x19e>
   14122:	69e1      	ldr	r1, [r4, #28]
   14124:	4628      	mov	r0, r5
   14126:	310c      	adds	r1, #12
   14128:	f7f8 fe9c 	bl	ce64 <strcmp>
   1412c:	2800      	cmp	r0, #0
   1412e:	f47f add2 	bne.w	13cd6 <pdn_interface_pdn_id_get+0x19e>
   14132:	69e3      	ldr	r3, [r4, #28]
   14134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14136:	07d0      	lsls	r0, r2, #31
   14138:	d4cc      	bmi.n	140d4 <pdn_interface_pdn_id_get+0x59c>
   1413a:	e5cc      	b.n	13cd6 <pdn_interface_pdn_id_get+0x19e>
   1413c:	4628      	mov	r0, r5
   1413e:	f7f8 fe9b 	bl	ce78 <strlen>
   14142:	4606      	mov	r6, r0
   14144:	6a20      	ldr	r0, [r4, #32]
   14146:	300c      	adds	r0, #12
   14148:	f7f8 fe96 	bl	ce78 <strlen>
   1414c:	4286      	cmp	r6, r0
   1414e:	f47f adc8 	bne.w	13ce2 <pdn_interface_pdn_id_get+0x1aa>
   14152:	6a21      	ldr	r1, [r4, #32]
   14154:	4628      	mov	r0, r5
   14156:	310c      	adds	r1, #12
   14158:	f7f8 fe84 	bl	ce64 <strcmp>
   1415c:	2800      	cmp	r0, #0
   1415e:	f47f adc0 	bne.w	13ce2 <pdn_interface_pdn_id_get+0x1aa>
   14162:	6a23      	ldr	r3, [r4, #32]
   14164:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14166:	07d1      	lsls	r1, r2, #31
   14168:	d4ce      	bmi.n	14108 <pdn_interface_pdn_id_get+0x5d0>
   1416a:	e5ba      	b.n	13ce2 <pdn_interface_pdn_id_get+0x1aa>
   1416c:	4628      	mov	r0, r5
   1416e:	f7f8 fe83 	bl	ce78 <strlen>
   14172:	4606      	mov	r6, r0
   14174:	68a0      	ldr	r0, [r4, #8]
   14176:	300c      	adds	r0, #12
   14178:	f7f8 fe7e 	bl	ce78 <strlen>
   1417c:	4286      	cmp	r6, r0
   1417e:	f47f ad8c 	bne.w	13c9a <pdn_interface_pdn_id_get+0x162>
   14182:	68a1      	ldr	r1, [r4, #8]
   14184:	4628      	mov	r0, r5
   14186:	310c      	adds	r1, #12
   14188:	f7f8 fe6c 	bl	ce64 <strcmp>
   1418c:	2800      	cmp	r0, #0
   1418e:	f47f ad84 	bne.w	13c9a <pdn_interface_pdn_id_get+0x162>
   14192:	68a3      	ldr	r3, [r4, #8]
   14194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14196:	07d0      	lsls	r0, r2, #31
   14198:	f57f ad7f 	bpl.w	13c9a <pdn_interface_pdn_id_get+0x162>
   1419c:	2602      	movs	r6, #2
   1419e:	e686      	b.n	13eae <pdn_interface_pdn_id_get+0x376>
   141a0:	4628      	mov	r0, r5
   141a2:	f7f8 fe69 	bl	ce78 <strlen>
   141a6:	4606      	mov	r6, r0
   141a8:	68a0      	ldr	r0, [r4, #8]
   141aa:	300c      	adds	r0, #12
   141ac:	f7f8 fe64 	bl	ce78 <strlen>
   141b0:	4286      	cmp	r6, r0
   141b2:	f47f ad20 	bne.w	13bf6 <pdn_interface_pdn_id_get+0xbe>
   141b6:	68a1      	ldr	r1, [r4, #8]
   141b8:	4628      	mov	r0, r5
   141ba:	310c      	adds	r1, #12
   141bc:	f7f8 fe52 	bl	ce64 <strcmp>
   141c0:	2800      	cmp	r0, #0
   141c2:	f47f ad18 	bne.w	13bf6 <pdn_interface_pdn_id_get+0xbe>
   141c6:	68a3      	ldr	r3, [r4, #8]
   141c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   141ca:	0790      	lsls	r0, r2, #30
   141cc:	d4e6      	bmi.n	1419c <pdn_interface_pdn_id_get+0x664>
   141ce:	e512      	b.n	13bf6 <pdn_interface_pdn_id_get+0xbe>
   141d0:	20020630 	.word	0x20020630
   141d4:	0001d7d8 	.word	0x0001d7d8
   141d8:	0001d7d4 	.word	0x0001d7d4
   141dc:	0001d7e8 	.word	0x0001d7e8
   141e0:	2002062c 	.word	0x2002062c
   141e4:	4628      	mov	r0, r5
   141e6:	f7f8 fe47 	bl	ce78 <strlen>
   141ea:	4606      	mov	r6, r0
   141ec:	6860      	ldr	r0, [r4, #4]
   141ee:	300c      	adds	r0, #12
   141f0:	f7f8 fe42 	bl	ce78 <strlen>
   141f4:	4286      	cmp	r6, r0
   141f6:	f47f acf8 	bne.w	13bea <pdn_interface_pdn_id_get+0xb2>
   141fa:	6861      	ldr	r1, [r4, #4]
   141fc:	4628      	mov	r0, r5
   141fe:	310c      	adds	r1, #12
   14200:	f7f8 fe30 	bl	ce64 <strcmp>
   14204:	2800      	cmp	r0, #0
   14206:	f47f acf0 	bne.w	13bea <pdn_interface_pdn_id_get+0xb2>
   1420a:	6863      	ldr	r3, [r4, #4]
   1420c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1420e:	0796      	lsls	r6, r2, #30
   14210:	f57f aceb 	bpl.w	13bea <pdn_interface_pdn_id_get+0xb2>
   14214:	2601      	movs	r6, #1
   14216:	e64a      	b.n	13eae <pdn_interface_pdn_id_get+0x376>
   14218:	4628      	mov	r0, r5
   1421a:	f7f8 fe2d 	bl	ce78 <strlen>
   1421e:	4606      	mov	r6, r0
   14220:	6860      	ldr	r0, [r4, #4]
   14222:	300c      	adds	r0, #12
   14224:	f7f8 fe28 	bl	ce78 <strlen>
   14228:	4286      	cmp	r6, r0
   1422a:	f47f ad30 	bne.w	13c8e <pdn_interface_pdn_id_get+0x156>
   1422e:	6861      	ldr	r1, [r4, #4]
   14230:	4628      	mov	r0, r5
   14232:	310c      	adds	r1, #12
   14234:	f7f8 fe16 	bl	ce64 <strcmp>
   14238:	2800      	cmp	r0, #0
   1423a:	f47f ad28 	bne.w	13c8e <pdn_interface_pdn_id_get+0x156>
   1423e:	6863      	ldr	r3, [r4, #4]
   14240:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14242:	07d6      	lsls	r6, r2, #31
   14244:	d4e6      	bmi.n	14214 <pdn_interface_pdn_id_get+0x6dc>
   14246:	e522      	b.n	13c8e <pdn_interface_pdn_id_get+0x156>
   14248:	4608      	mov	r0, r1
   1424a:	f7f8 fe15 	bl	ce78 <strlen>
   1424e:	4606      	mov	r6, r0
   14250:	6820      	ldr	r0, [r4, #0]
   14252:	300c      	adds	r0, #12
   14254:	f7f8 fe10 	bl	ce78 <strlen>
   14258:	4286      	cmp	r6, r0
   1425a:	f47f acc0 	bne.w	13bde <pdn_interface_pdn_id_get+0xa6>
   1425e:	6821      	ldr	r1, [r4, #0]
   14260:	4628      	mov	r0, r5
   14262:	310c      	adds	r1, #12
   14264:	f7f8 fdfe 	bl	ce64 <strcmp>
   14268:	4606      	mov	r6, r0
   1426a:	2800      	cmp	r0, #0
   1426c:	f47f acb7 	bne.w	13bde <pdn_interface_pdn_id_get+0xa6>
   14270:	6823      	ldr	r3, [r4, #0]
   14272:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14274:	0797      	lsls	r7, r2, #30
   14276:	f53f ae1a 	bmi.w	13eae <pdn_interface_pdn_id_get+0x376>
   1427a:	e4b0      	b.n	13bde <pdn_interface_pdn_id_get+0xa6>
   1427c:	4608      	mov	r0, r1
   1427e:	f7f8 fdfb 	bl	ce78 <strlen>
   14282:	4606      	mov	r6, r0
   14284:	6820      	ldr	r0, [r4, #0]
   14286:	300c      	adds	r0, #12
   14288:	f7f8 fdf6 	bl	ce78 <strlen>
   1428c:	4286      	cmp	r6, r0
   1428e:	f47f acf8 	bne.w	13c82 <pdn_interface_pdn_id_get+0x14a>
   14292:	6821      	ldr	r1, [r4, #0]
   14294:	4628      	mov	r0, r5
   14296:	310c      	adds	r1, #12
   14298:	f7f8 fde4 	bl	ce64 <strcmp>
   1429c:	4606      	mov	r6, r0
   1429e:	2800      	cmp	r0, #0
   142a0:	f47f acef 	bne.w	13c82 <pdn_interface_pdn_id_get+0x14a>
   142a4:	6823      	ldr	r3, [r4, #0]
   142a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   142a8:	07d7      	lsls	r7, r2, #31
   142aa:	f53f ae00 	bmi.w	13eae <pdn_interface_pdn_id_get+0x376>
   142ae:	e4e8      	b.n	13c82 <pdn_interface_pdn_id_get+0x14a>
   142b0:	f04f 30ff 	mov.w	r0, #4294967295
   142b4:	4770      	bx	lr
   142b6:	480b      	ldr	r0, [pc, #44]	; (142e4 <pdn_interface_pdn_id_get+0x7ac>)
   142b8:	f7f8 fdde 	bl	ce78 <strlen>
   142bc:	490a      	ldr	r1, [pc, #40]	; (142e8 <pdn_interface_pdn_id_get+0x7b0>)
   142be:	4602      	mov	r2, r0
   142c0:	4808      	ldr	r0, [pc, #32]	; (142e4 <pdn_interface_pdn_id_get+0x7ac>)
   142c2:	f008 fa23 	bl	1c70c <strncmp>
   142c6:	b930      	cbnz	r0, 142d6 <pdn_interface_pdn_id_get+0x79e>
   142c8:	2008      	movs	r0, #8
   142ca:	f7fb f831 	bl	f330 <bsd_os_errno_set>
   142ce:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   142d2:	6858      	ldr	r0, [r3, #4]
   142d4:	e47b      	b.n	13bce <pdn_interface_pdn_id_get+0x96>
   142d6:	2005      	movs	r0, #5
   142d8:	f7fb f82a 	bl	f330 <bsd_os_errno_set>
   142dc:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   142e0:	6858      	ldr	r0, [r3, #4]
   142e2:	e474      	b.n	13bce <pdn_interface_pdn_id_get+0x96>
   142e4:	0001d82c 	.word	0x0001d82c
   142e8:	20020630 	.word	0x20020630

000142ec <linked_list_init>:
   142ec:	b128      	cbz	r0, 142fa <linked_list_init+0xe>
   142ee:	2300      	movs	r3, #0
   142f0:	6003      	str	r3, [r0, #0]
   142f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
   142f6:	4618      	mov	r0, r3
   142f8:	4770      	bx	lr
   142fa:	2007      	movs	r0, #7
   142fc:	4770      	bx	lr
   142fe:	bf00      	nop

00014300 <linked_list_push>:
   14300:	6802      	ldr	r2, [r0, #0]
   14302:	4603      	mov	r3, r0
   14304:	3201      	adds	r2, #1
   14306:	d00e      	beq.n	14326 <linked_list_push+0x26>
   14308:	2200      	movs	r2, #0
   1430a:	600a      	str	r2, [r1, #0]
   1430c:	6802      	ldr	r2, [r0, #0]
   1430e:	b13a      	cbz	r2, 14320 <linked_list_push+0x20>
   14310:	6882      	ldr	r2, [r0, #8]
   14312:	6011      	str	r1, [r2, #0]
   14314:	6081      	str	r1, [r0, #8]
   14316:	681a      	ldr	r2, [r3, #0]
   14318:	2000      	movs	r0, #0
   1431a:	3201      	adds	r2, #1
   1431c:	601a      	str	r2, [r3, #0]
   1431e:	4770      	bx	lr
   14320:	e9c0 1101 	strd	r1, r1, [r0, #4]
   14324:	e7f7      	b.n	14316 <linked_list_push+0x16>
   14326:	2004      	movs	r0, #4
   14328:	4770      	bx	lr
   1432a:	bf00      	nop

0001432c <linked_list_pop>:
   1432c:	4603      	mov	r3, r0
   1432e:	6800      	ldr	r0, [r0, #0]
   14330:	b128      	cbz	r0, 1433e <linked_list_pop+0x12>
   14332:	6858      	ldr	r0, [r3, #4]
   14334:	681a      	ldr	r2, [r3, #0]
   14336:	6801      	ldr	r1, [r0, #0]
   14338:	3a01      	subs	r2, #1
   1433a:	6059      	str	r1, [r3, #4]
   1433c:	601a      	str	r2, [r3, #0]
   1433e:	4770      	bx	lr

00014340 <linked_list_peek>:
   14340:	6803      	ldr	r3, [r0, #0]
   14342:	b10b      	cbz	r3, 14348 <linked_list_peek+0x8>
   14344:	6840      	ldr	r0, [r0, #4]
   14346:	4770      	bx	lr
   14348:	4618      	mov	r0, r3
   1434a:	4770      	bx	lr

0001434c <linked_list_size_get>:
   1434c:	6800      	ldr	r0, [r0, #0]
   1434e:	4770      	bx	lr

00014350 <linked_list_get_next>:
   14350:	6800      	ldr	r0, [r0, #0]
   14352:	4770      	bx	lr

00014354 <nrf_socket>:
   14354:	b570      	push	{r4, r5, r6, lr}
   14356:	4604      	mov	r4, r0
   14358:	460d      	mov	r5, r1
   1435a:	4616      	mov	r6, r2
   1435c:	f7fd fdb4 	bl	11ec8 <bsd_platform_af_method_table_get>
   14360:	b130      	cbz	r0, 14370 <nrf_socket+0x1c>
   14362:	6803      	ldr	r3, [r0, #0]
   14364:	4632      	mov	r2, r6
   14366:	4629      	mov	r1, r5
   14368:	4620      	mov	r0, r4
   1436a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1436e:	4718      	bx	r3
   14370:	f04f 30ff 	mov.w	r0, #4294967295
   14374:	bd70      	pop	{r4, r5, r6, pc}
   14376:	bf00      	nop

00014378 <nrf_close>:
   14378:	b510      	push	{r4, lr}
   1437a:	4604      	mov	r4, r0
   1437c:	f7fd fdfc 	bl	11f78 <bsd_platform_fd_method_table_get>
   14380:	b120      	cbz	r0, 1438c <nrf_close+0x14>
   14382:	6843      	ldr	r3, [r0, #4]
   14384:	4620      	mov	r0, r4
   14386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1438a:	4718      	bx	r3
   1438c:	f04f 30ff 	mov.w	r0, #4294967295
   14390:	bd10      	pop	{r4, pc}
   14392:	bf00      	nop

00014394 <nrf_sendto>:
   14394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14398:	460d      	mov	r5, r1
   1439a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1439e:	4616      	mov	r6, r2
   143a0:	461f      	mov	r7, r3
   143a2:	4604      	mov	r4, r0
   143a4:	f7fd fde8 	bl	11f78 <bsd_platform_fd_method_table_get>
   143a8:	b158      	cbz	r0, 143c2 <nrf_sendto+0x2e>
   143aa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   143ae:	f8d0 e008 	ldr.w	lr, [r0, #8]
   143b2:	463b      	mov	r3, r7
   143b4:	4632      	mov	r2, r6
   143b6:	4629      	mov	r1, r5
   143b8:	4620      	mov	r0, r4
   143ba:	46f4      	mov	ip, lr
   143bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   143c0:	4760      	bx	ip
   143c2:	f04f 30ff 	mov.w	r0, #4294967295
   143c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143ca:	bf00      	nop

000143cc <nrf_send>:
   143cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143d0:	b082      	sub	sp, #8
   143d2:	460e      	mov	r6, r1
   143d4:	4617      	mov	r7, r2
   143d6:	4698      	mov	r8, r3
   143d8:	4605      	mov	r5, r0
   143da:	f7fd fdcd 	bl	11f78 <bsd_platform_fd_method_table_get>
   143de:	b160      	cbz	r0, 143fa <nrf_send+0x2e>
   143e0:	4604      	mov	r4, r0
   143e2:	2000      	movs	r0, #0
   143e4:	e9cd 0000 	strd	r0, r0, [sp]
   143e8:	4643      	mov	r3, r8
   143ea:	463a      	mov	r2, r7
   143ec:	4631      	mov	r1, r6
   143ee:	4628      	mov	r0, r5
   143f0:	68a4      	ldr	r4, [r4, #8]
   143f2:	47a0      	blx	r4
   143f4:	b002      	add	sp, #8
   143f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143fa:	f04f 30ff 	mov.w	r0, #4294967295
   143fe:	e7f9      	b.n	143f4 <nrf_send+0x28>

00014400 <nrf_recvfrom>:
   14400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14404:	460d      	mov	r5, r1
   14406:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1440a:	4616      	mov	r6, r2
   1440c:	461f      	mov	r7, r3
   1440e:	4604      	mov	r4, r0
   14410:	f7fd fdb2 	bl	11f78 <bsd_platform_fd_method_table_get>
   14414:	b158      	cbz	r0, 1442e <nrf_recvfrom+0x2e>
   14416:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1441a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1441e:	463b      	mov	r3, r7
   14420:	4632      	mov	r2, r6
   14422:	4629      	mov	r1, r5
   14424:	4620      	mov	r0, r4
   14426:	46f4      	mov	ip, lr
   14428:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1442c:	4760      	bx	ip
   1442e:	f04f 30ff 	mov.w	r0, #4294967295
   14432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14436:	bf00      	nop

00014438 <nrf_recv>:
   14438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1443c:	b082      	sub	sp, #8
   1443e:	460e      	mov	r6, r1
   14440:	4617      	mov	r7, r2
   14442:	4698      	mov	r8, r3
   14444:	4605      	mov	r5, r0
   14446:	f7fd fd97 	bl	11f78 <bsd_platform_fd_method_table_get>
   1444a:	b160      	cbz	r0, 14466 <nrf_recv+0x2e>
   1444c:	4604      	mov	r4, r0
   1444e:	2000      	movs	r0, #0
   14450:	e9cd 0000 	strd	r0, r0, [sp]
   14454:	4643      	mov	r3, r8
   14456:	463a      	mov	r2, r7
   14458:	4631      	mov	r1, r6
   1445a:	4628      	mov	r0, r5
   1445c:	68e4      	ldr	r4, [r4, #12]
   1445e:	47a0      	blx	r4
   14460:	b002      	add	sp, #8
   14462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14466:	f04f 30ff 	mov.w	r0, #4294967295
   1446a:	e7f9      	b.n	14460 <nrf_recv+0x28>

0001446c <nrf_connect>:
   1446c:	b570      	push	{r4, r5, r6, lr}
   1446e:	460d      	mov	r5, r1
   14470:	4616      	mov	r6, r2
   14472:	4604      	mov	r4, r0
   14474:	f7fd fd80 	bl	11f78 <bsd_platform_fd_method_table_get>
   14478:	b130      	cbz	r0, 14488 <nrf_connect+0x1c>
   1447a:	6943      	ldr	r3, [r0, #20]
   1447c:	4632      	mov	r2, r6
   1447e:	4629      	mov	r1, r5
   14480:	4620      	mov	r0, r4
   14482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14486:	4718      	bx	r3
   14488:	f04f 30ff 	mov.w	r0, #4294967295
   1448c:	bd70      	pop	{r4, r5, r6, pc}
   1448e:	bf00      	nop

00014490 <nrf_listen>:
   14490:	b570      	push	{r4, r5, r6, lr}
   14492:	460d      	mov	r5, r1
   14494:	4604      	mov	r4, r0
   14496:	f7fd fd6f 	bl	11f78 <bsd_platform_fd_method_table_get>
   1449a:	b128      	cbz	r0, 144a8 <nrf_listen+0x18>
   1449c:	6983      	ldr	r3, [r0, #24]
   1449e:	4629      	mov	r1, r5
   144a0:	4620      	mov	r0, r4
   144a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   144a6:	4718      	bx	r3
   144a8:	f04f 30ff 	mov.w	r0, #4294967295
   144ac:	bd70      	pop	{r4, r5, r6, pc}
   144ae:	bf00      	nop

000144b0 <nrf_accept>:
   144b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   144b4:	460d      	mov	r5, r1
   144b6:	4616      	mov	r6, r2
   144b8:	4604      	mov	r4, r0
   144ba:	f7fd fd5d 	bl	11f78 <bsd_platform_fd_method_table_get>
   144be:	b140      	cbz	r0, 144d2 <nrf_accept+0x22>
   144c0:	69c7      	ldr	r7, [r0, #28]
   144c2:	4632      	mov	r2, r6
   144c4:	4629      	mov	r1, r5
   144c6:	4620      	mov	r0, r4
   144c8:	46bc      	mov	ip, r7
   144ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   144ce:	2300      	movs	r3, #0
   144d0:	4760      	bx	ip
   144d2:	f04f 30ff 	mov.w	r0, #4294967295
   144d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144da:	bf00      	nop

000144dc <nrf_bind>:
   144dc:	b570      	push	{r4, r5, r6, lr}
   144de:	460d      	mov	r5, r1
   144e0:	4616      	mov	r6, r2
   144e2:	4604      	mov	r4, r0
   144e4:	f7fd fd48 	bl	11f78 <bsd_platform_fd_method_table_get>
   144e8:	b130      	cbz	r0, 144f8 <nrf_bind+0x1c>
   144ea:	6903      	ldr	r3, [r0, #16]
   144ec:	4632      	mov	r2, r6
   144ee:	4629      	mov	r1, r5
   144f0:	4620      	mov	r0, r4
   144f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   144f6:	4718      	bx	r3
   144f8:	f04f 30ff 	mov.w	r0, #4294967295
   144fc:	bd70      	pop	{r4, r5, r6, pc}
   144fe:	bf00      	nop

00014500 <nrf_setsockopt>:
   14500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14504:	f8dd 8018 	ldr.w	r8, [sp, #24]
   14508:	460d      	mov	r5, r1
   1450a:	4616      	mov	r6, r2
   1450c:	461f      	mov	r7, r3
   1450e:	4604      	mov	r4, r0
   14510:	f7fd fd32 	bl	11f78 <bsd_platform_fd_method_table_get>
   14514:	b158      	cbz	r0, 1452e <nrf_setsockopt+0x2e>
   14516:	f8cd 8018 	str.w	r8, [sp, #24]
   1451a:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1451e:	463b      	mov	r3, r7
   14520:	4632      	mov	r2, r6
   14522:	4629      	mov	r1, r5
   14524:	4620      	mov	r0, r4
   14526:	46f4      	mov	ip, lr
   14528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1452c:	4760      	bx	ip
   1452e:	f04f 30ff 	mov.w	r0, #4294967295
   14532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14536:	bf00      	nop

00014538 <nrf_getsockopt>:
   14538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1453c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   14540:	460d      	mov	r5, r1
   14542:	4616      	mov	r6, r2
   14544:	461f      	mov	r7, r3
   14546:	4604      	mov	r4, r0
   14548:	f7fd fd16 	bl	11f78 <bsd_platform_fd_method_table_get>
   1454c:	b158      	cbz	r0, 14566 <nrf_getsockopt+0x2e>
   1454e:	f8cd 8018 	str.w	r8, [sp, #24]
   14552:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   14556:	463b      	mov	r3, r7
   14558:	4632      	mov	r2, r6
   1455a:	4629      	mov	r1, r5
   1455c:	4620      	mov	r0, r4
   1455e:	46f4      	mov	ip, lr
   14560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14564:	4760      	bx	ip
   14566:	f04f 30ff 	mov.w	r0, #4294967295
   1456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1456e:	bf00      	nop

00014570 <nrf_getaddrinfo>:
   14570:	f7fd bd78 	b.w	12064 <bsd_platform_getaddrinfo>

00014574 <nrf_freeaddrinfo>:
   14574:	f7fd bd78 	b.w	12068 <bsd_platform_freeaddrinfo>

00014578 <nrf_poll>:
   14578:	f7fd bd78 	b.w	1206c <bsd_platform_poll>

0001457c <nrf_fcntl>:
   1457c:	f7fd bdd0 	b.w	12120 <bsd_platform_fcntl>

00014580 <at_client_evt_handler>:
   14580:	b120      	cbz	r0, 1458c <at_client_evt_handler+0xc>
   14582:	f850 1b08 	ldr.w	r1, [r0], #8
   14586:	0c09      	lsrs	r1, r1, #16
   14588:	f7fb bfa0 	b.w	104cc <rpc_at_event_handler>
   1458c:	4770      	bx	lr
   1458e:	bf00      	nop

00014590 <rpc_at_client_init>:
   14590:	4801      	ldr	r0, [pc, #4]	; (14598 <rpc_at_client_init+0x8>)
   14592:	f001 be47 	b.w	16224 <rpc_client_register>
   14596:	bf00      	nop
   14598:	0001d840 	.word	0x0001d840

0001459c <rpc_at_client_request_alloc>:
   1459c:	b180      	cbz	r0, 145c0 <rpc_at_client_request_alloc+0x24>
   1459e:	2300      	movs	r3, #0
   145a0:	b510      	push	{r4, lr}
   145a2:	b082      	sub	sp, #8
   145a4:	aa02      	add	r2, sp, #8
   145a6:	4604      	mov	r4, r0
   145a8:	f842 3d04 	str.w	r3, [r2, #-4]!
   145ac:	2003      	movs	r0, #3
   145ae:	f002 f871 	bl	16694 <rpc_message_alloc>
   145b2:	b918      	cbnz	r0, 145bc <rpc_at_client_request_alloc+0x20>
   145b4:	9b01      	ldr	r3, [sp, #4]
   145b6:	b10b      	cbz	r3, 145bc <rpc_at_client_request_alloc+0x20>
   145b8:	3308      	adds	r3, #8
   145ba:	6023      	str	r3, [r4, #0]
   145bc:	b002      	add	sp, #8
   145be:	bd10      	pop	{r4, pc}
   145c0:	200e      	movs	r0, #14
   145c2:	4770      	bx	lr

000145c4 <rpc_at_client_request_send>:
   145c4:	b150      	cbz	r0, 145dc <rpc_at_client_request_send+0x18>
   145c6:	4603      	mov	r3, r0
   145c8:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   145cc:	2003      	movs	r0, #3
   145ce:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   145d2:	f843 1d08 	str.w	r1, [r3, #-8]!
   145d6:	4619      	mov	r1, r3
   145d8:	f002 b844 	b.w	16664 <rpc_message_send>
   145dc:	200e      	movs	r0, #14
   145de:	4770      	bx	lr

000145e0 <rpc_at_client_message_free>:
   145e0:	b120      	cbz	r0, 145ec <rpc_at_client_message_free+0xc>
   145e2:	f1a0 0108 	sub.w	r1, r0, #8
   145e6:	2003      	movs	r0, #3
   145e8:	f002 b886 	b.w	166f8 <rpc_message_free>
   145ec:	200e      	movs	r0, #14
   145ee:	4770      	bx	lr

000145f0 <rpc_at_client_data_free>:
   145f0:	b118      	cbz	r0, 145fa <rpc_at_client_data_free+0xa>
   145f2:	4601      	mov	r1, r0
   145f4:	2003      	movs	r0, #3
   145f6:	f002 b991 	b.w	1691c <rpc_message_data_free>
   145fa:	200e      	movs	r0, #14
   145fc:	4770      	bx	lr
   145fe:	bf00      	nop

00014600 <ip_recvd_packet_free_cb>:
   14600:	b510      	push	{r4, lr}
   14602:	4604      	mov	r4, r0
   14604:	6800      	ldr	r0, [r0, #0]
   14606:	f7fc fc1f 	bl	10e48 <rpc_ip_client_data_free>
   1460a:	68a0      	ldr	r0, [r4, #8]
   1460c:	b118      	cbz	r0, 14616 <ip_recvd_packet_free_cb+0x16>
   1460e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14612:	f7fc bbb9 	b.w	10d88 <nrf_free>
   14616:	bd10      	pop	{r4, pc}

00014618 <rpc_error_to_nrf_bsd_error>:
   14618:	2810      	cmp	r0, #16
   1461a:	bf9a      	itte	ls
   1461c:	4b02      	ldrls	r3, [pc, #8]	; (14628 <rpc_error_to_nrf_bsd_error+0x10>)
   1461e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   14622:	202d      	movhi	r0, #45	; 0x2d
   14624:	4770      	bx	lr
   14626:	bf00      	nop
   14628:	0001d850 	.word	0x0001d850

0001462c <ip_interface_request_create>:
   1462c:	b570      	push	{r4, r5, r6, lr}
   1462e:	2500      	movs	r5, #0
   14630:	b082      	sub	sp, #8
   14632:	ac02      	add	r4, sp, #8
   14634:	f844 5d04 	str.w	r5, [r4, #-4]!
   14638:	4606      	mov	r6, r0
   1463a:	460d      	mov	r5, r1
   1463c:	4620      	mov	r0, r4
   1463e:	4619      	mov	r1, r3
   14640:	4614      	mov	r4, r2
   14642:	f7fc fbcf 	bl	10de4 <rpc_ip_client_request_alloc>
   14646:	b960      	cbnz	r0, 14662 <ip_interface_request_create+0x36>
   14648:	9b01      	ldr	r3, [sp, #4]
   1464a:	2208      	movs	r2, #8
   1464c:	7258      	strb	r0, [r3, #9]
   1464e:	7298      	strb	r0, [r3, #10]
   14650:	72d8      	strb	r0, [r3, #11]
   14652:	4618      	mov	r0, r3
   14654:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   14658:	60dc      	str	r4, [r3, #12]
   1465a:	611d      	str	r5, [r3, #16]
   1465c:	721a      	strb	r2, [r3, #8]
   1465e:	b002      	add	sp, #8
   14660:	bd70      	pop	{r4, r5, r6, pc}
   14662:	9b01      	ldr	r3, [sp, #4]
   14664:	4618      	mov	r0, r3
   14666:	b002      	add	sp, #8
   14668:	bd70      	pop	{r4, r5, r6, pc}
   1466a:	bf00      	nop

0001466c <ip_interface_request_send>:
   1466c:	b570      	push	{r4, r5, r6, lr}
   1466e:	460c      	mov	r4, r1
   14670:	4605      	mov	r5, r0
   14672:	4611      	mov	r1, r2
   14674:	4620      	mov	r0, r4
   14676:	461e      	mov	r6, r3
   14678:	f7fc fbc8 	bl	10e0c <rpc_ip_client_request_send>
   1467c:	b900      	cbnz	r0, 14680 <ip_interface_request_send+0x14>
   1467e:	bd70      	pop	{r4, r5, r6, pc}
   14680:	6820      	ldr	r0, [r4, #0]
   14682:	b108      	cbz	r0, 14688 <ip_interface_request_send+0x1c>
   14684:	f7fc fbe0 	bl	10e48 <rpc_ip_client_data_free>
   14688:	4620      	mov	r0, r4
   1468a:	f7fc fbd5 	bl	10e38 <rpc_ip_client_message_free>
   1468e:	602e      	str	r6, [r5, #0]
   14690:	2023      	movs	r0, #35	; 0x23
   14692:	bd70      	pop	{r4, r5, r6, pc}

00014694 <ip_interface_wait>:
   14694:	b538      	push	{r3, r4, r5, lr}
   14696:	4605      	mov	r5, r0
   14698:	f001 fc14 	bl	15ec4 <interface_socket_wait>
   1469c:	4604      	mov	r4, r0
   1469e:	b108      	cbz	r0, 146a4 <ip_interface_wait+0x10>
   146a0:	4620      	mov	r0, r4
   146a2:	bd38      	pop	{r3, r4, r5, pc}
   146a4:	4628      	mov	r0, r5
   146a6:	f001 fc81 	bl	15fac <interface_socket_from_handle_get>
   146aa:	2800      	cmp	r0, #0
   146ac:	d0f8      	beq.n	146a0 <ip_interface_wait+0xc>
   146ae:	6844      	ldr	r4, [r0, #4]
   146b0:	2c00      	cmp	r4, #0
   146b2:	d0f5      	beq.n	146a0 <ip_interface_wait+0xc>
   146b4:	2300      	movs	r3, #0
   146b6:	6043      	str	r3, [r0, #4]
   146b8:	4620      	mov	r0, r4
   146ba:	bd38      	pop	{r3, r4, r5, pc}

000146bc <ip_interface_init>:
   146bc:	b538      	push	{r3, r4, r5, lr}
   146be:	2300      	movs	r3, #0
   146c0:	4d07      	ldr	r5, [pc, #28]	; (146e0 <ip_interface_init+0x24>)
   146c2:	4c08      	ldr	r4, [pc, #32]	; (146e4 <ip_interface_init+0x28>)
   146c4:	4619      	mov	r1, r3
   146c6:	2224      	movs	r2, #36	; 0x24
   146c8:	4807      	ldr	r0, [pc, #28]	; (146e8 <ip_interface_init+0x2c>)
   146ca:	602b      	str	r3, [r5, #0]
   146cc:	6023      	str	r3, [r4, #0]
   146ce:	f007 fed7 	bl	1c480 <memset>
   146d2:	f7fc fb81 	bl	10dd8 <rpc_ip_client_init>
   146d6:	3000      	adds	r0, #0
   146d8:	bf18      	it	ne
   146da:	2001      	movne	r0, #1
   146dc:	4240      	negs	r0, r0
   146de:	bd38      	pop	{r3, r4, r5, pc}
   146e0:	20020768 	.word	0x20020768
   146e4:	20020764 	.word	0x20020764
   146e8:	20020770 	.word	0x20020770

000146ec <ip_interface_open>:
   146ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146f0:	4606      	mov	r6, r0
   146f2:	2000      	movs	r0, #0
   146f4:	f026 0308 	bic.w	r3, r6, #8
   146f8:	b082      	sub	sp, #8
   146fa:	2b02      	cmp	r3, #2
   146fc:	460c      	mov	r4, r1
   146fe:	4617      	mov	r7, r2
   14700:	9000      	str	r0, [sp, #0]
   14702:	d002      	beq.n	1470a <ip_interface_open+0x1e>
   14704:	2e05      	cmp	r6, #5
   14706:	f040 8085 	bne.w	14814 <ip_interface_open+0x128>
   1470a:	1e63      	subs	r3, r4, #1
   1470c:	2b02      	cmp	r3, #2
   1470e:	f200 8097 	bhi.w	14840 <ip_interface_open+0x154>
   14712:	2f00      	cmp	r7, #0
   14714:	d154      	bne.n	147c0 <ip_interface_open+0xd4>
   14716:	2c01      	cmp	r4, #1
   14718:	d067      	beq.n	147ea <ip_interface_open+0xfe>
   1471a:	2c03      	cmp	r4, #3
   1471c:	bf18      	it	ne
   1471e:	2702      	movne	r7, #2
   14720:	4a4a      	ldr	r2, [pc, #296]	; (1484c <ip_interface_open+0x160>)
   14722:	4621      	mov	r1, r4
   14724:	4668      	mov	r0, sp
   14726:	f001 fb1b 	bl	15d60 <interface_socket_allocate>
   1472a:	9b00      	ldr	r3, [sp, #0]
   1472c:	4680      	mov	r8, r0
   1472e:	2b00      	cmp	r3, #0
   14730:	d059      	beq.n	147e6 <ip_interface_open+0xfa>
   14732:	2100      	movs	r1, #0
   14734:	a802      	add	r0, sp, #8
   14736:	f840 1d04 	str.w	r1, [r0, #-4]!
   1473a:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1473e:	615f      	str	r7, [r3, #20]
   14740:	f7fc fb50 	bl	10de4 <rpc_ip_client_request_alloc>
   14744:	2800      	cmp	r0, #0
   14746:	d14b      	bne.n	147e0 <ip_interface_open+0xf4>
   14748:	f247 0201 	movw	r2, #28673	; 0x7001
   1474c:	f04f 33ff 	mov.w	r3, #4294967295
   14750:	2108      	movs	r1, #8
   14752:	9d01      	ldr	r5, [sp, #4]
   14754:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   14758:	60ea      	str	r2, [r5, #12]
   1475a:	7268      	strb	r0, [r5, #9]
   1475c:	72a8      	strb	r0, [r5, #10]
   1475e:	72e8      	strb	r0, [r5, #11]
   14760:	7229      	strb	r1, [r5, #8]
   14762:	742b      	strb	r3, [r5, #16]
   14764:	746b      	strb	r3, [r5, #17]
   14766:	74ab      	strb	r3, [r5, #18]
   14768:	74eb      	strb	r3, [r5, #19]
   1476a:	68ab      	ldr	r3, [r5, #8]
   1476c:	2e05      	cmp	r6, #5
   1476e:	f103 030c 	add.w	r3, r3, #12
   14772:	60ab      	str	r3, [r5, #8]
   14774:	d003      	beq.n	1477e <ip_interface_open+0x92>
   14776:	2e0a      	cmp	r6, #10
   14778:	bf14      	ite	ne
   1477a:	2601      	movne	r6, #1
   1477c:	2602      	moveq	r6, #2
   1477e:	616e      	str	r6, [r5, #20]
   14780:	61ef      	str	r7, [r5, #28]
   14782:	61ac      	str	r4, [r5, #24]
   14784:	f247 0101 	movw	r1, #28673	; 0x7001
   14788:	4628      	mov	r0, r5
   1478a:	9f00      	ldr	r7, [sp, #0]
   1478c:	f7fc fb3e 	bl	10e0c <rpc_ip_client_request_send>
   14790:	4606      	mov	r6, r0
   14792:	b360      	cbz	r0, 147ee <ip_interface_open+0x102>
   14794:	6828      	ldr	r0, [r5, #0]
   14796:	b108      	cbz	r0, 1479c <ip_interface_open+0xb0>
   14798:	f7fc fb56 	bl	10e48 <rpc_ip_client_data_free>
   1479c:	4628      	mov	r0, r5
   1479e:	f7fc fb4b 	bl	10e38 <rpc_ip_client_message_free>
   147a2:	2301      	movs	r3, #1
   147a4:	2523      	movs	r5, #35	; 0x23
   147a6:	603b      	str	r3, [r7, #0]
   147a8:	4640      	mov	r0, r8
   147aa:	f001 fb3d 	bl	15e28 <interface_socket_free>
   147ae:	4628      	mov	r0, r5
   147b0:	f7fa fdbe 	bl	f330 <bsd_os_errno_set>
   147b4:	f04f 38ff 	mov.w	r8, #4294967295
   147b8:	4640      	mov	r0, r8
   147ba:	b002      	add	sp, #8
   147bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   147c0:	2c01      	cmp	r4, #1
   147c2:	d009      	beq.n	147d8 <ip_interface_open+0xec>
   147c4:	2c02      	cmp	r4, #2
   147c6:	d109      	bne.n	147dc <ip_interface_open+0xf0>
   147c8:	2f02      	cmp	r7, #2
   147ca:	d0a9      	beq.n	14720 <ip_interface_open+0x34>
   147cc:	2029      	movs	r0, #41	; 0x29
   147ce:	f7fa fdaf 	bl	f330 <bsd_os_errno_set>
   147d2:	f04f 38ff 	mov.w	r8, #4294967295
   147d6:	e7ef      	b.n	147b8 <ip_interface_open+0xcc>
   147d8:	2f01      	cmp	r7, #1
   147da:	d1f7      	bne.n	147cc <ip_interface_open+0xe0>
   147dc:	2702      	movs	r7, #2
   147de:	e79f      	b.n	14720 <ip_interface_open+0x34>
   147e0:	9d01      	ldr	r5, [sp, #4]
   147e2:	2d00      	cmp	r5, #0
   147e4:	d1c1      	bne.n	1476a <ip_interface_open+0x7e>
   147e6:	250c      	movs	r5, #12
   147e8:	e7de      	b.n	147a8 <ip_interface_open+0xbc>
   147ea:	4627      	mov	r7, r4
   147ec:	e798      	b.n	14720 <ip_interface_open+0x34>
   147ee:	f04f 33ff 	mov.w	r3, #4294967295
   147f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   147f6:	2102      	movs	r1, #2
   147f8:	4640      	mov	r0, r8
   147fa:	f001 fb63 	bl	15ec4 <interface_socket_wait>
   147fe:	4605      	mov	r5, r0
   14800:	2800      	cmp	r0, #0
   14802:	d1d1      	bne.n	147a8 <ip_interface_open+0xbc>
   14804:	4640      	mov	r0, r8
   14806:	f001 fbd1 	bl	15fac <interface_socket_from_handle_get>
   1480a:	b148      	cbz	r0, 14820 <ip_interface_open+0x134>
   1480c:	6845      	ldr	r5, [r0, #4]
   1480e:	b13d      	cbz	r5, 14820 <ip_interface_open+0x134>
   14810:	6046      	str	r6, [r0, #4]
   14812:	e7c9      	b.n	147a8 <ip_interface_open+0xbc>
   14814:	202f      	movs	r0, #47	; 0x2f
   14816:	f7fa fd8b 	bl	f330 <bsd_os_errno_set>
   1481a:	f04f 38ff 	mov.w	r8, #4294967295
   1481e:	e7cb      	b.n	147b8 <ip_interface_open+0xcc>
   14820:	3c02      	subs	r4, #2
   14822:	2c01      	cmp	r4, #1
   14824:	d8c8      	bhi.n	147b8 <ip_interface_open+0xcc>
   14826:	4640      	mov	r0, r8
   14828:	9b00      	ldr	r3, [sp, #0]
   1482a:	681a      	ldr	r2, [r3, #0]
   1482c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14830:	601a      	str	r2, [r3, #0]
   14832:	681a      	ldr	r2, [r3, #0]
   14834:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   14838:	601a      	str	r2, [r3, #0]
   1483a:	b002      	add	sp, #8
   1483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14840:	2016      	movs	r0, #22
   14842:	f7fa fd75 	bl	f330 <bsd_os_errno_set>
   14846:	f04f 38ff 	mov.w	r8, #4294967295
   1484a:	e7b5      	b.n	147b8 <ip_interface_open+0xcc>
   1484c:	00014601 	.word	0x00014601

00014850 <ip_interface_close>:
   14850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14854:	b082      	sub	sp, #8
   14856:	4606      	mov	r6, r0
   14858:	f001 fba8 	bl	15fac <interface_socket_from_handle_get>
   1485c:	2800      	cmp	r0, #0
   1485e:	d063      	beq.n	14928 <ip_interface_close+0xd8>
   14860:	4604      	mov	r4, r0
   14862:	2100      	movs	r1, #0
   14864:	a802      	add	r0, sp, #8
   14866:	6827      	ldr	r7, [r4, #0]
   14868:	f840 1d04 	str.w	r1, [r0, #-4]!
   1486c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   14870:	f7fc fab8 	bl	10de4 <rpc_ip_client_request_alloc>
   14874:	2800      	cmp	r0, #0
   14876:	d13a      	bne.n	148ee <ip_interface_close+0x9e>
   14878:	f247 0309 	movw	r3, #28681	; 0x7009
   1487c:	2208      	movs	r2, #8
   1487e:	9d01      	ldr	r5, [sp, #4]
   14880:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   14884:	60eb      	str	r3, [r5, #12]
   14886:	f8c5 8010 	str.w	r8, [r5, #16]
   1488a:	7268      	strb	r0, [r5, #9]
   1488c:	72a8      	strb	r0, [r5, #10]
   1488e:	72e8      	strb	r0, [r5, #11]
   14890:	722a      	strb	r2, [r5, #8]
   14892:	6823      	ldr	r3, [r4, #0]
   14894:	f247 0109 	movw	r1, #28681	; 0x7009
   14898:	0c1b      	lsrs	r3, r3, #16
   1489a:	041b      	lsls	r3, r3, #16
   1489c:	f043 030d 	orr.w	r3, r3, #13
   148a0:	6023      	str	r3, [r4, #0]
   148a2:	6823      	ldr	r3, [r4, #0]
   148a4:	4628      	mov	r0, r5
   148a6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   148aa:	6023      	str	r3, [r4, #0]
   148ac:	6823      	ldr	r3, [r4, #0]
   148ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   148b2:	6023      	str	r3, [r4, #0]
   148b4:	f7fc faaa 	bl	10e0c <rpc_ip_client_request_send>
   148b8:	bb40      	cbnz	r0, 1490c <ip_interface_close+0xbc>
   148ba:	f04f 33ff 	mov.w	r3, #4294967295
   148be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   148c2:	210e      	movs	r1, #14
   148c4:	4630      	mov	r0, r6
   148c6:	f001 fafd 	bl	15ec4 <interface_socket_wait>
   148ca:	4604      	mov	r4, r0
   148cc:	b1a0      	cbz	r0, 148f8 <ip_interface_close+0xa8>
   148ce:	4c17      	ldr	r4, [pc, #92]	; (1492c <ip_interface_close+0xdc>)
   148d0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   148d4:	b120      	cbz	r0, 148e0 <ip_interface_close+0x90>
   148d6:	f7fc faaf 	bl	10e38 <rpc_ip_client_message_free>
   148da:	2300      	movs	r3, #0
   148dc:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   148e0:	4630      	mov	r0, r6
   148e2:	f001 faa1 	bl	15e28 <interface_socket_free>
   148e6:	2000      	movs	r0, #0
   148e8:	b002      	add	sp, #8
   148ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148ee:	9d01      	ldr	r5, [sp, #4]
   148f0:	200c      	movs	r0, #12
   148f2:	2d00      	cmp	r5, #0
   148f4:	d1cd      	bne.n	14892 <ip_interface_close+0x42>
   148f6:	e012      	b.n	1491e <ip_interface_close+0xce>
   148f8:	4630      	mov	r0, r6
   148fa:	f001 fb57 	bl	15fac <interface_socket_from_handle_get>
   148fe:	2800      	cmp	r0, #0
   14900:	d0e5      	beq.n	148ce <ip_interface_close+0x7e>
   14902:	6843      	ldr	r3, [r0, #4]
   14904:	2b00      	cmp	r3, #0
   14906:	d0e2      	beq.n	148ce <ip_interface_close+0x7e>
   14908:	6044      	str	r4, [r0, #4]
   1490a:	e7e0      	b.n	148ce <ip_interface_close+0x7e>
   1490c:	6828      	ldr	r0, [r5, #0]
   1490e:	b108      	cbz	r0, 14914 <ip_interface_close+0xc4>
   14910:	f7fc fa9a 	bl	10e48 <rpc_ip_client_data_free>
   14914:	4628      	mov	r0, r5
   14916:	f7fc fa8f 	bl	10e38 <rpc_ip_client_message_free>
   1491a:	2023      	movs	r0, #35	; 0x23
   1491c:	6027      	str	r7, [r4, #0]
   1491e:	f7fa fd07 	bl	f330 <bsd_os_errno_set>
   14922:	f04f 30ff 	mov.w	r0, #4294967295
   14926:	e7df      	b.n	148e8 <ip_interface_close+0x98>
   14928:	2009      	movs	r0, #9
   1492a:	e7f8      	b.n	1491e <ip_interface_close+0xce>
   1492c:	20020770 	.word	0x20020770

00014930 <ip_interface_sendto>:
   14930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14934:	2400      	movs	r4, #0
   14936:	b089      	sub	sp, #36	; 0x24
   14938:	9102      	str	r1, [sp, #8]
   1493a:	4615      	mov	r5, r2
   1493c:	4699      	mov	r9, r3
   1493e:	9407      	str	r4, [sp, #28]
   14940:	4607      	mov	r7, r0
   14942:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14944:	f001 fb32 	bl	15fac <interface_socket_from_handle_get>
   14948:	2800      	cmp	r0, #0
   1494a:	f000 815f 	beq.w	14c0c <ip_interface_sendto+0x2dc>
   1494e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   14952:	f300 814c 	bgt.w	14bee <ip_interface_sendto+0x2be>
   14956:	6903      	ldr	r3, [r0, #16]
   14958:	4604      	mov	r4, r0
   1495a:	2b01      	cmp	r3, #1
   1495c:	f000 80fb 	beq.w	14b56 <ip_interface_sendto+0x226>
   14960:	6822      	ldr	r2, [r4, #0]
   14962:	0390      	lsls	r0, r2, #14
   14964:	d562      	bpl.n	14a2c <ip_interface_sendto+0xfc>
   14966:	f1b9 0f00 	cmp.w	r9, #0
   1496a:	f000 80fc 	beq.w	14b66 <ip_interface_sendto+0x236>
   1496e:	f019 0f02 	tst.w	r9, #2
   14972:	f000 8146 	beq.w	14c02 <ip_interface_sendto+0x2d2>
   14976:	2300      	movs	r3, #0
   14978:	9303      	str	r3, [sp, #12]
   1497a:	f247 0806 	movw	r8, #28678	; 0x7006
   1497e:	f04f 0b0c 	mov.w	fp, #12
   14982:	4ba6      	ldr	r3, [pc, #664]	; (14c1c <ip_interface_sendto+0x2ec>)
   14984:	9300      	str	r3, [sp, #0]
   14986:	043b      	lsls	r3, r7, #16
   14988:	9304      	str	r3, [sp, #16]
   1498a:	4629      	mov	r1, r5
   1498c:	a807      	add	r0, sp, #28
   1498e:	f7fc fa29 	bl	10de4 <rpc_ip_client_request_alloc>
   14992:	2804      	cmp	r0, #4
   14994:	d063      	beq.n	14a5e <ip_interface_sendto+0x12e>
   14996:	2800      	cmp	r0, #0
   14998:	f040 813d 	bne.w	14c16 <ip_interface_sendto+0x2e6>
   1499c:	9b07      	ldr	r3, [sp, #28]
   1499e:	f883 b008 	strb.w	fp, [r3, #8]
   149a2:	7258      	strb	r0, [r3, #9]
   149a4:	7298      	strb	r0, [r3, #10]
   149a6:	72d8      	strb	r0, [r3, #11]
   149a8:	2e00      	cmp	r6, #0
   149aa:	d074      	beq.n	14a96 <ip_interface_sendto+0x166>
   149ac:	68e2      	ldr	r2, [r4, #12]
   149ae:	6871      	ldr	r1, [r6, #4]
   149b0:	428a      	cmp	r2, r1
   149b2:	f040 80a2 	bne.w	14afa <ip_interface_sendto+0x1ca>
   149b6:	7831      	ldrb	r1, [r6, #0]
   149b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   149ba:	4288      	cmp	r0, r1
   149bc:	d10a      	bne.n	149d4 <ip_interface_sendto+0xa4>
   149be:	2a02      	cmp	r2, #2
   149c0:	f103 001c 	add.w	r0, r3, #28
   149c4:	f000 8101 	beq.w	14bca <ip_interface_sendto+0x29a>
   149c8:	2a0a      	cmp	r2, #10
   149ca:	d103      	bne.n	149d4 <ip_interface_sendto+0xa4>
   149cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   149ce:	2a24      	cmp	r2, #36	; 0x24
   149d0:	f000 80e8 	beq.w	14ba4 <ip_interface_sendto+0x274>
   149d4:	f04f 0a16 	mov.w	sl, #22
   149d8:	6818      	ldr	r0, [r3, #0]
   149da:	b110      	cbz	r0, 149e2 <ip_interface_sendto+0xb2>
   149dc:	f7fc fa34 	bl	10e48 <rpc_ip_client_data_free>
   149e0:	9b07      	ldr	r3, [sp, #28]
   149e2:	4618      	mov	r0, r3
   149e4:	f7fc fa28 	bl	10e38 <rpc_ip_client_message_free>
   149e8:	6823      	ldr	r3, [r4, #0]
   149ea:	031a      	lsls	r2, r3, #12
   149ec:	d43f      	bmi.n	14a6e <ip_interface_sendto+0x13e>
   149ee:	6823      	ldr	r3, [r4, #0]
   149f0:	b29b      	uxth	r3, r3
   149f2:	2b0d      	cmp	r3, #13
   149f4:	d007      	beq.n	14a06 <ip_interface_sendto+0xd6>
   149f6:	6823      	ldr	r3, [r4, #0]
   149f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   149fc:	6023      	str	r3, [r4, #0]
   149fe:	6823      	ldr	r3, [r4, #0]
   14a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14a04:	6023      	str	r3, [r4, #0]
   14a06:	f1ba 0f00 	cmp.w	sl, #0
   14a0a:	d130      	bne.n	14a6e <ip_interface_sendto+0x13e>
   14a0c:	6823      	ldr	r3, [r4, #0]
   14a0e:	0118      	lsls	r0, r3, #4
   14a10:	d576      	bpl.n	14b00 <ip_interface_sendto+0x1d0>
   14a12:	6823      	ldr	r3, [r4, #0]
   14a14:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   14a18:	6023      	str	r3, [r4, #0]
   14a1a:	9b00      	ldr	r3, [sp, #0]
   14a1c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14a20:	2800      	cmp	r0, #0
   14a22:	d12e      	bne.n	14a82 <ip_interface_sendto+0x152>
   14a24:	4628      	mov	r0, r5
   14a26:	b009      	add	sp, #36	; 0x24
   14a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a2c:	6822      	ldr	r2, [r4, #0]
   14a2e:	0091      	lsls	r1, r2, #2
   14a30:	d406      	bmi.n	14a40 <ip_interface_sendto+0x110>
   14a32:	2b01      	cmp	r3, #1
   14a34:	f000 80b0 	beq.w	14b98 <ip_interface_sendto+0x268>
   14a38:	6823      	ldr	r3, [r4, #0]
   14a3a:	031a      	lsls	r2, r3, #12
   14a3c:	f140 80d2 	bpl.w	14be4 <ip_interface_sendto+0x2b4>
   14a40:	6823      	ldr	r3, [r4, #0]
   14a42:	031b      	lsls	r3, r3, #12
   14a44:	f140 80d8 	bpl.w	14bf8 <ip_interface_sendto+0x2c8>
   14a48:	4b74      	ldr	r3, [pc, #464]	; (14c1c <ip_interface_sendto+0x2ec>)
   14a4a:	f8d4 a008 	ldr.w	sl, [r4, #8]
   14a4e:	9300      	str	r3, [sp, #0]
   14a50:	e7d9      	b.n	14a06 <ip_interface_sendto+0xd6>
   14a52:	9b00      	ldr	r3, [sp, #0]
   14a54:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14a58:	b108      	cbz	r0, 14a5e <ip_interface_sendto+0x12e>
   14a5a:	f7fc f9ed 	bl	10e38 <rpc_ip_client_message_free>
   14a5e:	9b03      	ldr	r3, [sp, #12]
   14a60:	2b00      	cmp	r3, #0
   14a62:	d192      	bne.n	1498a <ip_interface_sendto+0x5a>
   14a64:	6823      	ldr	r3, [r4, #0]
   14a66:	f04f 0a23 	mov.w	sl, #35	; 0x23
   14a6a:	031a      	lsls	r2, r3, #12
   14a6c:	d5bf      	bpl.n	149ee <ip_interface_sendto+0xbe>
   14a6e:	4650      	mov	r0, sl
   14a70:	f7fa fc5e 	bl	f330 <bsd_os_errno_set>
   14a74:	9b00      	ldr	r3, [sp, #0]
   14a76:	f04f 35ff 	mov.w	r5, #4294967295
   14a7a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14a7e:	2800      	cmp	r0, #0
   14a80:	d0d0      	beq.n	14a24 <ip_interface_sendto+0xf4>
   14a82:	f7fc f9d9 	bl	10e38 <rpc_ip_client_message_free>
   14a86:	2300      	movs	r3, #0
   14a88:	9a00      	ldr	r2, [sp, #0]
   14a8a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   14a8e:	4628      	mov	r0, r5
   14a90:	b009      	add	sp, #36	; 0x24
   14a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a96:	4642      	mov	r2, r8
   14a98:	f8c3 9014 	str.w	r9, [r3, #20]
   14a9c:	69a1      	ldr	r1, [r4, #24]
   14a9e:	9804      	ldr	r0, [sp, #16]
   14aa0:	6119      	str	r1, [r3, #16]
   14aa2:	9902      	ldr	r1, [sp, #8]
   14aa4:	4302      	orrs	r2, r0
   14aa6:	60da      	str	r2, [r3, #12]
   14aa8:	605d      	str	r5, [r3, #4]
   14aaa:	b119      	cbz	r1, 14ab4 <ip_interface_sendto+0x184>
   14aac:	6818      	ldr	r0, [r3, #0]
   14aae:	462a      	mov	r2, r5
   14ab0:	f007 fcd9 	bl	1c466 <memcpy>
   14ab4:	6823      	ldr	r3, [r4, #0]
   14ab6:	4641      	mov	r1, r8
   14ab8:	9305      	str	r3, [sp, #20]
   14aba:	6823      	ldr	r3, [r4, #0]
   14abc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14ac0:	6023      	str	r3, [r4, #0]
   14ac2:	6823      	ldr	r3, [r4, #0]
   14ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   14ac8:	6023      	str	r3, [r4, #0]
   14aca:	9b07      	ldr	r3, [sp, #28]
   14acc:	4618      	mov	r0, r3
   14ace:	9301      	str	r3, [sp, #4]
   14ad0:	f7fc f99c 	bl	10e0c <rpc_ip_client_request_send>
   14ad4:	9b01      	ldr	r3, [sp, #4]
   14ad6:	4682      	mov	sl, r0
   14ad8:	b9e8      	cbnz	r0, 14b16 <ip_interface_sendto+0x1e6>
   14ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   14ade:	f04f 33ff 	mov.w	r3, #4294967295
   14ae2:	4611      	mov	r1, r2
   14ae4:	4638      	mov	r0, r7
   14ae6:	f001 f9ed 	bl	15ec4 <interface_socket_wait>
   14aea:	b308      	cbz	r0, 14b30 <ip_interface_sendto+0x200>
   14aec:	6823      	ldr	r3, [r4, #0]
   14aee:	0319      	lsls	r1, r3, #12
   14af0:	d42a      	bmi.n	14b48 <ip_interface_sendto+0x218>
   14af2:	280c      	cmp	r0, #12
   14af4:	d0ad      	beq.n	14a52 <ip_interface_sendto+0x122>
   14af6:	4682      	mov	sl, r0
   14af8:	e776      	b.n	149e8 <ip_interface_sendto+0xb8>
   14afa:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   14afe:	e76b      	b.n	149d8 <ip_interface_sendto+0xa8>
   14b00:	9b00      	ldr	r3, [sp, #0]
   14b02:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14b06:	6985      	ldr	r5, [r0, #24]
   14b08:	f7fc f996 	bl	10e38 <rpc_ip_client_message_free>
   14b0c:	2300      	movs	r3, #0
   14b0e:	9a00      	ldr	r2, [sp, #0]
   14b10:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   14b14:	e7bb      	b.n	14a8e <ip_interface_sendto+0x15e>
   14b16:	6818      	ldr	r0, [r3, #0]
   14b18:	469a      	mov	sl, r3
   14b1a:	b108      	cbz	r0, 14b20 <ip_interface_sendto+0x1f0>
   14b1c:	f7fc f994 	bl	10e48 <rpc_ip_client_data_free>
   14b20:	4650      	mov	r0, sl
   14b22:	f7fc f989 	bl	10e38 <rpc_ip_client_message_free>
   14b26:	9b05      	ldr	r3, [sp, #20]
   14b28:	f04f 0a23 	mov.w	sl, #35	; 0x23
   14b2c:	6023      	str	r3, [r4, #0]
   14b2e:	e75b      	b.n	149e8 <ip_interface_sendto+0xb8>
   14b30:	4638      	mov	r0, r7
   14b32:	f001 fa3b 	bl	15fac <interface_socket_from_handle_get>
   14b36:	4603      	mov	r3, r0
   14b38:	b1e0      	cbz	r0, 14b74 <ip_interface_sendto+0x244>
   14b3a:	6840      	ldr	r0, [r0, #4]
   14b3c:	b1d0      	cbz	r0, 14b74 <ip_interface_sendto+0x244>
   14b3e:	f8c3 a004 	str.w	sl, [r3, #4]
   14b42:	6823      	ldr	r3, [r4, #0]
   14b44:	0319      	lsls	r1, r3, #12
   14b46:	d5d4      	bpl.n	14af2 <ip_interface_sendto+0x1c2>
   14b48:	f8d4 a008 	ldr.w	sl, [r4, #8]
   14b4c:	6823      	ldr	r3, [r4, #0]
   14b4e:	031e      	lsls	r6, r3, #12
   14b50:	f57f af4d 	bpl.w	149ee <ip_interface_sendto+0xbe>
   14b54:	e757      	b.n	14a06 <ip_interface_sendto+0xd6>
   14b56:	2e00      	cmp	r6, #0
   14b58:	f43f af02 	beq.w	14960 <ip_interface_sendto+0x30>
   14b5c:	4b2f      	ldr	r3, [pc, #188]	; (14c1c <ip_interface_sendto+0x2ec>)
   14b5e:	f04f 0a38 	mov.w	sl, #56	; 0x38
   14b62:	9300      	str	r3, [sp, #0]
   14b64:	e783      	b.n	14a6e <ip_interface_sendto+0x13e>
   14b66:	6823      	ldr	r3, [r4, #0]
   14b68:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   14b6c:	f3c3 7300 	ubfx	r3, r3, #28, #1
   14b70:	9303      	str	r3, [sp, #12]
   14b72:	e702      	b.n	1497a <ip_interface_sendto+0x4a>
   14b74:	6823      	ldr	r3, [r4, #0]
   14b76:	031b      	lsls	r3, r3, #12
   14b78:	f53f af48 	bmi.w	14a0c <ip_interface_sendto+0xdc>
   14b7c:	6823      	ldr	r3, [r4, #0]
   14b7e:	b29b      	uxth	r3, r3
   14b80:	2b0d      	cmp	r3, #13
   14b82:	f43f af43 	beq.w	14a0c <ip_interface_sendto+0xdc>
   14b86:	6823      	ldr	r3, [r4, #0]
   14b88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   14b8c:	6023      	str	r3, [r4, #0]
   14b8e:	6823      	ldr	r3, [r4, #0]
   14b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14b94:	6023      	str	r3, [r4, #0]
   14b96:	e739      	b.n	14a0c <ip_interface_sendto+0xdc>
   14b98:	6823      	ldr	r3, [r4, #0]
   14b9a:	b29b      	uxth	r3, r3
   14b9c:	2b05      	cmp	r3, #5
   14b9e:	f47f af4f 	bne.w	14a40 <ip_interface_sendto+0x110>
   14ba2:	e749      	b.n	14a38 <ip_interface_sendto+0x108>
   14ba4:	2210      	movs	r2, #16
   14ba6:	8931      	ldrh	r1, [r6, #8]
   14ba8:	835a      	strh	r2, [r3, #26]
   14baa:	8319      	strh	r1, [r3, #24]
   14bac:	18b1      	adds	r1, r6, r2
   14bae:	f007 fc5a 	bl	1c466 <memcpy>
   14bb2:	f247 0207 	movw	r2, #28679	; 0x7007
   14bb6:	9b07      	ldr	r3, [sp, #28]
   14bb8:	4690      	mov	r8, r2
   14bba:	6899      	ldr	r1, [r3, #8]
   14bbc:	8b58      	ldrh	r0, [r3, #26]
   14bbe:	3104      	adds	r1, #4
   14bc0:	4401      	add	r1, r0
   14bc2:	f8c3 9014 	str.w	r9, [r3, #20]
   14bc6:	6099      	str	r1, [r3, #8]
   14bc8:	e768      	b.n	14a9c <ip_interface_sendto+0x16c>
   14bca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14bcc:	2a10      	cmp	r2, #16
   14bce:	f47f af01 	bne.w	149d4 <ip_interface_sendto+0xa4>
   14bd2:	2204      	movs	r2, #4
   14bd4:	8931      	ldrh	r1, [r6, #8]
   14bd6:	835a      	strh	r2, [r3, #26]
   14bd8:	8319      	strh	r1, [r3, #24]
   14bda:	f106 010c 	add.w	r1, r6, #12
   14bde:	f007 fc42 	bl	1c466 <memcpy>
   14be2:	e7e6      	b.n	14bb2 <ip_interface_sendto+0x282>
   14be4:	4b0d      	ldr	r3, [pc, #52]	; (14c1c <ip_interface_sendto+0x2ec>)
   14be6:	f04f 0a23 	mov.w	sl, #35	; 0x23
   14bea:	9300      	str	r3, [sp, #0]
   14bec:	e73f      	b.n	14a6e <ip_interface_sendto+0x13e>
   14bee:	4b0b      	ldr	r3, [pc, #44]	; (14c1c <ip_interface_sendto+0x2ec>)
   14bf0:	f04f 0a28 	mov.w	sl, #40	; 0x28
   14bf4:	9300      	str	r3, [sp, #0]
   14bf6:	e73a      	b.n	14a6e <ip_interface_sendto+0x13e>
   14bf8:	4b08      	ldr	r3, [pc, #32]	; (14c1c <ip_interface_sendto+0x2ec>)
   14bfa:	f04f 0a39 	mov.w	sl, #57	; 0x39
   14bfe:	9300      	str	r3, [sp, #0]
   14c00:	e735      	b.n	14a6e <ip_interface_sendto+0x13e>
   14c02:	4b06      	ldr	r3, [pc, #24]	; (14c1c <ip_interface_sendto+0x2ec>)
   14c04:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   14c08:	9300      	str	r3, [sp, #0]
   14c0a:	e730      	b.n	14a6e <ip_interface_sendto+0x13e>
   14c0c:	4b03      	ldr	r3, [pc, #12]	; (14c1c <ip_interface_sendto+0x2ec>)
   14c0e:	f04f 0a09 	mov.w	sl, #9
   14c12:	9300      	str	r3, [sp, #0]
   14c14:	e72b      	b.n	14a6e <ip_interface_sendto+0x13e>
   14c16:	f04f 0a0c 	mov.w	sl, #12
   14c1a:	e6e5      	b.n	149e8 <ip_interface_sendto+0xb8>
   14c1c:	20020770 	.word	0x20020770

00014c20 <ip_interface_recvfrom>:
   14c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c24:	b085      	sub	sp, #20
   14c26:	2a00      	cmp	r2, #0
   14c28:	f000 811b 	beq.w	14e62 <ip_interface_recvfrom+0x242>
   14c2c:	4605      	mov	r5, r0
   14c2e:	468a      	mov	sl, r1
   14c30:	4698      	mov	r8, r3
   14c32:	4617      	mov	r7, r2
   14c34:	b11b      	cbz	r3, 14c3e <ip_interface_recvfrom+0x1e>
   14c36:	f013 0f1a 	tst.w	r3, #26
   14c3a:	f000 810f 	beq.w	14e5c <ip_interface_recvfrom+0x23c>
   14c3e:	4628      	mov	r0, r5
   14c40:	f001 f9b4 	bl	15fac <interface_socket_from_handle_get>
   14c44:	4604      	mov	r4, r0
   14c46:	2800      	cmp	r0, #0
   14c48:	f000 810e 	beq.w	14e68 <ip_interface_recvfrom+0x248>
   14c4c:	6803      	ldr	r3, [r0, #0]
   14c4e:	02d9      	lsls	r1, r3, #11
   14c50:	d564      	bpl.n	14d1c <ip_interface_recvfrom+0xfc>
   14c52:	f018 0f02 	tst.w	r8, #2
   14c56:	bf18      	it	ne
   14c58:	f04f 0900 	movne.w	r9, #0
   14c5c:	f04f 3bff 	mov.w	fp, #4294967295
   14c60:	bf08      	it	eq
   14c62:	6803      	ldreq	r3, [r0, #0]
   14c64:	f008 0610 	and.w	r6, r8, #16
   14c68:	bf04      	itt	eq
   14c6a:	f083 5980 	eoreq.w	r9, r3, #268435456	; 0x10000000
   14c6e:	f3c9 7900 	ubfxeq	r9, r9, #28, #1
   14c72:	6823      	ldr	r3, [r4, #0]
   14c74:	03da      	lsls	r2, r3, #15
   14c76:	d56c      	bpl.n	14d52 <ip_interface_recvfrom+0x132>
   14c78:	6823      	ldr	r3, [r4, #0]
   14c7a:	69e0      	ldr	r0, [r4, #28]
   14c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   14c80:	6023      	str	r3, [r4, #0]
   14c82:	6803      	ldr	r3, [r0, #0]
   14c84:	68db      	ldr	r3, [r3, #12]
   14c86:	4798      	blx	r3
   14c88:	f1b0 3fff 	cmp.w	r0, #4294967295
   14c8c:	4683      	mov	fp, r0
   14c8e:	d07f      	beq.n	14d90 <ip_interface_recvfrom+0x170>
   14c90:	4287      	cmp	r7, r0
   14c92:	dd03      	ble.n	14c9c <ip_interface_recvfrom+0x7c>
   14c94:	6923      	ldr	r3, [r4, #16]
   14c96:	2b01      	cmp	r3, #1
   14c98:	f000 80a6 	beq.w	14de8 <ip_interface_recvfrom+0x1c8>
   14c9c:	2600      	movs	r6, #0
   14c9e:	69e0      	ldr	r0, [r4, #28]
   14ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14ca2:	b103      	cbz	r3, 14ca6 <ip_interface_recvfrom+0x86>
   14ca4:	681b      	ldr	r3, [r3, #0]
   14ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14ca8:	e9cd a700 	strd	sl, r7, [sp]
   14cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14cb0:	6803      	ldr	r3, [r0, #0]
   14cb2:	4642      	mov	r2, r8
   14cb4:	689b      	ldr	r3, [r3, #8]
   14cb6:	4669      	mov	r1, sp
   14cb8:	4798      	blx	r3
   14cba:	4683      	mov	fp, r0
   14cbc:	69e0      	ldr	r0, [r4, #28]
   14cbe:	f1bb 3fff 	cmp.w	fp, #4294967295
   14cc2:	6803      	ldr	r3, [r0, #0]
   14cc4:	bf18      	it	ne
   14cc6:	2501      	movne	r5, #1
   14cc8:	68db      	ldr	r3, [r3, #12]
   14cca:	bf0a      	itet	eq
   14ccc:	2500      	moveq	r5, #0
   14cce:	f04f 0900 	movne.w	r9, #0
   14cd2:	f04f 0923 	moveq.w	r9, #35	; 0x23
   14cd6:	4798      	blx	r3
   14cd8:	3001      	adds	r0, #1
   14cda:	d135      	bne.n	14d48 <ip_interface_recvfrom+0x128>
   14cdc:	2e00      	cmp	r6, #0
   14cde:	f000 80b5 	beq.w	14e4c <ip_interface_recvfrom+0x22c>
   14ce2:	2d00      	cmp	r5, #0
   14ce4:	f000 80a5 	beq.w	14e32 <ip_interface_recvfrom+0x212>
   14ce8:	6823      	ldr	r3, [r4, #0]
   14cea:	0319      	lsls	r1, r3, #12
   14cec:	d506      	bpl.n	14cfc <ip_interface_recvfrom+0xdc>
   14cee:	6823      	ldr	r3, [r4, #0]
   14cf0:	b29b      	uxth	r3, r3
   14cf2:	2b0d      	cmp	r3, #13
   14cf4:	d002      	beq.n	14cfc <ip_interface_recvfrom+0xdc>
   14cf6:	6923      	ldr	r3, [r4, #16]
   14cf8:	2b01      	cmp	r3, #1
   14cfa:	d025      	beq.n	14d48 <ip_interface_recvfrom+0x128>
   14cfc:	6823      	ldr	r3, [r4, #0]
   14cfe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   14d02:	6823      	ldr	r3, [r4, #0]
   14d04:	f040 80b3 	bne.w	14e6e <ip_interface_recvfrom+0x24e>
   14d08:	031a      	lsls	r2, r3, #12
   14d0a:	d474      	bmi.n	14df6 <ip_interface_recvfrom+0x1d6>
   14d0c:	f1b9 0f00 	cmp.w	r9, #0
   14d10:	f040 8089 	bne.w	14e26 <ip_interface_recvfrom+0x206>
   14d14:	4658      	mov	r0, fp
   14d16:	b005      	add	sp, #20
   14d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d1c:	6803      	ldr	r3, [r0, #0]
   14d1e:	b29b      	uxth	r3, r3
   14d20:	2b06      	cmp	r3, #6
   14d22:	d072      	beq.n	14e0a <ip_interface_recvfrom+0x1ea>
   14d24:	6803      	ldr	r3, [r0, #0]
   14d26:	b29b      	uxth	r3, r3
   14d28:	2b07      	cmp	r3, #7
   14d2a:	bf0c      	ite	eq
   14d2c:	f04f 0909 	moveq.w	r9, #9
   14d30:	f04f 0939 	movne.w	r9, #57	; 0x39
   14d34:	69e0      	ldr	r0, [r4, #28]
   14d36:	6803      	ldr	r3, [r0, #0]
   14d38:	68db      	ldr	r3, [r3, #12]
   14d3a:	4798      	blx	r3
   14d3c:	f1b0 3fff 	cmp.w	r0, #4294967295
   14d40:	4683      	mov	fp, r0
   14d42:	d0db      	beq.n	14cfc <ip_interface_recvfrom+0xdc>
   14d44:	f04f 3bff 	mov.w	fp, #4294967295
   14d48:	6823      	ldr	r3, [r4, #0]
   14d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14d4e:	6023      	str	r3, [r4, #0]
   14d50:	e7dc      	b.n	14d0c <ip_interface_recvfrom+0xec>
   14d52:	f1b9 0f00 	cmp.w	r9, #0
   14d56:	d07d      	beq.n	14e54 <ip_interface_recvfrom+0x234>
   14d58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14d5c:	6a23      	ldr	r3, [r4, #32]
   14d5e:	4611      	mov	r1, r2
   14d60:	2b00      	cmp	r3, #0
   14d62:	bf08      	it	eq
   14d64:	f04f 33ff 	moveq.w	r3, #4294967295
   14d68:	4628      	mov	r0, r5
   14d6a:	f001 f8ab 	bl	15ec4 <interface_socket_wait>
   14d6e:	4681      	mov	r9, r0
   14d70:	b358      	cbz	r0, 14dca <ip_interface_recvfrom+0x1aa>
   14d72:	6823      	ldr	r3, [r4, #0]
   14d74:	69e0      	ldr	r0, [r4, #28]
   14d76:	031b      	lsls	r3, r3, #12
   14d78:	d521      	bpl.n	14dbe <ip_interface_recvfrom+0x19e>
   14d7a:	6823      	ldr	r3, [r4, #0]
   14d7c:	b29b      	uxth	r3, r3
   14d7e:	2b0d      	cmp	r3, #13
   14d80:	d01d      	beq.n	14dbe <ip_interface_recvfrom+0x19e>
   14d82:	6926      	ldr	r6, [r4, #16]
   14d84:	f1a6 0601 	sub.w	r6, r6, #1
   14d88:	fab6 f686 	clz	r6, r6
   14d8c:	0976      	lsrs	r6, r6, #5
   14d8e:	e787      	b.n	14ca0 <ip_interface_recvfrom+0x80>
   14d90:	6823      	ldr	r3, [r4, #0]
   14d92:	0318      	lsls	r0, r3, #12
   14d94:	d5dd      	bpl.n	14d52 <ip_interface_recvfrom+0x132>
   14d96:	6823      	ldr	r3, [r4, #0]
   14d98:	b29b      	uxth	r3, r3
   14d9a:	2b0d      	cmp	r3, #13
   14d9c:	d0d9      	beq.n	14d52 <ip_interface_recvfrom+0x132>
   14d9e:	6923      	ldr	r3, [r4, #16]
   14da0:	69e0      	ldr	r0, [r4, #28]
   14da2:	2b01      	cmp	r3, #1
   14da4:	d034      	beq.n	14e10 <ip_interface_recvfrom+0x1f0>
   14da6:	f04f 0939 	mov.w	r9, #57	; 0x39
   14daa:	6823      	ldr	r3, [r4, #0]
   14dac:	0c1b      	lsrs	r3, r3, #16
   14dae:	041b      	lsls	r3, r3, #16
   14db0:	f043 030d 	orr.w	r3, r3, #13
   14db4:	6023      	str	r3, [r4, #0]
   14db6:	6823      	ldr	r3, [r4, #0]
   14db8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14dbc:	6023      	str	r3, [r4, #0]
   14dbe:	6803      	ldr	r3, [r0, #0]
   14dc0:	68db      	ldr	r3, [r3, #12]
   14dc2:	4798      	blx	r3
   14dc4:	3001      	adds	r0, #1
   14dc6:	d1bf      	bne.n	14d48 <ip_interface_recvfrom+0x128>
   14dc8:	e798      	b.n	14cfc <ip_interface_recvfrom+0xdc>
   14dca:	4628      	mov	r0, r5
   14dcc:	f001 f8ee 	bl	15fac <interface_socket_from_handle_get>
   14dd0:	b138      	cbz	r0, 14de2 <ip_interface_recvfrom+0x1c2>
   14dd2:	f8d0 9004 	ldr.w	r9, [r0, #4]
   14dd6:	f1b9 0f00 	cmp.w	r9, #0
   14dda:	d002      	beq.n	14de2 <ip_interface_recvfrom+0x1c2>
   14ddc:	2300      	movs	r3, #0
   14dde:	6043      	str	r3, [r0, #4]
   14de0:	e7c7      	b.n	14d72 <ip_interface_recvfrom+0x152>
   14de2:	f04f 0901 	mov.w	r9, #1
   14de6:	e744      	b.n	14c72 <ip_interface_recvfrom+0x52>
   14de8:	b11e      	cbz	r6, 14df2 <ip_interface_recvfrom+0x1d2>
   14dea:	6823      	ldr	r3, [r4, #0]
   14dec:	00db      	lsls	r3, r3, #3
   14dee:	d5b3      	bpl.n	14d58 <ip_interface_recvfrom+0x138>
   14df0:	e754      	b.n	14c9c <ip_interface_recvfrom+0x7c>
   14df2:	69e0      	ldr	r0, [r4, #28]
   14df4:	e754      	b.n	14ca0 <ip_interface_recvfrom+0x80>
   14df6:	6823      	ldr	r3, [r4, #0]
   14df8:	b29b      	uxth	r3, r3
   14dfa:	2b0d      	cmp	r3, #13
   14dfc:	d186      	bne.n	14d0c <ip_interface_recvfrom+0xec>
   14dfe:	68a3      	ldr	r3, [r4, #8]
   14e00:	2b00      	cmp	r3, #0
   14e02:	d083      	beq.n	14d0c <ip_interface_recvfrom+0xec>
   14e04:	f8d4 9008 	ldr.w	r9, [r4, #8]
   14e08:	e780      	b.n	14d0c <ip_interface_recvfrom+0xec>
   14e0a:	f04f 0909 	mov.w	r9, #9
   14e0e:	e791      	b.n	14d34 <ip_interface_recvfrom+0x114>
   14e10:	6803      	ldr	r3, [r0, #0]
   14e12:	68db      	ldr	r3, [r3, #12]
   14e14:	4798      	blx	r3
   14e16:	3001      	adds	r0, #1
   14e18:	d00b      	beq.n	14e32 <ip_interface_recvfrom+0x212>
   14e1a:	f04f 0923 	mov.w	r9, #35	; 0x23
   14e1e:	6823      	ldr	r3, [r4, #0]
   14e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14e24:	6023      	str	r3, [r4, #0]
   14e26:	4648      	mov	r0, r9
   14e28:	f7fa fa82 	bl	f330 <bsd_os_errno_set>
   14e2c:	f04f 3bff 	mov.w	fp, #4294967295
   14e30:	e770      	b.n	14d14 <ip_interface_recvfrom+0xf4>
   14e32:	6823      	ldr	r3, [r4, #0]
   14e34:	f04f 0b00 	mov.w	fp, #0
   14e38:	0c1b      	lsrs	r3, r3, #16
   14e3a:	041b      	lsls	r3, r3, #16
   14e3c:	f043 030d 	orr.w	r3, r3, #13
   14e40:	6023      	str	r3, [r4, #0]
   14e42:	6823      	ldr	r3, [r4, #0]
   14e44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14e48:	6023      	str	r3, [r4, #0]
   14e4a:	e763      	b.n	14d14 <ip_interface_recvfrom+0xf4>
   14e4c:	2d00      	cmp	r5, #0
   14e4e:	f47f af4b 	bne.w	14ce8 <ip_interface_recvfrom+0xc8>
   14e52:	e753      	b.n	14cfc <ip_interface_recvfrom+0xdc>
   14e54:	f04f 0923 	mov.w	r9, #35	; 0x23
   14e58:	69e0      	ldr	r0, [r4, #28]
   14e5a:	e7b0      	b.n	14dbe <ip_interface_recvfrom+0x19e>
   14e5c:	f04f 092d 	mov.w	r9, #45	; 0x2d
   14e60:	e7e1      	b.n	14e26 <ip_interface_recvfrom+0x206>
   14e62:	f04f 0916 	mov.w	r9, #22
   14e66:	e7de      	b.n	14e26 <ip_interface_recvfrom+0x206>
   14e68:	f04f 0909 	mov.w	r9, #9
   14e6c:	e7db      	b.n	14e26 <ip_interface_recvfrom+0x206>
   14e6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   14e72:	6023      	str	r3, [r4, #0]
   14e74:	6823      	ldr	r3, [r4, #0]
   14e76:	f04f 0969 	mov.w	r9, #105	; 0x69
   14e7a:	0c1b      	lsrs	r3, r3, #16
   14e7c:	041b      	lsls	r3, r3, #16
   14e7e:	f043 030d 	orr.w	r3, r3, #13
   14e82:	6023      	str	r3, [r4, #0]
   14e84:	e7cf      	b.n	14e26 <ip_interface_recvfrom+0x206>
   14e86:	bf00      	nop

00014e88 <ip_interface_connect>:
   14e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14e8c:	b083      	sub	sp, #12
   14e8e:	2900      	cmp	r1, #0
   14e90:	d049      	beq.n	14f26 <ip_interface_connect+0x9e>
   14e92:	4616      	mov	r6, r2
   14e94:	2a00      	cmp	r2, #0
   14e96:	d046      	beq.n	14f26 <ip_interface_connect+0x9e>
   14e98:	4607      	mov	r7, r0
   14e9a:	4688      	mov	r8, r1
   14e9c:	f001 f886 	bl	15fac <interface_socket_from_handle_get>
   14ea0:	4605      	mov	r5, r0
   14ea2:	2800      	cmp	r0, #0
   14ea4:	f000 80a8 	beq.w	14ff8 <ip_interface_connect+0x170>
   14ea8:	6803      	ldr	r3, [r0, #0]
   14eaa:	b29b      	uxth	r3, r3
   14eac:	2b02      	cmp	r3, #2
   14eae:	d004      	beq.n	14eba <ip_interface_connect+0x32>
   14eb0:	6803      	ldr	r3, [r0, #0]
   14eb2:	b29b      	uxth	r3, r3
   14eb4:	2b04      	cmp	r3, #4
   14eb6:	f040 808b 	bne.w	14fd0 <ip_interface_connect+0x148>
   14eba:	6829      	ldr	r1, [r5, #0]
   14ebc:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   14ec0:	f040 8082 	bne.w	14fc8 <ip_interface_connect+0x140>
   14ec4:	a802      	add	r0, sp, #8
   14ec6:	f840 1d04 	str.w	r1, [r0, #-4]!
   14eca:	f8d5 9018 	ldr.w	r9, [r5, #24]
   14ece:	f7fb ff89 	bl	10de4 <rpc_ip_client_request_alloc>
   14ed2:	bb90      	cbnz	r0, 14f3a <ip_interface_connect+0xb2>
   14ed4:	2108      	movs	r1, #8
   14ed6:	043b      	lsls	r3, r7, #16
   14ed8:	9c01      	ldr	r4, [sp, #4]
   14eda:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   14ede:	f042 0202 	orr.w	r2, r2, #2
   14ee2:	60e2      	str	r2, [r4, #12]
   14ee4:	f8c4 9010 	str.w	r9, [r4, #16]
   14ee8:	7260      	strb	r0, [r4, #9]
   14eea:	72a0      	strb	r0, [r4, #10]
   14eec:	72e0      	strb	r0, [r4, #11]
   14eee:	7221      	strb	r1, [r4, #8]
   14ef0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   14ef4:	f043 0302 	orr.w	r3, r3, #2
   14ef8:	60e3      	str	r3, [r4, #12]
   14efa:	68a3      	ldr	r3, [r4, #8]
   14efc:	69aa      	ldr	r2, [r5, #24]
   14efe:	3304      	adds	r3, #4
   14f00:	6122      	str	r2, [r4, #16]
   14f02:	60a3      	str	r3, [r4, #8]
   14f04:	68eb      	ldr	r3, [r5, #12]
   14f06:	f8d8 2004 	ldr.w	r2, [r8, #4]
   14f0a:	4293      	cmp	r3, r2
   14f0c:	d11a      	bne.n	14f44 <ip_interface_connect+0xbc>
   14f0e:	f898 2000 	ldrb.w	r2, [r8]
   14f12:	4296      	cmp	r6, r2
   14f14:	d107      	bne.n	14f26 <ip_interface_connect+0x9e>
   14f16:	2b02      	cmp	r3, #2
   14f18:	f104 0018 	add.w	r0, r4, #24
   14f1c:	d014      	beq.n	14f48 <ip_interface_connect+0xc0>
   14f1e:	2b0a      	cmp	r3, #10
   14f20:	d101      	bne.n	14f26 <ip_interface_connect+0x9e>
   14f22:	2e24      	cmp	r6, #36	; 0x24
   14f24:	d01c      	beq.n	14f60 <ip_interface_connect+0xd8>
   14f26:	2416      	movs	r4, #22
   14f28:	4620      	mov	r0, r4
   14f2a:	f7fa fa01 	bl	f330 <bsd_os_errno_set>
   14f2e:	f04f 34ff 	mov.w	r4, #4294967295
   14f32:	4620      	mov	r0, r4
   14f34:	b003      	add	sp, #12
   14f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14f3a:	9c01      	ldr	r4, [sp, #4]
   14f3c:	2c00      	cmp	r4, #0
   14f3e:	d059      	beq.n	14ff4 <ip_interface_connect+0x16c>
   14f40:	043b      	lsls	r3, r7, #16
   14f42:	e7d5      	b.n	14ef0 <ip_interface_connect+0x68>
   14f44:	242f      	movs	r4, #47	; 0x2f
   14f46:	e7ef      	b.n	14f28 <ip_interface_connect+0xa0>
   14f48:	2e10      	cmp	r6, #16
   14f4a:	d1ec      	bne.n	14f26 <ip_interface_connect+0x9e>
   14f4c:	2204      	movs	r2, #4
   14f4e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   14f52:	f108 010c 	add.w	r1, r8, #12
   14f56:	82e2      	strh	r2, [r4, #22]
   14f58:	82a3      	strh	r3, [r4, #20]
   14f5a:	f007 fa84 	bl	1c466 <memcpy>
   14f5e:	e008      	b.n	14f72 <ip_interface_connect+0xea>
   14f60:	2210      	movs	r2, #16
   14f62:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   14f66:	eb08 0102 	add.w	r1, r8, r2
   14f6a:	82e2      	strh	r2, [r4, #22]
   14f6c:	82a3      	strh	r3, [r4, #20]
   14f6e:	f007 fa7a 	bl	1c466 <memcpy>
   14f72:	68a3      	ldr	r3, [r4, #8]
   14f74:	8ae2      	ldrh	r2, [r4, #22]
   14f76:	f247 0102 	movw	r1, #28674	; 0x7002
   14f7a:	4413      	add	r3, r2
   14f7c:	60a3      	str	r3, [r4, #8]
   14f7e:	682e      	ldr	r6, [r5, #0]
   14f80:	682b      	ldr	r3, [r5, #0]
   14f82:	4620      	mov	r0, r4
   14f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   14f88:	602b      	str	r3, [r5, #0]
   14f8a:	f7fb ff3f 	bl	10e0c <rpc_ip_client_request_send>
   14f8e:	b988      	cbnz	r0, 14fb4 <ip_interface_connect+0x12c>
   14f90:	682b      	ldr	r3, [r5, #0]
   14f92:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   14f96:	d119      	bne.n	14fcc <ip_interface_connect+0x144>
   14f98:	f04f 33ff 	mov.w	r3, #4294967295
   14f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14fa0:	2105      	movs	r1, #5
   14fa2:	4638      	mov	r0, r7
   14fa4:	f000 ff8e 	bl	15ec4 <interface_socket_wait>
   14fa8:	4604      	mov	r4, r0
   14faa:	b1c0      	cbz	r0, 14fde <ip_interface_connect+0x156>
   14fac:	2c73      	cmp	r4, #115	; 0x73
   14fae:	d0bb      	beq.n	14f28 <ip_interface_connect+0xa0>
   14fb0:	602e      	str	r6, [r5, #0]
   14fb2:	e7b9      	b.n	14f28 <ip_interface_connect+0xa0>
   14fb4:	6820      	ldr	r0, [r4, #0]
   14fb6:	b108      	cbz	r0, 14fbc <ip_interface_connect+0x134>
   14fb8:	f7fb ff46 	bl	10e48 <rpc_ip_client_data_free>
   14fbc:	4620      	mov	r0, r4
   14fbe:	f7fb ff3b 	bl	10e38 <rpc_ip_client_message_free>
   14fc2:	2423      	movs	r4, #35	; 0x23
   14fc4:	602e      	str	r6, [r5, #0]
   14fc6:	e7af      	b.n	14f28 <ip_interface_connect+0xa0>
   14fc8:	2472      	movs	r4, #114	; 0x72
   14fca:	e7ad      	b.n	14f28 <ip_interface_connect+0xa0>
   14fcc:	2473      	movs	r4, #115	; 0x73
   14fce:	e7ab      	b.n	14f28 <ip_interface_connect+0xa0>
   14fd0:	6803      	ldr	r3, [r0, #0]
   14fd2:	b29b      	uxth	r3, r3
   14fd4:	2b05      	cmp	r3, #5
   14fd6:	bf14      	ite	ne
   14fd8:	2409      	movne	r4, #9
   14fda:	2438      	moveq	r4, #56	; 0x38
   14fdc:	e7a4      	b.n	14f28 <ip_interface_connect+0xa0>
   14fde:	4638      	mov	r0, r7
   14fe0:	f000 ffe4 	bl	15fac <interface_socket_from_handle_get>
   14fe4:	2800      	cmp	r0, #0
   14fe6:	d0a4      	beq.n	14f32 <ip_interface_connect+0xaa>
   14fe8:	6844      	ldr	r4, [r0, #4]
   14fea:	2c00      	cmp	r4, #0
   14fec:	d0a1      	beq.n	14f32 <ip_interface_connect+0xaa>
   14fee:	f8c0 8004 	str.w	r8, [r0, #4]
   14ff2:	e7db      	b.n	14fac <ip_interface_connect+0x124>
   14ff4:	240c      	movs	r4, #12
   14ff6:	e797      	b.n	14f28 <ip_interface_connect+0xa0>
   14ff8:	2409      	movs	r4, #9
   14ffa:	e795      	b.n	14f28 <ip_interface_connect+0xa0>

00014ffc <ip_interface_bind>:
   14ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15000:	b083      	sub	sp, #12
   15002:	b3b1      	cbz	r1, 15072 <ip_interface_bind+0x76>
   15004:	4616      	mov	r6, r2
   15006:	b3a2      	cbz	r2, 15072 <ip_interface_bind+0x76>
   15008:	4607      	mov	r7, r0
   1500a:	4688      	mov	r8, r1
   1500c:	f000 ffce 	bl	15fac <interface_socket_from_handle_get>
   15010:	4605      	mov	r5, r0
   15012:	2800      	cmp	r0, #0
   15014:	d04a      	beq.n	150ac <ip_interface_bind+0xb0>
   15016:	6803      	ldr	r3, [r0, #0]
   15018:	b29b      	uxth	r3, r3
   1501a:	2b02      	cmp	r3, #2
   1501c:	d146      	bne.n	150ac <ip_interface_bind+0xb0>
   1501e:	2100      	movs	r1, #0
   15020:	a802      	add	r0, sp, #8
   15022:	f840 1d04 	str.w	r1, [r0, #-4]!
   15026:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1502a:	f7fb fedb 	bl	10de4 <rpc_ip_client_request_alloc>
   1502e:	bb50      	cbnz	r0, 15086 <ip_interface_bind+0x8a>
   15030:	f247 0305 	movw	r3, #28677	; 0x7005
   15034:	2208      	movs	r2, #8
   15036:	9c01      	ldr	r4, [sp, #4]
   15038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1503c:	60e3      	str	r3, [r4, #12]
   1503e:	f8c4 9010 	str.w	r9, [r4, #16]
   15042:	7260      	strb	r0, [r4, #9]
   15044:	72a0      	strb	r0, [r4, #10]
   15046:	72e0      	strb	r0, [r4, #11]
   15048:	7222      	strb	r2, [r4, #8]
   1504a:	68a3      	ldr	r3, [r4, #8]
   1504c:	3304      	adds	r3, #4
   1504e:	60a3      	str	r3, [r4, #8]
   15050:	68eb      	ldr	r3, [r5, #12]
   15052:	f8d8 2004 	ldr.w	r2, [r8, #4]
   15056:	4293      	cmp	r3, r2
   15058:	d11a      	bne.n	15090 <ip_interface_bind+0x94>
   1505a:	f898 2000 	ldrb.w	r2, [r8]
   1505e:	4296      	cmp	r6, r2
   15060:	d107      	bne.n	15072 <ip_interface_bind+0x76>
   15062:	2b02      	cmp	r3, #2
   15064:	f104 0018 	add.w	r0, r4, #24
   15068:	d014      	beq.n	15094 <ip_interface_bind+0x98>
   1506a:	2b0a      	cmp	r3, #10
   1506c:	d101      	bne.n	15072 <ip_interface_bind+0x76>
   1506e:	2e24      	cmp	r6, #36	; 0x24
   15070:	d01e      	beq.n	150b0 <ip_interface_bind+0xb4>
   15072:	2416      	movs	r4, #22
   15074:	4620      	mov	r0, r4
   15076:	f7fa f95b 	bl	f330 <bsd_os_errno_set>
   1507a:	f04f 34ff 	mov.w	r4, #4294967295
   1507e:	4620      	mov	r0, r4
   15080:	b003      	add	sp, #12
   15082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15086:	9c01      	ldr	r4, [sp, #4]
   15088:	2c00      	cmp	r4, #0
   1508a:	d1de      	bne.n	1504a <ip_interface_bind+0x4e>
   1508c:	240c      	movs	r4, #12
   1508e:	e7f1      	b.n	15074 <ip_interface_bind+0x78>
   15090:	242f      	movs	r4, #47	; 0x2f
   15092:	e7ef      	b.n	15074 <ip_interface_bind+0x78>
   15094:	2e10      	cmp	r6, #16
   15096:	d1ec      	bne.n	15072 <ip_interface_bind+0x76>
   15098:	2204      	movs	r2, #4
   1509a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1509e:	f108 010c 	add.w	r1, r8, #12
   150a2:	82e2      	strh	r2, [r4, #22]
   150a4:	82a3      	strh	r3, [r4, #20]
   150a6:	f007 f9de 	bl	1c466 <memcpy>
   150aa:	e00a      	b.n	150c2 <ip_interface_bind+0xc6>
   150ac:	2409      	movs	r4, #9
   150ae:	e7e1      	b.n	15074 <ip_interface_bind+0x78>
   150b0:	2210      	movs	r2, #16
   150b2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   150b6:	eb08 0102 	add.w	r1, r8, r2
   150ba:	82e2      	strh	r2, [r4, #22]
   150bc:	82a3      	strh	r3, [r4, #20]
   150be:	f007 f9d2 	bl	1c466 <memcpy>
   150c2:	68a3      	ldr	r3, [r4, #8]
   150c4:	8ae2      	ldrh	r2, [r4, #22]
   150c6:	f247 0105 	movw	r1, #28677	; 0x7005
   150ca:	4413      	add	r3, r2
   150cc:	60a3      	str	r3, [r4, #8]
   150ce:	682b      	ldr	r3, [r5, #0]
   150d0:	4620      	mov	r0, r4
   150d2:	0c1b      	lsrs	r3, r3, #16
   150d4:	041b      	lsls	r3, r3, #16
   150d6:	f043 0303 	orr.w	r3, r3, #3
   150da:	602b      	str	r3, [r5, #0]
   150dc:	682e      	ldr	r6, [r5, #0]
   150de:	f7fb fe95 	bl	10e0c <rpc_ip_client_request_send>
   150e2:	4680      	mov	r8, r0
   150e4:	b980      	cbnz	r0, 15108 <ip_interface_bind+0x10c>
   150e6:	f04f 33ff 	mov.w	r3, #4294967295
   150ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   150ee:	2104      	movs	r1, #4
   150f0:	4638      	mov	r0, r7
   150f2:	f000 fee7 	bl	15ec4 <interface_socket_wait>
   150f6:	4604      	mov	r4, r0
   150f8:	b1a0      	cbz	r0, 15124 <ip_interface_bind+0x128>
   150fa:	682b      	ldr	r3, [r5, #0]
   150fc:	0c1b      	lsrs	r3, r3, #16
   150fe:	041b      	lsls	r3, r3, #16
   15100:	f043 0302 	orr.w	r3, r3, #2
   15104:	602b      	str	r3, [r5, #0]
   15106:	e7b5      	b.n	15074 <ip_interface_bind+0x78>
   15108:	6820      	ldr	r0, [r4, #0]
   1510a:	b108      	cbz	r0, 15110 <ip_interface_bind+0x114>
   1510c:	f7fb fe9c 	bl	10e48 <rpc_ip_client_data_free>
   15110:	0c36      	lsrs	r6, r6, #16
   15112:	0436      	lsls	r6, r6, #16
   15114:	4620      	mov	r0, r4
   15116:	f046 0602 	orr.w	r6, r6, #2
   1511a:	f7fb fe8d 	bl	10e38 <rpc_ip_client_message_free>
   1511e:	2423      	movs	r4, #35	; 0x23
   15120:	602e      	str	r6, [r5, #0]
   15122:	e7a7      	b.n	15074 <ip_interface_bind+0x78>
   15124:	4638      	mov	r0, r7
   15126:	f000 ff41 	bl	15fac <interface_socket_from_handle_get>
   1512a:	2800      	cmp	r0, #0
   1512c:	d0a7      	beq.n	1507e <ip_interface_bind+0x82>
   1512e:	6844      	ldr	r4, [r0, #4]
   15130:	2c00      	cmp	r4, #0
   15132:	d0a4      	beq.n	1507e <ip_interface_bind+0x82>
   15134:	f8c0 8004 	str.w	r8, [r0, #4]
   15138:	e7df      	b.n	150fa <ip_interface_bind+0xfe>
   1513a:	bf00      	nop

0001513c <ip_interface_listen>:
   1513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15140:	b082      	sub	sp, #8
   15142:	4606      	mov	r6, r0
   15144:	f000 ff32 	bl	15fac <interface_socket_from_handle_get>
   15148:	2800      	cmp	r0, #0
   1514a:	d067      	beq.n	1521c <ip_interface_listen+0xe0>
   1514c:	6803      	ldr	r3, [r0, #0]
   1514e:	4605      	mov	r5, r0
   15150:	b29b      	uxth	r3, r3
   15152:	2b04      	cmp	r3, #4
   15154:	d162      	bne.n	1521c <ip_interface_listen+0xe0>
   15156:	2100      	movs	r1, #0
   15158:	4a32      	ldr	r2, [pc, #200]	; (15224 <ip_interface_listen+0xe8>)
   1515a:	4630      	mov	r0, r6
   1515c:	f000 fe7a 	bl	15e54 <interface_socket_packet_handler_update>
   15160:	4601      	mov	r1, r0
   15162:	2800      	cmp	r0, #0
   15164:	d15c      	bne.n	15220 <ip_interface_listen+0xe4>
   15166:	a802      	add	r0, sp, #8
   15168:	f840 1d04 	str.w	r1, [r0, #-4]!
   1516c:	69af      	ldr	r7, [r5, #24]
   1516e:	f7fb fe39 	bl	10de4 <rpc_ip_client_request_alloc>
   15172:	bba8      	cbnz	r0, 151e0 <ip_interface_listen+0xa4>
   15174:	f247 0308 	movw	r3, #28680	; 0x7008
   15178:	2208      	movs	r2, #8
   1517a:	9c01      	ldr	r4, [sp, #4]
   1517c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15180:	60e3      	str	r3, [r4, #12]
   15182:	6127      	str	r7, [r4, #16]
   15184:	7260      	strb	r0, [r4, #9]
   15186:	72a0      	strb	r0, [r4, #10]
   15188:	72e0      	strb	r0, [r4, #11]
   1518a:	7222      	strb	r2, [r4, #8]
   1518c:	68a3      	ldr	r3, [r4, #8]
   1518e:	f247 0108 	movw	r1, #28680	; 0x7008
   15192:	3304      	adds	r3, #4
   15194:	60a3      	str	r3, [r4, #8]
   15196:	682b      	ldr	r3, [r5, #0]
   15198:	4620      	mov	r0, r4
   1519a:	0c1b      	lsrs	r3, r3, #16
   1519c:	041b      	lsls	r3, r3, #16
   1519e:	f043 0306 	orr.w	r3, r3, #6
   151a2:	602b      	str	r3, [r5, #0]
   151a4:	682f      	ldr	r7, [r5, #0]
   151a6:	f7fb fe31 	bl	10e0c <rpc_ip_client_request_send>
   151aa:	4680      	mov	r8, r0
   151ac:	b9e8      	cbnz	r0, 151ea <ip_interface_listen+0xae>
   151ae:	f04f 33ff 	mov.w	r3, #4294967295
   151b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   151b6:	2107      	movs	r1, #7
   151b8:	4630      	mov	r0, r6
   151ba:	f000 fe83 	bl	15ec4 <interface_socket_wait>
   151be:	4604      	mov	r4, r0
   151c0:	b308      	cbz	r0, 15206 <ip_interface_listen+0xca>
   151c2:	682b      	ldr	r3, [r5, #0]
   151c4:	0c1b      	lsrs	r3, r3, #16
   151c6:	041b      	lsls	r3, r3, #16
   151c8:	f043 0304 	orr.w	r3, r3, #4
   151cc:	602b      	str	r3, [r5, #0]
   151ce:	4620      	mov	r0, r4
   151d0:	f7fa f8ae 	bl	f330 <bsd_os_errno_set>
   151d4:	f04f 34ff 	mov.w	r4, #4294967295
   151d8:	4620      	mov	r0, r4
   151da:	b002      	add	sp, #8
   151dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   151e0:	9c01      	ldr	r4, [sp, #4]
   151e2:	2c00      	cmp	r4, #0
   151e4:	d1d2      	bne.n	1518c <ip_interface_listen+0x50>
   151e6:	240c      	movs	r4, #12
   151e8:	e7f1      	b.n	151ce <ip_interface_listen+0x92>
   151ea:	6820      	ldr	r0, [r4, #0]
   151ec:	b108      	cbz	r0, 151f2 <ip_interface_listen+0xb6>
   151ee:	f7fb fe2b 	bl	10e48 <rpc_ip_client_data_free>
   151f2:	0c3f      	lsrs	r7, r7, #16
   151f4:	043f      	lsls	r7, r7, #16
   151f6:	4620      	mov	r0, r4
   151f8:	f047 0704 	orr.w	r7, r7, #4
   151fc:	f7fb fe1c 	bl	10e38 <rpc_ip_client_message_free>
   15200:	2423      	movs	r4, #35	; 0x23
   15202:	602f      	str	r7, [r5, #0]
   15204:	e7e3      	b.n	151ce <ip_interface_listen+0x92>
   15206:	4630      	mov	r0, r6
   15208:	f000 fed0 	bl	15fac <interface_socket_from_handle_get>
   1520c:	2800      	cmp	r0, #0
   1520e:	d0e3      	beq.n	151d8 <ip_interface_listen+0x9c>
   15210:	6844      	ldr	r4, [r0, #4]
   15212:	2c00      	cmp	r4, #0
   15214:	d0e0      	beq.n	151d8 <ip_interface_listen+0x9c>
   15216:	f8c0 8004 	str.w	r8, [r0, #4]
   1521a:	e7d2      	b.n	151c2 <ip_interface_listen+0x86>
   1521c:	2409      	movs	r4, #9
   1521e:	e7d6      	b.n	151ce <ip_interface_listen+0x92>
   15220:	2423      	movs	r4, #35	; 0x23
   15222:	e7d4      	b.n	151ce <ip_interface_listen+0x92>
   15224:	00014601 	.word	0x00014601

00015228 <ip_interface_accept>:
   15228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1522c:	2500      	movs	r5, #0
   1522e:	b085      	sub	sp, #20
   15230:	460f      	mov	r7, r1
   15232:	4690      	mov	r8, r2
   15234:	9502      	str	r5, [sp, #8]
   15236:	4606      	mov	r6, r0
   15238:	f000 feb8 	bl	15fac <interface_socket_from_handle_get>
   1523c:	4604      	mov	r4, r0
   1523e:	2800      	cmp	r0, #0
   15240:	f000 811c 	beq.w	1547c <ip_interface_accept+0x254>
   15244:	6803      	ldr	r3, [r0, #0]
   15246:	b29b      	uxth	r3, r3
   15248:	2b07      	cmp	r3, #7
   1524a:	d10a      	bne.n	15262 <ip_interface_accept+0x3a>
   1524c:	6803      	ldr	r3, [r0, #0]
   1524e:	6805      	ldr	r5, [r0, #0]
   15250:	00db      	lsls	r3, r3, #3
   15252:	d416      	bmi.n	15282 <ip_interface_accept+0x5a>
   15254:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   15258:	d019      	beq.n	1528e <ip_interface_accept+0x66>
   1525a:	6805      	ldr	r5, [r0, #0]
   1525c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   15260:	d124      	bne.n	152ac <ip_interface_accept+0x84>
   15262:	f04f 0909 	mov.w	r9, #9
   15266:	9b02      	ldr	r3, [sp, #8]
   15268:	b113      	cbz	r3, 15270 <ip_interface_accept+0x48>
   1526a:	4628      	mov	r0, r5
   1526c:	f000 fddc 	bl	15e28 <interface_socket_free>
   15270:	4648      	mov	r0, r9
   15272:	f04f 39ff 	mov.w	r9, #4294967295
   15276:	f7fa f85b 	bl	f330 <bsd_os_errno_set>
   1527a:	4648      	mov	r0, r9
   1527c:	b005      	add	sp, #20
   1527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15282:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   15286:	d16d      	bne.n	15364 <ip_interface_accept+0x13c>
   15288:	f04f 0923 	mov.w	r9, #35	; 0x23
   1528c:	e7eb      	b.n	15266 <ip_interface_accept+0x3e>
   1528e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15292:	f04f 33ff 	mov.w	r3, #4294967295
   15296:	4611      	mov	r1, r2
   15298:	4630      	mov	r0, r6
   1529a:	f000 fe13 	bl	15ec4 <interface_socket_wait>
   1529e:	4681      	mov	r9, r0
   152a0:	2800      	cmp	r0, #0
   152a2:	d07e      	beq.n	153a2 <ip_interface_accept+0x17a>
   152a4:	6825      	ldr	r5, [r4, #0]
   152a6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   152aa:	d0dc      	beq.n	15266 <ip_interface_accept+0x3e>
   152ac:	f04f 30ff 	mov.w	r0, #4294967295
   152b0:	2300      	movs	r3, #0
   152b2:	e9cd 0300 	strd	r0, r3, [sp]
   152b6:	4a75      	ldr	r2, [pc, #468]	; (1548c <ip_interface_accept+0x264>)
   152b8:	6921      	ldr	r1, [r4, #16]
   152ba:	a802      	add	r0, sp, #8
   152bc:	f000 fd50 	bl	15d60 <interface_socket_allocate>
   152c0:	9b02      	ldr	r3, [sp, #8]
   152c2:	4605      	mov	r5, r0
   152c4:	2b00      	cmp	r3, #0
   152c6:	f000 80dd 	beq.w	15484 <ip_interface_accept+0x25c>
   152ca:	2100      	movs	r1, #0
   152cc:	6962      	ldr	r2, [r4, #20]
   152ce:	a804      	add	r0, sp, #16
   152d0:	615a      	str	r2, [r3, #20]
   152d2:	68e2      	ldr	r2, [r4, #12]
   152d4:	f840 1d04 	str.w	r1, [r0, #-4]!
   152d8:	60da      	str	r2, [r3, #12]
   152da:	6922      	ldr	r2, [r4, #16]
   152dc:	611a      	str	r2, [r3, #16]
   152de:	f8d4 9018 	ldr.w	r9, [r4, #24]
   152e2:	f7fb fd7f 	bl	10de4 <rpc_ip_client_request_alloc>
   152e6:	2800      	cmp	r0, #0
   152e8:	d143      	bne.n	15372 <ip_interface_accept+0x14a>
   152ea:	f247 030c 	movw	r3, #28684	; 0x700c
   152ee:	2108      	movs	r1, #8
   152f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   152f4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   152f8:	f8cb 300c 	str.w	r3, [fp, #12]
   152fc:	f8cb 9010 	str.w	r9, [fp, #16]
   15300:	f88b 0009 	strb.w	r0, [fp, #9]
   15304:	f88b 000a 	strb.w	r0, [fp, #10]
   15308:	f88b 000b 	strb.w	r0, [fp, #11]
   1530c:	f88b 1008 	strb.w	r1, [fp, #8]
   15310:	6823      	ldr	r3, [r4, #0]
   15312:	f247 010c 	movw	r1, #28684	; 0x700c
   15316:	0c1b      	lsrs	r3, r3, #16
   15318:	041b      	lsls	r3, r3, #16
   1531a:	f043 0308 	orr.w	r3, r3, #8
   1531e:	6023      	str	r3, [r4, #0]
   15320:	4658      	mov	r0, fp
   15322:	f8d4 9000 	ldr.w	r9, [r4]
   15326:	f7fb fd71 	bl	10e0c <rpc_ip_client_request_send>
   1532a:	4682      	mov	sl, r0
   1532c:	bb48      	cbnz	r0, 15382 <ip_interface_accept+0x15a>
   1532e:	6822      	ldr	r2, [r4, #0]
   15330:	9900      	ldr	r1, [sp, #0]
   15332:	f04f 33ff 	mov.w	r3, #4294967295
   15336:	400a      	ands	r2, r1
   15338:	6022      	str	r2, [r4, #0]
   1533a:	2109      	movs	r1, #9
   1533c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15340:	4630      	mov	r0, r6
   15342:	f000 fdbf 	bl	15ec4 <interface_socket_wait>
   15346:	4681      	mov	r9, r0
   15348:	2800      	cmp	r0, #0
   1534a:	f000 8085 	beq.w	15458 <ip_interface_accept+0x230>
   1534e:	6823      	ldr	r3, [r4, #0]
   15350:	9a01      	ldr	r2, [sp, #4]
   15352:	431a      	orrs	r2, r3
   15354:	6022      	str	r2, [r4, #0]
   15356:	6823      	ldr	r3, [r4, #0]
   15358:	0c1b      	lsrs	r3, r3, #16
   1535a:	041b      	lsls	r3, r3, #16
   1535c:	f043 0307 	orr.w	r3, r3, #7
   15360:	6023      	str	r3, [r4, #0]
   15362:	e780      	b.n	15266 <ip_interface_accept+0x3e>
   15364:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   15368:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1536c:	e9cd 2300 	strd	r2, r3, [sp]
   15370:	e7a1      	b.n	152b6 <ip_interface_accept+0x8e>
   15372:	f8dd b00c 	ldr.w	fp, [sp, #12]
   15376:	f04f 090c 	mov.w	r9, #12
   1537a:	f1bb 0f00 	cmp.w	fp, #0
   1537e:	d1c7      	bne.n	15310 <ip_interface_accept+0xe8>
   15380:	e771      	b.n	15266 <ip_interface_accept+0x3e>
   15382:	f8db 0000 	ldr.w	r0, [fp]
   15386:	b108      	cbz	r0, 1538c <ip_interface_accept+0x164>
   15388:	f7fb fd5e 	bl	10e48 <rpc_ip_client_data_free>
   1538c:	ea4f 4919 	mov.w	r9, r9, lsr #16
   15390:	4658      	mov	r0, fp
   15392:	ea4f 4909 	mov.w	r9, r9, lsl #16
   15396:	f7fb fd4f 	bl	10e38 <rpc_ip_client_message_free>
   1539a:	f049 0307 	orr.w	r3, r9, #7
   1539e:	6023      	str	r3, [r4, #0]
   153a0:	e772      	b.n	15288 <ip_interface_accept+0x60>
   153a2:	4630      	mov	r0, r6
   153a4:	f000 fe02 	bl	15fac <interface_socket_from_handle_get>
   153a8:	b130      	cbz	r0, 153b8 <ip_interface_accept+0x190>
   153aa:	f8d0 9004 	ldr.w	r9, [r0, #4]
   153ae:	f1b9 0f00 	cmp.w	r9, #0
   153b2:	d001      	beq.n	153b8 <ip_interface_accept+0x190>
   153b4:	6045      	str	r5, [r0, #4]
   153b6:	e775      	b.n	152a4 <ip_interface_accept+0x7c>
   153b8:	6823      	ldr	r3, [r4, #0]
   153ba:	03d9      	lsls	r1, r3, #15
   153bc:	f53f af76 	bmi.w	152ac <ip_interface_accept+0x84>
   153c0:	4d33      	ldr	r5, [pc, #204]	; (15490 <ip_interface_accept+0x268>)
   153c2:	9902      	ldr	r1, [sp, #8]
   153c4:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   153c8:	699b      	ldr	r3, [r3, #24]
   153ca:	618b      	str	r3, [r1, #24]
   153cc:	b147      	cbz	r7, 153e0 <ip_interface_accept+0x1b8>
   153ce:	68cb      	ldr	r3, [r1, #12]
   153d0:	2b0a      	cmp	r3, #10
   153d2:	d024      	beq.n	1541e <ip_interface_accept+0x1f6>
   153d4:	2b02      	cmp	r3, #2
   153d6:	d103      	bne.n	153e0 <ip_interface_accept+0x1b8>
   153d8:	f8d8 2000 	ldr.w	r2, [r8]
   153dc:	2a10      	cmp	r2, #16
   153de:	d032      	beq.n	15446 <ip_interface_accept+0x21e>
   153e0:	680a      	ldr	r2, [r1, #0]
   153e2:	482c      	ldr	r0, [pc, #176]	; (15494 <ip_interface_accept+0x26c>)
   153e4:	4002      	ands	r2, r0
   153e6:	f042 0205 	orr.w	r2, r2, #5
   153ea:	600a      	str	r2, [r1, #0]
   153ec:	9a02      	ldr	r2, [sp, #8]
   153ee:	6811      	ldr	r1, [r2, #0]
   153f0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   153f4:	6011      	str	r1, [r2, #0]
   153f6:	6811      	ldr	r1, [r2, #0]
   153f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   153fc:	6011      	str	r1, [r2, #0]
   153fe:	6823      	ldr	r3, [r4, #0]
   15400:	4003      	ands	r3, r0
   15402:	f043 0307 	orr.w	r3, r3, #7
   15406:	6023      	str	r3, [r4, #0]
   15408:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1540c:	f7fb fd14 	bl	10e38 <rpc_ip_client_message_free>
   15410:	2300      	movs	r3, #0
   15412:	4648      	mov	r0, r9
   15414:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   15418:	b005      	add	sp, #20
   1541a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1541e:	f8d8 2000 	ldr.w	r2, [r8]
   15422:	2a24      	cmp	r2, #36	; 0x24
   15424:	d1dc      	bne.n	153e0 <ip_interface_accept+0x1b8>
   15426:	703a      	strb	r2, [r7, #0]
   15428:	2210      	movs	r2, #16
   1542a:	607b      	str	r3, [r7, #4]
   1542c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   15430:	f107 0010 	add.w	r0, r7, #16
   15434:	8b9b      	ldrh	r3, [r3, #28]
   15436:	813b      	strh	r3, [r7, #8]
   15438:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1543c:	3120      	adds	r1, #32
   1543e:	f007 f812 	bl	1c466 <memcpy>
   15442:	9902      	ldr	r1, [sp, #8]
   15444:	e7cc      	b.n	153e0 <ip_interface_accept+0x1b8>
   15446:	703a      	strb	r2, [r7, #0]
   15448:	607b      	str	r3, [r7, #4]
   1544a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1544e:	f107 000c 	add.w	r0, r7, #12
   15452:	8b9b      	ldrh	r3, [r3, #28]
   15454:	2204      	movs	r2, #4
   15456:	e7ee      	b.n	15436 <ip_interface_accept+0x20e>
   15458:	4630      	mov	r0, r6
   1545a:	f000 fda7 	bl	15fac <interface_socket_from_handle_get>
   1545e:	b138      	cbz	r0, 15470 <ip_interface_accept+0x248>
   15460:	f8d0 9004 	ldr.w	r9, [r0, #4]
   15464:	f1b9 0f00 	cmp.w	r9, #0
   15468:	d002      	beq.n	15470 <ip_interface_accept+0x248>
   1546a:	f8c0 a004 	str.w	sl, [r0, #4]
   1546e:	e76e      	b.n	1534e <ip_interface_accept+0x126>
   15470:	6823      	ldr	r3, [r4, #0]
   15472:	9a01      	ldr	r2, [sp, #4]
   15474:	46a9      	mov	r9, r5
   15476:	4313      	orrs	r3, r2
   15478:	6023      	str	r3, [r4, #0]
   1547a:	e7a1      	b.n	153c0 <ip_interface_accept+0x198>
   1547c:	4605      	mov	r5, r0
   1547e:	f04f 0909 	mov.w	r9, #9
   15482:	e6f0      	b.n	15266 <ip_interface_accept+0x3e>
   15484:	f04f 090c 	mov.w	r9, #12
   15488:	e6f2      	b.n	15270 <ip_interface_accept+0x48>
   1548a:	bf00      	nop
   1548c:	00014601 	.word	0x00014601
   15490:	20020770 	.word	0x20020770
   15494:	ffff0000 	.word	0xffff0000

00015498 <ip_interface_setopt>:
   15498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1549c:	2901      	cmp	r1, #1
   1549e:	b084      	sub	sp, #16
   154a0:	f040 809c 	bne.w	155dc <ip_interface_setopt+0x144>
   154a4:	460e      	mov	r6, r1
   154a6:	4690      	mov	r8, r2
   154a8:	461d      	mov	r5, r3
   154aa:	4607      	mov	r7, r0
   154ac:	f000 fd7e 	bl	15fac <interface_socket_from_handle_get>
   154b0:	4604      	mov	r4, r0
   154b2:	2800      	cmp	r0, #0
   154b4:	f000 80a5 	beq.w	15602 <ip_interface_setopt+0x16a>
   154b8:	f1b8 0f19 	cmp.w	r8, #25
   154bc:	d16e      	bne.n	1559c <ip_interface_setopt+0x104>
   154be:	2d00      	cmp	r5, #0
   154c0:	f000 8092 	beq.w	155e8 <ip_interface_setopt+0x150>
   154c4:	4628      	mov	r0, r5
   154c6:	f7f7 fcd7 	bl	ce78 <strlen>
   154ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   154cc:	4298      	cmp	r0, r3
   154ce:	f040 808b 	bne.w	155e8 <ip_interface_setopt+0x150>
   154d2:	6823      	ldr	r3, [r4, #0]
   154d4:	b29b      	uxth	r3, r3
   154d6:	2b02      	cmp	r3, #2
   154d8:	d173      	bne.n	155c2 <ip_interface_setopt+0x12a>
   154da:	4629      	mov	r1, r5
   154dc:	68e0      	ldr	r0, [r4, #12]
   154de:	f7fe fb2b 	bl	13b38 <pdn_interface_pdn_id_get>
   154e2:	9002      	str	r0, [sp, #8]
   154e4:	3001      	adds	r0, #1
   154e6:	bf08      	it	eq
   154e8:	2516      	moveq	r5, #22
   154ea:	d04e      	beq.n	1558a <ip_interface_setopt+0xf2>
   154ec:	6823      	ldr	r3, [r4, #0]
   154ee:	025b      	lsls	r3, r3, #9
   154f0:	d44a      	bmi.n	15588 <ip_interface_setopt+0xf0>
   154f2:	6823      	ldr	r3, [r4, #0]
   154f4:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   154f8:	d146      	bne.n	15588 <ip_interface_setopt+0xf0>
   154fa:	6826      	ldr	r6, [r4, #0]
   154fc:	6822      	ldr	r2, [r4, #0]
   154fe:	a804      	add	r0, sp, #16
   15500:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   15504:	6022      	str	r2, [r4, #0]
   15506:	2104      	movs	r1, #4
   15508:	f840 3d04 	str.w	r3, [r0, #-4]!
   1550c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   15510:	f7fb fc68 	bl	10de4 <rpc_ip_client_request_alloc>
   15514:	2800      	cmp	r0, #0
   15516:	d14e      	bne.n	155b6 <ip_interface_setopt+0x11e>
   15518:	f247 0203 	movw	r2, #28675	; 0x7003
   1551c:	2300      	movs	r3, #0
   1551e:	2108      	movs	r1, #8
   15520:	9d03      	ldr	r5, [sp, #12]
   15522:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   15526:	60ea      	str	r2, [r5, #12]
   15528:	f8c5 8010 	str.w	r8, [r5, #16]
   1552c:	7229      	strb	r1, [r5, #8]
   1552e:	726b      	strb	r3, [r5, #9]
   15530:	72ab      	strb	r3, [r5, #10]
   15532:	72eb      	strb	r3, [r5, #11]
   15534:	f04f 0c08 	mov.w	ip, #8
   15538:	2300      	movs	r3, #0
   1553a:	2010      	movs	r0, #16
   1553c:	2130      	movs	r1, #48	; 0x30
   1553e:	68aa      	ldr	r2, [r5, #8]
   15540:	756b      	strb	r3, [r5, #21]
   15542:	4462      	add	r2, ip
   15544:	60aa      	str	r2, [r5, #8]
   15546:	75ab      	strb	r3, [r5, #22]
   15548:	75eb      	strb	r3, [r5, #23]
   1554a:	76ab      	strb	r3, [r5, #26]
   1554c:	76eb      	strb	r3, [r5, #27]
   1554e:	f885 c014 	strb.w	ip, [r5, #20]
   15552:	7628      	strb	r0, [r5, #24]
   15554:	7669      	strb	r1, [r5, #25]
   15556:	2204      	movs	r2, #4
   15558:	eb0d 010c 	add.w	r1, sp, ip
   1555c:	6828      	ldr	r0, [r5, #0]
   1555e:	f006 ff82 	bl	1c466 <memcpy>
   15562:	f247 0103 	movw	r1, #28675	; 0x7003
   15566:	4628      	mov	r0, r5
   15568:	f7fb fc50 	bl	10e0c <rpc_ip_client_request_send>
   1556c:	4680      	mov	r8, r0
   1556e:	bb50      	cbnz	r0, 155c6 <ip_interface_setopt+0x12e>
   15570:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   15574:	f04f 33ff 	mov.w	r3, #4294967295
   15578:	4611      	mov	r1, r2
   1557a:	4638      	mov	r0, r7
   1557c:	f000 fca2 	bl	15ec4 <interface_socket_wait>
   15580:	4605      	mov	r5, r0
   15582:	b398      	cbz	r0, 155ec <ip_interface_setopt+0x154>
   15584:	6026      	str	r6, [r4, #0]
   15586:	e000      	b.n	1558a <ip_interface_setopt+0xf2>
   15588:	2523      	movs	r5, #35	; 0x23
   1558a:	4628      	mov	r0, r5
   1558c:	f7f9 fed0 	bl	f330 <bsd_os_errno_set>
   15590:	f04f 35ff 	mov.w	r5, #4294967295
   15594:	4628      	mov	r0, r5
   15596:	b004      	add	sp, #16
   15598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1559c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1559e:	4642      	mov	r2, r8
   155a0:	9300      	str	r3, [sp, #0]
   155a2:	4631      	mov	r1, r6
   155a4:	462b      	mov	r3, r5
   155a6:	4638      	mov	r0, r7
   155a8:	f000 fd28 	bl	15ffc <interface_socket_setopt>
   155ac:	4605      	mov	r5, r0
   155ae:	4628      	mov	r0, r5
   155b0:	b004      	add	sp, #16
   155b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   155b6:	9d03      	ldr	r5, [sp, #12]
   155b8:	2d00      	cmp	r5, #0
   155ba:	d1bb      	bne.n	15534 <ip_interface_setopt+0x9c>
   155bc:	6026      	str	r6, [r4, #0]
   155be:	250c      	movs	r5, #12
   155c0:	e7e3      	b.n	1558a <ip_interface_setopt+0xf2>
   155c2:	2509      	movs	r5, #9
   155c4:	e7e1      	b.n	1558a <ip_interface_setopt+0xf2>
   155c6:	6828      	ldr	r0, [r5, #0]
   155c8:	b108      	cbz	r0, 155ce <ip_interface_setopt+0x136>
   155ca:	f7fb fc3d 	bl	10e48 <rpc_ip_client_data_free>
   155ce:	4628      	mov	r0, r5
   155d0:	f7fb fc32 	bl	10e38 <rpc_ip_client_message_free>
   155d4:	2523      	movs	r5, #35	; 0x23
   155d6:	6026      	str	r6, [r4, #0]
   155d8:	6026      	str	r6, [r4, #0]
   155da:	e7d6      	b.n	1558a <ip_interface_setopt+0xf2>
   155dc:	202a      	movs	r0, #42	; 0x2a
   155de:	f7f9 fea7 	bl	f330 <bsd_os_errno_set>
   155e2:	f04f 35ff 	mov.w	r5, #4294967295
   155e6:	e7d5      	b.n	15594 <ip_interface_setopt+0xfc>
   155e8:	250e      	movs	r5, #14
   155ea:	e7ce      	b.n	1558a <ip_interface_setopt+0xf2>
   155ec:	4638      	mov	r0, r7
   155ee:	f000 fcdd 	bl	15fac <interface_socket_from_handle_get>
   155f2:	b120      	cbz	r0, 155fe <ip_interface_setopt+0x166>
   155f4:	6845      	ldr	r5, [r0, #4]
   155f6:	b115      	cbz	r5, 155fe <ip_interface_setopt+0x166>
   155f8:	f8c0 8004 	str.w	r8, [r0, #4]
   155fc:	e7c2      	b.n	15584 <ip_interface_setopt+0xec>
   155fe:	6026      	str	r6, [r4, #0]
   15600:	e7c8      	b.n	15594 <ip_interface_setopt+0xfc>
   15602:	2009      	movs	r0, #9
   15604:	f7f9 fe94 	bl	f330 <bsd_os_errno_set>
   15608:	f04f 35ff 	mov.w	r5, #4294967295
   1560c:	e7c2      	b.n	15594 <ip_interface_setopt+0xfc>
   1560e:	bf00      	nop

00015610 <ip_interface_getopt>:
   15610:	f000 bd36 	b.w	16080 <interface_socket_getopt>

00015614 <ip_interface_getaddrinfo>:
   15614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15618:	f04f 0c00 	mov.w	ip, #0
   1561c:	2401      	movs	r4, #1
   1561e:	4e72      	ldr	r6, [pc, #456]	; (157e8 <ip_interface_getaddrinfo+0x1d4>)
   15620:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 157f4 <ip_interface_getaddrinfo+0x1e0>
   15624:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 157f8 <ip_interface_getaddrinfo+0x1e4>
   15628:	b085      	sub	sp, #20
   1562a:	4607      	mov	r7, r0
   1562c:	4615      	mov	r5, r2
   1562e:	9301      	str	r3, [sp, #4]
   15630:	f8a6 c000 	strh.w	ip, [r6]
   15634:	f8ca 4000 	str.w	r4, [sl]
   15638:	f8c9 4000 	str.w	r4, [r9]
   1563c:	b171      	cbz	r1, 1565c <ip_interface_getaddrinfo+0x48>
   1563e:	4608      	mov	r0, r1
   15640:	220a      	movs	r2, #10
   15642:	4661      	mov	r1, ip
   15644:	f004 fc2e 	bl	19ea4 <strtol>
   15648:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1564c:	1e42      	subs	r2, r0, #1
   1564e:	429a      	cmp	r2, r3
   15650:	f200 8083 	bhi.w	1575a <ip_interface_getaddrinfo+0x146>
   15654:	0203      	lsls	r3, r0, #8
   15656:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1565a:	8030      	strh	r0, [r6, #0]
   1565c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 157fc <ip_interface_getaddrinfo+0x1e8>
   15660:	f8d8 3000 	ldr.w	r3, [r8]
   15664:	2b00      	cmp	r3, #0
   15666:	d174      	bne.n	15752 <ip_interface_getaddrinfo+0x13e>
   15668:	4a60      	ldr	r2, [pc, #384]	; (157ec <ip_interface_getaddrinfo+0x1d8>)
   1566a:	6013      	str	r3, [r2, #0]
   1566c:	4a60      	ldr	r2, [pc, #384]	; (157f0 <ip_interface_getaddrinfo+0x1dc>)
   1566e:	6013      	str	r3, [r2, #0]
   15670:	2f00      	cmp	r7, #0
   15672:	d062      	beq.n	1573a <ip_interface_getaddrinfo+0x126>
   15674:	4638      	mov	r0, r7
   15676:	f7f7 fbff 	bl	ce78 <strlen>
   1567a:	4683      	mov	fp, r0
   1567c:	b125      	cbz	r5, 15688 <ip_interface_getaddrinfo+0x74>
   1567e:	69ea      	ldr	r2, [r5, #28]
   15680:	b112      	cbz	r2, 15688 <ip_interface_getaddrinfo+0x74>
   15682:	6851      	ldr	r1, [r2, #4]
   15684:	2966      	cmp	r1, #102	; 0x66
   15686:	d06c      	beq.n	15762 <ip_interface_getaddrinfo+0x14e>
   15688:	f04f 32ff 	mov.w	r2, #4294967295
   1568c:	2100      	movs	r1, #0
   1568e:	ae04      	add	r6, sp, #16
   15690:	f846 1d04 	str.w	r1, [r6, #-4]!
   15694:	4630      	mov	r0, r6
   15696:	4659      	mov	r1, fp
   15698:	9200      	str	r2, [sp, #0]
   1569a:	f7fb fba3 	bl	10de4 <rpc_ip_client_request_alloc>
   1569e:	9a00      	ldr	r2, [sp, #0]
   156a0:	2800      	cmp	r0, #0
   156a2:	d14c      	bne.n	1573e <ip_interface_getaddrinfo+0x12a>
   156a4:	f247 010d 	movw	r1, #28685	; 0x700d
   156a8:	f04f 0c08 	mov.w	ip, #8
   156ac:	9c03      	ldr	r4, [sp, #12]
   156ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   156b2:	60e1      	str	r1, [r4, #12]
   156b4:	6122      	str	r2, [r4, #16]
   156b6:	7260      	strb	r0, [r4, #9]
   156b8:	72a0      	strb	r0, [r4, #10]
   156ba:	72e0      	strb	r0, [r4, #11]
   156bc:	f884 c008 	strb.w	ip, [r4, #8]
   156c0:	2d00      	cmp	r5, #0
   156c2:	d076      	beq.n	157b2 <ip_interface_getaddrinfo+0x19e>
   156c4:	686a      	ldr	r2, [r5, #4]
   156c6:	f022 0108 	bic.w	r1, r2, #8
   156ca:	2902      	cmp	r1, #2
   156cc:	d05c      	beq.n	15788 <ip_interface_getaddrinfo+0x174>
   156ce:	2a05      	cmp	r2, #5
   156d0:	d178      	bne.n	157c4 <ip_interface_getaddrinfo+0x1b0>
   156d2:	68a9      	ldr	r1, [r5, #8]
   156d4:	2902      	cmp	r1, #2
   156d6:	f8c9 1000 	str.w	r1, [r9]
   156da:	d061      	beq.n	157a0 <ip_interface_getaddrinfo+0x18c>
   156dc:	61a2      	str	r2, [r4, #24]
   156de:	68ea      	ldr	r2, [r5, #12]
   156e0:	6222      	str	r2, [r4, #32]
   156e2:	68aa      	ldr	r2, [r5, #8]
   156e4:	61e2      	str	r2, [r4, #28]
   156e6:	682a      	ldr	r2, [r5, #0]
   156e8:	6162      	str	r2, [r4, #20]
   156ea:	68a2      	ldr	r2, [r4, #8]
   156ec:	3210      	adds	r2, #16
   156ee:	60a2      	str	r2, [r4, #8]
   156f0:	b12f      	cbz	r7, 156fe <ip_interface_getaddrinfo+0xea>
   156f2:	6820      	ldr	r0, [r4, #0]
   156f4:	b118      	cbz	r0, 156fe <ip_interface_getaddrinfo+0xea>
   156f6:	465a      	mov	r2, fp
   156f8:	4639      	mov	r1, r7
   156fa:	f006 feb4 	bl	1c466 <memcpy>
   156fe:	2301      	movs	r3, #1
   15700:	f247 010d 	movw	r1, #28685	; 0x700d
   15704:	4620      	mov	r0, r4
   15706:	f8c8 3000 	str.w	r3, [r8]
   1570a:	f7fb fb7f 	bl	10e0c <rpc_ip_client_request_send>
   1570e:	2800      	cmp	r0, #0
   15710:	d156      	bne.n	157c0 <ip_interface_getaddrinfo+0x1ac>
   15712:	f04f 33ff 	mov.w	r3, #4294967295
   15716:	9303      	str	r3, [sp, #12]
   15718:	4631      	mov	r1, r6
   1571a:	4620      	mov	r0, r4
   1571c:	f7f9 fd74 	bl	f208 <bsd_os_timedwait>
   15720:	f8d8 3000 	ldr.w	r3, [r8]
   15724:	2b01      	cmp	r3, #1
   15726:	d0f7      	beq.n	15718 <ip_interface_getaddrinfo+0x104>
   15728:	4b31      	ldr	r3, [pc, #196]	; (157f0 <ip_interface_getaddrinfo+0x1dc>)
   1572a:	6818      	ldr	r0, [r3, #0]
   1572c:	2800      	cmp	r0, #0
   1572e:	d13b      	bne.n	157a8 <ip_interface_getaddrinfo+0x194>
   15730:	4b2e      	ldr	r3, [pc, #184]	; (157ec <ip_interface_getaddrinfo+0x1d8>)
   15732:	9a01      	ldr	r2, [sp, #4]
   15734:	681b      	ldr	r3, [r3, #0]
   15736:	6013      	str	r3, [r2, #0]
   15738:	e00c      	b.n	15754 <ip_interface_getaddrinfo+0x140>
   1573a:	46bb      	mov	fp, r7
   1573c:	e79e      	b.n	1567c <ip_interface_getaddrinfo+0x68>
   1573e:	9c03      	ldr	r4, [sp, #12]
   15740:	2c00      	cmp	r4, #0
   15742:	d1bd      	bne.n	156c0 <ip_interface_getaddrinfo+0xac>
   15744:	200c      	movs	r0, #12
   15746:	2300      	movs	r3, #0
   15748:	f8c8 3000 	str.w	r3, [r8]
   1574c:	b005      	add	sp, #20
   1574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15752:	2073      	movs	r0, #115	; 0x73
   15754:	b005      	add	sp, #20
   15756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1575a:	2016      	movs	r0, #22
   1575c:	b005      	add	sp, #20
   1575e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15762:	6891      	ldr	r1, [r2, #8]
   15764:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   15768:	d18e      	bne.n	15688 <ip_interface_getaddrinfo+0x74>
   1576a:	f240 2102 	movw	r1, #514	; 0x202
   1576e:	68d0      	ldr	r0, [r2, #12]
   15770:	4288      	cmp	r0, r1
   15772:	d189      	bne.n	15688 <ip_interface_getaddrinfo+0x74>
   15774:	6991      	ldr	r1, [r2, #24]
   15776:	2900      	cmp	r1, #0
   15778:	d086      	beq.n	15688 <ip_interface_getaddrinfo+0x74>
   1577a:	6868      	ldr	r0, [r5, #4]
   1577c:	f7fe f9dc 	bl	13b38 <pdn_interface_pdn_id_get>
   15780:	1c43      	adds	r3, r0, #1
   15782:	d081      	beq.n	15688 <ip_interface_getaddrinfo+0x74>
   15784:	4602      	mov	r2, r0
   15786:	e781      	b.n	1568c <ip_interface_getaddrinfo+0x78>
   15788:	68a9      	ldr	r1, [r5, #8]
   1578a:	2902      	cmp	r1, #2
   1578c:	f8c9 1000 	str.w	r1, [r9]
   15790:	d006      	beq.n	157a0 <ip_interface_getaddrinfo+0x18c>
   15792:	2a05      	cmp	r2, #5
   15794:	d0a2      	beq.n	156dc <ip_interface_getaddrinfo+0xc8>
   15796:	2a0a      	cmp	r2, #10
   15798:	bf14      	ite	ne
   1579a:	2201      	movne	r2, #1
   1579c:	2202      	moveq	r2, #2
   1579e:	e79d      	b.n	156dc <ip_interface_getaddrinfo+0xc8>
   157a0:	2102      	movs	r1, #2
   157a2:	f8ca 1000 	str.w	r1, [sl]
   157a6:	e7f4      	b.n	15792 <ip_interface_getaddrinfo+0x17e>
   157a8:	4b11      	ldr	r3, [pc, #68]	; (157f0 <ip_interface_getaddrinfo+0x1dc>)
   157aa:	6818      	ldr	r0, [r3, #0]
   157ac:	2800      	cmp	r0, #0
   157ae:	d0d1      	beq.n	15754 <ip_interface_getaddrinfo+0x140>
   157b0:	e7c9      	b.n	15746 <ip_interface_getaddrinfo+0x132>
   157b2:	4629      	mov	r1, r5
   157b4:	2210      	movs	r2, #16
   157b6:	f104 0014 	add.w	r0, r4, #20
   157ba:	f006 fe61 	bl	1c480 <memset>
   157be:	e794      	b.n	156ea <ip_interface_getaddrinfo+0xd6>
   157c0:	2023      	movs	r0, #35	; 0x23
   157c2:	e7c0      	b.n	15746 <ip_interface_getaddrinfo+0x132>
   157c4:	202f      	movs	r0, #47	; 0x2f
   157c6:	f7f9 fdb3 	bl	f330 <bsd_os_errno_set>
   157ca:	68a2      	ldr	r2, [r4, #8]
   157cc:	3210      	adds	r2, #16
   157ce:	60a2      	str	r2, [r4, #8]
   157d0:	b917      	cbnz	r7, 157d8 <ip_interface_getaddrinfo+0x1c4>
   157d2:	f04f 30ff 	mov.w	r0, #4294967295
   157d6:	e7b6      	b.n	15746 <ip_interface_getaddrinfo+0x132>
   157d8:	6820      	ldr	r0, [r4, #0]
   157da:	2800      	cmp	r0, #0
   157dc:	d0f9      	beq.n	157d2 <ip_interface_getaddrinfo+0x1be>
   157de:	465a      	mov	r2, fp
   157e0:	4639      	mov	r1, r7
   157e2:	f006 fe40 	bl	1c466 <memcpy>
   157e6:	e7f4      	b.n	157d2 <ip_interface_getaddrinfo+0x1be>
   157e8:	200213f2 	.word	0x200213f2
   157ec:	20020768 	.word	0x20020768
   157f0:	20020760 	.word	0x20020760
   157f4:	20020758 	.word	0x20020758
   157f8:	2002075c 	.word	0x2002075c
   157fc:	20020764 	.word	0x20020764

00015800 <ip_interface_freeaddrinfo>:
   15800:	b538      	push	{r3, r4, r5, lr}
   15802:	4c0b      	ldr	r4, [pc, #44]	; (15830 <ip_interface_freeaddrinfo+0x30>)
   15804:	6823      	ldr	r3, [r4, #0]
   15806:	2b02      	cmp	r3, #2
   15808:	d000      	beq.n	1580c <ip_interface_freeaddrinfo+0xc>
   1580a:	bd38      	pop	{r3, r4, r5, pc}
   1580c:	b130      	cbz	r0, 1581c <ip_interface_freeaddrinfo+0x1c>
   1580e:	4605      	mov	r5, r0
   15810:	6940      	ldr	r0, [r0, #20]
   15812:	f7fb fab9 	bl	10d88 <nrf_free>
   15816:	4628      	mov	r0, r5
   15818:	f7fb fab6 	bl	10d88 <nrf_free>
   1581c:	2300      	movs	r3, #0
   1581e:	4a05      	ldr	r2, [pc, #20]	; (15834 <ip_interface_freeaddrinfo+0x34>)
   15820:	4905      	ldr	r1, [pc, #20]	; (15838 <ip_interface_freeaddrinfo+0x38>)
   15822:	6023      	str	r3, [r4, #0]
   15824:	6013      	str	r3, [r2, #0]
   15826:	6808      	ldr	r0, [r1, #0]
   15828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1582c:	f7fb bb0c 	b.w	10e48 <rpc_ip_client_data_free>
   15830:	20020764 	.word	0x20020764
   15834:	20020760 	.word	0x20020760
   15838:	2002076c 	.word	0x2002076c

0001583c <rpc_ip_event_handler>:
   1583c:	f248 030d 	movw	r3, #32781	; 0x800d
   15840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15844:	4299      	cmp	r1, r3
   15846:	b089      	sub	sp, #36	; 0x24
   15848:	4605      	mov	r5, r0
   1584a:	d062      	beq.n	15912 <rpc_ip_event_handler+0xd6>
   1584c:	f248 030f 	movw	r3, #32783	; 0x800f
   15850:	4299      	cmp	r1, r3
   15852:	460c      	mov	r4, r1
   15854:	d04b      	beq.n	158ee <rpc_ip_event_handler+0xb2>
   15856:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1585a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1585e:	68c0      	ldr	r0, [r0, #12]
   15860:	d07b      	beq.n	1595a <rpc_ip_event_handler+0x11e>
   15862:	0c07      	lsrs	r7, r0, #16
   15864:	4638      	mov	r0, r7
   15866:	f000 fba1 	bl	15fac <interface_socket_from_handle_get>
   1586a:	4606      	mov	r6, r0
   1586c:	2800      	cmp	r0, #0
   1586e:	d05f      	beq.n	15930 <rpc_ip_event_handler+0xf4>
   15870:	4601      	mov	r1, r0
   15872:	4623      	mov	r3, r4
   15874:	462a      	mov	r2, r5
   15876:	4638      	mov	r0, r7
   15878:	f7fb ff1e 	bl	116b8 <tls_rpc_ip_event_handler>
   1587c:	2800      	cmp	r0, #0
   1587e:	d053      	beq.n	15928 <rpc_ip_event_handler+0xec>
   15880:	f248 0307 	movw	r3, #32775	; 0x8007
   15884:	429c      	cmp	r4, r3
   15886:	d97d      	bls.n	15984 <rpc_ip_event_handler+0x148>
   15888:	f248 030c 	movw	r3, #32780	; 0x800c
   1588c:	429c      	cmp	r4, r3
   1588e:	d068      	beq.n	15962 <rpc_ip_event_handler+0x126>
   15890:	f240 8119 	bls.w	15ac6 <rpc_ip_event_handler+0x28a>
   15894:	f249 0302 	movw	r3, #36866	; 0x9002
   15898:	429c      	cmp	r4, r3
   1589a:	f000 8195 	beq.w	15bc8 <rpc_ip_event_handler+0x38c>
   1589e:	f249 0303 	movw	r3, #36867	; 0x9003
   158a2:	429c      	cmp	r4, r3
   158a4:	f000 81aa 	beq.w	15bfc <rpc_ip_event_handler+0x3c0>
   158a8:	f249 0301 	movw	r3, #36865	; 0x9001
   158ac:	429c      	cmp	r4, r3
   158ae:	d13f      	bne.n	15930 <rpc_ip_event_handler+0xf4>
   158b0:	6834      	ldr	r4, [r6, #0]
   158b2:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   158b6:	f000 81c2 	beq.w	15c3e <rpc_ip_event_handler+0x402>
   158ba:	68ab      	ldr	r3, [r5, #8]
   158bc:	2b04      	cmp	r3, #4
   158be:	f200 81ff 	bhi.w	15cc0 <rpc_ip_event_handler+0x484>
   158c2:	2400      	movs	r4, #0
   158c4:	4627      	mov	r7, r4
   158c6:	6829      	ldr	r1, [r5, #0]
   158c8:	686a      	ldr	r2, [r5, #4]
   158ca:	e9cd 7406 	strd	r7, r4, [sp, #24]
   158ce:	e9cd 1204 	strd	r1, r2, [sp, #16]
   158d2:	69f0      	ldr	r0, [r6, #28]
   158d4:	a904      	add	r1, sp, #16
   158d6:	6803      	ldr	r3, [r0, #0]
   158d8:	685b      	ldr	r3, [r3, #4]
   158da:	4798      	blx	r3
   158dc:	3001      	adds	r0, #1
   158de:	f000 81db 	beq.w	15c98 <rpc_ip_event_handler+0x45c>
   158e2:	6833      	ldr	r3, [r6, #0]
   158e4:	2000      	movs	r0, #0
   158e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   158ea:	6033      	str	r3, [r6, #0]
   158ec:	e00e      	b.n	1590c <rpc_ip_event_handler+0xd0>
   158ee:	6943      	ldr	r3, [r0, #20]
   158f0:	2001      	movs	r0, #1
   158f2:	2b10      	cmp	r3, #16
   158f4:	49b7      	ldr	r1, [pc, #732]	; (15bd4 <rpc_ip_event_handler+0x398>)
   158f6:	bf88      	it	hi
   158f8:	222d      	movhi	r2, #45	; 0x2d
   158fa:	7008      	strb	r0, [r1, #0]
   158fc:	f04f 0000 	mov.w	r0, #0
   15900:	bf9c      	itt	ls
   15902:	4ab5      	ldrls	r2, [pc, #724]	; (15bd8 <rpc_ip_event_handler+0x39c>)
   15904:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   15908:	4bb4      	ldr	r3, [pc, #720]	; (15bdc <rpc_ip_event_handler+0x3a0>)
   1590a:	601a      	str	r2, [r3, #0]
   1590c:	b009      	add	sp, #36	; 0x24
   1590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15912:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 15bf0 <rpc_ip_event_handler+0x3b4>
   15916:	6807      	ldr	r7, [r0, #0]
   15918:	f8d9 3000 	ldr.w	r3, [r9]
   1591c:	2b01      	cmp	r3, #1
   1591e:	d00b      	beq.n	15938 <rpc_ip_event_handler+0xfc>
   15920:	b117      	cbz	r7, 15928 <rpc_ip_event_handler+0xec>
   15922:	4638      	mov	r0, r7
   15924:	f7fb fa90 	bl	10e48 <rpc_ip_client_data_free>
   15928:	2000      	movs	r0, #0
   1592a:	b009      	add	sp, #36	; 0x24
   1592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15930:	6828      	ldr	r0, [r5, #0]
   15932:	2800      	cmp	r0, #0
   15934:	d1f6      	bne.n	15924 <rpc_ip_event_handler+0xe8>
   15936:	e7f7      	b.n	15928 <rpc_ip_event_handler+0xec>
   15938:	6943      	ldr	r3, [r0, #20]
   1593a:	2b00      	cmp	r3, #0
   1593c:	d046      	beq.n	159cc <rpc_ip_event_handler+0x190>
   1593e:	2b10      	cmp	r3, #16
   15940:	bf96      	itet	ls
   15942:	4aa5      	ldrls	r2, [pc, #660]	; (15bd8 <rpc_ip_event_handler+0x39c>)
   15944:	232d      	movhi	r3, #45	; 0x2d
   15946:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1594a:	2202      	movs	r2, #2
   1594c:	49a4      	ldr	r1, [pc, #656]	; (15be0 <rpc_ip_event_handler+0x3a4>)
   1594e:	600b      	str	r3, [r1, #0]
   15950:	f8c9 2000 	str.w	r2, [r9]
   15954:	2f00      	cmp	r7, #0
   15956:	d1e4      	bne.n	15922 <rpc_ip_event_handler+0xe6>
   15958:	e7e6      	b.n	15928 <rpc_ip_event_handler+0xec>
   1595a:	f000 fad5 	bl	15f08 <interface_from_internal_id_search>
   1595e:	4607      	mov	r7, r0
   15960:	e780      	b.n	15864 <rpc_ip_event_handler+0x28>
   15962:	6833      	ldr	r3, [r6, #0]
   15964:	b29b      	uxth	r3, r3
   15966:	2b08      	cmp	r3, #8
   15968:	d1de      	bne.n	15928 <rpc_ip_event_handler+0xec>
   1596a:	696b      	ldr	r3, [r5, #20]
   1596c:	2b00      	cmp	r3, #0
   1596e:	f000 819c 	beq.w	15caa <rpc_ip_event_handler+0x46e>
   15972:	2b10      	cmp	r3, #16
   15974:	f200 8161 	bhi.w	15c3a <rpc_ip_event_handler+0x3fe>
   15978:	4a97      	ldr	r2, [pc, #604]	; (15bd8 <rpc_ip_event_handler+0x39c>)
   1597a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1597e:	6073      	str	r3, [r6, #4]
   15980:	2000      	movs	r0, #0
   15982:	e7c3      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15984:	f248 0306 	movw	r3, #32774	; 0x8006
   15988:	429c      	cmp	r4, r3
   1598a:	f080 810d 	bcs.w	15ba8 <rpc_ip_event_handler+0x36c>
   1598e:	f248 0302 	movw	r3, #32770	; 0x8002
   15992:	429c      	cmp	r4, r3
   15994:	f000 80f0 	beq.w	15b78 <rpc_ip_event_handler+0x33c>
   15998:	f240 80be 	bls.w	15b18 <rpc_ip_event_handler+0x2dc>
   1599c:	f248 0303 	movw	r3, #32771	; 0x8003
   159a0:	429c      	cmp	r4, r3
   159a2:	f000 80ca 	beq.w	15b3a <rpc_ip_event_handler+0x2fe>
   159a6:	f248 0305 	movw	r3, #32773	; 0x8005
   159aa:	429c      	cmp	r4, r3
   159ac:	d1c0      	bne.n	15930 <rpc_ip_event_handler+0xf4>
   159ae:	6833      	ldr	r3, [r6, #0]
   159b0:	b29b      	uxth	r3, r3
   159b2:	2b03      	cmp	r3, #3
   159b4:	d1b8      	bne.n	15928 <rpc_ip_event_handler+0xec>
   159b6:	696b      	ldr	r3, [r5, #20]
   159b8:	2b00      	cmp	r3, #0
   159ba:	d1da      	bne.n	15972 <rpc_ip_event_handler+0x136>
   159bc:	6833      	ldr	r3, [r6, #0]
   159be:	2000      	movs	r0, #0
   159c0:	0c1b      	lsrs	r3, r3, #16
   159c2:	041b      	lsls	r3, r3, #16
   159c4:	f043 0304 	orr.w	r3, r3, #4
   159c8:	6033      	str	r3, [r6, #0]
   159ca:	e79f      	b.n	1590c <rpc_ip_event_handler+0xd0>
   159cc:	4b85      	ldr	r3, [pc, #532]	; (15be4 <rpc_ip_event_handler+0x3a8>)
   159ce:	601f      	str	r7, [r3, #0]
   159d0:	6984      	ldr	r4, [r0, #24]
   159d2:	0163      	lsls	r3, r4, #5
   159d4:	4618      	mov	r0, r3
   159d6:	9303      	str	r3, [sp, #12]
   159d8:	f7fb f9cc 	bl	10d74 <nrf_malloc>
   159dc:	9002      	str	r0, [sp, #8]
   159de:	2800      	cmp	r0, #0
   159e0:	f000 808a 	beq.w	15af8 <rpc_ip_event_handler+0x2bc>
   159e4:	00e5      	lsls	r5, r4, #3
   159e6:	1928      	adds	r0, r5, r4
   159e8:	0080      	lsls	r0, r0, #2
   159ea:	f7fb f9c3 	bl	10d74 <nrf_malloc>
   159ee:	2800      	cmp	r0, #0
   159f0:	f000 811f 	beq.w	15c32 <rpc_ip_event_handler+0x3f6>
   159f4:	2c00      	cmp	r4, #0
   159f6:	d05e      	beq.n	15ab6 <rpc_ip_event_handler+0x27a>
   159f8:	3510      	adds	r5, #16
   159fa:	1943      	adds	r3, r0, r5
   159fc:	9301      	str	r3, [sp, #4]
   159fe:	9b02      	ldr	r3, [sp, #8]
   15a00:	2404      	movs	r4, #4
   15a02:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 15bf4 <rpc_ip_event_handler+0x3b8>
   15a06:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 15bf8 <rpc_ip_event_handler+0x3bc>
   15a0a:	f100 0810 	add.w	r8, r0, #16
   15a0e:	f103 0620 	add.w	r6, r3, #32
   15a12:	e01d      	b.n	15a50 <rpc_ip_event_handler+0x214>
   15a14:	220a      	movs	r2, #10
   15a16:	f848 2c0c 	str.w	r2, [r8, #-12]
   15a1a:	f04f 0224 	mov.w	r2, #36	; 0x24
   15a1e:	4640      	mov	r0, r8
   15a20:	f808 2c10 	strb.w	r2, [r8, #-16]
   15a24:	f828 3c08 	strh.w	r3, [r8, #-8]
   15a28:	f856 2c10 	ldr.w	r2, [r6, #-16]
   15a2c:	f006 fd1b 	bl	1c466 <memcpy>
   15a30:	f856 3c10 	ldr.w	r3, [r6, #-16]
   15a34:	f108 0808 	add.w	r8, r8, #8
   15a38:	441c      	add	r4, r3
   15a3a:	193b      	adds	r3, r7, r4
   15a3c:	f846 3c08 	str.w	r3, [r6, #-8]
   15a40:	9b01      	ldr	r3, [sp, #4]
   15a42:	f846 6c04 	str.w	r6, [r6, #-4]
   15a46:	4598      	cmp	r8, r3
   15a48:	442c      	add	r4, r5
   15a4a:	f106 0620 	add.w	r6, r6, #32
   15a4e:	d02c      	beq.n	15aaa <rpc_ip_event_handler+0x26e>
   15a50:	593b      	ldr	r3, [r7, r4]
   15a52:	193a      	adds	r2, r7, r4
   15a54:	f846 3c20 	str.w	r3, [r6, #-32]
   15a58:	6853      	ldr	r3, [r2, #4]
   15a5a:	f8da 1000 	ldr.w	r1, [sl]
   15a5e:	2b02      	cmp	r3, #2
   15a60:	bf14      	ite	ne
   15a62:	2002      	movne	r0, #2
   15a64:	200a      	moveq	r0, #10
   15a66:	f8db 3000 	ldr.w	r3, [fp]
   15a6a:	e946 0107 	strd	r0, r1, [r6, #-28]
   15a6e:	f846 3c14 	str.w	r3, [r6, #-20]
   15a72:	8a10      	ldrh	r0, [r2, #16]
   15a74:	f1a8 0310 	sub.w	r3, r8, #16
   15a78:	f846 0c10 	str.w	r0, [r6, #-16]
   15a7c:	8a55      	ldrh	r5, [r2, #18]
   15a7e:	f846 3c0c 	str.w	r3, [r6, #-12]
   15a82:	4b59      	ldr	r3, [pc, #356]	; (15be8 <rpc_ip_event_handler+0x3ac>)
   15a84:	3414      	adds	r4, #20
   15a86:	2804      	cmp	r0, #4
   15a88:	eb07 0104 	add.w	r1, r7, r4
   15a8c:	881b      	ldrh	r3, [r3, #0]
   15a8e:	d1c1      	bne.n	15a14 <rpc_ip_event_handler+0x1d8>
   15a90:	2210      	movs	r2, #16
   15a92:	2002      	movs	r0, #2
   15a94:	f828 3c08 	strh.w	r3, [r8, #-8]
   15a98:	f848 0c0c 	str.w	r0, [r8, #-12]
   15a9c:	f808 2c10 	strb.w	r2, [r8, #-16]
   15aa0:	f856 2c10 	ldr.w	r2, [r6, #-16]
   15aa4:	f1a8 0004 	sub.w	r0, r8, #4
   15aa8:	e7c0      	b.n	15a2c <rpc_ip_event_handler+0x1f0>
   15aaa:	2200      	movs	r2, #0
   15aac:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   15ab0:	440b      	add	r3, r1
   15ab2:	f843 2c04 	str.w	r2, [r3, #-4]
   15ab6:	2202      	movs	r2, #2
   15ab8:	4b4c      	ldr	r3, [pc, #304]	; (15bec <rpc_ip_event_handler+0x3b0>)
   15aba:	f8c9 2000 	str.w	r2, [r9]
   15abe:	9a02      	ldr	r2, [sp, #8]
   15ac0:	2000      	movs	r0, #0
   15ac2:	601a      	str	r2, [r3, #0]
   15ac4:	e722      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15ac6:	f248 0308 	movw	r3, #32776	; 0x8008
   15aca:	429c      	cmp	r4, r3
   15acc:	d045      	beq.n	15b5a <rpc_ip_event_handler+0x31e>
   15ace:	f248 0309 	movw	r3, #32777	; 0x8009
   15ad2:	429c      	cmp	r4, r3
   15ad4:	f47f af2c 	bne.w	15930 <rpc_ip_event_handler+0xf4>
   15ad8:	6833      	ldr	r3, [r6, #0]
   15ada:	b29b      	uxth	r3, r3
   15adc:	2b0d      	cmp	r3, #13
   15ade:	f47f af23 	bne.w	15928 <rpc_ip_event_handler+0xec>
   15ae2:	6968      	ldr	r0, [r5, #20]
   15ae4:	2800      	cmp	r0, #0
   15ae6:	f000 80d9 	beq.w	15c9c <rpc_ip_event_handler+0x460>
   15aea:	2810      	cmp	r0, #16
   15aec:	f200 80a5 	bhi.w	15c3a <rpc_ip_event_handler+0x3fe>
   15af0:	4b39      	ldr	r3, [pc, #228]	; (15bd8 <rpc_ip_event_handler+0x39c>)
   15af2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15af6:	e742      	b.n	1597e <rpc_ip_event_handler+0x142>
   15af8:	f7fb f946 	bl	10d88 <nrf_free>
   15afc:	200c      	movs	r0, #12
   15afe:	2302      	movs	r3, #2
   15b00:	4937      	ldr	r1, [pc, #220]	; (15be0 <rpc_ip_event_handler+0x3a4>)
   15b02:	4a3a      	ldr	r2, [pc, #232]	; (15bec <rpc_ip_event_handler+0x3b0>)
   15b04:	6008      	str	r0, [r1, #0]
   15b06:	682f      	ldr	r7, [r5, #0]
   15b08:	9902      	ldr	r1, [sp, #8]
   15b0a:	f8c9 3000 	str.w	r3, [r9]
   15b0e:	6011      	str	r1, [r2, #0]
   15b10:	2f00      	cmp	r7, #0
   15b12:	f47f af06 	bne.w	15922 <rpc_ip_event_handler+0xe6>
   15b16:	e707      	b.n	15928 <rpc_ip_event_handler+0xec>
   15b18:	f248 0301 	movw	r3, #32769	; 0x8001
   15b1c:	429c      	cmp	r4, r3
   15b1e:	f47f af07 	bne.w	15930 <rpc_ip_event_handler+0xf4>
   15b22:	6833      	ldr	r3, [r6, #0]
   15b24:	2b01      	cmp	r3, #1
   15b26:	f47f aeff 	bne.w	15928 <rpc_ip_event_handler+0xec>
   15b2a:	6968      	ldr	r0, [r5, #20]
   15b2c:	2800      	cmp	r0, #0
   15b2e:	d1dc      	bne.n	15aea <rpc_ip_event_handler+0x2ae>
   15b30:	2302      	movs	r3, #2
   15b32:	6033      	str	r3, [r6, #0]
   15b34:	69ab      	ldr	r3, [r5, #24]
   15b36:	61b3      	str	r3, [r6, #24]
   15b38:	e6e8      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15b3a:	6833      	ldr	r3, [r6, #0]
   15b3c:	025b      	lsls	r3, r3, #9
   15b3e:	f57f aef3 	bpl.w	15928 <rpc_ip_event_handler+0xec>
   15b42:	6968      	ldr	r0, [r5, #20]
   15b44:	2800      	cmp	r0, #0
   15b46:	f000 80a0 	beq.w	15c8a <rpc_ip_event_handler+0x44e>
   15b4a:	2810      	cmp	r0, #16
   15b4c:	bf8e      	itee	hi
   15b4e:	232d      	movhi	r3, #45	; 0x2d
   15b50:	4b21      	ldrls	r3, [pc, #132]	; (15bd8 <rpc_ip_event_handler+0x39c>)
   15b52:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   15b56:	6073      	str	r3, [r6, #4]
   15b58:	e6e6      	b.n	15928 <rpc_ip_event_handler+0xec>
   15b5a:	6833      	ldr	r3, [r6, #0]
   15b5c:	b29b      	uxth	r3, r3
   15b5e:	2b06      	cmp	r3, #6
   15b60:	f47f aee2 	bne.w	15928 <rpc_ip_event_handler+0xec>
   15b64:	6968      	ldr	r0, [r5, #20]
   15b66:	2800      	cmp	r0, #0
   15b68:	d1bf      	bne.n	15aea <rpc_ip_event_handler+0x2ae>
   15b6a:	6833      	ldr	r3, [r6, #0]
   15b6c:	0c1b      	lsrs	r3, r3, #16
   15b6e:	041b      	lsls	r3, r3, #16
   15b70:	f043 0307 	orr.w	r3, r3, #7
   15b74:	6033      	str	r3, [r6, #0]
   15b76:	e6c9      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15b78:	6833      	ldr	r3, [r6, #0]
   15b7a:	0099      	lsls	r1, r3, #2
   15b7c:	f57f aed4 	bpl.w	15928 <rpc_ip_event_handler+0xec>
   15b80:	6833      	ldr	r3, [r6, #0]
   15b82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   15b86:	6033      	str	r3, [r6, #0]
   15b88:	6968      	ldr	r0, [r5, #20]
   15b8a:	2800      	cmp	r0, #0
   15b8c:	d06e      	beq.n	15c6c <rpc_ip_event_handler+0x430>
   15b8e:	2810      	cmp	r0, #16
   15b90:	f200 8080 	bhi.w	15c94 <rpc_ip_event_handler+0x458>
   15b94:	4b10      	ldr	r3, [pc, #64]	; (15bd8 <rpc_ip_event_handler+0x39c>)
   15b96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15b9a:	6073      	str	r3, [r6, #4]
   15b9c:	6833      	ldr	r3, [r6, #0]
   15b9e:	2000      	movs	r0, #0
   15ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   15ba4:	6033      	str	r3, [r6, #0]
   15ba6:	e6b1      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15ba8:	6833      	ldr	r3, [r6, #0]
   15baa:	029a      	lsls	r2, r3, #10
   15bac:	f57f aebc 	bpl.w	15928 <rpc_ip_event_handler+0xec>
   15bb0:	696b      	ldr	r3, [r5, #20]
   15bb2:	2b00      	cmp	r3, #0
   15bb4:	d051      	beq.n	15c5a <rpc_ip_event_handler+0x41e>
   15bb6:	2b6b      	cmp	r3, #107	; 0x6b
   15bb8:	f000 8086 	beq.w	15cc8 <rpc_ip_event_handler+0x48c>
   15bbc:	2b10      	cmp	r3, #16
   15bbe:	d869      	bhi.n	15c94 <rpc_ip_event_handler+0x458>
   15bc0:	4a05      	ldr	r2, [pc, #20]	; (15bd8 <rpc_ip_event_handler+0x39c>)
   15bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bc6:	e7e8      	b.n	15b9a <rpc_ip_event_handler+0x35e>
   15bc8:	6833      	ldr	r3, [r6, #0]
   15bca:	b29b      	uxth	r3, r3
   15bcc:	2b07      	cmp	r3, #7
   15bce:	f47f aeab 	bne.w	15928 <rpc_ip_event_handler+0xec>
   15bd2:	e686      	b.n	158e2 <rpc_ip_event_handler+0xa6>
   15bd4:	2002175f 	.word	0x2002175f
   15bd8:	0001d850 	.word	0x0001d850
   15bdc:	20020794 	.word	0x20020794
   15be0:	20020760 	.word	0x20020760
   15be4:	2002076c 	.word	0x2002076c
   15be8:	200213f2 	.word	0x200213f2
   15bec:	20020768 	.word	0x20020768
   15bf0:	20020764 	.word	0x20020764
   15bf4:	2002075c 	.word	0x2002075c
   15bf8:	20020758 	.word	0x20020758
   15bfc:	6833      	ldr	r3, [r6, #0]
   15bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   15c02:	6033      	str	r3, [r6, #0]
   15c04:	6833      	ldr	r3, [r6, #0]
   15c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   15c0a:	6033      	str	r3, [r6, #0]
   15c0c:	6833      	ldr	r3, [r6, #0]
   15c0e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15c12:	6033      	str	r3, [r6, #0]
   15c14:	692b      	ldr	r3, [r5, #16]
   15c16:	2b6c      	cmp	r3, #108	; 0x6c
   15c18:	d016      	beq.n	15c48 <rpc_ip_event_handler+0x40c>
   15c1a:	2b10      	cmp	r3, #16
   15c1c:	bf8c      	ite	hi
   15c1e:	232d      	movhi	r3, #45	; 0x2d
   15c20:	4a46      	ldrls	r2, [pc, #280]	; (15d3c <rpc_ip_event_handler+0x500>)
   15c22:	f04f 0000 	mov.w	r0, #0
   15c26:	bf98      	it	ls
   15c28:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   15c2c:	6073      	str	r3, [r6, #4]
   15c2e:	60b3      	str	r3, [r6, #8]
   15c30:	e66c      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15c32:	220c      	movs	r2, #12
   15c34:	4b42      	ldr	r3, [pc, #264]	; (15d40 <rpc_ip_event_handler+0x504>)
   15c36:	601a      	str	r2, [r3, #0]
   15c38:	e73d      	b.n	15ab6 <rpc_ip_event_handler+0x27a>
   15c3a:	232d      	movs	r3, #45	; 0x2d
   15c3c:	e69f      	b.n	1597e <rpc_ip_event_handler+0x142>
   15c3e:	6828      	ldr	r0, [r5, #0]
   15c40:	f7fb f902 	bl	10e48 <rpc_ip_client_data_free>
   15c44:	4620      	mov	r0, r4
   15c46:	e661      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15c48:	2239      	movs	r2, #57	; 0x39
   15c4a:	6833      	ldr	r3, [r6, #0]
   15c4c:	2000      	movs	r0, #0
   15c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   15c52:	6033      	str	r3, [r6, #0]
   15c54:	6072      	str	r2, [r6, #4]
   15c56:	60b2      	str	r2, [r6, #8]
   15c58:	e658      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15c5a:	6833      	ldr	r3, [r6, #0]
   15c5c:	4a39      	ldr	r2, [pc, #228]	; (15d44 <rpc_ip_event_handler+0x508>)
   15c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15c62:	6033      	str	r3, [r6, #0]
   15c64:	2001      	movs	r0, #1
   15c66:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   15c6a:	e64f      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15c6c:	6833      	ldr	r3, [r6, #0]
   15c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15c72:	6033      	str	r3, [r6, #0]
   15c74:	6833      	ldr	r3, [r6, #0]
   15c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15c7a:	6033      	str	r3, [r6, #0]
   15c7c:	6833      	ldr	r3, [r6, #0]
   15c7e:	0c1b      	lsrs	r3, r3, #16
   15c80:	041b      	lsls	r3, r3, #16
   15c82:	f043 0305 	orr.w	r3, r3, #5
   15c86:	6033      	str	r3, [r6, #0]
   15c88:	e640      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15c8a:	6833      	ldr	r3, [r6, #0]
   15c8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   15c90:	6033      	str	r3, [r6, #0]
   15c92:	e63b      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15c94:	232d      	movs	r3, #45	; 0x2d
   15c96:	e780      	b.n	15b9a <rpc_ip_event_handler+0x35e>
   15c98:	2002      	movs	r0, #2
   15c9a:	e637      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15c9c:	6833      	ldr	r3, [r6, #0]
   15c9e:	0c1b      	lsrs	r3, r3, #16
   15ca0:	041b      	lsls	r3, r3, #16
   15ca2:	f043 030e 	orr.w	r3, r3, #14
   15ca6:	6033      	str	r3, [r6, #0]
   15ca8:	e630      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15caa:	4b26      	ldr	r3, [pc, #152]	; (15d44 <rpc_ip_event_handler+0x508>)
   15cac:	2001      	movs	r0, #1
   15cae:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   15cb2:	6833      	ldr	r3, [r6, #0]
   15cb4:	0c1b      	lsrs	r3, r3, #16
   15cb6:	041b      	lsls	r3, r3, #16
   15cb8:	f043 0309 	orr.w	r3, r3, #9
   15cbc:	6033      	str	r3, [r6, #0]
   15cbe:	e625      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15cc0:	8a6c      	ldrh	r4, [r5, #18]
   15cc2:	b934      	cbnz	r4, 15cd2 <rpc_ip_event_handler+0x496>
   15cc4:	4627      	mov	r7, r4
   15cc6:	e5fe      	b.n	158c6 <rpc_ip_event_handler+0x8a>
   15cc8:	6933      	ldr	r3, [r6, #16]
   15cca:	2b01      	cmp	r3, #1
   15ccc:	d012      	beq.n	15cf4 <rpc_ip_event_handler+0x4b8>
   15cce:	230c      	movs	r3, #12
   15cd0:	e763      	b.n	15b9a <rpc_ip_event_handler+0x35e>
   15cd2:	2024      	movs	r0, #36	; 0x24
   15cd4:	f7fb f84e 	bl	10d74 <nrf_malloc>
   15cd8:	4607      	mov	r7, r0
   15cda:	b358      	cbz	r0, 15d34 <rpc_ip_event_handler+0x4f8>
   15cdc:	8a6a      	ldrh	r2, [r5, #18]
   15cde:	2a10      	cmp	r2, #16
   15ce0:	d01c      	beq.n	15d1c <rpc_ip_event_handler+0x4e0>
   15ce2:	2a04      	cmp	r2, #4
   15ce4:	d00e      	beq.n	15d04 <rpc_ip_event_handler+0x4c8>
   15ce6:	6828      	ldr	r0, [r5, #0]
   15ce8:	f7fb f8ae 	bl	10e48 <rpc_ip_client_data_free>
   15cec:	4638      	mov	r0, r7
   15cee:	f7fb f84b 	bl	10d88 <nrf_free>
   15cf2:	e619      	b.n	15928 <rpc_ip_event_handler+0xec>
   15cf4:	220c      	movs	r2, #12
   15cf6:	6833      	ldr	r3, [r6, #0]
   15cf8:	2000      	movs	r0, #0
   15cfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   15cfe:	6033      	str	r3, [r6, #0]
   15d00:	6072      	str	r2, [r6, #4]
   15d02:	e603      	b.n	1590c <rpc_ip_event_handler+0xd0>
   15d04:	2302      	movs	r3, #2
   15d06:	2410      	movs	r4, #16
   15d08:	6043      	str	r3, [r0, #4]
   15d0a:	7004      	strb	r4, [r0, #0]
   15d0c:	8a2b      	ldrh	r3, [r5, #16]
   15d0e:	f105 0114 	add.w	r1, r5, #20
   15d12:	8103      	strh	r3, [r0, #8]
   15d14:	300c      	adds	r0, #12
   15d16:	f006 fba6 	bl	1c466 <memcpy>
   15d1a:	e5d4      	b.n	158c6 <rpc_ip_event_handler+0x8a>
   15d1c:	230a      	movs	r3, #10
   15d1e:	2424      	movs	r4, #36	; 0x24
   15d20:	6043      	str	r3, [r0, #4]
   15d22:	7004      	strb	r4, [r0, #0]
   15d24:	8a2b      	ldrh	r3, [r5, #16]
   15d26:	f105 0114 	add.w	r1, r5, #20
   15d2a:	8103      	strh	r3, [r0, #8]
   15d2c:	3010      	adds	r0, #16
   15d2e:	f006 fb9a 	bl	1c466 <memcpy>
   15d32:	e5c8      	b.n	158c6 <rpc_ip_event_handler+0x8a>
   15d34:	6828      	ldr	r0, [r5, #0]
   15d36:	f7fb f887 	bl	10e48 <rpc_ip_client_data_free>
   15d3a:	e5f5      	b.n	15928 <rpc_ip_event_handler+0xec>
   15d3c:	0001d850 	.word	0x0001d850
   15d40:	20020760 	.word	0x20020760
   15d44:	20020770 	.word	0x20020770

00015d48 <interface_init>:
   15d48:	b508      	push	{r3, lr}
   15d4a:	f44f 72a2 	mov.w	r2, #324	; 0x144
   15d4e:	2100      	movs	r1, #0
   15d50:	4802      	ldr	r0, [pc, #8]	; (15d5c <interface_init+0x14>)
   15d52:	f006 fb95 	bl	1c480 <memset>
   15d56:	2000      	movs	r0, #0
   15d58:	bd08      	pop	{r3, pc}
   15d5a:	bf00      	nop
   15d5c:	20021764 	.word	0x20021764

00015d60 <interface_socket_allocate>:
   15d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d62:	4b30      	ldr	r3, [pc, #192]	; (15e24 <interface_socket_allocate+0xc4>)
   15d64:	4606      	mov	r6, r0
   15d66:	681d      	ldr	r5, [r3, #0]
   15d68:	4608      	mov	r0, r1
   15d6a:	b31d      	cbz	r5, 15db4 <interface_socket_allocate+0x54>
   15d6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   15d6e:	2c00      	cmp	r4, #0
   15d70:	d04a      	beq.n	15e08 <interface_socket_allocate+0xa8>
   15d72:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   15d74:	2c00      	cmp	r4, #0
   15d76:	d049      	beq.n	15e0c <interface_socket_allocate+0xac>
   15d78:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   15d7a:	2c00      	cmp	r4, #0
   15d7c:	d048      	beq.n	15e10 <interface_socket_allocate+0xb0>
   15d7e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   15d82:	2900      	cmp	r1, #0
   15d84:	d046      	beq.n	15e14 <interface_socket_allocate+0xb4>
   15d86:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   15d8a:	b191      	cbz	r1, 15db2 <interface_socket_allocate+0x52>
   15d8c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   15d90:	2900      	cmp	r1, #0
   15d92:	d043      	beq.n	15e1c <interface_socket_allocate+0xbc>
   15d94:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   15d98:	2900      	cmp	r1, #0
   15d9a:	d041      	beq.n	15e20 <interface_socket_allocate+0xc0>
   15d9c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   15da0:	2900      	cmp	r1, #0
   15da2:	d039      	beq.n	15e18 <interface_socket_allocate+0xb8>
   15da4:	f04f 35ff 	mov.w	r5, #4294967295
   15da8:	2069      	movs	r0, #105	; 0x69
   15daa:	f7f9 fac1 	bl	f330 <bsd_os_errno_set>
   15dae:	4628      	mov	r0, r5
   15db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15db2:	2505      	movs	r5, #5
   15db4:	f04f 0c01 	mov.w	ip, #1
   15db8:	f04f 37ff 	mov.w	r7, #4294967295
   15dbc:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   15dc0:	00a4      	lsls	r4, r4, #2
   15dc2:	f843 c004 	str.w	ip, [r3, r4]
   15dc6:	441c      	add	r4, r3
   15dc8:	4611      	mov	r1, r2
   15dca:	61a7      	str	r7, [r4, #24]
   15dcc:	4622      	mov	r2, r4
   15dce:	f001 ffd1 	bl	17d74 <packet_handler_create>
   15dd2:	4603      	mov	r3, r0
   15dd4:	61e0      	str	r0, [r4, #28]
   15dd6:	b158      	cbz	r0, 15df0 <interface_socket_allocate+0x90>
   15dd8:	681b      	ldr	r3, [r3, #0]
   15dda:	681b      	ldr	r3, [r3, #0]
   15ddc:	4798      	blx	r3
   15dde:	b910      	cbnz	r0, 15de6 <interface_socket_allocate+0x86>
   15de0:	6034      	str	r4, [r6, #0]
   15de2:	4628      	mov	r0, r5
   15de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15de6:	69e0      	ldr	r0, [r4, #28]
   15de8:	f001 ffe4 	bl	17db4 <packet_handler_delete>
   15dec:	2300      	movs	r3, #0
   15dee:	61e3      	str	r3, [r4, #28]
   15df0:	f04f 35ff 	mov.w	r5, #4294967295
   15df4:	2224      	movs	r2, #36	; 0x24
   15df6:	2100      	movs	r1, #0
   15df8:	4620      	mov	r0, r4
   15dfa:	f006 fb41 	bl	1c480 <memset>
   15dfe:	200c      	movs	r0, #12
   15e00:	f7f9 fa96 	bl	f330 <bsd_os_errno_set>
   15e04:	4628      	mov	r0, r5
   15e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e08:	2501      	movs	r5, #1
   15e0a:	e7d3      	b.n	15db4 <interface_socket_allocate+0x54>
   15e0c:	2502      	movs	r5, #2
   15e0e:	e7d1      	b.n	15db4 <interface_socket_allocate+0x54>
   15e10:	2503      	movs	r5, #3
   15e12:	e7cf      	b.n	15db4 <interface_socket_allocate+0x54>
   15e14:	2504      	movs	r5, #4
   15e16:	e7cd      	b.n	15db4 <interface_socket_allocate+0x54>
   15e18:	2508      	movs	r5, #8
   15e1a:	e7cb      	b.n	15db4 <interface_socket_allocate+0x54>
   15e1c:	2506      	movs	r5, #6
   15e1e:	e7c9      	b.n	15db4 <interface_socket_allocate+0x54>
   15e20:	2507      	movs	r5, #7
   15e22:	e7c7      	b.n	15db4 <interface_socket_allocate+0x54>
   15e24:	20021764 	.word	0x20021764

00015e28 <interface_socket_free>:
   15e28:	2808      	cmp	r0, #8
   15e2a:	d900      	bls.n	15e2e <interface_socket_free+0x6>
   15e2c:	4770      	bx	lr
   15e2e:	b510      	push	{r4, lr}
   15e30:	4c07      	ldr	r4, [pc, #28]	; (15e50 <interface_socket_free+0x28>)
   15e32:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   15e36:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   15e3a:	69e0      	ldr	r0, [r4, #28]
   15e3c:	b108      	cbz	r0, 15e42 <interface_socket_free+0x1a>
   15e3e:	f001 ffb9 	bl	17db4 <packet_handler_delete>
   15e42:	4620      	mov	r0, r4
   15e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15e48:	2224      	movs	r2, #36	; 0x24
   15e4a:	2100      	movs	r1, #0
   15e4c:	f006 bb18 	b.w	1c480 <memset>
   15e50:	20021764 	.word	0x20021764

00015e54 <interface_socket_packet_handler_update>:
   15e54:	2808      	cmp	r0, #8
   15e56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15e5a:	d81e      	bhi.n	15e9a <interface_socket_packet_handler_update+0x46>
   15e5c:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   15e60:	4e17      	ldr	r6, [pc, #92]	; (15ec0 <interface_socket_packet_handler_update+0x6c>)
   15e62:	eb08 0300 	add.w	r3, r8, r0
   15e66:	009b      	lsls	r3, r3, #2
   15e68:	58f4      	ldr	r4, [r6, r3]
   15e6a:	18f5      	adds	r5, r6, r3
   15e6c:	b1ac      	cbz	r4, 15e9a <interface_socket_packet_handler_update+0x46>
   15e6e:	460b      	mov	r3, r1
   15e70:	4604      	mov	r4, r0
   15e72:	4611      	mov	r1, r2
   15e74:	4618      	mov	r0, r3
   15e76:	462a      	mov	r2, r5
   15e78:	f8d5 901c 	ldr.w	r9, [r5, #28]
   15e7c:	f001 ff7a 	bl	17d74 <packet_handler_create>
   15e80:	61e8      	str	r0, [r5, #28]
   15e82:	b1d0      	cbz	r0, 15eba <interface_socket_packet_handler_update+0x66>
   15e84:	6803      	ldr	r3, [r0, #0]
   15e86:	681b      	ldr	r3, [r3, #0]
   15e88:	4798      	blx	r3
   15e8a:	4607      	mov	r7, r0
   15e8c:	b948      	cbnz	r0, 15ea2 <interface_socket_packet_handler_update+0x4e>
   15e8e:	4648      	mov	r0, r9
   15e90:	f001 ff90 	bl	17db4 <packet_handler_delete>
   15e94:	4638      	mov	r0, r7
   15e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15e9a:	2705      	movs	r7, #5
   15e9c:	4638      	mov	r0, r7
   15e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15ea2:	69e8      	ldr	r0, [r5, #28]
   15ea4:	f001 ff86 	bl	17db4 <packet_handler_delete>
   15ea8:	eb08 0004 	add.w	r0, r8, r4
   15eac:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   15eb0:	f8c6 901c 	str.w	r9, [r6, #28]
   15eb4:	4638      	mov	r0, r7
   15eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15eba:	2704      	movs	r7, #4
   15ebc:	e7f4      	b.n	15ea8 <interface_socket_packet_handler_update+0x54>
   15ebe:	bf00      	nop
   15ec0:	20021764 	.word	0x20021764

00015ec4 <interface_socket_wait>:
   15ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ec6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   15eca:	4c0e      	ldr	r4, [pc, #56]	; (15f04 <interface_socket_wait+0x40>)
   15ecc:	0080      	lsls	r0, r0, #2
   15ece:	5825      	ldr	r5, [r4, r0]
   15ed0:	b083      	sub	sp, #12
   15ed2:	4015      	ands	r5, r2
   15ed4:	428d      	cmp	r5, r1
   15ed6:	9301      	str	r3, [sp, #4]
   15ed8:	4404      	add	r4, r0
   15eda:	d010      	beq.n	15efe <interface_socket_wait+0x3a>
   15edc:	6863      	ldr	r3, [r4, #4]
   15ede:	b973      	cbnz	r3, 15efe <interface_socket_wait+0x3a>
   15ee0:	460f      	mov	r7, r1
   15ee2:	4616      	mov	r6, r2
   15ee4:	4625      	mov	r5, r4
   15ee6:	e006      	b.n	15ef6 <interface_socket_wait+0x32>
   15ee8:	686b      	ldr	r3, [r5, #4]
   15eea:	b943      	cbnz	r3, 15efe <interface_socket_wait+0x3a>
   15eec:	a901      	add	r1, sp, #4
   15eee:	4620      	mov	r0, r4
   15ef0:	f7f9 f98a 	bl	f208 <bsd_os_timedwait>
   15ef4:	b920      	cbnz	r0, 15f00 <interface_socket_wait+0x3c>
   15ef6:	682b      	ldr	r3, [r5, #0]
   15ef8:	4033      	ands	r3, r6
   15efa:	42bb      	cmp	r3, r7
   15efc:	d1f4      	bne.n	15ee8 <interface_socket_wait+0x24>
   15efe:	2000      	movs	r0, #0
   15f00:	b003      	add	sp, #12
   15f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f04:	20021764 	.word	0x20021764

00015f08 <interface_from_internal_id_search>:
   15f08:	4b27      	ldr	r3, [pc, #156]	; (15fa8 <interface_from_internal_id_search+0xa0>)
   15f0a:	681a      	ldr	r2, [r3, #0]
   15f0c:	b112      	cbz	r2, 15f14 <interface_from_internal_id_search+0xc>
   15f0e:	699a      	ldr	r2, [r3, #24]
   15f10:	4282      	cmp	r2, r0
   15f12:	d039      	beq.n	15f88 <interface_from_internal_id_search+0x80>
   15f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   15f16:	b112      	cbz	r2, 15f1e <interface_from_internal_id_search+0x16>
   15f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15f1a:	4282      	cmp	r2, r0
   15f1c:	d036      	beq.n	15f8c <interface_from_internal_id_search+0x84>
   15f1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   15f20:	b112      	cbz	r2, 15f28 <interface_from_internal_id_search+0x20>
   15f22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   15f24:	4282      	cmp	r2, r0
   15f26:	d033      	beq.n	15f90 <interface_from_internal_id_search+0x88>
   15f28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   15f2a:	b11a      	cbz	r2, 15f34 <interface_from_internal_id_search+0x2c>
   15f2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   15f30:	4282      	cmp	r2, r0
   15f32:	d02f      	beq.n	15f94 <interface_from_internal_id_search+0x8c>
   15f34:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   15f38:	b11a      	cbz	r2, 15f42 <interface_from_internal_id_search+0x3a>
   15f3a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   15f3e:	4282      	cmp	r2, r0
   15f40:	d02a      	beq.n	15f98 <interface_from_internal_id_search+0x90>
   15f42:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   15f46:	b11a      	cbz	r2, 15f50 <interface_from_internal_id_search+0x48>
   15f48:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   15f4c:	4282      	cmp	r2, r0
   15f4e:	d025      	beq.n	15f9c <interface_from_internal_id_search+0x94>
   15f50:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   15f54:	b11a      	cbz	r2, 15f5e <interface_from_internal_id_search+0x56>
   15f56:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   15f5a:	4282      	cmp	r2, r0
   15f5c:	d020      	beq.n	15fa0 <interface_from_internal_id_search+0x98>
   15f5e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   15f62:	b11a      	cbz	r2, 15f6c <interface_from_internal_id_search+0x64>
   15f64:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   15f68:	4282      	cmp	r2, r0
   15f6a:	d01b      	beq.n	15fa4 <interface_from_internal_id_search+0x9c>
   15f6c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   15f70:	b13a      	cbz	r2, 15f82 <interface_from_internal_id_search+0x7a>
   15f72:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   15f76:	4283      	cmp	r3, r0
   15f78:	bf14      	ite	ne
   15f7a:	f04f 30ff 	movne.w	r0, #4294967295
   15f7e:	2008      	moveq	r0, #8
   15f80:	4770      	bx	lr
   15f82:	f04f 30ff 	mov.w	r0, #4294967295
   15f86:	4770      	bx	lr
   15f88:	2000      	movs	r0, #0
   15f8a:	4770      	bx	lr
   15f8c:	2001      	movs	r0, #1
   15f8e:	4770      	bx	lr
   15f90:	2002      	movs	r0, #2
   15f92:	4770      	bx	lr
   15f94:	2003      	movs	r0, #3
   15f96:	4770      	bx	lr
   15f98:	2004      	movs	r0, #4
   15f9a:	4770      	bx	lr
   15f9c:	2005      	movs	r0, #5
   15f9e:	4770      	bx	lr
   15fa0:	2006      	movs	r0, #6
   15fa2:	4770      	bx	lr
   15fa4:	2007      	movs	r0, #7
   15fa6:	4770      	bx	lr
   15fa8:	20021764 	.word	0x20021764

00015fac <interface_socket_from_handle_get>:
   15fac:	2808      	cmp	r0, #8
   15fae:	d807      	bhi.n	15fc0 <interface_socket_from_handle_get+0x14>
   15fb0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   15fb4:	4b03      	ldr	r3, [pc, #12]	; (15fc4 <interface_socket_from_handle_get+0x18>)
   15fb6:	0080      	lsls	r0, r0, #2
   15fb8:	581a      	ldr	r2, [r3, r0]
   15fba:	b10a      	cbz	r2, 15fc0 <interface_socket_from_handle_get+0x14>
   15fbc:	4418      	add	r0, r3
   15fbe:	4770      	bx	lr
   15fc0:	2000      	movs	r0, #0
   15fc2:	4770      	bx	lr
   15fc4:	20021764 	.word	0x20021764

00015fc8 <interface_socket_event_get>:
   15fc8:	b119      	cbz	r1, 15fd2 <interface_socket_event_get+0xa>
   15fca:	2808      	cmp	r0, #8
   15fcc:	d902      	bls.n	15fd4 <interface_socket_event_get+0xc>
   15fce:	2310      	movs	r3, #16
   15fd0:	600b      	str	r3, [r1, #0]
   15fd2:	4770      	bx	lr
   15fd4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   15fd8:	4b07      	ldr	r3, [pc, #28]	; (15ff8 <interface_socket_event_get+0x30>)
   15fda:	0080      	lsls	r0, r0, #2
   15fdc:	581a      	ldr	r2, [r3, r0]
   15fde:	2a00      	cmp	r2, #0
   15fe0:	d0f5      	beq.n	15fce <interface_socket_event_get+0x6>
   15fe2:	581b      	ldr	r3, [r3, r0]
   15fe4:	0c1b      	lsrs	r3, r3, #16
   15fe6:	f003 020a 	and.w	r2, r3, #10
   15fea:	2a0a      	cmp	r2, #10
   15fec:	bf14      	ite	ne
   15fee:	f003 030f 	andne.w	r3, r3, #15
   15ff2:	f003 030d 	andeq.w	r3, r3, #13
   15ff6:	e7eb      	b.n	15fd0 <interface_socket_event_get+0x8>
   15ff8:	20021764 	.word	0x20021764

00015ffc <interface_socket_setopt>:
   15ffc:	2808      	cmp	r0, #8
   15ffe:	b538      	push	{r3, r4, r5, lr}
   16000:	d82d      	bhi.n	1605e <interface_socket_setopt+0x62>
   16002:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   16006:	4c1c      	ldr	r4, [pc, #112]	; (16078 <interface_socket_setopt+0x7c>)
   16008:	0080      	lsls	r0, r0, #2
   1600a:	461d      	mov	r5, r3
   1600c:	5823      	ldr	r3, [r4, r0]
   1600e:	b333      	cbz	r3, 1605e <interface_socket_setopt+0x62>
   16010:	2901      	cmp	r1, #1
   16012:	d11e      	bne.n	16052 <interface_socket_setopt+0x56>
   16014:	2a14      	cmp	r2, #20
   16016:	d11c      	bne.n	16052 <interface_socket_setopt+0x56>
   16018:	b1ad      	cbz	r5, 16046 <interface_socket_setopt+0x4a>
   1601a:	9b04      	ldr	r3, [sp, #16]
   1601c:	2b08      	cmp	r3, #8
   1601e:	d112      	bne.n	16046 <interface_socket_setopt+0x4a>
   16020:	686a      	ldr	r2, [r5, #4]
   16022:	4b16      	ldr	r3, [pc, #88]	; (1607c <interface_socket_setopt+0x80>)
   16024:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   16028:	fba3 3202 	umull	r3, r2, r3, r2
   1602c:	2300      	movs	r3, #0
   1602e:	682d      	ldr	r5, [r5, #0]
   16030:	0992      	lsrs	r2, r2, #6
   16032:	fbe1 2305 	umlal	r2, r3, r1, r5
   16036:	2b01      	cmp	r3, #1
   16038:	bf08      	it	eq
   1603a:	2a00      	cmpeq	r2, #0
   1603c:	d215      	bcs.n	1606a <interface_socket_setopt+0x6e>
   1603e:	4420      	add	r0, r4
   16040:	6202      	str	r2, [r0, #32]
   16042:	2000      	movs	r0, #0
   16044:	bd38      	pop	{r3, r4, r5, pc}
   16046:	2016      	movs	r0, #22
   16048:	f7f9 f972 	bl	f330 <bsd_os_errno_set>
   1604c:	f04f 30ff 	mov.w	r0, #4294967295
   16050:	bd38      	pop	{r3, r4, r5, pc}
   16052:	202a      	movs	r0, #42	; 0x2a
   16054:	f7f9 f96c 	bl	f330 <bsd_os_errno_set>
   16058:	f04f 30ff 	mov.w	r0, #4294967295
   1605c:	bd38      	pop	{r3, r4, r5, pc}
   1605e:	2009      	movs	r0, #9
   16060:	f7f9 f966 	bl	f330 <bsd_os_errno_set>
   16064:	f04f 30ff 	mov.w	r0, #4294967295
   16068:	bd38      	pop	{r3, r4, r5, pc}
   1606a:	2025      	movs	r0, #37	; 0x25
   1606c:	f7f9 f960 	bl	f330 <bsd_os_errno_set>
   16070:	f04f 30ff 	mov.w	r0, #4294967295
   16074:	bd38      	pop	{r3, r4, r5, pc}
   16076:	bf00      	nop
   16078:	20021764 	.word	0x20021764
   1607c:	10624dd3 	.word	0x10624dd3

00016080 <interface_socket_getopt>:
   16080:	b570      	push	{r4, r5, r6, lr}
   16082:	2808      	cmp	r0, #8
   16084:	9d04      	ldr	r5, [sp, #16]
   16086:	d821      	bhi.n	160cc <interface_socket_getopt+0x4c>
   16088:	4c13      	ldr	r4, [pc, #76]	; (160d8 <interface_socket_getopt+0x58>)
   1608a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1608e:	0080      	lsls	r0, r0, #2
   16090:	5826      	ldr	r6, [r4, r0]
   16092:	4404      	add	r4, r0
   16094:	b1d6      	cbz	r6, 160cc <interface_socket_getopt+0x4c>
   16096:	2901      	cmp	r1, #1
   16098:	d112      	bne.n	160c0 <interface_socket_getopt+0x40>
   1609a:	2a04      	cmp	r2, #4
   1609c:	d110      	bne.n	160c0 <interface_socket_getopt+0x40>
   1609e:	b14b      	cbz	r3, 160b4 <interface_socket_getopt+0x34>
   160a0:	b145      	cbz	r5, 160b4 <interface_socket_getopt+0x34>
   160a2:	682a      	ldr	r2, [r5, #0]
   160a4:	2a04      	cmp	r2, #4
   160a6:	d105      	bne.n	160b4 <interface_socket_getopt+0x34>
   160a8:	2200      	movs	r2, #0
   160aa:	6861      	ldr	r1, [r4, #4]
   160ac:	4610      	mov	r0, r2
   160ae:	6019      	str	r1, [r3, #0]
   160b0:	6062      	str	r2, [r4, #4]
   160b2:	bd70      	pop	{r4, r5, r6, pc}
   160b4:	2016      	movs	r0, #22
   160b6:	f7f9 f93b 	bl	f330 <bsd_os_errno_set>
   160ba:	f04f 30ff 	mov.w	r0, #4294967295
   160be:	bd70      	pop	{r4, r5, r6, pc}
   160c0:	202a      	movs	r0, #42	; 0x2a
   160c2:	f7f9 f935 	bl	f330 <bsd_os_errno_set>
   160c6:	f04f 30ff 	mov.w	r0, #4294967295
   160ca:	bd70      	pop	{r4, r5, r6, pc}
   160cc:	2009      	movs	r0, #9
   160ce:	f7f9 f92f 	bl	f330 <bsd_os_errno_set>
   160d2:	f04f 30ff 	mov.w	r0, #4294967295
   160d6:	bd70      	pop	{r4, r5, r6, pc}
   160d8:	20021764 	.word	0x20021764

000160dc <interface_socket_fcntl>:
   160dc:	2808      	cmp	r0, #8
   160de:	b510      	push	{r4, lr}
   160e0:	d818      	bhi.n	16114 <interface_socket_fcntl+0x38>
   160e2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   160e6:	4c11      	ldr	r4, [pc, #68]	; (1612c <interface_socket_fcntl+0x50>)
   160e8:	0083      	lsls	r3, r0, #2
   160ea:	58e0      	ldr	r0, [r4, r3]
   160ec:	b190      	cbz	r0, 16114 <interface_socket_fcntl+0x38>
   160ee:	2901      	cmp	r1, #1
   160f0:	d005      	beq.n	160fe <interface_socket_fcntl+0x22>
   160f2:	2902      	cmp	r1, #2
   160f4:	d114      	bne.n	16120 <interface_socket_fcntl+0x44>
   160f6:	58e0      	ldr	r0, [r4, r3]
   160f8:	f3c0 7000 	ubfx	r0, r0, #28, #1
   160fc:	bd10      	pop	{r4, pc}
   160fe:	f012 0001 	ands.w	r0, r2, #1
   16102:	58e2      	ldr	r2, [r4, r3]
   16104:	bf1a      	itte	ne
   16106:	2000      	movne	r0, #0
   16108:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   1610c:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   16110:	50e2      	str	r2, [r4, r3]
   16112:	bd10      	pop	{r4, pc}
   16114:	2009      	movs	r0, #9
   16116:	f7f9 f90b 	bl	f330 <bsd_os_errno_set>
   1611a:	f04f 30ff 	mov.w	r0, #4294967295
   1611e:	bd10      	pop	{r4, pc}
   16120:	2016      	movs	r0, #22
   16122:	f7f9 f905 	bl	f330 <bsd_os_errno_set>
   16126:	f04f 30ff 	mov.w	r0, #4294967295
   1612a:	bd10      	pop	{r4, pc}
   1612c:	20021764 	.word	0x20021764

00016130 <bsd_os_application_irq_handler>:
   16130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16134:	4c33      	ldr	r4, [pc, #204]	; (16204 <bsd_os_application_irq_handler+0xd4>)
   16136:	f7f9 f9cf 	bl	f4d8 <bsd_os_application_irq_clear>
   1613a:	f04f 0803 	mov.w	r8, #3
   1613e:	4d32      	ldr	r5, [pc, #200]	; (16208 <bsd_os_application_irq_handler+0xd8>)
   16140:	4f32      	ldr	r7, [pc, #200]	; (1620c <bsd_os_application_irq_handler+0xdc>)
   16142:	f104 0680 	add.w	r6, r4, #128	; 0x80
   16146:	e004      	b.n	16152 <bsd_os_application_irq_handler+0x22>
   16148:	2b04      	cmp	r3, #4
   1614a:	d006      	beq.n	1615a <bsd_os_application_irq_handler+0x2a>
   1614c:	3408      	adds	r4, #8
   1614e:	42b4      	cmp	r4, r6
   16150:	d03b      	beq.n	161ca <bsd_os_application_irq_handler+0x9a>
   16152:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   16156:	2b02      	cmp	r3, #2
   16158:	d1f6      	bne.n	16148 <bsd_os_application_irq_handler+0x18>
   1615a:	6820      	ldr	r0, [r4, #0]
   1615c:	882a      	ldrh	r2, [r5, #0]
   1615e:	6803      	ldr	r3, [r0, #0]
   16160:	b29b      	uxth	r3, r3
   16162:	429a      	cmp	r2, r3
   16164:	d033      	beq.n	161ce <bsd_os_application_irq_handler+0x9e>
   16166:	8a2a      	ldrh	r2, [r5, #16]
   16168:	429a      	cmp	r2, r3
   1616a:	d032      	beq.n	161d2 <bsd_os_application_irq_handler+0xa2>
   1616c:	8c2a      	ldrh	r2, [r5, #32]
   1616e:	429a      	cmp	r2, r3
   16170:	d031      	beq.n	161d6 <bsd_os_application_irq_handler+0xa6>
   16172:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   16174:	429a      	cmp	r2, r3
   16176:	d030      	beq.n	161da <bsd_os_application_irq_handler+0xaa>
   16178:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   1617c:	429a      	cmp	r2, r3
   1617e:	d036      	beq.n	161ee <bsd_os_application_irq_handler+0xbe>
   16180:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   16184:	429a      	cmp	r2, r3
   16186:	d034      	beq.n	161f2 <bsd_os_application_irq_handler+0xc2>
   16188:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   1618c:	429a      	cmp	r2, r3
   1618e:	d032      	beq.n	161f6 <bsd_os_application_irq_handler+0xc6>
   16190:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   16194:	429a      	cmp	r2, r3
   16196:	d030      	beq.n	161fa <bsd_os_application_irq_handler+0xca>
   16198:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   1619c:	429a      	cmp	r2, r3
   1619e:	d02e      	beq.n	161fe <bsd_os_application_irq_handler+0xce>
   161a0:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   161a4:	429a      	cmp	r2, r3
   161a6:	bf08      	it	eq
   161a8:	2309      	moveq	r3, #9
   161aa:	d1cf      	bne.n	1614c <bsd_os_application_irq_handler+0x1c>
   161ac:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   161b0:	685a      	ldr	r2, [r3, #4]
   161b2:	68d9      	ldr	r1, [r3, #12]
   161b4:	4790      	blx	r2
   161b6:	b990      	cbnz	r0, 161de <bsd_os_application_irq_handler+0xae>
   161b8:	2201      	movs	r2, #1
   161ba:	6820      	ldr	r0, [r4, #0]
   161bc:	f804 2c04 	strb.w	r2, [r4, #-4]
   161c0:	68fb      	ldr	r3, [r7, #12]
   161c2:	3408      	adds	r4, #8
   161c4:	4798      	blx	r3
   161c6:	42b4      	cmp	r4, r6
   161c8:	d1c3      	bne.n	16152 <bsd_os_application_irq_handler+0x22>
   161ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   161ce:	2300      	movs	r3, #0
   161d0:	e7ec      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   161d2:	2301      	movs	r3, #1
   161d4:	e7ea      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   161d6:	2302      	movs	r3, #2
   161d8:	e7e8      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   161da:	2303      	movs	r3, #3
   161dc:	e7e6      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   161de:	2802      	cmp	r0, #2
   161e0:	bf0a      	itet	eq
   161e2:	2304      	moveq	r3, #4
   161e4:	f804 8c04 	strbne.w	r8, [r4, #-4]
   161e8:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   161ec:	e7ae      	b.n	1614c <bsd_os_application_irq_handler+0x1c>
   161ee:	2304      	movs	r3, #4
   161f0:	e7dc      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   161f2:	2305      	movs	r3, #5
   161f4:	e7da      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   161f6:	2306      	movs	r3, #6
   161f8:	e7d8      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   161fa:	2307      	movs	r3, #7
   161fc:	e7d6      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   161fe:	2308      	movs	r3, #8
   16200:	e7d4      	b.n	161ac <bsd_os_application_irq_handler+0x7c>
   16202:	bf00      	nop
   16204:	200208d4 	.word	0x200208d4
   16208:	20020798 	.word	0x20020798
   1620c:	20020838 	.word	0x20020838

00016210 <rpc_framework_init>:
   16210:	b508      	push	{r3, lr}
   16212:	22a0      	movs	r2, #160	; 0xa0
   16214:	2100      	movs	r1, #0
   16216:	4802      	ldr	r0, [pc, #8]	; (16220 <rpc_framework_init+0x10>)
   16218:	f006 f932 	bl	1c480 <memset>
   1621c:	2000      	movs	r0, #0
   1621e:	bd08      	pop	{r3, pc}
   16220:	20020798 	.word	0x20020798

00016224 <rpc_client_register>:
   16224:	8803      	ldrh	r3, [r0, #0]
   16226:	2b00      	cmp	r3, #0
   16228:	d045      	beq.n	162b6 <rpc_client_register+0x92>
   1622a:	6842      	ldr	r2, [r0, #4]
   1622c:	4601      	mov	r1, r0
   1622e:	2a00      	cmp	r2, #0
   16230:	d050      	beq.n	162d4 <rpc_client_register+0xb0>
   16232:	4a30      	ldr	r2, [pc, #192]	; (162f4 <rpc_client_register+0xd0>)
   16234:	8810      	ldrh	r0, [r2, #0]
   16236:	4283      	cmp	r3, r0
   16238:	d03d      	beq.n	162b6 <rpc_client_register+0x92>
   1623a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1623e:	8a14      	ldrh	r4, [r2, #16]
   16240:	42a3      	cmp	r3, r4
   16242:	d035      	beq.n	162b0 <rpc_client_register+0x8c>
   16244:	8c15      	ldrh	r5, [r2, #32]
   16246:	42ab      	cmp	r3, r5
   16248:	d032      	beq.n	162b0 <rpc_client_register+0x8c>
   1624a:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1624c:	42b3      	cmp	r3, r6
   1624e:	d02f      	beq.n	162b0 <rpc_client_register+0x8c>
   16250:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   16254:	42bb      	cmp	r3, r7
   16256:	d02b      	beq.n	162b0 <rpc_client_register+0x8c>
   16258:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1625c:	4563      	cmp	r3, ip
   1625e:	d027      	beq.n	162b0 <rpc_client_register+0x8c>
   16260:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   16264:	4573      	cmp	r3, lr
   16266:	d023      	beq.n	162b0 <rpc_client_register+0x8c>
   16268:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1626c:	4543      	cmp	r3, r8
   1626e:	d01f      	beq.n	162b0 <rpc_client_register+0x8c>
   16270:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   16274:	454b      	cmp	r3, r9
   16276:	d01b      	beq.n	162b0 <rpc_client_register+0x8c>
   16278:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1627c:	4553      	cmp	r3, sl
   1627e:	d017      	beq.n	162b0 <rpc_client_register+0x8c>
   16280:	b1e0      	cbz	r0, 162bc <rpc_client_register+0x98>
   16282:	b35c      	cbz	r4, 162dc <rpc_client_register+0xb8>
   16284:	b365      	cbz	r5, 162e0 <rpc_client_register+0xbc>
   16286:	b36e      	cbz	r6, 162e4 <rpc_client_register+0xc0>
   16288:	b377      	cbz	r7, 162e8 <rpc_client_register+0xc4>
   1628a:	f1bc 0f00 	cmp.w	ip, #0
   1628e:	d02d      	beq.n	162ec <rpc_client_register+0xc8>
   16290:	f1be 0f00 	cmp.w	lr, #0
   16294:	d020      	beq.n	162d8 <rpc_client_register+0xb4>
   16296:	f1b8 0f00 	cmp.w	r8, #0
   1629a:	d029      	beq.n	162f0 <rpc_client_register+0xcc>
   1629c:	f1b9 0f00 	cmp.w	r9, #0
   162a0:	d00b      	beq.n	162ba <rpc_client_register+0x96>
   162a2:	2009      	movs	r0, #9
   162a4:	f1ba 0f00 	cmp.w	sl, #0
   162a8:	d008      	beq.n	162bc <rpc_client_register+0x98>
   162aa:	2004      	movs	r0, #4
   162ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162b0:	2007      	movs	r0, #7
   162b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162b6:	2007      	movs	r0, #7
   162b8:	4770      	bx	lr
   162ba:	2008      	movs	r0, #8
   162bc:	0100      	lsls	r0, r0, #4
   162be:	5213      	strh	r3, [r2, r0]
   162c0:	684b      	ldr	r3, [r1, #4]
   162c2:	4402      	add	r2, r0
   162c4:	6053      	str	r3, [r2, #4]
   162c6:	688b      	ldr	r3, [r1, #8]
   162c8:	2000      	movs	r0, #0
   162ca:	6093      	str	r3, [r2, #8]
   162cc:	68cb      	ldr	r3, [r1, #12]
   162ce:	60d3      	str	r3, [r2, #12]
   162d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162d4:	200e      	movs	r0, #14
   162d6:	4770      	bx	lr
   162d8:	2006      	movs	r0, #6
   162da:	e7ef      	b.n	162bc <rpc_client_register+0x98>
   162dc:	2001      	movs	r0, #1
   162de:	e7ed      	b.n	162bc <rpc_client_register+0x98>
   162e0:	2002      	movs	r0, #2
   162e2:	e7eb      	b.n	162bc <rpc_client_register+0x98>
   162e4:	2003      	movs	r0, #3
   162e6:	e7e9      	b.n	162bc <rpc_client_register+0x98>
   162e8:	2004      	movs	r0, #4
   162ea:	e7e7      	b.n	162bc <rpc_client_register+0x98>
   162ec:	2005      	movs	r0, #5
   162ee:	e7e5      	b.n	162bc <rpc_client_register+0x98>
   162f0:	2007      	movs	r0, #7
   162f2:	e7e3      	b.n	162bc <rpc_client_register+0x98>
   162f4:	20020798 	.word	0x20020798

000162f8 <rpc_transport_input>:
   162f8:	b538      	push	{r3, r4, r5, lr}
   162fa:	4a82      	ldr	r2, [pc, #520]	; (16504 <rpc_transport_input+0x20c>)
   162fc:	680b      	ldr	r3, [r1, #0]
   162fe:	8810      	ldrh	r0, [r2, #0]
   16300:	b29b      	uxth	r3, r3
   16302:	4298      	cmp	r0, r3
   16304:	d027      	beq.n	16356 <rpc_transport_input+0x5e>
   16306:	8a10      	ldrh	r0, [r2, #16]
   16308:	4298      	cmp	r0, r3
   1630a:	d024      	beq.n	16356 <rpc_transport_input+0x5e>
   1630c:	8c10      	ldrh	r0, [r2, #32]
   1630e:	4298      	cmp	r0, r3
   16310:	d021      	beq.n	16356 <rpc_transport_input+0x5e>
   16312:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   16314:	4298      	cmp	r0, r3
   16316:	d01e      	beq.n	16356 <rpc_transport_input+0x5e>
   16318:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   1631c:	4298      	cmp	r0, r3
   1631e:	d01a      	beq.n	16356 <rpc_transport_input+0x5e>
   16320:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   16324:	4298      	cmp	r0, r3
   16326:	d016      	beq.n	16356 <rpc_transport_input+0x5e>
   16328:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   1632c:	4298      	cmp	r0, r3
   1632e:	d012      	beq.n	16356 <rpc_transport_input+0x5e>
   16330:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   16334:	4298      	cmp	r0, r3
   16336:	d00e      	beq.n	16356 <rpc_transport_input+0x5e>
   16338:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   1633c:	4298      	cmp	r0, r3
   1633e:	d00a      	beq.n	16356 <rpc_transport_input+0x5e>
   16340:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   16344:	429a      	cmp	r2, r3
   16346:	d006      	beq.n	16356 <rpc_transport_input+0x5e>
   16348:	6888      	ldr	r0, [r1, #8]
   1634a:	b118      	cbz	r0, 16354 <rpc_transport_input+0x5c>
   1634c:	4b6e      	ldr	r3, [pc, #440]	; (16508 <rpc_transport_input+0x210>)
   1634e:	691b      	ldr	r3, [r3, #16]
   16350:	4798      	blx	r3
   16352:	2000      	movs	r0, #0
   16354:	bd38      	pop	{r3, r4, r5, pc}
   16356:	6888      	ldr	r0, [r1, #8]
   16358:	2800      	cmp	r0, #0
   1635a:	f000 8098 	beq.w	1648e <rpc_transport_input+0x196>
   1635e:	4a6b      	ldr	r2, [pc, #428]	; (1650c <rpc_transport_input+0x214>)
   16360:	6814      	ldr	r4, [r2, #0]
   16362:	2c00      	cmp	r4, #0
   16364:	d03c      	beq.n	163e0 <rpc_transport_input+0xe8>
   16366:	6894      	ldr	r4, [r2, #8]
   16368:	2c00      	cmp	r4, #0
   1636a:	f000 809a 	beq.w	164a2 <rpc_transport_input+0x1aa>
   1636e:	6914      	ldr	r4, [r2, #16]
   16370:	2c00      	cmp	r4, #0
   16372:	f000 809a 	beq.w	164aa <rpc_transport_input+0x1b2>
   16376:	6994      	ldr	r4, [r2, #24]
   16378:	2c00      	cmp	r4, #0
   1637a:	f000 809a 	beq.w	164b2 <rpc_transport_input+0x1ba>
   1637e:	6a14      	ldr	r4, [r2, #32]
   16380:	2c00      	cmp	r4, #0
   16382:	f000 809a 	beq.w	164ba <rpc_transport_input+0x1c2>
   16386:	6a94      	ldr	r4, [r2, #40]	; 0x28
   16388:	2c00      	cmp	r4, #0
   1638a:	f000 8084 	beq.w	16496 <rpc_transport_input+0x19e>
   1638e:	6b14      	ldr	r4, [r2, #48]	; 0x30
   16390:	2c00      	cmp	r4, #0
   16392:	f000 8098 	beq.w	164c6 <rpc_transport_input+0x1ce>
   16396:	6b94      	ldr	r4, [r2, #56]	; 0x38
   16398:	2c00      	cmp	r4, #0
   1639a:	f000 8096 	beq.w	164ca <rpc_transport_input+0x1d2>
   1639e:	6c14      	ldr	r4, [r2, #64]	; 0x40
   163a0:	2c00      	cmp	r4, #0
   163a2:	f000 8096 	beq.w	164d2 <rpc_transport_input+0x1da>
   163a6:	6c94      	ldr	r4, [r2, #72]	; 0x48
   163a8:	2c00      	cmp	r4, #0
   163aa:	f000 8096 	beq.w	164da <rpc_transport_input+0x1e2>
   163ae:	6d14      	ldr	r4, [r2, #80]	; 0x50
   163b0:	2c00      	cmp	r4, #0
   163b2:	f000 8096 	beq.w	164e2 <rpc_transport_input+0x1ea>
   163b6:	6d94      	ldr	r4, [r2, #88]	; 0x58
   163b8:	2c00      	cmp	r4, #0
   163ba:	f000 8098 	beq.w	164ee <rpc_transport_input+0x1f6>
   163be:	6e14      	ldr	r4, [r2, #96]	; 0x60
   163c0:	2c00      	cmp	r4, #0
   163c2:	f000 8098 	beq.w	164f6 <rpc_transport_input+0x1fe>
   163c6:	6e94      	ldr	r4, [r2, #104]	; 0x68
   163c8:	2c00      	cmp	r4, #0
   163ca:	f000 8096 	beq.w	164fa <rpc_transport_input+0x202>
   163ce:	6f14      	ldr	r4, [r2, #112]	; 0x70
   163d0:	2c00      	cmp	r4, #0
   163d2:	f000 8094 	beq.w	164fe <rpc_transport_input+0x206>
   163d6:	6f94      	ldr	r4, [r2, #120]	; 0x78
   163d8:	b10c      	cbz	r4, 163de <rpc_transport_input+0xe6>
   163da:	2001      	movs	r0, #1
   163dc:	bd38      	pop	{r3, r4, r5, pc}
   163de:	240f      	movs	r4, #15
   163e0:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   163e4:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   163e8:	80ab      	strh	r3, [r5, #4]
   163ea:	4b49      	ldr	r3, [pc, #292]	; (16510 <rpc_transport_input+0x218>)
   163ec:	781a      	ldrb	r2, [r3, #0]
   163ee:	2a01      	cmp	r2, #1
   163f0:	d053      	beq.n	1649a <rpc_transport_input+0x1a2>
   163f2:	7a1a      	ldrb	r2, [r3, #8]
   163f4:	2a01      	cmp	r2, #1
   163f6:	d041      	beq.n	1647c <rpc_transport_input+0x184>
   163f8:	7c1a      	ldrb	r2, [r3, #16]
   163fa:	2a01      	cmp	r2, #1
   163fc:	d04f      	beq.n	1649e <rpc_transport_input+0x1a6>
   163fe:	7e1a      	ldrb	r2, [r3, #24]
   16400:	2a01      	cmp	r2, #1
   16402:	d050      	beq.n	164a6 <rpc_transport_input+0x1ae>
   16404:	f893 2020 	ldrb.w	r2, [r3, #32]
   16408:	2a01      	cmp	r2, #1
   1640a:	d050      	beq.n	164ae <rpc_transport_input+0x1b6>
   1640c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   16410:	2a01      	cmp	r2, #1
   16412:	d050      	beq.n	164b6 <rpc_transport_input+0x1be>
   16414:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   16418:	2a01      	cmp	r2, #1
   1641a:	d03a      	beq.n	16492 <rpc_transport_input+0x19a>
   1641c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   16420:	2a01      	cmp	r2, #1
   16422:	d04c      	beq.n	164be <rpc_transport_input+0x1c6>
   16424:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   16428:	2a01      	cmp	r2, #1
   1642a:	d04a      	beq.n	164c2 <rpc_transport_input+0x1ca>
   1642c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   16430:	2a01      	cmp	r2, #1
   16432:	d04c      	beq.n	164ce <rpc_transport_input+0x1d6>
   16434:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   16438:	2a01      	cmp	r2, #1
   1643a:	d04c      	beq.n	164d6 <rpc_transport_input+0x1de>
   1643c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   16440:	2a01      	cmp	r2, #1
   16442:	d04c      	beq.n	164de <rpc_transport_input+0x1e6>
   16444:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   16448:	2a01      	cmp	r2, #1
   1644a:	d04c      	beq.n	164e6 <rpc_transport_input+0x1ee>
   1644c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   16450:	2a01      	cmp	r2, #1
   16452:	d04a      	beq.n	164ea <rpc_transport_input+0x1f2>
   16454:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   16458:	2a01      	cmp	r2, #1
   1645a:	d04a      	beq.n	164f2 <rpc_transport_input+0x1fa>
   1645c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   16460:	2a01      	cmp	r2, #1
   16462:	d00a      	beq.n	1647a <rpc_transport_input+0x182>
   16464:	2c10      	cmp	r4, #16
   16466:	d0b8      	beq.n	163da <rpc_transport_input+0xe2>
   16468:	2200      	movs	r2, #0
   1646a:	4b28      	ldr	r3, [pc, #160]	; (1650c <rpc_transport_input+0x214>)
   1646c:	2001      	movs	r0, #1
   1646e:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   16472:	808a      	strh	r2, [r1, #4]
   16474:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   16478:	bd38      	pop	{r3, r4, r5, pc}
   1647a:	220f      	movs	r2, #15
   1647c:	2402      	movs	r4, #2
   1647e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   16482:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   16486:	6041      	str	r1, [r0, #4]
   16488:	f7f9 f81e 	bl	f4c8 <bsd_os_application_irq_set>
   1648c:	e7a5      	b.n	163da <rpc_transport_input+0xe2>
   1648e:	2410      	movs	r4, #16
   16490:	e7ab      	b.n	163ea <rpc_transport_input+0xf2>
   16492:	2206      	movs	r2, #6
   16494:	e7f2      	b.n	1647c <rpc_transport_input+0x184>
   16496:	2405      	movs	r4, #5
   16498:	e7a2      	b.n	163e0 <rpc_transport_input+0xe8>
   1649a:	2200      	movs	r2, #0
   1649c:	e7ee      	b.n	1647c <rpc_transport_input+0x184>
   1649e:	2202      	movs	r2, #2
   164a0:	e7ec      	b.n	1647c <rpc_transport_input+0x184>
   164a2:	2401      	movs	r4, #1
   164a4:	e79c      	b.n	163e0 <rpc_transport_input+0xe8>
   164a6:	2203      	movs	r2, #3
   164a8:	e7e8      	b.n	1647c <rpc_transport_input+0x184>
   164aa:	2402      	movs	r4, #2
   164ac:	e798      	b.n	163e0 <rpc_transport_input+0xe8>
   164ae:	2204      	movs	r2, #4
   164b0:	e7e4      	b.n	1647c <rpc_transport_input+0x184>
   164b2:	2403      	movs	r4, #3
   164b4:	e794      	b.n	163e0 <rpc_transport_input+0xe8>
   164b6:	2205      	movs	r2, #5
   164b8:	e7e0      	b.n	1647c <rpc_transport_input+0x184>
   164ba:	2404      	movs	r4, #4
   164bc:	e790      	b.n	163e0 <rpc_transport_input+0xe8>
   164be:	2207      	movs	r2, #7
   164c0:	e7dc      	b.n	1647c <rpc_transport_input+0x184>
   164c2:	2208      	movs	r2, #8
   164c4:	e7da      	b.n	1647c <rpc_transport_input+0x184>
   164c6:	2406      	movs	r4, #6
   164c8:	e78a      	b.n	163e0 <rpc_transport_input+0xe8>
   164ca:	2407      	movs	r4, #7
   164cc:	e788      	b.n	163e0 <rpc_transport_input+0xe8>
   164ce:	2209      	movs	r2, #9
   164d0:	e7d4      	b.n	1647c <rpc_transport_input+0x184>
   164d2:	2408      	movs	r4, #8
   164d4:	e784      	b.n	163e0 <rpc_transport_input+0xe8>
   164d6:	220a      	movs	r2, #10
   164d8:	e7d0      	b.n	1647c <rpc_transport_input+0x184>
   164da:	2409      	movs	r4, #9
   164dc:	e780      	b.n	163e0 <rpc_transport_input+0xe8>
   164de:	220b      	movs	r2, #11
   164e0:	e7cc      	b.n	1647c <rpc_transport_input+0x184>
   164e2:	240a      	movs	r4, #10
   164e4:	e77c      	b.n	163e0 <rpc_transport_input+0xe8>
   164e6:	220c      	movs	r2, #12
   164e8:	e7c8      	b.n	1647c <rpc_transport_input+0x184>
   164ea:	220d      	movs	r2, #13
   164ec:	e7c6      	b.n	1647c <rpc_transport_input+0x184>
   164ee:	240b      	movs	r4, #11
   164f0:	e776      	b.n	163e0 <rpc_transport_input+0xe8>
   164f2:	220e      	movs	r2, #14
   164f4:	e7c2      	b.n	1647c <rpc_transport_input+0x184>
   164f6:	240c      	movs	r4, #12
   164f8:	e772      	b.n	163e0 <rpc_transport_input+0xe8>
   164fa:	240d      	movs	r4, #13
   164fc:	e770      	b.n	163e0 <rpc_transport_input+0xe8>
   164fe:	240e      	movs	r4, #14
   16500:	e76e      	b.n	163e0 <rpc_transport_input+0xe8>
   16502:	bf00      	nop
   16504:	20020798 	.word	0x20020798
   16508:	20020838 	.word	0x20020838
   1650c:	20020850 	.word	0x20020850
   16510:	200208d0 	.word	0x200208d0

00016514 <rpc_transport_register>:
   16514:	b4f0      	push	{r4, r5, r6, r7}
   16516:	2900      	cmp	r1, #0
   16518:	d052      	beq.n	165c0 <rpc_transport_register+0xac>
   1651a:	2800      	cmp	r0, #0
   1651c:	d050      	beq.n	165c0 <rpc_transport_register+0xac>
   1651e:	6883      	ldr	r3, [r0, #8]
   16520:	2b00      	cmp	r3, #0
   16522:	d04d      	beq.n	165c0 <rpc_transport_register+0xac>
   16524:	6903      	ldr	r3, [r0, #16]
   16526:	2b00      	cmp	r3, #0
   16528:	d04a      	beq.n	165c0 <rpc_transport_register+0xac>
   1652a:	6843      	ldr	r3, [r0, #4]
   1652c:	2b00      	cmp	r3, #0
   1652e:	d047      	beq.n	165c0 <rpc_transport_register+0xac>
   16530:	68c3      	ldr	r3, [r0, #12]
   16532:	2b00      	cmp	r3, #0
   16534:	d044      	beq.n	165c0 <rpc_transport_register+0xac>
   16536:	6803      	ldr	r3, [r0, #0]
   16538:	2b00      	cmp	r3, #0
   1653a:	d041      	beq.n	165c0 <rpc_transport_register+0xac>
   1653c:	6943      	ldr	r3, [r0, #20]
   1653e:	2b00      	cmp	r3, #0
   16540:	d03e      	beq.n	165c0 <rpc_transport_register+0xac>
   16542:	2601      	movs	r6, #1
   16544:	2500      	movs	r5, #0
   16546:	4604      	mov	r4, r0
   16548:	460f      	mov	r7, r1
   1654a:	4a1f      	ldr	r2, [pc, #124]	; (165c8 <rpc_transport_register+0xb4>)
   1654c:	4b1f      	ldr	r3, [pc, #124]	; (165cc <rpc_transport_register+0xb8>)
   1654e:	f8df c080 	ldr.w	ip, [pc, #128]	; 165d0 <rpc_transport_register+0xbc>
   16552:	7416      	strb	r6, [r2, #16]
   16554:	7616      	strb	r6, [r2, #24]
   16556:	f882 6020 	strb.w	r6, [r2, #32]
   1655a:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   1655e:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   16562:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   16566:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   1656a:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   1656e:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   16572:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   16576:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   1657a:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   1657e:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   16582:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   16586:	611d      	str	r5, [r3, #16]
   16588:	619d      	str	r5, [r3, #24]
   1658a:	621d      	str	r5, [r3, #32]
   1658c:	629d      	str	r5, [r3, #40]	; 0x28
   1658e:	631d      	str	r5, [r3, #48]	; 0x30
   16590:	639d      	str	r5, [r3, #56]	; 0x38
   16592:	641d      	str	r5, [r3, #64]	; 0x40
   16594:	649d      	str	r5, [r3, #72]	; 0x48
   16596:	651d      	str	r5, [r3, #80]	; 0x50
   16598:	659d      	str	r5, [r3, #88]	; 0x58
   1659a:	661d      	str	r5, [r3, #96]	; 0x60
   1659c:	669d      	str	r5, [r3, #104]	; 0x68
   1659e:	671d      	str	r5, [r3, #112]	; 0x70
   165a0:	679d      	str	r5, [r3, #120]	; 0x78
   165a2:	7016      	strb	r6, [r2, #0]
   165a4:	7216      	strb	r6, [r2, #8]
   165a6:	601d      	str	r5, [r3, #0]
   165a8:	609d      	str	r5, [r3, #8]
   165aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   165ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   165b0:	e894 0003 	ldmia.w	r4, {r0, r1}
   165b4:	e88c 0003 	stmia.w	ip, {r0, r1}
   165b8:	603e      	str	r6, [r7, #0]
   165ba:	4628      	mov	r0, r5
   165bc:	bcf0      	pop	{r4, r5, r6, r7}
   165be:	4770      	bx	lr
   165c0:	250e      	movs	r5, #14
   165c2:	4628      	mov	r0, r5
   165c4:	bcf0      	pop	{r4, r5, r6, r7}
   165c6:	4770      	bx	lr
   165c8:	200208d0 	.word	0x200208d0
   165cc:	20020850 	.word	0x20020850
   165d0:	20020838 	.word	0x20020838

000165d4 <rpc_transport_unregister>:
   165d4:	2800      	cmp	r0, #0
   165d6:	d03a      	beq.n	1664e <rpc_transport_unregister+0x7a>
   165d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   165dc:	4680      	mov	r8, r0
   165de:	4c1d      	ldr	r4, [pc, #116]	; (16654 <rpc_transport_unregister+0x80>)
   165e0:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   165e4:	68a3      	ldr	r3, [r4, #8]
   165e6:	3410      	adds	r4, #16
   165e8:	b103      	cbz	r3, 165ec <rpc_transport_unregister+0x18>
   165ea:	4798      	blx	r3
   165ec:	42ac      	cmp	r4, r5
   165ee:	d1f9      	bne.n	165e4 <rpc_transport_unregister+0x10>
   165f0:	f04f 0901 	mov.w	r9, #1
   165f4:	2600      	movs	r6, #0
   165f6:	4c18      	ldr	r4, [pc, #96]	; (16658 <rpc_transport_unregister+0x84>)
   165f8:	4d18      	ldr	r5, [pc, #96]	; (1665c <rpc_transport_unregister+0x88>)
   165fa:	f8df a064 	ldr.w	sl, [pc, #100]	; 16660 <rpc_transport_unregister+0x8c>
   165fe:	f104 0780 	add.w	r7, r4, #128	; 0x80
   16602:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   16606:	2b01      	cmp	r3, #1
   16608:	d005      	beq.n	16616 <rpc_transport_unregister+0x42>
   1660a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1660e:	6820      	ldr	r0, [r4, #0]
   16610:	4798      	blx	r3
   16612:	f804 9c04 	strb.w	r9, [r4, #-4]
   16616:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1661a:	3408      	adds	r4, #8
   1661c:	b128      	cbz	r0, 1662a <rpc_transport_unregister+0x56>
   1661e:	f8da 3010 	ldr.w	r3, [sl, #16]
   16622:	4798      	blx	r3
   16624:	802e      	strh	r6, [r5, #0]
   16626:	f845 6c04 	str.w	r6, [r5, #-4]
   1662a:	42bc      	cmp	r4, r7
   1662c:	f105 0508 	add.w	r5, r5, #8
   16630:	d1e7      	bne.n	16602 <rpc_transport_unregister+0x2e>
   16632:	f8d8 0000 	ldr.w	r0, [r8]
   16636:	2218      	movs	r2, #24
   16638:	3801      	subs	r0, #1
   1663a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1663e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   16642:	2100      	movs	r1, #0
   16644:	f005 ff1c 	bl	1c480 <memset>
   16648:	2000      	movs	r0, #0
   1664a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1664e:	200e      	movs	r0, #14
   16650:	4770      	bx	lr
   16652:	bf00      	nop
   16654:	20020798 	.word	0x20020798
   16658:	200208d4 	.word	0x200208d4
   1665c:	20020854 	.word	0x20020854
   16660:	20020838 	.word	0x20020838

00016664 <rpc_message_send>:
   16664:	b168      	cbz	r0, 16682 <rpc_message_send+0x1e>
   16666:	b171      	cbz	r1, 16686 <rpc_message_send+0x22>
   16668:	4a09      	ldr	r2, [pc, #36]	; (16690 <rpc_message_send+0x2c>)
   1666a:	6853      	ldr	r3, [r2, #4]
   1666c:	b16b      	cbz	r3, 1668a <rpc_message_send+0x26>
   1666e:	684b      	ldr	r3, [r1, #4]
   16670:	8008      	strh	r0, [r1, #0]
   16672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16676:	f043 0302 	orr.w	r3, r3, #2
   1667a:	6812      	ldr	r2, [r2, #0]
   1667c:	604b      	str	r3, [r1, #4]
   1667e:	4608      	mov	r0, r1
   16680:	4710      	bx	r2
   16682:	2007      	movs	r0, #7
   16684:	4770      	bx	lr
   16686:	200e      	movs	r0, #14
   16688:	4770      	bx	lr
   1668a:	2008      	movs	r0, #8
   1668c:	4770      	bx	lr
   1668e:	bf00      	nop
   16690:	20020838 	.word	0x20020838

00016694 <rpc_message_alloc>:
   16694:	b35a      	cbz	r2, 166ee <rpc_message_alloc+0x5a>
   16696:	b330      	cbz	r0, 166e6 <rpc_message_alloc+0x52>
   16698:	2300      	movs	r3, #0
   1669a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1669e:	4f15      	ldr	r7, [pc, #84]	; (166f4 <rpc_message_alloc+0x60>)
   166a0:	6013      	str	r3, [r2, #0]
   166a2:	687b      	ldr	r3, [r7, #4]
   166a4:	b30b      	cbz	r3, 166ea <rpc_message_alloc+0x56>
   166a6:	4615      	mov	r5, r2
   166a8:	460c      	mov	r4, r1
   166aa:	4606      	mov	r6, r0
   166ac:	b959      	cbnz	r1, 166c6 <rpc_message_alloc+0x32>
   166ae:	4798      	blx	r3
   166b0:	4603      	mov	r3, r0
   166b2:	b1a8      	cbz	r0, 166e0 <rpc_message_alloc+0x4c>
   166b4:	46a0      	mov	r8, r4
   166b6:	60dc      	str	r4, [r3, #12]
   166b8:	f8c3 8008 	str.w	r8, [r3, #8]
   166bc:	801e      	strh	r6, [r3, #0]
   166be:	602b      	str	r3, [r5, #0]
   166c0:	2000      	movs	r0, #0
   166c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   166c6:	68bb      	ldr	r3, [r7, #8]
   166c8:	4608      	mov	r0, r1
   166ca:	4798      	blx	r3
   166cc:	4680      	mov	r8, r0
   166ce:	b138      	cbz	r0, 166e0 <rpc_message_alloc+0x4c>
   166d0:	687b      	ldr	r3, [r7, #4]
   166d2:	4798      	blx	r3
   166d4:	4603      	mov	r3, r0
   166d6:	2800      	cmp	r0, #0
   166d8:	d1ed      	bne.n	166b6 <rpc_message_alloc+0x22>
   166da:	693b      	ldr	r3, [r7, #16]
   166dc:	4640      	mov	r0, r8
   166de:	4798      	blx	r3
   166e0:	2004      	movs	r0, #4
   166e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   166e6:	2007      	movs	r0, #7
   166e8:	4770      	bx	lr
   166ea:	2008      	movs	r0, #8
   166ec:	e7f9      	b.n	166e2 <rpc_message_alloc+0x4e>
   166ee:	200e      	movs	r0, #14
   166f0:	4770      	bx	lr
   166f2:	bf00      	nop
   166f4:	20020838 	.word	0x20020838

000166f8 <rpc_message_free>:
   166f8:	2800      	cmp	r0, #0
   166fa:	f000 808c 	beq.w	16816 <rpc_message_free+0x11e>
   166fe:	2900      	cmp	r1, #0
   16700:	f000 80e9 	beq.w	168d6 <rpc_message_free+0x1de>
   16704:	b538      	push	{r3, r4, r5, lr}
   16706:	4a83      	ldr	r2, [pc, #524]	; (16914 <rpc_message_free+0x21c>)
   16708:	6853      	ldr	r3, [r2, #4]
   1670a:	2b00      	cmp	r3, #0
   1670c:	f000 8085 	beq.w	1681a <rpc_message_free+0x122>
   16710:	4c81      	ldr	r4, [pc, #516]	; (16918 <rpc_message_free+0x220>)
   16712:	4608      	mov	r0, r1
   16714:	6863      	ldr	r3, [r4, #4]
   16716:	4299      	cmp	r1, r3
   16718:	f000 8085 	beq.w	16826 <rpc_message_free+0x12e>
   1671c:	68e3      	ldr	r3, [r4, #12]
   1671e:	4298      	cmp	r0, r3
   16720:	f000 808e 	beq.w	16840 <rpc_message_free+0x148>
   16724:	6963      	ldr	r3, [r4, #20]
   16726:	4298      	cmp	r0, r3
   16728:	f000 8090 	beq.w	1684c <rpc_message_free+0x154>
   1672c:	69e3      	ldr	r3, [r4, #28]
   1672e:	4298      	cmp	r0, r3
   16730:	f000 8092 	beq.w	16858 <rpc_message_free+0x160>
   16734:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16736:	4298      	cmp	r0, r3
   16738:	f000 8095 	beq.w	16866 <rpc_message_free+0x16e>
   1673c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1673e:	4298      	cmp	r0, r3
   16740:	f000 8098 	beq.w	16874 <rpc_message_free+0x17c>
   16744:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16746:	4298      	cmp	r0, r3
   16748:	f000 809b 	beq.w	16882 <rpc_message_free+0x18a>
   1674c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1674e:	4298      	cmp	r0, r3
   16750:	f000 809e 	beq.w	16890 <rpc_message_free+0x198>
   16754:	6c63      	ldr	r3, [r4, #68]	; 0x44
   16756:	4298      	cmp	r0, r3
   16758:	f000 80a1 	beq.w	1689e <rpc_message_free+0x1a6>
   1675c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1675e:	4298      	cmp	r0, r3
   16760:	f000 80a4 	beq.w	168ac <rpc_message_free+0x1b4>
   16764:	6d63      	ldr	r3, [r4, #84]	; 0x54
   16766:	4298      	cmp	r0, r3
   16768:	f000 80a7 	beq.w	168ba <rpc_message_free+0x1c2>
   1676c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1676e:	4298      	cmp	r0, r3
   16770:	f000 80aa 	beq.w	168c8 <rpc_message_free+0x1d0>
   16774:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16776:	4298      	cmp	r0, r3
   16778:	f000 80af 	beq.w	168da <rpc_message_free+0x1e2>
   1677c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1677e:	4298      	cmp	r0, r3
   16780:	f000 80b2 	beq.w	168e8 <rpc_message_free+0x1f0>
   16784:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16786:	4298      	cmp	r0, r3
   16788:	f000 80b5 	beq.w	168f6 <rpc_message_free+0x1fe>
   1678c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1678e:	4283      	cmp	r3, r0
   16790:	f000 80b8 	beq.w	16904 <rpc_message_free+0x20c>
   16794:	68d3      	ldr	r3, [r2, #12]
   16796:	4798      	blx	r3
   16798:	7823      	ldrb	r3, [r4, #0]
   1679a:	2b04      	cmp	r3, #4
   1679c:	d03f      	beq.n	1681e <rpc_message_free+0x126>
   1679e:	7a23      	ldrb	r3, [r4, #8]
   167a0:	2b04      	cmp	r3, #4
   167a2:	d03c      	beq.n	1681e <rpc_message_free+0x126>
   167a4:	7c23      	ldrb	r3, [r4, #16]
   167a6:	2b04      	cmp	r3, #4
   167a8:	d039      	beq.n	1681e <rpc_message_free+0x126>
   167aa:	7e23      	ldrb	r3, [r4, #24]
   167ac:	2b04      	cmp	r3, #4
   167ae:	d036      	beq.n	1681e <rpc_message_free+0x126>
   167b0:	f894 3020 	ldrb.w	r3, [r4, #32]
   167b4:	2b04      	cmp	r3, #4
   167b6:	d032      	beq.n	1681e <rpc_message_free+0x126>
   167b8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   167bc:	2b04      	cmp	r3, #4
   167be:	d02e      	beq.n	1681e <rpc_message_free+0x126>
   167c0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   167c4:	2b04      	cmp	r3, #4
   167c6:	d02a      	beq.n	1681e <rpc_message_free+0x126>
   167c8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   167cc:	2b04      	cmp	r3, #4
   167ce:	d026      	beq.n	1681e <rpc_message_free+0x126>
   167d0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   167d4:	2b04      	cmp	r3, #4
   167d6:	d022      	beq.n	1681e <rpc_message_free+0x126>
   167d8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   167dc:	2b04      	cmp	r3, #4
   167de:	d01e      	beq.n	1681e <rpc_message_free+0x126>
   167e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   167e4:	2b04      	cmp	r3, #4
   167e6:	d01a      	beq.n	1681e <rpc_message_free+0x126>
   167e8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   167ec:	2b04      	cmp	r3, #4
   167ee:	d016      	beq.n	1681e <rpc_message_free+0x126>
   167f0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   167f4:	2b04      	cmp	r3, #4
   167f6:	d012      	beq.n	1681e <rpc_message_free+0x126>
   167f8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   167fc:	2b04      	cmp	r3, #4
   167fe:	d00e      	beq.n	1681e <rpc_message_free+0x126>
   16800:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   16804:	2b04      	cmp	r3, #4
   16806:	d00a      	beq.n	1681e <rpc_message_free+0x126>
   16808:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1680c:	2b04      	cmp	r3, #4
   1680e:	bf18      	it	ne
   16810:	2000      	movne	r0, #0
   16812:	d004      	beq.n	1681e <rpc_message_free+0x126>
   16814:	bd38      	pop	{r3, r4, r5, pc}
   16816:	2007      	movs	r0, #7
   16818:	4770      	bx	lr
   1681a:	2008      	movs	r0, #8
   1681c:	bd38      	pop	{r3, r4, r5, pc}
   1681e:	f7f8 fe53 	bl	f4c8 <bsd_os_application_irq_set>
   16822:	2000      	movs	r0, #0
   16824:	bd38      	pop	{r3, r4, r5, pc}
   16826:	7821      	ldrb	r1, [r4, #0]
   16828:	2903      	cmp	r1, #3
   1682a:	f47f af77 	bne.w	1671c <rpc_message_free+0x24>
   1682e:	2100      	movs	r1, #0
   16830:	2501      	movs	r5, #1
   16832:	4618      	mov	r0, r3
   16834:	68d2      	ldr	r2, [r2, #12]
   16836:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   1683a:	4790      	blx	r2
   1683c:	2000      	movs	r0, #0
   1683e:	bd38      	pop	{r3, r4, r5, pc}
   16840:	7a21      	ldrb	r1, [r4, #8]
   16842:	2903      	cmp	r1, #3
   16844:	f47f af6e 	bne.w	16724 <rpc_message_free+0x2c>
   16848:	2101      	movs	r1, #1
   1684a:	e7f1      	b.n	16830 <rpc_message_free+0x138>
   1684c:	7c21      	ldrb	r1, [r4, #16]
   1684e:	2903      	cmp	r1, #3
   16850:	f47f af6c 	bne.w	1672c <rpc_message_free+0x34>
   16854:	2102      	movs	r1, #2
   16856:	e7eb      	b.n	16830 <rpc_message_free+0x138>
   16858:	7e21      	ldrb	r1, [r4, #24]
   1685a:	2903      	cmp	r1, #3
   1685c:	d0e8      	beq.n	16830 <rpc_message_free+0x138>
   1685e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16860:	4298      	cmp	r0, r3
   16862:	f47f af6b 	bne.w	1673c <rpc_message_free+0x44>
   16866:	f894 1020 	ldrb.w	r1, [r4, #32]
   1686a:	2903      	cmp	r1, #3
   1686c:	f47f af66 	bne.w	1673c <rpc_message_free+0x44>
   16870:	2104      	movs	r1, #4
   16872:	e7dd      	b.n	16830 <rpc_message_free+0x138>
   16874:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   16878:	2903      	cmp	r1, #3
   1687a:	f47f af63 	bne.w	16744 <rpc_message_free+0x4c>
   1687e:	2105      	movs	r1, #5
   16880:	e7d6      	b.n	16830 <rpc_message_free+0x138>
   16882:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   16886:	2903      	cmp	r1, #3
   16888:	f47f af60 	bne.w	1674c <rpc_message_free+0x54>
   1688c:	2106      	movs	r1, #6
   1688e:	e7cf      	b.n	16830 <rpc_message_free+0x138>
   16890:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   16894:	2903      	cmp	r1, #3
   16896:	f47f af5d 	bne.w	16754 <rpc_message_free+0x5c>
   1689a:	2107      	movs	r1, #7
   1689c:	e7c8      	b.n	16830 <rpc_message_free+0x138>
   1689e:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   168a2:	2903      	cmp	r1, #3
   168a4:	f47f af5a 	bne.w	1675c <rpc_message_free+0x64>
   168a8:	2108      	movs	r1, #8
   168aa:	e7c1      	b.n	16830 <rpc_message_free+0x138>
   168ac:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   168b0:	2903      	cmp	r1, #3
   168b2:	f47f af57 	bne.w	16764 <rpc_message_free+0x6c>
   168b6:	2109      	movs	r1, #9
   168b8:	e7ba      	b.n	16830 <rpc_message_free+0x138>
   168ba:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   168be:	2903      	cmp	r1, #3
   168c0:	f47f af54 	bne.w	1676c <rpc_message_free+0x74>
   168c4:	210a      	movs	r1, #10
   168c6:	e7b3      	b.n	16830 <rpc_message_free+0x138>
   168c8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   168cc:	2903      	cmp	r1, #3
   168ce:	f47f af51 	bne.w	16774 <rpc_message_free+0x7c>
   168d2:	210b      	movs	r1, #11
   168d4:	e7ac      	b.n	16830 <rpc_message_free+0x138>
   168d6:	200e      	movs	r0, #14
   168d8:	4770      	bx	lr
   168da:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   168de:	2903      	cmp	r1, #3
   168e0:	f47f af4c 	bne.w	1677c <rpc_message_free+0x84>
   168e4:	210c      	movs	r1, #12
   168e6:	e7a3      	b.n	16830 <rpc_message_free+0x138>
   168e8:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   168ec:	2903      	cmp	r1, #3
   168ee:	f47f af49 	bne.w	16784 <rpc_message_free+0x8c>
   168f2:	210d      	movs	r1, #13
   168f4:	e79c      	b.n	16830 <rpc_message_free+0x138>
   168f6:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   168fa:	2903      	cmp	r1, #3
   168fc:	f47f af46 	bne.w	1678c <rpc_message_free+0x94>
   16900:	210e      	movs	r1, #14
   16902:	e795      	b.n	16830 <rpc_message_free+0x138>
   16904:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16908:	2b03      	cmp	r3, #3
   1690a:	f47f af43 	bne.w	16794 <rpc_message_free+0x9c>
   1690e:	4603      	mov	r3, r0
   16910:	210f      	movs	r1, #15
   16912:	e78d      	b.n	16830 <rpc_message_free+0x138>
   16914:	20020838 	.word	0x20020838
   16918:	200208d0 	.word	0x200208d0

0001691c <rpc_message_data_free>:
   1691c:	2800      	cmp	r0, #0
   1691e:	f000 8091 	beq.w	16a44 <rpc_message_data_free+0x128>
   16922:	2900      	cmp	r1, #0
   16924:	f000 80e4 	beq.w	16af0 <rpc_message_data_free+0x1d4>
   16928:	b538      	push	{r3, r4, r5, lr}
   1692a:	4a81      	ldr	r2, [pc, #516]	; (16b30 <rpc_message_data_free+0x214>)
   1692c:	6853      	ldr	r3, [r2, #4]
   1692e:	2b00      	cmp	r3, #0
   16930:	f000 808a 	beq.w	16a48 <rpc_message_data_free+0x12c>
   16934:	4b7f      	ldr	r3, [pc, #508]	; (16b34 <rpc_message_data_free+0x218>)
   16936:	681c      	ldr	r4, [r3, #0]
   16938:	42a1      	cmp	r1, r4
   1693a:	f000 8087 	beq.w	16a4c <rpc_message_data_free+0x130>
   1693e:	689c      	ldr	r4, [r3, #8]
   16940:	42a1      	cmp	r1, r4
   16942:	f000 808f 	beq.w	16a64 <rpc_message_data_free+0x148>
   16946:	691c      	ldr	r4, [r3, #16]
   16948:	42a1      	cmp	r1, r4
   1694a:	f000 8091 	beq.w	16a70 <rpc_message_data_free+0x154>
   1694e:	699c      	ldr	r4, [r3, #24]
   16950:	42a1      	cmp	r1, r4
   16952:	f000 8093 	beq.w	16a7c <rpc_message_data_free+0x160>
   16956:	6a1c      	ldr	r4, [r3, #32]
   16958:	42a1      	cmp	r1, r4
   1695a:	f000 8095 	beq.w	16a88 <rpc_message_data_free+0x16c>
   1695e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   16960:	42a1      	cmp	r1, r4
   16962:	f000 8097 	beq.w	16a94 <rpc_message_data_free+0x178>
   16966:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   16968:	42a1      	cmp	r1, r4
   1696a:	f000 8099 	beq.w	16aa0 <rpc_message_data_free+0x184>
   1696e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   16970:	42a1      	cmp	r1, r4
   16972:	f000 809b 	beq.w	16aac <rpc_message_data_free+0x190>
   16976:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   16978:	42a1      	cmp	r1, r4
   1697a:	f000 809d 	beq.w	16ab8 <rpc_message_data_free+0x19c>
   1697e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   16980:	42a1      	cmp	r1, r4
   16982:	f000 80a0 	beq.w	16ac6 <rpc_message_data_free+0x1aa>
   16986:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   16988:	42a1      	cmp	r1, r4
   1698a:	f000 80a3 	beq.w	16ad4 <rpc_message_data_free+0x1b8>
   1698e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   16990:	42a1      	cmp	r1, r4
   16992:	f000 80a6 	beq.w	16ae2 <rpc_message_data_free+0x1c6>
   16996:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   16998:	42a1      	cmp	r1, r4
   1699a:	f000 80ab 	beq.w	16af4 <rpc_message_data_free+0x1d8>
   1699e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   169a0:	42a1      	cmp	r1, r4
   169a2:	f000 80ae 	beq.w	16b02 <rpc_message_data_free+0x1e6>
   169a6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   169a8:	42a1      	cmp	r1, r4
   169aa:	f000 80b1 	beq.w	16b10 <rpc_message_data_free+0x1f4>
   169ae:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   169b0:	428c      	cmp	r4, r1
   169b2:	f000 80b4 	beq.w	16b1e <rpc_message_data_free+0x202>
   169b6:	6913      	ldr	r3, [r2, #16]
   169b8:	4608      	mov	r0, r1
   169ba:	4798      	blx	r3
   169bc:	4b5e      	ldr	r3, [pc, #376]	; (16b38 <rpc_message_data_free+0x21c>)
   169be:	781a      	ldrb	r2, [r3, #0]
   169c0:	2a04      	cmp	r2, #4
   169c2:	d03b      	beq.n	16a3c <rpc_message_data_free+0x120>
   169c4:	7a1a      	ldrb	r2, [r3, #8]
   169c6:	2a04      	cmp	r2, #4
   169c8:	d038      	beq.n	16a3c <rpc_message_data_free+0x120>
   169ca:	7c1a      	ldrb	r2, [r3, #16]
   169cc:	2a04      	cmp	r2, #4
   169ce:	d035      	beq.n	16a3c <rpc_message_data_free+0x120>
   169d0:	7e1a      	ldrb	r2, [r3, #24]
   169d2:	2a04      	cmp	r2, #4
   169d4:	d032      	beq.n	16a3c <rpc_message_data_free+0x120>
   169d6:	f893 2020 	ldrb.w	r2, [r3, #32]
   169da:	2a04      	cmp	r2, #4
   169dc:	d02e      	beq.n	16a3c <rpc_message_data_free+0x120>
   169de:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   169e2:	2a04      	cmp	r2, #4
   169e4:	d02a      	beq.n	16a3c <rpc_message_data_free+0x120>
   169e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   169ea:	2a04      	cmp	r2, #4
   169ec:	d026      	beq.n	16a3c <rpc_message_data_free+0x120>
   169ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   169f2:	2a04      	cmp	r2, #4
   169f4:	d022      	beq.n	16a3c <rpc_message_data_free+0x120>
   169f6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   169fa:	2a04      	cmp	r2, #4
   169fc:	d01e      	beq.n	16a3c <rpc_message_data_free+0x120>
   169fe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   16a02:	2a04      	cmp	r2, #4
   16a04:	d01a      	beq.n	16a3c <rpc_message_data_free+0x120>
   16a06:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   16a0a:	2a04      	cmp	r2, #4
   16a0c:	d016      	beq.n	16a3c <rpc_message_data_free+0x120>
   16a0e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   16a12:	2a04      	cmp	r2, #4
   16a14:	d012      	beq.n	16a3c <rpc_message_data_free+0x120>
   16a16:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   16a1a:	2a04      	cmp	r2, #4
   16a1c:	d00e      	beq.n	16a3c <rpc_message_data_free+0x120>
   16a1e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   16a22:	2a04      	cmp	r2, #4
   16a24:	d00a      	beq.n	16a3c <rpc_message_data_free+0x120>
   16a26:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   16a2a:	2a04      	cmp	r2, #4
   16a2c:	d006      	beq.n	16a3c <rpc_message_data_free+0x120>
   16a2e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   16a32:	2b04      	cmp	r3, #4
   16a34:	bf18      	it	ne
   16a36:	2000      	movne	r0, #0
   16a38:	d000      	beq.n	16a3c <rpc_message_data_free+0x120>
   16a3a:	bd38      	pop	{r3, r4, r5, pc}
   16a3c:	f7f8 fd44 	bl	f4c8 <bsd_os_application_irq_set>
   16a40:	2000      	movs	r0, #0
   16a42:	bd38      	pop	{r3, r4, r5, pc}
   16a44:	2007      	movs	r0, #7
   16a46:	4770      	bx	lr
   16a48:	2008      	movs	r0, #8
   16a4a:	bd38      	pop	{r3, r4, r5, pc}
   16a4c:	889c      	ldrh	r4, [r3, #4]
   16a4e:	4284      	cmp	r4, r0
   16a50:	f47f af75 	bne.w	1693e <rpc_message_data_free+0x22>
   16a54:	2400      	movs	r4, #0
   16a56:	2000      	movs	r0, #0
   16a58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   16a5c:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   16a60:	80a8      	strh	r0, [r5, #4]
   16a62:	e7a8      	b.n	169b6 <rpc_message_data_free+0x9a>
   16a64:	899c      	ldrh	r4, [r3, #12]
   16a66:	4284      	cmp	r4, r0
   16a68:	f47f af6d 	bne.w	16946 <rpc_message_data_free+0x2a>
   16a6c:	2401      	movs	r4, #1
   16a6e:	e7f2      	b.n	16a56 <rpc_message_data_free+0x13a>
   16a70:	8a9c      	ldrh	r4, [r3, #20]
   16a72:	4284      	cmp	r4, r0
   16a74:	f47f af6b 	bne.w	1694e <rpc_message_data_free+0x32>
   16a78:	2402      	movs	r4, #2
   16a7a:	e7ec      	b.n	16a56 <rpc_message_data_free+0x13a>
   16a7c:	8b9c      	ldrh	r4, [r3, #28]
   16a7e:	4284      	cmp	r4, r0
   16a80:	f47f af69 	bne.w	16956 <rpc_message_data_free+0x3a>
   16a84:	2403      	movs	r4, #3
   16a86:	e7e6      	b.n	16a56 <rpc_message_data_free+0x13a>
   16a88:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   16a8a:	4284      	cmp	r4, r0
   16a8c:	f47f af67 	bne.w	1695e <rpc_message_data_free+0x42>
   16a90:	2404      	movs	r4, #4
   16a92:	e7e0      	b.n	16a56 <rpc_message_data_free+0x13a>
   16a94:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   16a96:	4284      	cmp	r4, r0
   16a98:	f47f af65 	bne.w	16966 <rpc_message_data_free+0x4a>
   16a9c:	2405      	movs	r4, #5
   16a9e:	e7da      	b.n	16a56 <rpc_message_data_free+0x13a>
   16aa0:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   16aa2:	4284      	cmp	r4, r0
   16aa4:	f47f af63 	bne.w	1696e <rpc_message_data_free+0x52>
   16aa8:	2406      	movs	r4, #6
   16aaa:	e7d4      	b.n	16a56 <rpc_message_data_free+0x13a>
   16aac:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   16aae:	4284      	cmp	r4, r0
   16ab0:	f47f af61 	bne.w	16976 <rpc_message_data_free+0x5a>
   16ab4:	2407      	movs	r4, #7
   16ab6:	e7ce      	b.n	16a56 <rpc_message_data_free+0x13a>
   16ab8:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   16abc:	4284      	cmp	r4, r0
   16abe:	f47f af5e 	bne.w	1697e <rpc_message_data_free+0x62>
   16ac2:	2408      	movs	r4, #8
   16ac4:	e7c7      	b.n	16a56 <rpc_message_data_free+0x13a>
   16ac6:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   16aca:	4284      	cmp	r4, r0
   16acc:	f47f af5b 	bne.w	16986 <rpc_message_data_free+0x6a>
   16ad0:	2409      	movs	r4, #9
   16ad2:	e7c0      	b.n	16a56 <rpc_message_data_free+0x13a>
   16ad4:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   16ad8:	4284      	cmp	r4, r0
   16ada:	f47f af58 	bne.w	1698e <rpc_message_data_free+0x72>
   16ade:	240a      	movs	r4, #10
   16ae0:	e7b9      	b.n	16a56 <rpc_message_data_free+0x13a>
   16ae2:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   16ae6:	4284      	cmp	r4, r0
   16ae8:	f47f af55 	bne.w	16996 <rpc_message_data_free+0x7a>
   16aec:	240b      	movs	r4, #11
   16aee:	e7b2      	b.n	16a56 <rpc_message_data_free+0x13a>
   16af0:	200e      	movs	r0, #14
   16af2:	4770      	bx	lr
   16af4:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   16af8:	4284      	cmp	r4, r0
   16afa:	f47f af50 	bne.w	1699e <rpc_message_data_free+0x82>
   16afe:	240c      	movs	r4, #12
   16b00:	e7a9      	b.n	16a56 <rpc_message_data_free+0x13a>
   16b02:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   16b06:	4284      	cmp	r4, r0
   16b08:	f47f af4d 	bne.w	169a6 <rpc_message_data_free+0x8a>
   16b0c:	240d      	movs	r4, #13
   16b0e:	e7a2      	b.n	16a56 <rpc_message_data_free+0x13a>
   16b10:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   16b14:	4284      	cmp	r4, r0
   16b16:	f47f af4a 	bne.w	169ae <rpc_message_data_free+0x92>
   16b1a:	240e      	movs	r4, #14
   16b1c:	e79b      	b.n	16a56 <rpc_message_data_free+0x13a>
   16b1e:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   16b22:	4284      	cmp	r4, r0
   16b24:	bf08      	it	eq
   16b26:	240f      	moveq	r4, #15
   16b28:	f47f af45 	bne.w	169b6 <rpc_message_data_free+0x9a>
   16b2c:	e793      	b.n	16a56 <rpc_message_data_free+0x13a>
   16b2e:	bf00      	nop
   16b30:	20020838 	.word	0x20020838
   16b34:	20020850 	.word	0x20020850
   16b38:	200208d0 	.word	0x200208d0

00016b3c <packet_free_cb>:
   16b3c:	b510      	push	{r4, lr}
   16b3e:	4604      	mov	r4, r0
   16b40:	b118      	cbz	r0, 16b4a <packet_free_cb+0xe>
   16b42:	6800      	ldr	r0, [r0, #0]
   16b44:	b108      	cbz	r0, 16b4a <packet_free_cb+0xe>
   16b46:	f001 f82f 	bl	17ba8 <rpc_gnss_client_data_free>
   16b4a:	68a0      	ldr	r0, [r4, #8]
   16b4c:	b118      	cbz	r0, 16b56 <packet_free_cb+0x1a>
   16b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16b52:	f7fa b919 	b.w	10d88 <nrf_free>
   16b56:	bd10      	pop	{r4, pc}

00016b58 <rpc_gnss_event_handler>:
   16b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b5c:	4b64      	ldr	r3, [pc, #400]	; (16cf0 <rpc_gnss_event_handler+0x198>)
   16b5e:	4606      	mov	r6, r0
   16b60:	6800      	ldr	r0, [r0, #0]
   16b62:	881b      	ldrh	r3, [r3, #0]
   16b64:	6802      	ldr	r2, [r0, #0]
   16b66:	4f63      	ldr	r7, [pc, #396]	; (16cf4 <rpc_gnss_event_handler+0x19c>)
   16b68:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   16b6c:	b084      	sub	sp, #16
   16b6e:	460d      	mov	r5, r1
   16b70:	6038      	str	r0, [r7, #0]
   16b72:	d038      	beq.n	16be6 <rpc_gnss_event_handler+0x8e>
   16b74:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   16b78:	33ff      	adds	r3, #255	; 0xff
   16b7a:	b29b      	uxth	r3, r3
   16b7c:	2b02      	cmp	r3, #2
   16b7e:	d810      	bhi.n	16ba2 <rpc_gnss_event_handler+0x4a>
   16b80:	4c5d      	ldr	r4, [pc, #372]	; (16cf8 <rpc_gnss_event_handler+0x1a0>)
   16b82:	6823      	ldr	r3, [r4, #0]
   16b84:	075a      	lsls	r2, r3, #29
   16b86:	d410      	bmi.n	16baa <rpc_gnss_event_handler+0x52>
   16b88:	6823      	ldr	r3, [r4, #0]
   16b8a:	079b      	lsls	r3, r3, #30
   16b8c:	d503      	bpl.n	16b96 <rpc_gnss_event_handler+0x3e>
   16b8e:	f244 0303 	movw	r3, #16387	; 0x4003
   16b92:	429d      	cmp	r5, r3
   16b94:	d009      	beq.n	16baa <rpc_gnss_event_handler+0x52>
   16b96:	6830      	ldr	r0, [r6, #0]
   16b98:	b118      	cbz	r0, 16ba2 <rpc_gnss_event_handler+0x4a>
   16b9a:	f001 f805 	bl	17ba8 <rpc_gnss_client_data_free>
   16b9e:	2300      	movs	r3, #0
   16ba0:	603b      	str	r3, [r7, #0]
   16ba2:	2000      	movs	r0, #0
   16ba4:	b004      	add	sp, #16
   16ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16baa:	2002      	movs	r0, #2
   16bac:	f7fa f8e2 	bl	10d74 <nrf_malloc>
   16bb0:	4680      	mov	r8, r0
   16bb2:	2800      	cmp	r0, #0
   16bb4:	f000 8093 	beq.w	16cde <rpc_gnss_event_handler+0x186>
   16bb8:	2302      	movs	r3, #2
   16bba:	8005      	strh	r5, [r0, #0]
   16bbc:	6831      	ldr	r1, [r6, #0]
   16bbe:	6872      	ldr	r2, [r6, #4]
   16bc0:	484e      	ldr	r0, [pc, #312]	; (16cfc <rpc_gnss_event_handler+0x1a4>)
   16bc2:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   16bc6:	6800      	ldr	r0, [r0, #0]
   16bc8:	9303      	str	r3, [sp, #12]
   16bca:	6803      	ldr	r3, [r0, #0]
   16bcc:	4669      	mov	r1, sp
   16bce:	685b      	ldr	r3, [r3, #4]
   16bd0:	4798      	blx	r3
   16bd2:	3001      	adds	r0, #1
   16bd4:	d070      	beq.n	16cb8 <rpc_gnss_event_handler+0x160>
   16bd6:	2000      	movs	r0, #0
   16bd8:	6823      	ldr	r3, [r4, #0]
   16bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16bde:	6023      	str	r3, [r4, #0]
   16be0:	b004      	add	sp, #16
   16be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16be6:	4c44      	ldr	r4, [pc, #272]	; (16cf8 <rpc_gnss_event_handler+0x1a0>)
   16be8:	6823      	ldr	r3, [r4, #0]
   16bea:	01d9      	lsls	r1, r3, #7
   16bec:	d523      	bpl.n	16c36 <rpc_gnss_event_handler+0xde>
   16bee:	f242 1302 	movw	r3, #8450	; 0x2102
   16bf2:	429d      	cmp	r5, r3
   16bf4:	d11f      	bne.n	16c36 <rpc_gnss_event_handler+0xde>
   16bf6:	6843      	ldr	r3, [r0, #4]
   16bf8:	b91b      	cbnz	r3, 16c02 <rpc_gnss_event_handler+0xaa>
   16bfa:	6823      	ldr	r3, [r4, #0]
   16bfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   16c00:	6023      	str	r3, [r4, #0]
   16c02:	6823      	ldr	r3, [r4, #0]
   16c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16c08:	6023      	str	r3, [r4, #0]
   16c0a:	6823      	ldr	r3, [r4, #0]
   16c0c:	025a      	lsls	r2, r3, #9
   16c0e:	d430      	bmi.n	16c72 <rpc_gnss_event_handler+0x11a>
   16c10:	f242 0305 	movw	r3, #8197	; 0x2005
   16c14:	429d      	cmp	r5, r3
   16c16:	d12c      	bne.n	16c72 <rpc_gnss_event_handler+0x11a>
   16c18:	6823      	ldr	r3, [r4, #0]
   16c1a:	0299      	lsls	r1, r3, #10
   16c1c:	d529      	bpl.n	16c72 <rpc_gnss_event_handler+0x11a>
   16c1e:	6843      	ldr	r3, [r0, #4]
   16c20:	2b00      	cmp	r3, #0
   16c22:	d157      	bne.n	16cd4 <rpc_gnss_event_handler+0x17c>
   16c24:	6823      	ldr	r3, [r4, #0]
   16c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16c2a:	6023      	str	r3, [r4, #0]
   16c2c:	6823      	ldr	r3, [r4, #0]
   16c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16c32:	6023      	str	r3, [r4, #0]
   16c34:	e01d      	b.n	16c72 <rpc_gnss_event_handler+0x11a>
   16c36:	6823      	ldr	r3, [r4, #0]
   16c38:	025b      	lsls	r3, r3, #9
   16c3a:	d50e      	bpl.n	16c5a <rpc_gnss_event_handler+0x102>
   16c3c:	f242 1303 	movw	r3, #8451	; 0x2103
   16c40:	429d      	cmp	r5, r3
   16c42:	d10a      	bne.n	16c5a <rpc_gnss_event_handler+0x102>
   16c44:	6843      	ldr	r3, [r0, #4]
   16c46:	b91b      	cbnz	r3, 16c50 <rpc_gnss_event_handler+0xf8>
   16c48:	6823      	ldr	r3, [r4, #0]
   16c4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   16c4e:	6023      	str	r3, [r4, #0]
   16c50:	6823      	ldr	r3, [r4, #0]
   16c52:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   16c56:	6023      	str	r3, [r4, #0]
   16c58:	e00b      	b.n	16c72 <rpc_gnss_event_handler+0x11a>
   16c5a:	f242 0301 	movw	r3, #8193	; 0x2001
   16c5e:	429d      	cmp	r5, r3
   16c60:	d10c      	bne.n	16c7c <rpc_gnss_event_handler+0x124>
   16c62:	6843      	ldr	r3, [r0, #4]
   16c64:	b92b      	cbnz	r3, 16c72 <rpc_gnss_event_handler+0x11a>
   16c66:	6823      	ldr	r3, [r4, #0]
   16c68:	0c1b      	lsrs	r3, r3, #16
   16c6a:	041b      	lsls	r3, r3, #16
   16c6c:	f043 0302 	orr.w	r3, r3, #2
   16c70:	6023      	str	r3, [r4, #0]
   16c72:	f000 ff99 	bl	17ba8 <rpc_gnss_client_data_free>
   16c76:	2300      	movs	r3, #0
   16c78:	603b      	str	r3, [r7, #0]
   16c7a:	e77b      	b.n	16b74 <rpc_gnss_event_handler+0x1c>
   16c7c:	f242 0304 	movw	r3, #8196	; 0x2004
   16c80:	429d      	cmp	r5, r3
   16c82:	d1c5      	bne.n	16c10 <rpc_gnss_event_handler+0xb8>
   16c84:	6843      	ldr	r3, [r0, #4]
   16c86:	b993      	cbnz	r3, 16cae <rpc_gnss_event_handler+0x156>
   16c88:	6823      	ldr	r3, [r4, #0]
   16c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   16c8e:	6023      	str	r3, [r4, #0]
   16c90:	6823      	ldr	r3, [r4, #0]
   16c92:	b29b      	uxth	r3, r3
   16c94:	2b03      	cmp	r3, #3
   16c96:	6823      	ldr	r3, [r4, #0]
   16c98:	d016      	beq.n	16cc8 <rpc_gnss_event_handler+0x170>
   16c9a:	b29b      	uxth	r3, r3
   16c9c:	2b04      	cmp	r3, #4
   16c9e:	d1d7      	bne.n	16c50 <rpc_gnss_event_handler+0xf8>
   16ca0:	6823      	ldr	r3, [r4, #0]
   16ca2:	0c1b      	lsrs	r3, r3, #16
   16ca4:	041b      	lsls	r3, r3, #16
   16ca6:	f043 0302 	orr.w	r3, r3, #2
   16caa:	6023      	str	r3, [r4, #0]
   16cac:	e7d0      	b.n	16c50 <rpc_gnss_event_handler+0xf8>
   16cae:	6823      	ldr	r3, [r4, #0]
   16cb0:	b29b      	uxth	r3, r3
   16cb2:	2b03      	cmp	r3, #3
   16cb4:	d1cc      	bne.n	16c50 <rpc_gnss_event_handler+0xf8>
   16cb6:	e7f3      	b.n	16ca0 <rpc_gnss_event_handler+0x148>
   16cb8:	4640      	mov	r0, r8
   16cba:	f7fa f865 	bl	10d88 <nrf_free>
   16cbe:	6830      	ldr	r0, [r6, #0]
   16cc0:	2800      	cmp	r0, #0
   16cc2:	f47f af6a 	bne.w	16b9a <rpc_gnss_event_handler+0x42>
   16cc6:	e76c      	b.n	16ba2 <rpc_gnss_event_handler+0x4a>
   16cc8:	0c1b      	lsrs	r3, r3, #16
   16cca:	041b      	lsls	r3, r3, #16
   16ccc:	f043 0304 	orr.w	r3, r3, #4
   16cd0:	6023      	str	r3, [r4, #0]
   16cd2:	e7bd      	b.n	16c50 <rpc_gnss_event_handler+0xf8>
   16cd4:	6823      	ldr	r3, [r4, #0]
   16cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16cda:	6023      	str	r3, [r4, #0]
   16cdc:	e7c9      	b.n	16c72 <rpc_gnss_event_handler+0x11a>
   16cde:	6830      	ldr	r0, [r6, #0]
   16ce0:	2800      	cmp	r0, #0
   16ce2:	f43f af5e 	beq.w	16ba2 <rpc_gnss_event_handler+0x4a>
   16ce6:	f000 ff5f 	bl	17ba8 <rpc_gnss_client_data_free>
   16cea:	f8c7 8000 	str.w	r8, [r7]
   16cee:	e758      	b.n	16ba2 <rpc_gnss_event_handler+0x4a>
   16cf0:	200213f4 	.word	0x200213f4
   16cf4:	20020954 	.word	0x20020954
   16cf8:	20020950 	.word	0x20020950
   16cfc:	20020958 	.word	0x20020958

00016d00 <gnss_interface_write>:
   16d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16d04:	4a74      	ldr	r2, [pc, #464]	; (16ed8 <gnss_interface_write+0x1d8>)
   16d06:	b09f      	sub	sp, #124	; 0x7c
   16d08:	4290      	cmp	r0, r2
   16d0a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   16d0c:	f040 80d7 	bne.w	16ebe <gnss_interface_write+0x1be>
   16d10:	2900      	cmp	r1, #0
   16d12:	f000 80c6 	beq.w	16ea2 <gnss_interface_write+0x1a2>
   16d16:	2d00      	cmp	r5, #0
   16d18:	f000 80c3 	beq.w	16ea2 <gnss_interface_write+0x1a2>
   16d1c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   16d1e:	2a02      	cmp	r2, #2
   16d20:	f040 80bf 	bne.w	16ea2 <gnss_interface_write+0x1a2>
   16d24:	4c6d      	ldr	r4, [pc, #436]	; (16edc <gnss_interface_write+0x1dc>)
   16d26:	6822      	ldr	r2, [r4, #0]
   16d28:	b292      	uxth	r2, r2
   16d2a:	2a02      	cmp	r2, #2
   16d2c:	d004      	beq.n	16d38 <gnss_interface_write+0x38>
   16d2e:	6822      	ldr	r2, [r4, #0]
   16d30:	b292      	uxth	r2, r2
   16d32:	2a04      	cmp	r2, #4
   16d34:	f040 80bd 	bne.w	16eb2 <gnss_interface_write+0x1b2>
   16d38:	2b00      	cmp	r3, #0
   16d3a:	f040 80c6 	bne.w	16eca <gnss_interface_write+0x1ca>
   16d3e:	6822      	ldr	r2, [r4, #0]
   16d40:	0390      	lsls	r0, r2, #14
   16d42:	d512      	bpl.n	16d6a <gnss_interface_write+0x6a>
   16d44:	6822      	ldr	r2, [r4, #0]
   16d46:	882b      	ldrh	r3, [r5, #0]
   16d48:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   16d4c:	6022      	str	r2, [r4, #0]
   16d4e:	6822      	ldr	r2, [r4, #0]
   16d50:	3b01      	subs	r3, #1
   16d52:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   16d56:	6022      	str	r2, [r4, #0]
   16d58:	2b07      	cmp	r3, #7
   16d5a:	f200 80a2 	bhi.w	16ea2 <gnss_interface_write+0x1a2>
   16d5e:	e8df f003 	tbb	[pc, r3]
   16d62:	7d82      	.short	0x7d82
   16d64:	646e7378 	.word	0x646e7378
   16d68:	0869      	.short	0x0869
   16d6a:	2000      	movs	r0, #0
   16d6c:	b01f      	add	sp, #124	; 0x7c
   16d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16d72:	4608      	mov	r0, r1
   16d74:	a902      	add	r1, sp, #8
   16d76:	f000 fecb 	bl	17b10 <rpc_gnss_serialize_integrity>
   16d7a:	2172      	movs	r1, #114	; 0x72
   16d7c:	4668      	mov	r0, sp
   16d7e:	f000 fee1 	bl	17b44 <rpc_gnss_client_request_alloc>
   16d82:	4605      	mov	r5, r0
   16d84:	9800      	ldr	r0, [sp, #0]
   16d86:	2d00      	cmp	r5, #0
   16d88:	d172      	bne.n	16e70 <gnss_interface_write+0x170>
   16d8a:	2800      	cmp	r0, #0
   16d8c:	d077      	beq.n	16e7e <gnss_interface_write+0x17e>
   16d8e:	f241 0605 	movw	r6, #4101	; 0x1005
   16d92:	f04f 0c49 	mov.w	ip, #73	; 0x49
   16d96:	2272      	movs	r2, #114	; 0x72
   16d98:	f04f 0e76 	mov.w	lr, #118	; 0x76
   16d9c:	f04f 0943 	mov.w	r9, #67	; 0x43
   16da0:	f04f 0854 	mov.w	r8, #84	; 0x54
   16da4:	4f4e      	ldr	r7, [pc, #312]	; (16ee0 <gnss_interface_write+0x1e0>)
   16da6:	a91e      	add	r1, sp, #120	; 0x78
   16da8:	883b      	ldrh	r3, [r7, #0]
   16daa:	f880 c00f 	strb.w	ip, [r0, #15]
   16dae:	3301      	adds	r3, #1
   16db0:	b29b      	uxth	r3, r3
   16db2:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   16db6:	f841 cd74 	str.w	ip, [r1, #-116]!
   16dba:	7145      	strb	r5, [r0, #5]
   16dbc:	7185      	strb	r5, [r0, #6]
   16dbe:	71c5      	strb	r5, [r0, #7]
   16dc0:	7205      	strb	r5, [r0, #8]
   16dc2:	7245      	strb	r5, [r0, #9]
   16dc4:	7285      	strb	r5, [r0, #10]
   16dc6:	72c5      	strb	r5, [r0, #11]
   16dc8:	7102      	strb	r2, [r0, #4]
   16dca:	f880 900c 	strb.w	r9, [r0, #12]
   16dce:	f880 800d 	strb.w	r8, [r0, #13]
   16dd2:	f880 e00e 	strb.w	lr, [r0, #14]
   16dd6:	6800      	ldr	r0, [r0, #0]
   16dd8:	803b      	strh	r3, [r7, #0]
   16dda:	f005 fb44 	bl	1c466 <memcpy>
   16dde:	4b41      	ldr	r3, [pc, #260]	; (16ee4 <gnss_interface_write+0x1e4>)
   16de0:	4631      	mov	r1, r6
   16de2:	9800      	ldr	r0, [sp, #0]
   16de4:	601d      	str	r5, [r3, #0]
   16de6:	f000 fec1 	bl	17b6c <rpc_gnss_client_request_send>
   16dea:	2800      	cmp	r0, #0
   16dec:	d14e      	bne.n	16e8c <gnss_interface_write+0x18c>
   16dee:	6823      	ldr	r3, [r4, #0]
   16df0:	0299      	lsls	r1, r3, #10
   16df2:	d50b      	bpl.n	16e0c <gnss_interface_write+0x10c>
   16df4:	4e3c      	ldr	r6, [pc, #240]	; (16ee8 <gnss_interface_write+0x1e8>)
   16df6:	4d38      	ldr	r5, [pc, #224]	; (16ed8 <gnss_interface_write+0x1d8>)
   16df8:	e000      	b.n	16dfc <gnss_interface_write+0xfc>
   16dfa:	b978      	cbnz	r0, 16e1c <gnss_interface_write+0x11c>
   16dfc:	4631      	mov	r1, r6
   16dfe:	4628      	mov	r0, r5
   16e00:	f7f8 fa02 	bl	f208 <bsd_os_timedwait>
   16e04:	6823      	ldr	r3, [r4, #0]
   16e06:	029a      	lsls	r2, r3, #10
   16e08:	d4f7      	bmi.n	16dfa <gnss_interface_write+0xfa>
   16e0a:	b938      	cbnz	r0, 16e1c <gnss_interface_write+0x11c>
   16e0c:	6823      	ldr	r3, [r4, #0]
   16e0e:	039b      	lsls	r3, r3, #14
   16e10:	d4ab      	bmi.n	16d6a <gnss_interface_write+0x6a>
   16e12:	2005      	movs	r0, #5
   16e14:	6823      	ldr	r3, [r4, #0]
   16e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16e1a:	6023      	str	r3, [r4, #0]
   16e1c:	f7f8 fa88 	bl	f330 <bsd_os_errno_set>
   16e20:	f04f 30ff 	mov.w	r0, #4294967295
   16e24:	b01f      	add	sp, #124	; 0x7c
   16e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16e2a:	4608      	mov	r0, r1
   16e2c:	a902      	add	r1, sp, #8
   16e2e:	f000 fe27 	bl	17a80 <rpc_gnss_serialize_time_and_sv_tow>
   16e32:	e7a2      	b.n	16d7a <gnss_interface_write+0x7a>
   16e34:	4608      	mov	r0, r1
   16e36:	a902      	add	r1, sp, #8
   16e38:	f000 fe4a 	bl	17ad0 <rpc_gnss_serialize_location>
   16e3c:	e79d      	b.n	16d7a <gnss_interface_write+0x7a>
   16e3e:	4608      	mov	r0, r1
   16e40:	a902      	add	r1, sp, #8
   16e42:	f000 fe03 	bl	17a4c <rpc_gnss_serialize_nequick>
   16e46:	e798      	b.n	16d7a <gnss_interface_write+0x7a>
   16e48:	4608      	mov	r0, r1
   16e4a:	a902      	add	r1, sp, #8
   16e4c:	f000 fdda 	bl	17a04 <rpc_gnss_serialize_klob>
   16e50:	e793      	b.n	16d7a <gnss_interface_write+0x7a>
   16e52:	4608      	mov	r0, r1
   16e54:	a902      	add	r1, sp, #8
   16e56:	f000 fda3 	bl	179a0 <rpc_gnss_serialize_alm>
   16e5a:	e78e      	b.n	16d7a <gnss_interface_write+0x7a>
   16e5c:	4608      	mov	r0, r1
   16e5e:	a902      	add	r1, sp, #8
   16e60:	f000 fd4c 	bl	178fc <rpc_gnss_serialize_ephe>
   16e64:	e789      	b.n	16d7a <gnss_interface_write+0x7a>
   16e66:	4608      	mov	r0, r1
   16e68:	a902      	add	r1, sp, #8
   16e6a:	f000 fd25 	bl	178b8 <rpc_gnss_serialize_utc>
   16e6e:	e784      	b.n	16d7a <gnss_interface_write+0x7a>
   16e70:	b128      	cbz	r0, 16e7e <gnss_interface_write+0x17e>
   16e72:	6803      	ldr	r3, [r0, #0]
   16e74:	b11b      	cbz	r3, 16e7e <gnss_interface_write+0x17e>
   16e76:	4618      	mov	r0, r3
   16e78:	f000 fe96 	bl	17ba8 <rpc_gnss_client_data_free>
   16e7c:	9800      	ldr	r0, [sp, #0]
   16e7e:	f000 fe8b 	bl	17b98 <rpc_gnss_client_message_free>
   16e82:	2023      	movs	r0, #35	; 0x23
   16e84:	f7f8 fa54 	bl	f330 <bsd_os_errno_set>
   16e88:	f04f 30ff 	mov.w	r0, #4294967295
   16e8c:	6823      	ldr	r3, [r4, #0]
   16e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16e92:	6023      	str	r3, [r4, #0]
   16e94:	6823      	ldr	r3, [r4, #0]
   16e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16e9a:	6023      	str	r3, [r4, #0]
   16e9c:	b01f      	add	sp, #124	; 0x7c
   16e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16ea2:	2016      	movs	r0, #22
   16ea4:	f7f8 fa44 	bl	f330 <bsd_os_errno_set>
   16ea8:	f04f 30ff 	mov.w	r0, #4294967295
   16eac:	b01f      	add	sp, #124	; 0x7c
   16eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16eb2:	2039      	movs	r0, #57	; 0x39
   16eb4:	f7f8 fa3c 	bl	f330 <bsd_os_errno_set>
   16eb8:	f04f 30ff 	mov.w	r0, #4294967295
   16ebc:	e756      	b.n	16d6c <gnss_interface_write+0x6c>
   16ebe:	2009      	movs	r0, #9
   16ec0:	f7f8 fa36 	bl	f330 <bsd_os_errno_set>
   16ec4:	f04f 30ff 	mov.w	r0, #4294967295
   16ec8:	e750      	b.n	16d6c <gnss_interface_write+0x6c>
   16eca:	202d      	movs	r0, #45	; 0x2d
   16ecc:	f7f8 fa30 	bl	f330 <bsd_os_errno_set>
   16ed0:	f04f 30ff 	mov.w	r0, #4294967295
   16ed4:	e74a      	b.n	16d6c <gnss_interface_write+0x6c>
   16ed6:	bf00      	nop
   16ed8:	49765443 	.word	0x49765443
   16edc:	20020950 	.word	0x20020950
   16ee0:	200213f4 	.word	0x200213f4
   16ee4:	20020954 	.word	0x20020954
   16ee8:	20024f68 	.word	0x20024f68

00016eec <gnss_interface_read>:
   16eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ef0:	4c50      	ldr	r4, [pc, #320]	; (17034 <gnss_interface_read+0x148>)
   16ef2:	b0b7      	sub	sp, #220	; 0xdc
   16ef4:	42a0      	cmp	r0, r4
   16ef6:	f040 81fe 	bne.w	172f6 <gnss_interface_read+0x40a>
   16efa:	4688      	mov	r8, r1
   16efc:	2900      	cmp	r1, #0
   16efe:	f000 81f4 	beq.w	172ea <gnss_interface_read+0x3fe>
   16f02:	2ad7      	cmp	r2, #215	; 0xd7
   16f04:	f240 81f1 	bls.w	172ea <gnss_interface_read+0x3fe>
   16f08:	4d4b      	ldr	r5, [pc, #300]	; (17038 <gnss_interface_read+0x14c>)
   16f0a:	4699      	mov	r9, r3
   16f0c:	682b      	ldr	r3, [r5, #0]
   16f0e:	b29b      	uxth	r3, r3
   16f10:	2b04      	cmp	r3, #4
   16f12:	d004      	beq.n	16f1e <gnss_interface_read+0x32>
   16f14:	682b      	ldr	r3, [r5, #0]
   16f16:	b29b      	uxth	r3, r3
   16f18:	2b02      	cmp	r3, #2
   16f1a:	f040 81e0 	bne.w	172de <gnss_interface_read+0x3f2>
   16f1e:	f1b9 0f00 	cmp.w	r9, #0
   16f22:	d158      	bne.n	16fd6 <gnss_interface_read+0xea>
   16f24:	2102      	movs	r1, #2
   16f26:	20b6      	movs	r0, #182	; 0xb6
   16f28:	2400      	movs	r4, #0
   16f2a:	682b      	ldr	r3, [r5, #0]
   16f2c:	f10d 020e 	add.w	r2, sp, #14
   16f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   16f34:	602b      	str	r3, [r5, #0]
   16f36:	f8df a108 	ldr.w	sl, [pc, #264]	; 17040 <gnss_interface_read+0x154>
   16f3a:	ab08      	add	r3, sp, #32
   16f3c:	4f3f      	ldr	r7, [pc, #252]	; (1703c <gnss_interface_read+0x150>)
   16f3e:	4e3d      	ldr	r6, [pc, #244]	; (17034 <gnss_interface_read+0x148>)
   16f40:	9005      	str	r0, [sp, #20]
   16f42:	9107      	str	r1, [sp, #28]
   16f44:	9304      	str	r3, [sp, #16]
   16f46:	9206      	str	r2, [sp, #24]
   16f48:	ea09 0b01 	and.w	fp, r9, r1
   16f4c:	f8da 0000 	ldr.w	r0, [sl]
   16f50:	464a      	mov	r2, r9
   16f52:	6803      	ldr	r3, [r0, #0]
   16f54:	a904      	add	r1, sp, #16
   16f56:	689b      	ldr	r3, [r3, #8]
   16f58:	4798      	blx	r3
   16f5a:	2800      	cmp	r0, #0
   16f5c:	da11      	bge.n	16f82 <gnss_interface_read+0x96>
   16f5e:	f1bb 0f00 	cmp.w	fp, #0
   16f62:	d141      	bne.n	16fe8 <gnss_interface_read+0xfc>
   16f64:	682b      	ldr	r3, [r5, #0]
   16f66:	03d8      	lsls	r0, r3, #15
   16f68:	d4f0      	bmi.n	16f4c <gnss_interface_read+0x60>
   16f6a:	b10c      	cbz	r4, 16f70 <gnss_interface_read+0x84>
   16f6c:	e7ee      	b.n	16f4c <gnss_interface_read+0x60>
   16f6e:	b930      	cbnz	r0, 16f7e <gnss_interface_read+0x92>
   16f70:	4639      	mov	r1, r7
   16f72:	4630      	mov	r0, r6
   16f74:	f7f8 f948 	bl	f208 <bsd_os_timedwait>
   16f78:	682b      	ldr	r3, [r5, #0]
   16f7a:	03d9      	lsls	r1, r3, #15
   16f7c:	d5f7      	bpl.n	16f6e <gnss_interface_read+0x82>
   16f7e:	4604      	mov	r4, r0
   16f80:	e7e4      	b.n	16f4c <gnss_interface_read+0x60>
   16f82:	f244 0202 	movw	r2, #16386	; 0x4002
   16f86:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16f8a:	4293      	cmp	r3, r2
   16f8c:	d042      	beq.n	17014 <gnss_interface_read+0x128>
   16f8e:	f244 0201 	movw	r2, #16385	; 0x4001
   16f92:	4293      	cmp	r3, r2
   16f94:	d056      	beq.n	17044 <gnss_interface_read+0x158>
   16f96:	f244 0203 	movw	r2, #16387	; 0x4003
   16f9a:	4293      	cmp	r3, r2
   16f9c:	f040 81a5 	bne.w	172ea <gnss_interface_read+0x3fe>
   16fa0:	2203      	movs	r2, #3
   16fa2:	2414      	movs	r4, #20
   16fa4:	9b08      	ldr	r3, [sp, #32]
   16fa6:	f888 2000 	strb.w	r2, [r8]
   16faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16fac:	f8c8 3008 	str.w	r3, [r8, #8]
   16fb0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16fb4:	e9c8 2303 	strd	r2, r3, [r8, #12]
   16fb8:	f8da 0000 	ldr.w	r0, [sl]
   16fbc:	6803      	ldr	r3, [r0, #0]
   16fbe:	68db      	ldr	r3, [r3, #12]
   16fc0:	4798      	blx	r3
   16fc2:	2800      	cmp	r0, #0
   16fc4:	dd03      	ble.n	16fce <gnss_interface_read+0xe2>
   16fc6:	682b      	ldr	r3, [r5, #0]
   16fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16fcc:	602b      	str	r3, [r5, #0]
   16fce:	4620      	mov	r0, r4
   16fd0:	b037      	add	sp, #220	; 0xdc
   16fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fd6:	f019 0f0a 	tst.w	r9, #10
   16fda:	d1a3      	bne.n	16f24 <gnss_interface_read+0x38>
   16fdc:	202d      	movs	r0, #45	; 0x2d
   16fde:	f7f8 f9a7 	bl	f330 <bsd_os_errno_set>
   16fe2:	f04f 34ff 	mov.w	r4, #4294967295
   16fe6:	e7f2      	b.n	16fce <gnss_interface_read+0xe2>
   16fe8:	1c42      	adds	r2, r0, #1
   16fea:	4603      	mov	r3, r0
   16fec:	d1c9      	bne.n	16f82 <gnss_interface_read+0x96>
   16fee:	b93c      	cbnz	r4, 17000 <gnss_interface_read+0x114>
   16ff0:	461c      	mov	r4, r3
   16ff2:	2023      	movs	r0, #35	; 0x23
   16ff4:	f7f8 f99c 	bl	f330 <bsd_os_errno_set>
   16ff8:	4620      	mov	r0, r4
   16ffa:	b037      	add	sp, #220	; 0xdc
   16ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17000:	9001      	str	r0, [sp, #4]
   17002:	4620      	mov	r0, r4
   17004:	f7f8 f994 	bl	f330 <bsd_os_errno_set>
   17008:	9b01      	ldr	r3, [sp, #4]
   1700a:	461c      	mov	r4, r3
   1700c:	4620      	mov	r0, r4
   1700e:	b037      	add	sp, #220	; 0xdc
   17010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17014:	a808      	add	r0, sp, #32
   17016:	f7f5 ff2f 	bl	ce78 <strlen>
   1701a:	2302      	movs	r3, #2
   1701c:	1c44      	adds	r4, r0, #1
   1701e:	b2a4      	uxth	r4, r4
   17020:	f808 3b08 	strb.w	r3, [r8], #8
   17024:	4622      	mov	r2, r4
   17026:	a908      	add	r1, sp, #32
   17028:	4640      	mov	r0, r8
   1702a:	f005 fa1c 	bl	1c466 <memcpy>
   1702e:	3408      	adds	r4, #8
   17030:	e7c2      	b.n	16fb8 <gnss_interface_read+0xcc>
   17032:	bf00      	nop
   17034:	49765443 	.word	0x49765443
   17038:	20020950 	.word	0x20020950
   1703c:	20024f68 	.word	0x20024f68
   17040:	20020958 	.word	0x20020958
   17044:	2401      	movs	r4, #1
   17046:	a809      	add	r0, sp, #36	; 0x24
   17048:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1704a:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1704e:	e9c8 2304 	strd	r2, r3, [r8, #16]
   17052:	990d      	ldr	r1, [sp, #52]	; 0x34
   17054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17056:	f888 4000 	strb.w	r4, [r8]
   1705a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1705c:	f8c8 1018 	str.w	r1, [r8, #24]
   17060:	9910      	ldr	r1, [sp, #64]	; 0x40
   17062:	f8c8 201c 	str.w	r2, [r8, #28]
   17066:	f8c8 3020 	str.w	r3, [r8, #32]
   1706a:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   1706e:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   17072:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   17076:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1707a:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   1707e:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   17082:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   17086:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1708a:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   1708e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   17092:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   17096:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   1709a:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1709e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   170a2:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   170a6:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   170aa:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   170ae:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   170b2:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   170b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   170b8:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   170bc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   170c0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   170c4:	f3c3 210f 	ubfx	r1, r3, #8, #16
   170c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   170ca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   170ce:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   170d2:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   170d6:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   170da:	f3c3 230f 	ubfx	r3, r3, #8, #16
   170de:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   170e2:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   170e6:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   170ea:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   170ee:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   170f2:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   170f6:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   170fa:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   170fe:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   17102:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   17106:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   1710a:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   1710e:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   17112:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   17116:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1711a:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1711e:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   17122:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   17126:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1712a:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   1712e:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   17132:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   17136:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   1713a:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   1713e:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   17142:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   17146:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1714a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1714c:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   17150:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   17154:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   17158:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1715c:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   17160:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   17164:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   17168:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   1716c:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   17170:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   17174:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   17178:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   1717c:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   17180:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   17184:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   17188:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   1718c:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   17190:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   17194:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   17198:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   1719c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   171a0:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   171a4:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   171a8:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   171ac:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   171b0:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   171b4:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   171b8:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   171bc:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   171c0:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   171c4:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   171c8:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   171cc:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   171d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   171d2:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   171d6:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   171da:	f3c3 210f 	ubfx	r1, r3, #8, #16
   171de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   171e0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   171e4:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   171e8:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   171ec:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   171f0:	f3c3 230f 	ubfx	r3, r3, #8, #16
   171f4:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   171f8:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   171fc:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   17200:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   17204:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   17208:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1720c:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   17210:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   17214:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   17218:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1721c:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   17220:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   17224:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   17228:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1722c:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   17230:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   17234:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   17238:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   1723c:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   17240:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   17244:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   17248:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1724c:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   17250:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   17254:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   17258:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1725c:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   17260:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   17264:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   17266:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1726a:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1726e:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   17272:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   17276:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1727a:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   1727e:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   17282:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   17286:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   1728a:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1728e:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   17292:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   17296:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1729a:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   1729e:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   172a2:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   172a6:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   172aa:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   172ae:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   172b2:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   172b6:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   172ba:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   172be:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   172c2:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   172c6:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   172ca:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   172ce:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   172d2:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   172d6:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   172da:	24d8      	movs	r4, #216	; 0xd8
   172dc:	e66c      	b.n	16fb8 <gnss_interface_read+0xcc>
   172de:	2039      	movs	r0, #57	; 0x39
   172e0:	f7f8 f826 	bl	f330 <bsd_os_errno_set>
   172e4:	f04f 34ff 	mov.w	r4, #4294967295
   172e8:	e671      	b.n	16fce <gnss_interface_read+0xe2>
   172ea:	2016      	movs	r0, #22
   172ec:	f7f8 f820 	bl	f330 <bsd_os_errno_set>
   172f0:	f04f 34ff 	mov.w	r4, #4294967295
   172f4:	e66b      	b.n	16fce <gnss_interface_read+0xe2>
   172f6:	2009      	movs	r0, #9
   172f8:	f7f8 f81a 	bl	f330 <bsd_os_errno_set>
   172fc:	f04f 34ff 	mov.w	r4, #4294967295
   17300:	e665      	b.n	16fce <gnss_interface_read+0xe2>
   17302:	bf00      	nop

00017304 <gnss_interface_setopt>:
   17304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17308:	f241 1402 	movw	r4, #4354	; 0x1102
   1730c:	4222      	tst	r2, r4
   1730e:	b086      	sub	sp, #24
   17310:	4d9c      	ldr	r5, [pc, #624]	; (17584 <gnss_interface_setopt+0x280>)
   17312:	d004      	beq.n	1731e <gnss_interface_setopt+0x1a>
   17314:	682c      	ldr	r4, [r5, #0]
   17316:	b2a4      	uxth	r4, r4
   17318:	2c02      	cmp	r4, #2
   1731a:	f040 8104 	bne.w	17526 <gnss_interface_setopt+0x222>
   1731e:	682c      	ldr	r4, [r5, #0]
   17320:	0264      	lsls	r4, r4, #9
   17322:	f100 8128 	bmi.w	17576 <gnss_interface_setopt+0x272>
   17326:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1732a:	f040 811e 	bne.w	1756a <gnss_interface_setopt+0x266>
   1732e:	4996      	ldr	r1, [pc, #600]	; (17588 <gnss_interface_setopt+0x284>)
   17330:	4288      	cmp	r0, r1
   17332:	f040 8114 	bne.w	1755e <gnss_interface_setopt+0x25a>
   17336:	3a01      	subs	r2, #1
   17338:	2a08      	cmp	r2, #8
   1733a:	f200 80ec 	bhi.w	17516 <gnss_interface_setopt+0x212>
   1733e:	e8df f012 	tbh	[pc, r2, lsl #1]
   17342:	0075      	.short	0x0075
   17344:	00c200d8 	.word	0x00c200d8
   17348:	008100cc 	.word	0x008100cc
   1734c:	0098008c 	.word	0x0098008c
   17350:	000900af 	.word	0x000900af
   17354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17356:	2a01      	cmp	r2, #1
   17358:	f040 80dd 	bne.w	17516 <gnss_interface_setopt+0x212>
   1735c:	f241 1603 	movw	r6, #4355	; 0x1103
   17360:	2240      	movs	r2, #64	; 0x40
   17362:	4637      	mov	r7, r6
   17364:	781b      	ldrb	r3, [r3, #0]
   17366:	9202      	str	r2, [sp, #8]
   17368:	f88d 3015 	strb.w	r3, [sp, #21]
   1736c:	682b      	ldr	r3, [r5, #0]
   1736e:	2112      	movs	r1, #18
   17370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   17374:	4668      	mov	r0, sp
   17376:	602b      	str	r3, [r5, #0]
   17378:	f000 fbe4 	bl	17b44 <rpc_gnss_client_request_alloc>
   1737c:	4604      	mov	r4, r0
   1737e:	9800      	ldr	r0, [sp, #0]
   17380:	2c00      	cmp	r4, #0
   17382:	f040 80d6 	bne.w	17532 <gnss_interface_setopt+0x22e>
   17386:	2800      	cmp	r0, #0
   17388:	f000 80da 	beq.w	17540 <gnss_interface_setopt+0x23c>
   1738c:	2212      	movs	r2, #18
   1738e:	f04f 0876 	mov.w	r8, #118	; 0x76
   17392:	f04f 0e49 	mov.w	lr, #73	; 0x49
   17396:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1739a:	f04f 0954 	mov.w	r9, #84	; 0x54
   1739e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 17590 <gnss_interface_setopt+0x28c>
   173a2:	a906      	add	r1, sp, #24
   173a4:	f8bc 3000 	ldrh.w	r3, [ip]
   173a8:	f880 800e 	strb.w	r8, [r0, #14]
   173ac:	3301      	adds	r3, #1
   173ae:	b29b      	uxth	r3, r3
   173b0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   173b4:	f841 6d14 	str.w	r6, [r1, #-20]!
   173b8:	7144      	strb	r4, [r0, #5]
   173ba:	7184      	strb	r4, [r0, #6]
   173bc:	71c4      	strb	r4, [r0, #7]
   173be:	7204      	strb	r4, [r0, #8]
   173c0:	7244      	strb	r4, [r0, #9]
   173c2:	7284      	strb	r4, [r0, #10]
   173c4:	72c4      	strb	r4, [r0, #11]
   173c6:	7102      	strb	r2, [r0, #4]
   173c8:	f880 a00c 	strb.w	sl, [r0, #12]
   173cc:	f880 900d 	strb.w	r9, [r0, #13]
   173d0:	f880 e00f 	strb.w	lr, [r0, #15]
   173d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 17594 <gnss_interface_setopt+0x290>
   173d8:	6800      	ldr	r0, [r0, #0]
   173da:	f8ac 3000 	strh.w	r3, [ip]
   173de:	f005 f842 	bl	1c466 <memcpy>
   173e2:	4639      	mov	r1, r7
   173e4:	9800      	ldr	r0, [sp, #0]
   173e6:	f8c8 4000 	str.w	r4, [r8]
   173ea:	f000 fbbf 	bl	17b6c <rpc_gnss_client_request_send>
   173ee:	2800      	cmp	r0, #0
   173f0:	f040 80ab 	bne.w	1754a <gnss_interface_setopt+0x246>
   173f4:	4f65      	ldr	r7, [pc, #404]	; (1758c <gnss_interface_setopt+0x288>)
   173f6:	4e64      	ldr	r6, [pc, #400]	; (17588 <gnss_interface_setopt+0x284>)
   173f8:	4639      	mov	r1, r7
   173fa:	4630      	mov	r0, r6
   173fc:	f7f7 ff04 	bl	f208 <bsd_os_timedwait>
   17400:	682c      	ldr	r4, [r5, #0]
   17402:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   17406:	d1f7      	bne.n	173f8 <gnss_interface_setopt+0xf4>
   17408:	f8d8 0000 	ldr.w	r0, [r8]
   1740c:	b118      	cbz	r0, 17416 <gnss_interface_setopt+0x112>
   1740e:	f000 fbcb 	bl	17ba8 <rpc_gnss_client_data_free>
   17412:	f8c8 4000 	str.w	r4, [r8]
   17416:	682b      	ldr	r3, [r5, #0]
   17418:	021b      	lsls	r3, r3, #8
   1741a:	d576      	bpl.n	1750a <gnss_interface_setopt+0x206>
   1741c:	2000      	movs	r0, #0
   1741e:	682b      	ldr	r3, [r5, #0]
   17420:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17424:	602b      	str	r3, [r5, #0]
   17426:	b006      	add	sp, #24
   17428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1742c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1742e:	2a02      	cmp	r2, #2
   17430:	d171      	bne.n	17516 <gnss_interface_setopt+0x212>
   17432:	2208      	movs	r2, #8
   17434:	f241 1603 	movw	r6, #4355	; 0x1103
   17438:	881b      	ldrh	r3, [r3, #0]
   1743a:	9202      	str	r2, [sp, #8]
   1743c:	f8ad 300f 	strh.w	r3, [sp, #15]
   17440:	4637      	mov	r7, r6
   17442:	e793      	b.n	1736c <gnss_interface_setopt+0x68>
   17444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17446:	2a01      	cmp	r2, #1
   17448:	d165      	bne.n	17516 <gnss_interface_setopt+0x212>
   1744a:	f241 1603 	movw	r6, #4355	; 0x1103
   1744e:	781b      	ldrb	r3, [r3, #0]
   17450:	9202      	str	r2, [sp, #8]
   17452:	f88d 300c 	strb.w	r3, [sp, #12]
   17456:	4637      	mov	r7, r6
   17458:	e788      	b.n	1736c <gnss_interface_setopt+0x68>
   1745a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1745c:	2a01      	cmp	r2, #1
   1745e:	d15a      	bne.n	17516 <gnss_interface_setopt+0x212>
   17460:	2202      	movs	r2, #2
   17462:	f241 1603 	movw	r6, #4355	; 0x1103
   17466:	781b      	ldrb	r3, [r3, #0]
   17468:	9202      	str	r2, [sp, #8]
   1746a:	f88d 300d 	strb.w	r3, [sp, #13]
   1746e:	4637      	mov	r7, r6
   17470:	e77c      	b.n	1736c <gnss_interface_setopt+0x68>
   17472:	682a      	ldr	r2, [r5, #0]
   17474:	b292      	uxth	r2, r2
   17476:	2a02      	cmp	r2, #2
   17478:	d155      	bne.n	17526 <gnss_interface_setopt+0x222>
   1747a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1747c:	2a04      	cmp	r2, #4
   1747e:	d14a      	bne.n	17516 <gnss_interface_setopt+0x212>
   17480:	2101      	movs	r1, #1
   17482:	f241 0604 	movw	r6, #4100	; 0x1004
   17486:	682a      	ldr	r2, [r5, #0]
   17488:	6818      	ldr	r0, [r3, #0]
   1748a:	0c13      	lsrs	r3, r2, #16
   1748c:	041b      	lsls	r3, r3, #16
   1748e:	f043 0303 	orr.w	r3, r3, #3
   17492:	f8cd 0009 	str.w	r0, [sp, #9]
   17496:	602b      	str	r3, [r5, #0]
   17498:	f88d 1008 	strb.w	r1, [sp, #8]
   1749c:	4637      	mov	r7, r6
   1749e:	e765      	b.n	1736c <gnss_interface_setopt+0x68>
   174a0:	682b      	ldr	r3, [r5, #0]
   174a2:	b29b      	uxth	r3, r3
   174a4:	2b04      	cmp	r3, #4
   174a6:	d13e      	bne.n	17526 <gnss_interface_setopt+0x222>
   174a8:	2300      	movs	r3, #0
   174aa:	f241 0604 	movw	r6, #4100	; 0x1004
   174ae:	f88d 3008 	strb.w	r3, [sp, #8]
   174b2:	f88d 3009 	strb.w	r3, [sp, #9]
   174b6:	f88d 300a 	strb.w	r3, [sp, #10]
   174ba:	f88d 300b 	strb.w	r3, [sp, #11]
   174be:	f88d 300c 	strb.w	r3, [sp, #12]
   174c2:	4637      	mov	r7, r6
   174c4:	e752      	b.n	1736c <gnss_interface_setopt+0x68>
   174c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   174c8:	2a01      	cmp	r2, #1
   174ca:	d124      	bne.n	17516 <gnss_interface_setopt+0x212>
   174cc:	781b      	ldrb	r3, [r3, #0]
   174ce:	2b01      	cmp	r3, #1
   174d0:	d121      	bne.n	17516 <gnss_interface_setopt+0x212>
   174d2:	f241 1603 	movw	r6, #4355	; 0x1103
   174d6:	4637      	mov	r7, r6
   174d8:	e748      	b.n	1736c <gnss_interface_setopt+0x68>
   174da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   174dc:	2a02      	cmp	r2, #2
   174de:	d11a      	bne.n	17516 <gnss_interface_setopt+0x212>
   174e0:	2220      	movs	r2, #32
   174e2:	f241 1603 	movw	r6, #4355	; 0x1103
   174e6:	881b      	ldrh	r3, [r3, #0]
   174e8:	9202      	str	r2, [sp, #8]
   174ea:	f8ad 3013 	strh.w	r3, [sp, #19]
   174ee:	4637      	mov	r7, r6
   174f0:	e73c      	b.n	1736c <gnss_interface_setopt+0x68>
   174f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   174f4:	2a02      	cmp	r2, #2
   174f6:	d10e      	bne.n	17516 <gnss_interface_setopt+0x212>
   174f8:	2210      	movs	r2, #16
   174fa:	f241 1603 	movw	r6, #4355	; 0x1103
   174fe:	881b      	ldrh	r3, [r3, #0]
   17500:	9202      	str	r2, [sp, #8]
   17502:	f8ad 3011 	strh.w	r3, [sp, #17]
   17506:	4637      	mov	r7, r6
   17508:	e730      	b.n	1736c <gnss_interface_setopt+0x68>
   1750a:	200e      	movs	r0, #14
   1750c:	f7f7 ff10 	bl	f330 <bsd_os_errno_set>
   17510:	f04f 30ff 	mov.w	r0, #4294967295
   17514:	e783      	b.n	1741e <gnss_interface_setopt+0x11a>
   17516:	2016      	movs	r0, #22
   17518:	f7f7 ff0a 	bl	f330 <bsd_os_errno_set>
   1751c:	f04f 30ff 	mov.w	r0, #4294967295
   17520:	b006      	add	sp, #24
   17522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17526:	200e      	movs	r0, #14
   17528:	f7f7 ff02 	bl	f330 <bsd_os_errno_set>
   1752c:	f04f 30ff 	mov.w	r0, #4294967295
   17530:	e779      	b.n	17426 <gnss_interface_setopt+0x122>
   17532:	b128      	cbz	r0, 17540 <gnss_interface_setopt+0x23c>
   17534:	6803      	ldr	r3, [r0, #0]
   17536:	b11b      	cbz	r3, 17540 <gnss_interface_setopt+0x23c>
   17538:	4618      	mov	r0, r3
   1753a:	f000 fb35 	bl	17ba8 <rpc_gnss_client_data_free>
   1753e:	9800      	ldr	r0, [sp, #0]
   17540:	f000 fb2a 	bl	17b98 <rpc_gnss_client_message_free>
   17544:	2023      	movs	r0, #35	; 0x23
   17546:	f7f7 fef3 	bl	f330 <bsd_os_errno_set>
   1754a:	682b      	ldr	r3, [r5, #0]
   1754c:	200e      	movs	r0, #14
   1754e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17552:	602b      	str	r3, [r5, #0]
   17554:	f7f7 feec 	bl	f330 <bsd_os_errno_set>
   17558:	f04f 30ff 	mov.w	r0, #4294967295
   1755c:	e763      	b.n	17426 <gnss_interface_setopt+0x122>
   1755e:	2009      	movs	r0, #9
   17560:	f7f7 fee6 	bl	f330 <bsd_os_errno_set>
   17564:	f04f 30ff 	mov.w	r0, #4294967295
   17568:	e75d      	b.n	17426 <gnss_interface_setopt+0x122>
   1756a:	202a      	movs	r0, #42	; 0x2a
   1756c:	f7f7 fee0 	bl	f330 <bsd_os_errno_set>
   17570:	f04f 30ff 	mov.w	r0, #4294967295
   17574:	e757      	b.n	17426 <gnss_interface_setopt+0x122>
   17576:	2073      	movs	r0, #115	; 0x73
   17578:	f7f7 feda 	bl	f330 <bsd_os_errno_set>
   1757c:	f04f 30ff 	mov.w	r0, #4294967295
   17580:	e751      	b.n	17426 <gnss_interface_setopt+0x122>
   17582:	bf00      	nop
   17584:	20020950 	.word	0x20020950
   17588:	49765443 	.word	0x49765443
   1758c:	20024f68 	.word	0x20024f68
   17590:	200213f4 	.word	0x200213f4
   17594:	20020954 	.word	0x20020954

00017598 <gnss_interface_getopt>:
   17598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1759c:	4c81      	ldr	r4, [pc, #516]	; (177a4 <gnss_interface_getopt+0x20c>)
   1759e:	b087      	sub	sp, #28
   175a0:	6825      	ldr	r5, [r4, #0]
   175a2:	4698      	mov	r8, r3
   175a4:	b2ad      	uxth	r5, r5
   175a6:	2d02      	cmp	r5, #2
   175a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   175aa:	f040 80dd 	bne.w	17768 <gnss_interface_getopt+0x1d0>
   175ae:	6825      	ldr	r5, [r4, #0]
   175b0:	03ee      	lsls	r6, r5, #15
   175b2:	f100 80eb 	bmi.w	1778c <gnss_interface_getopt+0x1f4>
   175b6:	6825      	ldr	r5, [r4, #0]
   175b8:	01ed      	lsls	r5, r5, #7
   175ba:	f100 80ed 	bmi.w	17798 <gnss_interface_getopt+0x200>
   175be:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   175c2:	f040 80d7 	bne.w	17774 <gnss_interface_getopt+0x1dc>
   175c6:	4978      	ldr	r1, [pc, #480]	; (177a8 <gnss_interface_getopt+0x210>)
   175c8:	4288      	cmp	r0, r1
   175ca:	f040 80d9 	bne.w	17780 <gnss_interface_getopt+0x1e8>
   175ce:	f1b8 0f00 	cmp.w	r8, #0
   175d2:	d00b      	beq.n	175ec <gnss_interface_getopt+0x54>
   175d4:	b153      	cbz	r3, 175ec <gnss_interface_getopt+0x54>
   175d6:	1e57      	subs	r7, r2, #1
   175d8:	2f05      	cmp	r7, #5
   175da:	d807      	bhi.n	175ec <gnss_interface_getopt+0x54>
   175dc:	e8df f007 	tbb	[pc, r7]
   175e0:	0f030f0f 	.word	0x0f030f0f
   175e4:	0303      	.short	0x0303
   175e6:	681b      	ldr	r3, [r3, #0]
   175e8:	2b01      	cmp	r3, #1
   175ea:	d00b      	beq.n	17604 <gnss_interface_getopt+0x6c>
   175ec:	2016      	movs	r0, #22
   175ee:	f7f7 fe9f 	bl	f330 <bsd_os_errno_set>
   175f2:	f04f 35ff 	mov.w	r5, #4294967295
   175f6:	4628      	mov	r0, r5
   175f8:	b007      	add	sp, #28
   175fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175fe:	681b      	ldr	r3, [r3, #0]
   17600:	2b02      	cmp	r3, #2
   17602:	d1f3      	bne.n	175ec <gnss_interface_getopt+0x54>
   17604:	6823      	ldr	r3, [r4, #0]
   17606:	2212      	movs	r2, #18
   17608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1760c:	2100      	movs	r1, #0
   1760e:	a801      	add	r0, sp, #4
   17610:	6023      	str	r3, [r4, #0]
   17612:	f004 ff35 	bl	1c480 <memset>
   17616:	2112      	movs	r1, #18
   17618:	4668      	mov	r0, sp
   1761a:	f000 fa93 	bl	17b44 <rpc_gnss_client_request_alloc>
   1761e:	4605      	mov	r5, r0
   17620:	9800      	ldr	r0, [sp, #0]
   17622:	2d00      	cmp	r5, #0
   17624:	f040 808a 	bne.w	1773c <gnss_interface_getopt+0x1a4>
   17628:	2800      	cmp	r0, #0
   1762a:	f000 808e 	beq.w	1774a <gnss_interface_getopt+0x1b2>
   1762e:	f241 1602 	movw	r6, #4354	; 0x1102
   17632:	f04f 0e49 	mov.w	lr, #73	; 0x49
   17636:	2212      	movs	r2, #18
   17638:	f04f 0976 	mov.w	r9, #118	; 0x76
   1763c:	f04f 0b43 	mov.w	fp, #67	; 0x43
   17640:	f04f 0a54 	mov.w	sl, #84	; 0x54
   17644:	f8df c168 	ldr.w	ip, [pc, #360]	; 177b0 <gnss_interface_getopt+0x218>
   17648:	f880 e00f 	strb.w	lr, [r0, #15]
   1764c:	f8bc 3000 	ldrh.w	r3, [ip]
   17650:	f880 900e 	strb.w	r9, [r0, #14]
   17654:	3301      	adds	r3, #1
   17656:	b29b      	uxth	r3, r3
   17658:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1765c:	f8cd e004 	str.w	lr, [sp, #4]
   17660:	7145      	strb	r5, [r0, #5]
   17662:	7185      	strb	r5, [r0, #6]
   17664:	71c5      	strb	r5, [r0, #7]
   17666:	7205      	strb	r5, [r0, #8]
   17668:	7245      	strb	r5, [r0, #9]
   1766a:	7285      	strb	r5, [r0, #10]
   1766c:	72c5      	strb	r5, [r0, #11]
   1766e:	a901      	add	r1, sp, #4
   17670:	7102      	strb	r2, [r0, #4]
   17672:	f880 b00c 	strb.w	fp, [r0, #12]
   17676:	f880 a00d 	strb.w	sl, [r0, #13]
   1767a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 177b4 <gnss_interface_getopt+0x21c>
   1767e:	6800      	ldr	r0, [r0, #0]
   17680:	f8ac 3000 	strh.w	r3, [ip]
   17684:	f004 feef 	bl	1c466 <memcpy>
   17688:	4631      	mov	r1, r6
   1768a:	9800      	ldr	r0, [sp, #0]
   1768c:	f8c9 5000 	str.w	r5, [r9]
   17690:	f000 fa6c 	bl	17b6c <rpc_gnss_client_request_send>
   17694:	2800      	cmp	r0, #0
   17696:	d15d      	bne.n	17754 <gnss_interface_getopt+0x1bc>
   17698:	4e44      	ldr	r6, [pc, #272]	; (177ac <gnss_interface_getopt+0x214>)
   1769a:	4d43      	ldr	r5, [pc, #268]	; (177a8 <gnss_interface_getopt+0x210>)
   1769c:	4631      	mov	r1, r6
   1769e:	4628      	mov	r0, r5
   176a0:	f7f7 fdb2 	bl	f208 <bsd_os_timedwait>
   176a4:	6823      	ldr	r3, [r4, #0]
   176a6:	01db      	lsls	r3, r3, #7
   176a8:	d4f8      	bmi.n	1769c <gnss_interface_getopt+0x104>
   176aa:	f8d9 0000 	ldr.w	r0, [r9]
   176ae:	b1d8      	cbz	r0, 176e8 <gnss_interface_getopt+0x150>
   176b0:	6825      	ldr	r5, [r4, #0]
   176b2:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   176b6:	d00f      	beq.n	176d8 <gnss_interface_getopt+0x140>
   176b8:	2f05      	cmp	r7, #5
   176ba:	d837      	bhi.n	1772c <gnss_interface_getopt+0x194>
   176bc:	e8df f007 	tbb	[pc, r7]
   176c0:	2b26201a 	.word	0x2b26201a
   176c4:	0331      	.short	0x0331
   176c6:	2500      	movs	r5, #0
   176c8:	7b43      	ldrb	r3, [r0, #13]
   176ca:	f888 3000 	strb.w	r3, [r8]
   176ce:	f000 fa6b 	bl	17ba8 <rpc_gnss_client_data_free>
   176d2:	2300      	movs	r3, #0
   176d4:	f8c9 3000 	str.w	r3, [r9]
   176d8:	6823      	ldr	r3, [r4, #0]
   176da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   176de:	6023      	str	r3, [r4, #0]
   176e0:	4628      	mov	r0, r5
   176e2:	b007      	add	sp, #28
   176e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e8:	6823      	ldr	r3, [r4, #0]
   176ea:	4605      	mov	r5, r0
   176ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   176f0:	6023      	str	r3, [r4, #0]
   176f2:	e7f5      	b.n	176e0 <gnss_interface_getopt+0x148>
   176f4:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   176f8:	2500      	movs	r5, #0
   176fa:	f8a8 3000 	strh.w	r3, [r8]
   176fe:	e7e6      	b.n	176ce <gnss_interface_getopt+0x136>
   17700:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   17704:	2500      	movs	r5, #0
   17706:	f8a8 3000 	strh.w	r3, [r8]
   1770a:	e7e0      	b.n	176ce <gnss_interface_getopt+0x136>
   1770c:	7b83      	ldrb	r3, [r0, #14]
   1770e:	2500      	movs	r5, #0
   17710:	f888 3000 	strb.w	r3, [r8]
   17714:	e7db      	b.n	176ce <gnss_interface_getopt+0x136>
   17716:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1771a:	2500      	movs	r5, #0
   1771c:	f8a8 3000 	strh.w	r3, [r8]
   17720:	e7d5      	b.n	176ce <gnss_interface_getopt+0x136>
   17722:	7b03      	ldrb	r3, [r0, #12]
   17724:	2500      	movs	r5, #0
   17726:	f888 3000 	strb.w	r3, [r8]
   1772a:	e7d0      	b.n	176ce <gnss_interface_getopt+0x136>
   1772c:	2016      	movs	r0, #22
   1772e:	f7f7 fdff 	bl	f330 <bsd_os_errno_set>
   17732:	f04f 35ff 	mov.w	r5, #4294967295
   17736:	f8d9 0000 	ldr.w	r0, [r9]
   1773a:	e7c8      	b.n	176ce <gnss_interface_getopt+0x136>
   1773c:	b128      	cbz	r0, 1774a <gnss_interface_getopt+0x1b2>
   1773e:	6803      	ldr	r3, [r0, #0]
   17740:	b11b      	cbz	r3, 1774a <gnss_interface_getopt+0x1b2>
   17742:	4618      	mov	r0, r3
   17744:	f000 fa30 	bl	17ba8 <rpc_gnss_client_data_free>
   17748:	9800      	ldr	r0, [sp, #0]
   1774a:	f000 fa25 	bl	17b98 <rpc_gnss_client_message_free>
   1774e:	2023      	movs	r0, #35	; 0x23
   17750:	f7f7 fdee 	bl	f330 <bsd_os_errno_set>
   17754:	6823      	ldr	r3, [r4, #0]
   17756:	200e      	movs	r0, #14
   17758:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1775c:	6023      	str	r3, [r4, #0]
   1775e:	f04f 35ff 	mov.w	r5, #4294967295
   17762:	f7f7 fde5 	bl	f330 <bsd_os_errno_set>
   17766:	e746      	b.n	175f6 <gnss_interface_getopt+0x5e>
   17768:	200e      	movs	r0, #14
   1776a:	f7f7 fde1 	bl	f330 <bsd_os_errno_set>
   1776e:	f04f 35ff 	mov.w	r5, #4294967295
   17772:	e740      	b.n	175f6 <gnss_interface_getopt+0x5e>
   17774:	202a      	movs	r0, #42	; 0x2a
   17776:	f7f7 fddb 	bl	f330 <bsd_os_errno_set>
   1777a:	f04f 35ff 	mov.w	r5, #4294967295
   1777e:	e73a      	b.n	175f6 <gnss_interface_getopt+0x5e>
   17780:	2009      	movs	r0, #9
   17782:	f7f7 fdd5 	bl	f330 <bsd_os_errno_set>
   17786:	f04f 35ff 	mov.w	r5, #4294967295
   1778a:	e734      	b.n	175f6 <gnss_interface_getopt+0x5e>
   1778c:	2005      	movs	r0, #5
   1778e:	f7f7 fdcf 	bl	f330 <bsd_os_errno_set>
   17792:	f04f 35ff 	mov.w	r5, #4294967295
   17796:	e72e      	b.n	175f6 <gnss_interface_getopt+0x5e>
   17798:	2073      	movs	r0, #115	; 0x73
   1779a:	f7f7 fdc9 	bl	f330 <bsd_os_errno_set>
   1779e:	f04f 35ff 	mov.w	r5, #4294967295
   177a2:	e728      	b.n	175f6 <gnss_interface_getopt+0x5e>
   177a4:	20020950 	.word	0x20020950
   177a8:	49765443 	.word	0x49765443
   177ac:	20024f68 	.word	0x20024f68
   177b0:	200213f4 	.word	0x200213f4
   177b4:	20020954 	.word	0x20020954

000177b8 <gnss_interface_init>:
   177b8:	2100      	movs	r1, #0
   177ba:	b538      	push	{r3, r4, r5, lr}
   177bc:	4c09      	ldr	r4, [pc, #36]	; (177e4 <gnss_interface_init+0x2c>)
   177be:	4d0a      	ldr	r5, [pc, #40]	; (177e8 <gnss_interface_init+0x30>)
   177c0:	6822      	ldr	r2, [r4, #0]
   177c2:	480a      	ldr	r0, [pc, #40]	; (177ec <gnss_interface_init+0x34>)
   177c4:	4b0a      	ldr	r3, [pc, #40]	; (177f0 <gnss_interface_init+0x38>)
   177c6:	402a      	ands	r2, r5
   177c8:	6022      	str	r2, [r4, #0]
   177ca:	8001      	strh	r1, [r0, #0]
   177cc:	6019      	str	r1, [r3, #0]
   177ce:	f000 f9b3 	bl	17b38 <rpc_gnss_client_init>
   177d2:	b928      	cbnz	r0, 177e0 <gnss_interface_init+0x28>
   177d4:	6823      	ldr	r3, [r4, #0]
   177d6:	402b      	ands	r3, r5
   177d8:	f043 0301 	orr.w	r3, r3, #1
   177dc:	6023      	str	r3, [r4, #0]
   177de:	bd38      	pop	{r3, r4, r5, pc}
   177e0:	2003      	movs	r0, #3
   177e2:	bd38      	pop	{r3, r4, r5, pc}
   177e4:	20020950 	.word	0x20020950
   177e8:	ffff0000 	.word	0xffff0000
   177ec:	200213f4 	.word	0x200213f4
   177f0:	20020954 	.word	0x20020954

000177f4 <gnss_interface_open>:
   177f4:	2902      	cmp	r1, #2
   177f6:	b510      	push	{r4, lr}
   177f8:	d121      	bne.n	1783e <gnss_interface_open+0x4a>
   177fa:	4c14      	ldr	r4, [pc, #80]	; (1784c <gnss_interface_open+0x58>)
   177fc:	6823      	ldr	r3, [r4, #0]
   177fe:	b29b      	uxth	r3, r3
   17800:	2b01      	cmp	r3, #1
   17802:	d116      	bne.n	17832 <gnss_interface_open+0x3e>
   17804:	6823      	ldr	r3, [r4, #0]
   17806:	4608      	mov	r0, r1
   17808:	0c1b      	lsrs	r3, r3, #16
   1780a:	041b      	lsls	r3, r3, #16
   1780c:	f043 0302 	orr.w	r3, r3, #2
   17810:	2200      	movs	r2, #0
   17812:	490f      	ldr	r1, [pc, #60]	; (17850 <gnss_interface_open+0x5c>)
   17814:	6023      	str	r3, [r4, #0]
   17816:	f000 faad 	bl	17d74 <packet_handler_create>
   1781a:	4a0e      	ldr	r2, [pc, #56]	; (17854 <gnss_interface_open+0x60>)
   1781c:	6010      	str	r0, [r2, #0]
   1781e:	b140      	cbz	r0, 17832 <gnss_interface_open+0x3e>
   17820:	6823      	ldr	r3, [r4, #0]
   17822:	6802      	ldr	r2, [r0, #0]
   17824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17828:	6812      	ldr	r2, [r2, #0]
   1782a:	6023      	str	r3, [r4, #0]
   1782c:	4790      	blx	r2
   1782e:	480a      	ldr	r0, [pc, #40]	; (17858 <gnss_interface_open+0x64>)
   17830:	bd10      	pop	{r4, pc}
   17832:	200e      	movs	r0, #14
   17834:	f7f7 fd7c 	bl	f330 <bsd_os_errno_set>
   17838:	f04f 30ff 	mov.w	r0, #4294967295
   1783c:	bd10      	pop	{r4, pc}
   1783e:	2029      	movs	r0, #41	; 0x29
   17840:	f7f7 fd76 	bl	f330 <bsd_os_errno_set>
   17844:	f04f 30ff 	mov.w	r0, #4294967295
   17848:	bd10      	pop	{r4, pc}
   1784a:	bf00      	nop
   1784c:	20020950 	.word	0x20020950
   17850:	00016b3d 	.word	0x00016b3d
   17854:	20020958 	.word	0x20020958
   17858:	49765443 	.word	0x49765443

0001785c <gnss_interface_close>:
   1785c:	b530      	push	{r4, r5, lr}
   1785e:	4b13      	ldr	r3, [pc, #76]	; (178ac <gnss_interface_close+0x50>)
   17860:	b083      	sub	sp, #12
   17862:	4298      	cmp	r0, r3
   17864:	d11c      	bne.n	178a0 <gnss_interface_close+0x44>
   17866:	4c12      	ldr	r4, [pc, #72]	; (178b0 <gnss_interface_close+0x54>)
   17868:	6823      	ldr	r3, [r4, #0]
   1786a:	b29b      	uxth	r3, r3
   1786c:	2b04      	cmp	r3, #4
   1786e:	d00f      	beq.n	17890 <gnss_interface_close+0x34>
   17870:	4d10      	ldr	r5, [pc, #64]	; (178b4 <gnss_interface_close+0x58>)
   17872:	6828      	ldr	r0, [r5, #0]
   17874:	b118      	cbz	r0, 1787e <gnss_interface_close+0x22>
   17876:	f000 fa9d 	bl	17db4 <packet_handler_delete>
   1787a:	2300      	movs	r3, #0
   1787c:	602b      	str	r3, [r5, #0]
   1787e:	2000      	movs	r0, #0
   17880:	6823      	ldr	r3, [r4, #0]
   17882:	0c1b      	lsrs	r3, r3, #16
   17884:	041b      	lsls	r3, r3, #16
   17886:	f043 0301 	orr.w	r3, r3, #1
   1788a:	6023      	str	r3, [r4, #0]
   1788c:	b003      	add	sp, #12
   1788e:	bd30      	pop	{r4, r5, pc}
   17890:	2300      	movs	r3, #0
   17892:	2208      	movs	r2, #8
   17894:	9300      	str	r3, [sp, #0]
   17896:	f44f 7101 	mov.w	r1, #516	; 0x204
   1789a:	f7fc fe31 	bl	14500 <nrf_setsockopt>
   1789e:	e7e7      	b.n	17870 <gnss_interface_close+0x14>
   178a0:	2009      	movs	r0, #9
   178a2:	f7f7 fd45 	bl	f330 <bsd_os_errno_set>
   178a6:	f04f 30ff 	mov.w	r0, #4294967295
   178aa:	e7ef      	b.n	1788c <gnss_interface_close+0x30>
   178ac:	49765443 	.word	0x49765443
   178b0:	20020950 	.word	0x20020950
   178b4:	20020958 	.word	0x20020958

000178b8 <rpc_gnss_serialize_utc>:
   178b8:	4603      	mov	r3, r0
   178ba:	b1d8      	cbz	r0, 178f4 <rpc_gnss_serialize_utc+0x3c>
   178bc:	b1d1      	cbz	r1, 178f4 <rpc_gnss_serialize_utc+0x3c>
   178be:	2000      	movs	r0, #0
   178c0:	2201      	movs	r2, #1
   178c2:	7048      	strb	r0, [r1, #1]
   178c4:	700a      	strb	r2, [r1, #0]
   178c6:	685a      	ldr	r2, [r3, #4]
   178c8:	2010      	movs	r0, #16
   178ca:	f8c1 2006 	str.w	r2, [r1, #6]
   178ce:	681a      	ldr	r2, [r3, #0]
   178d0:	f8c1 2002 	str.w	r2, [r1, #2]
   178d4:	f993 200a 	ldrsb.w	r2, [r3, #10]
   178d8:	730a      	strb	r2, [r1, #12]
   178da:	f993 200d 	ldrsb.w	r2, [r3, #13]
   178de:	73ca      	strb	r2, [r1, #15]
   178e0:	f993 200c 	ldrsb.w	r2, [r3, #12]
   178e4:	738a      	strb	r2, [r1, #14]
   178e6:	7a1a      	ldrb	r2, [r3, #8]
   178e8:	728a      	strb	r2, [r1, #10]
   178ea:	7ada      	ldrb	r2, [r3, #11]
   178ec:	734a      	strb	r2, [r1, #13]
   178ee:	7a5b      	ldrb	r3, [r3, #9]
   178f0:	72cb      	strb	r3, [r1, #11]
   178f2:	4770      	bx	lr
   178f4:	f04f 30ff 	mov.w	r0, #4294967295
   178f8:	4770      	bx	lr
   178fa:	bf00      	nop

000178fc <rpc_gnss_serialize_ephe>:
   178fc:	4603      	mov	r3, r0
   178fe:	2800      	cmp	r0, #0
   17900:	d04b      	beq.n	1799a <rpc_gnss_serialize_ephe+0x9e>
   17902:	2900      	cmp	r1, #0
   17904:	d049      	beq.n	1799a <rpc_gnss_serialize_ephe+0x9e>
   17906:	2000      	movs	r0, #0
   17908:	2202      	movs	r2, #2
   1790a:	7048      	strb	r0, [r1, #1]
   1790c:	700a      	strb	r2, [r1, #0]
   1790e:	68da      	ldr	r2, [r3, #12]
   17910:	2040      	movs	r0, #64	; 0x40
   17912:	f8c1 200b 	str.w	r2, [r1, #11]
   17916:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1791a:	f8a1 2009 	strh.w	r2, [r1, #9]
   1791e:	f993 2006 	ldrsb.w	r2, [r3, #6]
   17922:	720a      	strb	r2, [r1, #8]
   17924:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   17928:	878a      	strh	r2, [r1, #60]	; 0x3c
   1792a:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1792e:	86ca      	strh	r2, [r1, #54]	; 0x36
   17930:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   17934:	874a      	strh	r2, [r1, #58]	; 0x3a
   17936:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1793a:	868a      	strh	r2, [r1, #52]	; 0x34
   1793c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   17940:	87ca      	strh	r2, [r1, #62]	; 0x3e
   17942:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   17946:	870a      	strh	r2, [r1, #56]	; 0x38
   17948:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1794c:	830a      	strh	r2, [r1, #24]
   1794e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   17950:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   17954:	7c9a      	ldrb	r2, [r3, #18]
   17956:	744a      	strb	r2, [r1, #17]
   17958:	785a      	ldrb	r2, [r3, #1]
   1795a:	70ca      	strb	r2, [r1, #3]
   1795c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1795e:	62ca      	str	r2, [r1, #44]	; 0x2c
   17960:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   17964:	84ca      	strh	r2, [r1, #38]	; 0x26
   17966:	885a      	ldrh	r2, [r3, #2]
   17968:	808a      	strh	r2, [r1, #4]
   1796a:	6a1a      	ldr	r2, [r3, #32]
   1796c:	f8c1 201a 	str.w	r2, [r1, #26]
   17970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17972:	630a      	str	r2, [r1, #48]	; 0x30
   17974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   17976:	f8c1 201e 	str.w	r2, [r1, #30]
   1797a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1797c:	628a      	str	r2, [r1, #40]	; 0x28
   1797e:	781a      	ldrb	r2, [r3, #0]
   17980:	708a      	strb	r2, [r1, #2]
   17982:	f993 2010 	ldrsb.w	r2, [r3, #16]
   17986:	73ca      	strb	r2, [r1, #15]
   17988:	889a      	ldrh	r2, [r3, #4]
   1798a:	80ca      	strh	r2, [r1, #6]
   1798c:	8a9a      	ldrh	r2, [r3, #20]
   1798e:	824a      	strh	r2, [r1, #18]
   17990:	7c5a      	ldrb	r2, [r3, #17]
   17992:	740a      	strb	r2, [r1, #16]
   17994:	699b      	ldr	r3, [r3, #24]
   17996:	614b      	str	r3, [r1, #20]
   17998:	4770      	bx	lr
   1799a:	f04f 30ff 	mov.w	r0, #4294967295
   1799e:	4770      	bx	lr

000179a0 <rpc_gnss_serialize_alm>:
   179a0:	4603      	mov	r3, r0
   179a2:	b360      	cbz	r0, 179fe <rpc_gnss_serialize_alm+0x5e>
   179a4:	b359      	cbz	r1, 179fe <rpc_gnss_serialize_alm+0x5e>
   179a6:	2000      	movs	r0, #0
   179a8:	2203      	movs	r2, #3
   179aa:	7048      	strb	r0, [r1, #1]
   179ac:	700a      	strb	r2, [r1, #0]
   179ae:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   179b2:	2021      	movs	r0, #33	; 0x21
   179b4:	f8a1 201d 	strh.w	r2, [r1, #29]
   179b8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   179bc:	f8a1 201f 	strh.w	r2, [r1, #31]
   179c0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   179c4:	810a      	strh	r2, [r1, #8]
   179c6:	889a      	ldrh	r2, [r3, #4]
   179c8:	80ca      	strh	r2, [r1, #6]
   179ca:	78da      	ldrb	r2, [r3, #3]
   179cc:	714a      	strb	r2, [r1, #5]
   179ce:	699a      	ldr	r2, [r3, #24]
   179d0:	f8c1 2019 	str.w	r2, [r1, #25]
   179d4:	691a      	ldr	r2, [r3, #16]
   179d6:	f8c1 2011 	str.w	r2, [r1, #17]
   179da:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   179de:	814a      	strh	r2, [r1, #10]
   179e0:	68da      	ldr	r2, [r3, #12]
   179e2:	f8c1 200d 	str.w	r2, [r1, #13]
   179e6:	7a9a      	ldrb	r2, [r3, #10]
   179e8:	730a      	strb	r2, [r1, #12]
   179ea:	781a      	ldrb	r2, [r3, #0]
   179ec:	708a      	strb	r2, [r1, #2]
   179ee:	789a      	ldrb	r2, [r3, #2]
   179f0:	710a      	strb	r2, [r1, #4]
   179f2:	695a      	ldr	r2, [r3, #20]
   179f4:	f8c1 2015 	str.w	r2, [r1, #21]
   179f8:	785b      	ldrb	r3, [r3, #1]
   179fa:	70cb      	strb	r3, [r1, #3]
   179fc:	4770      	bx	lr
   179fe:	f04f 30ff 	mov.w	r0, #4294967295
   17a02:	4770      	bx	lr

00017a04 <rpc_gnss_serialize_klob>:
   17a04:	4603      	mov	r3, r0
   17a06:	b1f0      	cbz	r0, 17a46 <rpc_gnss_serialize_klob+0x42>
   17a08:	b1e9      	cbz	r1, 17a46 <rpc_gnss_serialize_klob+0x42>
   17a0a:	2000      	movs	r0, #0
   17a0c:	2204      	movs	r2, #4
   17a0e:	7048      	strb	r0, [r1, #1]
   17a10:	700a      	strb	r2, [r1, #0]
   17a12:	f993 2000 	ldrsb.w	r2, [r3]
   17a16:	200a      	movs	r0, #10
   17a18:	708a      	strb	r2, [r1, #2]
   17a1a:	f993 2001 	ldrsb.w	r2, [r3, #1]
   17a1e:	70ca      	strb	r2, [r1, #3]
   17a20:	f993 2002 	ldrsb.w	r2, [r3, #2]
   17a24:	710a      	strb	r2, [r1, #4]
   17a26:	f993 2003 	ldrsb.w	r2, [r3, #3]
   17a2a:	714a      	strb	r2, [r1, #5]
   17a2c:	f993 2004 	ldrsb.w	r2, [r3, #4]
   17a30:	718a      	strb	r2, [r1, #6]
   17a32:	f993 2005 	ldrsb.w	r2, [r3, #5]
   17a36:	71ca      	strb	r2, [r1, #7]
   17a38:	f993 2006 	ldrsb.w	r2, [r3, #6]
   17a3c:	720a      	strb	r2, [r1, #8]
   17a3e:	f993 3007 	ldrsb.w	r3, [r3, #7]
   17a42:	724b      	strb	r3, [r1, #9]
   17a44:	4770      	bx	lr
   17a46:	f04f 30ff 	mov.w	r0, #4294967295
   17a4a:	4770      	bx	lr

00017a4c <rpc_gnss_serialize_nequick>:
   17a4c:	4603      	mov	r3, r0
   17a4e:	b198      	cbz	r0, 17a78 <rpc_gnss_serialize_nequick+0x2c>
   17a50:	b191      	cbz	r1, 17a78 <rpc_gnss_serialize_nequick+0x2c>
   17a52:	2000      	movs	r0, #0
   17a54:	2205      	movs	r2, #5
   17a56:	7048      	strb	r0, [r1, #1]
   17a58:	700a      	strb	r2, [r1, #0]
   17a5a:	f9b3 2000 	ldrsh.w	r2, [r3]
   17a5e:	200a      	movs	r0, #10
   17a60:	804a      	strh	r2, [r1, #2]
   17a62:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   17a66:	808a      	strh	r2, [r1, #4]
   17a68:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   17a6c:	80ca      	strh	r2, [r1, #6]
   17a6e:	799a      	ldrb	r2, [r3, #6]
   17a70:	720a      	strb	r2, [r1, #8]
   17a72:	79db      	ldrb	r3, [r3, #7]
   17a74:	724b      	strb	r3, [r1, #9]
   17a76:	4770      	bx	lr
   17a78:	f04f 30ff 	mov.w	r0, #4294967295
   17a7c:	4770      	bx	lr
   17a7e:	bf00      	nop

00017a80 <rpc_gnss_serialize_time_and_sv_tow>:
   17a80:	b310      	cbz	r0, 17ac8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   17a82:	b309      	cbz	r1, 17ac8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   17a84:	b470      	push	{r4, r5, r6}
   17a86:	2500      	movs	r5, #0
   17a88:	2606      	movs	r6, #6
   17a8a:	460c      	mov	r4, r1
   17a8c:	704d      	strb	r5, [r1, #1]
   17a8e:	700e      	strb	r6, [r1, #0]
   17a90:	462b      	mov	r3, r5
   17a92:	8805      	ldrh	r5, [r0, #0]
   17a94:	4602      	mov	r2, r0
   17a96:	804d      	strh	r5, [r1, #2]
   17a98:	68c5      	ldr	r5, [r0, #12]
   17a9a:	f8c1 500a 	str.w	r5, [r1, #10]
   17a9e:	8905      	ldrh	r5, [r0, #8]
   17aa0:	810d      	strh	r5, [r1, #8]
   17aa2:	6840      	ldr	r0, [r0, #4]
   17aa4:	6048      	str	r0, [r1, #4]
   17aa6:	8a15      	ldrh	r5, [r2, #16]
   17aa8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   17aac:	4408      	add	r0, r1
   17aae:	81c5      	strh	r5, [r0, #14]
   17ab0:	7c90      	ldrb	r0, [r2, #18]
   17ab2:	3301      	adds	r3, #1
   17ab4:	2b20      	cmp	r3, #32
   17ab6:	7420      	strb	r0, [r4, #16]
   17ab8:	f102 0204 	add.w	r2, r2, #4
   17abc:	f104 0403 	add.w	r4, r4, #3
   17ac0:	d1f1      	bne.n	17aa6 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   17ac2:	206e      	movs	r0, #110	; 0x6e
   17ac4:	bc70      	pop	{r4, r5, r6}
   17ac6:	4770      	bx	lr
   17ac8:	f04f 30ff 	mov.w	r0, #4294967295
   17acc:	4770      	bx	lr
   17ace:	bf00      	nop

00017ad0 <rpc_gnss_serialize_location>:
   17ad0:	4603      	mov	r3, r0
   17ad2:	b1c8      	cbz	r0, 17b08 <rpc_gnss_serialize_location+0x38>
   17ad4:	b1c1      	cbz	r1, 17b08 <rpc_gnss_serialize_location+0x38>
   17ad6:	2000      	movs	r0, #0
   17ad8:	2207      	movs	r2, #7
   17ada:	7048      	strb	r0, [r1, #1]
   17adc:	700a      	strb	r2, [r1, #0]
   17ade:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   17ae2:	2011      	movs	r0, #17
   17ae4:	814a      	strh	r2, [r1, #10]
   17ae6:	7b9a      	ldrb	r2, [r3, #14]
   17ae8:	740a      	strb	r2, [r1, #16]
   17aea:	681a      	ldr	r2, [r3, #0]
   17aec:	f8c1 2002 	str.w	r2, [r1, #2]
   17af0:	685a      	ldr	r2, [r3, #4]
   17af2:	f8c1 2006 	str.w	r2, [r1, #6]
   17af6:	7b1a      	ldrb	r2, [r3, #12]
   17af8:	738a      	strb	r2, [r1, #14]
   17afa:	7b5a      	ldrb	r2, [r3, #13]
   17afc:	73ca      	strb	r2, [r1, #15]
   17afe:	7a9a      	ldrb	r2, [r3, #10]
   17b00:	730a      	strb	r2, [r1, #12]
   17b02:	7adb      	ldrb	r3, [r3, #11]
   17b04:	734b      	strb	r3, [r1, #13]
   17b06:	4770      	bx	lr
   17b08:	f04f 30ff 	mov.w	r0, #4294967295
   17b0c:	4770      	bx	lr
   17b0e:	bf00      	nop

00017b10 <rpc_gnss_serialize_integrity>:
   17b10:	b148      	cbz	r0, 17b26 <rpc_gnss_serialize_integrity+0x16>
   17b12:	b141      	cbz	r1, 17b26 <rpc_gnss_serialize_integrity+0x16>
   17b14:	2200      	movs	r2, #0
   17b16:	2308      	movs	r3, #8
   17b18:	704a      	strb	r2, [r1, #1]
   17b1a:	700b      	strb	r3, [r1, #0]
   17b1c:	6803      	ldr	r3, [r0, #0]
   17b1e:	2006      	movs	r0, #6
   17b20:	f8c1 3002 	str.w	r3, [r1, #2]
   17b24:	4770      	bx	lr
   17b26:	f04f 30ff 	mov.w	r0, #4294967295
   17b2a:	4770      	bx	lr

00017b2c <gnss_client_event_handler>:
   17b2c:	f850 1b08 	ldr.w	r1, [r0], #8
   17b30:	0c09      	lsrs	r1, r1, #16
   17b32:	f7ff b811 	b.w	16b58 <rpc_gnss_event_handler>
   17b36:	bf00      	nop

00017b38 <rpc_gnss_client_init>:
   17b38:	4801      	ldr	r0, [pc, #4]	; (17b40 <rpc_gnss_client_init+0x8>)
   17b3a:	f7fe bb73 	b.w	16224 <rpc_client_register>
   17b3e:	bf00      	nop
   17b40:	0001d894 	.word	0x0001d894

00017b44 <rpc_gnss_client_request_alloc>:
   17b44:	2300      	movs	r3, #0
   17b46:	b510      	push	{r4, lr}
   17b48:	b082      	sub	sp, #8
   17b4a:	9301      	str	r3, [sp, #4]
   17b4c:	b158      	cbz	r0, 17b66 <rpc_gnss_client_request_alloc+0x22>
   17b4e:	4604      	mov	r4, r0
   17b50:	aa01      	add	r2, sp, #4
   17b52:	2007      	movs	r0, #7
   17b54:	f7fe fd9e 	bl	16694 <rpc_message_alloc>
   17b58:	b918      	cbnz	r0, 17b62 <rpc_gnss_client_request_alloc+0x1e>
   17b5a:	9b01      	ldr	r3, [sp, #4]
   17b5c:	b10b      	cbz	r3, 17b62 <rpc_gnss_client_request_alloc+0x1e>
   17b5e:	3308      	adds	r3, #8
   17b60:	6023      	str	r3, [r4, #0]
   17b62:	b002      	add	sp, #8
   17b64:	bd10      	pop	{r4, pc}
   17b66:	2007      	movs	r0, #7
   17b68:	b002      	add	sp, #8
   17b6a:	bd10      	pop	{r4, pc}

00017b6c <rpc_gnss_client_request_send>:
   17b6c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   17b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   17b74:	d10b      	bne.n	17b8e <rpc_gnss_client_request_send+0x22>
   17b76:	b160      	cbz	r0, 17b92 <rpc_gnss_client_request_send+0x26>
   17b78:	4603      	mov	r3, r0
   17b7a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   17b7e:	2007      	movs	r0, #7
   17b80:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   17b84:	f843 1d08 	str.w	r1, [r3, #-8]!
   17b88:	4619      	mov	r1, r3
   17b8a:	f7fe bd6b 	b.w	16664 <rpc_message_send>
   17b8e:	200f      	movs	r0, #15
   17b90:	4770      	bx	lr
   17b92:	2007      	movs	r0, #7
   17b94:	4770      	bx	lr
   17b96:	bf00      	nop

00017b98 <rpc_gnss_client_message_free>:
   17b98:	b120      	cbz	r0, 17ba4 <rpc_gnss_client_message_free+0xc>
   17b9a:	f1a0 0108 	sub.w	r1, r0, #8
   17b9e:	2007      	movs	r0, #7
   17ba0:	f7fe bdaa 	b.w	166f8 <rpc_message_free>
   17ba4:	2007      	movs	r0, #7
   17ba6:	4770      	bx	lr

00017ba8 <rpc_gnss_client_data_free>:
   17ba8:	b118      	cbz	r0, 17bb2 <rpc_gnss_client_data_free+0xa>
   17baa:	4601      	mov	r1, r0
   17bac:	2007      	movs	r0, #7
   17bae:	f7fe beb5 	b.w	1691c <rpc_message_data_free>
   17bb2:	2007      	movs	r0, #7
   17bb4:	4770      	bx	lr
   17bb6:	bf00      	nop

00017bb8 <datagram_handler_init>:
   17bb8:	b510      	push	{r4, lr}
   17bba:	4604      	mov	r4, r0
   17bbc:	200c      	movs	r0, #12
   17bbe:	f7f9 f8d9 	bl	10d74 <nrf_malloc>
   17bc2:	60e0      	str	r0, [r4, #12]
   17bc4:	b118      	cbz	r0, 17bce <datagram_handler_init+0x16>
   17bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17bca:	f7fc bb8f 	b.w	142ec <linked_list_init>
   17bce:	2004      	movs	r0, #4
   17bd0:	bd10      	pop	{r4, pc}
   17bd2:	bf00      	nop

00017bd4 <datagram_handler_put>:
   17bd4:	b570      	push	{r4, r5, r6, lr}
   17bd6:	4606      	mov	r6, r0
   17bd8:	2014      	movs	r0, #20
   17bda:	460d      	mov	r5, r1
   17bdc:	f7f9 f8ca 	bl	10d74 <nrf_malloc>
   17be0:	b178      	cbz	r0, 17c02 <datagram_handler_put+0x2e>
   17be2:	682b      	ldr	r3, [r5, #0]
   17be4:	4604      	mov	r4, r0
   17be6:	6043      	str	r3, [r0, #4]
   17be8:	686b      	ldr	r3, [r5, #4]
   17bea:	4601      	mov	r1, r0
   17bec:	6083      	str	r3, [r0, #8]
   17bee:	68eb      	ldr	r3, [r5, #12]
   17bf0:	60c3      	str	r3, [r0, #12]
   17bf2:	68ab      	ldr	r3, [r5, #8]
   17bf4:	6103      	str	r3, [r0, #16]
   17bf6:	68f0      	ldr	r0, [r6, #12]
   17bf8:	f7fc fb82 	bl	14300 <linked_list_push>
   17bfc:	b920      	cbnz	r0, 17c08 <datagram_handler_put+0x34>
   17bfe:	6868      	ldr	r0, [r5, #4]
   17c00:	bd70      	pop	{r4, r5, r6, pc}
   17c02:	f04f 30ff 	mov.w	r0, #4294967295
   17c06:	bd70      	pop	{r4, r5, r6, pc}
   17c08:	4620      	mov	r0, r4
   17c0a:	f7f9 f8bd 	bl	10d88 <nrf_free>
   17c0e:	f04f 30ff 	mov.w	r0, #4294967295
   17c12:	bd70      	pop	{r4, r5, r6, pc}

00017c14 <datagram_handler_get>:
   17c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c16:	4606      	mov	r6, r0
   17c18:	b085      	sub	sp, #20
   17c1a:	68c0      	ldr	r0, [r0, #12]
   17c1c:	460c      	mov	r4, r1
   17c1e:	4617      	mov	r7, r2
   17c20:	f7fc fb8e 	bl	14340 <linked_list_peek>
   17c24:	2800      	cmp	r0, #0
   17c26:	d037      	beq.n	17c98 <datagram_handler_get+0x84>
   17c28:	6882      	ldr	r2, [r0, #8]
   17c2a:	4605      	mov	r5, r0
   17c2c:	e9d4 0300 	ldrd	r0, r3, [r4]
   17c30:	429a      	cmp	r2, r3
   17c32:	bf28      	it	cs
   17c34:	461a      	movcs	r2, r3
   17c36:	6062      	str	r2, [r4, #4]
   17c38:	b110      	cbz	r0, 17c40 <datagram_handler_get+0x2c>
   17c3a:	6869      	ldr	r1, [r5, #4]
   17c3c:	f004 fc13 	bl	1c466 <memcpy>
   17c40:	68a0      	ldr	r0, [r4, #8]
   17c42:	b118      	cbz	r0, 17c4c <datagram_handler_get+0x38>
   17c44:	692b      	ldr	r3, [r5, #16]
   17c46:	b10b      	cbz	r3, 17c4c <datagram_handler_get+0x38>
   17c48:	68ea      	ldr	r2, [r5, #12]
   17c4a:	b9e2      	cbnz	r2, 17c86 <datagram_handler_get+0x72>
   17c4c:	2300      	movs	r3, #0
   17c4e:	60e3      	str	r3, [r4, #12]
   17c50:	073b      	lsls	r3, r7, #28
   17c52:	d502      	bpl.n	17c5a <datagram_handler_get+0x46>
   17c54:	6860      	ldr	r0, [r4, #4]
   17c56:	b005      	add	sp, #20
   17c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c5a:	68f0      	ldr	r0, [r6, #12]
   17c5c:	f7fc fb66 	bl	1432c <linked_list_pop>
   17c60:	4605      	mov	r5, r0
   17c62:	2800      	cmp	r0, #0
   17c64:	d0f6      	beq.n	17c54 <datagram_handler_get+0x40>
   17c66:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   17c6a:	6902      	ldr	r2, [r0, #16]
   17c6c:	9300      	str	r3, [sp, #0]
   17c6e:	68c3      	ldr	r3, [r0, #12]
   17c70:	e9cd 1201 	strd	r1, r2, [sp, #4]
   17c74:	9303      	str	r3, [sp, #12]
   17c76:	4668      	mov	r0, sp
   17c78:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   17c7c:	4798      	blx	r3
   17c7e:	4628      	mov	r0, r5
   17c80:	f7f9 f882 	bl	10d88 <nrf_free>
   17c84:	e7e6      	b.n	17c54 <datagram_handler_get+0x40>
   17c86:	68e3      	ldr	r3, [r4, #12]
   17c88:	429a      	cmp	r2, r3
   17c8a:	bf28      	it	cs
   17c8c:	461a      	movcs	r2, r3
   17c8e:	60e2      	str	r2, [r4, #12]
   17c90:	6929      	ldr	r1, [r5, #16]
   17c92:	f004 fbe8 	bl	1c466 <memcpy>
   17c96:	e7db      	b.n	17c50 <datagram_handler_get+0x3c>
   17c98:	f04f 30ff 	mov.w	r0, #4294967295
   17c9c:	e7db      	b.n	17c56 <datagram_handler_get+0x42>
   17c9e:	bf00      	nop

00017ca0 <datagram_handler_available>:
   17ca0:	b508      	push	{r3, lr}
   17ca2:	68c0      	ldr	r0, [r0, #12]
   17ca4:	f7fc fb4c 	bl	14340 <linked_list_peek>
   17ca8:	b108      	cbz	r0, 17cae <datagram_handler_available+0xe>
   17caa:	6880      	ldr	r0, [r0, #8]
   17cac:	bd08      	pop	{r3, pc}
   17cae:	f04f 30ff 	mov.w	r0, #4294967295
   17cb2:	bd08      	pop	{r3, pc}

00017cb4 <datagram_handler_flush>:
   17cb4:	b530      	push	{r4, r5, lr}
   17cb6:	4605      	mov	r5, r0
   17cb8:	68c0      	ldr	r0, [r0, #12]
   17cba:	b085      	sub	sp, #20
   17cbc:	b9a8      	cbnz	r0, 17cea <datagram_handler_flush+0x36>
   17cbe:	e01a      	b.n	17cf6 <datagram_handler_flush+0x42>
   17cc0:	68e8      	ldr	r0, [r5, #12]
   17cc2:	f7fc fb33 	bl	1432c <linked_list_pop>
   17cc6:	4604      	mov	r4, r0
   17cc8:	b170      	cbz	r0, 17ce8 <datagram_handler_flush+0x34>
   17cca:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   17cce:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   17cd2:	e9cd 0100 	strd	r0, r1, [sp]
   17cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17cda:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   17cde:	4668      	mov	r0, sp
   17ce0:	4798      	blx	r3
   17ce2:	4620      	mov	r0, r4
   17ce4:	f7f9 f850 	bl	10d88 <nrf_free>
   17ce8:	68e8      	ldr	r0, [r5, #12]
   17cea:	f7fc fb2f 	bl	1434c <linked_list_size_get>
   17cee:	2800      	cmp	r0, #0
   17cf0:	d1e6      	bne.n	17cc0 <datagram_handler_flush+0xc>
   17cf2:	b005      	add	sp, #20
   17cf4:	bd30      	pop	{r4, r5, pc}
   17cf6:	2008      	movs	r0, #8
   17cf8:	b005      	add	sp, #20
   17cfa:	bd30      	pop	{r4, r5, pc}

00017cfc <datagram_handler_free>:
   17cfc:	b530      	push	{r4, r5, lr}
   17cfe:	4605      	mov	r5, r0
   17d00:	68c0      	ldr	r0, [r0, #12]
   17d02:	b085      	sub	sp, #20
   17d04:	b9a0      	cbnz	r0, 17d30 <datagram_handler_free+0x34>
   17d06:	e01c      	b.n	17d42 <datagram_handler_free+0x46>
   17d08:	f7fc fb10 	bl	1432c <linked_list_pop>
   17d0c:	4604      	mov	r4, r0
   17d0e:	b170      	cbz	r0, 17d2e <datagram_handler_free+0x32>
   17d10:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   17d14:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   17d18:	e9cd 0100 	strd	r0, r1, [sp]
   17d1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17d20:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   17d24:	4668      	mov	r0, sp
   17d26:	4798      	blx	r3
   17d28:	4620      	mov	r0, r4
   17d2a:	f7f9 f82d 	bl	10d88 <nrf_free>
   17d2e:	68e8      	ldr	r0, [r5, #12]
   17d30:	f7fc fb0c 	bl	1434c <linked_list_size_get>
   17d34:	4604      	mov	r4, r0
   17d36:	68e8      	ldr	r0, [r5, #12]
   17d38:	2c00      	cmp	r4, #0
   17d3a:	d1e5      	bne.n	17d08 <datagram_handler_free+0xc>
   17d3c:	f7f9 f824 	bl	10d88 <nrf_free>
   17d40:	60ec      	str	r4, [r5, #12]
   17d42:	b005      	add	sp, #20
   17d44:	bd30      	pop	{r4, r5, pc}
   17d46:	bf00      	nop

00017d48 <null_handler_init>:
   17d48:	2000      	movs	r0, #0
   17d4a:	4770      	bx	lr

00017d4c <null_handler_put>:
   17d4c:	b510      	push	{r4, lr}
   17d4e:	460c      	mov	r4, r1
   17d50:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   17d54:	4620      	mov	r0, r4
   17d56:	4798      	blx	r3
   17d58:	6860      	ldr	r0, [r4, #4]
   17d5a:	bd10      	pop	{r4, pc}

00017d5c <null_handler_get>:
   17d5c:	f04f 30ff 	mov.w	r0, #4294967295
   17d60:	4770      	bx	lr
   17d62:	bf00      	nop

00017d64 <null_handler_available>:
   17d64:	f04f 30ff 	mov.w	r0, #4294967295
   17d68:	4770      	bx	lr
   17d6a:	bf00      	nop

00017d6c <null_handler_flush>:
   17d6c:	2000      	movs	r0, #0
   17d6e:	4770      	bx	lr

00017d70 <null_handler_free>:
   17d70:	4770      	bx	lr
   17d72:	bf00      	nop

00017d74 <packet_handler_create>:
   17d74:	2801      	cmp	r0, #1
   17d76:	b538      	push	{r3, r4, r5, lr}
   17d78:	460d      	mov	r5, r1
   17d7a:	4614      	mov	r4, r2
   17d7c:	d00d      	beq.n	17d9a <packet_handler_create+0x26>
   17d7e:	db11      	blt.n	17da4 <packet_handler_create+0x30>
   17d80:	2803      	cmp	r0, #3
   17d82:	dc0f      	bgt.n	17da4 <packet_handler_create+0x30>
   17d84:	2010      	movs	r0, #16
   17d86:	f7f8 fff5 	bl	10d74 <nrf_malloc>
   17d8a:	2218      	movs	r2, #24
   17d8c:	b120      	cbz	r0, 17d98 <packet_handler_create+0x24>
   17d8e:	4b08      	ldr	r3, [pc, #32]	; (17db0 <packet_handler_create+0x3c>)
   17d90:	6045      	str	r5, [r0, #4]
   17d92:	4413      	add	r3, r2
   17d94:	6084      	str	r4, [r0, #8]
   17d96:	6003      	str	r3, [r0, #0]
   17d98:	bd38      	pop	{r3, r4, r5, pc}
   17d9a:	2014      	movs	r0, #20
   17d9c:	f7f8 ffea 	bl	10d74 <nrf_malloc>
   17da0:	2230      	movs	r2, #48	; 0x30
   17da2:	e7f3      	b.n	17d8c <packet_handler_create+0x18>
   17da4:	200c      	movs	r0, #12
   17da6:	f7f8 ffe5 	bl	10d74 <nrf_malloc>
   17daa:	2200      	movs	r2, #0
   17dac:	e7ee      	b.n	17d8c <packet_handler_create+0x18>
   17dae:	bf00      	nop
   17db0:	0001d8a4 	.word	0x0001d8a4

00017db4 <packet_handler_delete>:
   17db4:	b510      	push	{r4, lr}
   17db6:	4604      	mov	r4, r0
   17db8:	6803      	ldr	r3, [r0, #0]
   17dba:	691b      	ldr	r3, [r3, #16]
   17dbc:	4798      	blx	r3
   17dbe:	6823      	ldr	r3, [r4, #0]
   17dc0:	4620      	mov	r0, r4
   17dc2:	695b      	ldr	r3, [r3, #20]
   17dc4:	4798      	blx	r3
   17dc6:	4620      	mov	r0, r4
   17dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17dcc:	f7f8 bfdc 	b.w	10d88 <nrf_free>

00017dd0 <stream_handler_init>:
   17dd0:	b510      	push	{r4, lr}
   17dd2:	4604      	mov	r4, r0
   17dd4:	200c      	movs	r0, #12
   17dd6:	f7f8 ffcd 	bl	10d74 <nrf_malloc>
   17dda:	60e0      	str	r0, [r4, #12]
   17ddc:	b128      	cbz	r0, 17dea <stream_handler_init+0x1a>
   17dde:	2300      	movs	r3, #0
   17de0:	6123      	str	r3, [r4, #16]
   17de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17de6:	f7fc ba81 	b.w	142ec <linked_list_init>
   17dea:	2004      	movs	r0, #4
   17dec:	bd10      	pop	{r4, pc}
   17dee:	bf00      	nop

00017df0 <stream_handler_put>:
   17df0:	b570      	push	{r4, r5, r6, lr}
   17df2:	4606      	mov	r6, r0
   17df4:	2014      	movs	r0, #20
   17df6:	460d      	mov	r5, r1
   17df8:	f7f8 ffbc 	bl	10d74 <nrf_malloc>
   17dfc:	b178      	cbz	r0, 17e1e <stream_handler_put+0x2e>
   17dfe:	682b      	ldr	r3, [r5, #0]
   17e00:	4604      	mov	r4, r0
   17e02:	6043      	str	r3, [r0, #4]
   17e04:	686b      	ldr	r3, [r5, #4]
   17e06:	4601      	mov	r1, r0
   17e08:	6083      	str	r3, [r0, #8]
   17e0a:	68eb      	ldr	r3, [r5, #12]
   17e0c:	60c3      	str	r3, [r0, #12]
   17e0e:	68ab      	ldr	r3, [r5, #8]
   17e10:	6103      	str	r3, [r0, #16]
   17e12:	68f0      	ldr	r0, [r6, #12]
   17e14:	f7fc fa74 	bl	14300 <linked_list_push>
   17e18:	b920      	cbnz	r0, 17e24 <stream_handler_put+0x34>
   17e1a:	6868      	ldr	r0, [r5, #4]
   17e1c:	bd70      	pop	{r4, r5, r6, pc}
   17e1e:	f04f 30ff 	mov.w	r0, #4294967295
   17e22:	bd70      	pop	{r4, r5, r6, pc}
   17e24:	4620      	mov	r0, r4
   17e26:	f7f8 ffaf 	bl	10d88 <nrf_free>
   17e2a:	f04f 30ff 	mov.w	r0, #4294967295
   17e2e:	bd70      	pop	{r4, r5, r6, pc}

00017e30 <stream_handler_get>:
   17e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e34:	4682      	mov	sl, r0
   17e36:	b087      	sub	sp, #28
   17e38:	68c0      	ldr	r0, [r0, #12]
   17e3a:	4689      	mov	r9, r1
   17e3c:	4693      	mov	fp, r2
   17e3e:	f7fc fa7f 	bl	14340 <linked_list_peek>
   17e42:	2800      	cmp	r0, #0
   17e44:	d072      	beq.n	17f2c <stream_handler_get+0xfc>
   17e46:	4605      	mov	r5, r0
   17e48:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17e4c:	b120      	cbz	r0, 17e58 <stream_handler_get+0x28>
   17e4e:	692b      	ldr	r3, [r5, #16]
   17e50:	b113      	cbz	r3, 17e58 <stream_handler_get+0x28>
   17e52:	68ea      	ldr	r2, [r5, #12]
   17e54:	2a00      	cmp	r2, #0
   17e56:	d15c      	bne.n	17f12 <stream_handler_get+0xe2>
   17e58:	2300      	movs	r3, #0
   17e5a:	f8c9 300c 	str.w	r3, [r9, #12]
   17e5e:	f8d9 2000 	ldr.w	r2, [r9]
   17e62:	f8d9 8004 	ldr.w	r8, [r9, #4]
   17e66:	f8da 1010 	ldr.w	r1, [sl, #16]
   17e6a:	9201      	str	r2, [sp, #4]
   17e6c:	f1b8 0f00 	cmp.w	r8, #0
   17e70:	d05a      	beq.n	17f28 <stream_handler_get+0xf8>
   17e72:	f00b 0308 	and.w	r3, fp, #8
   17e76:	2400      	movs	r4, #0
   17e78:	9300      	str	r3, [sp, #0]
   17e7a:	e010      	b.n	17e9e <stream_handler_get+0x6e>
   17e7c:	f8da 3010 	ldr.w	r3, [sl, #16]
   17e80:	443b      	add	r3, r7
   17e82:	f8ca 3010 	str.w	r3, [sl, #16]
   17e86:	4628      	mov	r0, r5
   17e88:	f7fc fa62 	bl	14350 <linked_list_get_next>
   17e8c:	443c      	add	r4, r7
   17e8e:	4605      	mov	r5, r0
   17e90:	2800      	cmp	r0, #0
   17e92:	d038      	beq.n	17f06 <stream_handler_get+0xd6>
   17e94:	45a0      	cmp	r8, r4
   17e96:	d936      	bls.n	17f06 <stream_handler_get+0xd6>
   17e98:	2100      	movs	r1, #0
   17e9a:	f8d9 2000 	ldr.w	r2, [r9]
   17e9e:	68ae      	ldr	r6, [r5, #8]
   17ea0:	eba8 0b04 	sub.w	fp, r8, r4
   17ea4:	1a76      	subs	r6, r6, r1
   17ea6:	455e      	cmp	r6, fp
   17ea8:	4637      	mov	r7, r6
   17eaa:	bf28      	it	cs
   17eac:	465f      	movcs	r7, fp
   17eae:	b132      	cbz	r2, 17ebe <stream_handler_get+0x8e>
   17eb0:	6868      	ldr	r0, [r5, #4]
   17eb2:	9b01      	ldr	r3, [sp, #4]
   17eb4:	4401      	add	r1, r0
   17eb6:	463a      	mov	r2, r7
   17eb8:	1918      	adds	r0, r3, r4
   17eba:	f004 fad4 	bl	1c466 <memcpy>
   17ebe:	9b00      	ldr	r3, [sp, #0]
   17ec0:	2b00      	cmp	r3, #0
   17ec2:	d1e0      	bne.n	17e86 <stream_handler_get+0x56>
   17ec4:	455e      	cmp	r6, fp
   17ec6:	d8d9      	bhi.n	17e7c <stream_handler_get+0x4c>
   17ec8:	f8da 000c 	ldr.w	r0, [sl, #12]
   17ecc:	f7fc fa2e 	bl	1432c <linked_list_pop>
   17ed0:	4606      	mov	r6, r0
   17ed2:	b170      	cbz	r0, 17ef2 <stream_handler_get+0xc2>
   17ed4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   17ed8:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   17edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17ee0:	e9cd 1004 	strd	r1, r0, [sp, #16]
   17ee4:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   17ee8:	a802      	add	r0, sp, #8
   17eea:	4798      	blx	r3
   17eec:	4630      	mov	r0, r6
   17eee:	f7f8 ff4b 	bl	10d88 <nrf_free>
   17ef2:	2300      	movs	r3, #0
   17ef4:	4628      	mov	r0, r5
   17ef6:	f8ca 3010 	str.w	r3, [sl, #16]
   17efa:	f7fc fa29 	bl	14350 <linked_list_get_next>
   17efe:	443c      	add	r4, r7
   17f00:	4605      	mov	r5, r0
   17f02:	2800      	cmp	r0, #0
   17f04:	d1c6      	bne.n	17e94 <stream_handler_get+0x64>
   17f06:	4620      	mov	r0, r4
   17f08:	f8c9 4004 	str.w	r4, [r9, #4]
   17f0c:	b007      	add	sp, #28
   17f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f12:	f8d9 300c 	ldr.w	r3, [r9, #12]
   17f16:	429a      	cmp	r2, r3
   17f18:	bf28      	it	cs
   17f1a:	461a      	movcs	r2, r3
   17f1c:	f8c9 200c 	str.w	r2, [r9, #12]
   17f20:	6929      	ldr	r1, [r5, #16]
   17f22:	f004 faa0 	bl	1c466 <memcpy>
   17f26:	e79a      	b.n	17e5e <stream_handler_get+0x2e>
   17f28:	4644      	mov	r4, r8
   17f2a:	e7ec      	b.n	17f06 <stream_handler_get+0xd6>
   17f2c:	f04f 30ff 	mov.w	r0, #4294967295
   17f30:	e7ec      	b.n	17f0c <stream_handler_get+0xdc>
   17f32:	bf00      	nop

00017f34 <stream_handler_available>:
   17f34:	b510      	push	{r4, lr}
   17f36:	4604      	mov	r4, r0
   17f38:	68c0      	ldr	r0, [r0, #12]
   17f3a:	f7fc fa01 	bl	14340 <linked_list_peek>
   17f3e:	b150      	cbz	r0, 17f56 <stream_handler_available+0x22>
   17f40:	6924      	ldr	r4, [r4, #16]
   17f42:	4264      	negs	r4, r4
   17f44:	6883      	ldr	r3, [r0, #8]
   17f46:	441c      	add	r4, r3
   17f48:	f7fc fa02 	bl	14350 <linked_list_get_next>
   17f4c:	2800      	cmp	r0, #0
   17f4e:	d1f9      	bne.n	17f44 <stream_handler_available+0x10>
   17f50:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   17f54:	bd10      	pop	{r4, pc}
   17f56:	f04f 30ff 	mov.w	r0, #4294967295
   17f5a:	bd10      	pop	{r4, pc}

00017f5c <stream_handler_flush>:
   17f5c:	b530      	push	{r4, r5, lr}
   17f5e:	4605      	mov	r5, r0
   17f60:	68c0      	ldr	r0, [r0, #12]
   17f62:	b085      	sub	sp, #20
   17f64:	b9a8      	cbnz	r0, 17f92 <stream_handler_flush+0x36>
   17f66:	e01a      	b.n	17f9e <stream_handler_flush+0x42>
   17f68:	68e8      	ldr	r0, [r5, #12]
   17f6a:	f7fc f9df 	bl	1432c <linked_list_pop>
   17f6e:	4604      	mov	r4, r0
   17f70:	b170      	cbz	r0, 17f90 <stream_handler_flush+0x34>
   17f72:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   17f76:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   17f7a:	e9cd 0100 	strd	r0, r1, [sp]
   17f7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17f82:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   17f86:	4668      	mov	r0, sp
   17f88:	4798      	blx	r3
   17f8a:	4620      	mov	r0, r4
   17f8c:	f7f8 fefc 	bl	10d88 <nrf_free>
   17f90:	68e8      	ldr	r0, [r5, #12]
   17f92:	f7fc f9db 	bl	1434c <linked_list_size_get>
   17f96:	2800      	cmp	r0, #0
   17f98:	d1e6      	bne.n	17f68 <stream_handler_flush+0xc>
   17f9a:	b005      	add	sp, #20
   17f9c:	bd30      	pop	{r4, r5, pc}
   17f9e:	2008      	movs	r0, #8
   17fa0:	b005      	add	sp, #20
   17fa2:	bd30      	pop	{r4, r5, pc}

00017fa4 <stream_handler_free>:
   17fa4:	b530      	push	{r4, r5, lr}
   17fa6:	4605      	mov	r5, r0
   17fa8:	68c0      	ldr	r0, [r0, #12]
   17faa:	b085      	sub	sp, #20
   17fac:	b9a0      	cbnz	r0, 17fd8 <stream_handler_free+0x34>
   17fae:	e01c      	b.n	17fea <stream_handler_free+0x46>
   17fb0:	f7fc f9bc 	bl	1432c <linked_list_pop>
   17fb4:	4604      	mov	r4, r0
   17fb6:	b170      	cbz	r0, 17fd6 <stream_handler_free+0x32>
   17fb8:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   17fbc:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   17fc0:	e9cd 0100 	strd	r0, r1, [sp]
   17fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17fc8:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   17fcc:	4668      	mov	r0, sp
   17fce:	4798      	blx	r3
   17fd0:	4620      	mov	r0, r4
   17fd2:	f7f8 fed9 	bl	10d88 <nrf_free>
   17fd6:	68e8      	ldr	r0, [r5, #12]
   17fd8:	f7fc f9b8 	bl	1434c <linked_list_size_get>
   17fdc:	4604      	mov	r4, r0
   17fde:	68e8      	ldr	r0, [r5, #12]
   17fe0:	2c00      	cmp	r4, #0
   17fe2:	d1e5      	bne.n	17fb0 <stream_handler_free+0xc>
   17fe4:	f7f8 fed0 	bl	10d88 <nrf_free>
   17fe8:	60ec      	str	r4, [r5, #12]
   17fea:	b005      	add	sp, #20
   17fec:	bd30      	pop	{r4, r5, pc}
   17fee:	bf00      	nop

00017ff0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   17ff0:	4a07      	ldr	r2, [pc, #28]	; (18010 <SystemInit+0x20>)
   17ff2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   17ff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   17ffa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   17ffe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18002:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   18006:	4b03      	ldr	r3, [pc, #12]	; (18014 <SystemInit+0x24>)
   18008:	4a03      	ldr	r2, [pc, #12]	; (18018 <SystemInit+0x28>)
   1800a:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1800c:	4770      	bx	lr
   1800e:	bf00      	nop
   18010:	e000ed00 	.word	0xe000ed00
   18014:	20024f6c 	.word	0x20024f6c
   18018:	03d09000 	.word	0x03d09000

0001801c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1801c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1801e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   18020:	4b08      	ldr	r3, [pc, #32]	; (18044 <z_sys_device_do_config_level+0x28>)
   18022:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18026:	3001      	adds	r0, #1
   18028:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1802c:	42a5      	cmp	r5, r4
   1802e:	d800      	bhi.n	18032 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   18030:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   18032:	6823      	ldr	r3, [r4, #0]
   18034:	4620      	mov	r0, r4
   18036:	685b      	ldr	r3, [r3, #4]
   18038:	4798      	blx	r3
		if (retval != 0) {
   1803a:	b100      	cbz	r0, 1803e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1803c:	6066      	str	r6, [r4, #4]
								info++) {
   1803e:	340c      	adds	r4, #12
   18040:	e7f4      	b.n	1802c <z_sys_device_do_config_level+0x10>
   18042:	bf00      	nop
   18044:	0001d8ec 	.word	0x0001d8ec

00018048 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   18048:	4b10      	ldr	r3, [pc, #64]	; (1808c <z_impl_device_get_binding+0x44>)
{
   1804a:	b570      	push	{r4, r5, r6, lr}
   1804c:	4605      	mov	r5, r0
   1804e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   18050:	4c0f      	ldr	r4, [pc, #60]	; (18090 <z_impl_device_get_binding+0x48>)
   18052:	429c      	cmp	r4, r3
   18054:	d104      	bne.n	18060 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   18056:	4c0e      	ldr	r4, [pc, #56]	; (18090 <z_impl_device_get_binding+0x48>)
   18058:	42b4      	cmp	r4, r6
   1805a:	d109      	bne.n	18070 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1805c:	2400      	movs	r4, #0
   1805e:	e012      	b.n	18086 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   18060:	6862      	ldr	r2, [r4, #4]
   18062:	b11a      	cbz	r2, 1806c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   18064:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   18066:	6812      	ldr	r2, [r2, #0]
   18068:	42aa      	cmp	r2, r5
   1806a:	d00c      	beq.n	18086 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1806c:	340c      	adds	r4, #12
   1806e:	e7f0      	b.n	18052 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   18070:	6863      	ldr	r3, [r4, #4]
   18072:	b90b      	cbnz	r3, 18078 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   18074:	340c      	adds	r4, #12
   18076:	e7ef      	b.n	18058 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   18078:	6823      	ldr	r3, [r4, #0]
   1807a:	4628      	mov	r0, r5
   1807c:	6819      	ldr	r1, [r3, #0]
   1807e:	f7f4 fef1 	bl	ce64 <strcmp>
   18082:	2800      	cmp	r0, #0
   18084:	d1f6      	bne.n	18074 <z_impl_device_get_binding+0x2c>
}
   18086:	4620      	mov	r0, r4
   18088:	bd70      	pop	{r4, r5, r6, pc}
   1808a:	bf00      	nop
   1808c:	20025214 	.word	0x20025214
   18090:	20025148 	.word	0x20025148

00018094 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   18094:	4b01      	ldr	r3, [pc, #4]	; (1809c <z_impl_z_errno+0x8>)
   18096:	6898      	ldr	r0, [r3, #8]
}
   18098:	3054      	adds	r0, #84	; 0x54
   1809a:	4770      	bx	lr
   1809c:	200212e0 	.word	0x200212e0

000180a0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   180a0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   180a2:	4d0b      	ldr	r5, [pc, #44]	; (180d0 <idle+0x30>)
	__asm__ volatile(
   180a4:	f04f 0220 	mov.w	r2, #32
   180a8:	f3ef 8311 	mrs	r3, BASEPRI
   180ac:	f382 8811 	msr	BASEPRI, r2
   180b0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   180b4:	f004 f87a 	bl	1c1ac <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   180b8:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   180ba:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   180bc:	2802      	cmp	r0, #2
   180be:	bfd8      	it	le
   180c0:	4608      	movle	r0, r1
   180c2:	f004 f883 	bl	1c1cc <z_set_timeout_expiry>
	_kernel.idle = ticks;
   180c6:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   180c8:	f7f6 f8fe 	bl	e2c8 <arch_cpu_idle>
   180cc:	e7ea      	b.n	180a4 <idle+0x4>
   180ce:	bf00      	nop
   180d0:	200212e0 	.word	0x200212e0

000180d4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   180d4:	4802      	ldr	r0, [pc, #8]	; (180e0 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   180d6:	4a03      	ldr	r2, [pc, #12]	; (180e4 <z_bss_zero+0x10>)
   180d8:	2100      	movs	r1, #0
   180da:	1a12      	subs	r2, r2, r0
   180dc:	f004 b9d0 	b.w	1c480 <memset>
   180e0:	20020000 	.word	0x20020000
   180e4:	200218b8 	.word	0x200218b8

000180e8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   180e8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   180ea:	4806      	ldr	r0, [pc, #24]	; (18104 <z_data_copy+0x1c>)
   180ec:	4a06      	ldr	r2, [pc, #24]	; (18108 <z_data_copy+0x20>)
   180ee:	4907      	ldr	r1, [pc, #28]	; (1810c <z_data_copy+0x24>)
   180f0:	1a12      	subs	r2, r2, r0
   180f2:	f004 f9b8 	bl	1c466 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   180f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   180fa:	4a05      	ldr	r2, [pc, #20]	; (18110 <z_data_copy+0x28>)
   180fc:	4905      	ldr	r1, [pc, #20]	; (18114 <z_data_copy+0x2c>)
   180fe:	4806      	ldr	r0, [pc, #24]	; (18118 <z_data_copy+0x30>)
   18100:	f004 b9b1 	b.w	1c466 <memcpy>
   18104:	20024f38 	.word	0x20024f38
   18108:	2002533c 	.word	0x2002533c
   1810c:	0001df48 	.word	0x0001df48
   18110:	00000000 	.word	0x00000000
   18114:	0001df48 	.word	0x0001df48
   18118:	20020000 	.word	0x20020000

0001811c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1811c:	2201      	movs	r2, #1
{
   1811e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   18120:	4b0b      	ldr	r3, [pc, #44]	; (18150 <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18122:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   18124:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18126:	f7ff ff79 	bl	1801c <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1812a:	4a0a      	ldr	r2, [pc, #40]	; (18154 <bg_thread_main+0x38>)
   1812c:	490a      	ldr	r1, [pc, #40]	; (18158 <bg_thread_main+0x3c>)
   1812e:	480b      	ldr	r0, [pc, #44]	; (1815c <bg_thread_main+0x40>)
   18130:	f002 ff13 	bl	1af5a <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   18134:	2003      	movs	r0, #3
   18136:	f7ff ff71 	bl	1801c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1813a:	f000 ff83 	bl	19044 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1813e:	f7f5 fcfd 	bl	db3c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   18142:	4a07      	ldr	r2, [pc, #28]	; (18160 <bg_thread_main+0x44>)
   18144:	7b13      	ldrb	r3, [r2, #12]
   18146:	f023 0301 	bic.w	r3, r3, #1
   1814a:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1814c:	bd08      	pop	{r3, pc}
   1814e:	bf00      	nop
   18150:	20021760 	.word	0x20021760
   18154:	0001dd47 	.word	0x0001dd47
   18158:	0001dd48 	.word	0x0001dd48
   1815c:	0001dd66 	.word	0x0001dd66
   18160:	20020a0c 	.word	0x20020a0c

00018164 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   18164:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   18166:	4b34      	ldr	r3, [pc, #208]	; (18238 <z_cstart+0xd4>)
   18168:	b0b2      	sub	sp, #200	; 0xc8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1816a:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1816e:	2400      	movs	r4, #0
   18170:	23e0      	movs	r3, #224	; 0xe0
   18172:	4d32      	ldr	r5, [pc, #200]	; (1823c <z_cstart+0xd8>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   18174:	2701      	movs	r7, #1
   18176:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1817a:	77ec      	strb	r4, [r5, #31]
   1817c:	762c      	strb	r4, [r5, #24]
   1817e:	766c      	strb	r4, [r5, #25]
   18180:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18182:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   18184:	4e2e      	ldr	r6, [pc, #184]	; (18240 <z_cstart+0xdc>)
   18186:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1818a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1818c:	f7f6 fa76 	bl	e67c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18190:	f7f6 f894 	bl	e2bc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18194:	f04f 33ff 	mov.w	r3, #4294967295
   18198:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1819a:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1819c:	ab06      	add	r3, sp, #24
   1819e:	22b0      	movs	r2, #176	; 0xb0
   181a0:	4621      	mov	r1, r4
   181a2:	4618      	mov	r0, r3
   181a4:	f004 f96c 	bl	1c480 <memset>
	_current = &dummy_thread;
   181a8:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   181aa:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   181ac:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   181b0:	f7ff ff34 	bl	1801c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   181b4:	4638      	mov	r0, r7
   181b6:	f7ff ff31 	bl	1801c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   181ba:	4d22      	ldr	r5, [pc, #136]	; (18244 <z_cstart+0xe0>)
	z_sched_init();
   181bc:	f000 fdc6 	bl	18d4c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   181c0:	4b21      	ldr	r3, [pc, #132]	; (18248 <z_cstart+0xe4>)
   181c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   181c6:	e9cd 7304 	strd	r7, r3, [sp, #16]
   181ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
   181ce:	4b1f      	ldr	r3, [pc, #124]	; (1824c <z_cstart+0xe8>)
   181d0:	e9cd 4400 	strd	r4, r4, [sp]
   181d4:	491e      	ldr	r1, [pc, #120]	; (18250 <z_cstart+0xec>)
   181d6:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   181d8:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   181da:	f000 fecb 	bl	18f74 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   181de:	7b6b      	ldrb	r3, [r5, #13]
   181e0:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   181e4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   181e8:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   181ea:	d104      	bne.n	181f6 <z_cstart+0x92>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   181ec:	69ab      	ldr	r3, [r5, #24]
   181ee:	b913      	cbnz	r3, 181f6 <z_cstart+0x92>
		z_add_thread_to_ready_q(thread);
   181f0:	4628      	mov	r0, r5
   181f2:	f000 fb71 	bl	188d8 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   181f6:	4b17      	ldr	r3, [pc, #92]	; (18254 <z_cstart+0xf0>)
   181f8:	2201      	movs	r2, #1
   181fa:	9305      	str	r3, [sp, #20]
   181fc:	230f      	movs	r3, #15
   181fe:	e9cd 3203 	strd	r3, r2, [sp, #12]
   18202:	2300      	movs	r3, #0
   18204:	4d14      	ldr	r5, [pc, #80]	; (18258 <z_cstart+0xf4>)
   18206:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1820a:	9300      	str	r3, [sp, #0]
   1820c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18210:	4b12      	ldr	r3, [pc, #72]	; (1825c <z_cstart+0xf8>)
   18212:	4913      	ldr	r1, [pc, #76]	; (18260 <z_cstart+0xfc>)
   18214:	4628      	mov	r0, r5
   18216:	f000 fead 	bl	18f74 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1821a:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1821c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   18220:	f023 0304 	bic.w	r3, r3, #4
   18224:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   18226:	4b0f      	ldr	r3, [pc, #60]	; (18264 <z_cstart+0x100>)
   18228:	4909      	ldr	r1, [pc, #36]	; (18250 <z_cstart+0xec>)
	list->tail = (sys_dnode_t *)list;
   1822a:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1822e:	4805      	ldr	r0, [pc, #20]	; (18244 <z_cstart+0xe0>)
   18230:	4b06      	ldr	r3, [pc, #24]	; (1824c <z_cstart+0xe8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   18232:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   18234:	f7f6 f8f0 	bl	e418 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18238:	200235f8 	.word	0x200235f8
   1823c:	e000ed00 	.word	0xe000ed00
   18240:	200212e0 	.word	0x200212e0
   18244:	20020a0c 	.word	0x20020a0c
   18248:	0001dd8d 	.word	0x0001dd8d
   1824c:	0001811d 	.word	0x0001811d
   18250:	20021cb8 	.word	0x20021cb8
   18254:	0001dd92 	.word	0x0001dd92
   18258:	2002095c 	.word	0x2002095c
   1825c:	000180a1 	.word	0x000180a1
   18260:	20022cb8 	.word	0x20022cb8
   18264:	200212f8 	.word	0x200212f8

00018268 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   18268:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1826a:	4b0e      	ldr	r3, [pc, #56]	; (182a4 <init_mem_slab_module+0x3c>)
   1826c:	4c0e      	ldr	r4, [pc, #56]	; (182a8 <init_mem_slab_module+0x40>)
   1826e:	42a3      	cmp	r3, r4
   18270:	d301      	bcc.n	18276 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   18272:	2000      	movs	r0, #0
	return rc;
}
   18274:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   18276:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1827a:	ea41 0200 	orr.w	r2, r1, r0
   1827e:	f012 0203 	ands.w	r2, r2, #3
   18282:	d10b      	bne.n	1829c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   18284:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   18286:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18288:	42aa      	cmp	r2, r5
   1828a:	d101      	bne.n	18290 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1828c:	331c      	adds	r3, #28
   1828e:	e7ee      	b.n	1826e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   18290:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18292:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   18294:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   18296:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   18298:	4401      	add	r1, r0
   1829a:	e7f5      	b.n	18288 <init_mem_slab_module+0x20>
		return -EINVAL;
   1829c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   182a0:	e7e8      	b.n	18274 <init_mem_slab_module+0xc>
   182a2:	bf00      	nop
   182a4:	20025214 	.word	0x20025214
   182a8:	20025230 	.word	0x20025230

000182ac <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   182ac:	b510      	push	{r4, lr}
   182ae:	4613      	mov	r3, r2
   182b0:	460c      	mov	r4, r1
   182b2:	f04f 0220 	mov.w	r2, #32
   182b6:	f3ef 8111 	mrs	r1, BASEPRI
   182ba:	f382 8811 	msr	BASEPRI, r2
   182be:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   182c2:	6942      	ldr	r2, [r0, #20]
   182c4:	b15a      	cbz	r2, 182de <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   182c6:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   182c8:	6813      	ldr	r3, [r2, #0]
   182ca:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   182cc:	6983      	ldr	r3, [r0, #24]
   182ce:	3301      	adds	r3, #1
   182d0:	6183      	str	r3, [r0, #24]
		result = 0;
   182d2:	2000      	movs	r0, #0
	__asm__ volatile(
   182d4:	f381 8811 	msr	BASEPRI, r1
   182d8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   182dc:	e00d      	b.n	182fa <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   182de:	b91b      	cbnz	r3, 182e8 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   182e0:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   182e2:	f06f 000b 	mvn.w	r0, #11
   182e6:	e7f5      	b.n	182d4 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   182e8:	4602      	mov	r2, r0
   182ea:	4804      	ldr	r0, [pc, #16]	; (182fc <k_mem_slab_alloc+0x50>)
   182ec:	f000 fcaa 	bl	18c44 <z_pend_curr>
		if (result == 0) {
   182f0:	b918      	cbnz	r0, 182fa <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   182f2:	4b03      	ldr	r3, [pc, #12]	; (18300 <k_mem_slab_alloc+0x54>)
   182f4:	689b      	ldr	r3, [r3, #8]
   182f6:	695b      	ldr	r3, [r3, #20]
   182f8:	6023      	str	r3, [r4, #0]
}
   182fa:	bd10      	pop	{r4, pc}
   182fc:	20021761 	.word	0x20021761
   18300:	200212e0 	.word	0x200212e0

00018304 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18304:	b570      	push	{r4, r5, r6, lr}
   18306:	4604      	mov	r4, r0
   18308:	460d      	mov	r5, r1
	__asm__ volatile(
   1830a:	f04f 0320 	mov.w	r3, #32
   1830e:	f3ef 8611 	mrs	r6, BASEPRI
   18312:	f383 8811 	msr	BASEPRI, r3
   18316:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1831a:	f003 fec6 	bl	1c0aa <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1831e:	b180      	cbz	r0, 18342 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18320:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18322:	682a      	ldr	r2, [r5, #0]
   18324:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18326:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18328:	7b42      	ldrb	r2, [r0, #13]
   1832a:	06d2      	lsls	r2, r2, #27
   1832c:	d103      	bne.n	18336 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1832e:	6983      	ldr	r3, [r0, #24]
   18330:	b90b      	cbnz	r3, 18336 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   18332:	f000 fad1 	bl	188d8 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   18336:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   18338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1833c:	4807      	ldr	r0, [pc, #28]	; (1835c <k_mem_slab_free+0x58>)
   1833e:	f003 be3e 	b.w	1bfbe <z_reschedule>
		**(char ***)mem = slab->free_list;
   18342:	682b      	ldr	r3, [r5, #0]
   18344:	6962      	ldr	r2, [r4, #20]
   18346:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   18348:	682b      	ldr	r3, [r5, #0]
   1834a:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1834c:	69a3      	ldr	r3, [r4, #24]
   1834e:	3b01      	subs	r3, #1
   18350:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   18352:	f386 8811 	msr	BASEPRI, r6
   18356:	f3bf 8f6f 	isb	sy
}
   1835a:	bd70      	pop	{r4, r5, r6, pc}
   1835c:	20021761 	.word	0x20021761

00018360 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   18360:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   18362:	4c07      	ldr	r4, [pc, #28]	; (18380 <init_static_pools+0x20>)
   18364:	4d07      	ldr	r5, [pc, #28]	; (18384 <init_static_pools+0x24>)
   18366:	42ac      	cmp	r4, r5
   18368:	d301      	bcc.n	1836e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1836a:	2000      	movs	r0, #0
   1836c:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1836e:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   18372:	4620      	mov	r0, r4
   18374:	e9c4 3305 	strd	r3, r3, [r4, #20]
   18378:	f002 fadd 	bl	1a936 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1837c:	341c      	adds	r4, #28
   1837e:	e7f2      	b.n	18366 <init_static_pools+0x6>
   18380:	20025230 	.word	0x20025230
   18384:	2002524c 	.word	0x2002524c

00018388 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   18388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1838c:	1e1c      	subs	r4, r3, #0
{
   1838e:	b085      	sub	sp, #20
   18390:	4607      	mov	r7, r0
   18392:	460d      	mov	r5, r1
   18394:	4692      	mov	sl, r2
	if (timeout > 0) {
   18396:	dd3b      	ble.n	18410 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   18398:	f003 ff36 	bl	1c208 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1839c:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   183a0:	4b1d      	ldr	r3, [pc, #116]	; (18418 <k_mem_pool_alloc+0x90>)
   183a2:	4e1e      	ldr	r6, [pc, #120]	; (1841c <k_mem_pool_alloc+0x94>)
   183a4:	1afb      	subs	r3, r7, r3
   183a6:	109b      	asrs	r3, r3, #2
   183a8:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   183aa:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   183ae:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   183b0:	ab03      	add	r3, sp, #12
   183b2:	aa02      	add	r2, sp, #8
   183b4:	9500      	str	r5, [sp, #0]
   183b6:	4651      	mov	r1, sl
   183b8:	4638      	mov	r0, r7
   183ba:	f002 fb02 	bl	1a9c2 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   183be:	796b      	ldrb	r3, [r5, #5]
   183c0:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   183c2:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   183c4:	f362 0303 	bfi	r3, r2, #0, #4
   183c8:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   183ca:	686b      	ldr	r3, [r5, #4]
   183cc:	9a03      	ldr	r2, [sp, #12]
   183ce:	f362 331f 	bfi	r3, r2, #12, #20
   183d2:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   183d4:	b1c8      	cbz	r0, 1840a <k_mem_pool_alloc+0x82>
   183d6:	b1c4      	cbz	r4, 1840a <k_mem_pool_alloc+0x82>
   183d8:	f110 0f0c 	cmn.w	r0, #12
   183dc:	d115      	bne.n	1840a <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   183de:	f04f 0320 	mov.w	r3, #32
   183e2:	f3ef 8011 	mrs	r0, BASEPRI
   183e6:	f383 8811 	msr	BASEPRI, r3
   183ea:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   183ee:	4622      	mov	r2, r4
   183f0:	4659      	mov	r1, fp
   183f2:	f000 fc03 	bl	18bfc <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   183f6:	1c63      	adds	r3, r4, #1
   183f8:	d0da      	beq.n	183b0 <k_mem_pool_alloc+0x28>
   183fa:	f003 ff05 	bl	1c208 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   183fe:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   18402:	2c00      	cmp	r4, #0
   18404:	dcd4      	bgt.n	183b0 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   18406:	f06f 000a 	mvn.w	r0, #10
}
   1840a:	b005      	add	sp, #20
   1840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   18410:	f04f 0800 	mov.w	r8, #0
   18414:	e7c4      	b.n	183a0 <k_mem_pool_alloc+0x18>
   18416:	bf00      	nop
   18418:	20025230 	.word	0x20025230
   1841c:	b6db6db7 	.word	0xb6db6db7

00018420 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   18420:	b570      	push	{r4, r5, r6, lr}
   18422:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   18424:	6802      	ldr	r2, [r0, #0]
   18426:	7841      	ldrb	r1, [r0, #1]
   18428:	4e11      	ldr	r6, [pc, #68]	; (18470 <k_mem_pool_free_id+0x50>)
   1842a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1842e:	00a4      	lsls	r4, r4, #2
   18430:	0b12      	lsrs	r2, r2, #12
   18432:	f001 010f 	and.w	r1, r1, #15
   18436:	1930      	adds	r0, r6, r4
   18438:	f002 fb75 	bl	1ab26 <z_sys_mem_pool_block_free>
   1843c:	f04f 0320 	mov.w	r3, #32
   18440:	f3ef 8511 	mrs	r5, BASEPRI
   18444:	f383 8811 	msr	BASEPRI, r3
   18448:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1844c:	f104 0014 	add.w	r0, r4, #20
   18450:	4430      	add	r0, r6
   18452:	f003 fe57 	bl	1c104 <z_unpend_all>

	if (need_sched != 0) {
   18456:	b128      	cbz	r0, 18464 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   18458:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1845a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1845e:	4805      	ldr	r0, [pc, #20]	; (18474 <k_mem_pool_free_id+0x54>)
   18460:	f003 bdad 	b.w	1bfbe <z_reschedule>
	__asm__ volatile(
   18464:	f385 8811 	msr	BASEPRI, r5
   18468:	f3bf 8f6f 	isb	sy
}
   1846c:	bd70      	pop	{r4, r5, r6, pc}
   1846e:	bf00      	nop
   18470:	20025230 	.word	0x20025230
   18474:	20021761 	.word	0x20021761

00018478 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   18478:	4601      	mov	r1, r0
   1847a:	4801      	ldr	r0, [pc, #4]	; (18480 <k_malloc+0x8>)
   1847c:	f003 bca6 	b.w	1bdcc <k_mem_pool_malloc>
   18480:	20025230 	.word	0x20025230

00018484 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   18484:	b510      	push	{r4, lr}
   18486:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   18488:	f003 fe62 	bl	1c150 <k_is_in_isr>
   1848c:	b948      	cbnz	r0, 184a2 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1848e:	4b06      	ldr	r3, [pc, #24]	; (184a8 <z_thread_malloc+0x24>)
   18490:	689b      	ldr	r3, [r3, #8]
   18492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   18494:	b13b      	cbz	r3, 184a6 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   18496:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   18498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1849c:	4618      	mov	r0, r3
   1849e:	f003 bc95 	b.w	1bdcc <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   184a2:	4b02      	ldr	r3, [pc, #8]	; (184ac <z_thread_malloc+0x28>)
   184a4:	e7f7      	b.n	18496 <z_thread_malloc+0x12>
}
   184a6:	bd10      	pop	{r4, pc}
   184a8:	200212e0 	.word	0x200212e0
   184ac:	20025230 	.word	0x20025230

000184b0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   184b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184b4:	4613      	mov	r3, r2
   184b6:	4604      	mov	r4, r0
   184b8:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   184ba:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   184be:	f04f 0220 	mov.w	r2, #32
   184c2:	f3ef 8611 	mrs	r6, BASEPRI
   184c6:	f382 8811 	msr	BASEPRI, r2
   184ca:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   184ce:	6a01      	ldr	r1, [r0, #32]
   184d0:	68c2      	ldr	r2, [r0, #12]
   184d2:	4291      	cmp	r1, r2
   184d4:	d22e      	bcs.n	18534 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   184d6:	f003 fde8 	bl	1c0aa <z_unpend_first_thread>
		if (pending_thread != NULL) {
   184da:	68a2      	ldr	r2, [r4, #8]
   184dc:	4605      	mov	r5, r0
   184de:	4639      	mov	r1, r7
   184e0:	b198      	cbz	r0, 1850a <z_impl_k_msgq_put+0x5a>
   184e2:	6940      	ldr	r0, [r0, #20]
   184e4:	f003 ffbf 	bl	1c466 <memcpy>
   184e8:	2300      	movs	r3, #0
   184ea:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   184ec:	7b6b      	ldrb	r3, [r5, #13]
   184ee:	06db      	lsls	r3, r3, #27
   184f0:	d104      	bne.n	184fc <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   184f2:	69ab      	ldr	r3, [r5, #24]
   184f4:	b913      	cbnz	r3, 184fc <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   184f6:	4628      	mov	r0, r5
   184f8:	f000 f9ee 	bl	188d8 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   184fc:	4640      	mov	r0, r8
   184fe:	4631      	mov	r1, r6
   18500:	f003 fd5d 	bl	1bfbe <z_reschedule>
			return 0;
   18504:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   18506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1850a:	69e0      	ldr	r0, [r4, #28]
   1850c:	f003 ffab 	bl	1c466 <memcpy>
		result = 0;
   18510:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   18512:	69e3      	ldr	r3, [r4, #28]
   18514:	68a2      	ldr	r2, [r4, #8]
   18516:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   18518:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1851a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1851c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1851e:	bf04      	itt	eq
   18520:	6923      	ldreq	r3, [r4, #16]
   18522:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   18524:	6a23      	ldr	r3, [r4, #32]
   18526:	3301      	adds	r3, #1
   18528:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1852a:	f386 8811 	msr	BASEPRI, r6
   1852e:	f3bf 8f6f 	isb	sy
	return result;
   18532:	e7e8      	b.n	18506 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   18534:	b14b      	cbz	r3, 1854a <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   18536:	4a06      	ldr	r2, [pc, #24]	; (18550 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   18538:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   1853a:	6892      	ldr	r2, [r2, #8]
   1853c:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1853e:	4602      	mov	r2, r0
   18540:	4640      	mov	r0, r8
}
   18542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   18546:	f000 bb7d 	b.w	18c44 <z_pend_curr>
		result = -ENOMSG;
   1854a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1854e:	e7ec      	b.n	1852a <z_impl_k_msgq_put+0x7a>
   18550:	200212e0 	.word	0x200212e0

00018554 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   18554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18558:	4604      	mov	r4, r0
   1855a:	4613      	mov	r3, r2
   1855c:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1855e:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   18562:	f04f 0220 	mov.w	r2, #32
   18566:	f3ef 8611 	mrs	r6, BASEPRI
   1856a:	f382 8811 	msr	BASEPRI, r2
   1856e:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   18572:	6a22      	ldr	r2, [r4, #32]
   18574:	2a00      	cmp	r2, #0
   18576:	d037      	beq.n	185e8 <z_impl_k_msgq_get+0x94>
   18578:	68a2      	ldr	r2, [r4, #8]
   1857a:	69a1      	ldr	r1, [r4, #24]
   1857c:	f003 ff73 	bl	1c466 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   18580:	69a3      	ldr	r3, [r4, #24]
   18582:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   18584:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   18586:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   18588:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1858a:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1858c:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1858e:	bf04      	itt	eq
   18590:	6923      	ldreq	r3, [r4, #16]
   18592:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   18594:	6a23      	ldr	r3, [r4, #32]
   18596:	3b01      	subs	r3, #1
   18598:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1859a:	f003 fd86 	bl	1c0aa <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1859e:	4605      	mov	r5, r0
   185a0:	2800      	cmp	r0, #0
   185a2:	d02e      	beq.n	18602 <z_impl_k_msgq_get+0xae>
   185a4:	68a2      	ldr	r2, [r4, #8]
   185a6:	6941      	ldr	r1, [r0, #20]
   185a8:	69e0      	ldr	r0, [r4, #28]
   185aa:	f003 ff5c 	bl	1c466 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   185ae:	69e3      	ldr	r3, [r4, #28]
   185b0:	68a2      	ldr	r2, [r4, #8]
   185b2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   185b4:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   185b6:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   185b8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   185ba:	bf04      	itt	eq
   185bc:	6923      	ldreq	r3, [r4, #16]
   185be:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   185c0:	6a23      	ldr	r3, [r4, #32]
   185c2:	3301      	adds	r3, #1
   185c4:	6223      	str	r3, [r4, #32]
   185c6:	2300      	movs	r3, #0
   185c8:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   185ca:	7b6b      	ldrb	r3, [r5, #13]
   185cc:	06db      	lsls	r3, r3, #27
   185ce:	d104      	bne.n	185da <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   185d0:	69ab      	ldr	r3, [r5, #24]
   185d2:	b913      	cbnz	r3, 185da <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   185d4:	4628      	mov	r0, r5
   185d6:	f000 f97f 	bl	188d8 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   185da:	4638      	mov	r0, r7
   185dc:	4631      	mov	r1, r6
   185de:	f003 fcee 	bl	1bfbe <z_reschedule>
			return 0;
   185e2:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   185e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   185e8:	b14b      	cbz	r3, 185fe <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   185ea:	4a08      	ldr	r2, [pc, #32]	; (1860c <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   185ec:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   185ee:	6892      	ldr	r2, [r2, #8]
   185f0:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   185f2:	4622      	mov	r2, r4
   185f4:	4631      	mov	r1, r6
}
   185f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   185fa:	f000 bb23 	b.w	18c44 <z_pend_curr>
		result = -ENOMSG;
   185fe:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   18602:	f386 8811 	msr	BASEPRI, r6
   18606:	f3bf 8f6f 	isb	sy
	return result;
   1860a:	e7eb      	b.n	185e4 <z_impl_k_msgq_get+0x90>
   1860c:	200212e0 	.word	0x200212e0

00018610 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   18610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18612:	4604      	mov	r4, r0
   18614:	460f      	mov	r7, r1
	__asm__ volatile(
   18616:	f04f 0320 	mov.w	r3, #32
   1861a:	f3ef 8511 	mrs	r5, BASEPRI
   1861e:	f383 8811 	msr	BASEPRI, r3
   18622:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18626:	68c2      	ldr	r2, [r0, #12]
   18628:	4930      	ldr	r1, [pc, #192]	; (186ec <z_impl_k_mutex_lock+0xdc>)
   1862a:	b15a      	cbz	r2, 18644 <z_impl_k_mutex_lock+0x34>
   1862c:	6880      	ldr	r0, [r0, #8]
   1862e:	688e      	ldr	r6, [r1, #8]
   18630:	42b0      	cmp	r0, r6
   18632:	d015      	beq.n	18660 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   18634:	b9b7      	cbnz	r7, 18664 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   18636:	f385 8811 	msr	BASEPRI, r5
   1863a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1863e:	f06f 000f 	mvn.w	r0, #15
   18642:	e00c      	b.n	1865e <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   18644:	688b      	ldr	r3, [r1, #8]
   18646:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1864a:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   1864c:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1864e:	3201      	adds	r2, #1
   18650:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   18652:	60a3      	str	r3, [r4, #8]
   18654:	f385 8811 	msr	BASEPRI, r5
   18658:	f3bf 8f6f 	isb	sy
		return 0;
   1865c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1865e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   18660:	6923      	ldr	r3, [r4, #16]
   18662:	e7f2      	b.n	1864a <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18664:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18668:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1866c:	4299      	cmp	r1, r3
   1866e:	bfa8      	it	ge
   18670:	4619      	movge	r1, r3
   18672:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18676:	4299      	cmp	r1, r3
   18678:	da2b      	bge.n	186d2 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1867a:	f000 fb25 	bl	18cc8 <z_set_prio>
   1867e:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18680:	463b      	mov	r3, r7
   18682:	4622      	mov	r2, r4
   18684:	4629      	mov	r1, r5
   18686:	481a      	ldr	r0, [pc, #104]	; (186f0 <z_impl_k_mutex_lock+0xe0>)
   18688:	f000 fadc 	bl	18c44 <z_pend_curr>
	if (got_mutex == 0) {
   1868c:	2800      	cmp	r0, #0
   1868e:	d0e6      	beq.n	1865e <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   18690:	f04f 0320 	mov.w	r3, #32
   18694:	f3ef 8511 	mrs	r5, BASEPRI
   18698:	f383 8811 	msr	BASEPRI, r3
   1869c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   186a0:	6823      	ldr	r3, [r4, #0]
   186a2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   186a4:	429c      	cmp	r4, r3
   186a6:	d007      	beq.n	186b8 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   186a8:	b133      	cbz	r3, 186b8 <z_impl_k_mutex_lock+0xa8>
   186aa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   186ae:	4299      	cmp	r1, r3
   186b0:	bfa8      	it	ge
   186b2:	4619      	movge	r1, r3
   186b4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   186b8:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   186ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   186be:	4299      	cmp	r1, r3
   186c0:	d109      	bne.n	186d6 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   186c2:	b16e      	cbz	r6, 186e0 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   186c4:	4629      	mov	r1, r5
   186c6:	480a      	ldr	r0, [pc, #40]	; (186f0 <z_impl_k_mutex_lock+0xe0>)
   186c8:	f003 fc79 	bl	1bfbe <z_reschedule>
	return -EAGAIN;
   186cc:	f06f 000a 	mvn.w	r0, #10
   186d0:	e7c5      	b.n	1865e <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   186d2:	2600      	movs	r6, #0
   186d4:	e7d4      	b.n	18680 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   186d6:	f000 faf7 	bl	18cc8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   186da:	2800      	cmp	r0, #0
   186dc:	d1f2      	bne.n	186c4 <z_impl_k_mutex_lock+0xb4>
   186de:	e7f0      	b.n	186c2 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   186e0:	f385 8811 	msr	BASEPRI, r5
   186e4:	f3bf 8f6f 	isb	sy
   186e8:	e7f0      	b.n	186cc <z_impl_k_mutex_lock+0xbc>
   186ea:	bf00      	nop
   186ec:	200212e0 	.word	0x200212e0
   186f0:	20021761 	.word	0x20021761

000186f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   186f4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   186f6:	6883      	ldr	r3, [r0, #8]
{
   186f8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   186fa:	2b00      	cmp	r3, #0
   186fc:	d03b      	beq.n	18776 <z_impl_k_mutex_unlock+0x82>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   186fe:	4a21      	ldr	r2, [pc, #132]	; (18784 <z_impl_k_mutex_unlock+0x90>)
   18700:	6892      	ldr	r2, [r2, #8]
   18702:	4293      	cmp	r3, r2
   18704:	d13a      	bne.n	1877c <z_impl_k_mutex_unlock+0x88>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   18706:	7bda      	ldrb	r2, [r3, #15]
   18708:	3a01      	subs	r2, #1
   1870a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1870c:	68c3      	ldr	r3, [r0, #12]
   1870e:	2b01      	cmp	r3, #1
   18710:	d005      	beq.n	1871e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   18712:	3b01      	subs	r3, #1
   18714:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   18716:	f000 f8c3 	bl	188a0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1871a:	2000      	movs	r0, #0
}
   1871c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1871e:	f04f 0320 	mov.w	r3, #32
   18722:	f3ef 8511 	mrs	r5, BASEPRI
   18726:	f383 8811 	msr	BASEPRI, r3
   1872a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1872e:	6901      	ldr	r1, [r0, #16]
   18730:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   18732:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18736:	4299      	cmp	r1, r3
   18738:	d001      	beq.n	1873e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1873a:	f000 fac5 	bl	18cc8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1873e:	4620      	mov	r0, r4
   18740:	f003 fcb3 	bl	1c0aa <z_unpend_first_thread>
	mutex->owner = new_owner;
   18744:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18746:	b180      	cbz	r0, 1876a <z_impl_k_mutex_unlock+0x76>
		mutex->owner_orig_prio = new_owner->base.prio;
   18748:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1874c:	6122      	str	r2, [r4, #16]
   1874e:	2200      	movs	r2, #0
   18750:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18752:	7b42      	ldrb	r2, [r0, #13]
   18754:	06d2      	lsls	r2, r2, #27
   18756:	d103      	bne.n	18760 <z_impl_k_mutex_unlock+0x6c>
	if (z_is_thread_ready(thread)) {
   18758:	6983      	ldr	r3, [r0, #24]
   1875a:	b90b      	cbnz	r3, 18760 <z_impl_k_mutex_unlock+0x6c>
		z_add_thread_to_ready_q(thread);
   1875c:	f000 f8bc 	bl	188d8 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   18760:	4629      	mov	r1, r5
   18762:	4809      	ldr	r0, [pc, #36]	; (18788 <z_impl_k_mutex_unlock+0x94>)
   18764:	f003 fc2b 	bl	1bfbe <z_reschedule>
   18768:	e7d5      	b.n	18716 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1876a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1876c:	f385 8811 	msr	BASEPRI, r5
   18770:	f3bf 8f6f 	isb	sy
   18774:	e7cf      	b.n	18716 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   18776:	f06f 0015 	mvn.w	r0, #21
   1877a:	e7cf      	b.n	1871c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1877c:	f04f 30ff 	mov.w	r0, #4294967295
   18780:	e7cc      	b.n	1871c <z_impl_k_mutex_unlock+0x28>
   18782:	bf00      	nop
   18784:	200212e0 	.word	0x200212e0
   18788:	20021761 	.word	0x20021761

0001878c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1878c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1878e:	4c08      	ldr	r4, [pc, #32]	; (187b0 <z_reset_time_slice+0x24>)
   18790:	6823      	ldr	r3, [r4, #0]
   18792:	b15b      	cbz	r3, 187ac <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18794:	f7f5 fd02 	bl	e19c <z_clock_elapsed>
   18798:	6823      	ldr	r3, [r4, #0]
   1879a:	4a06      	ldr	r2, [pc, #24]	; (187b4 <z_reset_time_slice+0x28>)
   1879c:	4418      	add	r0, r3
   1879e:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   187a0:	2100      	movs	r1, #0
	}
}
   187a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   187a6:	4618      	mov	r0, r3
   187a8:	f003 bd10 	b.w	1c1cc <z_set_timeout_expiry>
}
   187ac:	bd10      	pop	{r4, pc}
   187ae:	bf00      	nop
   187b0:	2002131c 	.word	0x2002131c
   187b4:	200212e0 	.word	0x200212e0

000187b8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   187b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187ba:	460d      	mov	r5, r1
	__asm__ volatile(
   187bc:	f04f 0320 	mov.w	r3, #32
   187c0:	f3ef 8411 	mrs	r4, BASEPRI
   187c4:	f383 8811 	msr	BASEPRI, r3
   187c8:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   187cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   187d0:	f240 36e7 	movw	r6, #999	; 0x3e7
   187d4:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   187d6:	2200      	movs	r2, #0
   187d8:	fbe1 6700 	umlal	r6, r7, r1, r0
   187dc:	4b09      	ldr	r3, [pc, #36]	; (18804 <k_sched_time_slice_set+0x4c>)
   187de:	4630      	mov	r0, r6
   187e0:	611a      	str	r2, [r3, #16]
   187e2:	4639      	mov	r1, r7
   187e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   187e8:	2300      	movs	r3, #0
   187ea:	f7f3 fee5 	bl	c5b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   187ee:	4b06      	ldr	r3, [pc, #24]	; (18808 <k_sched_time_slice_set+0x50>)
   187f0:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   187f2:	4b06      	ldr	r3, [pc, #24]	; (1880c <k_sched_time_slice_set+0x54>)
   187f4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   187f6:	f7ff ffc9 	bl	1878c <z_reset_time_slice>
	__asm__ volatile(
   187fa:	f384 8811 	msr	BASEPRI, r4
   187fe:	f3bf 8f6f 	isb	sy
	}
}
   18802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18804:	200212e0 	.word	0x200212e0
   18808:	2002131c 	.word	0x2002131c
   1880c:	20021318 	.word	0x20021318

00018810 <k_sched_lock>:
	__asm__ volatile(
   18810:	f04f 0320 	mov.w	r3, #32
   18814:	f3ef 8111 	mrs	r1, BASEPRI
   18818:	f383 8811 	msr	BASEPRI, r3
   1881c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   18820:	4b04      	ldr	r3, [pc, #16]	; (18834 <k_sched_lock+0x24>)
   18822:	689a      	ldr	r2, [r3, #8]
   18824:	7bd3      	ldrb	r3, [r2, #15]
   18826:	3b01      	subs	r3, #1
   18828:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1882a:	f381 8811 	msr	BASEPRI, r1
   1882e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   18832:	4770      	bx	lr
   18834:	200212e0 	.word	0x200212e0

00018838 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18838:	4b09      	ldr	r3, [pc, #36]	; (18860 <z_priq_dumb_remove+0x28>)
   1883a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1883e:	4282      	cmp	r2, r0
   18840:	d105      	bne.n	1884e <z_priq_dumb_remove+0x16>
   18842:	689b      	ldr	r3, [r3, #8]
   18844:	428b      	cmp	r3, r1
   18846:	d102      	bne.n	1884e <z_priq_dumb_remove+0x16>
   18848:	7b4b      	ldrb	r3, [r1, #13]
   1884a:	06db      	lsls	r3, r3, #27
   1884c:	d106      	bne.n	1885c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1884e:	e9d1 3200 	ldrd	r3, r2, [r1]
   18852:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18854:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18856:	2300      	movs	r3, #0
	node->prev = NULL;
   18858:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1885c:	4770      	bx	lr
   1885e:	bf00      	nop
   18860:	200212e0 	.word	0x200212e0

00018864 <update_cache>:
{
   18864:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   18866:	4c0d      	ldr	r4, [pc, #52]	; (1889c <update_cache+0x38>)
{
   18868:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1886a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1886e:	f003 fbe5 	bl	1c03c <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   18872:	4605      	mov	r5, r0
   18874:	b900      	cbnz	r0, 18878 <update_cache+0x14>
   18876:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   18878:	68a3      	ldr	r3, [r4, #8]
   1887a:	b94a      	cbnz	r2, 18890 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1887c:	7b5a      	ldrb	r2, [r3, #13]
   1887e:	06d2      	lsls	r2, r2, #27
   18880:	d106      	bne.n	18890 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18882:	69aa      	ldr	r2, [r5, #24]
   18884:	b922      	cbnz	r2, 18890 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   18886:	89da      	ldrh	r2, [r3, #14]
   18888:	2a7f      	cmp	r2, #127	; 0x7f
   1888a:	d901      	bls.n	18890 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1888c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1888e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   18890:	429d      	cmp	r5, r3
   18892:	d001      	beq.n	18898 <update_cache+0x34>
			z_reset_time_slice();
   18894:	f7ff ff7a 	bl	1878c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18898:	6265      	str	r5, [r4, #36]	; 0x24
}
   1889a:	e7f8      	b.n	1888e <update_cache+0x2a>
   1889c:	200212e0 	.word	0x200212e0

000188a0 <k_sched_unlock>:
{
   188a0:	b510      	push	{r4, lr}
	__asm__ volatile(
   188a2:	f04f 0320 	mov.w	r3, #32
   188a6:	f3ef 8411 	mrs	r4, BASEPRI
   188aa:	f383 8811 	msr	BASEPRI, r3
   188ae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   188b2:	4b08      	ldr	r3, [pc, #32]	; (188d4 <k_sched_unlock+0x34>)
		update_cache(0);
   188b4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   188b6:	689a      	ldr	r2, [r3, #8]
   188b8:	7bd3      	ldrb	r3, [r2, #15]
   188ba:	3301      	adds	r3, #1
   188bc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   188be:	f7ff ffd1 	bl	18864 <update_cache>
	__asm__ volatile(
   188c2:	f384 8811 	msr	BASEPRI, r4
   188c6:	f3bf 8f6f 	isb	sy
}
   188ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   188ce:	f003 bb8d 	b.w	1bfec <z_reschedule_unlocked>
   188d2:	bf00      	nop
   188d4:	200212e0 	.word	0x200212e0

000188d8 <z_add_thread_to_ready_q>:
{
   188d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   188da:	f04f 0320 	mov.w	r3, #32
   188de:	f3ef 8411 	mrs	r4, BASEPRI
   188e2:	f383 8811 	msr	BASEPRI, r3
   188e6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   188ea:	4a15      	ldr	r2, [pc, #84]	; (18940 <z_add_thread_to_ready_q+0x68>)
   188ec:	4611      	mov	r1, r2
   188ee:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   188f2:	428b      	cmp	r3, r1
   188f4:	d01d      	beq.n	18932 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   188f6:	b1e3      	cbz	r3, 18932 <z_add_thread_to_ready_q+0x5a>
   188f8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   188fa:	f990 500e 	ldrsb.w	r5, [r0, #14]
   188fe:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18902:	42af      	cmp	r7, r5
   18904:	dd10      	ble.n	18928 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   18906:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18908:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1890c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1890e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   18910:	7b43      	ldrb	r3, [r0, #13]
   18912:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18916:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   18918:	2000      	movs	r0, #0
   1891a:	f7ff ffa3 	bl	18864 <update_cache>
	__asm__ volatile(
   1891e:	f384 8811 	msr	BASEPRI, r4
   18922:	f3bf 8f6f 	isb	sy
}
   18926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   18928:	42b3      	cmp	r3, r6
   1892a:	d002      	beq.n	18932 <z_add_thread_to_ready_q+0x5a>
   1892c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1892e:	2b00      	cmp	r3, #0
   18930:	d1e5      	bne.n	188fe <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   18932:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   18934:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   18936:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   18938:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1893a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1893c:	62d0      	str	r0, [r2, #44]	; 0x2c
   1893e:	e7e7      	b.n	18910 <z_add_thread_to_ready_q+0x38>
   18940:	200212e0 	.word	0x200212e0

00018944 <z_move_thread_to_end_of_prio_q>:
{
   18944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18946:	4604      	mov	r4, r0
	__asm__ volatile(
   18948:	f04f 0320 	mov.w	r3, #32
   1894c:	f3ef 8511 	mrs	r5, BASEPRI
   18950:	f383 8811 	msr	BASEPRI, r3
   18954:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18958:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1895c:	2b00      	cmp	r3, #0
   1895e:	da03      	bge.n	18968 <z_move_thread_to_end_of_prio_q+0x24>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18960:	4601      	mov	r1, r0
   18962:	4818      	ldr	r0, [pc, #96]	; (189c4 <z_move_thread_to_end_of_prio_q+0x80>)
   18964:	f7ff ff68 	bl	18838 <z_priq_dumb_remove>
	return list->head == list;
   18968:	4a17      	ldr	r2, [pc, #92]	; (189c8 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1896a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1896e:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   18972:	428b      	cmp	r3, r1
   18974:	d01f      	beq.n	189b6 <z_move_thread_to_end_of_prio_q+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18976:	b1f3      	cbz	r3, 189b6 <z_move_thread_to_end_of_prio_q+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   18978:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1897c:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18980:	42b7      	cmp	r7, r6
   18982:	dd13      	ble.n	189ac <z_move_thread_to_end_of_prio_q+0x68>
	node->prev = successor->prev;
   18984:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18986:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1898a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1898c:	605c      	str	r4, [r3, #4]
   1898e:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   18990:	6890      	ldr	r0, [r2, #8]
   18992:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18996:	7363      	strb	r3, [r4, #13]
   18998:	1b03      	subs	r3, r0, r4
   1899a:	4258      	negs	r0, r3
   1899c:	4158      	adcs	r0, r3
   1899e:	f7ff ff61 	bl	18864 <update_cache>
	__asm__ volatile(
   189a2:	f385 8811 	msr	BASEPRI, r5
   189a6:	f3bf 8f6f 	isb	sy
}
   189aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   189ac:	4298      	cmp	r0, r3
   189ae:	d002      	beq.n	189b6 <z_move_thread_to_end_of_prio_q+0x72>
   189b0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   189b2:	2b00      	cmp	r3, #0
   189b4:	d1e2      	bne.n	1897c <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = list->tail;
   189b6:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   189ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   189bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   189be:	62d4      	str	r4, [r2, #44]	; 0x2c
   189c0:	e7e5      	b.n	1898e <z_move_thread_to_end_of_prio_q+0x4a>
   189c2:	bf00      	nop
   189c4:	20021308 	.word	0x20021308
   189c8:	200212e0 	.word	0x200212e0

000189cc <z_time_slice>:
	if (pending_current == _current) {
   189cc:	4a15      	ldr	r2, [pc, #84]	; (18a24 <z_time_slice+0x58>)
   189ce:	4916      	ldr	r1, [pc, #88]	; (18a28 <z_time_slice+0x5c>)
{
   189d0:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   189d2:	680c      	ldr	r4, [r1, #0]
   189d4:	6893      	ldr	r3, [r2, #8]
   189d6:	42a3      	cmp	r3, r4
   189d8:	4614      	mov	r4, r2
   189da:	d103      	bne.n	189e4 <z_time_slice+0x18>
}
   189dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   189e0:	f7ff bed4 	b.w	1878c <z_reset_time_slice>
	pending_current = NULL;
   189e4:	2500      	movs	r5, #0
   189e6:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   189e8:	4910      	ldr	r1, [pc, #64]	; (18a2c <z_time_slice+0x60>)
   189ea:	6809      	ldr	r1, [r1, #0]
   189ec:	b1b9      	cbz	r1, 18a1e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   189ee:	89d9      	ldrh	r1, [r3, #14]
   189f0:	297f      	cmp	r1, #127	; 0x7f
   189f2:	d814      	bhi.n	18a1e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   189f4:	490e      	ldr	r1, [pc, #56]	; (18a30 <z_time_slice+0x64>)
   189f6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   189fa:	6809      	ldr	r1, [r1, #0]
   189fc:	428d      	cmp	r5, r1
   189fe:	db0e      	blt.n	18a1e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   18a00:	490c      	ldr	r1, [pc, #48]	; (18a34 <z_time_slice+0x68>)
   18a02:	428b      	cmp	r3, r1
   18a04:	d00b      	beq.n	18a1e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   18a06:	6999      	ldr	r1, [r3, #24]
   18a08:	b949      	cbnz	r1, 18a1e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   18a0a:	6911      	ldr	r1, [r2, #16]
   18a0c:	4281      	cmp	r1, r0
   18a0e:	dc03      	bgt.n	18a18 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   18a10:	4618      	mov	r0, r3
   18a12:	f7ff ff97 	bl	18944 <z_move_thread_to_end_of_prio_q>
   18a16:	e7e1      	b.n	189dc <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   18a18:	1a09      	subs	r1, r1, r0
   18a1a:	6111      	str	r1, [r2, #16]
}
   18a1c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   18a1e:	2300      	movs	r3, #0
   18a20:	6123      	str	r3, [r4, #16]
   18a22:	e7fb      	b.n	18a1c <z_time_slice+0x50>
   18a24:	200212e0 	.word	0x200212e0
   18a28:	20021314 	.word	0x20021314
   18a2c:	2002131c 	.word	0x2002131c
   18a30:	20021318 	.word	0x20021318
   18a34:	2002095c 	.word	0x2002095c

00018a38 <z_thread_single_suspend>:
{
   18a38:	b570      	push	{r4, r5, r6, lr}
   18a3a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18a3c:	3018      	adds	r0, #24
   18a3e:	f003 fb9f 	bl	1c180 <z_abort_timeout>
	__asm__ volatile(
   18a42:	f04f 0320 	mov.w	r3, #32
   18a46:	f3ef 8611 	mrs	r6, BASEPRI
   18a4a:	f383 8811 	msr	BASEPRI, r3
   18a4e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18a52:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18a56:	2b00      	cmp	r3, #0
   18a58:	da07      	bge.n	18a6a <z_thread_single_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18a5a:	4621      	mov	r1, r4
   18a5c:	480e      	ldr	r0, [pc, #56]	; (18a98 <z_thread_single_suspend+0x60>)
   18a5e:	f7ff feeb 	bl	18838 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18a62:	7b63      	ldrb	r3, [r4, #13]
   18a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18a68:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18a6a:	4d0c      	ldr	r5, [pc, #48]	; (18a9c <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18a6c:	7b63      	ldrb	r3, [r4, #13]
   18a6e:	68a8      	ldr	r0, [r5, #8]
   18a70:	f043 0310 	orr.w	r3, r3, #16
   18a74:	7363      	strb	r3, [r4, #13]
   18a76:	1b03      	subs	r3, r0, r4
   18a78:	4258      	negs	r0, r3
   18a7a:	4158      	adcs	r0, r3
   18a7c:	f7ff fef2 	bl	18864 <update_cache>
	__asm__ volatile(
   18a80:	f386 8811 	msr	BASEPRI, r6
   18a84:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18a88:	68ab      	ldr	r3, [r5, #8]
   18a8a:	42a3      	cmp	r3, r4
   18a8c:	d103      	bne.n	18a96 <z_thread_single_suspend+0x5e>
}
   18a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18a92:	f003 baab 	b.w	1bfec <z_reschedule_unlocked>
}
   18a96:	bd70      	pop	{r4, r5, r6, pc}
   18a98:	20021308 	.word	0x20021308
   18a9c:	200212e0 	.word	0x200212e0

00018aa0 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   18aa0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   18aa2:	b570      	push	{r4, r5, r6, lr}
   18aa4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   18aa6:	b103      	cbz	r3, 18aaa <z_thread_single_abort+0xa>
		thread->fn_abort();
   18aa8:	4798      	blx	r3
   18aaa:	f104 0018 	add.w	r0, r4, #24
   18aae:	f003 fb67 	bl	1c180 <z_abort_timeout>
	__asm__ volatile(
   18ab2:	f04f 0320 	mov.w	r3, #32
   18ab6:	f3ef 8511 	mrs	r5, BASEPRI
   18aba:	f383 8811 	msr	BASEPRI, r3
   18abe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
   18ac2:	4620      	mov	r0, r4
   18ac4:	f003 fa69 	bl	1bf9a <z_is_thread_ready>
   18ac8:	4606      	mov	r6, r0
   18aca:	b1d8      	cbz	r0, 18b04 <z_thread_single_abort+0x64>
			if (z_is_thread_queued(thread)) {
   18acc:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18ad0:	2b00      	cmp	r3, #0
   18ad2:	da07      	bge.n	18ae4 <z_thread_single_abort+0x44>
				_priq_run_remove(&_kernel.ready_q.runq,
   18ad4:	4621      	mov	r1, r4
   18ad6:	4812      	ldr	r0, [pc, #72]	; (18b20 <z_thread_single_abort+0x80>)
   18ad8:	f7ff feae 	bl	18838 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18adc:	7b63      	ldrb	r3, [r4, #13]
   18ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18ae2:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   18ae4:	4b0f      	ldr	r3, [pc, #60]	; (18b24 <z_thread_single_abort+0x84>)
   18ae6:	6898      	ldr	r0, [r3, #8]
   18ae8:	1b02      	subs	r2, r0, r4
   18aea:	4250      	negs	r0, r2
   18aec:	4150      	adcs	r0, r2
   18aee:	f7ff feb9 	bl	18864 <update_cache>
		thread->base.thread_state |= mask;
   18af2:	7b63      	ldrb	r3, [r4, #13]
   18af4:	f043 0308 	orr.w	r3, r3, #8
   18af8:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   18afa:	f385 8811 	msr	BASEPRI, r5
   18afe:	f3bf 8f6f 	isb	sy
}
   18b02:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   18b04:	7b63      	ldrb	r3, [r4, #13]
   18b06:	079b      	lsls	r3, r3, #30
   18b08:	d5f3      	bpl.n	18af2 <z_thread_single_abort+0x52>
				_priq_wait_remove(&pended_on(thread)->waitq,
   18b0a:	4621      	mov	r1, r4
   18b0c:	68a0      	ldr	r0, [r4, #8]
   18b0e:	f7ff fe93 	bl	18838 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18b12:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   18b14:	60a6      	str	r6, [r4, #8]
   18b16:	f023 0302 	bic.w	r3, r3, #2
   18b1a:	7363      	strb	r3, [r4, #13]
   18b1c:	e7e9      	b.n	18af2 <z_thread_single_abort+0x52>
   18b1e:	bf00      	nop
   18b20:	20021308 	.word	0x20021308
   18b24:	200212e0 	.word	0x200212e0

00018b28 <z_remove_thread_from_ready_q>:
{
   18b28:	b538      	push	{r3, r4, r5, lr}
   18b2a:	4604      	mov	r4, r0
	__asm__ volatile(
   18b2c:	f04f 0320 	mov.w	r3, #32
   18b30:	f3ef 8511 	mrs	r5, BASEPRI
   18b34:	f383 8811 	msr	BASEPRI, r3
   18b38:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18b3c:	f990 300d 	ldrsb.w	r3, [r0, #13]
   18b40:	2b00      	cmp	r3, #0
   18b42:	da07      	bge.n	18b54 <z_remove_thread_from_ready_q+0x2c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18b44:	4601      	mov	r1, r0
   18b46:	4809      	ldr	r0, [pc, #36]	; (18b6c <z_remove_thread_from_ready_q+0x44>)
   18b48:	f7ff fe76 	bl	18838 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18b4c:	7b63      	ldrb	r3, [r4, #13]
   18b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18b52:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18b54:	4b06      	ldr	r3, [pc, #24]	; (18b70 <z_remove_thread_from_ready_q+0x48>)
   18b56:	6898      	ldr	r0, [r3, #8]
   18b58:	1b03      	subs	r3, r0, r4
   18b5a:	4258      	negs	r0, r3
   18b5c:	4158      	adcs	r0, r3
   18b5e:	f7ff fe81 	bl	18864 <update_cache>
	__asm__ volatile(
   18b62:	f385 8811 	msr	BASEPRI, r5
   18b66:	f3bf 8f6f 	isb	sy
}
   18b6a:	bd38      	pop	{r3, r4, r5, pc}
   18b6c:	20021308 	.word	0x20021308
   18b70:	200212e0 	.word	0x200212e0

00018b74 <pend>:
{
   18b74:	b570      	push	{r4, r5, r6, lr}
   18b76:	4604      	mov	r4, r0
   18b78:	460d      	mov	r5, r1
   18b7a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   18b7c:	f7ff ffd4 	bl	18b28 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   18b80:	7b63      	ldrb	r3, [r4, #13]
   18b82:	f043 0302 	orr.w	r3, r3, #2
   18b86:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18b88:	b17d      	cbz	r5, 18baa <pend+0x36>
	return list->head == list;
   18b8a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   18b8c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b8e:	429d      	cmp	r5, r3
   18b90:	d029      	beq.n	18be6 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18b92:	b343      	cbz	r3, 18be6 <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   18b94:	f994 200e 	ldrsb.w	r2, [r4, #14]
   18b98:	f993 100e 	ldrsb.w	r1, [r3, #14]
   18b9c:	4291      	cmp	r1, r2
   18b9e:	dd1c      	ble.n	18bda <pend+0x66>
	node->prev = successor->prev;
   18ba0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18ba2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18ba6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18ba8:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   18baa:	1c73      	adds	r3, r6, #1
   18bac:	d022      	beq.n	18bf4 <pend+0x80>
   18bae:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   18bb2:	f240 30e7 	movw	r0, #999	; 0x3e7
   18bb6:	2100      	movs	r1, #0
   18bb8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   18bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18bc0:	fbc5 0106 	smlal	r0, r1, r5, r6
   18bc4:	2300      	movs	r3, #0
   18bc6:	f7f3 fcf7 	bl	c5b8 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18bca:	490b      	ldr	r1, [pc, #44]	; (18bf8 <pend+0x84>)
   18bcc:	1c42      	adds	r2, r0, #1
   18bce:	f104 0018 	add.w	r0, r4, #24
}
   18bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18bd6:	f000 baed 	b.w	191b4 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   18bda:	6869      	ldr	r1, [r5, #4]
   18bdc:	428b      	cmp	r3, r1
   18bde:	d002      	beq.n	18be6 <pend+0x72>
   18be0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18be2:	2b00      	cmp	r3, #0
   18be4:	d1d8      	bne.n	18b98 <pend+0x24>
	node->prev = list->tail;
   18be6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18be8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18bea:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18bec:	686b      	ldr	r3, [r5, #4]
   18bee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18bf0:	606c      	str	r4, [r5, #4]
   18bf2:	e7da      	b.n	18baa <pend+0x36>
}
   18bf4:	bd70      	pop	{r4, r5, r6, pc}
   18bf6:	bf00      	nop
   18bf8:	0001c049 	.word	0x0001c049

00018bfc <z_pend_curr_irqlock>:
{
   18bfc:	b570      	push	{r4, r5, r6, lr}
   18bfe:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   18c00:	4d0e      	ldr	r5, [pc, #56]	; (18c3c <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   18c02:	4c0f      	ldr	r4, [pc, #60]	; (18c40 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   18c04:	68a8      	ldr	r0, [r5, #8]
   18c06:	f7ff ffb5 	bl	18b74 <pend>
	pending_current = _current;
   18c0a:	68ab      	ldr	r3, [r5, #8]
   18c0c:	4630      	mov	r0, r6
   18c0e:	6023      	str	r3, [r4, #0]
   18c10:	f7f5 fb8e 	bl	e330 <arch_swap>
	__asm__ volatile(
   18c14:	f04f 0220 	mov.w	r2, #32
   18c18:	f3ef 8311 	mrs	r3, BASEPRI
   18c1c:	f382 8811 	msr	BASEPRI, r2
   18c20:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   18c24:	6822      	ldr	r2, [r4, #0]
   18c26:	68a9      	ldr	r1, [r5, #8]
   18c28:	4291      	cmp	r1, r2
			pending_current = NULL;
   18c2a:	bf04      	itt	eq
   18c2c:	2200      	moveq	r2, #0
   18c2e:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   18c30:	f383 8811 	msr	BASEPRI, r3
   18c34:	f3bf 8f6f 	isb	sy
}
   18c38:	bd70      	pop	{r4, r5, r6, pc}
   18c3a:	bf00      	nop
   18c3c:	200212e0 	.word	0x200212e0
   18c40:	20021314 	.word	0x20021314

00018c44 <z_pend_curr>:
{
   18c44:	b510      	push	{r4, lr}
   18c46:	460c      	mov	r4, r1
   18c48:	4611      	mov	r1, r2
	pending_current = _current;
   18c4a:	4a06      	ldr	r2, [pc, #24]	; (18c64 <z_pend_curr+0x20>)
   18c4c:	6890      	ldr	r0, [r2, #8]
   18c4e:	4a06      	ldr	r2, [pc, #24]	; (18c68 <z_pend_curr+0x24>)
   18c50:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   18c52:	461a      	mov	r2, r3
   18c54:	f7ff ff8e 	bl	18b74 <pend>
   18c58:	4620      	mov	r0, r4
}
   18c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18c5e:	f7f5 bb67 	b.w	e330 <arch_swap>
   18c62:	bf00      	nop
   18c64:	200212e0 	.word	0x200212e0
   18c68:	20021314 	.word	0x20021314

00018c6c <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   18c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   18c6e:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   18c70:	f003 fac6 	bl	1c200 <z_tick_get_32>
   18c74:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   18c76:	f04f 0320 	mov.w	r3, #32
   18c7a:	f3ef 8711 	mrs	r7, BASEPRI
   18c7e:	f383 8811 	msr	BASEPRI, r3
   18c82:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   18c86:	4d0d      	ldr	r5, [pc, #52]	; (18cbc <z_tick_sleep.part.19+0x50>)
   18c88:	4b0d      	ldr	r3, [pc, #52]	; (18cc0 <z_tick_sleep.part.19+0x54>)
   18c8a:	68a8      	ldr	r0, [r5, #8]
   18c8c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   18c8e:	f7ff ff4b 	bl	18b28 <z_remove_thread_from_ready_q>
   18c92:	68a8      	ldr	r0, [r5, #8]
   18c94:	490b      	ldr	r1, [pc, #44]	; (18cc4 <z_tick_sleep.part.19+0x58>)
   18c96:	4632      	mov	r2, r6
   18c98:	3018      	adds	r0, #24
   18c9a:	f000 fa8b 	bl	191b4 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   18c9e:	68aa      	ldr	r2, [r5, #8]
   18ca0:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18ca2:	7b53      	ldrb	r3, [r2, #13]
   18ca4:	f043 0310 	orr.w	r3, r3, #16
   18ca8:	7353      	strb	r3, [r2, #13]
   18caa:	f7f5 fb41 	bl	e330 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   18cae:	f003 faa7 	bl	1c200 <z_tick_get_32>
   18cb2:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   18cb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   18cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18cba:	bf00      	nop
   18cbc:	200212e0 	.word	0x200212e0
   18cc0:	20021314 	.word	0x20021314
   18cc4:	0001c049 	.word	0x0001c049

00018cc8 <z_set_prio>:
{
   18cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18ccc:	4604      	mov	r4, r0
   18cce:	f04f 0320 	mov.w	r3, #32
   18cd2:	f3ef 8911 	mrs	r9, BASEPRI
   18cd6:	f383 8811 	msr	BASEPRI, r3
   18cda:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   18cde:	f003 f95c 	bl	1bf9a <z_is_thread_ready>
		if (need_sched) {
   18ce2:	b24e      	sxtb	r6, r1
   18ce4:	4680      	mov	r8, r0
   18ce6:	b360      	cbz	r0, 18d42 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   18ce8:	4d17      	ldr	r5, [pc, #92]	; (18d48 <z_set_prio+0x80>)
   18cea:	4621      	mov	r1, r4
   18cec:	f105 0728 	add.w	r7, r5, #40	; 0x28
   18cf0:	4638      	mov	r0, r7
   18cf2:	f7ff fda1 	bl	18838 <z_priq_dumb_remove>
	return list->head == list;
   18cf6:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   18cf8:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18cfa:	42bb      	cmp	r3, r7
   18cfc:	462a      	mov	r2, r5
   18cfe:	d019      	beq.n	18d34 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d00:	b1c3      	cbz	r3, 18d34 <z_set_prio+0x6c>
   18d02:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   18d04:	f993 000e 	ldrsb.w	r0, [r3, #14]
   18d08:	42b0      	cmp	r0, r6
   18d0a:	dd0e      	ble.n	18d2a <z_set_prio+0x62>
	node->prev = successor->prev;
   18d0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18d0e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18d12:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18d14:	605c      	str	r4, [r3, #4]
			update_cache(1);
   18d16:	2001      	movs	r0, #1
   18d18:	f7ff fda4 	bl	18864 <update_cache>
	__asm__ volatile(
   18d1c:	f389 8811 	msr	BASEPRI, r9
   18d20:	f3bf 8f6f 	isb	sy
}
   18d24:	4640      	mov	r0, r8
   18d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   18d2a:	4299      	cmp	r1, r3
   18d2c:	d002      	beq.n	18d34 <z_set_prio+0x6c>
   18d2e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d30:	2b00      	cmp	r3, #0
   18d32:	d1e7      	bne.n	18d04 <z_set_prio+0x3c>
	node->prev = list->tail;
   18d34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   18d36:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   18d38:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18d3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   18d3c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18d3e:	62d4      	str	r4, [r2, #44]	; 0x2c
   18d40:	e7e9      	b.n	18d16 <z_set_prio+0x4e>
			thread->base.prio = prio;
   18d42:	73a6      	strb	r6, [r4, #14]
   18d44:	e7ea      	b.n	18d1c <z_set_prio+0x54>
   18d46:	bf00      	nop
   18d48:	200212e0 	.word	0x200212e0

00018d4c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18d4c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   18d4e:	4b04      	ldr	r3, [pc, #16]	; (18d60 <z_sched_init+0x14>)
   18d50:	4608      	mov	r0, r1
   18d52:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   18d56:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   18d5a:	f7ff bd2d 	b.w	187b8 <k_sched_time_slice_set>
   18d5e:	bf00      	nop
   18d60:	200212e0 	.word	0x200212e0

00018d64 <z_impl_k_yield>:
{
   18d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   18d66:	4c23      	ldr	r4, [pc, #140]	; (18df4 <z_impl_k_yield+0x90>)
   18d68:	4b23      	ldr	r3, [pc, #140]	; (18df8 <z_impl_k_yield+0x94>)
   18d6a:	68a2      	ldr	r2, [r4, #8]
   18d6c:	429a      	cmp	r2, r3
   18d6e:	d029      	beq.n	18dc4 <z_impl_k_yield+0x60>
	__asm__ volatile(
   18d70:	f04f 0320 	mov.w	r3, #32
   18d74:	f3ef 8611 	mrs	r6, BASEPRI
   18d78:	f383 8811 	msr	BASEPRI, r3
   18d7c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   18d80:	f104 0528 	add.w	r5, r4, #40	; 0x28
   18d84:	68a1      	ldr	r1, [r4, #8]
   18d86:	4628      	mov	r0, r5
   18d88:	f7ff fd56 	bl	18838 <z_priq_dumb_remove>
	return list->head == list;
   18d8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   18d8e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d90:	42aa      	cmp	r2, r5
   18d92:	d028      	beq.n	18de6 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d94:	b33a      	cbz	r2, 18de6 <z_impl_k_yield+0x82>
   18d96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   18d98:	f993 100e 	ldrsb.w	r1, [r3, #14]
   18d9c:	f992 700e 	ldrsb.w	r7, [r2, #14]
   18da0:	428f      	cmp	r7, r1
   18da2:	dd1b      	ble.n	18ddc <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   18da4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   18da6:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   18daa:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   18dac:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   18dae:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   18db0:	2001      	movs	r0, #1
   18db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   18db6:	735a      	strb	r2, [r3, #13]
   18db8:	f7ff fd54 	bl	18864 <update_cache>
	__asm__ volatile(
   18dbc:	f386 8811 	msr	BASEPRI, r6
   18dc0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18dc4:	f04f 0320 	mov.w	r3, #32
   18dc8:	f3ef 8011 	mrs	r0, BASEPRI
   18dcc:	f383 8811 	msr	BASEPRI, r3
   18dd0:	f3bf 8f6f 	isb	sy
}
   18dd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18dd8:	f7f5 baaa 	b.w	e330 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   18ddc:	4282      	cmp	r2, r0
   18dde:	d002      	beq.n	18de6 <z_impl_k_yield+0x82>
   18de0:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18de2:	2a00      	cmp	r2, #0
   18de4:	d1da      	bne.n	18d9c <z_impl_k_yield+0x38>
	node->prev = list->tail;
   18de6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   18de8:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   18dea:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   18dec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18dee:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18df0:	62e3      	str	r3, [r4, #44]	; 0x2c
   18df2:	e7dc      	b.n	18dae <z_impl_k_yield+0x4a>
   18df4:	200212e0 	.word	0x200212e0
   18df8:	2002095c 	.word	0x2002095c

00018dfc <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   18dfc:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
   18dfe:	1c43      	adds	r3, r0, #1
{
   18e00:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   18e02:	d105      	bne.n	18e10 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   18e04:	4b10      	ldr	r3, [pc, #64]	; (18e48 <z_impl_k_sleep+0x4c>)
   18e06:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   18e08:	f000 f8fc 	bl	19004 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   18e0c:	4620      	mov	r0, r4
   18e0e:	bd38      	pop	{r3, r4, r5, pc}
   18e10:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   18e14:	f240 30e7 	movw	r0, #999	; 0x3e7
   18e18:	2100      	movs	r1, #0
   18e1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18e1e:	fbe5 0104 	umlal	r0, r1, r5, r4
   18e22:	2300      	movs	r3, #0
   18e24:	f7f3 fbc8 	bl	c5b8 <__aeabi_uldivmod>
	if (ticks == 0) {
   18e28:	4604      	mov	r4, r0
   18e2a:	b948      	cbnz	r0, 18e40 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   18e2c:	f7ff ff9a 	bl	18d64 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   18e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18e34:	fb84 0100 	smull	r0, r1, r4, r0
   18e38:	0bc4      	lsrs	r4, r0, #15
   18e3a:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   18e3e:	e7e5      	b.n	18e0c <z_impl_k_sleep+0x10>
   18e40:	f7ff ff14 	bl	18c6c <z_tick_sleep.part.19>
   18e44:	4604      	mov	r4, r0
   18e46:	e7f3      	b.n	18e30 <z_impl_k_sleep+0x34>
   18e48:	200212e0 	.word	0x200212e0

00018e4c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   18e4c:	4b01      	ldr	r3, [pc, #4]	; (18e54 <z_impl_k_current_get+0x8>)
   18e4e:	6898      	ldr	r0, [r3, #8]
   18e50:	4770      	bx	lr
   18e52:	bf00      	nop
   18e54:	200212e0 	.word	0x200212e0

00018e58 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18e58:	b570      	push	{r4, r5, r6, lr}
   18e5a:	4604      	mov	r4, r0
   18e5c:	f04f 0320 	mov.w	r3, #32
   18e60:	f3ef 8611 	mrs	r6, BASEPRI
   18e64:	f383 8811 	msr	BASEPRI, r3
   18e68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   18e6c:	f003 f91d 	bl	1c0aa <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   18e70:	4605      	mov	r5, r0
   18e72:	b170      	cbz	r0, 18e92 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18e74:	7b43      	ldrb	r3, [r0, #13]
   18e76:	06db      	lsls	r3, r3, #27
   18e78:	d103      	bne.n	18e82 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   18e7a:	6983      	ldr	r3, [r0, #24]
   18e7c:	b90b      	cbnz	r3, 18e82 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   18e7e:	f7ff fd2b 	bl	188d8 <z_add_thread_to_ready_q>
   18e82:	2300      	movs	r3, #0
   18e84:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   18e86:	4631      	mov	r1, r6
}
   18e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   18e8c:	4807      	ldr	r0, [pc, #28]	; (18eac <z_impl_k_sem_give+0x54>)
   18e8e:	f003 b896 	b.w	1bfbe <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18e92:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18e96:	429a      	cmp	r2, r3
   18e98:	bf18      	it	ne
   18e9a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18e9c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18e9e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18ea0:	f104 0010 	add.w	r0, r4, #16
   18ea4:	f003 fab0 	bl	1c408 <z_handle_obj_poll_events>
   18ea8:	e7ed      	b.n	18e86 <z_impl_k_sem_give+0x2e>
   18eaa:	bf00      	nop
   18eac:	20021761 	.word	0x20021761

00018eb0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   18eb0:	b410      	push	{r4}
   18eb2:	4602      	mov	r2, r0
   18eb4:	460b      	mov	r3, r1
   18eb6:	f04f 0020 	mov.w	r0, #32
   18eba:	f3ef 8111 	mrs	r1, BASEPRI
   18ebe:	f380 8811 	msr	BASEPRI, r0
   18ec2:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   18ec6:	6894      	ldr	r4, [r2, #8]
   18ec8:	b14c      	cbz	r4, 18ede <z_impl_k_sem_take+0x2e>
		sem->count--;
   18eca:	3c01      	subs	r4, #1
   18ecc:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   18ece:	f381 8811 	msr	BASEPRI, r1
   18ed2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18ed6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   18ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
   18edc:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   18ede:	b933      	cbnz	r3, 18eee <z_impl_k_sem_take+0x3e>
   18ee0:	f381 8811 	msr	BASEPRI, r1
   18ee4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18ee8:	f06f 000f 	mvn.w	r0, #15
		goto out;
   18eec:	e7f4      	b.n	18ed8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18eee:	4802      	ldr	r0, [pc, #8]	; (18ef8 <z_impl_k_sem_take+0x48>)
}
   18ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18ef4:	f7ff bea6 	b.w	18c44 <z_pend_curr>
   18ef8:	20021761 	.word	0x20021761

00018efc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   18efc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   18efe:	4c08      	ldr	r4, [pc, #32]	; (18f20 <k_sys_work_q_init+0x24>)
   18f00:	f04f 33ff 	mov.w	r3, #4294967295
   18f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18f08:	4906      	ldr	r1, [pc, #24]	; (18f24 <k_sys_work_q_init+0x28>)
   18f0a:	4620      	mov	r0, r4
   18f0c:	f000 f8f4 	bl	190f8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   18f10:	4905      	ldr	r1, [pc, #20]	; (18f28 <k_sys_work_q_init+0x2c>)
   18f12:	f104 0010 	add.w	r0, r4, #16
   18f16:	f003 f921 	bl	1c15c <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   18f1a:	2000      	movs	r0, #0
   18f1c:	bd10      	pop	{r4, pc}
   18f1e:	bf00      	nop
   18f20:	20021320 	.word	0x20021320
   18f24:	200235f8 	.word	0x200235f8
   18f28:	0001dd97 	.word	0x0001dd97

00018f2c <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   18f2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   18f2e:	f04f 0220 	mov.w	r2, #32
   18f32:	f3ef 8411 	mrs	r4, BASEPRI
   18f36:	f382 8811 	msr	BASEPRI, r2
   18f3a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   18f3e:	7b42      	ldrb	r2, [r0, #13]
   18f40:	0751      	lsls	r1, r2, #29
   18f42:	d404      	bmi.n	18f4e <z_impl_k_thread_start+0x22>
	__asm__ volatile(
   18f44:	f384 8811 	msr	BASEPRI, r4
   18f48:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   18f4c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18f4e:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18f52:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18f56:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18f58:	d103      	bne.n	18f62 <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
   18f5a:	6983      	ldr	r3, [r0, #24]
   18f5c:	b90b      	cbnz	r3, 18f62 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   18f5e:	f7ff fcbb 	bl	188d8 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   18f62:	4621      	mov	r1, r4
}
   18f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   18f68:	4801      	ldr	r0, [pc, #4]	; (18f70 <z_impl_k_thread_start+0x44>)
   18f6a:	f003 b828 	b.w	1bfbe <z_reschedule>
   18f6e:	bf00      	nop
   18f70:	20021761 	.word	0x20021761

00018f74 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   18f74:	b530      	push	{r4, r5, lr}
   18f76:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18f78:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   18f7a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18f7c:	9504      	str	r5, [sp, #16]
   18f7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18f80:	9503      	str	r5, [sp, #12]
   18f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   18f84:	9502      	str	r5, [sp, #8]
   18f86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   18f88:	9501      	str	r5, [sp, #4]
   18f8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   18f8c:	9500      	str	r5, [sp, #0]
   18f8e:	f7f5 fa1f 	bl	e3d0 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   18f92:	4b03      	ldr	r3, [pc, #12]	; (18fa0 <z_setup_new_thread+0x2c>)
   18f94:	689b      	ldr	r3, [r3, #8]
   18f96:	b103      	cbz	r3, 18f9a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   18f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   18f9a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   18f9c:	b007      	add	sp, #28
   18f9e:	bd30      	pop	{r4, r5, pc}
   18fa0:	200212e0 	.word	0x200212e0

00018fa4 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   18fa4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18fa6:	2600      	movs	r6, #0
{
   18fa8:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18faa:	9605      	str	r6, [sp, #20]
   18fac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   18fae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18fb0:	9604      	str	r6, [sp, #16]
   18fb2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   18fb4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18fb6:	9603      	str	r6, [sp, #12]
   18fb8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   18fba:	9602      	str	r6, [sp, #8]
   18fbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   18fbe:	9601      	str	r6, [sp, #4]
   18fc0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   18fc2:	9600      	str	r6, [sp, #0]
   18fc4:	f7ff ffd6 	bl	18f74 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   18fc8:	1c6b      	adds	r3, r5, #1
   18fca:	d003      	beq.n	18fd4 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   18fcc:	b92d      	cbnz	r5, 18fda <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   18fce:	4620      	mov	r0, r4
   18fd0:	f7ff ffac 	bl	18f2c <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   18fd4:	4620      	mov	r0, r4
   18fd6:	b006      	add	sp, #24
   18fd8:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   18fda:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   18fde:	f240 30e7 	movw	r0, #999	; 0x3e7
   18fe2:	2100      	movs	r1, #0
   18fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18fe8:	2300      	movs	r3, #0
   18fea:	fbe6 0105 	umlal	r0, r1, r6, r5
   18fee:	f7f3 fae3 	bl	c5b8 <__aeabi_uldivmod>
   18ff2:	4903      	ldr	r1, [pc, #12]	; (19000 <z_impl_k_thread_create+0x5c>)
   18ff4:	1c42      	adds	r2, r0, #1
   18ff6:	f104 0018 	add.w	r0, r4, #24
   18ffa:	f000 f8db 	bl	191b4 <z_add_timeout>
   18ffe:	e7e9      	b.n	18fd4 <z_impl_k_thread_create+0x30>
   19000:	0001c049 	.word	0x0001c049

00019004 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   19004:	b538      	push	{r3, r4, r5, lr}
   19006:	4605      	mov	r5, r0
	__asm__ volatile(
   19008:	f04f 0320 	mov.w	r3, #32
   1900c:	f3ef 8411 	mrs	r4, BASEPRI
   19010:	f383 8811 	msr	BASEPRI, r3
   19014:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   19018:	f7ff fd0e 	bl	18a38 <z_thread_single_suspend>

	if (thread == _current) {
   1901c:	4b07      	ldr	r3, [pc, #28]	; (1903c <z_impl_k_thread_suspend+0x38>)
   1901e:	689b      	ldr	r3, [r3, #8]
   19020:	42ab      	cmp	r3, r5
   19022:	d105      	bne.n	19030 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   19024:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   19026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1902a:	4805      	ldr	r0, [pc, #20]	; (19040 <z_impl_k_thread_suspend+0x3c>)
   1902c:	f002 bfc7 	b.w	1bfbe <z_reschedule>
	__asm__ volatile(
   19030:	f384 8811 	msr	BASEPRI, r4
   19034:	f3bf 8f6f 	isb	sy
}
   19038:	bd38      	pop	{r3, r4, r5, pc}
   1903a:	bf00      	nop
   1903c:	200212e0 	.word	0x200212e0
   19040:	20021761 	.word	0x20021761

00019044 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   19044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   19048:	4e28      	ldr	r6, [pc, #160]	; (190ec <z_init_static_threads+0xa8>)
   1904a:	4d29      	ldr	r5, [pc, #164]	; (190f0 <z_init_static_threads+0xac>)
   1904c:	46b0      	mov	r8, r6
{
   1904e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   19050:	42b5      	cmp	r5, r6
   19052:	f105 0430 	add.w	r4, r5, #48	; 0x30
   19056:	d310      	bcc.n	1907a <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   19058:	f7ff fbda 	bl	18810 <k_sched_lock>
   1905c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   19060:	f240 36e7 	movw	r6, #999	; 0x3e7
   19064:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   19066:	4c22      	ldr	r4, [pc, #136]	; (190f0 <z_init_static_threads+0xac>)
   19068:	f8df a088 	ldr.w	sl, [pc, #136]	; 190f4 <z_init_static_threads+0xb0>
   1906c:	4544      	cmp	r4, r8
   1906e:	d321      	bcc.n	190b4 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   19070:	b007      	add	sp, #28
   19072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   19076:	f7ff bc13 	b.w	188a0 <k_sched_unlock>
		z_setup_new_thread(
   1907a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1907e:	9305      	str	r3, [sp, #20]
   19080:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19084:	9304      	str	r3, [sp, #16]
   19086:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1908a:	9303      	str	r3, [sp, #12]
   1908c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19090:	9302      	str	r3, [sp, #8]
   19092:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   19096:	9301      	str	r3, [sp, #4]
   19098:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1909c:	9300      	str	r3, [sp, #0]
   1909e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   190a2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   190a6:	f7ff ff65 	bl	18f74 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   190aa:	f854 3c30 	ldr.w	r3, [r4, #-48]
   190ae:	64dd      	str	r5, [r3, #76]	; 0x4c
   190b0:	4625      	mov	r5, r4
   190b2:	e7cd      	b.n	19050 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   190b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   190b6:	1c4b      	adds	r3, r1, #1
   190b8:	d004      	beq.n	190c4 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   190ba:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   190bc:	b921      	cbnz	r1, 190c8 <z_init_static_threads+0x84>
   190be:	4628      	mov	r0, r5
   190c0:	f7ff ff34 	bl	18f2c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   190c4:	3430      	adds	r4, #48	; 0x30
   190c6:	e7d1      	b.n	1906c <z_init_static_threads+0x28>
   190c8:	46b3      	mov	fp, r6
   190ca:	46bc      	mov	ip, r7
   190cc:	fbe9 bc01 	umlal	fp, ip, r9, r1
   190d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   190d4:	2300      	movs	r3, #0
   190d6:	4658      	mov	r0, fp
   190d8:	4661      	mov	r1, ip
   190da:	f7f3 fa6d 	bl	c5b8 <__aeabi_uldivmod>
   190de:	4651      	mov	r1, sl
   190e0:	1c42      	adds	r2, r0, #1
   190e2:	f105 0018 	add.w	r0, r5, #24
   190e6:	f000 f865 	bl	191b4 <z_add_timeout>
   190ea:	e7eb      	b.n	190c4 <z_init_static_threads+0x80>
   190ec:	20025214 	.word	0x20025214
   190f0:	20025214 	.word	0x20025214
   190f4:	0001c049 	.word	0x0001c049

000190f8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   190f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190fc:	4605      	mov	r5, r0
   190fe:	b086      	sub	sp, #24
   19100:	460e      	mov	r6, r1
   19102:	4617      	mov	r7, r2
   19104:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   19106:	f002 fed6 	bl	1beb6 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1910a:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1910e:	2000      	movs	r0, #0
   19110:	4b09      	ldr	r3, [pc, #36]	; (19138 <k_work_q_start+0x40>)
   19112:	e9cd 0004 	strd	r0, r0, [sp, #16]
   19116:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1911a:	e9cd 5000 	strd	r5, r0, [sp]
   1911e:	463a      	mov	r2, r7
   19120:	4631      	mov	r1, r6
   19122:	4620      	mov	r0, r4
   19124:	f7ff ff3e 	bl	18fa4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19128:	4620      	mov	r0, r4
   1912a:	4904      	ldr	r1, [pc, #16]	; (1913c <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1912c:	b006      	add	sp, #24
   1912e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19132:	f003 b813 	b.w	1c15c <z_impl_k_thread_name_set>
   19136:	bf00      	nop
   19138:	0001afb1 	.word	0x0001afb1
   1913c:	0001dda0 	.word	0x0001dda0

00019140 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   19140:	4b03      	ldr	r3, [pc, #12]	; (19150 <elapsed+0x10>)
   19142:	681b      	ldr	r3, [r3, #0]
   19144:	b90b      	cbnz	r3, 1914a <elapsed+0xa>
   19146:	f7f5 b829 	b.w	e19c <z_clock_elapsed>
}
   1914a:	2000      	movs	r0, #0
   1914c:	4770      	bx	lr
   1914e:	bf00      	nop
   19150:	200213e0 	.word	0x200213e0

00019154 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19154:	6803      	ldr	r3, [r0, #0]
   19156:	b140      	cbz	r0, 1916a <remove_timeout+0x16>
   19158:	4a07      	ldr	r2, [pc, #28]	; (19178 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1915a:	6852      	ldr	r2, [r2, #4]
   1915c:	4290      	cmp	r0, r2
   1915e:	d004      	beq.n	1916a <remove_timeout+0x16>
	if (next(t) != NULL) {
   19160:	b11b      	cbz	r3, 1916a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   19162:	689a      	ldr	r2, [r3, #8]
   19164:	6881      	ldr	r1, [r0, #8]
   19166:	440a      	add	r2, r1
   19168:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1916a:	6842      	ldr	r2, [r0, #4]
   1916c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1916e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19170:	2300      	movs	r3, #0
	node->prev = NULL;
   19172:	e9c0 3300 	strd	r3, r3, [r0]
}
   19176:	4770      	bx	lr
   19178:	20024f70 	.word	0x20024f70

0001917c <next_timeout>:
	return list->head == list;
   1917c:	4b0b      	ldr	r3, [pc, #44]	; (191ac <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1917e:	b510      	push	{r4, lr}
   19180:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19182:	429c      	cmp	r4, r3
   19184:	bf08      	it	eq
   19186:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   19188:	f7ff ffda 	bl	19140 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1918c:	b154      	cbz	r4, 191a4 <next_timeout+0x28>
   1918e:	68a3      	ldr	r3, [r4, #8]
   19190:	1a18      	subs	r0, r3, r0
   19192:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19196:	4b06      	ldr	r3, [pc, #24]	; (191b0 <next_timeout+0x34>)
   19198:	691b      	ldr	r3, [r3, #16]
   1919a:	b113      	cbz	r3, 191a2 <next_timeout+0x26>
   1919c:	4298      	cmp	r0, r3
   1919e:	bfa8      	it	ge
   191a0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   191a2:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   191a4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   191a8:	e7f5      	b.n	19196 <next_timeout+0x1a>
   191aa:	bf00      	nop
   191ac:	20024f70 	.word	0x20024f70
   191b0:	200212e0 	.word	0x200212e0

000191b4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   191b4:	b570      	push	{r4, r5, r6, lr}
   191b6:	4604      	mov	r4, r0
   191b8:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   191ba:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   191bc:	f04f 0320 	mov.w	r3, #32
   191c0:	f3ef 8511 	mrs	r5, BASEPRI
   191c4:	f383 8811 	msr	BASEPRI, r3
   191c8:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   191cc:	f7ff ffb8 	bl	19140 <elapsed>
   191d0:	2e01      	cmp	r6, #1
   191d2:	bfac      	ite	ge
   191d4:	1980      	addge	r0, r0, r6
   191d6:	3001      	addlt	r0, #1
	return list->head == list;
   191d8:	4b16      	ldr	r3, [pc, #88]	; (19234 <z_add_timeout+0x80>)
   191da:	60a0      	str	r0, [r4, #8]
   191dc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   191de:	429a      	cmp	r2, r3
   191e0:	d001      	beq.n	191e6 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   191e2:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   191e4:	b932      	cbnz	r2, 191f4 <z_add_timeout+0x40>
	node->prev = list->tail;
   191e6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   191e8:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   191ea:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   191ec:	685a      	ldr	r2, [r3, #4]
   191ee:	6014      	str	r4, [r2, #0]
	list->tail = node;
   191f0:	605c      	str	r4, [r3, #4]
   191f2:	e00a      	b.n	1920a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   191f4:	6890      	ldr	r0, [r2, #8]
   191f6:	68a1      	ldr	r1, [r4, #8]
   191f8:	4288      	cmp	r0, r1
   191fa:	dd15      	ble.n	19228 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   191fc:	1a41      	subs	r1, r0, r1
   191fe:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   19200:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   19202:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   19206:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19208:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1920a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1920c:	429a      	cmp	r2, r3
   1920e:	d006      	beq.n	1921e <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19210:	4294      	cmp	r4, r2
   19212:	d104      	bne.n	1921e <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   19214:	f7ff ffb2 	bl	1917c <next_timeout>
   19218:	2100      	movs	r1, #0
   1921a:	f7f4 ff69 	bl	e0f0 <z_clock_set_timeout>
	__asm__ volatile(
   1921e:	f385 8811 	msr	BASEPRI, r5
   19222:	f3bf 8f6f 	isb	sy
		}
	}
}
   19226:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   19228:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1922a:	4296      	cmp	r6, r2
   1922c:	60a1      	str	r1, [r4, #8]
   1922e:	d0da      	beq.n	191e6 <z_add_timeout+0x32>
   19230:	6812      	ldr	r2, [r2, #0]
   19232:	e7d7      	b.n	191e4 <z_add_timeout+0x30>
   19234:	20024f70 	.word	0x20024f70

00019238 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   19238:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1923c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1923e:	f7ff fbc5 	bl	189cc <z_time_slice>
	__asm__ volatile(
   19242:	f04f 0320 	mov.w	r3, #32
   19246:	f3ef 8511 	mrs	r5, BASEPRI
   1924a:	f383 8811 	msr	BASEPRI, r3
   1924e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19252:	4f21      	ldr	r7, [pc, #132]	; (192d8 <z_clock_announce+0xa0>)
   19254:	4e21      	ldr	r6, [pc, #132]	; (192dc <z_clock_announce+0xa4>)
   19256:	46b8      	mov	r8, r7
	return list->head == list;
   19258:	f8df 9084 	ldr.w	r9, [pc, #132]	; 192e0 <z_clock_announce+0xa8>
   1925c:	6034      	str	r4, [r6, #0]
   1925e:	f8d9 4000 	ldr.w	r4, [r9]
   19262:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19264:	454c      	cmp	r4, r9
   19266:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1926a:	d005      	beq.n	19278 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1926c:	b124      	cbz	r4, 19278 <z_clock_announce+0x40>
   1926e:	68a3      	ldr	r3, [r4, #8]
   19270:	4293      	cmp	r3, r2
   19272:	dd14      	ble.n	1929e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19274:	1a9b      	subs	r3, r3, r2
   19276:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   19278:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1927a:	eb1b 0002 	adds.w	r0, fp, r2
   1927e:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   19282:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   19286:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   19288:	f7ff ff78 	bl	1917c <next_timeout>
   1928c:	4621      	mov	r1, r4
   1928e:	f7f4 ff2f 	bl	e0f0 <z_clock_set_timeout>
	__asm__ volatile(
   19292:	f385 8811 	msr	BASEPRI, r5
   19296:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1929a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1929e:	eb1b 0003 	adds.w	r0, fp, r3
   192a2:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   192a6:	1ad3      	subs	r3, r2, r3
   192a8:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   192aa:	2300      	movs	r3, #0
		curr_tick += dt;
   192ac:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   192b0:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   192b2:	4620      	mov	r0, r4
   192b4:	f7ff ff4e 	bl	19154 <remove_timeout>
   192b8:	f385 8811 	msr	BASEPRI, r5
   192bc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   192c0:	68e3      	ldr	r3, [r4, #12]
   192c2:	4798      	blx	r3
	__asm__ volatile(
   192c4:	f04f 0320 	mov.w	r3, #32
   192c8:	f3ef 8511 	mrs	r5, BASEPRI
   192cc:	f383 8811 	msr	BASEPRI, r3
   192d0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   192d4:	e7c3      	b.n	1925e <z_clock_announce+0x26>
   192d6:	bf00      	nop
   192d8:	200200e0 	.word	0x200200e0
   192dc:	200213e0 	.word	0x200213e0
   192e0:	20024f70 	.word	0x20024f70

000192e4 <z_tick_get>:

s64_t z_tick_get(void)
{
   192e4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   192e8:	f04f 0320 	mov.w	r3, #32
   192ec:	f3ef 8411 	mrs	r4, BASEPRI
   192f0:	f383 8811 	msr	BASEPRI, r3
   192f4:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   192f8:	f7f4 ff50 	bl	e19c <z_clock_elapsed>
   192fc:	4b07      	ldr	r3, [pc, #28]	; (1931c <z_tick_get+0x38>)
   192fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   19302:	eb12 0b00 	adds.w	fp, r2, r0
   19306:	f143 0c00 	adc.w	ip, r3, #0
   1930a:	4658      	mov	r0, fp
   1930c:	4661      	mov	r1, ip
	__asm__ volatile(
   1930e:	f384 8811 	msr	BASEPRI, r4
   19312:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19316:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1931a:	bf00      	nop
   1931c:	200200e0 	.word	0x200200e0

00019320 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   19320:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   19322:	7b44      	ldrb	r4, [r0, #13]
   19324:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   19328:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1932a:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1932c:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   19330:	2200      	movs	r2, #0
	event->mode = mode;
   19332:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   19334:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   19336:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   19338:	4a02      	ldr	r2, [pc, #8]	; (19344 <k_poll_event_init+0x24>)
   1933a:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1933c:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   19340:	bd10      	pop	{r4, pc}
   19342:	bf00      	nop
   19344:	00020fff 	.word	0x00020fff

00019348 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   19348:	2301      	movs	r3, #1
{
   1934a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1934e:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   19350:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   19354:	4b23      	ldr	r3, [pc, #140]	; (193e4 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   19356:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   19358:	689b      	ldr	r3, [r3, #8]
{
   1935a:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1935c:	9304      	str	r3, [sp, #16]
   1935e:	4b22      	ldr	r3, [pc, #136]	; (193e8 <z_impl_k_poll+0xa0>)
   19360:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   19362:	fab2 f382 	clz	r3, r2
   19366:	aa03      	add	r2, sp, #12
   19368:	095b      	lsrs	r3, r3, #5
   1936a:	f002 fff3 	bl	1c354 <register_events>
   1936e:	4607      	mov	r7, r0
	__asm__ volatile(
   19370:	f04f 0320 	mov.w	r3, #32
   19374:	f3ef 8511 	mrs	r5, BASEPRI
   19378:	f383 8811 	msr	BASEPRI, r3
   1937c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   19380:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19384:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   19388:	b94b      	cbnz	r3, 1939e <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1938a:	462a      	mov	r2, r5
   1938c:	4639      	mov	r1, r7
   1938e:	4630      	mov	r0, r6
   19390:	f002 ff48 	bl	1c224 <clear_event_registrations>
	__asm__ volatile(
   19394:	f385 8811 	msr	BASEPRI, r5
   19398:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1939c:	e00b      	b.n	193b6 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1939e:	2300      	movs	r3, #0
   193a0:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   193a4:	f1b8 0f00 	cmp.w	r8, #0
   193a8:	d109      	bne.n	193be <z_impl_k_poll+0x76>
   193aa:	f385 8811 	msr	BASEPRI, r5
   193ae:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   193b2:	f06f 040a 	mvn.w	r4, #10
}
   193b6:	4620      	mov	r0, r4
   193b8:	b006      	add	sp, #24
   193ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   193be:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   193c0:	4643      	mov	r3, r8
   193c2:	4629      	mov	r1, r5
   193c4:	4809      	ldr	r0, [pc, #36]	; (193ec <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   193c6:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   193ca:	f7ff fc3b 	bl	18c44 <z_pend_curr>
   193ce:	4604      	mov	r4, r0
	__asm__ volatile(
   193d0:	f04f 0320 	mov.w	r3, #32
   193d4:	f3ef 8511 	mrs	r5, BASEPRI
   193d8:	f383 8811 	msr	BASEPRI, r3
   193dc:	f3bf 8f6f 	isb	sy
   193e0:	e7d3      	b.n	1938a <z_impl_k_poll+0x42>
   193e2:	bf00      	nop
   193e4:	200212e0 	.word	0x200212e0
   193e8:	0001c2b5 	.word	0x0001c2b5
   193ec:	20021761 	.word	0x20021761

000193f0 <__assert_func>:
   193f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   193f2:	461c      	mov	r4, r3
   193f4:	4b09      	ldr	r3, [pc, #36]	; (1941c <__assert_func+0x2c>)
   193f6:	4605      	mov	r5, r0
   193f8:	681b      	ldr	r3, [r3, #0]
   193fa:	68d8      	ldr	r0, [r3, #12]
   193fc:	b152      	cbz	r2, 19414 <__assert_func+0x24>
   193fe:	4b08      	ldr	r3, [pc, #32]	; (19420 <__assert_func+0x30>)
   19400:	9100      	str	r1, [sp, #0]
   19402:	4908      	ldr	r1, [pc, #32]	; (19424 <__assert_func+0x34>)
   19404:	e9cd 3201 	strd	r3, r2, [sp, #4]
   19408:	462b      	mov	r3, r5
   1940a:	4622      	mov	r2, r4
   1940c:	f000 f80e 	bl	1942c <fiprintf>
   19410:	f003 f9a5 	bl	1c75e <abort>
   19414:	4b04      	ldr	r3, [pc, #16]	; (19428 <__assert_func+0x38>)
   19416:	461a      	mov	r2, r3
   19418:	e7f2      	b.n	19400 <__assert_func+0x10>
   1941a:	bf00      	nop
   1941c:	20024f78 	.word	0x20024f78
   19420:	0001ddaa 	.word	0x0001ddaa
   19424:	0001ddb7 	.word	0x0001ddb7
   19428:	0001dd47 	.word	0x0001dd47

0001942c <fiprintf>:
   1942c:	b40e      	push	{r1, r2, r3}
   1942e:	b503      	push	{r0, r1, lr}
   19430:	ab03      	add	r3, sp, #12
   19432:	4601      	mov	r1, r0
   19434:	4805      	ldr	r0, [pc, #20]	; (1944c <fiprintf+0x20>)
   19436:	f853 2b04 	ldr.w	r2, [r3], #4
   1943a:	6800      	ldr	r0, [r0, #0]
   1943c:	9301      	str	r3, [sp, #4]
   1943e:	f000 f807 	bl	19450 <_vfiprintf_r>
   19442:	b002      	add	sp, #8
   19444:	f85d eb04 	ldr.w	lr, [sp], #4
   19448:	b003      	add	sp, #12
   1944a:	4770      	bx	lr
   1944c:	20024f78 	.word	0x20024f78

00019450 <_vfiprintf_r>:
   19450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19454:	460d      	mov	r5, r1
   19456:	b09d      	sub	sp, #116	; 0x74
   19458:	4614      	mov	r4, r2
   1945a:	461e      	mov	r6, r3
   1945c:	4607      	mov	r7, r0
   1945e:	b118      	cbz	r0, 19468 <_vfiprintf_r+0x18>
   19460:	6983      	ldr	r3, [r0, #24]
   19462:	b90b      	cbnz	r3, 19468 <_vfiprintf_r+0x18>
   19464:	f000 feea 	bl	1a23c <__sinit>
   19468:	4b85      	ldr	r3, [pc, #532]	; (19680 <_vfiprintf_r+0x230>)
   1946a:	429d      	cmp	r5, r3
   1946c:	d11b      	bne.n	194a6 <_vfiprintf_r+0x56>
   1946e:	687d      	ldr	r5, [r7, #4]
   19470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19472:	07d9      	lsls	r1, r3, #31
   19474:	d405      	bmi.n	19482 <_vfiprintf_r+0x32>
   19476:	89ab      	ldrh	r3, [r5, #12]
   19478:	059a      	lsls	r2, r3, #22
   1947a:	d402      	bmi.n	19482 <_vfiprintf_r+0x32>
   1947c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1947e:	f003 fa38 	bl	1c8f2 <__retarget_lock_acquire_recursive>
   19482:	89ab      	ldrh	r3, [r5, #12]
   19484:	071b      	lsls	r3, r3, #28
   19486:	d501      	bpl.n	1948c <_vfiprintf_r+0x3c>
   19488:	692b      	ldr	r3, [r5, #16]
   1948a:	b9eb      	cbnz	r3, 194c8 <_vfiprintf_r+0x78>
   1948c:	4629      	mov	r1, r5
   1948e:	4638      	mov	r0, r7
   19490:	f000 fd64 	bl	19f5c <__swsetup_r>
   19494:	b1c0      	cbz	r0, 194c8 <_vfiprintf_r+0x78>
   19496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19498:	07d8      	lsls	r0, r3, #31
   1949a:	d50e      	bpl.n	194ba <_vfiprintf_r+0x6a>
   1949c:	f04f 30ff 	mov.w	r0, #4294967295
   194a0:	b01d      	add	sp, #116	; 0x74
   194a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194a6:	4b77      	ldr	r3, [pc, #476]	; (19684 <_vfiprintf_r+0x234>)
   194a8:	429d      	cmp	r5, r3
   194aa:	d101      	bne.n	194b0 <_vfiprintf_r+0x60>
   194ac:	68bd      	ldr	r5, [r7, #8]
   194ae:	e7df      	b.n	19470 <_vfiprintf_r+0x20>
   194b0:	4b75      	ldr	r3, [pc, #468]	; (19688 <_vfiprintf_r+0x238>)
   194b2:	429d      	cmp	r5, r3
   194b4:	bf08      	it	eq
   194b6:	68fd      	ldreq	r5, [r7, #12]
   194b8:	e7da      	b.n	19470 <_vfiprintf_r+0x20>
   194ba:	89ab      	ldrh	r3, [r5, #12]
   194bc:	0599      	lsls	r1, r3, #22
   194be:	d4ed      	bmi.n	1949c <_vfiprintf_r+0x4c>
   194c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   194c2:	f003 fa17 	bl	1c8f4 <__retarget_lock_release_recursive>
   194c6:	e7e9      	b.n	1949c <_vfiprintf_r+0x4c>
   194c8:	2300      	movs	r3, #0
   194ca:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1968c <_vfiprintf_r+0x23c>
   194ce:	f04f 0a01 	mov.w	sl, #1
   194d2:	9603      	str	r6, [sp, #12]
   194d4:	9309      	str	r3, [sp, #36]	; 0x24
   194d6:	2320      	movs	r3, #32
   194d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   194dc:	2330      	movs	r3, #48	; 0x30
   194de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   194e2:	4623      	mov	r3, r4
   194e4:	461e      	mov	r6, r3
   194e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   194ea:	b10a      	cbz	r2, 194f0 <_vfiprintf_r+0xa0>
   194ec:	2a25      	cmp	r2, #37	; 0x25
   194ee:	d1f9      	bne.n	194e4 <_vfiprintf_r+0x94>
   194f0:	ebb6 0b04 	subs.w	fp, r6, r4
   194f4:	d00b      	beq.n	1950e <_vfiprintf_r+0xbe>
   194f6:	465b      	mov	r3, fp
   194f8:	4622      	mov	r2, r4
   194fa:	4629      	mov	r1, r5
   194fc:	4638      	mov	r0, r7
   194fe:	f002 ffde 	bl	1c4be <__sfputs_r>
   19502:	3001      	adds	r0, #1
   19504:	f000 80a3 	beq.w	1964e <_vfiprintf_r+0x1fe>
   19508:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1950a:	445b      	add	r3, fp
   1950c:	9309      	str	r3, [sp, #36]	; 0x24
   1950e:	7833      	ldrb	r3, [r6, #0]
   19510:	2b00      	cmp	r3, #0
   19512:	f000 809c 	beq.w	1964e <_vfiprintf_r+0x1fe>
   19516:	2300      	movs	r3, #0
   19518:	f04f 32ff 	mov.w	r2, #4294967295
   1951c:	3601      	adds	r6, #1
   1951e:	9304      	str	r3, [sp, #16]
   19520:	9307      	str	r3, [sp, #28]
   19522:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   19526:	931a      	str	r3, [sp, #104]	; 0x68
   19528:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1952c:	4634      	mov	r4, r6
   1952e:	2205      	movs	r2, #5
   19530:	4856      	ldr	r0, [pc, #344]	; (1968c <_vfiprintf_r+0x23c>)
   19532:	f814 1b01 	ldrb.w	r1, [r4], #1
   19536:	f002 ff7a 	bl	1c42e <memchr>
   1953a:	9b04      	ldr	r3, [sp, #16]
   1953c:	b9c0      	cbnz	r0, 19570 <_vfiprintf_r+0x120>
   1953e:	06da      	lsls	r2, r3, #27
   19540:	bf44      	itt	mi
   19542:	2220      	movmi	r2, #32
   19544:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   19548:	0718      	lsls	r0, r3, #28
   1954a:	bf44      	itt	mi
   1954c:	222b      	movmi	r2, #43	; 0x2b
   1954e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   19552:	7832      	ldrb	r2, [r6, #0]
   19554:	2a2a      	cmp	r2, #42	; 0x2a
   19556:	d013      	beq.n	19580 <_vfiprintf_r+0x130>
   19558:	4634      	mov	r4, r6
   1955a:	9a07      	ldr	r2, [sp, #28]
   1955c:	2000      	movs	r0, #0
   1955e:	260a      	movs	r6, #10
   19560:	4621      	mov	r1, r4
   19562:	f811 3b01 	ldrb.w	r3, [r1], #1
   19566:	3b30      	subs	r3, #48	; 0x30
   19568:	2b09      	cmp	r3, #9
   1956a:	d94b      	bls.n	19604 <_vfiprintf_r+0x1b4>
   1956c:	b970      	cbnz	r0, 1958c <_vfiprintf_r+0x13c>
   1956e:	e014      	b.n	1959a <_vfiprintf_r+0x14a>
   19570:	eba0 0009 	sub.w	r0, r0, r9
   19574:	4626      	mov	r6, r4
   19576:	fa0a f000 	lsl.w	r0, sl, r0
   1957a:	4318      	orrs	r0, r3
   1957c:	9004      	str	r0, [sp, #16]
   1957e:	e7d5      	b.n	1952c <_vfiprintf_r+0xdc>
   19580:	9a03      	ldr	r2, [sp, #12]
   19582:	1d11      	adds	r1, r2, #4
   19584:	6812      	ldr	r2, [r2, #0]
   19586:	2a00      	cmp	r2, #0
   19588:	9103      	str	r1, [sp, #12]
   1958a:	db01      	blt.n	19590 <_vfiprintf_r+0x140>
   1958c:	9207      	str	r2, [sp, #28]
   1958e:	e004      	b.n	1959a <_vfiprintf_r+0x14a>
   19590:	4252      	negs	r2, r2
   19592:	f043 0302 	orr.w	r3, r3, #2
   19596:	9207      	str	r2, [sp, #28]
   19598:	9304      	str	r3, [sp, #16]
   1959a:	7823      	ldrb	r3, [r4, #0]
   1959c:	2b2e      	cmp	r3, #46	; 0x2e
   1959e:	d10c      	bne.n	195ba <_vfiprintf_r+0x16a>
   195a0:	7863      	ldrb	r3, [r4, #1]
   195a2:	2b2a      	cmp	r3, #42	; 0x2a
   195a4:	d133      	bne.n	1960e <_vfiprintf_r+0x1be>
   195a6:	9b03      	ldr	r3, [sp, #12]
   195a8:	3402      	adds	r4, #2
   195aa:	1d1a      	adds	r2, r3, #4
   195ac:	681b      	ldr	r3, [r3, #0]
   195ae:	2b00      	cmp	r3, #0
   195b0:	9203      	str	r2, [sp, #12]
   195b2:	bfb8      	it	lt
   195b4:	f04f 33ff 	movlt.w	r3, #4294967295
   195b8:	9305      	str	r3, [sp, #20]
   195ba:	4e35      	ldr	r6, [pc, #212]	; (19690 <_vfiprintf_r+0x240>)
   195bc:	2203      	movs	r2, #3
   195be:	7821      	ldrb	r1, [r4, #0]
   195c0:	4630      	mov	r0, r6
   195c2:	f002 ff34 	bl	1c42e <memchr>
   195c6:	b138      	cbz	r0, 195d8 <_vfiprintf_r+0x188>
   195c8:	2340      	movs	r3, #64	; 0x40
   195ca:	1b80      	subs	r0, r0, r6
   195cc:	3401      	adds	r4, #1
   195ce:	fa03 f000 	lsl.w	r0, r3, r0
   195d2:	9b04      	ldr	r3, [sp, #16]
   195d4:	4303      	orrs	r3, r0
   195d6:	9304      	str	r3, [sp, #16]
   195d8:	f814 1b01 	ldrb.w	r1, [r4], #1
   195dc:	2206      	movs	r2, #6
   195de:	482d      	ldr	r0, [pc, #180]	; (19694 <_vfiprintf_r+0x244>)
   195e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   195e4:	f002 ff23 	bl	1c42e <memchr>
   195e8:	2800      	cmp	r0, #0
   195ea:	d03f      	beq.n	1966c <_vfiprintf_r+0x21c>
   195ec:	4b2a      	ldr	r3, [pc, #168]	; (19698 <_vfiprintf_r+0x248>)
   195ee:	bb13      	cbnz	r3, 19636 <_vfiprintf_r+0x1e6>
   195f0:	9b03      	ldr	r3, [sp, #12]
   195f2:	3307      	adds	r3, #7
   195f4:	f023 0307 	bic.w	r3, r3, #7
   195f8:	3308      	adds	r3, #8
   195fa:	9303      	str	r3, [sp, #12]
   195fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   195fe:	4443      	add	r3, r8
   19600:	9309      	str	r3, [sp, #36]	; 0x24
   19602:	e76e      	b.n	194e2 <_vfiprintf_r+0x92>
   19604:	fb06 3202 	mla	r2, r6, r2, r3
   19608:	2001      	movs	r0, #1
   1960a:	460c      	mov	r4, r1
   1960c:	e7a8      	b.n	19560 <_vfiprintf_r+0x110>
   1960e:	2300      	movs	r3, #0
   19610:	3401      	adds	r4, #1
   19612:	260a      	movs	r6, #10
   19614:	4619      	mov	r1, r3
   19616:	9305      	str	r3, [sp, #20]
   19618:	4620      	mov	r0, r4
   1961a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1961e:	3a30      	subs	r2, #48	; 0x30
   19620:	2a09      	cmp	r2, #9
   19622:	d903      	bls.n	1962c <_vfiprintf_r+0x1dc>
   19624:	2b00      	cmp	r3, #0
   19626:	d0c8      	beq.n	195ba <_vfiprintf_r+0x16a>
   19628:	9105      	str	r1, [sp, #20]
   1962a:	e7c6      	b.n	195ba <_vfiprintf_r+0x16a>
   1962c:	fb06 2101 	mla	r1, r6, r1, r2
   19630:	2301      	movs	r3, #1
   19632:	4604      	mov	r4, r0
   19634:	e7f0      	b.n	19618 <_vfiprintf_r+0x1c8>
   19636:	ab03      	add	r3, sp, #12
   19638:	462a      	mov	r2, r5
   1963a:	a904      	add	r1, sp, #16
   1963c:	4638      	mov	r0, r7
   1963e:	9300      	str	r3, [sp, #0]
   19640:	4b16      	ldr	r3, [pc, #88]	; (1969c <_vfiprintf_r+0x24c>)
   19642:	f000 f82d 	bl	196a0 <_printf_float>
   19646:	f1b0 3fff 	cmp.w	r0, #4294967295
   1964a:	4680      	mov	r8, r0
   1964c:	d1d6      	bne.n	195fc <_vfiprintf_r+0x1ac>
   1964e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19650:	07d9      	lsls	r1, r3, #31
   19652:	d405      	bmi.n	19660 <_vfiprintf_r+0x210>
   19654:	89ab      	ldrh	r3, [r5, #12]
   19656:	059a      	lsls	r2, r3, #22
   19658:	d402      	bmi.n	19660 <_vfiprintf_r+0x210>
   1965a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1965c:	f003 f94a 	bl	1c8f4 <__retarget_lock_release_recursive>
   19660:	89ab      	ldrh	r3, [r5, #12]
   19662:	065b      	lsls	r3, r3, #25
   19664:	f53f af1a 	bmi.w	1949c <_vfiprintf_r+0x4c>
   19668:	9809      	ldr	r0, [sp, #36]	; 0x24
   1966a:	e719      	b.n	194a0 <_vfiprintf_r+0x50>
   1966c:	ab03      	add	r3, sp, #12
   1966e:	462a      	mov	r2, r5
   19670:	a904      	add	r1, sp, #16
   19672:	4638      	mov	r0, r7
   19674:	9300      	str	r3, [sp, #0]
   19676:	4b09      	ldr	r3, [pc, #36]	; (1969c <_vfiprintf_r+0x24c>)
   19678:	f000 fa3c 	bl	19af4 <_printf_i>
   1967c:	e7e3      	b.n	19646 <_vfiprintf_r+0x1f6>
   1967e:	bf00      	nop
   19680:	0001d928 	.word	0x0001d928
   19684:	0001d948 	.word	0x0001d948
   19688:	0001d908 	.word	0x0001d908
   1968c:	0001dde6 	.word	0x0001dde6
   19690:	0001ddec 	.word	0x0001ddec
   19694:	0001ddf0 	.word	0x0001ddf0
   19698:	000196a1 	.word	0x000196a1
   1969c:	0001c4bf 	.word	0x0001c4bf

000196a0 <_printf_float>:
   196a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196a4:	b08d      	sub	sp, #52	; 0x34
   196a6:	460c      	mov	r4, r1
   196a8:	4616      	mov	r6, r2
   196aa:	461f      	mov	r7, r3
   196ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   196b0:	4605      	mov	r5, r0
   196b2:	f000 fe41 	bl	1a338 <_localeconv_r>
   196b6:	6803      	ldr	r3, [r0, #0]
   196b8:	4618      	mov	r0, r3
   196ba:	9306      	str	r3, [sp, #24]
   196bc:	f7f3 fbdc 	bl	ce78 <strlen>
   196c0:	2300      	movs	r3, #0
   196c2:	9007      	str	r0, [sp, #28]
   196c4:	930a      	str	r3, [sp, #40]	; 0x28
   196c6:	f8d8 3000 	ldr.w	r3, [r8]
   196ca:	f894 a018 	ldrb.w	sl, [r4, #24]
   196ce:	3307      	adds	r3, #7
   196d0:	f8d4 b000 	ldr.w	fp, [r4]
   196d4:	f023 0307 	bic.w	r3, r3, #7
   196d8:	f103 0208 	add.w	r2, r3, #8
   196dc:	f8c8 2000 	str.w	r2, [r8]
   196e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   196e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   196e8:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   196ec:	f04f 32ff 	mov.w	r2, #4294967295
   196f0:	ed8d 7b04 	vstr	d7, [sp, #16]
   196f4:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   196f8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   196fc:	4640      	mov	r0, r8
   196fe:	4ba6      	ldr	r3, [pc, #664]	; (19998 <_printf_float+0x2f8>)
   19700:	4649      	mov	r1, r9
   19702:	f7f3 fb71 	bl	cde8 <__aeabi_dcmpun>
   19706:	bb70      	cbnz	r0, 19766 <_printf_float+0xc6>
   19708:	f04f 32ff 	mov.w	r2, #4294967295
   1970c:	4ba2      	ldr	r3, [pc, #648]	; (19998 <_printf_float+0x2f8>)
   1970e:	4640      	mov	r0, r8
   19710:	4649      	mov	r1, r9
   19712:	f7f3 fb4b 	bl	cdac <__aeabi_dcmple>
   19716:	bb30      	cbnz	r0, 19766 <_printf_float+0xc6>
   19718:	2200      	movs	r2, #0
   1971a:	2300      	movs	r3, #0
   1971c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19720:	f7f3 fb3a 	bl	cd98 <__aeabi_dcmplt>
   19724:	b110      	cbz	r0, 1972c <_printf_float+0x8c>
   19726:	232d      	movs	r3, #45	; 0x2d
   19728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1972c:	4a9b      	ldr	r2, [pc, #620]	; (1999c <_printf_float+0x2fc>)
   1972e:	4b9c      	ldr	r3, [pc, #624]	; (199a0 <_printf_float+0x300>)
   19730:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   19734:	bf94      	ite	ls
   19736:	4690      	movls	r8, r2
   19738:	4698      	movhi	r8, r3
   1973a:	f04f 0900 	mov.w	r9, #0
   1973e:	2303      	movs	r3, #3
   19740:	f02b 0204 	bic.w	r2, fp, #4
   19744:	6123      	str	r3, [r4, #16]
   19746:	6022      	str	r2, [r4, #0]
   19748:	9700      	str	r7, [sp, #0]
   1974a:	4633      	mov	r3, r6
   1974c:	aa0b      	add	r2, sp, #44	; 0x2c
   1974e:	4621      	mov	r1, r4
   19750:	4628      	mov	r0, r5
   19752:	f002 ff56 	bl	1c602 <_printf_common>
   19756:	3001      	adds	r0, #1
   19758:	f040 808c 	bne.w	19874 <_printf_float+0x1d4>
   1975c:	f04f 30ff 	mov.w	r0, #4294967295
   19760:	b00d      	add	sp, #52	; 0x34
   19762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1976a:	4610      	mov	r0, r2
   1976c:	4619      	mov	r1, r3
   1976e:	f7f3 fb3b 	bl	cde8 <__aeabi_dcmpun>
   19772:	b140      	cbz	r0, 19786 <_printf_float+0xe6>
   19774:	9b05      	ldr	r3, [sp, #20]
   19776:	4a8b      	ldr	r2, [pc, #556]	; (199a4 <_printf_float+0x304>)
   19778:	2b00      	cmp	r3, #0
   1977a:	bfbc      	itt	lt
   1977c:	232d      	movlt	r3, #45	; 0x2d
   1977e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   19782:	4b89      	ldr	r3, [pc, #548]	; (199a8 <_printf_float+0x308>)
   19784:	e7d4      	b.n	19730 <_printf_float+0x90>
   19786:	6863      	ldr	r3, [r4, #4]
   19788:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   1978c:	1c5a      	adds	r2, r3, #1
   1978e:	d13e      	bne.n	1980e <_printf_float+0x16e>
   19790:	2306      	movs	r3, #6
   19792:	6063      	str	r3, [r4, #4]
   19794:	2300      	movs	r3, #0
   19796:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   1979a:	6861      	ldr	r1, [r4, #4]
   1979c:	4628      	mov	r0, r5
   1979e:	9303      	str	r3, [sp, #12]
   197a0:	ab0a      	add	r3, sp, #40	; 0x28
   197a2:	6022      	str	r2, [r4, #0]
   197a4:	e9cd a301 	strd	sl, r3, [sp, #4]
   197a8:	ab09      	add	r3, sp, #36	; 0x24
   197aa:	ed9d 0b04 	vldr	d0, [sp, #16]
   197ae:	9300      	str	r3, [sp, #0]
   197b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   197b4:	f002 fe95 	bl	1c4e2 <__cvt>
   197b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   197bc:	4680      	mov	r8, r0
   197be:	9909      	ldr	r1, [sp, #36]	; 0x24
   197c0:	d108      	bne.n	197d4 <_printf_float+0x134>
   197c2:	1cc8      	adds	r0, r1, #3
   197c4:	db02      	blt.n	197cc <_printf_float+0x12c>
   197c6:	6863      	ldr	r3, [r4, #4]
   197c8:	4299      	cmp	r1, r3
   197ca:	dd41      	ble.n	19850 <_printf_float+0x1b0>
   197cc:	f1aa 0a02 	sub.w	sl, sl, #2
   197d0:	fa5f fa8a 	uxtb.w	sl, sl
   197d4:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   197d8:	d820      	bhi.n	1981c <_printf_float+0x17c>
   197da:	3901      	subs	r1, #1
   197dc:	4652      	mov	r2, sl
   197de:	f104 0050 	add.w	r0, r4, #80	; 0x50
   197e2:	9109      	str	r1, [sp, #36]	; 0x24
   197e4:	f002 feda 	bl	1c59c <__exponent>
   197e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   197ea:	4681      	mov	r9, r0
   197ec:	1813      	adds	r3, r2, r0
   197ee:	2a01      	cmp	r2, #1
   197f0:	6123      	str	r3, [r4, #16]
   197f2:	dc02      	bgt.n	197fa <_printf_float+0x15a>
   197f4:	6822      	ldr	r2, [r4, #0]
   197f6:	07d2      	lsls	r2, r2, #31
   197f8:	d501      	bpl.n	197fe <_printf_float+0x15e>
   197fa:	3301      	adds	r3, #1
   197fc:	6123      	str	r3, [r4, #16]
   197fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   19802:	2b00      	cmp	r3, #0
   19804:	d0a0      	beq.n	19748 <_printf_float+0xa8>
   19806:	232d      	movs	r3, #45	; 0x2d
   19808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1980c:	e79c      	b.n	19748 <_printf_float+0xa8>
   1980e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   19812:	d1bf      	bne.n	19794 <_printf_float+0xf4>
   19814:	2b00      	cmp	r3, #0
   19816:	d1bd      	bne.n	19794 <_printf_float+0xf4>
   19818:	2301      	movs	r3, #1
   1981a:	e7ba      	b.n	19792 <_printf_float+0xf2>
   1981c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   19820:	d118      	bne.n	19854 <_printf_float+0x1b4>
   19822:	2900      	cmp	r1, #0
   19824:	6863      	ldr	r3, [r4, #4]
   19826:	dd0b      	ble.n	19840 <_printf_float+0x1a0>
   19828:	6121      	str	r1, [r4, #16]
   1982a:	b913      	cbnz	r3, 19832 <_printf_float+0x192>
   1982c:	6822      	ldr	r2, [r4, #0]
   1982e:	07d0      	lsls	r0, r2, #31
   19830:	d502      	bpl.n	19838 <_printf_float+0x198>
   19832:	3301      	adds	r3, #1
   19834:	440b      	add	r3, r1
   19836:	6123      	str	r3, [r4, #16]
   19838:	65a1      	str	r1, [r4, #88]	; 0x58
   1983a:	f04f 0900 	mov.w	r9, #0
   1983e:	e7de      	b.n	197fe <_printf_float+0x15e>
   19840:	b913      	cbnz	r3, 19848 <_printf_float+0x1a8>
   19842:	6822      	ldr	r2, [r4, #0]
   19844:	07d2      	lsls	r2, r2, #31
   19846:	d501      	bpl.n	1984c <_printf_float+0x1ac>
   19848:	3302      	adds	r3, #2
   1984a:	e7f4      	b.n	19836 <_printf_float+0x196>
   1984c:	2301      	movs	r3, #1
   1984e:	e7f2      	b.n	19836 <_printf_float+0x196>
   19850:	f04f 0a67 	mov.w	sl, #103	; 0x67
   19854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19856:	4299      	cmp	r1, r3
   19858:	db05      	blt.n	19866 <_printf_float+0x1c6>
   1985a:	6823      	ldr	r3, [r4, #0]
   1985c:	6121      	str	r1, [r4, #16]
   1985e:	07d8      	lsls	r0, r3, #31
   19860:	d5ea      	bpl.n	19838 <_printf_float+0x198>
   19862:	1c4b      	adds	r3, r1, #1
   19864:	e7e7      	b.n	19836 <_printf_float+0x196>
   19866:	2900      	cmp	r1, #0
   19868:	bfd4      	ite	le
   1986a:	f1c1 0202 	rsble	r2, r1, #2
   1986e:	2201      	movgt	r2, #1
   19870:	4413      	add	r3, r2
   19872:	e7e0      	b.n	19836 <_printf_float+0x196>
   19874:	6823      	ldr	r3, [r4, #0]
   19876:	055a      	lsls	r2, r3, #21
   19878:	d407      	bmi.n	1988a <_printf_float+0x1ea>
   1987a:	6923      	ldr	r3, [r4, #16]
   1987c:	4642      	mov	r2, r8
   1987e:	4631      	mov	r1, r6
   19880:	4628      	mov	r0, r5
   19882:	47b8      	blx	r7
   19884:	3001      	adds	r0, #1
   19886:	d12b      	bne.n	198e0 <_printf_float+0x240>
   19888:	e768      	b.n	1975c <_printf_float+0xbc>
   1988a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1988e:	f240 80dc 	bls.w	19a4a <_printf_float+0x3aa>
   19892:	2200      	movs	r2, #0
   19894:	2300      	movs	r3, #0
   19896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1989a:	f7f3 fa73 	bl	cd84 <__aeabi_dcmpeq>
   1989e:	2800      	cmp	r0, #0
   198a0:	d033      	beq.n	1990a <_printf_float+0x26a>
   198a2:	2301      	movs	r3, #1
   198a4:	4a41      	ldr	r2, [pc, #260]	; (199ac <_printf_float+0x30c>)
   198a6:	4631      	mov	r1, r6
   198a8:	4628      	mov	r0, r5
   198aa:	47b8      	blx	r7
   198ac:	3001      	adds	r0, #1
   198ae:	f43f af55 	beq.w	1975c <_printf_float+0xbc>
   198b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   198b6:	429a      	cmp	r2, r3
   198b8:	db02      	blt.n	198c0 <_printf_float+0x220>
   198ba:	6823      	ldr	r3, [r4, #0]
   198bc:	07d8      	lsls	r0, r3, #31
   198be:	d50f      	bpl.n	198e0 <_printf_float+0x240>
   198c0:	4631      	mov	r1, r6
   198c2:	4628      	mov	r0, r5
   198c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   198c8:	47b8      	blx	r7
   198ca:	3001      	adds	r0, #1
   198cc:	f43f af46 	beq.w	1975c <_printf_float+0xbc>
   198d0:	f04f 0800 	mov.w	r8, #0
   198d4:	f104 091a 	add.w	r9, r4, #26
   198d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   198da:	3b01      	subs	r3, #1
   198dc:	4543      	cmp	r3, r8
   198de:	dc09      	bgt.n	198f4 <_printf_float+0x254>
   198e0:	6823      	ldr	r3, [r4, #0]
   198e2:	079b      	lsls	r3, r3, #30
   198e4:	f100 8101 	bmi.w	19aea <_printf_float+0x44a>
   198e8:	68e0      	ldr	r0, [r4, #12]
   198ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   198ec:	4298      	cmp	r0, r3
   198ee:	bfb8      	it	lt
   198f0:	4618      	movlt	r0, r3
   198f2:	e735      	b.n	19760 <_printf_float+0xc0>
   198f4:	2301      	movs	r3, #1
   198f6:	464a      	mov	r2, r9
   198f8:	4631      	mov	r1, r6
   198fa:	4628      	mov	r0, r5
   198fc:	47b8      	blx	r7
   198fe:	3001      	adds	r0, #1
   19900:	f43f af2c 	beq.w	1975c <_printf_float+0xbc>
   19904:	f108 0801 	add.w	r8, r8, #1
   19908:	e7e6      	b.n	198d8 <_printf_float+0x238>
   1990a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1990c:	2b00      	cmp	r3, #0
   1990e:	dc2b      	bgt.n	19968 <_printf_float+0x2c8>
   19910:	2301      	movs	r3, #1
   19912:	4a26      	ldr	r2, [pc, #152]	; (199ac <_printf_float+0x30c>)
   19914:	4631      	mov	r1, r6
   19916:	4628      	mov	r0, r5
   19918:	47b8      	blx	r7
   1991a:	3001      	adds	r0, #1
   1991c:	f43f af1e 	beq.w	1975c <_printf_float+0xbc>
   19920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   19924:	4313      	orrs	r3, r2
   19926:	d102      	bne.n	1992e <_printf_float+0x28e>
   19928:	6823      	ldr	r3, [r4, #0]
   1992a:	07d9      	lsls	r1, r3, #31
   1992c:	d5d8      	bpl.n	198e0 <_printf_float+0x240>
   1992e:	4631      	mov	r1, r6
   19930:	4628      	mov	r0, r5
   19932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19936:	47b8      	blx	r7
   19938:	3001      	adds	r0, #1
   1993a:	f43f af0f 	beq.w	1975c <_printf_float+0xbc>
   1993e:	f04f 0900 	mov.w	r9, #0
   19942:	f104 0a1a 	add.w	sl, r4, #26
   19946:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19948:	425b      	negs	r3, r3
   1994a:	454b      	cmp	r3, r9
   1994c:	dc01      	bgt.n	19952 <_printf_float+0x2b2>
   1994e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19950:	e794      	b.n	1987c <_printf_float+0x1dc>
   19952:	2301      	movs	r3, #1
   19954:	4652      	mov	r2, sl
   19956:	4631      	mov	r1, r6
   19958:	4628      	mov	r0, r5
   1995a:	47b8      	blx	r7
   1995c:	3001      	adds	r0, #1
   1995e:	f43f aefd 	beq.w	1975c <_printf_float+0xbc>
   19962:	f109 0901 	add.w	r9, r9, #1
   19966:	e7ee      	b.n	19946 <_printf_float+0x2a6>
   19968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1996a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1996c:	429a      	cmp	r2, r3
   1996e:	bfa8      	it	ge
   19970:	461a      	movge	r2, r3
   19972:	2a00      	cmp	r2, #0
   19974:	4691      	mov	r9, r2
   19976:	dd07      	ble.n	19988 <_printf_float+0x2e8>
   19978:	4613      	mov	r3, r2
   1997a:	4631      	mov	r1, r6
   1997c:	4642      	mov	r2, r8
   1997e:	4628      	mov	r0, r5
   19980:	47b8      	blx	r7
   19982:	3001      	adds	r0, #1
   19984:	f43f aeea 	beq.w	1975c <_printf_float+0xbc>
   19988:	f104 031a 	add.w	r3, r4, #26
   1998c:	f04f 0b00 	mov.w	fp, #0
   19990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   19994:	9304      	str	r3, [sp, #16]
   19996:	e015      	b.n	199c4 <_printf_float+0x324>
   19998:	7fefffff 	.word	0x7fefffff
   1999c:	0001ddf7 	.word	0x0001ddf7
   199a0:	0001ddfb 	.word	0x0001ddfb
   199a4:	0001ddff 	.word	0x0001ddff
   199a8:	0001de03 	.word	0x0001de03
   199ac:	0001dc4a 	.word	0x0001dc4a
   199b0:	2301      	movs	r3, #1
   199b2:	9a04      	ldr	r2, [sp, #16]
   199b4:	4631      	mov	r1, r6
   199b6:	4628      	mov	r0, r5
   199b8:	47b8      	blx	r7
   199ba:	3001      	adds	r0, #1
   199bc:	f43f aece 	beq.w	1975c <_printf_float+0xbc>
   199c0:	f10b 0b01 	add.w	fp, fp, #1
   199c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   199c8:	ebaa 0309 	sub.w	r3, sl, r9
   199cc:	455b      	cmp	r3, fp
   199ce:	dcef      	bgt.n	199b0 <_printf_float+0x310>
   199d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   199d4:	429a      	cmp	r2, r3
   199d6:	db1b      	blt.n	19a10 <_printf_float+0x370>
   199d8:	6823      	ldr	r3, [r4, #0]
   199da:	07da      	lsls	r2, r3, #31
   199dc:	d418      	bmi.n	19a10 <_printf_float+0x370>
   199de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   199e2:	4592      	cmp	sl, r2
   199e4:	db1c      	blt.n	19a20 <_printf_float+0x380>
   199e6:	eba3 090a 	sub.w	r9, r3, sl
   199ea:	f1b9 0f00 	cmp.w	r9, #0
   199ee:	dd08      	ble.n	19a02 <_printf_float+0x362>
   199f0:	464b      	mov	r3, r9
   199f2:	eb08 020a 	add.w	r2, r8, sl
   199f6:	4631      	mov	r1, r6
   199f8:	4628      	mov	r0, r5
   199fa:	47b8      	blx	r7
   199fc:	3001      	adds	r0, #1
   199fe:	f43f aead 	beq.w	1975c <_printf_float+0xbc>
   19a02:	f04f 0800 	mov.w	r8, #0
   19a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   19a0a:	f104 0a1a 	add.w	sl, r4, #26
   19a0e:	e014      	b.n	19a3a <_printf_float+0x39a>
   19a10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19a14:	4631      	mov	r1, r6
   19a16:	4628      	mov	r0, r5
   19a18:	47b8      	blx	r7
   19a1a:	3001      	adds	r0, #1
   19a1c:	d1df      	bne.n	199de <_printf_float+0x33e>
   19a1e:	e69d      	b.n	1975c <_printf_float+0xbc>
   19a20:	eba3 0902 	sub.w	r9, r3, r2
   19a24:	e7e1      	b.n	199ea <_printf_float+0x34a>
   19a26:	2301      	movs	r3, #1
   19a28:	4652      	mov	r2, sl
   19a2a:	4631      	mov	r1, r6
   19a2c:	4628      	mov	r0, r5
   19a2e:	47b8      	blx	r7
   19a30:	3001      	adds	r0, #1
   19a32:	f43f ae93 	beq.w	1975c <_printf_float+0xbc>
   19a36:	f108 0801 	add.w	r8, r8, #1
   19a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   19a3e:	1a9b      	subs	r3, r3, r2
   19a40:	eba3 0309 	sub.w	r3, r3, r9
   19a44:	4543      	cmp	r3, r8
   19a46:	dcee      	bgt.n	19a26 <_printf_float+0x386>
   19a48:	e74a      	b.n	198e0 <_printf_float+0x240>
   19a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19a4c:	2a01      	cmp	r2, #1
   19a4e:	dc01      	bgt.n	19a54 <_printf_float+0x3b4>
   19a50:	07db      	lsls	r3, r3, #31
   19a52:	d537      	bpl.n	19ac4 <_printf_float+0x424>
   19a54:	2301      	movs	r3, #1
   19a56:	4642      	mov	r2, r8
   19a58:	4631      	mov	r1, r6
   19a5a:	4628      	mov	r0, r5
   19a5c:	47b8      	blx	r7
   19a5e:	3001      	adds	r0, #1
   19a60:	f43f ae7c 	beq.w	1975c <_printf_float+0xbc>
   19a64:	4631      	mov	r1, r6
   19a66:	4628      	mov	r0, r5
   19a68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19a6c:	47b8      	blx	r7
   19a6e:	3001      	adds	r0, #1
   19a70:	f43f ae74 	beq.w	1975c <_printf_float+0xbc>
   19a74:	2200      	movs	r2, #0
   19a76:	2300      	movs	r3, #0
   19a78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   19a7c:	f7f3 f982 	bl	cd84 <__aeabi_dcmpeq>
   19a80:	b9d8      	cbnz	r0, 19aba <_printf_float+0x41a>
   19a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19a84:	f108 0201 	add.w	r2, r8, #1
   19a88:	3b01      	subs	r3, #1
   19a8a:	4631      	mov	r1, r6
   19a8c:	4628      	mov	r0, r5
   19a8e:	47b8      	blx	r7
   19a90:	3001      	adds	r0, #1
   19a92:	d10e      	bne.n	19ab2 <_printf_float+0x412>
   19a94:	e662      	b.n	1975c <_printf_float+0xbc>
   19a96:	2301      	movs	r3, #1
   19a98:	4652      	mov	r2, sl
   19a9a:	4631      	mov	r1, r6
   19a9c:	4628      	mov	r0, r5
   19a9e:	47b8      	blx	r7
   19aa0:	3001      	adds	r0, #1
   19aa2:	f43f ae5b 	beq.w	1975c <_printf_float+0xbc>
   19aa6:	f108 0801 	add.w	r8, r8, #1
   19aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19aac:	3b01      	subs	r3, #1
   19aae:	4543      	cmp	r3, r8
   19ab0:	dcf1      	bgt.n	19a96 <_printf_float+0x3f6>
   19ab2:	464b      	mov	r3, r9
   19ab4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   19ab8:	e6e1      	b.n	1987e <_printf_float+0x1de>
   19aba:	f04f 0800 	mov.w	r8, #0
   19abe:	f104 0a1a 	add.w	sl, r4, #26
   19ac2:	e7f2      	b.n	19aaa <_printf_float+0x40a>
   19ac4:	2301      	movs	r3, #1
   19ac6:	4642      	mov	r2, r8
   19ac8:	e7df      	b.n	19a8a <_printf_float+0x3ea>
   19aca:	2301      	movs	r3, #1
   19acc:	464a      	mov	r2, r9
   19ace:	4631      	mov	r1, r6
   19ad0:	4628      	mov	r0, r5
   19ad2:	47b8      	blx	r7
   19ad4:	3001      	adds	r0, #1
   19ad6:	f43f ae41 	beq.w	1975c <_printf_float+0xbc>
   19ada:	f108 0801 	add.w	r8, r8, #1
   19ade:	68e3      	ldr	r3, [r4, #12]
   19ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19ae2:	1a9b      	subs	r3, r3, r2
   19ae4:	4543      	cmp	r3, r8
   19ae6:	dcf0      	bgt.n	19aca <_printf_float+0x42a>
   19ae8:	e6fe      	b.n	198e8 <_printf_float+0x248>
   19aea:	f04f 0800 	mov.w	r8, #0
   19aee:	f104 0919 	add.w	r9, r4, #25
   19af2:	e7f4      	b.n	19ade <_printf_float+0x43e>

00019af4 <_printf_i>:
   19af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19af8:	4606      	mov	r6, r0
   19afa:	460c      	mov	r4, r1
   19afc:	f101 0043 	add.w	r0, r1, #67	; 0x43
   19b00:	7e09      	ldrb	r1, [r1, #24]
   19b02:	b085      	sub	sp, #20
   19b04:	4698      	mov	r8, r3
   19b06:	296e      	cmp	r1, #110	; 0x6e
   19b08:	4617      	mov	r7, r2
   19b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19b0c:	f000 80ba 	beq.w	19c84 <_printf_i+0x190>
   19b10:	d824      	bhi.n	19b5c <_printf_i+0x68>
   19b12:	2963      	cmp	r1, #99	; 0x63
   19b14:	d039      	beq.n	19b8a <_printf_i+0x96>
   19b16:	d80a      	bhi.n	19b2e <_printf_i+0x3a>
   19b18:	2900      	cmp	r1, #0
   19b1a:	f000 80c3 	beq.w	19ca4 <_printf_i+0x1b0>
   19b1e:	2958      	cmp	r1, #88	; 0x58
   19b20:	f000 8091 	beq.w	19c46 <_printf_i+0x152>
   19b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
   19b28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   19b2c:	e035      	b.n	19b9a <_printf_i+0xa6>
   19b2e:	2964      	cmp	r1, #100	; 0x64
   19b30:	d001      	beq.n	19b36 <_printf_i+0x42>
   19b32:	2969      	cmp	r1, #105	; 0x69
   19b34:	d1f6      	bne.n	19b24 <_printf_i+0x30>
   19b36:	6825      	ldr	r5, [r4, #0]
   19b38:	681a      	ldr	r2, [r3, #0]
   19b3a:	f015 0f80 	tst.w	r5, #128	; 0x80
   19b3e:	f102 0104 	add.w	r1, r2, #4
   19b42:	d02c      	beq.n	19b9e <_printf_i+0xaa>
   19b44:	6812      	ldr	r2, [r2, #0]
   19b46:	6019      	str	r1, [r3, #0]
   19b48:	2a00      	cmp	r2, #0
   19b4a:	da03      	bge.n	19b54 <_printf_i+0x60>
   19b4c:	232d      	movs	r3, #45	; 0x2d
   19b4e:	4252      	negs	r2, r2
   19b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   19b54:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 19d14 <_printf_i+0x220>
   19b58:	230a      	movs	r3, #10
   19b5a:	e03f      	b.n	19bdc <_printf_i+0xe8>
   19b5c:	2973      	cmp	r1, #115	; 0x73
   19b5e:	f000 80a5 	beq.w	19cac <_printf_i+0x1b8>
   19b62:	d808      	bhi.n	19b76 <_printf_i+0x82>
   19b64:	296f      	cmp	r1, #111	; 0x6f
   19b66:	d021      	beq.n	19bac <_printf_i+0xb8>
   19b68:	2970      	cmp	r1, #112	; 0x70
   19b6a:	d1db      	bne.n	19b24 <_printf_i+0x30>
   19b6c:	6822      	ldr	r2, [r4, #0]
   19b6e:	f042 0220 	orr.w	r2, r2, #32
   19b72:	6022      	str	r2, [r4, #0]
   19b74:	e003      	b.n	19b7e <_printf_i+0x8a>
   19b76:	2975      	cmp	r1, #117	; 0x75
   19b78:	d018      	beq.n	19bac <_printf_i+0xb8>
   19b7a:	2978      	cmp	r1, #120	; 0x78
   19b7c:	d1d2      	bne.n	19b24 <_printf_i+0x30>
   19b7e:	2278      	movs	r2, #120	; 0x78
   19b80:	f8df c194 	ldr.w	ip, [pc, #404]	; 19d18 <_printf_i+0x224>
   19b84:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   19b88:	e061      	b.n	19c4e <_printf_i+0x15a>
   19b8a:	681a      	ldr	r2, [r3, #0]
   19b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
   19b90:	1d11      	adds	r1, r2, #4
   19b92:	6019      	str	r1, [r3, #0]
   19b94:	6813      	ldr	r3, [r2, #0]
   19b96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   19b9a:	2301      	movs	r3, #1
   19b9c:	e093      	b.n	19cc6 <_printf_i+0x1d2>
   19b9e:	6812      	ldr	r2, [r2, #0]
   19ba0:	f015 0f40 	tst.w	r5, #64	; 0x40
   19ba4:	6019      	str	r1, [r3, #0]
   19ba6:	bf18      	it	ne
   19ba8:	b212      	sxthne	r2, r2
   19baa:	e7cd      	b.n	19b48 <_printf_i+0x54>
   19bac:	f8d4 c000 	ldr.w	ip, [r4]
   19bb0:	681a      	ldr	r2, [r3, #0]
   19bb2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   19bb6:	f102 0504 	add.w	r5, r2, #4
   19bba:	601d      	str	r5, [r3, #0]
   19bbc:	d001      	beq.n	19bc2 <_printf_i+0xce>
   19bbe:	6812      	ldr	r2, [r2, #0]
   19bc0:	e003      	b.n	19bca <_printf_i+0xd6>
   19bc2:	f01c 0f40 	tst.w	ip, #64	; 0x40
   19bc6:	d0fa      	beq.n	19bbe <_printf_i+0xca>
   19bc8:	8812      	ldrh	r2, [r2, #0]
   19bca:	296f      	cmp	r1, #111	; 0x6f
   19bcc:	f8df c144 	ldr.w	ip, [pc, #324]	; 19d14 <_printf_i+0x220>
   19bd0:	bf0c      	ite	eq
   19bd2:	2308      	moveq	r3, #8
   19bd4:	230a      	movne	r3, #10
   19bd6:	2100      	movs	r1, #0
   19bd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   19bdc:	6865      	ldr	r5, [r4, #4]
   19bde:	2d00      	cmp	r5, #0
   19be0:	60a5      	str	r5, [r4, #8]
   19be2:	bfa2      	ittt	ge
   19be4:	6821      	ldrge	r1, [r4, #0]
   19be6:	f021 0104 	bicge.w	r1, r1, #4
   19bea:	6021      	strge	r1, [r4, #0]
   19bec:	b90a      	cbnz	r2, 19bf2 <_printf_i+0xfe>
   19bee:	2d00      	cmp	r5, #0
   19bf0:	d046      	beq.n	19c80 <_printf_i+0x18c>
   19bf2:	4605      	mov	r5, r0
   19bf4:	4293      	cmp	r3, r2
   19bf6:	fbb2 f1f3 	udiv	r1, r2, r3
   19bfa:	fb03 2e11 	mls	lr, r3, r1, r2
   19bfe:	f81c e00e 	ldrb.w	lr, [ip, lr]
   19c02:	f805 ed01 	strb.w	lr, [r5, #-1]!
   19c06:	d939      	bls.n	19c7c <_printf_i+0x188>
   19c08:	2b08      	cmp	r3, #8
   19c0a:	d10b      	bne.n	19c24 <_printf_i+0x130>
   19c0c:	6823      	ldr	r3, [r4, #0]
   19c0e:	07da      	lsls	r2, r3, #31
   19c10:	d508      	bpl.n	19c24 <_printf_i+0x130>
   19c12:	6923      	ldr	r3, [r4, #16]
   19c14:	6862      	ldr	r2, [r4, #4]
   19c16:	429a      	cmp	r2, r3
   19c18:	bfde      	ittt	le
   19c1a:	2330      	movle	r3, #48	; 0x30
   19c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
   19c20:	f105 35ff 	addle.w	r5, r5, #4294967295
   19c24:	1b40      	subs	r0, r0, r5
   19c26:	6120      	str	r0, [r4, #16]
   19c28:	f8cd 8000 	str.w	r8, [sp]
   19c2c:	463b      	mov	r3, r7
   19c2e:	aa03      	add	r2, sp, #12
   19c30:	4621      	mov	r1, r4
   19c32:	4630      	mov	r0, r6
   19c34:	f002 fce5 	bl	1c602 <_printf_common>
   19c38:	3001      	adds	r0, #1
   19c3a:	d149      	bne.n	19cd0 <_printf_i+0x1dc>
   19c3c:	f04f 30ff 	mov.w	r0, #4294967295
   19c40:	b005      	add	sp, #20
   19c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19c46:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 19d14 <_printf_i+0x220>
   19c4a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   19c4e:	681d      	ldr	r5, [r3, #0]
   19c50:	6821      	ldr	r1, [r4, #0]
   19c52:	f855 2b04 	ldr.w	r2, [r5], #4
   19c56:	601d      	str	r5, [r3, #0]
   19c58:	060d      	lsls	r5, r1, #24
   19c5a:	d50b      	bpl.n	19c74 <_printf_i+0x180>
   19c5c:	07cd      	lsls	r5, r1, #31
   19c5e:	bf44      	itt	mi
   19c60:	f041 0120 	orrmi.w	r1, r1, #32
   19c64:	6021      	strmi	r1, [r4, #0]
   19c66:	b91a      	cbnz	r2, 19c70 <_printf_i+0x17c>
   19c68:	6823      	ldr	r3, [r4, #0]
   19c6a:	f023 0320 	bic.w	r3, r3, #32
   19c6e:	6023      	str	r3, [r4, #0]
   19c70:	2310      	movs	r3, #16
   19c72:	e7b0      	b.n	19bd6 <_printf_i+0xe2>
   19c74:	064b      	lsls	r3, r1, #25
   19c76:	bf48      	it	mi
   19c78:	b292      	uxthmi	r2, r2
   19c7a:	e7ef      	b.n	19c5c <_printf_i+0x168>
   19c7c:	460a      	mov	r2, r1
   19c7e:	e7b9      	b.n	19bf4 <_printf_i+0x100>
   19c80:	4605      	mov	r5, r0
   19c82:	e7c1      	b.n	19c08 <_printf_i+0x114>
   19c84:	681a      	ldr	r2, [r3, #0]
   19c86:	f8d4 c000 	ldr.w	ip, [r4]
   19c8a:	1d15      	adds	r5, r2, #4
   19c8c:	6961      	ldr	r1, [r4, #20]
   19c8e:	f01c 0f80 	tst.w	ip, #128	; 0x80
   19c92:	601d      	str	r5, [r3, #0]
   19c94:	6813      	ldr	r3, [r2, #0]
   19c96:	d001      	beq.n	19c9c <_printf_i+0x1a8>
   19c98:	6019      	str	r1, [r3, #0]
   19c9a:	e003      	b.n	19ca4 <_printf_i+0x1b0>
   19c9c:	f01c 0f40 	tst.w	ip, #64	; 0x40
   19ca0:	d0fa      	beq.n	19c98 <_printf_i+0x1a4>
   19ca2:	8019      	strh	r1, [r3, #0]
   19ca4:	2300      	movs	r3, #0
   19ca6:	4605      	mov	r5, r0
   19ca8:	6123      	str	r3, [r4, #16]
   19caa:	e7bd      	b.n	19c28 <_printf_i+0x134>
   19cac:	681a      	ldr	r2, [r3, #0]
   19cae:	1d11      	adds	r1, r2, #4
   19cb0:	6019      	str	r1, [r3, #0]
   19cb2:	2100      	movs	r1, #0
   19cb4:	6815      	ldr	r5, [r2, #0]
   19cb6:	6862      	ldr	r2, [r4, #4]
   19cb8:	4628      	mov	r0, r5
   19cba:	f002 fbb8 	bl	1c42e <memchr>
   19cbe:	b108      	cbz	r0, 19cc4 <_printf_i+0x1d0>
   19cc0:	1b40      	subs	r0, r0, r5
   19cc2:	6060      	str	r0, [r4, #4]
   19cc4:	6863      	ldr	r3, [r4, #4]
   19cc6:	6123      	str	r3, [r4, #16]
   19cc8:	2300      	movs	r3, #0
   19cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   19cce:	e7ab      	b.n	19c28 <_printf_i+0x134>
   19cd0:	6923      	ldr	r3, [r4, #16]
   19cd2:	462a      	mov	r2, r5
   19cd4:	4639      	mov	r1, r7
   19cd6:	4630      	mov	r0, r6
   19cd8:	47c0      	blx	r8
   19cda:	3001      	adds	r0, #1
   19cdc:	d0ae      	beq.n	19c3c <_printf_i+0x148>
   19cde:	6823      	ldr	r3, [r4, #0]
   19ce0:	079b      	lsls	r3, r3, #30
   19ce2:	d413      	bmi.n	19d0c <_printf_i+0x218>
   19ce4:	68e0      	ldr	r0, [r4, #12]
   19ce6:	9b03      	ldr	r3, [sp, #12]
   19ce8:	4298      	cmp	r0, r3
   19cea:	bfb8      	it	lt
   19cec:	4618      	movlt	r0, r3
   19cee:	e7a7      	b.n	19c40 <_printf_i+0x14c>
   19cf0:	2301      	movs	r3, #1
   19cf2:	464a      	mov	r2, r9
   19cf4:	4639      	mov	r1, r7
   19cf6:	4630      	mov	r0, r6
   19cf8:	47c0      	blx	r8
   19cfa:	3001      	adds	r0, #1
   19cfc:	d09e      	beq.n	19c3c <_printf_i+0x148>
   19cfe:	3501      	adds	r5, #1
   19d00:	68e3      	ldr	r3, [r4, #12]
   19d02:	9a03      	ldr	r2, [sp, #12]
   19d04:	1a9b      	subs	r3, r3, r2
   19d06:	42ab      	cmp	r3, r5
   19d08:	dcf2      	bgt.n	19cf0 <_printf_i+0x1fc>
   19d0a:	e7eb      	b.n	19ce4 <_printf_i+0x1f0>
   19d0c:	2500      	movs	r5, #0
   19d0e:	f104 0919 	add.w	r9, r4, #25
   19d12:	e7f5      	b.n	19d00 <_printf_i+0x20c>
   19d14:	0001de07 	.word	0x0001de07
   19d18:	0001de18 	.word	0x0001de18

00019d1c <iprintf>:
   19d1c:	b40f      	push	{r0, r1, r2, r3}
   19d1e:	4b0a      	ldr	r3, [pc, #40]	; (19d48 <iprintf+0x2c>)
   19d20:	b513      	push	{r0, r1, r4, lr}
   19d22:	681c      	ldr	r4, [r3, #0]
   19d24:	b124      	cbz	r4, 19d30 <iprintf+0x14>
   19d26:	69a3      	ldr	r3, [r4, #24]
   19d28:	b913      	cbnz	r3, 19d30 <iprintf+0x14>
   19d2a:	4620      	mov	r0, r4
   19d2c:	f000 fa86 	bl	1a23c <__sinit>
   19d30:	ab05      	add	r3, sp, #20
   19d32:	9a04      	ldr	r2, [sp, #16]
   19d34:	68a1      	ldr	r1, [r4, #8]
   19d36:	4620      	mov	r0, r4
   19d38:	9301      	str	r3, [sp, #4]
   19d3a:	f7ff fb89 	bl	19450 <_vfiprintf_r>
   19d3e:	b002      	add	sp, #8
   19d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19d44:	b004      	add	sp, #16
   19d46:	4770      	bx	lr
   19d48:	20024f78 	.word	0x20024f78

00019d4c <sniprintf>:
   19d4c:	b40c      	push	{r2, r3}
   19d4e:	4b18      	ldr	r3, [pc, #96]	; (19db0 <sniprintf+0x64>)
   19d50:	b530      	push	{r4, r5, lr}
   19d52:	1e0c      	subs	r4, r1, #0
   19d54:	b09d      	sub	sp, #116	; 0x74
   19d56:	681d      	ldr	r5, [r3, #0]
   19d58:	da08      	bge.n	19d6c <sniprintf+0x20>
   19d5a:	238b      	movs	r3, #139	; 0x8b
   19d5c:	f04f 30ff 	mov.w	r0, #4294967295
   19d60:	602b      	str	r3, [r5, #0]
   19d62:	b01d      	add	sp, #116	; 0x74
   19d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   19d68:	b002      	add	sp, #8
   19d6a:	4770      	bx	lr
   19d6c:	f44f 7302 	mov.w	r3, #520	; 0x208
   19d70:	9002      	str	r0, [sp, #8]
   19d72:	9006      	str	r0, [sp, #24]
   19d74:	a902      	add	r1, sp, #8
   19d76:	f8ad 3014 	strh.w	r3, [sp, #20]
   19d7a:	bf14      	ite	ne
   19d7c:	f104 33ff 	addne.w	r3, r4, #4294967295
   19d80:	4623      	moveq	r3, r4
   19d82:	9a20      	ldr	r2, [sp, #128]	; 0x80
   19d84:	4628      	mov	r0, r5
   19d86:	9304      	str	r3, [sp, #16]
   19d88:	9307      	str	r3, [sp, #28]
   19d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19d8e:	f8ad 3016 	strh.w	r3, [sp, #22]
   19d92:	ab21      	add	r3, sp, #132	; 0x84
   19d94:	9301      	str	r3, [sp, #4]
   19d96:	f000 fc11 	bl	1a5bc <_svfiprintf_r>
   19d9a:	1c43      	adds	r3, r0, #1
   19d9c:	bfbc      	itt	lt
   19d9e:	238b      	movlt	r3, #139	; 0x8b
   19da0:	602b      	strlt	r3, [r5, #0]
   19da2:	2c00      	cmp	r4, #0
   19da4:	d0dd      	beq.n	19d62 <sniprintf+0x16>
   19da6:	9b02      	ldr	r3, [sp, #8]
   19da8:	2200      	movs	r2, #0
   19daa:	701a      	strb	r2, [r3, #0]
   19dac:	e7d9      	b.n	19d62 <sniprintf+0x16>
   19dae:	bf00      	nop
   19db0:	20024f78 	.word	0x20024f78

00019db4 <_strtol_l.isra.0>:
   19db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19db8:	4686      	mov	lr, r0
   19dba:	4f39      	ldr	r7, [pc, #228]	; (19ea0 <_strtol_l.isra.0+0xec>)
   19dbc:	4608      	mov	r0, r1
   19dbe:	4605      	mov	r5, r0
   19dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
   19dc4:	5de6      	ldrb	r6, [r4, r7]
   19dc6:	f016 0608 	ands.w	r6, r6, #8
   19dca:	d135      	bne.n	19e38 <_strtol_l.isra.0+0x84>
   19dcc:	2c2d      	cmp	r4, #45	; 0x2d
   19dce:	d135      	bne.n	19e3c <_strtol_l.isra.0+0x88>
   19dd0:	782c      	ldrb	r4, [r5, #0]
   19dd2:	f04f 0801 	mov.w	r8, #1
   19dd6:	1c85      	adds	r5, r0, #2
   19dd8:	2b00      	cmp	r3, #0
   19dda:	d05c      	beq.n	19e96 <_strtol_l.isra.0+0xe2>
   19ddc:	2b10      	cmp	r3, #16
   19dde:	d109      	bne.n	19df4 <_strtol_l.isra.0+0x40>
   19de0:	2c30      	cmp	r4, #48	; 0x30
   19de2:	d107      	bne.n	19df4 <_strtol_l.isra.0+0x40>
   19de4:	7828      	ldrb	r0, [r5, #0]
   19de6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   19dea:	2858      	cmp	r0, #88	; 0x58
   19dec:	d14e      	bne.n	19e8c <_strtol_l.isra.0+0xd8>
   19dee:	786c      	ldrb	r4, [r5, #1]
   19df0:	2310      	movs	r3, #16
   19df2:	3502      	adds	r5, #2
   19df4:	f1b8 0f00 	cmp.w	r8, #0
   19df8:	f04f 0700 	mov.w	r7, #0
   19dfc:	bf14      	ite	ne
   19dfe:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   19e02:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   19e06:	4638      	mov	r0, r7
   19e08:	fbbc f9f3 	udiv	r9, ip, r3
   19e0c:	fb03 ca19 	mls	sl, r3, r9, ip
   19e10:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   19e14:	2e09      	cmp	r6, #9
   19e16:	d817      	bhi.n	19e48 <_strtol_l.isra.0+0x94>
   19e18:	4634      	mov	r4, r6
   19e1a:	42a3      	cmp	r3, r4
   19e1c:	dd23      	ble.n	19e66 <_strtol_l.isra.0+0xb2>
   19e1e:	1c7e      	adds	r6, r7, #1
   19e20:	d007      	beq.n	19e32 <_strtol_l.isra.0+0x7e>
   19e22:	4581      	cmp	r9, r0
   19e24:	d31c      	bcc.n	19e60 <_strtol_l.isra.0+0xac>
   19e26:	d101      	bne.n	19e2c <_strtol_l.isra.0+0x78>
   19e28:	45a2      	cmp	sl, r4
   19e2a:	db19      	blt.n	19e60 <_strtol_l.isra.0+0xac>
   19e2c:	fb00 4003 	mla	r0, r0, r3, r4
   19e30:	2701      	movs	r7, #1
   19e32:	f815 4b01 	ldrb.w	r4, [r5], #1
   19e36:	e7eb      	b.n	19e10 <_strtol_l.isra.0+0x5c>
   19e38:	4628      	mov	r0, r5
   19e3a:	e7c0      	b.n	19dbe <_strtol_l.isra.0+0xa>
   19e3c:	2c2b      	cmp	r4, #43	; 0x2b
   19e3e:	46b0      	mov	r8, r6
   19e40:	bf04      	itt	eq
   19e42:	782c      	ldrbeq	r4, [r5, #0]
   19e44:	1c85      	addeq	r5, r0, #2
   19e46:	e7c7      	b.n	19dd8 <_strtol_l.isra.0+0x24>
   19e48:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   19e4c:	2e19      	cmp	r6, #25
   19e4e:	d801      	bhi.n	19e54 <_strtol_l.isra.0+0xa0>
   19e50:	3c37      	subs	r4, #55	; 0x37
   19e52:	e7e2      	b.n	19e1a <_strtol_l.isra.0+0x66>
   19e54:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   19e58:	2e19      	cmp	r6, #25
   19e5a:	d804      	bhi.n	19e66 <_strtol_l.isra.0+0xb2>
   19e5c:	3c57      	subs	r4, #87	; 0x57
   19e5e:	e7dc      	b.n	19e1a <_strtol_l.isra.0+0x66>
   19e60:	f04f 37ff 	mov.w	r7, #4294967295
   19e64:	e7e5      	b.n	19e32 <_strtol_l.isra.0+0x7e>
   19e66:	1c7b      	adds	r3, r7, #1
   19e68:	d106      	bne.n	19e78 <_strtol_l.isra.0+0xc4>
   19e6a:	2322      	movs	r3, #34	; 0x22
   19e6c:	4660      	mov	r0, ip
   19e6e:	f8ce 3000 	str.w	r3, [lr]
   19e72:	b942      	cbnz	r2, 19e86 <_strtol_l.isra.0+0xd2>
   19e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19e78:	f1b8 0f00 	cmp.w	r8, #0
   19e7c:	d000      	beq.n	19e80 <_strtol_l.isra.0+0xcc>
   19e7e:	4240      	negs	r0, r0
   19e80:	2a00      	cmp	r2, #0
   19e82:	d0f7      	beq.n	19e74 <_strtol_l.isra.0+0xc0>
   19e84:	b107      	cbz	r7, 19e88 <_strtol_l.isra.0+0xd4>
   19e86:	1e69      	subs	r1, r5, #1
   19e88:	6011      	str	r1, [r2, #0]
   19e8a:	e7f3      	b.n	19e74 <_strtol_l.isra.0+0xc0>
   19e8c:	2430      	movs	r4, #48	; 0x30
   19e8e:	2b00      	cmp	r3, #0
   19e90:	d1b0      	bne.n	19df4 <_strtol_l.isra.0+0x40>
   19e92:	2308      	movs	r3, #8
   19e94:	e7ae      	b.n	19df4 <_strtol_l.isra.0+0x40>
   19e96:	2c30      	cmp	r4, #48	; 0x30
   19e98:	d0a4      	beq.n	19de4 <_strtol_l.isra.0+0x30>
   19e9a:	230a      	movs	r3, #10
   19e9c:	e7aa      	b.n	19df4 <_strtol_l.isra.0+0x40>
   19e9e:	bf00      	nop
   19ea0:	0001de2a 	.word	0x0001de2a

00019ea4 <strtol>:
   19ea4:	4613      	mov	r3, r2
   19ea6:	460a      	mov	r2, r1
   19ea8:	4601      	mov	r1, r0
   19eaa:	4802      	ldr	r0, [pc, #8]	; (19eb4 <strtol+0x10>)
   19eac:	6800      	ldr	r0, [r0, #0]
   19eae:	f7ff bf81 	b.w	19db4 <_strtol_l.isra.0>
   19eb2:	bf00      	nop
   19eb4:	20024f78 	.word	0x20024f78

00019eb8 <__swbuf_r>:
   19eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19eba:	460e      	mov	r6, r1
   19ebc:	4614      	mov	r4, r2
   19ebe:	4605      	mov	r5, r0
   19ec0:	b118      	cbz	r0, 19eca <__swbuf_r+0x12>
   19ec2:	6983      	ldr	r3, [r0, #24]
   19ec4:	b90b      	cbnz	r3, 19eca <__swbuf_r+0x12>
   19ec6:	f000 f9b9 	bl	1a23c <__sinit>
   19eca:	4b21      	ldr	r3, [pc, #132]	; (19f50 <__swbuf_r+0x98>)
   19ecc:	429c      	cmp	r4, r3
   19ece:	d12b      	bne.n	19f28 <__swbuf_r+0x70>
   19ed0:	686c      	ldr	r4, [r5, #4]
   19ed2:	69a3      	ldr	r3, [r4, #24]
   19ed4:	60a3      	str	r3, [r4, #8]
   19ed6:	89a3      	ldrh	r3, [r4, #12]
   19ed8:	071a      	lsls	r2, r3, #28
   19eda:	d52f      	bpl.n	19f3c <__swbuf_r+0x84>
   19edc:	6923      	ldr	r3, [r4, #16]
   19ede:	b36b      	cbz	r3, 19f3c <__swbuf_r+0x84>
   19ee0:	6923      	ldr	r3, [r4, #16]
   19ee2:	b2f6      	uxtb	r6, r6
   19ee4:	6820      	ldr	r0, [r4, #0]
   19ee6:	4637      	mov	r7, r6
   19ee8:	1ac0      	subs	r0, r0, r3
   19eea:	6963      	ldr	r3, [r4, #20]
   19eec:	4283      	cmp	r3, r0
   19eee:	dc04      	bgt.n	19efa <__swbuf_r+0x42>
   19ef0:	4621      	mov	r1, r4
   19ef2:	4628      	mov	r0, r5
   19ef4:	f000 f924 	bl	1a140 <_fflush_r>
   19ef8:	bb30      	cbnz	r0, 19f48 <__swbuf_r+0x90>
   19efa:	68a3      	ldr	r3, [r4, #8]
   19efc:	3001      	adds	r0, #1
   19efe:	3b01      	subs	r3, #1
   19f00:	60a3      	str	r3, [r4, #8]
   19f02:	6823      	ldr	r3, [r4, #0]
   19f04:	1c5a      	adds	r2, r3, #1
   19f06:	6022      	str	r2, [r4, #0]
   19f08:	701e      	strb	r6, [r3, #0]
   19f0a:	6963      	ldr	r3, [r4, #20]
   19f0c:	4283      	cmp	r3, r0
   19f0e:	d004      	beq.n	19f1a <__swbuf_r+0x62>
   19f10:	89a3      	ldrh	r3, [r4, #12]
   19f12:	07db      	lsls	r3, r3, #31
   19f14:	d506      	bpl.n	19f24 <__swbuf_r+0x6c>
   19f16:	2e0a      	cmp	r6, #10
   19f18:	d104      	bne.n	19f24 <__swbuf_r+0x6c>
   19f1a:	4621      	mov	r1, r4
   19f1c:	4628      	mov	r0, r5
   19f1e:	f000 f90f 	bl	1a140 <_fflush_r>
   19f22:	b988      	cbnz	r0, 19f48 <__swbuf_r+0x90>
   19f24:	4638      	mov	r0, r7
   19f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f28:	4b0a      	ldr	r3, [pc, #40]	; (19f54 <__swbuf_r+0x9c>)
   19f2a:	429c      	cmp	r4, r3
   19f2c:	d101      	bne.n	19f32 <__swbuf_r+0x7a>
   19f2e:	68ac      	ldr	r4, [r5, #8]
   19f30:	e7cf      	b.n	19ed2 <__swbuf_r+0x1a>
   19f32:	4b09      	ldr	r3, [pc, #36]	; (19f58 <__swbuf_r+0xa0>)
   19f34:	429c      	cmp	r4, r3
   19f36:	bf08      	it	eq
   19f38:	68ec      	ldreq	r4, [r5, #12]
   19f3a:	e7ca      	b.n	19ed2 <__swbuf_r+0x1a>
   19f3c:	4621      	mov	r1, r4
   19f3e:	4628      	mov	r0, r5
   19f40:	f000 f80c 	bl	19f5c <__swsetup_r>
   19f44:	2800      	cmp	r0, #0
   19f46:	d0cb      	beq.n	19ee0 <__swbuf_r+0x28>
   19f48:	f04f 37ff 	mov.w	r7, #4294967295
   19f4c:	e7ea      	b.n	19f24 <__swbuf_r+0x6c>
   19f4e:	bf00      	nop
   19f50:	0001d928 	.word	0x0001d928
   19f54:	0001d948 	.word	0x0001d948
   19f58:	0001d908 	.word	0x0001d908

00019f5c <__swsetup_r>:
   19f5c:	4b32      	ldr	r3, [pc, #200]	; (1a028 <__swsetup_r+0xcc>)
   19f5e:	b570      	push	{r4, r5, r6, lr}
   19f60:	681d      	ldr	r5, [r3, #0]
   19f62:	4606      	mov	r6, r0
   19f64:	460c      	mov	r4, r1
   19f66:	b125      	cbz	r5, 19f72 <__swsetup_r+0x16>
   19f68:	69ab      	ldr	r3, [r5, #24]
   19f6a:	b913      	cbnz	r3, 19f72 <__swsetup_r+0x16>
   19f6c:	4628      	mov	r0, r5
   19f6e:	f000 f965 	bl	1a23c <__sinit>
   19f72:	4b2e      	ldr	r3, [pc, #184]	; (1a02c <__swsetup_r+0xd0>)
   19f74:	429c      	cmp	r4, r3
   19f76:	d10f      	bne.n	19f98 <__swsetup_r+0x3c>
   19f78:	686c      	ldr	r4, [r5, #4]
   19f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19f7e:	b29a      	uxth	r2, r3
   19f80:	0715      	lsls	r5, r2, #28
   19f82:	d42c      	bmi.n	19fde <__swsetup_r+0x82>
   19f84:	06d0      	lsls	r0, r2, #27
   19f86:	d411      	bmi.n	19fac <__swsetup_r+0x50>
   19f88:	2209      	movs	r2, #9
   19f8a:	6032      	str	r2, [r6, #0]
   19f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19f90:	f04f 30ff 	mov.w	r0, #4294967295
   19f94:	81a3      	strh	r3, [r4, #12]
   19f96:	e03e      	b.n	1a016 <__swsetup_r+0xba>
   19f98:	4b25      	ldr	r3, [pc, #148]	; (1a030 <__swsetup_r+0xd4>)
   19f9a:	429c      	cmp	r4, r3
   19f9c:	d101      	bne.n	19fa2 <__swsetup_r+0x46>
   19f9e:	68ac      	ldr	r4, [r5, #8]
   19fa0:	e7eb      	b.n	19f7a <__swsetup_r+0x1e>
   19fa2:	4b24      	ldr	r3, [pc, #144]	; (1a034 <__swsetup_r+0xd8>)
   19fa4:	429c      	cmp	r4, r3
   19fa6:	bf08      	it	eq
   19fa8:	68ec      	ldreq	r4, [r5, #12]
   19faa:	e7e6      	b.n	19f7a <__swsetup_r+0x1e>
   19fac:	0751      	lsls	r1, r2, #29
   19fae:	d512      	bpl.n	19fd6 <__swsetup_r+0x7a>
   19fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   19fb2:	b141      	cbz	r1, 19fc6 <__swsetup_r+0x6a>
   19fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   19fb8:	4299      	cmp	r1, r3
   19fba:	d002      	beq.n	19fc2 <__swsetup_r+0x66>
   19fbc:	4630      	mov	r0, r6
   19fbe:	f000 fa55 	bl	1a46c <_free_r>
   19fc2:	2300      	movs	r3, #0
   19fc4:	6363      	str	r3, [r4, #52]	; 0x34
   19fc6:	89a3      	ldrh	r3, [r4, #12]
   19fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   19fcc:	81a3      	strh	r3, [r4, #12]
   19fce:	2300      	movs	r3, #0
   19fd0:	6063      	str	r3, [r4, #4]
   19fd2:	6923      	ldr	r3, [r4, #16]
   19fd4:	6023      	str	r3, [r4, #0]
   19fd6:	89a3      	ldrh	r3, [r4, #12]
   19fd8:	f043 0308 	orr.w	r3, r3, #8
   19fdc:	81a3      	strh	r3, [r4, #12]
   19fde:	6923      	ldr	r3, [r4, #16]
   19fe0:	b94b      	cbnz	r3, 19ff6 <__swsetup_r+0x9a>
   19fe2:	89a3      	ldrh	r3, [r4, #12]
   19fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
   19fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   19fec:	d003      	beq.n	19ff6 <__swsetup_r+0x9a>
   19fee:	4621      	mov	r1, r4
   19ff0:	4630      	mov	r0, r6
   19ff2:	f000 f9a5 	bl	1a340 <__smakebuf_r>
   19ff6:	89a2      	ldrh	r2, [r4, #12]
   19ff8:	f012 0301 	ands.w	r3, r2, #1
   19ffc:	d00c      	beq.n	1a018 <__swsetup_r+0xbc>
   19ffe:	2300      	movs	r3, #0
   1a000:	60a3      	str	r3, [r4, #8]
   1a002:	6963      	ldr	r3, [r4, #20]
   1a004:	425b      	negs	r3, r3
   1a006:	61a3      	str	r3, [r4, #24]
   1a008:	6923      	ldr	r3, [r4, #16]
   1a00a:	b953      	cbnz	r3, 1a022 <__swsetup_r+0xc6>
   1a00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a010:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   1a014:	d1ba      	bne.n	19f8c <__swsetup_r+0x30>
   1a016:	bd70      	pop	{r4, r5, r6, pc}
   1a018:	0792      	lsls	r2, r2, #30
   1a01a:	bf58      	it	pl
   1a01c:	6963      	ldrpl	r3, [r4, #20]
   1a01e:	60a3      	str	r3, [r4, #8]
   1a020:	e7f2      	b.n	1a008 <__swsetup_r+0xac>
   1a022:	2000      	movs	r0, #0
   1a024:	e7f7      	b.n	1a016 <__swsetup_r+0xba>
   1a026:	bf00      	nop
   1a028:	20024f78 	.word	0x20024f78
   1a02c:	0001d928 	.word	0x0001d928
   1a030:	0001d948 	.word	0x0001d948
   1a034:	0001d908 	.word	0x0001d908

0001a038 <__sflush_r>:
   1a038:	898a      	ldrh	r2, [r1, #12]
   1a03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a03e:	4605      	mov	r5, r0
   1a040:	0710      	lsls	r0, r2, #28
   1a042:	460c      	mov	r4, r1
   1a044:	d458      	bmi.n	1a0f8 <__sflush_r+0xc0>
   1a046:	684b      	ldr	r3, [r1, #4]
   1a048:	2b00      	cmp	r3, #0
   1a04a:	dc05      	bgt.n	1a058 <__sflush_r+0x20>
   1a04c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1a04e:	2b00      	cmp	r3, #0
   1a050:	dc02      	bgt.n	1a058 <__sflush_r+0x20>
   1a052:	2000      	movs	r0, #0
   1a054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1a05a:	2e00      	cmp	r6, #0
   1a05c:	d0f9      	beq.n	1a052 <__sflush_r+0x1a>
   1a05e:	2300      	movs	r3, #0
   1a060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1a064:	682f      	ldr	r7, [r5, #0]
   1a066:	602b      	str	r3, [r5, #0]
   1a068:	d032      	beq.n	1a0d0 <__sflush_r+0x98>
   1a06a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1a06c:	89a3      	ldrh	r3, [r4, #12]
   1a06e:	075a      	lsls	r2, r3, #29
   1a070:	d505      	bpl.n	1a07e <__sflush_r+0x46>
   1a072:	6863      	ldr	r3, [r4, #4]
   1a074:	1ac0      	subs	r0, r0, r3
   1a076:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a078:	b10b      	cbz	r3, 1a07e <__sflush_r+0x46>
   1a07a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1a07c:	1ac0      	subs	r0, r0, r3
   1a07e:	2300      	movs	r3, #0
   1a080:	4602      	mov	r2, r0
   1a082:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1a084:	4628      	mov	r0, r5
   1a086:	6a21      	ldr	r1, [r4, #32]
   1a088:	47b0      	blx	r6
   1a08a:	1c43      	adds	r3, r0, #1
   1a08c:	89a3      	ldrh	r3, [r4, #12]
   1a08e:	d106      	bne.n	1a09e <__sflush_r+0x66>
   1a090:	6829      	ldr	r1, [r5, #0]
   1a092:	291d      	cmp	r1, #29
   1a094:	d82c      	bhi.n	1a0f0 <__sflush_r+0xb8>
   1a096:	4a29      	ldr	r2, [pc, #164]	; (1a13c <__sflush_r+0x104>)
   1a098:	40ca      	lsrs	r2, r1
   1a09a:	07d6      	lsls	r6, r2, #31
   1a09c:	d528      	bpl.n	1a0f0 <__sflush_r+0xb8>
   1a09e:	2200      	movs	r2, #0
   1a0a0:	04d9      	lsls	r1, r3, #19
   1a0a2:	6062      	str	r2, [r4, #4]
   1a0a4:	6922      	ldr	r2, [r4, #16]
   1a0a6:	6022      	str	r2, [r4, #0]
   1a0a8:	d504      	bpl.n	1a0b4 <__sflush_r+0x7c>
   1a0aa:	1c42      	adds	r2, r0, #1
   1a0ac:	d101      	bne.n	1a0b2 <__sflush_r+0x7a>
   1a0ae:	682b      	ldr	r3, [r5, #0]
   1a0b0:	b903      	cbnz	r3, 1a0b4 <__sflush_r+0x7c>
   1a0b2:	6560      	str	r0, [r4, #84]	; 0x54
   1a0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1a0b6:	602f      	str	r7, [r5, #0]
   1a0b8:	2900      	cmp	r1, #0
   1a0ba:	d0ca      	beq.n	1a052 <__sflush_r+0x1a>
   1a0bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1a0c0:	4299      	cmp	r1, r3
   1a0c2:	d002      	beq.n	1a0ca <__sflush_r+0x92>
   1a0c4:	4628      	mov	r0, r5
   1a0c6:	f000 f9d1 	bl	1a46c <_free_r>
   1a0ca:	2000      	movs	r0, #0
   1a0cc:	6360      	str	r0, [r4, #52]	; 0x34
   1a0ce:	e7c1      	b.n	1a054 <__sflush_r+0x1c>
   1a0d0:	6a21      	ldr	r1, [r4, #32]
   1a0d2:	2301      	movs	r3, #1
   1a0d4:	4628      	mov	r0, r5
   1a0d6:	47b0      	blx	r6
   1a0d8:	1c41      	adds	r1, r0, #1
   1a0da:	d1c7      	bne.n	1a06c <__sflush_r+0x34>
   1a0dc:	682b      	ldr	r3, [r5, #0]
   1a0de:	2b00      	cmp	r3, #0
   1a0e0:	d0c4      	beq.n	1a06c <__sflush_r+0x34>
   1a0e2:	2b1d      	cmp	r3, #29
   1a0e4:	d001      	beq.n	1a0ea <__sflush_r+0xb2>
   1a0e6:	2b16      	cmp	r3, #22
   1a0e8:	d101      	bne.n	1a0ee <__sflush_r+0xb6>
   1a0ea:	602f      	str	r7, [r5, #0]
   1a0ec:	e7b1      	b.n	1a052 <__sflush_r+0x1a>
   1a0ee:	89a3      	ldrh	r3, [r4, #12]
   1a0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a0f4:	81a3      	strh	r3, [r4, #12]
   1a0f6:	e7ad      	b.n	1a054 <__sflush_r+0x1c>
   1a0f8:	690f      	ldr	r7, [r1, #16]
   1a0fa:	2f00      	cmp	r7, #0
   1a0fc:	d0a9      	beq.n	1a052 <__sflush_r+0x1a>
   1a0fe:	0793      	lsls	r3, r2, #30
   1a100:	680e      	ldr	r6, [r1, #0]
   1a102:	600f      	str	r7, [r1, #0]
   1a104:	bf0c      	ite	eq
   1a106:	694b      	ldreq	r3, [r1, #20]
   1a108:	2300      	movne	r3, #0
   1a10a:	eba6 0807 	sub.w	r8, r6, r7
   1a10e:	608b      	str	r3, [r1, #8]
   1a110:	f1b8 0f00 	cmp.w	r8, #0
   1a114:	dd9d      	ble.n	1a052 <__sflush_r+0x1a>
   1a116:	4643      	mov	r3, r8
   1a118:	463a      	mov	r2, r7
   1a11a:	6a21      	ldr	r1, [r4, #32]
   1a11c:	4628      	mov	r0, r5
   1a11e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a120:	47b0      	blx	r6
   1a122:	2800      	cmp	r0, #0
   1a124:	dc06      	bgt.n	1a134 <__sflush_r+0xfc>
   1a126:	89a3      	ldrh	r3, [r4, #12]
   1a128:	f04f 30ff 	mov.w	r0, #4294967295
   1a12c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a130:	81a3      	strh	r3, [r4, #12]
   1a132:	e78f      	b.n	1a054 <__sflush_r+0x1c>
   1a134:	4407      	add	r7, r0
   1a136:	eba8 0800 	sub.w	r8, r8, r0
   1a13a:	e7e9      	b.n	1a110 <__sflush_r+0xd8>
   1a13c:	20400001 	.word	0x20400001

0001a140 <_fflush_r>:
   1a140:	b538      	push	{r3, r4, r5, lr}
   1a142:	690b      	ldr	r3, [r1, #16]
   1a144:	4605      	mov	r5, r0
   1a146:	460c      	mov	r4, r1
   1a148:	b913      	cbnz	r3, 1a150 <_fflush_r+0x10>
   1a14a:	2500      	movs	r5, #0
   1a14c:	4628      	mov	r0, r5
   1a14e:	bd38      	pop	{r3, r4, r5, pc}
   1a150:	b118      	cbz	r0, 1a15a <_fflush_r+0x1a>
   1a152:	6983      	ldr	r3, [r0, #24]
   1a154:	b90b      	cbnz	r3, 1a15a <_fflush_r+0x1a>
   1a156:	f000 f871 	bl	1a23c <__sinit>
   1a15a:	4b14      	ldr	r3, [pc, #80]	; (1a1ac <_fflush_r+0x6c>)
   1a15c:	429c      	cmp	r4, r3
   1a15e:	d11b      	bne.n	1a198 <_fflush_r+0x58>
   1a160:	686c      	ldr	r4, [r5, #4]
   1a162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a166:	2b00      	cmp	r3, #0
   1a168:	d0ef      	beq.n	1a14a <_fflush_r+0xa>
   1a16a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a16c:	07d0      	lsls	r0, r2, #31
   1a16e:	d404      	bmi.n	1a17a <_fflush_r+0x3a>
   1a170:	0599      	lsls	r1, r3, #22
   1a172:	d402      	bmi.n	1a17a <_fflush_r+0x3a>
   1a174:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a176:	f002 fbbc 	bl	1c8f2 <__retarget_lock_acquire_recursive>
   1a17a:	4628      	mov	r0, r5
   1a17c:	4621      	mov	r1, r4
   1a17e:	f7ff ff5b 	bl	1a038 <__sflush_r>
   1a182:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a184:	4605      	mov	r5, r0
   1a186:	07da      	lsls	r2, r3, #31
   1a188:	d4e0      	bmi.n	1a14c <_fflush_r+0xc>
   1a18a:	89a3      	ldrh	r3, [r4, #12]
   1a18c:	059b      	lsls	r3, r3, #22
   1a18e:	d4dd      	bmi.n	1a14c <_fflush_r+0xc>
   1a190:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a192:	f002 fbaf 	bl	1c8f4 <__retarget_lock_release_recursive>
   1a196:	e7d9      	b.n	1a14c <_fflush_r+0xc>
   1a198:	4b05      	ldr	r3, [pc, #20]	; (1a1b0 <_fflush_r+0x70>)
   1a19a:	429c      	cmp	r4, r3
   1a19c:	d101      	bne.n	1a1a2 <_fflush_r+0x62>
   1a19e:	68ac      	ldr	r4, [r5, #8]
   1a1a0:	e7df      	b.n	1a162 <_fflush_r+0x22>
   1a1a2:	4b04      	ldr	r3, [pc, #16]	; (1a1b4 <_fflush_r+0x74>)
   1a1a4:	429c      	cmp	r4, r3
   1a1a6:	bf08      	it	eq
   1a1a8:	68ec      	ldreq	r4, [r5, #12]
   1a1aa:	e7da      	b.n	1a162 <_fflush_r+0x22>
   1a1ac:	0001d928 	.word	0x0001d928
   1a1b0:	0001d948 	.word	0x0001d948
   1a1b4:	0001d908 	.word	0x0001d908

0001a1b8 <std>:
   1a1b8:	2300      	movs	r3, #0
   1a1ba:	b510      	push	{r4, lr}
   1a1bc:	4604      	mov	r4, r0
   1a1be:	6083      	str	r3, [r0, #8]
   1a1c0:	8181      	strh	r1, [r0, #12]
   1a1c2:	4619      	mov	r1, r3
   1a1c4:	6643      	str	r3, [r0, #100]	; 0x64
   1a1c6:	81c2      	strh	r2, [r0, #14]
   1a1c8:	2208      	movs	r2, #8
   1a1ca:	6183      	str	r3, [r0, #24]
   1a1cc:	e9c0 3300 	strd	r3, r3, [r0]
   1a1d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1a1d4:	305c      	adds	r0, #92	; 0x5c
   1a1d6:	f002 f953 	bl	1c480 <memset>
   1a1da:	4b05      	ldr	r3, [pc, #20]	; (1a1f0 <std+0x38>)
   1a1dc:	6224      	str	r4, [r4, #32]
   1a1de:	6263      	str	r3, [r4, #36]	; 0x24
   1a1e0:	4b04      	ldr	r3, [pc, #16]	; (1a1f4 <std+0x3c>)
   1a1e2:	62a3      	str	r3, [r4, #40]	; 0x28
   1a1e4:	4b04      	ldr	r3, [pc, #16]	; (1a1f8 <std+0x40>)
   1a1e6:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a1e8:	4b04      	ldr	r3, [pc, #16]	; (1a1fc <std+0x44>)
   1a1ea:	6323      	str	r3, [r4, #48]	; 0x30
   1a1ec:	bd10      	pop	{r4, pc}
   1a1ee:	bf00      	nop
   1a1f0:	0001cffb 	.word	0x0001cffb
   1a1f4:	0001d01d 	.word	0x0001d01d
   1a1f8:	0001d055 	.word	0x0001d055
   1a1fc:	0001d079 	.word	0x0001d079

0001a200 <_cleanup_r>:
   1a200:	4901      	ldr	r1, [pc, #4]	; (1a208 <_cleanup_r+0x8>)
   1a202:	f002 bb57 	b.w	1c8b4 <_fwalk_reent>
   1a206:	bf00      	nop
   1a208:	0001a141 	.word	0x0001a141

0001a20c <__sfp_lock_acquire>:
   1a20c:	4801      	ldr	r0, [pc, #4]	; (1a214 <__sfp_lock_acquire+0x8>)
   1a20e:	f002 bb70 	b.w	1c8f2 <__retarget_lock_acquire_recursive>
   1a212:	bf00      	nop
   1a214:	200218b4 	.word	0x200218b4

0001a218 <__sfp_lock_release>:
   1a218:	4801      	ldr	r0, [pc, #4]	; (1a220 <__sfp_lock_release+0x8>)
   1a21a:	f002 bb6b 	b.w	1c8f4 <__retarget_lock_release_recursive>
   1a21e:	bf00      	nop
   1a220:	200218b4 	.word	0x200218b4

0001a224 <__sinit_lock_acquire>:
   1a224:	4801      	ldr	r0, [pc, #4]	; (1a22c <__sinit_lock_acquire+0x8>)
   1a226:	f002 bb64 	b.w	1c8f2 <__retarget_lock_acquire_recursive>
   1a22a:	bf00      	nop
   1a22c:	200218af 	.word	0x200218af

0001a230 <__sinit_lock_release>:
   1a230:	4801      	ldr	r0, [pc, #4]	; (1a238 <__sinit_lock_release+0x8>)
   1a232:	f002 bb5f 	b.w	1c8f4 <__retarget_lock_release_recursive>
   1a236:	bf00      	nop
   1a238:	200218af 	.word	0x200218af

0001a23c <__sinit>:
   1a23c:	b510      	push	{r4, lr}
   1a23e:	4604      	mov	r4, r0
   1a240:	f7ff fff0 	bl	1a224 <__sinit_lock_acquire>
   1a244:	69a3      	ldr	r3, [r4, #24]
   1a246:	b11b      	cbz	r3, 1a250 <__sinit+0x14>
   1a248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a24c:	f7ff bff0 	b.w	1a230 <__sinit_lock_release>
   1a250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   1a254:	6523      	str	r3, [r4, #80]	; 0x50
   1a256:	4620      	mov	r0, r4
   1a258:	4b12      	ldr	r3, [pc, #72]	; (1a2a4 <__sinit+0x68>)
   1a25a:	4a13      	ldr	r2, [pc, #76]	; (1a2a8 <__sinit+0x6c>)
   1a25c:	681b      	ldr	r3, [r3, #0]
   1a25e:	62a2      	str	r2, [r4, #40]	; 0x28
   1a260:	42a3      	cmp	r3, r4
   1a262:	bf04      	itt	eq
   1a264:	2301      	moveq	r3, #1
   1a266:	61a3      	streq	r3, [r4, #24]
   1a268:	f000 f820 	bl	1a2ac <__sfp>
   1a26c:	6060      	str	r0, [r4, #4]
   1a26e:	4620      	mov	r0, r4
   1a270:	f000 f81c 	bl	1a2ac <__sfp>
   1a274:	60a0      	str	r0, [r4, #8]
   1a276:	4620      	mov	r0, r4
   1a278:	f000 f818 	bl	1a2ac <__sfp>
   1a27c:	2200      	movs	r2, #0
   1a27e:	60e0      	str	r0, [r4, #12]
   1a280:	2104      	movs	r1, #4
   1a282:	6860      	ldr	r0, [r4, #4]
   1a284:	f7ff ff98 	bl	1a1b8 <std>
   1a288:	2201      	movs	r2, #1
   1a28a:	2109      	movs	r1, #9
   1a28c:	68a0      	ldr	r0, [r4, #8]
   1a28e:	f7ff ff93 	bl	1a1b8 <std>
   1a292:	2202      	movs	r2, #2
   1a294:	2112      	movs	r1, #18
   1a296:	68e0      	ldr	r0, [r4, #12]
   1a298:	f7ff ff8e 	bl	1a1b8 <std>
   1a29c:	2301      	movs	r3, #1
   1a29e:	61a3      	str	r3, [r4, #24]
   1a2a0:	e7d2      	b.n	1a248 <__sinit+0xc>
   1a2a2:	bf00      	nop
   1a2a4:	0001d904 	.word	0x0001d904
   1a2a8:	0001a201 	.word	0x0001a201

0001a2ac <__sfp>:
   1a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2ae:	4607      	mov	r7, r0
   1a2b0:	f7ff ffac 	bl	1a20c <__sfp_lock_acquire>
   1a2b4:	4b1e      	ldr	r3, [pc, #120]	; (1a330 <__sfp+0x84>)
   1a2b6:	681e      	ldr	r6, [r3, #0]
   1a2b8:	69b3      	ldr	r3, [r6, #24]
   1a2ba:	b913      	cbnz	r3, 1a2c2 <__sfp+0x16>
   1a2bc:	4630      	mov	r0, r6
   1a2be:	f7ff ffbd 	bl	1a23c <__sinit>
   1a2c2:	3648      	adds	r6, #72	; 0x48
   1a2c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1a2c8:	3b01      	subs	r3, #1
   1a2ca:	d503      	bpl.n	1a2d4 <__sfp+0x28>
   1a2cc:	6833      	ldr	r3, [r6, #0]
   1a2ce:	b30b      	cbz	r3, 1a314 <__sfp+0x68>
   1a2d0:	6836      	ldr	r6, [r6, #0]
   1a2d2:	e7f7      	b.n	1a2c4 <__sfp+0x18>
   1a2d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1a2d8:	b9d5      	cbnz	r5, 1a310 <__sfp+0x64>
   1a2da:	4b16      	ldr	r3, [pc, #88]	; (1a334 <__sfp+0x88>)
   1a2dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a2e0:	6665      	str	r5, [r4, #100]	; 0x64
   1a2e2:	60e3      	str	r3, [r4, #12]
   1a2e4:	f002 fb04 	bl	1c8f0 <__retarget_lock_init_recursive>
   1a2e8:	f7ff ff96 	bl	1a218 <__sfp_lock_release>
   1a2ec:	6025      	str	r5, [r4, #0]
   1a2ee:	61a5      	str	r5, [r4, #24]
   1a2f0:	2208      	movs	r2, #8
   1a2f2:	4629      	mov	r1, r5
   1a2f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1a2f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1a2fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1a300:	f002 f8be 	bl	1c480 <memset>
   1a304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   1a308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1a30c:	4620      	mov	r0, r4
   1a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a310:	3468      	adds	r4, #104	; 0x68
   1a312:	e7d9      	b.n	1a2c8 <__sfp+0x1c>
   1a314:	2104      	movs	r1, #4
   1a316:	4638      	mov	r0, r7
   1a318:	f002 fab6 	bl	1c888 <__sfmoreglue>
   1a31c:	4604      	mov	r4, r0
   1a31e:	6030      	str	r0, [r6, #0]
   1a320:	2800      	cmp	r0, #0
   1a322:	d1d5      	bne.n	1a2d0 <__sfp+0x24>
   1a324:	f7ff ff78 	bl	1a218 <__sfp_lock_release>
   1a328:	230c      	movs	r3, #12
   1a32a:	603b      	str	r3, [r7, #0]
   1a32c:	e7ee      	b.n	1a30c <__sfp+0x60>
   1a32e:	bf00      	nop
   1a330:	0001d904 	.word	0x0001d904
   1a334:	ffff0001 	.word	0xffff0001

0001a338 <_localeconv_r>:
   1a338:	4800      	ldr	r0, [pc, #0]	; (1a33c <_localeconv_r+0x4>)
   1a33a:	4770      	bx	lr
   1a33c:	200250cc 	.word	0x200250cc

0001a340 <__smakebuf_r>:
   1a340:	898b      	ldrh	r3, [r1, #12]
   1a342:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a344:	079d      	lsls	r5, r3, #30
   1a346:	4606      	mov	r6, r0
   1a348:	460c      	mov	r4, r1
   1a34a:	d507      	bpl.n	1a35c <__smakebuf_r+0x1c>
   1a34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1a350:	6023      	str	r3, [r4, #0]
   1a352:	6123      	str	r3, [r4, #16]
   1a354:	2301      	movs	r3, #1
   1a356:	6163      	str	r3, [r4, #20]
   1a358:	b002      	add	sp, #8
   1a35a:	bd70      	pop	{r4, r5, r6, pc}
   1a35c:	ab01      	add	r3, sp, #4
   1a35e:	466a      	mov	r2, sp
   1a360:	f002 fac9 	bl	1c8f6 <__swhatbuf_r>
   1a364:	9900      	ldr	r1, [sp, #0]
   1a366:	4605      	mov	r5, r0
   1a368:	4630      	mov	r0, r6
   1a36a:	f000 f8cd 	bl	1a508 <_malloc_r>
   1a36e:	b948      	cbnz	r0, 1a384 <__smakebuf_r+0x44>
   1a370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a374:	059a      	lsls	r2, r3, #22
   1a376:	d4ef      	bmi.n	1a358 <__smakebuf_r+0x18>
   1a378:	f023 0303 	bic.w	r3, r3, #3
   1a37c:	f043 0302 	orr.w	r3, r3, #2
   1a380:	81a3      	strh	r3, [r4, #12]
   1a382:	e7e3      	b.n	1a34c <__smakebuf_r+0xc>
   1a384:	4b0d      	ldr	r3, [pc, #52]	; (1a3bc <__smakebuf_r+0x7c>)
   1a386:	62b3      	str	r3, [r6, #40]	; 0x28
   1a388:	89a3      	ldrh	r3, [r4, #12]
   1a38a:	6020      	str	r0, [r4, #0]
   1a38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a390:	6120      	str	r0, [r4, #16]
   1a392:	81a3      	strh	r3, [r4, #12]
   1a394:	9b00      	ldr	r3, [sp, #0]
   1a396:	6163      	str	r3, [r4, #20]
   1a398:	9b01      	ldr	r3, [sp, #4]
   1a39a:	b15b      	cbz	r3, 1a3b4 <__smakebuf_r+0x74>
   1a39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1a3a0:	4630      	mov	r0, r6
   1a3a2:	f000 fa61 	bl	1a868 <_isatty_r>
   1a3a6:	b128      	cbz	r0, 1a3b4 <__smakebuf_r+0x74>
   1a3a8:	89a3      	ldrh	r3, [r4, #12]
   1a3aa:	f023 0303 	bic.w	r3, r3, #3
   1a3ae:	f043 0301 	orr.w	r3, r3, #1
   1a3b2:	81a3      	strh	r3, [r4, #12]
   1a3b4:	89a3      	ldrh	r3, [r4, #12]
   1a3b6:	431d      	orrs	r5, r3
   1a3b8:	81a5      	strh	r5, [r4, #12]
   1a3ba:	e7cd      	b.n	1a358 <__smakebuf_r+0x18>
   1a3bc:	0001a201 	.word	0x0001a201

0001a3c0 <malloc>:
   1a3c0:	4b02      	ldr	r3, [pc, #8]	; (1a3cc <malloc+0xc>)
   1a3c2:	4601      	mov	r1, r0
   1a3c4:	6818      	ldr	r0, [r3, #0]
   1a3c6:	f000 b89f 	b.w	1a508 <_malloc_r>
   1a3ca:	bf00      	nop
   1a3cc:	20024f78 	.word	0x20024f78

0001a3d0 <__pow5mult>:
   1a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a3d4:	4615      	mov	r5, r2
   1a3d6:	f012 0203 	ands.w	r2, r2, #3
   1a3da:	4606      	mov	r6, r0
   1a3dc:	460f      	mov	r7, r1
   1a3de:	d007      	beq.n	1a3f0 <__pow5mult+0x20>
   1a3e0:	3a01      	subs	r2, #1
   1a3e2:	4c21      	ldr	r4, [pc, #132]	; (1a468 <__pow5mult+0x98>)
   1a3e4:	2300      	movs	r3, #0
   1a3e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1a3ea:	f002 fb0d 	bl	1ca08 <__multadd>
   1a3ee:	4607      	mov	r7, r0
   1a3f0:	10ad      	asrs	r5, r5, #2
   1a3f2:	d035      	beq.n	1a460 <__pow5mult+0x90>
   1a3f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   1a3f6:	b93c      	cbnz	r4, 1a408 <__pow5mult+0x38>
   1a3f8:	2010      	movs	r0, #16
   1a3fa:	f7ff ffe1 	bl	1a3c0 <malloc>
   1a3fe:	6270      	str	r0, [r6, #36]	; 0x24
   1a400:	6004      	str	r4, [r0, #0]
   1a402:	60c4      	str	r4, [r0, #12]
   1a404:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1a408:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   1a40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a410:	b94c      	cbnz	r4, 1a426 <__pow5mult+0x56>
   1a412:	f240 2171 	movw	r1, #625	; 0x271
   1a416:	4630      	mov	r0, r6
   1a418:	f002 fb83 	bl	1cb22 <__i2b>
   1a41c:	2300      	movs	r3, #0
   1a41e:	4604      	mov	r4, r0
   1a420:	f8c8 0008 	str.w	r0, [r8, #8]
   1a424:	6003      	str	r3, [r0, #0]
   1a426:	f04f 0800 	mov.w	r8, #0
   1a42a:	07eb      	lsls	r3, r5, #31
   1a42c:	d50a      	bpl.n	1a444 <__pow5mult+0x74>
   1a42e:	4639      	mov	r1, r7
   1a430:	4622      	mov	r2, r4
   1a432:	4630      	mov	r0, r6
   1a434:	f002 fb7e 	bl	1cb34 <__multiply>
   1a438:	4681      	mov	r9, r0
   1a43a:	4639      	mov	r1, r7
   1a43c:	4630      	mov	r0, r6
   1a43e:	464f      	mov	r7, r9
   1a440:	f002 facb 	bl	1c9da <_Bfree>
   1a444:	106d      	asrs	r5, r5, #1
   1a446:	d00b      	beq.n	1a460 <__pow5mult+0x90>
   1a448:	6820      	ldr	r0, [r4, #0]
   1a44a:	b938      	cbnz	r0, 1a45c <__pow5mult+0x8c>
   1a44c:	4622      	mov	r2, r4
   1a44e:	4621      	mov	r1, r4
   1a450:	4630      	mov	r0, r6
   1a452:	f002 fb6f 	bl	1cb34 <__multiply>
   1a456:	6020      	str	r0, [r4, #0]
   1a458:	f8c0 8000 	str.w	r8, [r0]
   1a45c:	4604      	mov	r4, r0
   1a45e:	e7e4      	b.n	1a42a <__pow5mult+0x5a>
   1a460:	4638      	mov	r0, r7
   1a462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a466:	bf00      	nop
   1a468:	0001d968 	.word	0x0001d968

0001a46c <_free_r>:
   1a46c:	b538      	push	{r3, r4, r5, lr}
   1a46e:	4605      	mov	r5, r0
   1a470:	2900      	cmp	r1, #0
   1a472:	d045      	beq.n	1a500 <_free_r+0x94>
   1a474:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1a478:	1f0c      	subs	r4, r1, #4
   1a47a:	2b00      	cmp	r3, #0
   1a47c:	bfb8      	it	lt
   1a47e:	18e4      	addlt	r4, r4, r3
   1a480:	f000 fa14 	bl	1a8ac <__malloc_lock>
   1a484:	4a1f      	ldr	r2, [pc, #124]	; (1a504 <_free_r+0x98>)
   1a486:	6813      	ldr	r3, [r2, #0]
   1a488:	4610      	mov	r0, r2
   1a48a:	b933      	cbnz	r3, 1a49a <_free_r+0x2e>
   1a48c:	6063      	str	r3, [r4, #4]
   1a48e:	6014      	str	r4, [r2, #0]
   1a490:	4628      	mov	r0, r5
   1a492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a496:	f000 ba0f 	b.w	1a8b8 <__malloc_unlock>
   1a49a:	42a3      	cmp	r3, r4
   1a49c:	d90c      	bls.n	1a4b8 <_free_r+0x4c>
   1a49e:	6821      	ldr	r1, [r4, #0]
   1a4a0:	1862      	adds	r2, r4, r1
   1a4a2:	4293      	cmp	r3, r2
   1a4a4:	bf02      	ittt	eq
   1a4a6:	681a      	ldreq	r2, [r3, #0]
   1a4a8:	685b      	ldreq	r3, [r3, #4]
   1a4aa:	1852      	addeq	r2, r2, r1
   1a4ac:	6063      	str	r3, [r4, #4]
   1a4ae:	bf08      	it	eq
   1a4b0:	6022      	streq	r2, [r4, #0]
   1a4b2:	6004      	str	r4, [r0, #0]
   1a4b4:	e7ec      	b.n	1a490 <_free_r+0x24>
   1a4b6:	4613      	mov	r3, r2
   1a4b8:	685a      	ldr	r2, [r3, #4]
   1a4ba:	b10a      	cbz	r2, 1a4c0 <_free_r+0x54>
   1a4bc:	42a2      	cmp	r2, r4
   1a4be:	d9fa      	bls.n	1a4b6 <_free_r+0x4a>
   1a4c0:	6819      	ldr	r1, [r3, #0]
   1a4c2:	1858      	adds	r0, r3, r1
   1a4c4:	42a0      	cmp	r0, r4
   1a4c6:	d10b      	bne.n	1a4e0 <_free_r+0x74>
   1a4c8:	6820      	ldr	r0, [r4, #0]
   1a4ca:	4401      	add	r1, r0
   1a4cc:	1858      	adds	r0, r3, r1
   1a4ce:	6019      	str	r1, [r3, #0]
   1a4d0:	4282      	cmp	r2, r0
   1a4d2:	d1dd      	bne.n	1a490 <_free_r+0x24>
   1a4d4:	6810      	ldr	r0, [r2, #0]
   1a4d6:	6852      	ldr	r2, [r2, #4]
   1a4d8:	4401      	add	r1, r0
   1a4da:	605a      	str	r2, [r3, #4]
   1a4dc:	6019      	str	r1, [r3, #0]
   1a4de:	e7d7      	b.n	1a490 <_free_r+0x24>
   1a4e0:	d902      	bls.n	1a4e8 <_free_r+0x7c>
   1a4e2:	230c      	movs	r3, #12
   1a4e4:	602b      	str	r3, [r5, #0]
   1a4e6:	e7d3      	b.n	1a490 <_free_r+0x24>
   1a4e8:	6820      	ldr	r0, [r4, #0]
   1a4ea:	1821      	adds	r1, r4, r0
   1a4ec:	428a      	cmp	r2, r1
   1a4ee:	bf02      	ittt	eq
   1a4f0:	6811      	ldreq	r1, [r2, #0]
   1a4f2:	6852      	ldreq	r2, [r2, #4]
   1a4f4:	1809      	addeq	r1, r1, r0
   1a4f6:	6062      	str	r2, [r4, #4]
   1a4f8:	bf08      	it	eq
   1a4fa:	6021      	streq	r1, [r4, #0]
   1a4fc:	605c      	str	r4, [r3, #4]
   1a4fe:	e7c7      	b.n	1a490 <_free_r+0x24>
   1a500:	bd38      	pop	{r3, r4, r5, pc}
   1a502:	bf00      	nop
   1a504:	200213e4 	.word	0x200213e4

0001a508 <_malloc_r>:
   1a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a50a:	1ccd      	adds	r5, r1, #3
   1a50c:	4606      	mov	r6, r0
   1a50e:	f025 0503 	bic.w	r5, r5, #3
   1a512:	3508      	adds	r5, #8
   1a514:	2d0c      	cmp	r5, #12
   1a516:	bf38      	it	cc
   1a518:	250c      	movcc	r5, #12
   1a51a:	2d00      	cmp	r5, #0
   1a51c:	db01      	blt.n	1a522 <_malloc_r+0x1a>
   1a51e:	42a9      	cmp	r1, r5
   1a520:	d903      	bls.n	1a52a <_malloc_r+0x22>
   1a522:	230c      	movs	r3, #12
   1a524:	6033      	str	r3, [r6, #0]
   1a526:	2000      	movs	r0, #0
   1a528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a52a:	f000 f9bf 	bl	1a8ac <__malloc_lock>
   1a52e:	4921      	ldr	r1, [pc, #132]	; (1a5b4 <_malloc_r+0xac>)
   1a530:	680a      	ldr	r2, [r1, #0]
   1a532:	4614      	mov	r4, r2
   1a534:	b99c      	cbnz	r4, 1a55e <_malloc_r+0x56>
   1a536:	4f20      	ldr	r7, [pc, #128]	; (1a5b8 <_malloc_r+0xb0>)
   1a538:	683b      	ldr	r3, [r7, #0]
   1a53a:	b923      	cbnz	r3, 1a546 <_malloc_r+0x3e>
   1a53c:	4621      	mov	r1, r4
   1a53e:	4630      	mov	r0, r6
   1a540:	f000 f934 	bl	1a7ac <_sbrk_r>
   1a544:	6038      	str	r0, [r7, #0]
   1a546:	4629      	mov	r1, r5
   1a548:	4630      	mov	r0, r6
   1a54a:	f000 f92f 	bl	1a7ac <_sbrk_r>
   1a54e:	1c43      	adds	r3, r0, #1
   1a550:	d123      	bne.n	1a59a <_malloc_r+0x92>
   1a552:	230c      	movs	r3, #12
   1a554:	4630      	mov	r0, r6
   1a556:	6033      	str	r3, [r6, #0]
   1a558:	f000 f9ae 	bl	1a8b8 <__malloc_unlock>
   1a55c:	e7e3      	b.n	1a526 <_malloc_r+0x1e>
   1a55e:	6823      	ldr	r3, [r4, #0]
   1a560:	1b5b      	subs	r3, r3, r5
   1a562:	d417      	bmi.n	1a594 <_malloc_r+0x8c>
   1a564:	2b0b      	cmp	r3, #11
   1a566:	d903      	bls.n	1a570 <_malloc_r+0x68>
   1a568:	6023      	str	r3, [r4, #0]
   1a56a:	441c      	add	r4, r3
   1a56c:	6025      	str	r5, [r4, #0]
   1a56e:	e004      	b.n	1a57a <_malloc_r+0x72>
   1a570:	6863      	ldr	r3, [r4, #4]
   1a572:	42a2      	cmp	r2, r4
   1a574:	bf0c      	ite	eq
   1a576:	600b      	streq	r3, [r1, #0]
   1a578:	6053      	strne	r3, [r2, #4]
   1a57a:	4630      	mov	r0, r6
   1a57c:	f000 f99c 	bl	1a8b8 <__malloc_unlock>
   1a580:	f104 000b 	add.w	r0, r4, #11
   1a584:	1d23      	adds	r3, r4, #4
   1a586:	f020 0007 	bic.w	r0, r0, #7
   1a58a:	1ac2      	subs	r2, r0, r3
   1a58c:	d0cc      	beq.n	1a528 <_malloc_r+0x20>
   1a58e:	1a1b      	subs	r3, r3, r0
   1a590:	50a3      	str	r3, [r4, r2]
   1a592:	e7c9      	b.n	1a528 <_malloc_r+0x20>
   1a594:	4622      	mov	r2, r4
   1a596:	6864      	ldr	r4, [r4, #4]
   1a598:	e7cc      	b.n	1a534 <_malloc_r+0x2c>
   1a59a:	1cc4      	adds	r4, r0, #3
   1a59c:	f024 0403 	bic.w	r4, r4, #3
   1a5a0:	42a0      	cmp	r0, r4
   1a5a2:	d0e3      	beq.n	1a56c <_malloc_r+0x64>
   1a5a4:	1a21      	subs	r1, r4, r0
   1a5a6:	4630      	mov	r0, r6
   1a5a8:	f000 f900 	bl	1a7ac <_sbrk_r>
   1a5ac:	3001      	adds	r0, #1
   1a5ae:	d1dd      	bne.n	1a56c <_malloc_r+0x64>
   1a5b0:	e7cf      	b.n	1a552 <_malloc_r+0x4a>
   1a5b2:	bf00      	nop
   1a5b4:	200213e4 	.word	0x200213e4
   1a5b8:	200213e8 	.word	0x200213e8

0001a5bc <_svfiprintf_r>:
   1a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5c0:	461e      	mov	r6, r3
   1a5c2:	898b      	ldrh	r3, [r1, #12]
   1a5c4:	b09d      	sub	sp, #116	; 0x74
   1a5c6:	4607      	mov	r7, r0
   1a5c8:	061b      	lsls	r3, r3, #24
   1a5ca:	460d      	mov	r5, r1
   1a5cc:	4614      	mov	r4, r2
   1a5ce:	d50e      	bpl.n	1a5ee <_svfiprintf_r+0x32>
   1a5d0:	690b      	ldr	r3, [r1, #16]
   1a5d2:	b963      	cbnz	r3, 1a5ee <_svfiprintf_r+0x32>
   1a5d4:	2140      	movs	r1, #64	; 0x40
   1a5d6:	f7ff ff97 	bl	1a508 <_malloc_r>
   1a5da:	6028      	str	r0, [r5, #0]
   1a5dc:	6128      	str	r0, [r5, #16]
   1a5de:	b920      	cbnz	r0, 1a5ea <_svfiprintf_r+0x2e>
   1a5e0:	230c      	movs	r3, #12
   1a5e2:	603b      	str	r3, [r7, #0]
   1a5e4:	f04f 30ff 	mov.w	r0, #4294967295
   1a5e8:	e0c9      	b.n	1a77e <_svfiprintf_r+0x1c2>
   1a5ea:	2340      	movs	r3, #64	; 0x40
   1a5ec:	616b      	str	r3, [r5, #20]
   1a5ee:	2300      	movs	r3, #0
   1a5f0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 1a798 <_svfiprintf_r+0x1dc>
   1a5f4:	f04f 0a01 	mov.w	sl, #1
   1a5f8:	9603      	str	r6, [sp, #12]
   1a5fa:	9309      	str	r3, [sp, #36]	; 0x24
   1a5fc:	2320      	movs	r3, #32
   1a5fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1a602:	2330      	movs	r3, #48	; 0x30
   1a604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1a608:	4623      	mov	r3, r4
   1a60a:	461e      	mov	r6, r3
   1a60c:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a610:	b10a      	cbz	r2, 1a616 <_svfiprintf_r+0x5a>
   1a612:	2a25      	cmp	r2, #37	; 0x25
   1a614:	d1f9      	bne.n	1a60a <_svfiprintf_r+0x4e>
   1a616:	ebb6 0b04 	subs.w	fp, r6, r4
   1a61a:	d00b      	beq.n	1a634 <_svfiprintf_r+0x78>
   1a61c:	465b      	mov	r3, fp
   1a61e:	4622      	mov	r2, r4
   1a620:	4629      	mov	r1, r5
   1a622:	4638      	mov	r0, r7
   1a624:	f002 fc64 	bl	1cef0 <__ssputs_r>
   1a628:	3001      	adds	r0, #1
   1a62a:	f000 80a3 	beq.w	1a774 <_svfiprintf_r+0x1b8>
   1a62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a630:	445b      	add	r3, fp
   1a632:	9309      	str	r3, [sp, #36]	; 0x24
   1a634:	7833      	ldrb	r3, [r6, #0]
   1a636:	2b00      	cmp	r3, #0
   1a638:	f000 809c 	beq.w	1a774 <_svfiprintf_r+0x1b8>
   1a63c:	2300      	movs	r3, #0
   1a63e:	f04f 32ff 	mov.w	r2, #4294967295
   1a642:	3601      	adds	r6, #1
   1a644:	9304      	str	r3, [sp, #16]
   1a646:	9307      	str	r3, [sp, #28]
   1a648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1a64c:	931a      	str	r3, [sp, #104]	; 0x68
   1a64e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1a652:	4634      	mov	r4, r6
   1a654:	2205      	movs	r2, #5
   1a656:	4850      	ldr	r0, [pc, #320]	; (1a798 <_svfiprintf_r+0x1dc>)
   1a658:	f814 1b01 	ldrb.w	r1, [r4], #1
   1a65c:	f001 fee7 	bl	1c42e <memchr>
   1a660:	9b04      	ldr	r3, [sp, #16]
   1a662:	b9c0      	cbnz	r0, 1a696 <_svfiprintf_r+0xda>
   1a664:	06d9      	lsls	r1, r3, #27
   1a666:	bf44      	itt	mi
   1a668:	2220      	movmi	r2, #32
   1a66a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1a66e:	071a      	lsls	r2, r3, #28
   1a670:	bf44      	itt	mi
   1a672:	222b      	movmi	r2, #43	; 0x2b
   1a674:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1a678:	7832      	ldrb	r2, [r6, #0]
   1a67a:	2a2a      	cmp	r2, #42	; 0x2a
   1a67c:	d013      	beq.n	1a6a6 <_svfiprintf_r+0xea>
   1a67e:	4634      	mov	r4, r6
   1a680:	9a07      	ldr	r2, [sp, #28]
   1a682:	2000      	movs	r0, #0
   1a684:	260a      	movs	r6, #10
   1a686:	4621      	mov	r1, r4
   1a688:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a68c:	3b30      	subs	r3, #48	; 0x30
   1a68e:	2b09      	cmp	r3, #9
   1a690:	d94b      	bls.n	1a72a <_svfiprintf_r+0x16e>
   1a692:	b970      	cbnz	r0, 1a6b2 <_svfiprintf_r+0xf6>
   1a694:	e014      	b.n	1a6c0 <_svfiprintf_r+0x104>
   1a696:	eba0 0009 	sub.w	r0, r0, r9
   1a69a:	4626      	mov	r6, r4
   1a69c:	fa0a f000 	lsl.w	r0, sl, r0
   1a6a0:	4318      	orrs	r0, r3
   1a6a2:	9004      	str	r0, [sp, #16]
   1a6a4:	e7d5      	b.n	1a652 <_svfiprintf_r+0x96>
   1a6a6:	9a03      	ldr	r2, [sp, #12]
   1a6a8:	1d11      	adds	r1, r2, #4
   1a6aa:	6812      	ldr	r2, [r2, #0]
   1a6ac:	2a00      	cmp	r2, #0
   1a6ae:	9103      	str	r1, [sp, #12]
   1a6b0:	db01      	blt.n	1a6b6 <_svfiprintf_r+0xfa>
   1a6b2:	9207      	str	r2, [sp, #28]
   1a6b4:	e004      	b.n	1a6c0 <_svfiprintf_r+0x104>
   1a6b6:	4252      	negs	r2, r2
   1a6b8:	f043 0302 	orr.w	r3, r3, #2
   1a6bc:	9207      	str	r2, [sp, #28]
   1a6be:	9304      	str	r3, [sp, #16]
   1a6c0:	7823      	ldrb	r3, [r4, #0]
   1a6c2:	2b2e      	cmp	r3, #46	; 0x2e
   1a6c4:	d10c      	bne.n	1a6e0 <_svfiprintf_r+0x124>
   1a6c6:	7863      	ldrb	r3, [r4, #1]
   1a6c8:	2b2a      	cmp	r3, #42	; 0x2a
   1a6ca:	d133      	bne.n	1a734 <_svfiprintf_r+0x178>
   1a6cc:	9b03      	ldr	r3, [sp, #12]
   1a6ce:	3402      	adds	r4, #2
   1a6d0:	1d1a      	adds	r2, r3, #4
   1a6d2:	681b      	ldr	r3, [r3, #0]
   1a6d4:	2b00      	cmp	r3, #0
   1a6d6:	9203      	str	r2, [sp, #12]
   1a6d8:	bfb8      	it	lt
   1a6da:	f04f 33ff 	movlt.w	r3, #4294967295
   1a6de:	9305      	str	r3, [sp, #20]
   1a6e0:	4e2e      	ldr	r6, [pc, #184]	; (1a79c <_svfiprintf_r+0x1e0>)
   1a6e2:	2203      	movs	r2, #3
   1a6e4:	7821      	ldrb	r1, [r4, #0]
   1a6e6:	4630      	mov	r0, r6
   1a6e8:	f001 fea1 	bl	1c42e <memchr>
   1a6ec:	b138      	cbz	r0, 1a6fe <_svfiprintf_r+0x142>
   1a6ee:	2340      	movs	r3, #64	; 0x40
   1a6f0:	1b80      	subs	r0, r0, r6
   1a6f2:	3401      	adds	r4, #1
   1a6f4:	fa03 f000 	lsl.w	r0, r3, r0
   1a6f8:	9b04      	ldr	r3, [sp, #16]
   1a6fa:	4303      	orrs	r3, r0
   1a6fc:	9304      	str	r3, [sp, #16]
   1a6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   1a702:	2206      	movs	r2, #6
   1a704:	4826      	ldr	r0, [pc, #152]	; (1a7a0 <_svfiprintf_r+0x1e4>)
   1a706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1a70a:	f001 fe90 	bl	1c42e <memchr>
   1a70e:	2800      	cmp	r0, #0
   1a710:	d038      	beq.n	1a784 <_svfiprintf_r+0x1c8>
   1a712:	4b24      	ldr	r3, [pc, #144]	; (1a7a4 <_svfiprintf_r+0x1e8>)
   1a714:	bb13      	cbnz	r3, 1a75c <_svfiprintf_r+0x1a0>
   1a716:	9b03      	ldr	r3, [sp, #12]
   1a718:	3307      	adds	r3, #7
   1a71a:	f023 0307 	bic.w	r3, r3, #7
   1a71e:	3308      	adds	r3, #8
   1a720:	9303      	str	r3, [sp, #12]
   1a722:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a724:	4443      	add	r3, r8
   1a726:	9309      	str	r3, [sp, #36]	; 0x24
   1a728:	e76e      	b.n	1a608 <_svfiprintf_r+0x4c>
   1a72a:	fb06 3202 	mla	r2, r6, r2, r3
   1a72e:	2001      	movs	r0, #1
   1a730:	460c      	mov	r4, r1
   1a732:	e7a8      	b.n	1a686 <_svfiprintf_r+0xca>
   1a734:	2300      	movs	r3, #0
   1a736:	3401      	adds	r4, #1
   1a738:	260a      	movs	r6, #10
   1a73a:	4619      	mov	r1, r3
   1a73c:	9305      	str	r3, [sp, #20]
   1a73e:	4620      	mov	r0, r4
   1a740:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a744:	3a30      	subs	r2, #48	; 0x30
   1a746:	2a09      	cmp	r2, #9
   1a748:	d903      	bls.n	1a752 <_svfiprintf_r+0x196>
   1a74a:	2b00      	cmp	r3, #0
   1a74c:	d0c8      	beq.n	1a6e0 <_svfiprintf_r+0x124>
   1a74e:	9105      	str	r1, [sp, #20]
   1a750:	e7c6      	b.n	1a6e0 <_svfiprintf_r+0x124>
   1a752:	fb06 2101 	mla	r1, r6, r1, r2
   1a756:	2301      	movs	r3, #1
   1a758:	4604      	mov	r4, r0
   1a75a:	e7f0      	b.n	1a73e <_svfiprintf_r+0x182>
   1a75c:	ab03      	add	r3, sp, #12
   1a75e:	462a      	mov	r2, r5
   1a760:	a904      	add	r1, sp, #16
   1a762:	4638      	mov	r0, r7
   1a764:	9300      	str	r3, [sp, #0]
   1a766:	4b10      	ldr	r3, [pc, #64]	; (1a7a8 <_svfiprintf_r+0x1ec>)
   1a768:	f7fe ff9a 	bl	196a0 <_printf_float>
   1a76c:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a770:	4680      	mov	r8, r0
   1a772:	d1d6      	bne.n	1a722 <_svfiprintf_r+0x166>
   1a774:	89ab      	ldrh	r3, [r5, #12]
   1a776:	065b      	lsls	r3, r3, #25
   1a778:	f53f af34 	bmi.w	1a5e4 <_svfiprintf_r+0x28>
   1a77c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a77e:	b01d      	add	sp, #116	; 0x74
   1a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a784:	ab03      	add	r3, sp, #12
   1a786:	462a      	mov	r2, r5
   1a788:	a904      	add	r1, sp, #16
   1a78a:	4638      	mov	r0, r7
   1a78c:	9300      	str	r3, [sp, #0]
   1a78e:	4b06      	ldr	r3, [pc, #24]	; (1a7a8 <_svfiprintf_r+0x1ec>)
   1a790:	f7ff f9b0 	bl	19af4 <_printf_i>
   1a794:	e7ea      	b.n	1a76c <_svfiprintf_r+0x1b0>
   1a796:	bf00      	nop
   1a798:	0001dde6 	.word	0x0001dde6
   1a79c:	0001ddec 	.word	0x0001ddec
   1a7a0:	0001ddf0 	.word	0x0001ddf0
   1a7a4:	000196a1 	.word	0x000196a1
   1a7a8:	0001cef1 	.word	0x0001cef1

0001a7ac <_sbrk_r>:
   1a7ac:	b538      	push	{r3, r4, r5, lr}
   1a7ae:	2300      	movs	r3, #0
   1a7b0:	4c05      	ldr	r4, [pc, #20]	; (1a7c8 <_sbrk_r+0x1c>)
   1a7b2:	4605      	mov	r5, r0
   1a7b4:	4608      	mov	r0, r1
   1a7b6:	6023      	str	r3, [r4, #0]
   1a7b8:	f7f4 f978 	bl	eaac <_sbrk>
   1a7bc:	1c43      	adds	r3, r0, #1
   1a7be:	d102      	bne.n	1a7c6 <_sbrk_r+0x1a>
   1a7c0:	6823      	ldr	r3, [r4, #0]
   1a7c2:	b103      	cbz	r3, 1a7c6 <_sbrk_r+0x1a>
   1a7c4:	602b      	str	r3, [r5, #0]
   1a7c6:	bd38      	pop	{r3, r4, r5, pc}
   1a7c8:	200218a8 	.word	0x200218a8

0001a7cc <raise>:
   1a7cc:	4b02      	ldr	r3, [pc, #8]	; (1a7d8 <raise+0xc>)
   1a7ce:	4601      	mov	r1, r0
   1a7d0:	6818      	ldr	r0, [r3, #0]
   1a7d2:	f002 bbe8 	b.w	1cfa6 <_raise_r>
   1a7d6:	bf00      	nop
   1a7d8:	20024f78 	.word	0x20024f78

0001a7dc <_kill_r>:
   1a7dc:	b538      	push	{r3, r4, r5, lr}
   1a7de:	2300      	movs	r3, #0
   1a7e0:	4c06      	ldr	r4, [pc, #24]	; (1a7fc <_kill_r+0x20>)
   1a7e2:	4605      	mov	r5, r0
   1a7e4:	4608      	mov	r0, r1
   1a7e6:	4611      	mov	r1, r2
   1a7e8:	6023      	str	r3, [r4, #0]
   1a7ea:	f000 fcca 	bl	1b182 <_kill>
   1a7ee:	1c43      	adds	r3, r0, #1
   1a7f0:	d102      	bne.n	1a7f8 <_kill_r+0x1c>
   1a7f2:	6823      	ldr	r3, [r4, #0]
   1a7f4:	b103      	cbz	r3, 1a7f8 <_kill_r+0x1c>
   1a7f6:	602b      	str	r3, [r5, #0]
   1a7f8:	bd38      	pop	{r3, r4, r5, pc}
   1a7fa:	bf00      	nop
   1a7fc:	200218a8 	.word	0x200218a8

0001a800 <_write_r>:
   1a800:	b538      	push	{r3, r4, r5, lr}
   1a802:	4605      	mov	r5, r0
   1a804:	4c06      	ldr	r4, [pc, #24]	; (1a820 <_write_r+0x20>)
   1a806:	4608      	mov	r0, r1
   1a808:	4611      	mov	r1, r2
   1a80a:	2200      	movs	r2, #0
   1a80c:	6022      	str	r2, [r4, #0]
   1a80e:	461a      	mov	r2, r3
   1a810:	f000 fcac 	bl	1b16c <_write>
   1a814:	1c43      	adds	r3, r0, #1
   1a816:	d102      	bne.n	1a81e <_write_r+0x1e>
   1a818:	6823      	ldr	r3, [r4, #0]
   1a81a:	b103      	cbz	r3, 1a81e <_write_r+0x1e>
   1a81c:	602b      	str	r3, [r5, #0]
   1a81e:	bd38      	pop	{r3, r4, r5, pc}
   1a820:	200218a8 	.word	0x200218a8

0001a824 <_close_r>:
   1a824:	b538      	push	{r3, r4, r5, lr}
   1a826:	2300      	movs	r3, #0
   1a828:	4c05      	ldr	r4, [pc, #20]	; (1a840 <_close_r+0x1c>)
   1a82a:	4605      	mov	r5, r0
   1a82c:	4608      	mov	r0, r1
   1a82e:	6023      	str	r3, [r4, #0]
   1a830:	f000 fca0 	bl	1b174 <_close>
   1a834:	1c43      	adds	r3, r0, #1
   1a836:	d102      	bne.n	1a83e <_close_r+0x1a>
   1a838:	6823      	ldr	r3, [r4, #0]
   1a83a:	b103      	cbz	r3, 1a83e <_close_r+0x1a>
   1a83c:	602b      	str	r3, [r5, #0]
   1a83e:	bd38      	pop	{r3, r4, r5, pc}
   1a840:	200218a8 	.word	0x200218a8

0001a844 <_fstat_r>:
   1a844:	b538      	push	{r3, r4, r5, lr}
   1a846:	2300      	movs	r3, #0
   1a848:	4c06      	ldr	r4, [pc, #24]	; (1a864 <_fstat_r+0x20>)
   1a84a:	4605      	mov	r5, r0
   1a84c:	4608      	mov	r0, r1
   1a84e:	4611      	mov	r1, r2
   1a850:	6023      	str	r3, [r4, #0]
   1a852:	f000 fc9a 	bl	1b18a <_fstat>
   1a856:	1c43      	adds	r3, r0, #1
   1a858:	d102      	bne.n	1a860 <_fstat_r+0x1c>
   1a85a:	6823      	ldr	r3, [r4, #0]
   1a85c:	b103      	cbz	r3, 1a860 <_fstat_r+0x1c>
   1a85e:	602b      	str	r3, [r5, #0]
   1a860:	bd38      	pop	{r3, r4, r5, pc}
   1a862:	bf00      	nop
   1a864:	200218a8 	.word	0x200218a8

0001a868 <_isatty_r>:
   1a868:	b538      	push	{r3, r4, r5, lr}
   1a86a:	2300      	movs	r3, #0
   1a86c:	4c05      	ldr	r4, [pc, #20]	; (1a884 <_isatty_r+0x1c>)
   1a86e:	4605      	mov	r5, r0
   1a870:	4608      	mov	r0, r1
   1a872:	6023      	str	r3, [r4, #0]
   1a874:	f000 fc83 	bl	1b17e <_isatty>
   1a878:	1c43      	adds	r3, r0, #1
   1a87a:	d102      	bne.n	1a882 <_isatty_r+0x1a>
   1a87c:	6823      	ldr	r3, [r4, #0]
   1a87e:	b103      	cbz	r3, 1a882 <_isatty_r+0x1a>
   1a880:	602b      	str	r3, [r5, #0]
   1a882:	bd38      	pop	{r3, r4, r5, pc}
   1a884:	200218a8 	.word	0x200218a8

0001a888 <_lseek_r>:
   1a888:	b538      	push	{r3, r4, r5, lr}
   1a88a:	4605      	mov	r5, r0
   1a88c:	4c06      	ldr	r4, [pc, #24]	; (1a8a8 <_lseek_r+0x20>)
   1a88e:	4608      	mov	r0, r1
   1a890:	4611      	mov	r1, r2
   1a892:	2200      	movs	r2, #0
   1a894:	6022      	str	r2, [r4, #0]
   1a896:	461a      	mov	r2, r3
   1a898:	f000 fc6f 	bl	1b17a <_lseek>
   1a89c:	1c43      	adds	r3, r0, #1
   1a89e:	d102      	bne.n	1a8a6 <_lseek_r+0x1e>
   1a8a0:	6823      	ldr	r3, [r4, #0]
   1a8a2:	b103      	cbz	r3, 1a8a6 <_lseek_r+0x1e>
   1a8a4:	602b      	str	r3, [r5, #0]
   1a8a6:	bd38      	pop	{r3, r4, r5, pc}
   1a8a8:	200218a8 	.word	0x200218a8

0001a8ac <__malloc_lock>:
   1a8ac:	4801      	ldr	r0, [pc, #4]	; (1a8b4 <__malloc_lock+0x8>)
   1a8ae:	f002 b820 	b.w	1c8f2 <__retarget_lock_acquire_recursive>
   1a8b2:	bf00      	nop
   1a8b4:	200218b0 	.word	0x200218b0

0001a8b8 <__malloc_unlock>:
   1a8b8:	4801      	ldr	r0, [pc, #4]	; (1a8c0 <__malloc_unlock+0x8>)
   1a8ba:	f002 b81b 	b.w	1c8f4 <__retarget_lock_release_recursive>
   1a8be:	bf00      	nop
   1a8c0:	200218b0 	.word	0x200218b0

0001a8c4 <_read_r>:
   1a8c4:	b538      	push	{r3, r4, r5, lr}
   1a8c6:	4605      	mov	r5, r0
   1a8c8:	4c06      	ldr	r4, [pc, #24]	; (1a8e4 <_read_r+0x20>)
   1a8ca:	4608      	mov	r0, r1
   1a8cc:	4611      	mov	r1, r2
   1a8ce:	2200      	movs	r2, #0
   1a8d0:	6022      	str	r2, [r4, #0]
   1a8d2:	461a      	mov	r2, r3
   1a8d4:	f000 fc46 	bl	1b164 <_read>
   1a8d8:	1c43      	adds	r3, r0, #1
   1a8da:	d102      	bne.n	1a8e2 <_read_r+0x1e>
   1a8dc:	6823      	ldr	r3, [r4, #0]
   1a8de:	b103      	cbz	r3, 1a8e2 <_read_r+0x1e>
   1a8e0:	602b      	str	r3, [r5, #0]
   1a8e2:	bd38      	pop	{r3, r4, r5, pc}
   1a8e4:	200218a8 	.word	0x200218a8

0001a8e8 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1a8e8:	b570      	push	{r4, r5, r6, lr}
   1a8ea:	250c      	movs	r5, #12
   1a8ec:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1a8ee:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1a8f2:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1a8f4:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1a8f6:	4610      	mov	r0, r2
   1a8f8:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1a8fc:	bfb8      	it	lt
   1a8fe:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1a900:	2a00      	cmp	r2, #0
   1a902:	bfb8      	it	lt
   1a904:	f102 001f 	addlt.w	r0, r2, #31
   1a908:	1140      	asrs	r0, r0, #5
   1a90a:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1a90e:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1a910:	f002 001f 	and.w	r0, r2, #31
   1a914:	bd70      	pop	{r4, r5, r6, pc}

0001a916 <pool_irq_lock.isra.2.part.3>:
   1a916:	f04f 0320 	mov.w	r3, #32
   1a91a:	f3ef 8011 	mrs	r0, BASEPRI
   1a91e:	f383 8811 	msr	BASEPRI, r3
   1a922:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1a926:	4770      	bx	lr

0001a928 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1a928:	07c3      	lsls	r3, r0, #31
   1a92a:	d503      	bpl.n	1a934 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1a92c:	f381 8811 	msr	BASEPRI, r1
   1a930:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1a934:	4770      	bx	lr

0001a936 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1a936:	23ff      	movs	r3, #255	; 0xff
{
   1a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1a93c:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1a93e:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1a940:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1a942:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1a944:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1a948:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1a94a:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1a94c:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1a950:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1a954:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1a956:	4598      	cmp	r8, r3
   1a958:	dc05      	bgt.n	1a966 <z_sys_mem_pool_base_init+0x30>
   1a95a:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1a95c:	4619      	mov	r1, r3
   1a95e:	428f      	cmp	r7, r1
   1a960:	dc20      	bgt.n	1a9a4 <z_sys_mem_pool_base_init+0x6e>
}
   1a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1a966:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1a96a:	fb09 fe03 	mul.w	lr, r9, r3
   1a96e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1a972:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1a974:	eb0a 040e 	add.w	r4, sl, lr
   1a978:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1a97c:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1a980:	d805      	bhi.n	1a98e <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1a982:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1a984:	0892      	lsrs	r2, r2, #2
   1a986:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1a98a:	3301      	adds	r3, #1
   1a98c:	e7e3      	b.n	1a956 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1a98e:	f115 041f 	adds.w	r4, r5, #31
   1a992:	bf48      	it	mi
   1a994:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1a998:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1a99a:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1a99e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1a9a2:	e7ef      	b.n	1a984 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1a9a4:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1a9a6:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1a9a8:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1a9ac:	18ec      	adds	r4, r5, r3
	node->next = list;
   1a9ae:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1a9b2:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1a9b4:	3101      	adds	r1, #1
   1a9b6:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1a9b8:	6895      	ldr	r5, [r2, #8]
   1a9ba:	4433      	add	r3, r6
   1a9bc:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a9be:	6094      	str	r4, [r2, #8]
   1a9c0:	e7cd      	b.n	1a95e <z_sys_mem_pool_base_init+0x28>

0001a9c2 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1a9c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9c6:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1a9c8:	7a84      	ldrb	r4, [r0, #10]
{
   1a9ca:	af00      	add	r7, sp, #0
   1a9cc:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1a9d0:	00a3      	lsls	r3, r4, #2
   1a9d2:	3307      	adds	r3, #7
   1a9d4:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1a9d8:	ebad 0d03 	sub.w	sp, sp, r3
   1a9dc:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1a9de:	4653      	mov	r3, sl
   1a9e0:	6842      	ldr	r2, [r0, #4]
{
   1a9e2:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1a9e4:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1a9e8:	2200      	movs	r2, #0
   1a9ea:	4294      	cmp	r4, r2
   1a9ec:	f102 39ff 	add.w	r9, r2, #4294967295
   1a9f0:	dd09      	ble.n	1aa06 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1a9f2:	b122      	cbz	r2, 1a9fe <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1a9f4:	6818      	ldr	r0, [r3, #0]
   1a9f6:	0880      	lsrs	r0, r0, #2
   1a9f8:	f020 0003 	bic.w	r0, r0, #3
   1a9fc:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1a9fe:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1aa02:	4288      	cmp	r0, r1
   1aa04:	d208      	bcs.n	1aa18 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1aa06:	f1b9 3fff 	cmp.w	r9, #4294967295
   1aa0a:	d107      	bne.n	1aa1c <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1aa0c:	2300      	movs	r3, #0
   1aa0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1aa10:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1aa12:	f06f 000b 	mvn.w	r0, #11
   1aa16:	e02c      	b.n	1aa72 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1aa18:	3201      	adds	r2, #1
   1aa1a:	e7e6      	b.n	1a9ea <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1aa1c:	7c28      	ldrb	r0, [r5, #16]
   1aa1e:	f010 0001 	ands.w	r0, r0, #1
   1aa22:	d001      	beq.n	1aa28 <z_sys_mem_pool_block_alloc+0x66>
   1aa24:	f7ff ff77 	bl	1a916 <pool_irq_lock.isra.2.part.3>
   1aa28:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1aa2a:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1aa2c:	464e      	mov	r6, r9
   1aa2e:	68ea      	ldr	r2, [r5, #12]
   1aa30:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1aa34:	461a      	mov	r2, r3
   1aa36:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1aa3a:	4294      	cmp	r4, r2
   1aa3c:	d11d      	bne.n	1aa7a <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1aa3e:	3e01      	subs	r6, #1
   1aa40:	1c72      	adds	r2, r6, #1
   1aa42:	f1a3 030c 	sub.w	r3, r3, #12
   1aa46:	d1f5      	bne.n	1aa34 <z_sys_mem_pool_block_alloc+0x72>
   1aa48:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1aa4a:	4641      	mov	r1, r8
   1aa4c:	7c28      	ldrb	r0, [r5, #16]
   1aa4e:	f7ff ff6b 	bl	1a928 <pool_irq_unlock.isra.4>
	*data_p = data;
   1aa52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aa54:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1aa56:	2c00      	cmp	r4, #0
   1aa58:	d0db      	beq.n	1aa12 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1aa5a:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1aa5c:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1aa5e:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1aa62:	682b      	ldr	r3, [r5, #0]
   1aa64:	1ae4      	subs	r4, r4, r3
   1aa66:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1aa6a:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1aa6e:	687b      	ldr	r3, [r7, #4]
   1aa70:	601c      	str	r4, [r3, #0]
}
   1aa72:	371c      	adds	r7, #28
   1aa74:	46bd      	mov	sp, r7
   1aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1aa7a:	e9d4 3200 	ldrd	r3, r2, [r4]
   1aa7e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1aa80:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1aa82:	2300      	movs	r3, #0
	node->prev = NULL;
   1aa84:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1aa88:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1aa8a:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1aa8e:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1aa90:	f107 0b14 	add.w	fp, r7, #20
   1aa94:	fb92 f2f1 	sdiv	r2, r2, r1
   1aa98:	465b      	mov	r3, fp
   1aa9a:	4631      	mov	r1, r6
   1aa9c:	4628      	mov	r0, r5
   1aa9e:	f7ff ff23 	bl	1a8e8 <get_bit_ptr>
	*word |= (1<<bit);
   1aaa2:	2201      	movs	r2, #1
   1aaa4:	6979      	ldr	r1, [r7, #20]
   1aaa6:	fa02 f000 	lsl.w	r0, r2, r0
   1aaaa:	680b      	ldr	r3, [r1, #0]
   1aaac:	603a      	str	r2, [r7, #0]
   1aaae:	4303      	orrs	r3, r0
   1aab0:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1aab2:	454e      	cmp	r6, r9
   1aab4:	dac9      	bge.n	1aa4a <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1aab6:	682a      	ldr	r2, [r5, #0]
   1aab8:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1aabc:	1aa2      	subs	r2, r4, r2
   1aabe:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1aac2:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1aac4:	465b      	mov	r3, fp
   1aac6:	0092      	lsls	r2, r2, #2
   1aac8:	4631      	mov	r1, r6
   1aaca:	4628      	mov	r0, r5
   1aacc:	f7ff ff0c 	bl	1a8e8 <get_bit_ptr>
	*word |= (1<<bit);
   1aad0:	697a      	ldr	r2, [r7, #20]
   1aad2:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1aad4:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1aad6:	fa03 f000 	lsl.w	r0, r3, r0
   1aada:	6813      	ldr	r3, [r2, #0]
   1aadc:	4303      	orrs	r3, r0
   1aade:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1aae0:	230c      	movs	r3, #12
   1aae2:	2203      	movs	r2, #3
   1aae4:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1aae8:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1aaec:	f101 0e04 	add.w	lr, r1, #4
   1aaf0:	1823      	adds	r3, r4, r0
   1aaf2:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1aaf4:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1aaf6:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1aafa:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1aafc:	688a      	ldr	r2, [r1, #8]
   1aafe:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1ab00:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1ab02:	608b      	str	r3, [r1, #8]
   1ab04:	3a01      	subs	r2, #1
   1ab06:	4403      	add	r3, r0
   1ab08:	60fa      	str	r2, [r7, #12]
   1ab0a:	d1f3      	bne.n	1aaf4 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1ab0c:	4641      	mov	r1, r8
   1ab0e:	7c28      	ldrb	r0, [r5, #16]
   1ab10:	f7ff ff0a 	bl	1a928 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ab14:	7c2b      	ldrb	r3, [r5, #16]
   1ab16:	07db      	lsls	r3, r3, #31
   1ab18:	d503      	bpl.n	1ab22 <z_sys_mem_pool_block_alloc+0x160>
   1ab1a:	f7ff fefc 	bl	1a916 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1ab1e:	4680      	mov	r8, r0
   1ab20:	e7c7      	b.n	1aab2 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1ab22:	68f8      	ldr	r0, [r7, #12]
   1ab24:	e7fb      	b.n	1ab1e <z_sys_mem_pool_block_alloc+0x15c>

0001ab26 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1ab26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab2a:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1ab2c:	7a83      	ldrb	r3, [r0, #10]
{
   1ab2e:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1ab30:	009b      	lsls	r3, r3, #2
   1ab32:	3307      	adds	r3, #7
   1ab34:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1ab38:	ebad 0d03 	sub.w	sp, sp, r3
   1ab3c:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1ab3e:	6843      	ldr	r3, [r0, #4]
{
   1ab40:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1ab42:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1ab44:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1ab46:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1ab4a:	4281      	cmp	r1, r0
   1ab4c:	d215      	bcs.n	1ab7a <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ab4e:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1ab50:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ab52:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1ab56:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ab58:	d001      	beq.n	1ab5e <z_sys_mem_pool_block_free+0x38>
   1ab5a:	f7ff fedc 	bl	1a916 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1ab5e:	4604      	mov	r4, r0
	while (level >= 0) {
   1ab60:	f1b8 0f00 	cmp.w	r8, #0
   1ab64:	da11      	bge.n	1ab8a <z_sys_mem_pool_block_free+0x64>
	return -1;
   1ab66:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   1ab6a:	4621      	mov	r1, r4
   1ab6c:	7c30      	ldrb	r0, [r6, #16]
   1ab6e:	f7ff fedb 	bl	1a928 <pool_irq_unlock.isra.4>
}
   1ab72:	3714      	adds	r7, #20
   1ab74:	46bd      	mov	sp, r7
   1ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1ab7a:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1ab7c:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1ab7e:	089b      	lsrs	r3, r3, #2
   1ab80:	f023 0303 	bic.w	r3, r3, #3
   1ab84:	f844 3f04 	str.w	r3, [r4, #4]!
   1ab88:	e7df      	b.n	1ab4a <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1ab8a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ab8e:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1ab90:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1ab94:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1ab96:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ab98:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1ab9a:	eb03 090a 	add.w	r9, r3, sl
   1ab9e:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1aba0:	4630      	mov	r0, r6
   1aba2:	f107 030c 	add.w	r3, r7, #12
   1aba6:	f7ff fe9f 	bl	1a8e8 <get_bit_ptr>
	*word &= ~(1<<bit);
   1abaa:	2301      	movs	r3, #1
   1abac:	68fa      	ldr	r2, [r7, #12]
   1abae:	fa03 f000 	lsl.w	r0, r3, r0
   1abb2:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1abb4:	6839      	ldr	r1, [r7, #0]
   1abb6:	ea23 0300 	bic.w	r3, r3, r0
   1abba:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1abbc:	220c      	movs	r2, #12
   1abbe:	68f3      	ldr	r3, [r6, #12]
   1abc0:	fb02 3308 	mla	r3, r2, r8, r3
   1abc4:	1d1a      	adds	r2, r3, #4
   1abc6:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1abca:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1abcc:	4621      	mov	r1, r4
   1abce:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1abd2:	689a      	ldr	r2, [r3, #8]
   1abd4:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1abd8:	f8c3 9008 	str.w	r9, [r3, #8]
   1abdc:	7c30      	ldrb	r0, [r6, #16]
   1abde:	f7ff fea3 	bl	1a928 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1abe2:	7c30      	ldrb	r0, [r6, #16]
   1abe4:	f010 0001 	ands.w	r0, r0, #1
   1abe8:	d001      	beq.n	1abee <z_sys_mem_pool_block_free+0xc8>
   1abea:	f7ff fe94 	bl	1a916 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1abee:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1abf0:	f1b8 0f00 	cmp.w	r8, #0
   1abf4:	d0b9      	beq.n	1ab6a <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1abf6:	f107 030c 	add.w	r3, r7, #12
   1abfa:	462a      	mov	r2, r5
   1abfc:	4641      	mov	r1, r8
   1abfe:	4630      	mov	r0, r6
   1ac00:	f7ff fe72 	bl	1a8e8 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1ac04:	68fb      	ldr	r3, [r7, #12]
   1ac06:	2800      	cmp	r0, #0
   1ac08:	bfb8      	it	lt
   1ac0a:	3003      	addlt	r0, #3
   1ac0c:	681b      	ldr	r3, [r3, #0]
   1ac0e:	f020 0003 	bic.w	r0, r0, #3
   1ac12:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1ac16:	f010 000f 	ands.w	r0, r0, #15
   1ac1a:	d1a6      	bne.n	1ab6a <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1ac1c:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1ac1e:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1ac22:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1ac24:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1ac28:	4353      	muls	r3, r2
   1ac2a:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1ac2c:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1ac2e:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1ac30:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1ac34:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1ac38:	2804      	cmp	r0, #4
   1ac3a:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1ac3e:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1ac42:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1ac46:	f8c1 c004 	str.w	ip, [r1, #4]
   1ac4a:	d1ea      	bne.n	1ac22 <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1ac4c:	2d00      	cmp	r5, #0
   1ac4e:	bfb8      	it	lt
   1ac50:	3503      	addlt	r5, #3
		level = level - 1;
   1ac52:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
   1ac56:	10ad      	asrs	r5, r5, #2
   1ac58:	e782      	b.n	1ab60 <z_sys_mem_pool_block_free+0x3a>

0001ac5a <arch_printk_char_out>:
}
   1ac5a:	2000      	movs	r0, #0
   1ac5c:	4770      	bx	lr

0001ac5e <print_err>:
{
   1ac5e:	b570      	push	{r4, r5, r6, lr}
   1ac60:	460d      	mov	r5, r1
   1ac62:	4604      	mov	r4, r0
	out('E', ctx);
   1ac64:	2045      	movs	r0, #69	; 0x45
   1ac66:	47a0      	blx	r4
	out('R', ctx);
   1ac68:	4629      	mov	r1, r5
   1ac6a:	2052      	movs	r0, #82	; 0x52
   1ac6c:	47a0      	blx	r4
	out('R', ctx);
   1ac6e:	4629      	mov	r1, r5
   1ac70:	4623      	mov	r3, r4
}
   1ac72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1ac76:	2052      	movs	r0, #82	; 0x52
   1ac78:	4718      	bx	r3

0001ac7a <z_vprintk>:
{
   1ac7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1ac7e:	f04f 0800 	mov.w	r8, #0
{
   1ac82:	4606      	mov	r6, r0
   1ac84:	460f      	mov	r7, r1
   1ac86:	461c      	mov	r4, r3
	int min_width = -1;
   1ac88:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   1ac8c:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   1ac8e:	4645      	mov	r5, r8
{
   1ac90:	b08b      	sub	sp, #44	; 0x2c
   1ac92:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   1ac94:	9b02      	ldr	r3, [sp, #8]
   1ac96:	7818      	ldrb	r0, [r3, #0]
   1ac98:	b910      	cbnz	r0, 1aca0 <z_vprintk+0x26>
}
   1ac9a:	b00b      	add	sp, #44	; 0x2c
   1ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   1aca0:	b945      	cbnz	r5, 1acb4 <z_vprintk+0x3a>
			if (*fmt != '%') {
   1aca2:	2825      	cmp	r0, #37	; 0x25
   1aca4:	f000 814b 	beq.w	1af3e <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1aca8:	4639      	mov	r1, r7
   1acaa:	47b0      	blx	r6
		++fmt;
   1acac:	9b02      	ldr	r3, [sp, #8]
   1acae:	3301      	adds	r3, #1
   1acb0:	9302      	str	r3, [sp, #8]
   1acb2:	e7ef      	b.n	1ac94 <z_vprintk+0x1a>
			switch (*fmt) {
   1acb4:	2864      	cmp	r0, #100	; 0x64
   1acb6:	d06d      	beq.n	1ad94 <z_vprintk+0x11a>
   1acb8:	d819      	bhi.n	1acee <z_vprintk+0x74>
   1acba:	2839      	cmp	r0, #57	; 0x39
   1acbc:	d80a      	bhi.n	1acd4 <z_vprintk+0x5a>
   1acbe:	2831      	cmp	r0, #49	; 0x31
   1acc0:	d25f      	bcs.n	1ad82 <z_vprintk+0x108>
   1acc2:	282d      	cmp	r0, #45	; 0x2d
   1acc4:	f000 8141 	beq.w	1af4a <z_vprintk+0x2d0>
   1acc8:	2830      	cmp	r0, #48	; 0x30
   1acca:	d04b      	beq.n	1ad64 <z_vprintk+0xea>
   1accc:	2825      	cmp	r0, #37	; 0x25
   1acce:	d107      	bne.n	1ace0 <z_vprintk+0x66>
				out((int)'%', ctx);
   1acd0:	4639      	mov	r1, r7
   1acd2:	e132      	b.n	1af3a <z_vprintk+0x2c0>
			switch (*fmt) {
   1acd4:	2858      	cmp	r0, #88	; 0x58
   1acd6:	f000 80bb 	beq.w	1ae50 <z_vprintk+0x1d6>
   1acda:	2863      	cmp	r0, #99	; 0x63
   1acdc:	f000 812a 	beq.w	1af34 <z_vprintk+0x2ba>
				out((int)'%', ctx);
   1ace0:	4639      	mov	r1, r7
   1ace2:	2025      	movs	r0, #37	; 0x25
   1ace4:	47b0      	blx	r6
				out((int)*fmt, ctx);
   1ace6:	9b02      	ldr	r3, [sp, #8]
   1ace8:	4639      	mov	r1, r7
   1acea:	7818      	ldrb	r0, [r3, #0]
   1acec:	e125      	b.n	1af3a <z_vprintk+0x2c0>
			switch (*fmt) {
   1acee:	2870      	cmp	r0, #112	; 0x70
   1acf0:	f000 80a4 	beq.w	1ae3c <z_vprintk+0x1c2>
   1acf4:	d811      	bhi.n	1ad1a <z_vprintk+0xa0>
   1acf6:	2869      	cmp	r0, #105	; 0x69
   1acf8:	d04c      	beq.n	1ad94 <z_vprintk+0x11a>
   1acfa:	286c      	cmp	r0, #108	; 0x6c
   1acfc:	d105      	bne.n	1ad0a <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1acfe:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ad02:	d12a      	bne.n	1ad5a <z_vprintk+0xe0>
					length_mod = 'L';
   1ad04:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1ad08:	e7d0      	b.n	1acac <z_vprintk+0x32>
			switch (*fmt) {
   1ad0a:	2868      	cmp	r0, #104	; 0x68
   1ad0c:	d1e8      	bne.n	1ace0 <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   1ad0e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1ad12:	d122      	bne.n	1ad5a <z_vprintk+0xe0>
					length_mod = 'H';
   1ad14:	f04f 0848 	mov.w	r8, #72	; 0x48
   1ad18:	e7c8      	b.n	1acac <z_vprintk+0x32>
			switch (*fmt) {
   1ad1a:	2875      	cmp	r0, #117	; 0x75
   1ad1c:	d072      	beq.n	1ae04 <z_vprintk+0x18a>
   1ad1e:	d818      	bhi.n	1ad52 <z_vprintk+0xd8>
   1ad20:	2873      	cmp	r0, #115	; 0x73
   1ad22:	d1dd      	bne.n	1ace0 <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   1ad24:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1ad28:	46ab      	mov	fp, r5
   1ad2a:	465b      	mov	r3, fp
   1ad2c:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1ad30:	2800      	cmp	r0, #0
   1ad32:	f040 80fc 	bne.w	1af2e <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   1ad36:	f1b9 0f03 	cmp.w	r9, #3
   1ad3a:	f040 810c 	bne.w	1af56 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1ad3e:	1b5d      	subs	r5, r3, r5
   1ad40:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1ad44:	2d00      	cmp	r5, #0
   1ad46:	dd49      	ble.n	1addc <z_vprintk+0x162>
						out(' ', ctx);
   1ad48:	4639      	mov	r1, r7
   1ad4a:	2020      	movs	r0, #32
   1ad4c:	47b0      	blx	r6
   1ad4e:	3d01      	subs	r5, #1
   1ad50:	e7f8      	b.n	1ad44 <z_vprintk+0xca>
			switch (*fmt) {
   1ad52:	2878      	cmp	r0, #120	; 0x78
   1ad54:	d07c      	beq.n	1ae50 <z_vprintk+0x1d6>
   1ad56:	287a      	cmp	r0, #122	; 0x7a
   1ad58:	d1c2      	bne.n	1ace0 <z_vprintk+0x66>
				} else if (length_mod == 0) {
   1ad5a:	f1b8 0f00 	cmp.w	r8, #0
   1ad5e:	d1bf      	bne.n	1ace0 <z_vprintk+0x66>
   1ad60:	4680      	mov	r8, r0
   1ad62:	e7a3      	b.n	1acac <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   1ad64:	f1ba 0f00 	cmp.w	sl, #0
   1ad68:	da0e      	bge.n	1ad88 <z_vprintk+0x10e>
   1ad6a:	f1b9 0f00 	cmp.w	r9, #0
   1ad6e:	f000 80ef 	beq.w	1af50 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1ad72:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1ad76:	f1b9 0f00 	cmp.w	r9, #0
   1ad7a:	bf08      	it	eq
   1ad7c:	f04f 0902 	moveq.w	r9, #2
   1ad80:	e794      	b.n	1acac <z_vprintk+0x32>
				if (min_width < 0) {
   1ad82:	f1ba 0f00 	cmp.w	sl, #0
   1ad86:	dbf4      	blt.n	1ad72 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   1ad88:	230a      	movs	r3, #10
   1ad8a:	fb03 0a0a 	mla	sl, r3, sl, r0
   1ad8e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1ad92:	e7f0      	b.n	1ad76 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   1ad94:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1ad98:	d102      	bne.n	1ada0 <z_vprintk+0x126>
					d = va_arg(ap, int);
   1ad9a:	f854 5b04 	ldr.w	r5, [r4], #4
   1ad9e:	e020      	b.n	1ade2 <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   1ada0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ada4:	d0f9      	beq.n	1ad9a <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   1ada6:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1adaa:	d1f6      	bne.n	1ad9a <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   1adac:	3407      	adds	r4, #7
   1adae:	f024 0407 	bic.w	r4, r4, #7
   1adb2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1adb6:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1adba:	9106      	str	r1, [sp, #24]
   1adbc:	f143 0100 	adc.w	r1, r3, #0
   1adc0:	9107      	str	r1, [sp, #28]
   1adc2:	2100      	movs	r1, #0
   1adc4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1adc8:	f04f 30ff 	mov.w	r0, #4294967295
   1adcc:	4561      	cmp	r1, ip
   1adce:	bf08      	it	eq
   1add0:	4558      	cmpeq	r0, fp
   1add2:	d205      	bcs.n	1ade0 <z_vprintk+0x166>
						print_err(out, ctx);
   1add4:	4639      	mov	r1, r7
   1add6:	4630      	mov	r0, r6
   1add8:	f7ff ff41 	bl	1ac5e <print_err>
			might_format = 0;
   1addc:	2500      	movs	r5, #0
				break;
   1adde:	e765      	b.n	1acac <z_vprintk+0x32>
					d = lld;
   1ade0:	4615      	mov	r5, r2
				if (d < 0) {
   1ade2:	2d00      	cmp	r5, #0
   1ade4:	da05      	bge.n	1adf2 <z_vprintk+0x178>
					out((int)'-', ctx);
   1ade6:	4639      	mov	r1, r7
   1ade8:	202d      	movs	r0, #45	; 0x2d
   1adea:	47b0      	blx	r6
					d = -d;
   1adec:	426d      	negs	r5, r5
					min_width--;
   1adee:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   1adf2:	464b      	mov	r3, r9
   1adf4:	462a      	mov	r2, r5
   1adf6:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1adfa:	4639      	mov	r1, r7
   1adfc:	4630      	mov	r0, r6
   1adfe:	f7f2 ffc1 	bl	dd84 <_printk_dec_ulong>
				break;
   1ae02:	e7eb      	b.n	1addc <z_vprintk+0x162>
				if (length_mod == 'z') {
   1ae04:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1ae08:	d102      	bne.n	1ae10 <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   1ae0a:	f854 2b04 	ldr.w	r2, [r4], #4
   1ae0e:	e011      	b.n	1ae34 <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   1ae10:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ae14:	d0f9      	beq.n	1ae0a <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   1ae16:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1ae1a:	d1f6      	bne.n	1ae0a <z_vprintk+0x190>
					if (llu > ~0UL) {
   1ae1c:	2100      	movs	r1, #0
   1ae1e:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   1ae22:	3407      	adds	r4, #7
   1ae24:	f024 0407 	bic.w	r4, r4, #7
   1ae28:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1ae2c:	4299      	cmp	r1, r3
   1ae2e:	bf08      	it	eq
   1ae30:	4290      	cmpeq	r0, r2
   1ae32:	d3cf      	bcc.n	1add4 <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   1ae34:	f8cd a000 	str.w	sl, [sp]
   1ae38:	464b      	mov	r3, r9
   1ae3a:	e7de      	b.n	1adfa <z_vprintk+0x180>
				out('0', ctx);
   1ae3c:	4639      	mov	r1, r7
   1ae3e:	2030      	movs	r0, #48	; 0x30
   1ae40:	47b0      	blx	r6
				out('x', ctx);
   1ae42:	4639      	mov	r1, r7
   1ae44:	2078      	movs	r0, #120	; 0x78
   1ae46:	47b0      	blx	r6
					min_width = 8;
   1ae48:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1ae4c:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1ae50:	9b02      	ldr	r3, [sp, #8]
   1ae52:	781b      	ldrb	r3, [r3, #0]
   1ae54:	2b70      	cmp	r3, #112	; 0x70
   1ae56:	d104      	bne.n	1ae62 <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   1ae58:	f854 3b04 	ldr.w	r3, [r4], #4
   1ae5c:	9304      	str	r3, [sp, #16]
   1ae5e:	2300      	movs	r3, #0
   1ae60:	e00d      	b.n	1ae7e <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   1ae62:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ae66:	d0f7      	beq.n	1ae58 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   1ae68:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1ae6c:	d1f4      	bne.n	1ae58 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   1ae6e:	3407      	adds	r4, #7
   1ae70:	f024 0307 	bic.w	r3, r4, #7
   1ae74:	461c      	mov	r4, r3
   1ae76:	f854 2b08 	ldr.w	r2, [r4], #8
   1ae7a:	685b      	ldr	r3, [r3, #4]
   1ae7c:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1ae7e:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1ae80:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1ae82:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1ae86:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1ae88:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1ae8a:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1ae8e:	9804      	ldr	r0, [sp, #16]
   1ae90:	f1cb 0c20 	rsb	ip, fp, #32
   1ae94:	f1ab 0120 	sub.w	r1, fp, #32
   1ae98:	fa20 f00b 	lsr.w	r0, r0, fp
   1ae9c:	fa03 fc0c 	lsl.w	ip, r3, ip
   1aea0:	ea40 000c 	orr.w	r0, r0, ip
   1aea4:	fa23 f101 	lsr.w	r1, r3, r1
   1aea8:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1aeaa:	f010 000f 	ands.w	r0, r0, #15
   1aeae:	d106      	bne.n	1aebe <z_vprintk+0x244>
   1aeb0:	9905      	ldr	r1, [sp, #20]
   1aeb2:	b911      	cbnz	r1, 1aeba <z_vprintk+0x240>
   1aeb4:	f1bb 0f00 	cmp.w	fp, #0
   1aeb8:	d122      	bne.n	1af00 <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   1aeba:	2130      	movs	r1, #48	; 0x30
   1aebc:	e003      	b.n	1aec6 <z_vprintk+0x24c>
   1aebe:	2809      	cmp	r0, #9
   1aec0:	bf8c      	ite	hi
   1aec2:	2157      	movhi	r1, #87	; 0x57
   1aec4:	2130      	movls	r1, #48	; 0x30
   1aec6:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1aec8:	b240      	sxtb	r0, r0
   1aeca:	4639      	mov	r1, r7
   1aecc:	9308      	str	r3, [sp, #32]
   1aece:	9205      	str	r2, [sp, #20]
   1aed0:	47b0      	blx	r6
			digits++;
   1aed2:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1aed4:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1aed6:	3301      	adds	r3, #1
   1aed8:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1aeda:	9b08      	ldr	r3, [sp, #32]
   1aedc:	f1bb 0f00 	cmp.w	fp, #0
   1aee0:	d123      	bne.n	1af2a <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   1aee2:	f1b9 0f03 	cmp.w	r9, #3
   1aee6:	f47f af79 	bne.w	1addc <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   1aeea:	9b03      	ldr	r3, [sp, #12]
   1aeec:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1aef0:	2d00      	cmp	r5, #0
   1aef2:	f77f af73 	ble.w	1addc <z_vprintk+0x162>
			out(' ', ctx);
   1aef6:	4639      	mov	r1, r7
   1aef8:	2020      	movs	r0, #32
   1aefa:	47b0      	blx	r6
   1aefc:	3d01      	subs	r5, #1
   1aefe:	e7f7      	b.n	1aef0 <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   1af00:	1e51      	subs	r1, r2, #1
   1af02:	4592      	cmp	sl, r2
   1af04:	9108      	str	r1, [sp, #32]
   1af06:	db07      	blt.n	1af18 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   1af08:	f1b9 0f01 	cmp.w	r9, #1
   1af0c:	d106      	bne.n	1af1c <z_vprintk+0x2a2>
				out('0', ctx);
   1af0e:	4639      	mov	r1, r7
   1af10:	2030      	movs	r0, #48	; 0x30
   1af12:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1af14:	47b0      	blx	r6
   1af16:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1af18:	9a08      	ldr	r2, [sp, #32]
   1af1a:	e7b6      	b.n	1ae8a <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   1af1c:	f1b9 0f02 	cmp.w	r9, #2
   1af20:	d1fa      	bne.n	1af18 <z_vprintk+0x29e>
   1af22:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1af24:	4639      	mov	r1, r7
   1af26:	2020      	movs	r0, #32
   1af28:	e7f4      	b.n	1af14 <z_vprintk+0x29a>
			found_largest_digit = 1;
   1af2a:	9505      	str	r5, [sp, #20]
   1af2c:	e7ad      	b.n	1ae8a <z_vprintk+0x210>
					out((int)(*s++), ctx);
   1af2e:	4639      	mov	r1, r7
   1af30:	47b0      	blx	r6
   1af32:	e6fa      	b.n	1ad2a <z_vprintk+0xb0>
				out(c, ctx);
   1af34:	4639      	mov	r1, r7
   1af36:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   1af3a:	47b0      	blx	r6
   1af3c:	e74e      	b.n	1addc <z_vprintk+0x162>
				length_mod = 0;
   1af3e:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1af40:	46a9      	mov	r9, r5
				min_width = -1;
   1af42:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   1af46:	2501      	movs	r5, #1
   1af48:	e6b0      	b.n	1acac <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   1af4a:	f04f 0903 	mov.w	r9, #3
   1af4e:	e6ad      	b.n	1acac <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   1af50:	f04f 0901 	mov.w	r9, #1
   1af54:	e6aa      	b.n	1acac <z_vprintk+0x32>
			might_format = 0;
   1af56:	4605      	mov	r5, r0
   1af58:	e6a8      	b.n	1acac <z_vprintk+0x32>

0001af5a <printk>:
{
   1af5a:	b40f      	push	{r0, r1, r2, r3}
   1af5c:	b507      	push	{r0, r1, r2, lr}
   1af5e:	a904      	add	r1, sp, #16
   1af60:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1af64:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1af66:	f7f2 ff5f 	bl	de28 <vprintk>
}
   1af6a:	b003      	add	sp, #12
   1af6c:	f85d eb04 	ldr.w	lr, [sp], #4
   1af70:	b004      	add	sp, #16
   1af72:	4770      	bx	lr

0001af74 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   1af74:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1af76:	f7fd ff6f 	bl	18e58 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   1af7a:	2000      	movs	r0, #0
   1af7c:	bd08      	pop	{r3, pc}

0001af7e <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   1af7e:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   1af80:	f7fd ff96 	bl	18eb0 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   1af84:	f110 0f0b 	cmn.w	r0, #11
   1af88:	d005      	beq.n	1af96 <sys_sem_take+0x18>
   1af8a:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   1af8e:	bf08      	it	eq
   1af90:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   1af94:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   1af96:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   1af9a:	e7fb      	b.n	1af94 <sys_sem_take+0x16>

0001af9c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1af9c:	4604      	mov	r4, r0
   1af9e:	b508      	push	{r3, lr}
   1afa0:	4608      	mov	r0, r1
   1afa2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1afa4:	461a      	mov	r2, r3
   1afa6:	47a0      	blx	r4
	return z_impl_k_current_get();
   1afa8:	f7fd ff50 	bl	18e4c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1afac:	f7f3 fb8c 	bl	e6c8 <z_impl_k_thread_abort>

0001afb0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1afb0:	b510      	push	{r4, lr}
   1afb2:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1afb4:	f04f 31ff 	mov.w	r1, #4294967295
   1afb8:	4620      	mov	r0, r4
   1afba:	f000 ff89 	bl	1bed0 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1afbe:	4603      	mov	r3, r0
   1afc0:	2800      	cmp	r0, #0
   1afc2:	d0f7      	beq.n	1afb4 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1afc4:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1afc6:	3308      	adds	r3, #8
   1afc8:	e8d3 1fef 	ldaex	r1, [r3]
   1afcc:	f021 0c01 	bic.w	ip, r1, #1
   1afd0:	e8c3 cfee 	stlex	lr, ip, [r3]
   1afd4:	f1be 0f00 	cmp.w	lr, #0
   1afd8:	d1f6      	bne.n	1afc8 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1afda:	07cb      	lsls	r3, r1, #31
   1afdc:	d500      	bpl.n	1afe0 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1afde:	4790      	blx	r2
	z_impl_k_yield();
   1afe0:	f7fd fec0 	bl	18d64 <z_impl_k_yield>
   1afe4:	e7e6      	b.n	1afb4 <z_work_q_main+0x4>

0001afe6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1afe6:	4770      	bx	lr

0001afe8 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1afe8:	f7fd b802 	b.w	17ff0 <SystemInit>

0001afec <get_status>:
	if (data->started) {
   1afec:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   1afee:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   1aff0:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1aff2:	fb02 3101 	mla	r1, r2, r1, r3
   1aff6:	7a4b      	ldrb	r3, [r1, #9]
   1aff8:	b923      	cbnz	r3, 1b004 <get_status+0x18>
	if (data->ref > 0) {
   1affa:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1affc:	fab0 f080 	clz	r0, r0
   1b000:	0940      	lsrs	r0, r0, #5
   1b002:	4770      	bx	lr
   1b004:	2002      	movs	r0, #2
}
   1b006:	4770      	bx	lr

0001b008 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1b008:	6802      	ldr	r2, [r0, #0]
{
   1b00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1b00c:	6897      	ldr	r7, [r2, #8]
	return &config->subsys[type];
   1b00e:	b2cc      	uxtb	r4, r1
	data = get_sub_data(dev, type);
   1b010:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   1b012:	f04f 0320 	mov.w	r3, #32
   1b016:	f3ef 8511 	mrs	r5, BASEPRI
   1b01a:	f383 8811 	msr	BASEPRI, r3
   1b01e:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1b022:	220c      	movs	r2, #12
   1b024:	4362      	muls	r2, r4
   1b026:	18b1      	adds	r1, r6, r2
   1b028:	7a0b      	ldrb	r3, [r1, #8]
   1b02a:	b33b      	cbz	r3, 1b07c <clock_stop+0x74>
	data->ref--;
   1b02c:	3b01      	subs	r3, #1
   1b02e:	b2db      	uxtb	r3, r3
   1b030:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   1b032:	bb33      	cbnz	r3, 1b082 <clock_stop+0x7a>
	list->head = NULL;
   1b034:	50b3      	str	r3, [r6, r2]
		do_stop =  (config->stop_handler) ?
   1b036:	443a      	add	r2, r7
	list->tail = NULL;
   1b038:	604b      	str	r3, [r1, #4]
   1b03a:	6853      	ldr	r3, [r2, #4]
				config->stop_handler(dev) : true;
   1b03c:	b9d3      	cbnz	r3, 1b074 <clock_stop+0x6c>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1b03e:	220c      	movs	r2, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b040:	2101      	movs	r1, #1
   1b042:	fb02 7204 	mla	r2, r2, r4, r7
   1b046:	7ad3      	ldrb	r3, [r2, #11]
   1b048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b04c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1b050:	6019      	str	r1, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b052:	8913      	ldrh	r3, [r2, #8]
   1b054:	2200      	movs	r2, #0
   1b056:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b05a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1b05e:	601a      	str	r2, [r3, #0]
		data->started = false;
   1b060:	210c      	movs	r1, #12
   1b062:	2000      	movs	r0, #0
   1b064:	fb01 6404 	mla	r4, r1, r4, r6
   1b068:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1b06a:	f385 8811 	msr	BASEPRI, r5
   1b06e:	f3bf 8f6f 	isb	sy
}
   1b072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				config->stop_handler(dev) : true;
   1b074:	4798      	blx	r3
   1b076:	2800      	cmp	r0, #0
   1b078:	d1e1      	bne.n	1b03e <clock_stop+0x36>
   1b07a:	e7f1      	b.n	1b060 <clock_stop+0x58>
		err = -EALREADY;
   1b07c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1b080:	e7f3      	b.n	1b06a <clock_stop+0x62>
	int err = 0;
   1b082:	2000      	movs	r0, #0
   1b084:	e7f1      	b.n	1b06a <clock_stop+0x62>

0001b086 <clkstarted_handle>:
{
   1b086:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   1b088:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1b08a:	6883      	ldr	r3, [r0, #8]
{
   1b08c:	4605      	mov	r5, r0
	sub_data->started = true;
   1b08e:	fb04 3401 	mla	r4, r4, r1, r3
   1b092:	2301      	movs	r3, #1
   1b094:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1b096:	f04f 0320 	mov.w	r3, #32
   1b09a:	f3ef 8111 	mrs	r1, BASEPRI
   1b09e:	f383 8811 	msr	BASEPRI, r3
   1b0a2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1b0a6:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1b0a8:	b12b      	cbz	r3, 1b0b6 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b0aa:	6860      	ldr	r0, [r4, #4]
   1b0ac:	681a      	ldr	r2, [r3, #0]
   1b0ae:	4283      	cmp	r3, r0
	list->head = node;
   1b0b0:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1b0b2:	bf08      	it	eq
   1b0b4:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1b0b6:	f381 8811 	msr	BASEPRI, r1
   1b0ba:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1b0be:	b903      	cbnz	r3, 1b0c2 <clkstarted_handle+0x3c>
}
   1b0c0:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1b0c2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1b0c6:	4628      	mov	r0, r5
   1b0c8:	4790      	blx	r2
   1b0ca:	e7e4      	b.n	1b096 <clkstarted_handle+0x10>

0001b0cc <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1b0cc:	2200      	movs	r2, #0
   1b0ce:	f7f2 bf01 	b.w	ded4 <clock_async_start>

0001b0d2 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1b0d2:	4770      	bx	lr

0001b0d4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1b0d4:	4770      	bx	lr

0001b0d6 <z_irq_spurious>:
	z_arm_reserved();
   1b0d6:	f7f3 b8fd 	b.w	e2d4 <z_arm_bus_fault>

0001b0da <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1b0da:	f000 be66 	b.w	1bdaa <z_fatal_error>

0001b0de <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b0de:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1b0e0:	6800      	ldr	r0, [r0, #0]
   1b0e2:	f000 be62 	b.w	1bdaa <z_fatal_error>

0001b0e6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b0e6:	b508      	push	{r3, lr}
	handler();
   1b0e8:	f7f3 f8fe 	bl	e2e8 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1b0ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1b0f0:	f7f3 b86e 	b.w	e1d0 <z_arm_exc_exit>

0001b0f4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1b0f4:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1b0f6:	2100      	movs	r1, #0
   1b0f8:	a801      	add	r0, sp, #4
   1b0fa:	f7f3 fc7d 	bl	e9f8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1b0fe:	b003      	add	sp, #12
   1b100:	f85d fb04 	ldr.w	pc, [sp], #4

0001b104 <mpu_configure_region>:
{
   1b104:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   1b106:	680b      	ldr	r3, [r1, #0]
{
   1b108:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1b10a:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   1b10c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1b110:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b112:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
   1b114:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1b116:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b118:	f023 031f 	bic.w	r3, r3, #31
   1b11c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1b11e:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1b122:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b126:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1b12a:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1b12c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b130:	9303      	str	r3, [sp, #12]
   1b132:	4604      	mov	r4, r0
   1b134:	d805      	bhi.n	1b142 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   1b136:	4669      	mov	r1, sp
   1b138:	f7f3 fb16 	bl	e768 <region_init>
}
   1b13c:	4620      	mov	r0, r4
   1b13e:	b005      	add	sp, #20
   1b140:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1b142:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   1b146:	e7f9      	b.n	1b13c <mpu_configure_region+0x38>

0001b148 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1b148:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1b14c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1b150:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1b152:	bf08      	it	eq
   1b154:	f06f 0015 	mvneq.w	r0, #21
   1b158:	4770      	bx	lr

0001b15a <_stdout_hook_default>:
}
   1b15a:	f04f 30ff 	mov.w	r0, #4294967295
   1b15e:	4770      	bx	lr

0001b160 <_stdin_hook_default>:
}
   1b160:	2000      	movs	r0, #0
   1b162:	4770      	bx	lr

0001b164 <_read>:
{
   1b164:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   1b166:	4611      	mov	r1, r2
   1b168:	f7f3 bc6c 	b.w	ea44 <z_impl_zephyr_read_stdin>

0001b16c <_write>:
{
   1b16c:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1b16e:	4611      	mov	r1, r2
   1b170:	f7f3 bc7c 	b.w	ea6c <z_impl_zephyr_write_stdout>

0001b174 <_close>:
   1b174:	f04f 30ff 	mov.w	r0, #4294967295
   1b178:	4770      	bx	lr

0001b17a <_lseek>:
}
   1b17a:	2000      	movs	r0, #0
   1b17c:	4770      	bx	lr

0001b17e <_isatty>:
}
   1b17e:	2001      	movs	r0, #1
   1b180:	4770      	bx	lr

0001b182 <_kill>:
}
   1b182:	2000      	movs	r0, #0
   1b184:	4770      	bx	lr

0001b186 <_getpid>:
}
   1b186:	2000      	movs	r0, #0
   1b188:	4770      	bx	lr

0001b18a <_fstat>:
	st->st_mode = S_IFCHR;
   1b18a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   1b18e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   1b190:	604b      	str	r3, [r1, #4]
}
   1b192:	4770      	bx	lr

0001b194 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1b194:	f7fc bf7e 	b.w	18094 <z_impl_z_errno>

0001b198 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1b198:	b508      	push	{r3, lr}
	net_if_init();
   1b19a:	f7f3 fca9 	bl	eaf0 <net_if_init>
	net_if_post_init();
   1b19e:	f7f3 fcbb 	bl	eb18 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1b1a2:	2000      	movs	r0, #0
   1b1a4:	bd08      	pop	{r3, pc}

0001b1a6 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1b1a6:	b110      	cbz	r0, 1b1ae <net_if_l2+0x8>
   1b1a8:	6800      	ldr	r0, [r0, #0]
   1b1aa:	b100      	cbz	r0, 1b1ae <net_if_l2+0x8>
	return iface->if_dev->l2;
   1b1ac:	6840      	ldr	r0, [r0, #4]
}
   1b1ae:	4770      	bx	lr

0001b1b0 <l2_flags_get>:
{
   1b1b0:	b510      	push	{r4, lr}
   1b1b2:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1b1b4:	f7ff fff7 	bl	1b1a6 <net_if_l2>
   1b1b8:	b128      	cbz	r0, 1b1c6 <l2_flags_get+0x16>
   1b1ba:	68c3      	ldr	r3, [r0, #12]
   1b1bc:	b11b      	cbz	r3, 1b1c6 <l2_flags_get+0x16>
}
   1b1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1b1c2:	4610      	mov	r0, r2
   1b1c4:	4718      	bx	r3
}
   1b1c6:	2000      	movs	r0, #0
   1b1c8:	bd10      	pop	{r4, pc}

0001b1ca <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b1ca:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b1ce:	4108      	asrs	r0, r1
}
   1b1d0:	f000 0001 	and.w	r0, r0, #1
   1b1d4:	4770      	bx	lr

0001b1d6 <net_if_up>:
{
   1b1d6:	b510      	push	{r4, lr}
   1b1d8:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1b1da:	6800      	ldr	r0, [r0, #0]
   1b1dc:	2100      	movs	r1, #0
   1b1de:	300c      	adds	r0, #12
   1b1e0:	f7ff fff3 	bl	1b1ca <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1b1e4:	b9e8      	cbnz	r0, 1b222 <net_if_up+0x4c>
	     net_if_is_socket_offloaded(iface))) {
   1b1e6:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1b1e8:	7e9a      	ldrb	r2, [r3, #26]
   1b1ea:	b14a      	cbz	r2, 1b200 <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b1ec:	330c      	adds	r3, #12
   1b1ee:	e8d3 2fef 	ldaex	r2, [r3]
   1b1f2:	f042 0201 	orr.w	r2, r2, #1
   1b1f6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1b1fa:	2900      	cmp	r1, #0
   1b1fc:	d1f7      	bne.n	1b1ee <net_if_up+0x18>
}
   1b1fe:	bd10      	pop	{r4, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1b200:	4620      	mov	r0, r4
   1b202:	f7ff ffd0 	bl	1b1a6 <net_if_l2>
   1b206:	b970      	cbnz	r0, 1b226 <net_if_up+0x50>
   1b208:	6823      	ldr	r3, [r4, #0]
   1b20a:	330c      	adds	r3, #12
   1b20c:	e8d3 2fef 	ldaex	r2, [r3]
   1b210:	f042 0201 	orr.w	r2, r2, #1
   1b214:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1b218:	2900      	cmp	r1, #0
   1b21a:	d1f7      	bne.n	1b20c <net_if_up+0x36>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1b21c:	4620      	mov	r0, r4
   1b21e:	f7ff ffc7 	bl	1b1b0 <l2_flags_get>
		return 0;
   1b222:	2000      	movs	r0, #0
   1b224:	e7eb      	b.n	1b1fe <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1b226:	6883      	ldr	r3, [r0, #8]
   1b228:	2b00      	cmp	r3, #0
   1b22a:	d0ed      	beq.n	1b208 <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   1b22c:	2101      	movs	r1, #1
   1b22e:	4620      	mov	r0, r4
   1b230:	4798      	blx	r3
	if (status < 0) {
   1b232:	2800      	cmp	r0, #0
   1b234:	dae8      	bge.n	1b208 <net_if_up+0x32>
   1b236:	e7e2      	b.n	1b1fe <net_if_up+0x28>

0001b238 <gpio_nrfx_write>:
{
   1b238:	b510      	push	{r4, lr}
	return port->config->config_info;
   1b23a:	6804      	ldr	r4, [r0, #0]
   1b23c:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b23e:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b240:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b242:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b244:	69c0      	ldr	r0, [r0, #28]
   1b246:	d103      	bne.n	1b250 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1b248:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1b24a:	6060      	str	r0, [r4, #4]
}
   1b24c:	2000      	movs	r0, #0
   1b24e:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1b250:	3300      	adds	r3, #0
   1b252:	f04f 0101 	mov.w	r1, #1
   1b256:	bf18      	it	ne
   1b258:	2301      	movne	r3, #1
   1b25a:	40d0      	lsrs	r0, r2
   1b25c:	f000 0001 	and.w	r0, r0, #1
   1b260:	4091      	lsls	r1, r2
   1b262:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1b264:	bf14      	ite	ne
   1b266:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1b268:	60e1      	streq	r1, [r4, #12]
   1b26a:	e7ef      	b.n	1b24c <gpio_nrfx_write+0x14>

0001b26c <gpio_nrfx_read>:
{
   1b26c:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1b26e:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1b270:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b272:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1b274:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b276:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b278:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1b27a:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1b27c:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1b27e:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1b280:	ea80 0004 	eor.w	r0, r0, r4
   1b284:	ea84 0405 	eor.w	r4, r4, r5
   1b288:	ea04 0406 	and.w	r4, r4, r6
   1b28c:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1b290:	bf1c      	itt	ne
   1b292:	40d0      	lsrne	r0, r2
   1b294:	f000 0001 	andne.w	r0, r0, #1
   1b298:	6018      	str	r0, [r3, #0]
}
   1b29a:	2000      	movs	r0, #0
   1b29c:	bd70      	pop	{r4, r5, r6, pc}

0001b29e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b29e:	6883      	ldr	r3, [r0, #8]
{
   1b2a0:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1b2a2:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1b2a4:	b158      	cbz	r0, 1b2be <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b2a6:	2400      	movs	r4, #0
   1b2a8:	4281      	cmp	r1, r0
   1b2aa:	d113      	bne.n	1b2d4 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1b2ac:	6808      	ldr	r0, [r1, #0]
   1b2ae:	b95c      	cbnz	r4, 1b2c8 <gpio_nrfx_manage_callback+0x2a>
   1b2b0:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1b2b2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b2b4:	42a1      	cmp	r1, r4
   1b2b6:	d100      	bne.n	1b2ba <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1b2b8:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1b2ba:	2000      	movs	r0, #0
   1b2bc:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1b2be:	b972      	cbnz	r2, 1b2de <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1b2c0:	2000      	movs	r0, #0
}
   1b2c2:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b2c4:	4628      	mov	r0, r5
   1b2c6:	e7ef      	b.n	1b2a8 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1b2c8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b2ca:	6858      	ldr	r0, [r3, #4]
   1b2cc:	4281      	cmp	r1, r0
	list->tail = node;
   1b2ce:	bf08      	it	eq
   1b2d0:	605c      	streq	r4, [r3, #4]
   1b2d2:	e7f2      	b.n	1b2ba <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b2d4:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1b2d6:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b2d8:	2d00      	cmp	r5, #0
   1b2da:	d1f3      	bne.n	1b2c4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1b2dc:	b13a      	cbz	r2, 1b2ee <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1b2de:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1b2e0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b2e2:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1b2e4:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b2e6:	2800      	cmp	r0, #0
   1b2e8:	d1ea      	bne.n	1b2c0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1b2ea:	6059      	str	r1, [r3, #4]
   1b2ec:	e7e9      	b.n	1b2c2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1b2ee:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b2f2:	e7e6      	b.n	1b2c2 <gpio_nrfx_manage_callback+0x24>

0001b2f4 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b2f4:	2901      	cmp	r1, #1
{
   1b2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1b2fa:	bf18      	it	ne
   1b2fc:	b2d4      	uxtbne	r4, r2
{
   1b2fe:	4606      	mov	r6, r0
		to_pin   = pin;
   1b300:	bf12      	itee	ne
   1b302:	4625      	movne	r5, r4
		to_pin   = 31U;
   1b304:	251f      	moveq	r5, #31
		from_pin = 0U;
   1b306:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1b308:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1b30c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b30e:	42ac      	cmp	r4, r5
   1b310:	d902      	bls.n	1b318 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1b312:	2000      	movs	r0, #0
}
   1b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1b318:	68fb      	ldr	r3, [r7, #12]
   1b31a:	fa08 f204 	lsl.w	r2, r8, r4
   1b31e:	ea23 0302 	bic.w	r3, r3, r2
   1b322:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1b324:	4621      	mov	r1, r4
   1b326:	4630      	mov	r0, r6
   1b328:	f7f3 fc46 	bl	ebb8 <gpiote_pin_int_cfg>
		if (res != 0) {
   1b32c:	2800      	cmp	r0, #0
   1b32e:	d1f1      	bne.n	1b314 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b330:	3401      	adds	r4, #1
   1b332:	b2e4      	uxtb	r4, r4
   1b334:	e7eb      	b.n	1b30e <gpio_nrfx_pin_disable_callback+0x1a>

0001b336 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b336:	2901      	cmp	r1, #1
{
   1b338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1b33c:	bf18      	it	ne
   1b33e:	b2d4      	uxtbne	r4, r2
{
   1b340:	4606      	mov	r6, r0
		to_pin   = pin;
   1b342:	bf12      	itee	ne
   1b344:	4625      	movne	r5, r4
		to_pin   = 31U;
   1b346:	251f      	moveq	r5, #31
		from_pin = 0U;
   1b348:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1b34a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1b34e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b350:	42ac      	cmp	r4, r5
   1b352:	d902      	bls.n	1b35a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1b354:	2000      	movs	r0, #0
}
   1b356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1b35a:	68fb      	ldr	r3, [r7, #12]
   1b35c:	fa08 f204 	lsl.w	r2, r8, r4
   1b360:	4313      	orrs	r3, r2
   1b362:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1b364:	4621      	mov	r1, r4
   1b366:	4630      	mov	r0, r6
   1b368:	f7f3 fc26 	bl	ebb8 <gpiote_pin_int_cfg>
		if (res != 0) {
   1b36c:	2800      	cmp	r0, #0
   1b36e:	d1f2      	bne.n	1b356 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b370:	3401      	adds	r4, #1
   1b372:	b2e4      	uxtb	r4, r4
   1b374:	e7ec      	b.n	1b350 <gpio_nrfx_pin_enable_callback+0x1a>

0001b376 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1b376:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1b378:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1b37a:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1b37c:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   1b37e:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1b380:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1b382:	b159      	cbz	r1, 1b39c <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b384:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1b388:	b141      	cbz	r1, 1b39c <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1b38a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1b38e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b392:	2101      	movs	r1, #1
   1b394:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1b396:	2300      	movs	r3, #0
   1b398:	7393      	strb	r3, [r2, #14]
		return;
   1b39a:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b39c:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1b3a0:	b111      	cbz	r1, 1b3a8 <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b3a2:	2100      	movs	r1, #0
   1b3a4:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1b3a8:	6813      	ldr	r3, [r2, #0]
   1b3aa:	b10b      	cbz	r3, 1b3b0 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1b3ac:	6850      	ldr	r0, [r2, #4]
   1b3ae:	4718      	bx	r3
}
   1b3b0:	4770      	bx	lr

0001b3b2 <uarte_nrfx_config_get>:
{
   1b3b2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1b3b4:	6882      	ldr	r2, [r0, #8]
   1b3b6:	e892 0003 	ldmia.w	r2, {r0, r1}
   1b3ba:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1b3be:	2000      	movs	r0, #0
   1b3c0:	4770      	bx	lr

0001b3c2 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1b3c2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1b3c4:	689b      	ldr	r3, [r3, #8]
   1b3c6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b3c8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b3cc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1b3d0:	4770      	bx	lr

0001b3d2 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1b3d2:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1b3d4:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1b3d6:	689b      	ldr	r3, [r3, #8]
   1b3d8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b3da:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b3de:	b138      	cbz	r0, 1b3f0 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1b3e0:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b3e2:	2000      	movs	r0, #0
   1b3e4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b3e6:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b3e8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b3ec:	601a      	str	r2, [r3, #0]
	return 0;
   1b3ee:	4770      	bx	lr
		return -1;
   1b3f0:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b3f4:	4770      	bx	lr

0001b3f6 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b3f6:	2200      	movs	r2, #0
	return dev->config->config_info;
   1b3f8:	6803      	ldr	r3, [r0, #0]
{
   1b3fa:	b082      	sub	sp, #8
	return config->uarte_regs;
   1b3fc:	689b      	ldr	r3, [r3, #8]
{
   1b3fe:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1b402:	681b      	ldr	r3, [r3, #0]
   1b404:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b408:	f10d 0207 	add.w	r2, sp, #7
   1b40c:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b410:	2201      	movs	r2, #1
   1b412:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b416:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b418:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b41c:	2900      	cmp	r1, #0
   1b41e:	d0fb      	beq.n	1b418 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b420:	60da      	str	r2, [r3, #12]
}
   1b422:	b002      	add	sp, #8
   1b424:	4770      	bx	lr

0001b426 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1b426:	6803      	ldr	r3, [r0, #0]
{
   1b428:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1b42a:	689b      	ldr	r3, [r3, #8]
   1b42c:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b42e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b432:	b1bb      	cbz	r3, 1b464 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b434:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1b436:	68ab      	ldr	r3, [r5, #8]
   1b438:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b43a:	2300      	movs	r3, #0
   1b43c:	4290      	cmp	r0, r2
   1b43e:	bfa8      	it	ge
   1b440:	4610      	movge	r0, r2
   1b442:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1b446:	68aa      	ldr	r2, [r5, #8]
   1b448:	4283      	cmp	r3, r0
   1b44a:	6892      	ldr	r2, [r2, #8]
   1b44c:	db06      	blt.n	1b45c <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b44e:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b450:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b454:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b458:	60a3      	str	r3, [r4, #8]
}
   1b45a:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1b45c:	5cce      	ldrb	r6, [r1, r3]
   1b45e:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1b460:	3301      	adds	r3, #1
   1b462:	e7f0      	b.n	1b446 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1b464:	4618      	mov	r0, r3
   1b466:	e7f8      	b.n	1b45a <uarte_nrfx_fifo_fill+0x34>

0001b468 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1b468:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1b46a:	689b      	ldr	r3, [r3, #8]
   1b46c:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b46e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b472:	b143      	cbz	r3, 1b486 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1b474:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b476:	2000      	movs	r0, #0
   1b478:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b47c:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1b47e:	7b1b      	ldrb	r3, [r3, #12]
   1b480:	700b      	strb	r3, [r1, #0]
   1b482:	6010      	str	r0, [r2, #0]
   1b484:	4770      	bx	lr
	int num_rx = 0;
   1b486:	4618      	mov	r0, r3
}
   1b488:	4770      	bx	lr

0001b48a <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1b48a:	2100      	movs	r1, #0
	return dev->config->config_info;
   1b48c:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1b48e:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1b490:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   1b492:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1b494:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1b496:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1b498:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b49c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b4a0:	4770      	bx	lr

0001b4a2 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1b4a2:	2201      	movs	r2, #1
   1b4a4:	6883      	ldr	r3, [r0, #8]
   1b4a6:	689b      	ldr	r3, [r3, #8]
   1b4a8:	739a      	strb	r2, [r3, #14]
}
   1b4aa:	4770      	bx	lr

0001b4ac <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1b4ac:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1b4ae:	689b      	ldr	r3, [r3, #8]
   1b4b0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b4b2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1b4b6:	b118      	cbz	r0, 1b4c0 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1b4b8:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1b4bc:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1b4c0:	4770      	bx	lr

0001b4c2 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1b4c2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1b4c4:	689b      	ldr	r3, [r3, #8]
   1b4c6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b4c8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1b4cc:	3000      	adds	r0, #0
   1b4ce:	bf18      	it	ne
   1b4d0:	2001      	movne	r0, #1
   1b4d2:	4770      	bx	lr

0001b4d4 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1b4d4:	2210      	movs	r2, #16
	return dev->config->config_info;
   1b4d6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1b4d8:	689b      	ldr	r3, [r3, #8]
   1b4da:	681b      	ldr	r3, [r3, #0]
   1b4dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b4e0:	4770      	bx	lr

0001b4e2 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1b4e2:	2210      	movs	r2, #16
	return dev->config->config_info;
   1b4e4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1b4e6:	689b      	ldr	r3, [r3, #8]
   1b4e8:	681b      	ldr	r3, [r3, #0]
   1b4ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1b4ee:	4770      	bx	lr

0001b4f0 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1b4f0:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1b4f4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1b4f6:	689b      	ldr	r3, [r3, #8]
   1b4f8:	681b      	ldr	r3, [r3, #0]
   1b4fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b4fe:	4770      	bx	lr

0001b500 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1b500:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1b504:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1b506:	689b      	ldr	r3, [r3, #8]
   1b508:	681b      	ldr	r3, [r3, #0]
   1b50a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1b50e:	4770      	bx	lr

0001b510 <uarte_nrfx_irq_update>:
}
   1b510:	2001      	movs	r0, #1
   1b512:	4770      	bx	lr

0001b514 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1b514:	6883      	ldr	r3, [r0, #8]
   1b516:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1b518:	e9c3 1200 	strd	r1, r2, [r3]
}
   1b51c:	4770      	bx	lr

0001b51e <uarte_nrfx_irq_is_pending>:
{
   1b51e:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1b520:	6803      	ldr	r3, [r0, #0]
{
   1b522:	4602      	mov	r2, r0
	return config->uarte_regs;
   1b524:	689b      	ldr	r3, [r3, #8]
   1b526:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1b528:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1b52c:	05db      	lsls	r3, r3, #23
   1b52e:	d405      	bmi.n	1b53c <uarte_nrfx_irq_is_pending+0x1e>
   1b530:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1b534:	f010 0010 	ands.w	r0, r0, #16
   1b538:	d106      	bne.n	1b548 <uarte_nrfx_irq_is_pending+0x2a>
}
   1b53a:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1b53c:	f7ff ffb6 	bl	1b4ac <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1b540:	2800      	cmp	r0, #0
   1b542:	d0f5      	beq.n	1b530 <uarte_nrfx_irq_is_pending+0x12>
		||
   1b544:	2001      	movs	r0, #1
   1b546:	e7f8      	b.n	1b53a <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1b548:	4610      	mov	r0, r2
   1b54a:	f7ff ffba 	bl	1b4c2 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1b54e:	3000      	adds	r0, #0
   1b550:	bf18      	it	ne
   1b552:	2001      	movne	r0, #1
   1b554:	e7f1      	b.n	1b53a <uarte_nrfx_irq_is_pending+0x1c>

0001b556 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1b556:	2000      	movs	r0, #0
   1b558:	4770      	bx	lr

0001b55a <entropy_cc310_rng_get_entropy>:
{
   1b55a:	b513      	push	{r0, r1, r4, lr}
   1b55c:	4614      	mov	r4, r2
   1b55e:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1b560:	aa01      	add	r2, sp, #4
   1b562:	4621      	mov	r1, r4
   1b564:	f7ec fd44 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1b568:	9b01      	ldr	r3, [sp, #4]
   1b56a:	429c      	cmp	r4, r3
}
   1b56c:	bf18      	it	ne
   1b56e:	f06f 0015 	mvnne.w	r0, #21
   1b572:	b002      	add	sp, #8
   1b574:	bd10      	pop	{r4, pc}

0001b576 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1b576:	4668      	mov	r0, sp
   1b578:	f020 0107 	bic.w	r1, r0, #7
   1b57c:	468d      	mov	sp, r1
   1b57e:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1b580:	f7f6 fde4 	bl	1214c <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1b584:	f7f2 ff16 	bl	e3b4 <_arch_isr_direct_pm>
   1b588:	f7f2 fe22 	bl	e1d0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1b58c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1b590:	4685      	mov	sp, r0
   1b592:	4770      	bx	lr

0001b594 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1b594:	4668      	mov	r0, sp
   1b596:	f020 0107 	bic.w	r1, r0, #7
   1b59a:	468d      	mov	sp, r1
   1b59c:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1b59e:	f7f7 f9cd 	bl	1293c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1b5a2:	f7f2 ff07 	bl	e3b4 <_arch_isr_direct_pm>
   1b5a6:	f7f2 fe13 	bl	e1d0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1b5aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1b5ae:	4685      	mov	sp, r0
   1b5b0:	4770      	bx	lr

0001b5b2 <trace_task_create>:
{
   1b5b2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1b5b4:	201d      	movs	r0, #29
   1b5b6:	2200      	movs	r2, #0
   1b5b8:	2106      	movs	r1, #6
   1b5ba:	f7f2 fee3 	bl	e384 <z_arm_irq_priority_set>
}
   1b5be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1b5c2:	201d      	movs	r0, #29
   1b5c4:	f7f2 bece 	b.w	e364 <arch_irq_enable>

0001b5c8 <read_task_create>:
{
   1b5c8:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1b5ca:	201c      	movs	r0, #28
   1b5cc:	2200      	movs	r2, #0
   1b5ce:	2106      	movs	r1, #6
   1b5d0:	f7f2 fed8 	bl	e384 <z_arm_irq_priority_set>
}
   1b5d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1b5d8:	201c      	movs	r0, #28
   1b5da:	f7f2 bec3 	b.w	e364 <arch_irq_enable>

0001b5de <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1b5de:	2000      	movs	r0, #0
   1b5e0:	4770      	bx	lr

0001b5e2 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1b5e2:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1b5e6:	bf18      	it	ne
   1b5e8:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1b5ea:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1b5ec:	bf48      	it	mi
   1b5ee:	f043 0308 	orrmi.w	r3, r3, #8
}
   1b5f2:	4618      	mov	r0, r3
   1b5f4:	4770      	bx	lr

0001b5f6 <z_to_nrf_family>:
	switch (z_family) {
   1b5f6:	2803      	cmp	r0, #3
   1b5f8:	d00f      	beq.n	1b61a <z_to_nrf_family+0x24>
   1b5fa:	d808      	bhi.n	1b60e <z_to_nrf_family+0x18>
   1b5fc:	2801      	cmp	r0, #1
   1b5fe:	d00e      	beq.n	1b61e <z_to_nrf_family+0x28>
   1b600:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1b602:	bf08      	it	eq
   1b604:	200a      	moveq	r0, #10
   1b606:	bf18      	it	ne
   1b608:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   1b60c:	4770      	bx	lr
	switch (z_family) {
   1b60e:	2866      	cmp	r0, #102	; 0x66
   1b610:	d006      	beq.n	1b620 <z_to_nrf_family+0x2a>
   1b612:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1b614:	bf08      	it	eq
   1b616:	2001      	moveq	r0, #1
   1b618:	e7f5      	b.n	1b606 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1b61a:	2005      	movs	r0, #5
   1b61c:	4770      	bx	lr
		return NRF_AF_INET;
   1b61e:	2002      	movs	r0, #2
}
   1b620:	4770      	bx	lr

0001b622 <z_to_nrf_protocol>:
	switch (proto) {
   1b622:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1b626:	d01d      	beq.n	1b664 <z_to_nrf_protocol+0x42>
   1b628:	dc08      	bgt.n	1b63c <z_to_nrf_protocol+0x1a>
   1b62a:	2806      	cmp	r0, #6
   1b62c:	d01d      	beq.n	1b66a <z_to_nrf_protocol+0x48>
   1b62e:	2811      	cmp	r0, #17
   1b630:	d01d      	beq.n	1b66e <z_to_nrf_protocol+0x4c>
   1b632:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1b634:	bf18      	it	ne
   1b636:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   1b63a:	4770      	bx	lr
	switch (proto) {
   1b63c:	f240 2301 	movw	r3, #513	; 0x201
   1b640:	4298      	cmp	r0, r3
   1b642:	d015      	beq.n	1b670 <z_to_nrf_protocol+0x4e>
   1b644:	dc06      	bgt.n	1b654 <z_to_nrf_protocol+0x32>
   1b646:	f240 1311 	movw	r3, #273	; 0x111
   1b64a:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1b64c:	bf08      	it	eq
   1b64e:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1b652:	e7ef      	b.n	1b634 <z_to_nrf_protocol+0x12>
	switch (proto) {
   1b654:	f240 2302 	movw	r3, #514	; 0x202
   1b658:	4298      	cmp	r0, r3
   1b65a:	d009      	beq.n	1b670 <z_to_nrf_protocol+0x4e>
   1b65c:	f240 2303 	movw	r3, #515	; 0x203
   1b660:	4298      	cmp	r0, r3
   1b662:	e7e7      	b.n	1b634 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1b664:	f44f 7082 	mov.w	r0, #260	; 0x104
   1b668:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1b66a:	2001      	movs	r0, #1
   1b66c:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1b66e:	2002      	movs	r0, #2
}
   1b670:	4770      	bx	lr

0001b672 <nrf91_bsdlib_socket_offload_init>:
}
   1b672:	2000      	movs	r0, #0
   1b674:	4770      	bx	lr

0001b676 <nrf91_socket_offload_freeaddrinfo>:
{
   1b676:	b538      	push	{r3, r4, r5, lr}
   1b678:	4604      	mov	r4, r0
	while (next != NULL) {
   1b67a:	b904      	cbnz	r4, 1b67e <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1b67c:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1b67e:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1b680:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1b682:	f000 fbb6 	bl	1bdf2 <k_free>
		k_free(this);
   1b686:	4620      	mov	r0, r4
   1b688:	f000 fbb3 	bl	1bdf2 <k_free>
		next = next->ai_next;
   1b68c:	462c      	mov	r4, r5
   1b68e:	e7f4      	b.n	1b67a <nrf91_socket_offload_freeaddrinfo+0x4>

0001b690 <z_to_nrf_addrinfo_hints>:
{
   1b690:	b538      	push	{r3, r4, r5, lr}
   1b692:	460c      	mov	r4, r1
   1b694:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   1b696:	221c      	movs	r2, #28
   1b698:	2100      	movs	r1, #0
   1b69a:	1d20      	adds	r0, r4, #4
   1b69c:	f000 fef0 	bl	1c480 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1b6a0:	2300      	movs	r3, #0
   1b6a2:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1b6a4:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1b6a6:	2b03      	cmp	r3, #3
   1b6a8:	d003      	beq.n	1b6b2 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1b6aa:	2b04      	cmp	r3, #4
   1b6ac:	bf08      	it	eq
   1b6ae:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1b6b2:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1b6b4:	88a8      	ldrh	r0, [r5, #4]
   1b6b6:	f7ff ff9e 	bl	1b5f6 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1b6ba:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   1b6be:	d00b      	beq.n	1b6d8 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1b6c0:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1b6c2:	68e8      	ldr	r0, [r5, #12]
   1b6c4:	f7ff ffad 	bl	1b622 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1b6c8:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1b6cc:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1b6ce:	d003      	beq.n	1b6d8 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1b6d0:	69a8      	ldr	r0, [r5, #24]
   1b6d2:	b108      	cbz	r0, 1b6d8 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1b6d4:	61a0      	str	r0, [r4, #24]
	return 0;
   1b6d6:	2000      	movs	r0, #0
}
   1b6d8:	bd38      	pop	{r3, r4, r5, pc}

0001b6da <nrf91_socket_offload_send>:
{
   1b6da:	b570      	push	{r4, r5, r6, lr}
   1b6dc:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1b6de:	4618      	mov	r0, r3
{
   1b6e0:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1b6e2:	f7ff ff7e 	bl	1b5e2 <z_to_nrf_flags>
   1b6e6:	462a      	mov	r2, r5
   1b6e8:	4603      	mov	r3, r0
   1b6ea:	4620      	mov	r0, r4
}
   1b6ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1b6f0:	f7f8 be6c 	b.w	143cc <nrf_send>

0001b6f4 <nrf91_socket_offload_recv>:
{
   1b6f4:	b570      	push	{r4, r5, r6, lr}
   1b6f6:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1b6f8:	4618      	mov	r0, r3
{
   1b6fa:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1b6fc:	f7ff ff71 	bl	1b5e2 <z_to_nrf_flags>
   1b700:	462a      	mov	r2, r5
   1b702:	4603      	mov	r3, r0
   1b704:	4620      	mov	r0, r4
}
   1b706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1b70a:	f7f8 be95 	b.w	14438 <nrf_recv>

0001b70e <nrf91_socket_offload_getsockopt>:
{
   1b70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b712:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1b714:	2300      	movs	r3, #0
{
   1b716:	b086      	sub	sp, #24
   1b718:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1b71c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1b720:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1b724:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1b728:	4607      	mov	r7, r0
   1b72a:	460c      	mov	r4, r1
   1b72c:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1b72e:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1b730:	d002      	beq.n	1b738 <nrf91_socket_offload_getsockopt+0x2a>
   1b732:	dc2b      	bgt.n	1b78c <nrf91_socket_offload_getsockopt+0x7e>
   1b734:	2901      	cmp	r1, #1
   1b736:	d13d      	bne.n	1b7b4 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1b738:	aa02      	add	r2, sp, #8
   1b73a:	4631      	mov	r1, r6
   1b73c:	4620      	mov	r0, r4
   1b73e:	f7f3 fef9 	bl	f534 <z_to_nrf_optname>
   1b742:	2800      	cmp	r0, #0
   1b744:	db36      	blt.n	1b7b4 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1b746:	2c01      	cmp	r4, #1
   1b748:	d128      	bne.n	1b79c <nrf91_socket_offload_getsockopt+0x8e>
   1b74a:	2e14      	cmp	r6, #20
   1b74c:	d126      	bne.n	1b79c <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1b74e:	2308      	movs	r3, #8
   1b750:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1b752:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1b754:	aa03      	add	r2, sp, #12
   1b756:	9200      	str	r2, [sp, #0]
   1b758:	4638      	mov	r0, r7
   1b75a:	9a02      	ldr	r2, [sp, #8]
   1b75c:	4621      	mov	r1, r4
   1b75e:	f7f8 feeb 	bl	14538 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1b762:	4607      	mov	r7, r0
   1b764:	b970      	cbnz	r0, 1b784 <nrf91_socket_offload_getsockopt+0x76>
   1b766:	b16d      	cbz	r5, 1b784 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1b768:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1b76a:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1b76c:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1b770:	d108      	bne.n	1b784 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1b772:	2e04      	cmp	r6, #4
   1b774:	d114      	bne.n	1b7a0 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1b776:	6828      	ldr	r0, [r5, #0]
   1b778:	f7f3 fdda 	bl	f330 <bsd_os_errno_set>
				*(int *)optval = errno;
   1b77c:	f7ff fd0a 	bl	1b194 <__errno>
   1b780:	6803      	ldr	r3, [r0, #0]
   1b782:	602b      	str	r3, [r5, #0]
}
   1b784:	4638      	mov	r0, r7
   1b786:	b006      	add	sp, #24
   1b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1b78c:	f240 2302 	movw	r3, #514	; 0x202
   1b790:	4299      	cmp	r1, r3
   1b792:	d0d1      	beq.n	1b738 <nrf91_socket_offload_getsockopt+0x2a>
   1b794:	f240 2303 	movw	r3, #515	; 0x203
   1b798:	4299      	cmp	r1, r3
   1b79a:	e7cc      	b.n	1b736 <nrf91_socket_offload_getsockopt+0x28>
   1b79c:	462b      	mov	r3, r5
   1b79e:	e7d9      	b.n	1b754 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1b7a0:	2e14      	cmp	r6, #20
   1b7a2:	d1ef      	bne.n	1b784 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1b7a4:	9b04      	ldr	r3, [sp, #16]
   1b7a6:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1b7a8:	9b05      	ldr	r3, [sp, #20]
   1b7aa:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1b7ac:	2308      	movs	r3, #8
   1b7ae:	f8c8 3000 	str.w	r3, [r8]
   1b7b2:	e7e7      	b.n	1b784 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1b7b4:	f7ff fcee 	bl	1b194 <__errno>
   1b7b8:	236d      	movs	r3, #109	; 0x6d
	return retval;
   1b7ba:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   1b7be:	6003      	str	r3, [r0, #0]
	return retval;
   1b7c0:	e7e0      	b.n	1b784 <nrf91_socket_offload_getsockopt+0x76>

0001b7c2 <nrf91_socket_offload_poll>:
{
   1b7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7c4:	b091      	sub	sp, #68	; 0x44
   1b7c6:	4605      	mov	r5, r0
   1b7c8:	460c      	mov	r4, r1
   1b7ca:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1b7cc:	2100      	movs	r1, #0
   1b7ce:	2240      	movs	r2, #64	; 0x40
   1b7d0:	4668      	mov	r0, sp
   1b7d2:	f000 fe55 	bl	1c480 <memset>
	for (int i = 0; i < nfds; i++) {
   1b7d6:	466a      	mov	r2, sp
   1b7d8:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1b7da:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1b7dc:	42a1      	cmp	r1, r4
   1b7de:	db0c      	blt.n	1b7fa <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1b7e0:	4632      	mov	r2, r6
   1b7e2:	4621      	mov	r1, r4
   1b7e4:	4668      	mov	r0, sp
   1b7e6:	f7f8 fec7 	bl	14578 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1b7ea:	2200      	movs	r2, #0
   1b7ec:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1b7ee:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1b7f0:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1b7f2:	42a2      	cmp	r2, r4
   1b7f4:	db1a      	blt.n	1b82c <nrf91_socket_offload_poll+0x6a>
}
   1b7f6:	b011      	add	sp, #68	; 0x44
   1b7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1b7fa:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1b7fe:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1b802:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1b804:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1b806:	bf48      	it	mi
   1b808:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1b80a:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1b80e:	bf44      	itt	mi
   1b810:	f043 0301 	orrmi.w	r3, r3, #1
   1b814:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1b816:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1b818:	bf48      	it	mi
   1b81a:	8893      	ldrhmi	r3, [r2, #4]
   1b81c:	f102 0208 	add.w	r2, r2, #8
   1b820:	bf44      	itt	mi
   1b822:	f043 0302 	orrmi.w	r3, r3, #2
   1b826:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1b82a:	e7d7      	b.n	1b7dc <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1b82c:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1b830:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1b832:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1b834:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1b836:	bf48      	it	mi
   1b838:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1b83a:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1b83c:	bf48      	it	mi
   1b83e:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1b840:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1b844:	bf44      	itt	mi
   1b846:	f045 0504 	orrmi.w	r5, r5, #4
   1b84a:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1b84c:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1b84e:	bf48      	it	mi
   1b850:	88dd      	ldrhmi	r5, [r3, #6]
   1b852:	f103 0308 	add.w	r3, r3, #8
   1b856:	bf44      	itt	mi
   1b858:	f045 0508 	orrmi.w	r5, r5, #8
   1b85c:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1b860:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1b862:	bf42      	ittt	mi
   1b864:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1b868:	f045 0520 	orrmi.w	r5, r5, #32
   1b86c:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1b870:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1b872:	bf42      	ittt	mi
   1b874:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1b878:	f041 0110 	orrmi.w	r1, r1, #16
   1b87c:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1b880:	e7b7      	b.n	1b7f2 <nrf91_socket_offload_poll+0x30>

0001b882 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1b882:	f7f8 be05 	b.w	14490 <nrf_listen>

0001b886 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1b886:	f7f8 bd77 	b.w	14378 <nrf_close>

0001b88a <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1b88a:	2903      	cmp	r1, #3
{
   1b88c:	b508      	push	{r3, lr}
	switch (cmd) {
   1b88e:	d00b      	beq.n	1b8a8 <nrf91_socket_offload_fcntl+0x1e>
   1b890:	2904      	cmp	r1, #4
   1b892:	d111      	bne.n	1b8b8 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1b894:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1b896:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1b89a:	d10d      	bne.n	1b8b8 <nrf91_socket_offload_fcntl+0x2e>
}
   1b89c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1b8a0:	1392      	asrs	r2, r2, #14
   1b8a2:	2101      	movs	r1, #1
   1b8a4:	f7f8 be6a 	b.w	1457c <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1b8a8:	2200      	movs	r2, #0
   1b8aa:	2102      	movs	r1, #2
   1b8ac:	f7f8 fe66 	bl	1457c <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1b8b0:	0380      	lsls	r0, r0, #14
   1b8b2:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1b8b6:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1b8b8:	f7ff fc6c 	bl	1b194 <__errno>
   1b8bc:	2316      	movs	r3, #22
   1b8be:	6003      	str	r3, [r0, #0]
	return retval;
   1b8c0:	f04f 30ff 	mov.w	r0, #4294967295
   1b8c4:	e7f7      	b.n	1b8b6 <nrf91_socket_offload_fcntl+0x2c>

0001b8c6 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   1b8c6:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   1b8c8:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   1b8ca:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1b8cc:	4603      	mov	r3, r0
{
   1b8ce:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   1b8d0:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b8d4:	f101 0210 	add.w	r2, r1, #16
   1b8d8:	f102 0410 	add.w	r4, r2, #16
   1b8dc:	f852 5b04 	ldr.w	r5, [r2], #4
   1b8e0:	42a2      	cmp	r2, r4
   1b8e2:	f843 5b04 	str.w	r5, [r3], #4
   1b8e6:	d1f9      	bne.n	1b8dc <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1b8e8:	6a0b      	ldr	r3, [r1, #32]
   1b8ea:	7503      	strb	r3, [r0, #20]
}
   1b8ec:	bd30      	pop	{r4, r5, pc}

0001b8ee <nrf91_socket_offload_getaddrinfo>:
{
   1b8ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b8f2:	4614      	mov	r4, r2
   1b8f4:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1b8f6:	2100      	movs	r1, #0
{
   1b8f8:	b093      	sub	sp, #76	; 0x4c
   1b8fa:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1b8fc:	2220      	movs	r2, #32
   1b8fe:	a802      	add	r0, sp, #8
{
   1b900:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1b902:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1b904:	f000 fdbc 	bl	1c480 <memset>
	if (hints != NULL) {
   1b908:	b194      	cbz	r4, 1b930 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1b90a:	a902      	add	r1, sp, #8
   1b90c:	4620      	mov	r0, r4
   1b90e:	f7ff febf 	bl	1b690 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1b912:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   1b916:	f000 80bf 	beq.w	1ba98 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1b91a:	306a      	adds	r0, #106	; 0x6a
   1b91c:	f000 80bf 	beq.w	1ba9e <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1b920:	69e0      	ldr	r0, [r4, #28]
   1b922:	b120      	cbz	r0, 1b92e <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1b924:	ac0a      	add	r4, sp, #40	; 0x28
   1b926:	4621      	mov	r1, r4
   1b928:	f7ff feb2 	bl	1b690 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1b92c:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1b92e:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1b930:	4628      	mov	r0, r5
   1b932:	ab01      	add	r3, sp, #4
   1b934:	4622      	mov	r2, r4
   1b936:	4631      	mov	r1, r6
   1b938:	f7f8 fe1a 	bl	14570 <nrf_getaddrinfo>
	if (retval != 0) {
   1b93c:	4605      	mov	r5, r0
   1b93e:	b1b0      	cbz	r0, 1b96e <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   1b940:	2823      	cmp	r0, #35	; 0x23
   1b942:	f000 80af 	beq.w	1baa4 <nrf91_socket_offload_getaddrinfo+0x1b6>
   1b946:	dc0a      	bgt.n	1b95e <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   1b948:	280c      	cmp	r0, #12
   1b94a:	bf08      	it	eq
   1b94c:	f06f 0509 	mvneq.w	r5, #9
   1b950:	bf18      	it	ne
   1b952:	f06f 050a 	mvnne.w	r5, #10
}
   1b956:	4628      	mov	r0, r5
   1b958:	b013      	add	sp, #76	; 0x4c
   1b95a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   1b95e:	282f      	cmp	r0, #47	; 0x2f
   1b960:	f000 80a3 	beq.w	1baaa <nrf91_socket_offload_getaddrinfo+0x1bc>
		return DNS_EAI_SYSTEM;
   1b964:	2873      	cmp	r0, #115	; 0x73
   1b966:	bf08      	it	eq
   1b968:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   1b96c:	e7f0      	b.n	1b950 <nrf91_socket_offload_getaddrinfo+0x62>
	struct addrinfo *latest_z_res = NULL;
   1b96e:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1b970:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1b972:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1b974:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1b976:	b91e      	cbnz	r6, 1b980 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   1b978:	9801      	ldr	r0, [sp, #4]
   1b97a:	f7f8 fdfb 	bl	14574 <nrf_freeaddrinfo>
	return retval;
   1b97e:	e7ea      	b.n	1b956 <nrf91_socket_offload_getaddrinfo+0x68>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1b980:	2020      	movs	r0, #32
   1b982:	f7fc fd79 	bl	18478 <k_malloc>
		if (next_z_res == NULL) {
   1b986:	4604      	mov	r4, r0
   1b988:	2800      	cmp	r0, #0
   1b98a:	d07a      	beq.n	1ba82 <nrf91_socket_offload_getaddrinfo+0x194>
	family = nrf_to_z_family(nrf_in->ai_family);
   1b98c:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1b98e:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1b990:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1b992:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1b996:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1b99a:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1b99c:	d033      	beq.n	1ba06 <nrf91_socket_offload_getaddrinfo+0x118>
   1b99e:	dc09      	bgt.n	1b9b4 <nrf91_socket_offload_getaddrinfo+0xc6>
   1b9a0:	2a01      	cmp	r2, #1
   1b9a2:	d032      	beq.n	1ba0a <nrf91_socket_offload_getaddrinfo+0x11c>
   1b9a4:	2a02      	cmp	r2, #2
   1b9a6:	d032      	beq.n	1ba0e <nrf91_socket_offload_getaddrinfo+0x120>
			k_free(next_z_res);
   1b9a8:	4620      	mov	r0, r4
   1b9aa:	f000 fa22 	bl	1bdf2 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1b9ae:	f06f 0508 	mvn.w	r5, #8
   1b9b2:	e068      	b.n	1ba86 <nrf91_socket_offload_getaddrinfo+0x198>
	switch (nrf_family) {
   1b9b4:	2a0a      	cmp	r2, #10
   1b9b6:	d02c      	beq.n	1ba12 <nrf91_socket_offload_getaddrinfo+0x124>
   1b9b8:	2a66      	cmp	r2, #102	; 0x66
   1b9ba:	d1f5      	bne.n	1b9a8 <nrf91_socket_offload_getaddrinfo+0xba>
		return AF_LTE;
   1b9bc:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1b9be:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1b9c0:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1b9c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1b9c6:	d045      	beq.n	1ba54 <nrf91_socket_offload_getaddrinfo+0x166>
   1b9c8:	dc25      	bgt.n	1ba16 <nrf91_socket_offload_getaddrinfo+0x128>
   1b9ca:	2b01      	cmp	r3, #1
   1b9cc:	d047      	beq.n	1ba5e <nrf91_socket_offload_getaddrinfo+0x170>
   1b9ce:	2b02      	cmp	r3, #2
   1b9d0:	d043      	beq.n	1ba5a <nrf91_socket_offload_getaddrinfo+0x16c>
   1b9d2:	bb43      	cbnz	r3, 1ba26 <nrf91_socket_offload_getaddrinfo+0x138>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1b9d4:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1b9d6:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1b9d8:	d143      	bne.n	1ba62 <nrf91_socket_offload_getaddrinfo+0x174>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1b9da:	2008      	movs	r0, #8
   1b9dc:	f7fc fd4c 	bl	18478 <k_malloc>
   1b9e0:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1b9e2:	2800      	cmp	r0, #0
   1b9e4:	d04a      	beq.n	1ba7c <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1b9e6:	2308      	movs	r3, #8
   1b9e8:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1b9ea:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1b9ec:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1b9ee:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1b9f0:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1b9f2:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1b9f4:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1b9f6:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1b9f8:	f1b8 0f00 	cmp.w	r8, #0
   1b9fc:	d149      	bne.n	1ba92 <nrf91_socket_offload_getaddrinfo+0x1a4>
			*res = next_z_res;
   1b9fe:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   1ba00:	69f6      	ldr	r6, [r6, #28]
   1ba02:	46a0      	mov	r8, r4
   1ba04:	e7b7      	b.n	1b976 <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   1ba06:	2303      	movs	r3, #3
   1ba08:	e7d9      	b.n	1b9be <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_LOCAL;
   1ba0a:	2367      	movs	r3, #103	; 0x67
   1ba0c:	e7d7      	b.n	1b9be <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET;
   1ba0e:	2301      	movs	r3, #1
   1ba10:	e7d5      	b.n	1b9be <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET6;
   1ba12:	2302      	movs	r3, #2
   1ba14:	e7d3      	b.n	1b9be <nrf91_socket_offload_getaddrinfo+0xd0>
	switch (proto) {
   1ba16:	f240 2101 	movw	r1, #513	; 0x201
   1ba1a:	428b      	cmp	r3, r1
   1ba1c:	d0da      	beq.n	1b9d4 <nrf91_socket_offload_getaddrinfo+0xe6>
   1ba1e:	dc0d      	bgt.n	1ba3c <nrf91_socket_offload_getaddrinfo+0x14e>
   1ba20:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1ba24:	d013      	beq.n	1ba4e <nrf91_socket_offload_getaddrinfo+0x160>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ba26:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1ba2a:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1ba2c:	2300      	movs	r3, #0
   1ba2e:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1ba30:	4620      	mov	r0, r4
   1ba32:	f000 f9de 	bl	1bdf2 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1ba36:	f06f 0506 	mvn.w	r5, #6
   1ba3a:	e024      	b.n	1ba86 <nrf91_socket_offload_getaddrinfo+0x198>
	switch (proto) {
   1ba3c:	f240 2102 	movw	r1, #514	; 0x202
   1ba40:	428b      	cmp	r3, r1
   1ba42:	d0c7      	beq.n	1b9d4 <nrf91_socket_offload_getaddrinfo+0xe6>
   1ba44:	f240 2103 	movw	r1, #515	; 0x203
   1ba48:	428b      	cmp	r3, r1
   1ba4a:	d0c3      	beq.n	1b9d4 <nrf91_socket_offload_getaddrinfo+0xe6>
   1ba4c:	e7eb      	b.n	1ba26 <nrf91_socket_offload_getaddrinfo+0x138>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ba4e:	f240 1311 	movw	r3, #273	; 0x111
   1ba52:	e7bf      	b.n	1b9d4 <nrf91_socket_offload_getaddrinfo+0xe6>
   1ba54:	f44f 7381 	mov.w	r3, #258	; 0x102
   1ba58:	e7bc      	b.n	1b9d4 <nrf91_socket_offload_getaddrinfo+0xe6>
   1ba5a:	2311      	movs	r3, #17
   1ba5c:	e7ba      	b.n	1b9d4 <nrf91_socket_offload_getaddrinfo+0xe6>
   1ba5e:	2306      	movs	r3, #6
   1ba60:	e7b8      	b.n	1b9d4 <nrf91_socket_offload_getaddrinfo+0xe6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1ba62:	2a0a      	cmp	r2, #10
   1ba64:	d1e4      	bne.n	1ba30 <nrf91_socket_offload_getaddrinfo+0x142>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1ba66:	2018      	movs	r0, #24
   1ba68:	f7fc fd06 	bl	18478 <k_malloc>
   1ba6c:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1ba6e:	b128      	cbz	r0, 1ba7c <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ba70:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   1ba72:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ba74:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   1ba76:	f7ff ff26 	bl	1b8c6 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   1ba7a:	e7bd      	b.n	1b9f8 <nrf91_socket_offload_getaddrinfo+0x10a>
			k_free(next_z_res);
   1ba7c:	4620      	mov	r0, r4
   1ba7e:	f000 f9b8 	bl	1bdf2 <k_free>
			retval = DNS_EAI_MEMORY;
   1ba82:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   1ba86:	6838      	ldr	r0, [r7, #0]
   1ba88:	f7ff fdf5 	bl	1b676 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1ba8c:	2300      	movs	r3, #0
   1ba8e:	603b      	str	r3, [r7, #0]
   1ba90:	e772      	b.n	1b978 <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   1ba92:	f8c8 401c 	str.w	r4, [r8, #28]
   1ba96:	e7b3      	b.n	1ba00 <nrf91_socket_offload_getaddrinfo+0x112>
			return DNS_EAI_SOCKTYPE;
   1ba98:	f06f 0506 	mvn.w	r5, #6
   1ba9c:	e75b      	b.n	1b956 <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   1ba9e:	f06f 0508 	mvn.w	r5, #8
   1baa2:	e758      	b.n	1b956 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   1baa4:	f06f 0502 	mvn.w	r5, #2
   1baa8:	e755      	b.n	1b956 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   1baaa:	f06f 0501 	mvn.w	r5, #1
   1baae:	e752      	b.n	1b956 <nrf91_socket_offload_getaddrinfo+0x68>

0001bab0 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1bab0:	2224      	movs	r2, #36	; 0x24
{
   1bab2:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1bab4:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   1bab6:	8842      	ldrh	r2, [r0, #2]
{
   1bab8:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   1baba:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   1babc:	220a      	movs	r2, #10
{
   1babe:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   1bac0:	604a      	str	r2, [r1, #4]
   1bac2:	f101 0610 	add.w	r6, r1, #16
   1bac6:	1d02      	adds	r2, r0, #4
   1bac8:	f100 0714 	add.w	r7, r0, #20
   1bacc:	4635      	mov	r5, r6
   1bace:	6810      	ldr	r0, [r2, #0]
   1bad0:	6851      	ldr	r1, [r2, #4]
   1bad2:	3208      	adds	r2, #8
   1bad4:	c503      	stmia	r5!, {r0, r1}
   1bad6:	42ba      	cmp	r2, r7
   1bad8:	462e      	mov	r6, r5
   1bada:	d1f7      	bne.n	1bacc <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1badc:	7d22      	ldrb	r2, [r4, #20]
   1bade:	621a      	str	r2, [r3, #32]
}
   1bae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001bae2 <nrf91_socket_offload_sendto>:
{
   1bae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bae6:	b08d      	sub	sp, #52	; 0x34
   1bae8:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1baea:	4605      	mov	r5, r0
   1baec:	460e      	mov	r6, r1
   1baee:	4617      	mov	r7, r2
   1baf0:	4698      	mov	r8, r3
	if (to == NULL) {
   1baf2:	b96c      	cbnz	r4, 1bb10 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1baf4:	4618      	mov	r0, r3
   1baf6:	f7ff fd74 	bl	1b5e2 <z_to_nrf_flags>
   1bafa:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1bafe:	4603      	mov	r3, r0
   1bb00:	463a      	mov	r2, r7
   1bb02:	4631      	mov	r1, r6
   1bb04:	4628      	mov	r0, r5
   1bb06:	f7f8 fc45 	bl	14394 <nrf_sendto>
}
   1bb0a:	b00d      	add	sp, #52	; 0x34
   1bb0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1bb10:	8823      	ldrh	r3, [r4, #0]
   1bb12:	2b01      	cmp	r3, #1
   1bb14:	d110      	bne.n	1bb38 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1bb16:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1bb18:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1bb1a:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1bb1e:	2302      	movs	r3, #2
   1bb20:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1bb22:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1bb24:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1bb26:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1bb28:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1bb2c:	f7ff fd59 	bl	1b5e2 <z_to_nrf_flags>
   1bb30:	ab03      	add	r3, sp, #12
   1bb32:	9101      	str	r1, [sp, #4]
   1bb34:	9300      	str	r3, [sp, #0]
   1bb36:	e7e2      	b.n	1bafe <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1bb38:	2b02      	cmp	r3, #2
   1bb3a:	d10c      	bne.n	1bb56 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   1bb3c:	f10d 090c 	add.w	r9, sp, #12
   1bb40:	4649      	mov	r1, r9
   1bb42:	4620      	mov	r0, r4
   1bb44:	f7ff ffb4 	bl	1bab0 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1bb48:	4640      	mov	r0, r8
   1bb4a:	f7ff fd4a 	bl	1b5e2 <z_to_nrf_flags>
   1bb4e:	2324      	movs	r3, #36	; 0x24
   1bb50:	e9cd 9300 	strd	r9, r3, [sp]
   1bb54:	e7d3      	b.n	1bafe <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   1bb56:	f7ff fb1d 	bl	1b194 <__errno>
   1bb5a:	2386      	movs	r3, #134	; 0x86
   1bb5c:	6003      	str	r3, [r0, #0]
	return retval;
   1bb5e:	f04f 30ff 	mov.w	r0, #4294967295
   1bb62:	e7d2      	b.n	1bb0a <nrf91_socket_offload_sendto+0x28>

0001bb64 <nrf91_socket_offload_recvfrom>:
{
   1bb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb68:	4605      	mov	r5, r0
   1bb6a:	b08c      	sub	sp, #48	; 0x30
   1bb6c:	4618      	mov	r0, r3
   1bb6e:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1bb72:	4690      	mov	r8, r2
	if (from == NULL) {
   1bb74:	f7ff fd35 	bl	1b5e2 <z_to_nrf_flags>
   1bb78:	4603      	mov	r3, r0
   1bb7a:	b954      	cbnz	r4, 1bb92 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1bb7c:	4628      	mov	r0, r5
   1bb7e:	e9cd 4400 	strd	r4, r4, [sp]
   1bb82:	4642      	mov	r2, r8
   1bb84:	f7f8 fc3c 	bl	14400 <nrf_recvfrom>
   1bb88:	4605      	mov	r5, r0
}
   1bb8a:	4628      	mov	r0, r5
   1bb8c:	b00c      	add	sp, #48	; 0x30
   1bb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1bb92:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1bb94:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1bb96:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1bb98:	aa02      	add	r2, sp, #8
   1bb9a:	9201      	str	r2, [sp, #4]
   1bb9c:	4628      	mov	r0, r5
   1bb9e:	9700      	str	r7, [sp, #0]
   1bba0:	4642      	mov	r2, r8
   1bba2:	f7f8 fc2d 	bl	14400 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1bba6:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1bba8:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1bbaa:	2b02      	cmp	r3, #2
   1bbac:	d109      	bne.n	1bbc2 <nrf91_socket_offload_recvfrom+0x5e>
	ptr->sin_port = nrf_in->sin_port;
   1bbae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1bbb2:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1bbb4:	2301      	movs	r3, #1
   1bbb6:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1bbb8:	9b06      	ldr	r3, [sp, #24]
   1bbba:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1bbbc:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1bbbe:	6033      	str	r3, [r6, #0]
	return retval;
   1bbc0:	e7e3      	b.n	1bb8a <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1bbc2:	2b0a      	cmp	r3, #10
   1bbc4:	d1e1      	bne.n	1bb8a <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   1bbc6:	4639      	mov	r1, r7
   1bbc8:	4620      	mov	r0, r4
   1bbca:	f7ff fe7c 	bl	1b8c6 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   1bbce:	2318      	movs	r3, #24
   1bbd0:	e7f5      	b.n	1bbbe <nrf91_socket_offload_recvfrom+0x5a>

0001bbd2 <nrf91_socket_offload_connect>:
{
   1bbd2:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   1bbd4:	880c      	ldrh	r4, [r1, #0]
{
   1bbd6:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   1bbd8:	2c01      	cmp	r4, #1
{
   1bbda:	4605      	mov	r5, r0
   1bbdc:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   1bbde:	d10e      	bne.n	1bbfe <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1bbe0:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1bbe2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1bbe4:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1bbe8:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1bbea:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   1bbec:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1bbee:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1bbf2:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1bbf4:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1bbf6:	f7f8 fc39 	bl	1446c <nrf_connect>
}
   1bbfa:	b00b      	add	sp, #44	; 0x2c
   1bbfc:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   1bbfe:	2c02      	cmp	r4, #2
   1bc00:	d107      	bne.n	1bc12 <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   1bc02:	a901      	add	r1, sp, #4
   1bc04:	4618      	mov	r0, r3
   1bc06:	f7ff ff53 	bl	1bab0 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1bc0a:	2224      	movs	r2, #36	; 0x24
   1bc0c:	a901      	add	r1, sp, #4
   1bc0e:	4628      	mov	r0, r5
   1bc10:	e7f1      	b.n	1bbf6 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1bc12:	f7f8 fc2b 	bl	1446c <nrf_connect>
		if (retval < 0) {
   1bc16:	2800      	cmp	r0, #0
   1bc18:	daef      	bge.n	1bbfa <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1bc1a:	f7ff fabb 	bl	1b194 <__errno>
   1bc1e:	2386      	movs	r3, #134	; 0x86
   1bc20:	6003      	str	r3, [r0, #0]
   1bc22:	f04f 30ff 	mov.w	r0, #4294967295
   1bc26:	e7e8      	b.n	1bbfa <nrf91_socket_offload_connect+0x28>

0001bc28 <nrf91_socket_offload_accept>:
{
   1bc28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc2a:	4616      	mov	r6, r2
   1bc2c:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   1bc2e:	460c      	mov	r4, r1
   1bc30:	b1f1      	cbz	r1, 1bc70 <nrf91_socket_offload_accept+0x48>
   1bc32:	b302      	cbz	r2, 1bc76 <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1bc34:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1bc36:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1bc38:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1bc3a:	bf0c      	ite	eq
   1bc3c:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1bc3e:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1bc40:	ad01      	add	r5, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1bc42:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1bc44:	4629      	mov	r1, r5
   1bc46:	f7f8 fc33 	bl	144b0 <nrf_accept>
	if (retval < 0) {
   1bc4a:	1e07      	subs	r7, r0, #0
   1bc4c:	db22      	blt.n	1bc94 <nrf91_socket_offload_accept+0x6c>
	if ((addr != NULL) && (addrlen != NULL)) {
   1bc4e:	b164      	cbz	r4, 1bc6a <nrf91_socket_offload_accept+0x42>
   1bc50:	b15e      	cbz	r6, 1bc6a <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1bc52:	686b      	ldr	r3, [r5, #4]
   1bc54:	2b02      	cmp	r3, #2
   1bc56:	d110      	bne.n	1bc7a <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   1bc58:	2308      	movs	r3, #8
   1bc5a:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1bc5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1bc60:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1bc62:	2301      	movs	r3, #1
   1bc64:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1bc66:	9b04      	ldr	r3, [sp, #16]
   1bc68:	6063      	str	r3, [r4, #4]
}
   1bc6a:	4638      	mov	r0, r7
   1bc6c:	b00b      	add	sp, #44	; 0x2c
   1bc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1bc70:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1bc72:	460d      	mov	r5, r1
   1bc74:	e7e6      	b.n	1bc44 <nrf91_socket_offload_accept+0x1c>
   1bc76:	4615      	mov	r5, r2
   1bc78:	e7e4      	b.n	1bc44 <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1bc7a:	2b0a      	cmp	r3, #10
   1bc7c:	d106      	bne.n	1bc8c <nrf91_socket_offload_accept+0x64>
			*addrlen = sizeof(struct sockaddr_in6);
   1bc7e:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1bc80:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   1bc82:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   1bc84:	4620      	mov	r0, r4
   1bc86:	f7ff fe1e 	bl	1b8c6 <nrf_to_z_ipv6>
   1bc8a:	e7ee      	b.n	1bc6a <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   1bc8c:	f7ff fa82 	bl	1b194 <__errno>
   1bc90:	2386      	movs	r3, #134	; 0x86
   1bc92:	6003      	str	r3, [r0, #0]
		return -1;
   1bc94:	f04f 37ff 	mov.w	r7, #4294967295
   1bc98:	e7e7      	b.n	1bc6a <nrf91_socket_offload_accept+0x42>

0001bc9a <nrf91_socket_offload_socket>:
{
   1bc9a:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1bc9c:	b280      	uxth	r0, r0
   1bc9e:	f7ff fcaa 	bl	1b5f6 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1bca2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   1bca6:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1bca8:	d106      	bne.n	1bcb8 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1bcaa:	f7ff fa73 	bl	1b194 <__errno>
   1bcae:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   1bcb0:	6003      	str	r3, [r0, #0]
}
   1bcb2:	f04f 30ff 	mov.w	r0, #4294967295
   1bcb6:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1bcb8:	2903      	cmp	r1, #3
   1bcba:	d003      	beq.n	1bcc4 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1bcbc:	2904      	cmp	r1, #4
   1bcbe:	bf08      	it	eq
   1bcc0:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1bcc4:	4610      	mov	r0, r2
   1bcc6:	f7ff fcac 	bl	1b622 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1bcca:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   1bcce:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1bcd0:	d103      	bne.n	1bcda <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1bcd2:	f7ff fa5f 	bl	1b194 <__errno>
   1bcd6:	237b      	movs	r3, #123	; 0x7b
   1bcd8:	e7ea      	b.n	1bcb0 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1bcda:	4620      	mov	r0, r4
}
   1bcdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1bce0:	f7f8 bb38 	b.w	14354 <nrf_socket>

0001bce4 <nrf91_socket_offload_setsockopt>:
{
   1bce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1bce8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1bcec:	b086      	sub	sp, #24
   1bcee:	4680      	mov	r8, r0
   1bcf0:	460c      	mov	r4, r1
   1bcf2:	4617      	mov	r7, r2
   1bcf4:	461d      	mov	r5, r3
   1bcf6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1bcf8:	d002      	beq.n	1bd00 <nrf91_socket_offload_setsockopt+0x1c>
   1bcfa:	dc1c      	bgt.n	1bd36 <nrf91_socket_offload_setsockopt+0x52>
   1bcfc:	2901      	cmp	r1, #1
   1bcfe:	d122      	bne.n	1bd46 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1bd00:	aa03      	add	r2, sp, #12
   1bd02:	4639      	mov	r1, r7
   1bd04:	4620      	mov	r0, r4
   1bd06:	f7f3 fc15 	bl	f534 <z_to_nrf_optname>
   1bd0a:	2800      	cmp	r0, #0
   1bd0c:	db1b      	blt.n	1bd46 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1bd0e:	2c01      	cmp	r4, #1
   1bd10:	d107      	bne.n	1bd22 <nrf91_socket_offload_setsockopt+0x3e>
   1bd12:	2f14      	cmp	r7, #20
   1bd14:	d105      	bne.n	1bd22 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1bd16:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1bd18:	682b      	ldr	r3, [r5, #0]
   1bd1a:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1bd1c:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1bd1e:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1bd20:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1bd22:	9600      	str	r6, [sp, #0]
   1bd24:	462b      	mov	r3, r5
   1bd26:	9a03      	ldr	r2, [sp, #12]
   1bd28:	4621      	mov	r1, r4
   1bd2a:	4640      	mov	r0, r8
   1bd2c:	f7f8 fbe8 	bl	14500 <nrf_setsockopt>
}
   1bd30:	b006      	add	sp, #24
   1bd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1bd36:	f240 2302 	movw	r3, #514	; 0x202
   1bd3a:	4299      	cmp	r1, r3
   1bd3c:	d0e0      	beq.n	1bd00 <nrf91_socket_offload_setsockopt+0x1c>
   1bd3e:	f240 2303 	movw	r3, #515	; 0x203
   1bd42:	4299      	cmp	r1, r3
   1bd44:	e7db      	b.n	1bcfe <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1bd46:	f7ff fa25 	bl	1b194 <__errno>
   1bd4a:	236d      	movs	r3, #109	; 0x6d
   1bd4c:	6003      	str	r3, [r0, #0]
   1bd4e:	f04f 30ff 	mov.w	r0, #4294967295
   1bd52:	e7ed      	b.n	1bd30 <nrf91_socket_offload_setsockopt+0x4c>

0001bd54 <nrf91_socket_offload_bind>:
{
   1bd54:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   1bd56:	880a      	ldrh	r2, [r1, #0]
{
   1bd58:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1bd5a:	2a01      	cmp	r2, #1
{
   1bd5c:	4604      	mov	r4, r0
   1bd5e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   1bd60:	d10e      	bne.n	1bd80 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1bd62:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1bd64:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1bd66:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1bd6a:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1bd6c:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   1bd6e:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1bd70:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1bd74:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1bd76:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1bd78:	f7f8 fbb0 	bl	144dc <nrf_bind>
}
   1bd7c:	b00a      	add	sp, #40	; 0x28
   1bd7e:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   1bd80:	2a02      	cmp	r2, #2
   1bd82:	d107      	bne.n	1bd94 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   1bd84:	a901      	add	r1, sp, #4
   1bd86:	4618      	mov	r0, r3
   1bd88:	f7ff fe92 	bl	1bab0 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1bd8c:	2224      	movs	r2, #36	; 0x24
   1bd8e:	a901      	add	r1, sp, #4
   1bd90:	4620      	mov	r0, r4
   1bd92:	e7f1      	b.n	1bd78 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1bd94:	f7ff f9fe 	bl	1b194 <__errno>
   1bd98:	2386      	movs	r3, #134	; 0x86
   1bd9a:	6003      	str	r3, [r0, #0]
   1bd9c:	f04f 30ff 	mov.w	r0, #4294967295
   1bda0:	e7ec      	b.n	1bd7c <nrf91_socket_offload_bind+0x28>

0001bda2 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1bda2:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   1bda4:	2000      	movs	r0, #0
   1bda6:	f7f2 fc71 	bl	e68c <sys_arch_reboot>

0001bdaa <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bdaa:	b570      	push	{r4, r5, r6, lr}
   1bdac:	4605      	mov	r5, r0
   1bdae:	460e      	mov	r6, r1
	return z_impl_k_current_get();
   1bdb0:	f7fd f84c 	bl	18e4c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1bdb4:	4631      	mov	r1, r6
   1bdb6:	4604      	mov	r4, r0
   1bdb8:	4628      	mov	r0, r5
   1bdba:	f7ff fff2 	bl	1bda2 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   1bdbe:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1bdc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bdc4:	f7f2 bc80 	b.w	e6c8 <z_impl_k_thread_abort>

0001bdc8 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1bdc8:	f7ff b984 	b.w	1b0d4 <z_clock_idle_exit>

0001bdcc <k_mem_pool_malloc>:
{
   1bdcc:	b507      	push	{r0, r1, r2, lr}
   1bdce:	2204      	movs	r2, #4
   1bdd0:	188a      	adds	r2, r1, r2
   1bdd2:	d204      	bcs.n	1bdde <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1bdd4:	2300      	movs	r3, #0
   1bdd6:	4669      	mov	r1, sp
   1bdd8:	f7fc fad6 	bl	18388 <k_mem_pool_alloc>
   1bddc:	b118      	cbz	r0, 1bde6 <k_mem_pool_malloc+0x1a>
		return NULL;
   1bdde:	2000      	movs	r0, #0
}
   1bde0:	b003      	add	sp, #12
   1bde2:	f85d fb04 	ldr.w	pc, [sp], #4
   1bde6:	e9dd 3200 	ldrd	r3, r2, [sp]
   1bdea:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1bdec:	9800      	ldr	r0, [sp, #0]
   1bdee:	3004      	adds	r0, #4
   1bdf0:	e7f6      	b.n	1bde0 <k_mem_pool_malloc+0x14>

0001bdf2 <k_free>:
	if (ptr != NULL) {
   1bdf2:	b110      	cbz	r0, 1bdfa <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1bdf4:	3804      	subs	r0, #4
   1bdf6:	f7fc bb13 	b.w	18420 <k_mem_pool_free_id>
}
   1bdfa:	4770      	bx	lr

0001bdfc <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1bdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be00:	4604      	mov	r4, r0
   1be02:	460f      	mov	r7, r1
   1be04:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1be06:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1be0a:	f04f 0220 	mov.w	r2, #32
   1be0e:	f3ef 8611 	mrs	r6, BASEPRI
   1be12:	f382 8811 	msr	BASEPRI, r2
   1be16:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1be1a:	b1db      	cbz	r3, 1be54 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1be1c:	2008      	movs	r0, #8
   1be1e:	f7fc fb31 	bl	18484 <z_thread_malloc>
		if (anode == NULL) {
   1be22:	b938      	cbnz	r0, 1be34 <queue_insert+0x38>
	__asm__ volatile(
   1be24:	f386 8811 	msr	BASEPRI, r6
   1be28:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1be2c:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1be30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1be34:	2301      	movs	r3, #1
		anode->data = data;
   1be36:	f8c0 8004 	str.w	r8, [r0, #4]
   1be3a:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1be3c:	6803      	ldr	r3, [r0, #0]
   1be3e:	f003 0203 	and.w	r2, r3, #3
   1be42:	b95f      	cbnz	r7, 1be5c <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1be44:	6823      	ldr	r3, [r4, #0]
   1be46:	4313      	orrs	r3, r2
   1be48:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1be4a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1be4c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1be4e:	b973      	cbnz	r3, 1be6e <queue_insert+0x72>
	list->tail = node;
   1be50:	6060      	str	r0, [r4, #4]
   1be52:	e00c      	b.n	1be6e <queue_insert+0x72>
	node->next_and_flags = flags;
   1be54:	f8c8 3000 	str.w	r3, [r8]
   1be58:	4640      	mov	r0, r8
   1be5a:	e7ef      	b.n	1be3c <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1be5c:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1be5e:	f033 0303 	bics.w	r3, r3, #3
   1be62:	d114      	bne.n	1be8e <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1be64:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1be66:	6862      	ldr	r2, [r4, #4]
   1be68:	b95a      	cbnz	r2, 1be82 <queue_insert+0x86>
	list->head = node;
   1be6a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1be6e:	2104      	movs	r1, #4
   1be70:	4628      	mov	r0, r5
   1be72:	f000 fac9 	bl	1c408 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1be76:	4628      	mov	r0, r5
   1be78:	4631      	mov	r1, r6
   1be7a:	f000 f8a0 	bl	1bfbe <z_reschedule>
	return 0;
   1be7e:	2000      	movs	r0, #0
   1be80:	e7d6      	b.n	1be30 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1be82:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1be84:	f003 0303 	and.w	r3, r3, #3
   1be88:	4303      	orrs	r3, r0
   1be8a:	6013      	str	r3, [r2, #0]
   1be8c:	e7e0      	b.n	1be50 <queue_insert+0x54>
   1be8e:	4313      	orrs	r3, r2
   1be90:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1be92:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1be94:	f003 0303 	and.w	r3, r3, #3
   1be98:	4318      	orrs	r0, r3
   1be9a:	6038      	str	r0, [r7, #0]
   1be9c:	e7e7      	b.n	1be6e <queue_insert+0x72>

0001be9e <z_queue_node_peek>:
{
   1be9e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1bea0:	4604      	mov	r4, r0
   1bea2:	b130      	cbz	r0, 1beb2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1bea4:	6802      	ldr	r2, [r0, #0]
   1bea6:	0793      	lsls	r3, r2, #30
   1bea8:	d003      	beq.n	1beb2 <z_queue_node_peek+0x14>
		ret = anode->data;
   1beaa:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1beac:	b109      	cbz	r1, 1beb2 <z_queue_node_peek+0x14>
			k_free(anode);
   1beae:	f7ff ffa0 	bl	1bdf2 <k_free>
}
   1beb2:	4620      	mov	r0, r4
   1beb4:	bd10      	pop	{r4, pc}

0001beb6 <z_impl_k_queue_init>:
	list->head = NULL;
   1beb6:	2300      	movs	r3, #0
	list->tail = NULL;
   1beb8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1bebc:	f100 0308 	add.w	r3, r0, #8
	list->tail = (sys_dnode_t *)list;
   1bec0:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1bec4:	4770      	bx	lr

0001bec6 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1bec6:	460a      	mov	r2, r1
   1bec8:	2300      	movs	r3, #0
   1beca:	6841      	ldr	r1, [r0, #4]
   1becc:	f7ff bf96 	b.w	1bdfc <queue_insert>

0001bed0 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1bed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bed4:	4604      	mov	r4, r0
   1bed6:	b086      	sub	sp, #24
   1bed8:	460d      	mov	r5, r1
	__asm__ volatile(
   1beda:	f04f 0320 	mov.w	r3, #32
   1bede:	f3ef 8711 	mrs	r7, BASEPRI
   1bee2:	f383 8811 	msr	BASEPRI, r3
   1bee6:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1beea:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1beec:	b188      	cbz	r0, 1bf12 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1beee:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bef0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bef2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bef6:	4290      	cmp	r0, r2
	list->head = node;
   1bef8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1befa:	bf08      	it	eq
   1befc:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1befe:	2101      	movs	r1, #1
   1bf00:	f7ff ffcd 	bl	1be9e <z_queue_node_peek>
	__asm__ volatile(
   1bf04:	f387 8811 	msr	BASEPRI, r7
   1bf08:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1bf0c:	b006      	add	sp, #24
   1bf0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1bf12:	2900      	cmp	r1, #0
   1bf14:	d0f6      	beq.n	1bf04 <z_impl_k_queue_get+0x34>
   1bf16:	f387 8811 	msr	BASEPRI, r7
   1bf1a:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1bf1e:	2104      	movs	r1, #4
   1bf20:	4602      	mov	r2, r0
   1bf22:	4623      	mov	r3, r4
   1bf24:	eb0d 0001 	add.w	r0, sp, r1
   1bf28:	f7fd f9fa 	bl	19320 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1bf2c:	1c6a      	adds	r2, r5, #1
   1bf2e:	d002      	beq.n	1bf36 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1bf30:	f000 f96a 	bl	1c208 <z_impl_k_uptime_get>
   1bf34:	4606      	mov	r6, r0
{
   1bf36:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1bf38:	9b04      	ldr	r3, [sp, #16]
   1bf3a:	f36f 3310 	bfc	r3, #12, #5
   1bf3e:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1bf40:	2101      	movs	r1, #1
   1bf42:	1bea      	subs	r2, r5, r7
   1bf44:	a801      	add	r0, sp, #4
   1bf46:	f7fd f9ff 	bl	19348 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1bf4a:	b118      	cbz	r0, 1bf54 <z_impl_k_queue_get+0x84>
   1bf4c:	300b      	adds	r0, #11
   1bf4e:	d001      	beq.n	1bf54 <z_impl_k_queue_get+0x84>
			return NULL;
   1bf50:	2000      	movs	r0, #0
   1bf52:	e7db      	b.n	1bf0c <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1bf54:	f04f 0320 	mov.w	r3, #32
   1bf58:	f3ef 8811 	mrs	r8, BASEPRI
   1bf5c:	f383 8811 	msr	BASEPRI, r3
   1bf60:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1bf64:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1bf66:	b138      	cbz	r0, 1bf78 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bf68:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bf6a:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bf6c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bf70:	4290      	cmp	r0, r2
	list->head = node;
   1bf72:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1bf74:	bf08      	it	eq
   1bf76:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1bf78:	2101      	movs	r1, #1
   1bf7a:	f7ff ff90 	bl	1be9e <z_queue_node_peek>
	__asm__ volatile(
   1bf7e:	f388 8811 	msr	BASEPRI, r8
   1bf82:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1bf86:	2800      	cmp	r0, #0
   1bf88:	d1c0      	bne.n	1bf0c <z_impl_k_queue_get+0x3c>
   1bf8a:	1c6b      	adds	r3, r5, #1
   1bf8c:	d0d4      	beq.n	1bf38 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1bf8e:	f000 f93b 	bl	1c208 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1bf92:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1bf94:	42bd      	cmp	r5, r7
   1bf96:	dacf      	bge.n	1bf38 <z_impl_k_queue_get+0x68>
   1bf98:	e7da      	b.n	1bf50 <z_impl_k_queue_get+0x80>

0001bf9a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bf9a:	7b43      	ldrb	r3, [r0, #13]
   1bf9c:	06db      	lsls	r3, r3, #27
   1bf9e:	bf03      	ittte	eq
   1bfa0:	6980      	ldreq	r0, [r0, #24]
   1bfa2:	fab0 f080 	clzeq	r0, r0
   1bfa6:	0940      	lsreq	r0, r0, #5
   1bfa8:	2000      	movne	r0, #0
}
   1bfaa:	4770      	bx	lr

0001bfac <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1bfac:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1bfb0:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1bfb4:	4298      	cmp	r0, r3
   1bfb6:	bfac      	ite	ge
   1bfb8:	2000      	movge	r0, #0
   1bfba:	2001      	movlt	r0, #1
   1bfbc:	4770      	bx	lr

0001bfbe <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1bfbe:	b921      	cbnz	r1, 1bfca <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bfc0:	f3ef 8005 	mrs	r0, IPSR
   1bfc4:	b908      	cbnz	r0, 1bfca <z_reschedule+0xc>
   1bfc6:	f7f2 b9b3 	b.w	e330 <arch_swap>
   1bfca:	f381 8811 	msr	BASEPRI, r1
   1bfce:	f3bf 8f6f 	isb	sy
}
   1bfd2:	4770      	bx	lr

0001bfd4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1bfd4:	4603      	mov	r3, r0
   1bfd6:	b920      	cbnz	r0, 1bfe2 <z_reschedule_irqlock+0xe>
   1bfd8:	f3ef 8205 	mrs	r2, IPSR
   1bfdc:	b90a      	cbnz	r2, 1bfe2 <z_reschedule_irqlock+0xe>
   1bfde:	f7f2 b9a7 	b.w	e330 <arch_swap>
   1bfe2:	f383 8811 	msr	BASEPRI, r3
   1bfe6:	f3bf 8f6f 	isb	sy
}
   1bfea:	4770      	bx	lr

0001bfec <z_reschedule_unlocked>:
	__asm__ volatile(
   1bfec:	f04f 0320 	mov.w	r3, #32
   1bff0:	f3ef 8011 	mrs	r0, BASEPRI
   1bff4:	f383 8811 	msr	BASEPRI, r3
   1bff8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1bffc:	f7ff bfea 	b.w	1bfd4 <z_reschedule_irqlock>

0001c000 <z_unpend_thread>:
{
   1c000:	b538      	push	{r3, r4, r5, lr}
   1c002:	4604      	mov	r4, r0
   1c004:	f04f 0320 	mov.w	r3, #32
   1c008:	f3ef 8511 	mrs	r5, BASEPRI
   1c00c:	f383 8811 	msr	BASEPRI, r3
   1c010:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1c014:	4601      	mov	r1, r0
   1c016:	6880      	ldr	r0, [r0, #8]
   1c018:	f7fc fc0e 	bl	18838 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c01c:	7b63      	ldrb	r3, [r4, #13]
   1c01e:	f023 0302 	bic.w	r3, r3, #2
   1c022:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1c024:	f385 8811 	msr	BASEPRI, r5
   1c028:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1c02c:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1c02e:	f104 0018 	add.w	r0, r4, #24
   1c032:	60a3      	str	r3, [r4, #8]
}
   1c034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c038:	f000 b8a2 	b.w	1c180 <z_abort_timeout>

0001c03c <z_priq_dumb_best>:
	return list->head == list;
   1c03c:	6803      	ldr	r3, [r0, #0]
}
   1c03e:	4298      	cmp	r0, r3
   1c040:	bf14      	ite	ne
   1c042:	4618      	movne	r0, r3
   1c044:	2000      	moveq	r0, #0
   1c046:	4770      	bx	lr

0001c048 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   1c048:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1c04c:	b570      	push	{r4, r5, r6, lr}
   1c04e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1c050:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   1c054:	b1cb      	cbz	r3, 1c08a <z_thread_timeout+0x42>
	__asm__ volatile(
   1c056:	f04f 0320 	mov.w	r3, #32
   1c05a:	f3ef 8611 	mrs	r6, BASEPRI
   1c05e:	f383 8811 	msr	BASEPRI, r3
   1c062:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1c066:	4629      	mov	r1, r5
   1c068:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1c06c:	f7fc fbe4 	bl	18838 <z_priq_dumb_remove>
   1c070:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1c074:	f023 0302 	bic.w	r3, r3, #2
   1c078:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1c07c:	f386 8811 	msr	BASEPRI, r6
   1c080:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1c084:	2300      	movs	r3, #0
   1c086:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1c08a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1c08e:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1c090:	f023 0314 	bic.w	r3, r3, #20
   1c094:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1c098:	f7ff ff7f 	bl	1bf9a <z_is_thread_ready>
   1c09c:	b120      	cbz	r0, 1c0a8 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1c09e:	4628      	mov	r0, r5
}
   1c0a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c0a4:	f7fc bc18 	b.w	188d8 <z_add_thread_to_ready_q>
   1c0a8:	bd70      	pop	{r4, r5, r6, pc}

0001c0aa <z_unpend_first_thread>:
{
   1c0aa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1c0ac:	f04f 0320 	mov.w	r3, #32
   1c0b0:	f3ef 8211 	mrs	r2, BASEPRI
   1c0b4:	f383 8811 	msr	BASEPRI, r3
   1c0b8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1c0bc:	f7ff ffbe 	bl	1c03c <z_priq_dumb_best>
   1c0c0:	4604      	mov	r4, r0
	__asm__ volatile(
   1c0c2:	f382 8811 	msr	BASEPRI, r2
   1c0c6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1c0ca:	b1c8      	cbz	r0, 1c100 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1c0cc:	f04f 0320 	mov.w	r3, #32
   1c0d0:	f3ef 8511 	mrs	r5, BASEPRI
   1c0d4:	f383 8811 	msr	BASEPRI, r3
   1c0d8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1c0dc:	4601      	mov	r1, r0
   1c0de:	6880      	ldr	r0, [r0, #8]
   1c0e0:	f7fc fbaa 	bl	18838 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c0e4:	7b63      	ldrb	r3, [r4, #13]
   1c0e6:	f023 0302 	bic.w	r3, r3, #2
   1c0ea:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1c0ec:	f385 8811 	msr	BASEPRI, r5
   1c0f0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1c0f4:	2300      	movs	r3, #0
   1c0f6:	f104 0018 	add.w	r0, r4, #24
   1c0fa:	60a3      	str	r3, [r4, #8]
   1c0fc:	f000 f840 	bl	1c180 <z_abort_timeout>
}
   1c100:	4620      	mov	r0, r4
   1c102:	bd38      	pop	{r3, r4, r5, pc}

0001c104 <z_unpend_all>:
{
   1c104:	b570      	push	{r4, r5, r6, lr}
   1c106:	4606      	mov	r6, r0
	int need_sched = 0;
   1c108:	2500      	movs	r5, #0
   1c10a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c10c:	42a6      	cmp	r6, r4
   1c10e:	d000      	beq.n	1c112 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c110:	b90c      	cbnz	r4, 1c116 <z_unpend_all+0x12>
}
   1c112:	4628      	mov	r0, r5
   1c114:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   1c116:	4620      	mov	r0, r4
   1c118:	f7ff ff72 	bl	1c000 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1c11c:	4620      	mov	r0, r4
   1c11e:	f7ff ff3c 	bl	1bf9a <z_is_thread_ready>
		need_sched = 1;
   1c122:	2501      	movs	r5, #1
   1c124:	2800      	cmp	r0, #0
   1c126:	d0f0      	beq.n	1c10a <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1c128:	4620      	mov	r0, r4
   1c12a:	f7fc fbd5 	bl	188d8 <z_add_thread_to_ready_q>
   1c12e:	e7ec      	b.n	1c10a <z_unpend_all+0x6>

0001c130 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1c130:	b15a      	cbz	r2, 1c14a <z_impl_k_sem_init+0x1a>
   1c132:	428a      	cmp	r2, r1
   1c134:	d309      	bcc.n	1c14a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1c136:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1c13a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1c13e:	e9c0 0000 	strd	r0, r0, [r0]
   1c142:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1c146:	2000      	movs	r0, #0
   1c148:	4770      	bx	lr
		return -EINVAL;
   1c14a:	f06f 0015 	mvn.w	r0, #21
}
   1c14e:	4770      	bx	lr

0001c150 <k_is_in_isr>:
   1c150:	f3ef 8005 	mrs	r0, IPSR
}
   1c154:	3000      	adds	r0, #0
   1c156:	bf18      	it	ne
   1c158:	2001      	movne	r0, #1
   1c15a:	4770      	bx	lr

0001c15c <z_impl_k_thread_name_set>:
}
   1c15c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1c160:	4770      	bx	lr

0001c162 <z_new_thread_init>:
{
   1c162:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1c164:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1c166:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1c168:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1c16a:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1c16c:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1c16e:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1c170:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1c172:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1c176:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1c17a:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1c17e:	bd10      	pop	{r4, pc}

0001c180 <z_abort_timeout>:
{
   1c180:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c182:	f04f 0220 	mov.w	r2, #32
   1c186:	f3ef 8411 	mrs	r4, BASEPRI
   1c18a:	f382 8811 	msr	BASEPRI, r2
   1c18e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1c192:	6803      	ldr	r3, [r0, #0]
   1c194:	b13b      	cbz	r3, 1c1a6 <z_abort_timeout+0x26>
			remove_timeout(to);
   1c196:	f7fc ffdd 	bl	19154 <remove_timeout>
			ret = 0;
   1c19a:	2000      	movs	r0, #0
	__asm__ volatile(
   1c19c:	f384 8811 	msr	BASEPRI, r4
   1c1a0:	f3bf 8f6f 	isb	sy
}
   1c1a4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1c1a6:	f06f 0015 	mvn.w	r0, #21
   1c1aa:	e7f7      	b.n	1c19c <z_abort_timeout+0x1c>

0001c1ac <z_get_next_timeout_expiry>:
{
   1c1ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c1ae:	f04f 0320 	mov.w	r3, #32
   1c1b2:	f3ef 8411 	mrs	r4, BASEPRI
   1c1b6:	f383 8811 	msr	BASEPRI, r3
   1c1ba:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1c1be:	f7fc ffdd 	bl	1917c <next_timeout>
	__asm__ volatile(
   1c1c2:	f384 8811 	msr	BASEPRI, r4
   1c1c6:	f3bf 8f6f 	isb	sy
}
   1c1ca:	bd10      	pop	{r4, pc}

0001c1cc <z_set_timeout_expiry>:
{
   1c1cc:	b570      	push	{r4, r5, r6, lr}
   1c1ce:	4604      	mov	r4, r0
   1c1d0:	460e      	mov	r6, r1
	__asm__ volatile(
   1c1d2:	f04f 0320 	mov.w	r3, #32
   1c1d6:	f3ef 8511 	mrs	r5, BASEPRI
   1c1da:	f383 8811 	msr	BASEPRI, r3
   1c1de:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1c1e2:	f7fc ffcb 	bl	1917c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1c1e6:	2801      	cmp	r0, #1
   1c1e8:	dd05      	ble.n	1c1f6 <z_set_timeout_expiry+0x2a>
   1c1ea:	42a0      	cmp	r0, r4
   1c1ec:	dd03      	ble.n	1c1f6 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1c1ee:	4631      	mov	r1, r6
   1c1f0:	4620      	mov	r0, r4
   1c1f2:	f7f1 ff7d 	bl	e0f0 <z_clock_set_timeout>
	__asm__ volatile(
   1c1f6:	f385 8811 	msr	BASEPRI, r5
   1c1fa:	f3bf 8f6f 	isb	sy
}
   1c1fe:	bd70      	pop	{r4, r5, r6, pc}

0001c200 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1c200:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1c202:	f7fd f86f 	bl	192e4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1c206:	bd08      	pop	{r3, pc}

0001c208 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1c208:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1c20a:	f7fd f86b 	bl	192e4 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1c20e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1c212:	fba0 2304 	umull	r2, r3, r0, r4
   1c216:	fb04 3301 	mla	r3, r4, r1, r3
   1c21a:	0bd0      	lsrs	r0, r2, #15
}
   1c21c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1c220:	0bd9      	lsrs	r1, r3, #15
   1c222:	bd10      	pop	{r4, pc}

0001c224 <clear_event_registrations>:
	while (num_events--) {
   1c224:	2314      	movs	r3, #20
{
   1c226:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1c228:	2400      	movs	r4, #0
   1c22a:	2601      	movs	r6, #1
   1c22c:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1c230:	4281      	cmp	r1, r0
   1c232:	d100      	bne.n	1c236 <clear_event_registrations+0x12>
}
   1c234:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1c236:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1c23a:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1c23e:	f003 030f 	and.w	r3, r3, #15
   1c242:	2b04      	cmp	r3, #4
   1c244:	d80d      	bhi.n	1c262 <clear_event_registrations+0x3e>
   1c246:	fa06 f303 	lsl.w	r3, r6, r3
   1c24a:	f013 0f16 	tst.w	r3, #22
   1c24e:	d008      	beq.n	1c262 <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1c250:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1c254:	b12b      	cbz	r3, 1c262 <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1c256:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1c25a:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1c25c:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1c25e:	e941 4405 	strd	r4, r4, [r1, #-20]
   1c262:	f382 8811 	msr	BASEPRI, r2
   1c266:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c26a:	f04f 0320 	mov.w	r3, #32
   1c26e:	f3ef 8211 	mrs	r2, BASEPRI
   1c272:	f383 8811 	msr	BASEPRI, r3
   1c276:	f3bf 8f6f 	isb	sy
   1c27a:	3914      	subs	r1, #20
   1c27c:	e7d8      	b.n	1c230 <clear_event_registrations+0xc>

0001c27e <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1c27e:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1c280:	6884      	ldr	r4, [r0, #8]
{
   1c282:	4605      	mov	r5, r0
   1c284:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1c286:	b19c      	cbz	r4, 1c2b0 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1c288:	68a3      	ldr	r3, [r4, #8]
   1c28a:	b95b      	cbnz	r3, 1c2a4 <signal_poll_event+0x26>
	int retcode = 0;
   1c28c:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1c28e:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1c290:	2300      	movs	r3, #0
   1c292:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1c294:	68eb      	ldr	r3, [r5, #12]
   1c296:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1c29a:	4316      	orrs	r6, r2
   1c29c:	f366 3310 	bfi	r3, r6, #12, #5
   1c2a0:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1c2a2:	e004      	b.n	1c2ae <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1c2a4:	4798      	blx	r3
		poller->is_polling = false;
   1c2a6:	2300      	movs	r3, #0
		if (retcode < 0) {
   1c2a8:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1c2aa:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1c2ac:	daf0      	bge.n	1c290 <signal_poll_event+0x12>
}
   1c2ae:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1c2b0:	4620      	mov	r0, r4
   1c2b2:	e7ed      	b.n	1c290 <signal_poll_event+0x12>

0001c2b4 <k_poll_poller_cb>:
{
   1c2b4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1c2b6:	6883      	ldr	r3, [r0, #8]
{
   1c2b8:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1c2ba:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1c2bc:	7b63      	ldrb	r3, [r4, #13]
   1c2be:	079a      	lsls	r2, r3, #30
   1c2c0:	d401      	bmi.n	1c2c6 <k_poll_poller_cb+0x12>
		return 0;
   1c2c2:	2000      	movs	r0, #0
}
   1c2c4:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1c2c6:	6a23      	ldr	r3, [r4, #32]
   1c2c8:	3302      	adds	r3, #2
   1c2ca:	d012      	beq.n	1c2f2 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1c2cc:	4620      	mov	r0, r4
   1c2ce:	f7ff fe97 	bl	1c000 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1c2d2:	2d08      	cmp	r5, #8
   1c2d4:	bf0c      	ite	eq
   1c2d6:	f06f 0303 	mvneq.w	r3, #3
   1c2da:	2300      	movne	r3, #0
   1c2dc:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c2de:	7b63      	ldrb	r3, [r4, #13]
   1c2e0:	06db      	lsls	r3, r3, #27
   1c2e2:	d1ee      	bne.n	1c2c2 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1c2e4:	69a5      	ldr	r5, [r4, #24]
   1c2e6:	2d00      	cmp	r5, #0
   1c2e8:	d1eb      	bne.n	1c2c2 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1c2ea:	4620      	mov	r0, r4
   1c2ec:	f7fc faf4 	bl	188d8 <z_add_thread_to_ready_q>
	return 0;
   1c2f0:	e7e7      	b.n	1c2c2 <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1c2f2:	f06f 000a 	mvn.w	r0, #10
   1c2f6:	e7e5      	b.n	1c2c4 <k_poll_poller_cb+0x10>

0001c2f8 <add_event>:
{
   1c2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2fa:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c2fc:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c300:	4290      	cmp	r0, r2
   1c302:	4604      	mov	r4, r0
   1c304:	460d      	mov	r5, r1
   1c306:	d106      	bne.n	1c316 <add_event+0x1e>
	node->prev = list->tail;
   1c308:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1c30a:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1c30c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1c30e:	6863      	ldr	r3, [r4, #4]
   1c310:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1c312:	6065      	str	r5, [r4, #4]
}
   1c314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1c316:	2b00      	cmp	r3, #0
   1c318:	d0f6      	beq.n	1c308 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1c31a:	689b      	ldr	r3, [r3, #8]
   1c31c:	6879      	ldr	r1, [r7, #4]
   1c31e:	6858      	ldr	r0, [r3, #4]
   1c320:	f7ff fe44 	bl	1bfac <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1c324:	2800      	cmp	r0, #0
   1c326:	d1ef      	bne.n	1c308 <add_event+0x10>
	return list->head == list;
   1c328:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c32a:	42b4      	cmp	r4, r6
   1c32c:	d0ec      	beq.n	1c308 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c32e:	2e00      	cmp	r6, #0
   1c330:	d0ea      	beq.n	1c308 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1c332:	68b3      	ldr	r3, [r6, #8]
   1c334:	6878      	ldr	r0, [r7, #4]
   1c336:	6859      	ldr	r1, [r3, #4]
   1c338:	f7ff fe38 	bl	1bfac <z_is_t1_higher_prio_than_t2>
   1c33c:	b128      	cbz	r0, 1c34a <add_event+0x52>
	node->prev = successor->prev;
   1c33e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1c340:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1c344:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1c346:	6075      	str	r5, [r6, #4]
			return;
   1c348:	e7e4      	b.n	1c314 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1c34a:	6863      	ldr	r3, [r4, #4]
   1c34c:	429e      	cmp	r6, r3
   1c34e:	d0db      	beq.n	1c308 <add_event+0x10>
   1c350:	6836      	ldr	r6, [r6, #0]
   1c352:	e7ec      	b.n	1c32e <add_event+0x36>

0001c354 <register_events>:
{
   1c354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1c358:	f04f 0b00 	mov.w	fp, #0
{
   1c35c:	4688      	mov	r8, r1
   1c35e:	4615      	mov	r5, r2
   1c360:	4699      	mov	r9, r3
   1c362:	4604      	mov	r4, r0
	int events_registered = 0;
   1c364:	465e      	mov	r6, fp
	event->poller = NULL;
   1c366:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1c368:	45c3      	cmp	fp, r8
   1c36a:	db02      	blt.n	1c372 <register_events+0x1e>
}
   1c36c:	4630      	mov	r0, r6
   1c36e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c372:	f04f 0320 	mov.w	r3, #32
   1c376:	f3ef 8a11 	mrs	sl, BASEPRI
   1c37a:	f383 8811 	msr	BASEPRI, r3
   1c37e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1c382:	7b63      	ldrb	r3, [r4, #13]
   1c384:	f003 030f 	and.w	r3, r3, #15
   1c388:	2b02      	cmp	r3, #2
   1c38a:	d005      	beq.n	1c398 <register_events+0x44>
   1c38c:	2b04      	cmp	r3, #4
   1c38e:	d006      	beq.n	1c39e <register_events+0x4a>
   1c390:	2b01      	cmp	r3, #1
   1c392:	d118      	bne.n	1c3c6 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1c394:	6922      	ldr	r2, [r4, #16]
   1c396:	e000      	b.n	1c39a <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1c398:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1c39a:	6892      	ldr	r2, [r2, #8]
   1c39c:	e001      	b.n	1c3a2 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1c39e:	6922      	ldr	r2, [r4, #16]
   1c3a0:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1c3a2:	b182      	cbz	r2, 1c3c6 <register_events+0x72>
	event->state |= state;
   1c3a4:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1c3a6:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1c3a8:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1c3ac:	430b      	orrs	r3, r1
   1c3ae:	f363 3210 	bfi	r2, r3, #12, #5
   1c3b2:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1c3b4:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1c3b6:	f38a 8811 	msr	BASEPRI, sl
   1c3ba:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c3be:	f10b 0b01 	add.w	fp, fp, #1
   1c3c2:	3414      	adds	r4, #20
   1c3c4:	e7d0      	b.n	1c368 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1c3c6:	f1b9 0f00 	cmp.w	r9, #0
   1c3ca:	d1f4      	bne.n	1c3b6 <register_events+0x62>
   1c3cc:	782b      	ldrb	r3, [r5, #0]
   1c3ce:	2b00      	cmp	r3, #0
   1c3d0:	d0f1      	beq.n	1c3b6 <register_events+0x62>
	switch (event->type) {
   1c3d2:	7b63      	ldrb	r3, [r4, #13]
   1c3d4:	f003 030f 	and.w	r3, r3, #15
   1c3d8:	2b02      	cmp	r3, #2
   1c3da:	d007      	beq.n	1c3ec <register_events+0x98>
   1c3dc:	2b04      	cmp	r3, #4
   1c3de:	d00e      	beq.n	1c3fe <register_events+0xaa>
   1c3e0:	2b01      	cmp	r3, #1
   1c3e2:	d109      	bne.n	1c3f8 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1c3e4:	462a      	mov	r2, r5
   1c3e6:	4621      	mov	r1, r4
   1c3e8:	6920      	ldr	r0, [r4, #16]
   1c3ea:	e003      	b.n	1c3f4 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1c3ec:	462a      	mov	r2, r5
   1c3ee:	4621      	mov	r1, r4
   1c3f0:	6920      	ldr	r0, [r4, #16]
   1c3f2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1c3f4:	f7ff ff80 	bl	1c2f8 <add_event>
	event->poller = poller;
   1c3f8:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1c3fa:	3601      	adds	r6, #1
   1c3fc:	e7db      	b.n	1c3b6 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1c3fe:	6920      	ldr	r0, [r4, #16]
   1c400:	462a      	mov	r2, r5
   1c402:	4621      	mov	r1, r4
   1c404:	3008      	adds	r0, #8
   1c406:	e7f5      	b.n	1c3f4 <register_events+0xa0>

0001c408 <z_handle_obj_poll_events>:
	return list->head == list;
   1c408:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1c40a:	4298      	cmp	r0, r3
   1c40c:	d009      	beq.n	1c422 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1c40e:	e9d3 2000 	ldrd	r2, r0, [r3]
   1c412:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1c414:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1c416:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1c418:	4618      	mov	r0, r3
	node->prev = NULL;
   1c41a:	e9c3 2200 	strd	r2, r2, [r3]
   1c41e:	f7ff bf2e 	b.w	1c27e <signal_poll_event>
	}
}
   1c422:	4770      	bx	lr

0001c424 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1c424:	4770      	bx	lr

0001c426 <atoi>:
   1c426:	220a      	movs	r2, #10
   1c428:	2100      	movs	r1, #0
   1c42a:	f7fd bd3b 	b.w	19ea4 <strtol>

0001c42e <memchr>:
   1c42e:	b2c9      	uxtb	r1, r1
   1c430:	4402      	add	r2, r0
   1c432:	b510      	push	{r4, lr}
   1c434:	4290      	cmp	r0, r2
   1c436:	4603      	mov	r3, r0
   1c438:	d101      	bne.n	1c43e <memchr+0x10>
   1c43a:	2300      	movs	r3, #0
   1c43c:	e003      	b.n	1c446 <memchr+0x18>
   1c43e:	781c      	ldrb	r4, [r3, #0]
   1c440:	3001      	adds	r0, #1
   1c442:	428c      	cmp	r4, r1
   1c444:	d1f6      	bne.n	1c434 <memchr+0x6>
   1c446:	4618      	mov	r0, r3
   1c448:	bd10      	pop	{r4, pc}

0001c44a <memcmp>:
   1c44a:	b530      	push	{r4, r5, lr}
   1c44c:	3901      	subs	r1, #1
   1c44e:	2400      	movs	r4, #0
   1c450:	42a2      	cmp	r2, r4
   1c452:	d101      	bne.n	1c458 <memcmp+0xe>
   1c454:	2000      	movs	r0, #0
   1c456:	e005      	b.n	1c464 <memcmp+0x1a>
   1c458:	5d03      	ldrb	r3, [r0, r4]
   1c45a:	3401      	adds	r4, #1
   1c45c:	5d0d      	ldrb	r5, [r1, r4]
   1c45e:	42ab      	cmp	r3, r5
   1c460:	d0f6      	beq.n	1c450 <memcmp+0x6>
   1c462:	1b58      	subs	r0, r3, r5
   1c464:	bd30      	pop	{r4, r5, pc}

0001c466 <memcpy>:
   1c466:	440a      	add	r2, r1
   1c468:	1e43      	subs	r3, r0, #1
   1c46a:	4291      	cmp	r1, r2
   1c46c:	d100      	bne.n	1c470 <memcpy+0xa>
   1c46e:	4770      	bx	lr
   1c470:	b510      	push	{r4, lr}
   1c472:	f811 4b01 	ldrb.w	r4, [r1], #1
   1c476:	4291      	cmp	r1, r2
   1c478:	f803 4f01 	strb.w	r4, [r3, #1]!
   1c47c:	d1f9      	bne.n	1c472 <memcpy+0xc>
   1c47e:	bd10      	pop	{r4, pc}

0001c480 <memset>:
   1c480:	4402      	add	r2, r0
   1c482:	4603      	mov	r3, r0
   1c484:	4293      	cmp	r3, r2
   1c486:	d100      	bne.n	1c48a <memset+0xa>
   1c488:	4770      	bx	lr
   1c48a:	f803 1b01 	strb.w	r1, [r3], #1
   1c48e:	e7f9      	b.n	1c484 <memset+0x4>

0001c490 <__sfputc_r>:
   1c490:	6893      	ldr	r3, [r2, #8]
   1c492:	3b01      	subs	r3, #1
   1c494:	2b00      	cmp	r3, #0
   1c496:	6093      	str	r3, [r2, #8]
   1c498:	b410      	push	{r4}
   1c49a:	da08      	bge.n	1c4ae <__sfputc_r+0x1e>
   1c49c:	6994      	ldr	r4, [r2, #24]
   1c49e:	42a3      	cmp	r3, r4
   1c4a0:	db01      	blt.n	1c4a6 <__sfputc_r+0x16>
   1c4a2:	290a      	cmp	r1, #10
   1c4a4:	d103      	bne.n	1c4ae <__sfputc_r+0x1e>
   1c4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c4aa:	f7fd bd05 	b.w	19eb8 <__swbuf_r>
   1c4ae:	6813      	ldr	r3, [r2, #0]
   1c4b0:	1c58      	adds	r0, r3, #1
   1c4b2:	6010      	str	r0, [r2, #0]
   1c4b4:	4608      	mov	r0, r1
   1c4b6:	7019      	strb	r1, [r3, #0]
   1c4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c4bc:	4770      	bx	lr

0001c4be <__sfputs_r>:
   1c4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4c0:	4606      	mov	r6, r0
   1c4c2:	460f      	mov	r7, r1
   1c4c4:	4614      	mov	r4, r2
   1c4c6:	18d5      	adds	r5, r2, r3
   1c4c8:	42ac      	cmp	r4, r5
   1c4ca:	d101      	bne.n	1c4d0 <__sfputs_r+0x12>
   1c4cc:	2000      	movs	r0, #0
   1c4ce:	e007      	b.n	1c4e0 <__sfputs_r+0x22>
   1c4d0:	463a      	mov	r2, r7
   1c4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   1c4d6:	4630      	mov	r0, r6
   1c4d8:	f7ff ffda 	bl	1c490 <__sfputc_r>
   1c4dc:	1c43      	adds	r3, r0, #1
   1c4de:	d1f3      	bne.n	1c4c8 <__sfputs_r+0xa>
   1c4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c4e2 <__cvt>:
   1c4e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1c4e6:	ec55 4b10 	vmov	r4, r5, d0
   1c4ea:	2d00      	cmp	r5, #0
   1c4ec:	460e      	mov	r6, r1
   1c4ee:	4691      	mov	r9, r2
   1c4f0:	4619      	mov	r1, r3
   1c4f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   1c4f6:	f04f 0200 	mov.w	r2, #0
   1c4fa:	da03      	bge.n	1c504 <__cvt+0x22>
   1c4fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   1c500:	222d      	movs	r2, #45	; 0x2d
   1c502:	461d      	mov	r5, r3
   1c504:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1c506:	700a      	strb	r2, [r1, #0]
   1c508:	f027 0720 	bic.w	r7, r7, #32
   1c50c:	2f46      	cmp	r7, #70	; 0x46
   1c50e:	d004      	beq.n	1c51a <__cvt+0x38>
   1c510:	2f45      	cmp	r7, #69	; 0x45
   1c512:	d100      	bne.n	1c516 <__cvt+0x34>
   1c514:	3601      	adds	r6, #1
   1c516:	2102      	movs	r1, #2
   1c518:	e000      	b.n	1c51c <__cvt+0x3a>
   1c51a:	2103      	movs	r1, #3
   1c51c:	ab03      	add	r3, sp, #12
   1c51e:	4632      	mov	r2, r6
   1c520:	9301      	str	r3, [sp, #4]
   1c522:	ab02      	add	r3, sp, #8
   1c524:	ec45 4b10 	vmov	d0, r4, r5
   1c528:	9300      	str	r3, [sp, #0]
   1c52a:	4653      	mov	r3, sl
   1c52c:	f7f0 fcac 	bl	ce88 <_dtoa_r>
   1c530:	2f47      	cmp	r7, #71	; 0x47
   1c532:	4680      	mov	r8, r0
   1c534:	d102      	bne.n	1c53c <__cvt+0x5a>
   1c536:	f019 0f01 	tst.w	r9, #1
   1c53a:	d022      	beq.n	1c582 <__cvt+0xa0>
   1c53c:	2f46      	cmp	r7, #70	; 0x46
   1c53e:	eb08 0906 	add.w	r9, r8, r6
   1c542:	d111      	bne.n	1c568 <__cvt+0x86>
   1c544:	f898 3000 	ldrb.w	r3, [r8]
   1c548:	2b30      	cmp	r3, #48	; 0x30
   1c54a:	d10a      	bne.n	1c562 <__cvt+0x80>
   1c54c:	2200      	movs	r2, #0
   1c54e:	2300      	movs	r3, #0
   1c550:	4620      	mov	r0, r4
   1c552:	4629      	mov	r1, r5
   1c554:	f7f0 fc16 	bl	cd84 <__aeabi_dcmpeq>
   1c558:	b918      	cbnz	r0, 1c562 <__cvt+0x80>
   1c55a:	f1c6 0601 	rsb	r6, r6, #1
   1c55e:	f8ca 6000 	str.w	r6, [sl]
   1c562:	f8da 3000 	ldr.w	r3, [sl]
   1c566:	4499      	add	r9, r3
   1c568:	2200      	movs	r2, #0
   1c56a:	2300      	movs	r3, #0
   1c56c:	4620      	mov	r0, r4
   1c56e:	4629      	mov	r1, r5
   1c570:	f7f0 fc08 	bl	cd84 <__aeabi_dcmpeq>
   1c574:	b108      	cbz	r0, 1c57a <__cvt+0x98>
   1c576:	f8cd 900c 	str.w	r9, [sp, #12]
   1c57a:	2230      	movs	r2, #48	; 0x30
   1c57c:	9b03      	ldr	r3, [sp, #12]
   1c57e:	454b      	cmp	r3, r9
   1c580:	d308      	bcc.n	1c594 <__cvt+0xb2>
   1c582:	9b03      	ldr	r3, [sp, #12]
   1c584:	4640      	mov	r0, r8
   1c586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c588:	eba3 0308 	sub.w	r3, r3, r8
   1c58c:	6013      	str	r3, [r2, #0]
   1c58e:	b004      	add	sp, #16
   1c590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c594:	1c59      	adds	r1, r3, #1
   1c596:	9103      	str	r1, [sp, #12]
   1c598:	701a      	strb	r2, [r3, #0]
   1c59a:	e7ef      	b.n	1c57c <__cvt+0x9a>

0001c59c <__exponent>:
   1c59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c59e:	2900      	cmp	r1, #0
   1c5a0:	7002      	strb	r2, [r0, #0]
   1c5a2:	bfba      	itte	lt
   1c5a4:	4249      	neglt	r1, r1
   1c5a6:	232d      	movlt	r3, #45	; 0x2d
   1c5a8:	232b      	movge	r3, #43	; 0x2b
   1c5aa:	2909      	cmp	r1, #9
   1c5ac:	7043      	strb	r3, [r0, #1]
   1c5ae:	dd22      	ble.n	1c5f6 <__exponent+0x5a>
   1c5b0:	f10d 0307 	add.w	r3, sp, #7
   1c5b4:	260a      	movs	r6, #10
   1c5b6:	461f      	mov	r7, r3
   1c5b8:	2963      	cmp	r1, #99	; 0x63
   1c5ba:	f103 35ff 	add.w	r5, r3, #4294967295
   1c5be:	fb91 f2f6 	sdiv	r2, r1, r6
   1c5c2:	fb06 1412 	mls	r4, r6, r2, r1
   1c5c6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1c5ca:	f803 4c01 	strb.w	r4, [r3, #-1]
   1c5ce:	dc0a      	bgt.n	1c5e6 <__exponent+0x4a>
   1c5d0:	3230      	adds	r2, #48	; 0x30
   1c5d2:	3b02      	subs	r3, #2
   1c5d4:	f805 2c01 	strb.w	r2, [r5, #-1]
   1c5d8:	1c82      	adds	r2, r0, #2
   1c5da:	42bb      	cmp	r3, r7
   1c5dc:	4614      	mov	r4, r2
   1c5de:	d305      	bcc.n	1c5ec <__exponent+0x50>
   1c5e0:	1a20      	subs	r0, r4, r0
   1c5e2:	b003      	add	sp, #12
   1c5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c5e6:	462b      	mov	r3, r5
   1c5e8:	4611      	mov	r1, r2
   1c5ea:	e7e5      	b.n	1c5b8 <__exponent+0x1c>
   1c5ec:	f813 1b01 	ldrb.w	r1, [r3], #1
   1c5f0:	f802 1b01 	strb.w	r1, [r2], #1
   1c5f4:	e7f1      	b.n	1c5da <__exponent+0x3e>
   1c5f6:	2330      	movs	r3, #48	; 0x30
   1c5f8:	1d04      	adds	r4, r0, #4
   1c5fa:	4419      	add	r1, r3
   1c5fc:	7083      	strb	r3, [r0, #2]
   1c5fe:	70c1      	strb	r1, [r0, #3]
   1c600:	e7ee      	b.n	1c5e0 <__exponent+0x44>

0001c602 <_printf_common>:
   1c602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c606:	4691      	mov	r9, r2
   1c608:	461f      	mov	r7, r3
   1c60a:	688a      	ldr	r2, [r1, #8]
   1c60c:	4606      	mov	r6, r0
   1c60e:	690b      	ldr	r3, [r1, #16]
   1c610:	460c      	mov	r4, r1
   1c612:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1c616:	4293      	cmp	r3, r2
   1c618:	bfb8      	it	lt
   1c61a:	4613      	movlt	r3, r2
   1c61c:	f8c9 3000 	str.w	r3, [r9]
   1c620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1c624:	b112      	cbz	r2, 1c62c <_printf_common+0x2a>
   1c626:	3301      	adds	r3, #1
   1c628:	f8c9 3000 	str.w	r3, [r9]
   1c62c:	6823      	ldr	r3, [r4, #0]
   1c62e:	0699      	lsls	r1, r3, #26
   1c630:	bf42      	ittt	mi
   1c632:	f8d9 3000 	ldrmi.w	r3, [r9]
   1c636:	3302      	addmi	r3, #2
   1c638:	f8c9 3000 	strmi.w	r3, [r9]
   1c63c:	6825      	ldr	r5, [r4, #0]
   1c63e:	f015 0506 	ands.w	r5, r5, #6
   1c642:	d107      	bne.n	1c654 <_printf_common+0x52>
   1c644:	f104 0a19 	add.w	sl, r4, #25
   1c648:	68e3      	ldr	r3, [r4, #12]
   1c64a:	f8d9 2000 	ldr.w	r2, [r9]
   1c64e:	1a9b      	subs	r3, r3, r2
   1c650:	42ab      	cmp	r3, r5
   1c652:	dc2b      	bgt.n	1c6ac <_printf_common+0xaa>
   1c654:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   1c658:	6822      	ldr	r2, [r4, #0]
   1c65a:	3300      	adds	r3, #0
   1c65c:	bf18      	it	ne
   1c65e:	2301      	movne	r3, #1
   1c660:	0692      	lsls	r2, r2, #26
   1c662:	d430      	bmi.n	1c6c6 <_printf_common+0xc4>
   1c664:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1c668:	4639      	mov	r1, r7
   1c66a:	4630      	mov	r0, r6
   1c66c:	47c0      	blx	r8
   1c66e:	3001      	adds	r0, #1
   1c670:	d023      	beq.n	1c6ba <_printf_common+0xb8>
   1c672:	6823      	ldr	r3, [r4, #0]
   1c674:	341a      	adds	r4, #26
   1c676:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   1c67a:	f003 0306 	and.w	r3, r3, #6
   1c67e:	f8d9 2000 	ldr.w	r2, [r9]
   1c682:	f04f 0900 	mov.w	r9, #0
   1c686:	2b04      	cmp	r3, #4
   1c688:	f854 3c12 	ldr.w	r3, [r4, #-18]
   1c68c:	bf08      	it	eq
   1c68e:	1aad      	subeq	r5, r5, r2
   1c690:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   1c694:	bf14      	ite	ne
   1c696:	2500      	movne	r5, #0
   1c698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1c69c:	4293      	cmp	r3, r2
   1c69e:	bfc4      	itt	gt
   1c6a0:	1a9b      	subgt	r3, r3, r2
   1c6a2:	18ed      	addgt	r5, r5, r3
   1c6a4:	454d      	cmp	r5, r9
   1c6a6:	d11a      	bne.n	1c6de <_printf_common+0xdc>
   1c6a8:	2000      	movs	r0, #0
   1c6aa:	e008      	b.n	1c6be <_printf_common+0xbc>
   1c6ac:	2301      	movs	r3, #1
   1c6ae:	4652      	mov	r2, sl
   1c6b0:	4639      	mov	r1, r7
   1c6b2:	4630      	mov	r0, r6
   1c6b4:	47c0      	blx	r8
   1c6b6:	3001      	adds	r0, #1
   1c6b8:	d103      	bne.n	1c6c2 <_printf_common+0xc0>
   1c6ba:	f04f 30ff 	mov.w	r0, #4294967295
   1c6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6c2:	3501      	adds	r5, #1
   1c6c4:	e7c0      	b.n	1c648 <_printf_common+0x46>
   1c6c6:	18e1      	adds	r1, r4, r3
   1c6c8:	1c5a      	adds	r2, r3, #1
   1c6ca:	2030      	movs	r0, #48	; 0x30
   1c6cc:	3302      	adds	r3, #2
   1c6ce:	4422      	add	r2, r4
   1c6d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1c6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1c6d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1c6dc:	e7c2      	b.n	1c664 <_printf_common+0x62>
   1c6de:	2301      	movs	r3, #1
   1c6e0:	4622      	mov	r2, r4
   1c6e2:	4639      	mov	r1, r7
   1c6e4:	4630      	mov	r0, r6
   1c6e6:	47c0      	blx	r8
   1c6e8:	3001      	adds	r0, #1
   1c6ea:	d0e6      	beq.n	1c6ba <_printf_common+0xb8>
   1c6ec:	f109 0901 	add.w	r9, r9, #1
   1c6f0:	e7d8      	b.n	1c6a4 <_printf_common+0xa2>

0001c6f2 <strchr>:
   1c6f2:	b2c9      	uxtb	r1, r1
   1c6f4:	4603      	mov	r3, r0
   1c6f6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1c6fa:	b11a      	cbz	r2, 1c704 <strchr+0x12>
   1c6fc:	428a      	cmp	r2, r1
   1c6fe:	d1f9      	bne.n	1c6f4 <strchr+0x2>
   1c700:	4618      	mov	r0, r3
   1c702:	4770      	bx	lr
   1c704:	2900      	cmp	r1, #0
   1c706:	bf18      	it	ne
   1c708:	2300      	movne	r3, #0
   1c70a:	e7f9      	b.n	1c700 <strchr+0xe>

0001c70c <strncmp>:
   1c70c:	b510      	push	{r4, lr}
   1c70e:	b16a      	cbz	r2, 1c72c <strncmp+0x20>
   1c710:	3901      	subs	r1, #1
   1c712:	1884      	adds	r4, r0, r2
   1c714:	f810 3b01 	ldrb.w	r3, [r0], #1
   1c718:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1c71c:	4293      	cmp	r3, r2
   1c71e:	d103      	bne.n	1c728 <strncmp+0x1c>
   1c720:	42a0      	cmp	r0, r4
   1c722:	d001      	beq.n	1c728 <strncmp+0x1c>
   1c724:	2b00      	cmp	r3, #0
   1c726:	d1f5      	bne.n	1c714 <strncmp+0x8>
   1c728:	1a98      	subs	r0, r3, r2
   1c72a:	bd10      	pop	{r4, pc}
   1c72c:	4610      	mov	r0, r2
   1c72e:	e7fc      	b.n	1c72a <strncmp+0x1e>

0001c730 <strstr>:
   1c730:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c732:	780c      	ldrb	r4, [r1, #0]
   1c734:	b164      	cbz	r4, 1c750 <strstr+0x20>
   1c736:	4603      	mov	r3, r0
   1c738:	781a      	ldrb	r2, [r3, #0]
   1c73a:	4618      	mov	r0, r3
   1c73c:	1c5e      	adds	r6, r3, #1
   1c73e:	b90a      	cbnz	r2, 1c744 <strstr+0x14>
   1c740:	4610      	mov	r0, r2
   1c742:	e005      	b.n	1c750 <strstr+0x20>
   1c744:	4294      	cmp	r4, r2
   1c746:	d108      	bne.n	1c75a <strstr+0x2a>
   1c748:	460d      	mov	r5, r1
   1c74a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   1c74e:	b902      	cbnz	r2, 1c752 <strstr+0x22>
   1c750:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c752:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   1c756:	4297      	cmp	r7, r2
   1c758:	d0f7      	beq.n	1c74a <strstr+0x1a>
   1c75a:	4633      	mov	r3, r6
   1c75c:	e7ec      	b.n	1c738 <strstr+0x8>

0001c75e <abort>:
   1c75e:	b508      	push	{r3, lr}
   1c760:	2006      	movs	r0, #6
   1c762:	f7fe f833 	bl	1a7cc <raise>
   1c766:	2001      	movs	r0, #1
   1c768:	f7f2 f998 	bl	ea9c <_exit>

0001c76c <quorem>:
   1c76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c770:	6903      	ldr	r3, [r0, #16]
   1c772:	4680      	mov	r8, r0
   1c774:	690c      	ldr	r4, [r1, #16]
   1c776:	42a3      	cmp	r3, r4
   1c778:	f2c0 8084 	blt.w	1c884 <quorem+0x118>
   1c77c:	3c01      	subs	r4, #1
   1c77e:	f108 0514 	add.w	r5, r8, #20
   1c782:	f101 0714 	add.w	r7, r1, #20
   1c786:	00a0      	lsls	r0, r4, #2
   1c788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1c78c:	182b      	adds	r3, r5, r0
   1c78e:	eb07 0900 	add.w	r9, r7, r0
   1c792:	9301      	str	r3, [sp, #4]
   1c794:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1c798:	3301      	adds	r3, #1
   1c79a:	429a      	cmp	r2, r3
   1c79c:	fbb2 f6f3 	udiv	r6, r2, r3
   1c7a0:	d333      	bcc.n	1c80a <quorem+0x9e>
   1c7a2:	f04f 0a00 	mov.w	sl, #0
   1c7a6:	46bc      	mov	ip, r7
   1c7a8:	46ae      	mov	lr, r5
   1c7aa:	46d3      	mov	fp, sl
   1c7ac:	f85c 2b04 	ldr.w	r2, [ip], #4
   1c7b0:	b293      	uxth	r3, r2
   1c7b2:	45e1      	cmp	r9, ip
   1c7b4:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1c7b8:	fb06 a303 	mla	r3, r6, r3, sl
   1c7bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1c7c0:	b29b      	uxth	r3, r3
   1c7c2:	fb06 a202 	mla	r2, r6, r2, sl
   1c7c6:	ebab 0303 	sub.w	r3, fp, r3
   1c7ca:	f8de b000 	ldr.w	fp, [lr]
   1c7ce:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   1c7d2:	fa1f fb8b 	uxth.w	fp, fp
   1c7d6:	445b      	add	r3, fp
   1c7d8:	fa1f fb82 	uxth.w	fp, r2
   1c7dc:	f8de 2000 	ldr.w	r2, [lr]
   1c7e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   1c7e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1c7e8:	b29b      	uxth	r3, r3
   1c7ea:	ea4f 4b22 	mov.w	fp, r2, asr #16
   1c7ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1c7f2:	f84e 3b04 	str.w	r3, [lr], #4
   1c7f6:	d2d9      	bcs.n	1c7ac <quorem+0x40>
   1c7f8:	582b      	ldr	r3, [r5, r0]
   1c7fa:	b933      	cbnz	r3, 1c80a <quorem+0x9e>
   1c7fc:	9b01      	ldr	r3, [sp, #4]
   1c7fe:	3b04      	subs	r3, #4
   1c800:	429d      	cmp	r5, r3
   1c802:	461a      	mov	r2, r3
   1c804:	d332      	bcc.n	1c86c <quorem+0x100>
   1c806:	f8c8 4010 	str.w	r4, [r8, #16]
   1c80a:	4640      	mov	r0, r8
   1c80c:	f000 fa74 	bl	1ccf8 <__mcmp>
   1c810:	2800      	cmp	r0, #0
   1c812:	db27      	blt.n	1c864 <quorem+0xf8>
   1c814:	3601      	adds	r6, #1
   1c816:	4628      	mov	r0, r5
   1c818:	f04f 0c00 	mov.w	ip, #0
   1c81c:	f857 1b04 	ldr.w	r1, [r7], #4
   1c820:	f8d0 e000 	ldr.w	lr, [r0]
   1c824:	b28b      	uxth	r3, r1
   1c826:	45b9      	cmp	r9, r7
   1c828:	fa1f f28e 	uxth.w	r2, lr
   1c82c:	ebac 0303 	sub.w	r3, ip, r3
   1c830:	4413      	add	r3, r2
   1c832:	ea4f 4211 	mov.w	r2, r1, lsr #16
   1c836:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   1c83a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1c83e:	b29b      	uxth	r3, r3
   1c840:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1c844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1c848:	f840 3b04 	str.w	r3, [r0], #4
   1c84c:	d2e6      	bcs.n	1c81c <quorem+0xb0>
   1c84e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1c852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1c856:	b92a      	cbnz	r2, 1c864 <quorem+0xf8>
   1c858:	3b04      	subs	r3, #4
   1c85a:	429d      	cmp	r5, r3
   1c85c:	461a      	mov	r2, r3
   1c85e:	d30b      	bcc.n	1c878 <quorem+0x10c>
   1c860:	f8c8 4010 	str.w	r4, [r8, #16]
   1c864:	4630      	mov	r0, r6
   1c866:	b003      	add	sp, #12
   1c868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c86c:	6812      	ldr	r2, [r2, #0]
   1c86e:	3b04      	subs	r3, #4
   1c870:	2a00      	cmp	r2, #0
   1c872:	d1c8      	bne.n	1c806 <quorem+0x9a>
   1c874:	3c01      	subs	r4, #1
   1c876:	e7c3      	b.n	1c800 <quorem+0x94>
   1c878:	6812      	ldr	r2, [r2, #0]
   1c87a:	3b04      	subs	r3, #4
   1c87c:	2a00      	cmp	r2, #0
   1c87e:	d1ef      	bne.n	1c860 <quorem+0xf4>
   1c880:	3c01      	subs	r4, #1
   1c882:	e7ea      	b.n	1c85a <quorem+0xee>
   1c884:	2000      	movs	r0, #0
   1c886:	e7ee      	b.n	1c866 <quorem+0xfa>

0001c888 <__sfmoreglue>:
   1c888:	b570      	push	{r4, r5, r6, lr}
   1c88a:	1e4a      	subs	r2, r1, #1
   1c88c:	2568      	movs	r5, #104	; 0x68
   1c88e:	460e      	mov	r6, r1
   1c890:	4355      	muls	r5, r2
   1c892:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1c896:	f7fd fe37 	bl	1a508 <_malloc_r>
   1c89a:	4604      	mov	r4, r0
   1c89c:	b140      	cbz	r0, 1c8b0 <__sfmoreglue+0x28>
   1c89e:	2100      	movs	r1, #0
   1c8a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1c8a4:	e9c0 1600 	strd	r1, r6, [r0]
   1c8a8:	300c      	adds	r0, #12
   1c8aa:	60a0      	str	r0, [r4, #8]
   1c8ac:	f7ff fde8 	bl	1c480 <memset>
   1c8b0:	4620      	mov	r0, r4
   1c8b2:	bd70      	pop	{r4, r5, r6, pc}

0001c8b4 <_fwalk_reent>:
   1c8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c8b8:	4680      	mov	r8, r0
   1c8ba:	4689      	mov	r9, r1
   1c8bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1c8c0:	2600      	movs	r6, #0
   1c8c2:	b914      	cbnz	r4, 1c8ca <_fwalk_reent+0x16>
   1c8c4:	4630      	mov	r0, r6
   1c8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c8ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   1c8ce:	3f01      	subs	r7, #1
   1c8d0:	d501      	bpl.n	1c8d6 <_fwalk_reent+0x22>
   1c8d2:	6824      	ldr	r4, [r4, #0]
   1c8d4:	e7f5      	b.n	1c8c2 <_fwalk_reent+0xe>
   1c8d6:	89ab      	ldrh	r3, [r5, #12]
   1c8d8:	2b01      	cmp	r3, #1
   1c8da:	d907      	bls.n	1c8ec <_fwalk_reent+0x38>
   1c8dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1c8e0:	3301      	adds	r3, #1
   1c8e2:	d003      	beq.n	1c8ec <_fwalk_reent+0x38>
   1c8e4:	4629      	mov	r1, r5
   1c8e6:	4640      	mov	r0, r8
   1c8e8:	47c8      	blx	r9
   1c8ea:	4306      	orrs	r6, r0
   1c8ec:	3568      	adds	r5, #104	; 0x68
   1c8ee:	e7ee      	b.n	1c8ce <_fwalk_reent+0x1a>

0001c8f0 <__retarget_lock_init_recursive>:
   1c8f0:	4770      	bx	lr

0001c8f2 <__retarget_lock_acquire_recursive>:
   1c8f2:	4770      	bx	lr

0001c8f4 <__retarget_lock_release_recursive>:
   1c8f4:	4770      	bx	lr

0001c8f6 <__swhatbuf_r>:
   1c8f6:	b570      	push	{r4, r5, r6, lr}
   1c8f8:	460e      	mov	r6, r1
   1c8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c8fe:	b096      	sub	sp, #88	; 0x58
   1c900:	4614      	mov	r4, r2
   1c902:	2900      	cmp	r1, #0
   1c904:	461d      	mov	r5, r3
   1c906:	da07      	bge.n	1c918 <__swhatbuf_r+0x22>
   1c908:	2300      	movs	r3, #0
   1c90a:	602b      	str	r3, [r5, #0]
   1c90c:	89b3      	ldrh	r3, [r6, #12]
   1c90e:	061a      	lsls	r2, r3, #24
   1c910:	d410      	bmi.n	1c934 <__swhatbuf_r+0x3e>
   1c912:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1c916:	e00e      	b.n	1c936 <__swhatbuf_r+0x40>
   1c918:	466a      	mov	r2, sp
   1c91a:	f7fd ff93 	bl	1a844 <_fstat_r>
   1c91e:	2800      	cmp	r0, #0
   1c920:	dbf2      	blt.n	1c908 <__swhatbuf_r+0x12>
   1c922:	9a01      	ldr	r2, [sp, #4]
   1c924:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1c928:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   1c92c:	425a      	negs	r2, r3
   1c92e:	415a      	adcs	r2, r3
   1c930:	602a      	str	r2, [r5, #0]
   1c932:	e7ee      	b.n	1c912 <__swhatbuf_r+0x1c>
   1c934:	2340      	movs	r3, #64	; 0x40
   1c936:	2000      	movs	r0, #0
   1c938:	6023      	str	r3, [r4, #0]
   1c93a:	b016      	add	sp, #88	; 0x58
   1c93c:	bd70      	pop	{r4, r5, r6, pc}

0001c93e <memmove>:
   1c93e:	4288      	cmp	r0, r1
   1c940:	eb01 0302 	add.w	r3, r1, r2
   1c944:	b510      	push	{r4, lr}
   1c946:	d902      	bls.n	1c94e <memmove+0x10>
   1c948:	4283      	cmp	r3, r0
   1c94a:	461c      	mov	r4, r3
   1c94c:	d807      	bhi.n	1c95e <memmove+0x20>
   1c94e:	1e42      	subs	r2, r0, #1
   1c950:	4299      	cmp	r1, r3
   1c952:	d008      	beq.n	1c966 <memmove+0x28>
   1c954:	f811 4b01 	ldrb.w	r4, [r1], #1
   1c958:	f802 4f01 	strb.w	r4, [r2, #1]!
   1c95c:	e7f8      	b.n	1c950 <memmove+0x12>
   1c95e:	1883      	adds	r3, r0, r2
   1c960:	1a9a      	subs	r2, r3, r2
   1c962:	429a      	cmp	r2, r3
   1c964:	d100      	bne.n	1c968 <memmove+0x2a>
   1c966:	bd10      	pop	{r4, pc}
   1c968:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1c96c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   1c970:	e7f7      	b.n	1c962 <memmove+0x24>

0001c972 <_Balloc>:
   1c972:	b570      	push	{r4, r5, r6, lr}
   1c974:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1c976:	4604      	mov	r4, r0
   1c978:	460e      	mov	r6, r1
   1c97a:	b93d      	cbnz	r5, 1c98c <_Balloc+0x1a>
   1c97c:	2010      	movs	r0, #16
   1c97e:	f7fd fd1f 	bl	1a3c0 <malloc>
   1c982:	6260      	str	r0, [r4, #36]	; 0x24
   1c984:	6005      	str	r5, [r0, #0]
   1c986:	60c5      	str	r5, [r0, #12]
   1c988:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1c98c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1c98e:	68eb      	ldr	r3, [r5, #12]
   1c990:	b183      	cbz	r3, 1c9b4 <_Balloc+0x42>
   1c992:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c994:	68db      	ldr	r3, [r3, #12]
   1c996:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   1c99a:	b9b8      	cbnz	r0, 1c9cc <_Balloc+0x5a>
   1c99c:	2101      	movs	r1, #1
   1c99e:	4620      	mov	r0, r4
   1c9a0:	fa01 f506 	lsl.w	r5, r1, r6
   1c9a4:	1d6a      	adds	r2, r5, #5
   1c9a6:	0092      	lsls	r2, r2, #2
   1c9a8:	f000 fa6e 	bl	1ce88 <_calloc_r>
   1c9ac:	b160      	cbz	r0, 1c9c8 <_Balloc+0x56>
   1c9ae:	e9c0 6501 	strd	r6, r5, [r0, #4]
   1c9b2:	e00e      	b.n	1c9d2 <_Balloc+0x60>
   1c9b4:	2221      	movs	r2, #33	; 0x21
   1c9b6:	2104      	movs	r1, #4
   1c9b8:	4620      	mov	r0, r4
   1c9ba:	f000 fa65 	bl	1ce88 <_calloc_r>
   1c9be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c9c0:	60e8      	str	r0, [r5, #12]
   1c9c2:	68db      	ldr	r3, [r3, #12]
   1c9c4:	2b00      	cmp	r3, #0
   1c9c6:	d1e4      	bne.n	1c992 <_Balloc+0x20>
   1c9c8:	2000      	movs	r0, #0
   1c9ca:	bd70      	pop	{r4, r5, r6, pc}
   1c9cc:	6802      	ldr	r2, [r0, #0]
   1c9ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   1c9d2:	2300      	movs	r3, #0
   1c9d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1c9d8:	e7f7      	b.n	1c9ca <_Balloc+0x58>

0001c9da <_Bfree>:
   1c9da:	b570      	push	{r4, r5, r6, lr}
   1c9dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1c9de:	4606      	mov	r6, r0
   1c9e0:	460d      	mov	r5, r1
   1c9e2:	b93c      	cbnz	r4, 1c9f4 <_Bfree+0x1a>
   1c9e4:	2010      	movs	r0, #16
   1c9e6:	f7fd fceb 	bl	1a3c0 <malloc>
   1c9ea:	6270      	str	r0, [r6, #36]	; 0x24
   1c9ec:	6004      	str	r4, [r0, #0]
   1c9ee:	60c4      	str	r4, [r0, #12]
   1c9f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1c9f4:	b13d      	cbz	r5, 1ca06 <_Bfree+0x2c>
   1c9f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1c9f8:	686a      	ldr	r2, [r5, #4]
   1c9fa:	68db      	ldr	r3, [r3, #12]
   1c9fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1ca00:	6029      	str	r1, [r5, #0]
   1ca02:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1ca06:	bd70      	pop	{r4, r5, r6, pc}

0001ca08 <__multadd>:
   1ca08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca0c:	f101 0c14 	add.w	ip, r1, #20
   1ca10:	461f      	mov	r7, r3
   1ca12:	4606      	mov	r6, r0
   1ca14:	460c      	mov	r4, r1
   1ca16:	690d      	ldr	r5, [r1, #16]
   1ca18:	2300      	movs	r3, #0
   1ca1a:	f8dc 0000 	ldr.w	r0, [ip]
   1ca1e:	3301      	adds	r3, #1
   1ca20:	b281      	uxth	r1, r0
   1ca22:	429d      	cmp	r5, r3
   1ca24:	ea4f 4010 	mov.w	r0, r0, lsr #16
   1ca28:	fb02 7101 	mla	r1, r2, r1, r7
   1ca2c:	ea4f 4711 	mov.w	r7, r1, lsr #16
   1ca30:	b289      	uxth	r1, r1
   1ca32:	fb02 7000 	mla	r0, r2, r0, r7
   1ca36:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   1ca3a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   1ca3e:	f84c 1b04 	str.w	r1, [ip], #4
   1ca42:	dcea      	bgt.n	1ca1a <__multadd+0x12>
   1ca44:	b1d7      	cbz	r7, 1ca7c <__multadd+0x74>
   1ca46:	68a3      	ldr	r3, [r4, #8]
   1ca48:	42ab      	cmp	r3, r5
   1ca4a:	dc12      	bgt.n	1ca72 <__multadd+0x6a>
   1ca4c:	6861      	ldr	r1, [r4, #4]
   1ca4e:	4630      	mov	r0, r6
   1ca50:	3101      	adds	r1, #1
   1ca52:	f7ff ff8e 	bl	1c972 <_Balloc>
   1ca56:	6922      	ldr	r2, [r4, #16]
   1ca58:	4680      	mov	r8, r0
   1ca5a:	f104 010c 	add.w	r1, r4, #12
   1ca5e:	3202      	adds	r2, #2
   1ca60:	300c      	adds	r0, #12
   1ca62:	0092      	lsls	r2, r2, #2
   1ca64:	f7ff fcff 	bl	1c466 <memcpy>
   1ca68:	4621      	mov	r1, r4
   1ca6a:	4644      	mov	r4, r8
   1ca6c:	4630      	mov	r0, r6
   1ca6e:	f7ff ffb4 	bl	1c9da <_Bfree>
   1ca72:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   1ca76:	3501      	adds	r5, #1
   1ca78:	615f      	str	r7, [r3, #20]
   1ca7a:	6125      	str	r5, [r4, #16]
   1ca7c:	4620      	mov	r0, r4
   1ca7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ca82 <__hi0bits>:
   1ca82:	0c02      	lsrs	r2, r0, #16
   1ca84:	4603      	mov	r3, r0
   1ca86:	0412      	lsls	r2, r2, #16
   1ca88:	b9ca      	cbnz	r2, 1cabe <__hi0bits+0x3c>
   1ca8a:	0403      	lsls	r3, r0, #16
   1ca8c:	2010      	movs	r0, #16
   1ca8e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1ca92:	bf04      	itt	eq
   1ca94:	021b      	lsleq	r3, r3, #8
   1ca96:	3008      	addeq	r0, #8
   1ca98:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1ca9c:	bf04      	itt	eq
   1ca9e:	011b      	lsleq	r3, r3, #4
   1caa0:	3004      	addeq	r0, #4
   1caa2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   1caa6:	bf04      	itt	eq
   1caa8:	009b      	lsleq	r3, r3, #2
   1caaa:	3002      	addeq	r0, #2
   1caac:	2b00      	cmp	r3, #0
   1caae:	db05      	blt.n	1cabc <__hi0bits+0x3a>
   1cab0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1cab4:	f100 0001 	add.w	r0, r0, #1
   1cab8:	bf08      	it	eq
   1caba:	2020      	moveq	r0, #32
   1cabc:	4770      	bx	lr
   1cabe:	2000      	movs	r0, #0
   1cac0:	e7e5      	b.n	1ca8e <__hi0bits+0xc>

0001cac2 <__lo0bits>:
   1cac2:	6803      	ldr	r3, [r0, #0]
   1cac4:	4601      	mov	r1, r0
   1cac6:	f013 0207 	ands.w	r2, r3, #7
   1caca:	d00b      	beq.n	1cae4 <__lo0bits+0x22>
   1cacc:	07da      	lsls	r2, r3, #31
   1cace:	d424      	bmi.n	1cb1a <__lo0bits+0x58>
   1cad0:	0798      	lsls	r0, r3, #30
   1cad2:	bf47      	ittee	mi
   1cad4:	085b      	lsrmi	r3, r3, #1
   1cad6:	2001      	movmi	r0, #1
   1cad8:	089b      	lsrpl	r3, r3, #2
   1cada:	2002      	movpl	r0, #2
   1cadc:	bf4c      	ite	mi
   1cade:	600b      	strmi	r3, [r1, #0]
   1cae0:	600b      	strpl	r3, [r1, #0]
   1cae2:	4770      	bx	lr
   1cae4:	b298      	uxth	r0, r3
   1cae6:	b9b0      	cbnz	r0, 1cb16 <__lo0bits+0x54>
   1cae8:	0c1b      	lsrs	r3, r3, #16
   1caea:	2010      	movs	r0, #16
   1caec:	f013 0fff 	tst.w	r3, #255	; 0xff
   1caf0:	bf04      	itt	eq
   1caf2:	0a1b      	lsreq	r3, r3, #8
   1caf4:	3008      	addeq	r0, #8
   1caf6:	071a      	lsls	r2, r3, #28
   1caf8:	bf04      	itt	eq
   1cafa:	091b      	lsreq	r3, r3, #4
   1cafc:	3004      	addeq	r0, #4
   1cafe:	079a      	lsls	r2, r3, #30
   1cb00:	bf04      	itt	eq
   1cb02:	089b      	lsreq	r3, r3, #2
   1cb04:	3002      	addeq	r0, #2
   1cb06:	07da      	lsls	r2, r3, #31
   1cb08:	d403      	bmi.n	1cb12 <__lo0bits+0x50>
   1cb0a:	085b      	lsrs	r3, r3, #1
   1cb0c:	f100 0001 	add.w	r0, r0, #1
   1cb10:	d005      	beq.n	1cb1e <__lo0bits+0x5c>
   1cb12:	600b      	str	r3, [r1, #0]
   1cb14:	4770      	bx	lr
   1cb16:	4610      	mov	r0, r2
   1cb18:	e7e8      	b.n	1caec <__lo0bits+0x2a>
   1cb1a:	2000      	movs	r0, #0
   1cb1c:	4770      	bx	lr
   1cb1e:	2020      	movs	r0, #32
   1cb20:	4770      	bx	lr

0001cb22 <__i2b>:
   1cb22:	b510      	push	{r4, lr}
   1cb24:	460c      	mov	r4, r1
   1cb26:	2101      	movs	r1, #1
   1cb28:	f7ff ff23 	bl	1c972 <_Balloc>
   1cb2c:	2201      	movs	r2, #1
   1cb2e:	6144      	str	r4, [r0, #20]
   1cb30:	6102      	str	r2, [r0, #16]
   1cb32:	bd10      	pop	{r4, pc}

0001cb34 <__multiply>:
   1cb34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb38:	4690      	mov	r8, r2
   1cb3a:	690a      	ldr	r2, [r1, #16]
   1cb3c:	460c      	mov	r4, r1
   1cb3e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1cb42:	429a      	cmp	r2, r3
   1cb44:	bfbe      	ittt	lt
   1cb46:	460b      	movlt	r3, r1
   1cb48:	4644      	movlt	r4, r8
   1cb4a:	4698      	movlt	r8, r3
   1cb4c:	6927      	ldr	r7, [r4, #16]
   1cb4e:	68a3      	ldr	r3, [r4, #8]
   1cb50:	f8d8 9010 	ldr.w	r9, [r8, #16]
   1cb54:	6861      	ldr	r1, [r4, #4]
   1cb56:	eb07 0609 	add.w	r6, r7, r9
   1cb5a:	42b3      	cmp	r3, r6
   1cb5c:	bfb8      	it	lt
   1cb5e:	3101      	addlt	r1, #1
   1cb60:	f7ff ff07 	bl	1c972 <_Balloc>
   1cb64:	f100 0514 	add.w	r5, r0, #20
   1cb68:	2200      	movs	r2, #0
   1cb6a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   1cb6e:	462b      	mov	r3, r5
   1cb70:	4573      	cmp	r3, lr
   1cb72:	d316      	bcc.n	1cba2 <__multiply+0x6e>
   1cb74:	f104 0314 	add.w	r3, r4, #20
   1cb78:	f108 0214 	add.w	r2, r8, #20
   1cb7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1cb80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   1cb84:	9300      	str	r3, [sp, #0]
   1cb86:	9b00      	ldr	r3, [sp, #0]
   1cb88:	9201      	str	r2, [sp, #4]
   1cb8a:	4293      	cmp	r3, r2
   1cb8c:	d80c      	bhi.n	1cba8 <__multiply+0x74>
   1cb8e:	2e00      	cmp	r6, #0
   1cb90:	dd03      	ble.n	1cb9a <__multiply+0x66>
   1cb92:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   1cb96:	2b00      	cmp	r3, #0
   1cb98:	d059      	beq.n	1cc4e <__multiply+0x11a>
   1cb9a:	6106      	str	r6, [r0, #16]
   1cb9c:	b003      	add	sp, #12
   1cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cba2:	f843 2b04 	str.w	r2, [r3], #4
   1cba6:	e7e3      	b.n	1cb70 <__multiply+0x3c>
   1cba8:	f8b2 a000 	ldrh.w	sl, [r2]
   1cbac:	f1ba 0f00 	cmp.w	sl, #0
   1cbb0:	d023      	beq.n	1cbfa <__multiply+0xc6>
   1cbb2:	f104 0914 	add.w	r9, r4, #20
   1cbb6:	46ac      	mov	ip, r5
   1cbb8:	f04f 0800 	mov.w	r8, #0
   1cbbc:	f859 1b04 	ldr.w	r1, [r9], #4
   1cbc0:	f8dc b000 	ldr.w	fp, [ip]
   1cbc4:	b28b      	uxth	r3, r1
   1cbc6:	454f      	cmp	r7, r9
   1cbc8:	fa1f fb8b 	uxth.w	fp, fp
   1cbcc:	fb0a b303 	mla	r3, sl, r3, fp
   1cbd0:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   1cbd4:	f8dc 1000 	ldr.w	r1, [ip]
   1cbd8:	4443      	add	r3, r8
   1cbda:	ea4f 4811 	mov.w	r8, r1, lsr #16
   1cbde:	fb0a 810b 	mla	r1, sl, fp, r8
   1cbe2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   1cbe6:	b29b      	uxth	r3, r3
   1cbe8:	ea4f 4811 	mov.w	r8, r1, lsr #16
   1cbec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cbf0:	f84c 3b04 	str.w	r3, [ip], #4
   1cbf4:	d8e2      	bhi.n	1cbbc <__multiply+0x88>
   1cbf6:	f8cc 8000 	str.w	r8, [ip]
   1cbfa:	9b01      	ldr	r3, [sp, #4]
   1cbfc:	3204      	adds	r2, #4
   1cbfe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   1cc02:	f1b9 0f00 	cmp.w	r9, #0
   1cc06:	d020      	beq.n	1cc4a <__multiply+0x116>
   1cc08:	682b      	ldr	r3, [r5, #0]
   1cc0a:	f104 0814 	add.w	r8, r4, #20
   1cc0e:	46ac      	mov	ip, r5
   1cc10:	f04f 0a00 	mov.w	sl, #0
   1cc14:	f8b8 1000 	ldrh.w	r1, [r8]
   1cc18:	b29b      	uxth	r3, r3
   1cc1a:	f8bc b002 	ldrh.w	fp, [ip, #2]
   1cc1e:	fb09 b101 	mla	r1, r9, r1, fp
   1cc22:	448a      	add	sl, r1
   1cc24:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   1cc28:	f84c 3b04 	str.w	r3, [ip], #4
   1cc2c:	f858 3b04 	ldr.w	r3, [r8], #4
   1cc30:	f8bc 1000 	ldrh.w	r1, [ip]
   1cc34:	0c1b      	lsrs	r3, r3, #16
   1cc36:	4547      	cmp	r7, r8
   1cc38:	fb09 1303 	mla	r3, r9, r3, r1
   1cc3c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   1cc40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1cc44:	d8e6      	bhi.n	1cc14 <__multiply+0xe0>
   1cc46:	f8cc 3000 	str.w	r3, [ip]
   1cc4a:	3504      	adds	r5, #4
   1cc4c:	e79b      	b.n	1cb86 <__multiply+0x52>
   1cc4e:	3e01      	subs	r6, #1
   1cc50:	e79d      	b.n	1cb8e <__multiply+0x5a>

0001cc52 <__lshift>:
   1cc52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc56:	460c      	mov	r4, r1
   1cc58:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1cc5c:	4607      	mov	r7, r0
   1cc5e:	4616      	mov	r6, r2
   1cc60:	6923      	ldr	r3, [r4, #16]
   1cc62:	6849      	ldr	r1, [r1, #4]
   1cc64:	eb0a 0903 	add.w	r9, sl, r3
   1cc68:	68a3      	ldr	r3, [r4, #8]
   1cc6a:	f109 0501 	add.w	r5, r9, #1
   1cc6e:	42ab      	cmp	r3, r5
   1cc70:	db33      	blt.n	1ccda <__lshift+0x88>
   1cc72:	4638      	mov	r0, r7
   1cc74:	f7ff fe7d 	bl	1c972 <_Balloc>
   1cc78:	2300      	movs	r3, #0
   1cc7a:	4680      	mov	r8, r0
   1cc7c:	f100 0114 	add.w	r1, r0, #20
   1cc80:	f100 0210 	add.w	r2, r0, #16
   1cc84:	4618      	mov	r0, r3
   1cc86:	4553      	cmp	r3, sl
   1cc88:	db2a      	blt.n	1cce0 <__lshift+0x8e>
   1cc8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   1cc8e:	f104 0314 	add.w	r3, r4, #20
   1cc92:	6920      	ldr	r0, [r4, #16]
   1cc94:	f016 021f 	ands.w	r2, r6, #31
   1cc98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1cc9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1cca0:	d022      	beq.n	1cce8 <__lshift+0x96>
   1cca2:	f1c2 0e20 	rsb	lr, r2, #32
   1cca6:	2000      	movs	r0, #0
   1cca8:	681e      	ldr	r6, [r3, #0]
   1ccaa:	4096      	lsls	r6, r2
   1ccac:	4330      	orrs	r0, r6
   1ccae:	f841 0b04 	str.w	r0, [r1], #4
   1ccb2:	f853 0b04 	ldr.w	r0, [r3], #4
   1ccb6:	459c      	cmp	ip, r3
   1ccb8:	fa20 f00e 	lsr.w	r0, r0, lr
   1ccbc:	d8f4      	bhi.n	1cca8 <__lshift+0x56>
   1ccbe:	6008      	str	r0, [r1, #0]
   1ccc0:	b108      	cbz	r0, 1ccc6 <__lshift+0x74>
   1ccc2:	f109 0502 	add.w	r5, r9, #2
   1ccc6:	3d01      	subs	r5, #1
   1ccc8:	4638      	mov	r0, r7
   1ccca:	4621      	mov	r1, r4
   1cccc:	f8c8 5010 	str.w	r5, [r8, #16]
   1ccd0:	f7ff fe83 	bl	1c9da <_Bfree>
   1ccd4:	4640      	mov	r0, r8
   1ccd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ccda:	3101      	adds	r1, #1
   1ccdc:	005b      	lsls	r3, r3, #1
   1ccde:	e7c6      	b.n	1cc6e <__lshift+0x1c>
   1cce0:	f842 0f04 	str.w	r0, [r2, #4]!
   1cce4:	3301      	adds	r3, #1
   1cce6:	e7ce      	b.n	1cc86 <__lshift+0x34>
   1cce8:	3904      	subs	r1, #4
   1ccea:	f853 2b04 	ldr.w	r2, [r3], #4
   1ccee:	459c      	cmp	ip, r3
   1ccf0:	f841 2f04 	str.w	r2, [r1, #4]!
   1ccf4:	d8f9      	bhi.n	1ccea <__lshift+0x98>
   1ccf6:	e7e6      	b.n	1ccc6 <__lshift+0x74>

0001ccf8 <__mcmp>:
   1ccf8:	6903      	ldr	r3, [r0, #16]
   1ccfa:	690a      	ldr	r2, [r1, #16]
   1ccfc:	1a9b      	subs	r3, r3, r2
   1ccfe:	b530      	push	{r4, r5, lr}
   1cd00:	d10c      	bne.n	1cd1c <__mcmp+0x24>
   1cd02:	0092      	lsls	r2, r2, #2
   1cd04:	3014      	adds	r0, #20
   1cd06:	3114      	adds	r1, #20
   1cd08:	1884      	adds	r4, r0, r2
   1cd0a:	4411      	add	r1, r2
   1cd0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1cd10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1cd14:	4295      	cmp	r5, r2
   1cd16:	d003      	beq.n	1cd20 <__mcmp+0x28>
   1cd18:	d305      	bcc.n	1cd26 <__mcmp+0x2e>
   1cd1a:	2301      	movs	r3, #1
   1cd1c:	4618      	mov	r0, r3
   1cd1e:	bd30      	pop	{r4, r5, pc}
   1cd20:	42a0      	cmp	r0, r4
   1cd22:	d3f3      	bcc.n	1cd0c <__mcmp+0x14>
   1cd24:	e7fa      	b.n	1cd1c <__mcmp+0x24>
   1cd26:	f04f 33ff 	mov.w	r3, #4294967295
   1cd2a:	e7f7      	b.n	1cd1c <__mcmp+0x24>

0001cd2c <__mdiff>:
   1cd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd30:	460d      	mov	r5, r1
   1cd32:	4607      	mov	r7, r0
   1cd34:	4611      	mov	r1, r2
   1cd36:	4614      	mov	r4, r2
   1cd38:	4628      	mov	r0, r5
   1cd3a:	f7ff ffdd 	bl	1ccf8 <__mcmp>
   1cd3e:	1e06      	subs	r6, r0, #0
   1cd40:	d108      	bne.n	1cd54 <__mdiff+0x28>
   1cd42:	4631      	mov	r1, r6
   1cd44:	4638      	mov	r0, r7
   1cd46:	f7ff fe14 	bl	1c972 <_Balloc>
   1cd4a:	2301      	movs	r3, #1
   1cd4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
   1cd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cd54:	bfa3      	ittte	ge
   1cd56:	4623      	movge	r3, r4
   1cd58:	462c      	movge	r4, r5
   1cd5a:	2600      	movge	r6, #0
   1cd5c:	2601      	movlt	r6, #1
   1cd5e:	bfa8      	it	ge
   1cd60:	461d      	movge	r5, r3
   1cd62:	6861      	ldr	r1, [r4, #4]
   1cd64:	4638      	mov	r0, r7
   1cd66:	f7ff fe04 	bl	1c972 <_Balloc>
   1cd6a:	f105 0914 	add.w	r9, r5, #20
   1cd6e:	60c6      	str	r6, [r0, #12]
   1cd70:	f104 0214 	add.w	r2, r4, #20
   1cd74:	6926      	ldr	r6, [r4, #16]
   1cd76:	f100 0114 	add.w	r1, r0, #20
   1cd7a:	692b      	ldr	r3, [r5, #16]
   1cd7c:	f04f 0e00 	mov.w	lr, #0
   1cd80:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   1cd84:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   1cd88:	f852 ab04 	ldr.w	sl, [r2], #4
   1cd8c:	f859 5b04 	ldr.w	r5, [r9], #4
   1cd90:	fa1f f38a 	uxth.w	r3, sl
   1cd94:	4694      	mov	ip, r2
   1cd96:	b2ac      	uxth	r4, r5
   1cd98:	45c8      	cmp	r8, r9
   1cd9a:	4473      	add	r3, lr
   1cd9c:	eba3 0304 	sub.w	r3, r3, r4
   1cda0:	ea4f 4415 	mov.w	r4, r5, lsr #16
   1cda4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   1cda8:	eb04 4423 	add.w	r4, r4, r3, asr #16
   1cdac:	b29b      	uxth	r3, r3
   1cdae:	ea4f 4e24 	mov.w	lr, r4, asr #16
   1cdb2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1cdb6:	f841 4b04 	str.w	r4, [r1], #4
   1cdba:	d8e5      	bhi.n	1cd88 <__mdiff+0x5c>
   1cdbc:	45bc      	cmp	ip, r7
   1cdbe:	d304      	bcc.n	1cdca <__mdiff+0x9e>
   1cdc0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1cdc4:	b183      	cbz	r3, 1cde8 <__mdiff+0xbc>
   1cdc6:	6106      	str	r6, [r0, #16]
   1cdc8:	e7c2      	b.n	1cd50 <__mdiff+0x24>
   1cdca:	f85c 4b04 	ldr.w	r4, [ip], #4
   1cdce:	b2a2      	uxth	r2, r4
   1cdd0:	4472      	add	r2, lr
   1cdd2:	1413      	asrs	r3, r2, #16
   1cdd4:	b292      	uxth	r2, r2
   1cdd6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   1cdda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1cdde:	ea4f 4e23 	mov.w	lr, r3, asr #16
   1cde2:	f841 2b04 	str.w	r2, [r1], #4
   1cde6:	e7e9      	b.n	1cdbc <__mdiff+0x90>
   1cde8:	3e01      	subs	r6, #1
   1cdea:	e7e9      	b.n	1cdc0 <__mdiff+0x94>

0001cdec <__d2b>:
   1cdec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1cdf0:	ec59 8b10 	vmov	r8, r9, d0
   1cdf4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   1cdf8:	460e      	mov	r6, r1
   1cdfa:	2101      	movs	r1, #1
   1cdfc:	4615      	mov	r5, r2
   1cdfe:	f7ff fdb8 	bl	1c972 <_Balloc>
   1ce02:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1ce06:	4607      	mov	r7, r0
   1ce08:	bb2c      	cbnz	r4, 1ce56 <__d2b+0x6a>
   1ce0a:	9301      	str	r3, [sp, #4]
   1ce0c:	f1b8 0300 	subs.w	r3, r8, #0
   1ce10:	d026      	beq.n	1ce60 <__d2b+0x74>
   1ce12:	4668      	mov	r0, sp
   1ce14:	9300      	str	r3, [sp, #0]
   1ce16:	f7ff fe54 	bl	1cac2 <__lo0bits>
   1ce1a:	9900      	ldr	r1, [sp, #0]
   1ce1c:	b1f0      	cbz	r0, 1ce5c <__d2b+0x70>
   1ce1e:	9a01      	ldr	r2, [sp, #4]
   1ce20:	f1c0 0320 	rsb	r3, r0, #32
   1ce24:	fa02 f303 	lsl.w	r3, r2, r3
   1ce28:	40c2      	lsrs	r2, r0
   1ce2a:	430b      	orrs	r3, r1
   1ce2c:	9201      	str	r2, [sp, #4]
   1ce2e:	617b      	str	r3, [r7, #20]
   1ce30:	9b01      	ldr	r3, [sp, #4]
   1ce32:	2b00      	cmp	r3, #0
   1ce34:	61bb      	str	r3, [r7, #24]
   1ce36:	bf14      	ite	ne
   1ce38:	2102      	movne	r1, #2
   1ce3a:	2101      	moveq	r1, #1
   1ce3c:	6139      	str	r1, [r7, #16]
   1ce3e:	b1c4      	cbz	r4, 1ce72 <__d2b+0x86>
   1ce40:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   1ce44:	4404      	add	r4, r0
   1ce46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1ce4a:	6034      	str	r4, [r6, #0]
   1ce4c:	6028      	str	r0, [r5, #0]
   1ce4e:	4638      	mov	r0, r7
   1ce50:	b003      	add	sp, #12
   1ce52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ce56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1ce5a:	e7d6      	b.n	1ce0a <__d2b+0x1e>
   1ce5c:	6179      	str	r1, [r7, #20]
   1ce5e:	e7e7      	b.n	1ce30 <__d2b+0x44>
   1ce60:	a801      	add	r0, sp, #4
   1ce62:	f7ff fe2e 	bl	1cac2 <__lo0bits>
   1ce66:	9b01      	ldr	r3, [sp, #4]
   1ce68:	2101      	movs	r1, #1
   1ce6a:	3020      	adds	r0, #32
   1ce6c:	617b      	str	r3, [r7, #20]
   1ce6e:	6139      	str	r1, [r7, #16]
   1ce70:	e7e5      	b.n	1ce3e <__d2b+0x52>
   1ce72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1ce76:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   1ce7a:	6030      	str	r0, [r6, #0]
   1ce7c:	6918      	ldr	r0, [r3, #16]
   1ce7e:	f7ff fe00 	bl	1ca82 <__hi0bits>
   1ce82:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   1ce86:	e7e1      	b.n	1ce4c <__d2b+0x60>

0001ce88 <_calloc_r>:
   1ce88:	b538      	push	{r3, r4, r5, lr}
   1ce8a:	fb02 f401 	mul.w	r4, r2, r1
   1ce8e:	4621      	mov	r1, r4
   1ce90:	f7fd fb3a 	bl	1a508 <_malloc_r>
   1ce94:	4605      	mov	r5, r0
   1ce96:	b118      	cbz	r0, 1cea0 <_calloc_r+0x18>
   1ce98:	4622      	mov	r2, r4
   1ce9a:	2100      	movs	r1, #0
   1ce9c:	f7ff faf0 	bl	1c480 <memset>
   1cea0:	4628      	mov	r0, r5
   1cea2:	bd38      	pop	{r3, r4, r5, pc}

0001cea4 <_realloc_r>:
   1cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cea6:	4607      	mov	r7, r0
   1cea8:	4614      	mov	r4, r2
   1ceaa:	460e      	mov	r6, r1
   1ceac:	b921      	cbnz	r1, 1ceb8 <_realloc_r+0x14>
   1ceae:	4611      	mov	r1, r2
   1ceb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ceb4:	f7fd bb28 	b.w	1a508 <_malloc_r>
   1ceb8:	b922      	cbnz	r2, 1cec4 <_realloc_r+0x20>
   1ceba:	4625      	mov	r5, r4
   1cebc:	f7fd fad6 	bl	1a46c <_free_r>
   1cec0:	4628      	mov	r0, r5
   1cec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cec4:	f000 f8ee 	bl	1d0a4 <_malloc_usable_size_r>
   1cec8:	42a0      	cmp	r0, r4
   1ceca:	d20f      	bcs.n	1ceec <_realloc_r+0x48>
   1cecc:	4621      	mov	r1, r4
   1cece:	4638      	mov	r0, r7
   1ced0:	f7fd fb1a 	bl	1a508 <_malloc_r>
   1ced4:	4605      	mov	r5, r0
   1ced6:	2800      	cmp	r0, #0
   1ced8:	d0f2      	beq.n	1cec0 <_realloc_r+0x1c>
   1ceda:	4631      	mov	r1, r6
   1cedc:	4622      	mov	r2, r4
   1cede:	f7ff fac2 	bl	1c466 <memcpy>
   1cee2:	4631      	mov	r1, r6
   1cee4:	4638      	mov	r0, r7
   1cee6:	f7fd fac1 	bl	1a46c <_free_r>
   1ceea:	e7e9      	b.n	1cec0 <_realloc_r+0x1c>
   1ceec:	4635      	mov	r5, r6
   1ceee:	e7e7      	b.n	1cec0 <_realloc_r+0x1c>

0001cef0 <__ssputs_r>:
   1cef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cef4:	688e      	ldr	r6, [r1, #8]
   1cef6:	4682      	mov	sl, r0
   1cef8:	460c      	mov	r4, r1
   1cefa:	4691      	mov	r9, r2
   1cefc:	429e      	cmp	r6, r3
   1cefe:	4698      	mov	r8, r3
   1cf00:	d838      	bhi.n	1cf74 <__ssputs_r+0x84>
   1cf02:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   1cf06:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   1cf0a:	d031      	beq.n	1cf70 <__ssputs_r+0x80>
   1cf0c:	6962      	ldr	r2, [r4, #20]
   1cf0e:	3301      	adds	r3, #1
   1cf10:	6825      	ldr	r5, [r4, #0]
   1cf12:	6909      	ldr	r1, [r1, #16]
   1cf14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1cf18:	1a6f      	subs	r7, r5, r1
   1cf1a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1cf1e:	443b      	add	r3, r7
   1cf20:	1055      	asrs	r5, r2, #1
   1cf22:	429d      	cmp	r5, r3
   1cf24:	bf38      	it	cc
   1cf26:	461d      	movcc	r5, r3
   1cf28:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   1cf2c:	d030      	beq.n	1cf90 <__ssputs_r+0xa0>
   1cf2e:	4629      	mov	r1, r5
   1cf30:	f7fd faea 	bl	1a508 <_malloc_r>
   1cf34:	4606      	mov	r6, r0
   1cf36:	b950      	cbnz	r0, 1cf4e <__ssputs_r+0x5e>
   1cf38:	230c      	movs	r3, #12
   1cf3a:	f04f 30ff 	mov.w	r0, #4294967295
   1cf3e:	f8ca 3000 	str.w	r3, [sl]
   1cf42:	89a3      	ldrh	r3, [r4, #12]
   1cf44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1cf48:	81a3      	strh	r3, [r4, #12]
   1cf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf4e:	463a      	mov	r2, r7
   1cf50:	6921      	ldr	r1, [r4, #16]
   1cf52:	f7ff fa88 	bl	1c466 <memcpy>
   1cf56:	89a3      	ldrh	r3, [r4, #12]
   1cf58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1cf5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1cf60:	81a3      	strh	r3, [r4, #12]
   1cf62:	6126      	str	r6, [r4, #16]
   1cf64:	443e      	add	r6, r7
   1cf66:	6165      	str	r5, [r4, #20]
   1cf68:	1bed      	subs	r5, r5, r7
   1cf6a:	6026      	str	r6, [r4, #0]
   1cf6c:	4646      	mov	r6, r8
   1cf6e:	60a5      	str	r5, [r4, #8]
   1cf70:	4546      	cmp	r6, r8
   1cf72:	d900      	bls.n	1cf76 <__ssputs_r+0x86>
   1cf74:	4646      	mov	r6, r8
   1cf76:	4632      	mov	r2, r6
   1cf78:	4649      	mov	r1, r9
   1cf7a:	6820      	ldr	r0, [r4, #0]
   1cf7c:	f7ff fcdf 	bl	1c93e <memmove>
   1cf80:	68a3      	ldr	r3, [r4, #8]
   1cf82:	2000      	movs	r0, #0
   1cf84:	1b9b      	subs	r3, r3, r6
   1cf86:	60a3      	str	r3, [r4, #8]
   1cf88:	6823      	ldr	r3, [r4, #0]
   1cf8a:	441e      	add	r6, r3
   1cf8c:	6026      	str	r6, [r4, #0]
   1cf8e:	e7dc      	b.n	1cf4a <__ssputs_r+0x5a>
   1cf90:	462a      	mov	r2, r5
   1cf92:	f7ff ff87 	bl	1cea4 <_realloc_r>
   1cf96:	4606      	mov	r6, r0
   1cf98:	2800      	cmp	r0, #0
   1cf9a:	d1e2      	bne.n	1cf62 <__ssputs_r+0x72>
   1cf9c:	6921      	ldr	r1, [r4, #16]
   1cf9e:	4650      	mov	r0, sl
   1cfa0:	f7fd fa64 	bl	1a46c <_free_r>
   1cfa4:	e7c8      	b.n	1cf38 <__ssputs_r+0x48>

0001cfa6 <_raise_r>:
   1cfa6:	291f      	cmp	r1, #31
   1cfa8:	b538      	push	{r3, r4, r5, lr}
   1cfaa:	4604      	mov	r4, r0
   1cfac:	460d      	mov	r5, r1
   1cfae:	d904      	bls.n	1cfba <_raise_r+0x14>
   1cfb0:	2316      	movs	r3, #22
   1cfb2:	6003      	str	r3, [r0, #0]
   1cfb4:	f04f 30ff 	mov.w	r0, #4294967295
   1cfb8:	bd38      	pop	{r3, r4, r5, pc}
   1cfba:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1cfbc:	b112      	cbz	r2, 1cfc4 <_raise_r+0x1e>
   1cfbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1cfc2:	b94b      	cbnz	r3, 1cfd8 <_raise_r+0x32>
   1cfc4:	4620      	mov	r0, r4
   1cfc6:	f000 f816 	bl	1cff6 <_getpid_r>
   1cfca:	462a      	mov	r2, r5
   1cfcc:	4601      	mov	r1, r0
   1cfce:	4620      	mov	r0, r4
   1cfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cfd4:	f7fd bc02 	b.w	1a7dc <_kill_r>
   1cfd8:	2b01      	cmp	r3, #1
   1cfda:	d00a      	beq.n	1cff2 <_raise_r+0x4c>
   1cfdc:	1c59      	adds	r1, r3, #1
   1cfde:	d103      	bne.n	1cfe8 <_raise_r+0x42>
   1cfe0:	2316      	movs	r3, #22
   1cfe2:	6003      	str	r3, [r0, #0]
   1cfe4:	2001      	movs	r0, #1
   1cfe6:	e7e7      	b.n	1cfb8 <_raise_r+0x12>
   1cfe8:	2400      	movs	r4, #0
   1cfea:	4628      	mov	r0, r5
   1cfec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1cff0:	4798      	blx	r3
   1cff2:	2000      	movs	r0, #0
   1cff4:	e7e0      	b.n	1cfb8 <_raise_r+0x12>

0001cff6 <_getpid_r>:
   1cff6:	f7fe b8c6 	b.w	1b186 <_getpid>

0001cffa <__sread>:
   1cffa:	b510      	push	{r4, lr}
   1cffc:	460c      	mov	r4, r1
   1cffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1d002:	f7fd fc5f 	bl	1a8c4 <_read_r>
   1d006:	2800      	cmp	r0, #0
   1d008:	bfab      	itete	ge
   1d00a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   1d00c:	89a3      	ldrhlt	r3, [r4, #12]
   1d00e:	181b      	addge	r3, r3, r0
   1d010:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   1d014:	bfac      	ite	ge
   1d016:	6563      	strge	r3, [r4, #84]	; 0x54
   1d018:	81a3      	strhlt	r3, [r4, #12]
   1d01a:	bd10      	pop	{r4, pc}

0001d01c <__swrite>:
   1d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d020:	461f      	mov	r7, r3
   1d022:	898b      	ldrh	r3, [r1, #12]
   1d024:	4605      	mov	r5, r0
   1d026:	460c      	mov	r4, r1
   1d028:	05db      	lsls	r3, r3, #23
   1d02a:	4616      	mov	r6, r2
   1d02c:	d505      	bpl.n	1d03a <__swrite+0x1e>
   1d02e:	2302      	movs	r3, #2
   1d030:	2200      	movs	r2, #0
   1d032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1d036:	f7fd fc27 	bl	1a888 <_lseek_r>
   1d03a:	89a3      	ldrh	r3, [r4, #12]
   1d03c:	4632      	mov	r2, r6
   1d03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1d042:	4628      	mov	r0, r5
   1d044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1d048:	81a3      	strh	r3, [r4, #12]
   1d04a:	463b      	mov	r3, r7
   1d04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d050:	f7fd bbd6 	b.w	1a800 <_write_r>

0001d054 <__sseek>:
   1d054:	b510      	push	{r4, lr}
   1d056:	460c      	mov	r4, r1
   1d058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1d05c:	f7fd fc14 	bl	1a888 <_lseek_r>
   1d060:	1c43      	adds	r3, r0, #1
   1d062:	89a3      	ldrh	r3, [r4, #12]
   1d064:	bf15      	itete	ne
   1d066:	6560      	strne	r0, [r4, #84]	; 0x54
   1d068:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1d06c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1d070:	81a3      	strheq	r3, [r4, #12]
   1d072:	bf18      	it	ne
   1d074:	81a3      	strhne	r3, [r4, #12]
   1d076:	bd10      	pop	{r4, pc}

0001d078 <__sclose>:
   1d078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1d07c:	f7fd bbd2 	b.w	1a824 <_close_r>

0001d080 <__ascii_mbtowc>:
   1d080:	b082      	sub	sp, #8
   1d082:	b901      	cbnz	r1, 1d086 <__ascii_mbtowc+0x6>
   1d084:	a901      	add	r1, sp, #4
   1d086:	b142      	cbz	r2, 1d09a <__ascii_mbtowc+0x1a>
   1d088:	b14b      	cbz	r3, 1d09e <__ascii_mbtowc+0x1e>
   1d08a:	7813      	ldrb	r3, [r2, #0]
   1d08c:	600b      	str	r3, [r1, #0]
   1d08e:	7812      	ldrb	r2, [r2, #0]
   1d090:	1c10      	adds	r0, r2, #0
   1d092:	bf18      	it	ne
   1d094:	2001      	movne	r0, #1
   1d096:	b002      	add	sp, #8
   1d098:	4770      	bx	lr
   1d09a:	4610      	mov	r0, r2
   1d09c:	e7fb      	b.n	1d096 <__ascii_mbtowc+0x16>
   1d09e:	f06f 0001 	mvn.w	r0, #1
   1d0a2:	e7f8      	b.n	1d096 <__ascii_mbtowc+0x16>

0001d0a4 <_malloc_usable_size_r>:
   1d0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d0a8:	1f18      	subs	r0, r3, #4
   1d0aa:	2b00      	cmp	r3, #0
   1d0ac:	bfbc      	itt	lt
   1d0ae:	580b      	ldrlt	r3, [r1, r0]
   1d0b0:	18c0      	addlt	r0, r0, r3
   1d0b2:	4770      	bx	lr

0001d0b4 <__ascii_wctomb>:
   1d0b4:	b149      	cbz	r1, 1d0ca <__ascii_wctomb+0x16>
   1d0b6:	2aff      	cmp	r2, #255	; 0xff
   1d0b8:	bf8d      	iteet	hi
   1d0ba:	238a      	movhi	r3, #138	; 0x8a
   1d0bc:	700a      	strbls	r2, [r1, #0]
   1d0be:	2001      	movls	r0, #1
   1d0c0:	6003      	strhi	r3, [r0, #0]
   1d0c2:	bf88      	it	hi
   1d0c4:	f04f 30ff 	movhi.w	r0, #4294967295
   1d0c8:	4770      	bx	lr
   1d0ca:	4608      	mov	r0, r1
   1d0cc:	4770      	bx	lr
