
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	20024098 	.word	0x20024098
   1c204:	0001f26d 	.word	0x0001f26d
   1c208:	0002ef67 	.word	0x0002ef67
   1c20c:	0001eec9 	.word	0x0001eec9
   1c210:	0001eec9 	.word	0x0001eec9
   1c214:	0001eec9 	.word	0x0001eec9
   1c218:	0001eec9 	.word	0x0001eec9
   1c21c:	0001eec9 	.word	0x0001eec9
   1c220:	0001eec9 	.word	0x0001eec9
   1c224:	0001eec9 	.word	0x0001eec9
   1c228:	0001eec9 	.word	0x0001eec9
   1c22c:	0001ee91 	.word	0x0001ee91
   1c230:	0001eec9 	.word	0x0001eec9
   1c234:	0001eec9 	.word	0x0001eec9
   1c238:	0001edcd 	.word	0x0001edcd
   1c23c:	0001e8fd 	.word	0x0001e8fd

0001c240 <_irq_vector_table>:
   1c240:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c250:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c260:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c270:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c280:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c290:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c2a0:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c2b0:	0002087d 0002f36d 0001eee5 0001eee5     }...m...........
   1c2c0:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c2d0:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c2e0:	0001eee5 0001eee5 0002f38b 0001eee5     ................
   1c2f0:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c300:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c310:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c320:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c330:	0001eee5 0001eee5 0001eee5 0001eee5     ................
   1c340:	0001eee5                                ....

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	00017840 00000001 0001c200 0001c200     @x..............
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c57e:	f1a4 0401 	sub.w	r4, r4, #1
   1c582:	d1e9      	bne.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_uldivmod>:
   1c7b8:	b953      	cbnz	r3, 1c7d0 <__aeabi_uldivmod+0x18>
   1c7ba:	b94a      	cbnz	r2, 1c7d0 <__aeabi_uldivmod+0x18>
   1c7bc:	2900      	cmp	r1, #0
   1c7be:	bf08      	it	eq
   1c7c0:	2800      	cmpeq	r0, #0
   1c7c2:	bf1c      	itt	ne
   1c7c4:	f04f 31ff 	movne.w	r1, #4294967295
   1c7c8:	f04f 30ff 	movne.w	r0, #4294967295
   1c7cc:	f000 b970 	b.w	1cab0 <__aeabi_idiv0>
   1c7d0:	f1ad 0c08 	sub.w	ip, sp, #8
   1c7d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c7d8:	f000 f806 	bl	1c7e8 <__udivmoddi4>
   1c7dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c7e4:	b004      	add	sp, #16
   1c7e6:	4770      	bx	lr

0001c7e8 <__udivmoddi4>:
   1c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1c7ee:	4604      	mov	r4, r0
   1c7f0:	4689      	mov	r9, r1
   1c7f2:	2b00      	cmp	r3, #0
   1c7f4:	f040 8083 	bne.w	1c8fe <__udivmoddi4+0x116>
   1c7f8:	428a      	cmp	r2, r1
   1c7fa:	4615      	mov	r5, r2
   1c7fc:	d945      	bls.n	1c88a <__udivmoddi4+0xa2>
   1c7fe:	fab2 f282 	clz	r2, r2
   1c802:	b14a      	cbz	r2, 1c818 <__udivmoddi4+0x30>
   1c804:	f1c2 0720 	rsb	r7, r2, #32
   1c808:	fa01 f302 	lsl.w	r3, r1, r2
   1c80c:	4095      	lsls	r5, r2
   1c80e:	4094      	lsls	r4, r2
   1c810:	fa20 f707 	lsr.w	r7, r0, r7
   1c814:	ea47 0903 	orr.w	r9, r7, r3
   1c818:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1c81c:	0c23      	lsrs	r3, r4, #16
   1c81e:	fa1f f885 	uxth.w	r8, r5
   1c822:	fbb9 fcfe 	udiv	ip, r9, lr
   1c826:	fb0e 991c 	mls	r9, lr, ip, r9
   1c82a:	fb0c f108 	mul.w	r1, ip, r8
   1c82e:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1c832:	4299      	cmp	r1, r3
   1c834:	d90a      	bls.n	1c84c <__udivmoddi4+0x64>
   1c836:	18eb      	adds	r3, r5, r3
   1c838:	bf2c      	ite	cs
   1c83a:	2001      	movcs	r0, #1
   1c83c:	2000      	movcc	r0, #0
   1c83e:	4299      	cmp	r1, r3
   1c840:	d902      	bls.n	1c848 <__udivmoddi4+0x60>
   1c842:	2800      	cmp	r0, #0
   1c844:	f000 811d 	beq.w	1ca82 <__udivmoddi4+0x29a>
   1c848:	f10c 3cff 	add.w	ip, ip, #4294967295
   1c84c:	1a59      	subs	r1, r3, r1
   1c84e:	b2a3      	uxth	r3, r4
   1c850:	fbb1 f0fe 	udiv	r0, r1, lr
   1c854:	fb0e 1110 	mls	r1, lr, r0, r1
   1c858:	fb00 f808 	mul.w	r8, r0, r8
   1c85c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1c860:	45a0      	cmp	r8, r4
   1c862:	d905      	bls.n	1c870 <__udivmoddi4+0x88>
   1c864:	192c      	adds	r4, r5, r4
   1c866:	d202      	bcs.n	1c86e <__udivmoddi4+0x86>
   1c868:	45a0      	cmp	r8, r4
   1c86a:	f200 810e 	bhi.w	1ca8a <__udivmoddi4+0x2a2>
   1c86e:	3801      	subs	r0, #1
   1c870:	eba4 0408 	sub.w	r4, r4, r8
   1c874:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1c878:	2700      	movs	r7, #0
   1c87a:	b11e      	cbz	r6, 1c884 <__udivmoddi4+0x9c>
   1c87c:	40d4      	lsrs	r4, r2
   1c87e:	2300      	movs	r3, #0
   1c880:	e9c6 4300 	strd	r4, r3, [r6]
   1c884:	4639      	mov	r1, r7
   1c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c88a:	2a00      	cmp	r2, #0
   1c88c:	d051      	beq.n	1c932 <__udivmoddi4+0x14a>
   1c88e:	fab2 f282 	clz	r2, r2
   1c892:	2a00      	cmp	r2, #0
   1c894:	f040 80af 	bne.w	1c9f6 <__udivmoddi4+0x20e>
   1c898:	1b49      	subs	r1, r1, r5
   1c89a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1c89e:	fa1f f885 	uxth.w	r8, r5
   1c8a2:	2701      	movs	r7, #1
   1c8a4:	0c23      	lsrs	r3, r4, #16
   1c8a6:	fbb1 fcfe 	udiv	ip, r1, lr
   1c8aa:	fb0e 111c 	mls	r1, lr, ip, r1
   1c8ae:	fb08 f00c 	mul.w	r0, r8, ip
   1c8b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1c8b6:	4298      	cmp	r0, r3
   1c8b8:	d90a      	bls.n	1c8d0 <__udivmoddi4+0xe8>
   1c8ba:	18eb      	adds	r3, r5, r3
   1c8bc:	bf2c      	ite	cs
   1c8be:	2101      	movcs	r1, #1
   1c8c0:	2100      	movcc	r1, #0
   1c8c2:	4298      	cmp	r0, r3
   1c8c4:	d902      	bls.n	1c8cc <__udivmoddi4+0xe4>
   1c8c6:	2900      	cmp	r1, #0
   1c8c8:	f000 80d7 	beq.w	1ca7a <__udivmoddi4+0x292>
   1c8cc:	f10c 3cff 	add.w	ip, ip, #4294967295
   1c8d0:	1a19      	subs	r1, r3, r0
   1c8d2:	b2a3      	uxth	r3, r4
   1c8d4:	fbb1 f0fe 	udiv	r0, r1, lr
   1c8d8:	fb0e 1110 	mls	r1, lr, r0, r1
   1c8dc:	fb08 f800 	mul.w	r8, r8, r0
   1c8e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1c8e4:	45a0      	cmp	r8, r4
   1c8e6:	d905      	bls.n	1c8f4 <__udivmoddi4+0x10c>
   1c8e8:	192c      	adds	r4, r5, r4
   1c8ea:	d202      	bcs.n	1c8f2 <__udivmoddi4+0x10a>
   1c8ec:	45a0      	cmp	r8, r4
   1c8ee:	f200 80c1 	bhi.w	1ca74 <__udivmoddi4+0x28c>
   1c8f2:	3801      	subs	r0, #1
   1c8f4:	eba4 0408 	sub.w	r4, r4, r8
   1c8f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1c8fc:	e7bd      	b.n	1c87a <__udivmoddi4+0x92>
   1c8fe:	428b      	cmp	r3, r1
   1c900:	d908      	bls.n	1c914 <__udivmoddi4+0x12c>
   1c902:	2e00      	cmp	r6, #0
   1c904:	d074      	beq.n	1c9f0 <__udivmoddi4+0x208>
   1c906:	2700      	movs	r7, #0
   1c908:	e9c6 0100 	strd	r0, r1, [r6]
   1c90c:	4638      	mov	r0, r7
   1c90e:	4639      	mov	r1, r7
   1c910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c914:	fab3 f783 	clz	r7, r3
   1c918:	b967      	cbnz	r7, 1c934 <__udivmoddi4+0x14c>
   1c91a:	428b      	cmp	r3, r1
   1c91c:	f0c0 80a4 	bcc.w	1ca68 <__udivmoddi4+0x280>
   1c920:	4282      	cmp	r2, r0
   1c922:	f240 80a1 	bls.w	1ca68 <__udivmoddi4+0x280>
   1c926:	4638      	mov	r0, r7
   1c928:	2e00      	cmp	r6, #0
   1c92a:	d0ab      	beq.n	1c884 <__udivmoddi4+0x9c>
   1c92c:	e9c6 4900 	strd	r4, r9, [r6]
   1c930:	e7a8      	b.n	1c884 <__udivmoddi4+0x9c>
   1c932:	deff      	udf	#255	; 0xff
   1c934:	f1c7 0520 	rsb	r5, r7, #32
   1c938:	40bb      	lsls	r3, r7
   1c93a:	fa02 fc07 	lsl.w	ip, r2, r7
   1c93e:	fa01 f407 	lsl.w	r4, r1, r7
   1c942:	40ea      	lsrs	r2, r5
   1c944:	fa20 f805 	lsr.w	r8, r0, r5
   1c948:	40e9      	lsrs	r1, r5
   1c94a:	fa00 fe07 	lsl.w	lr, r0, r7
   1c94e:	431a      	orrs	r2, r3
   1c950:	ea48 0404 	orr.w	r4, r8, r4
   1c954:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1c958:	0c20      	lsrs	r0, r4, #16
   1c95a:	fa1f f982 	uxth.w	r9, r2
   1c95e:	fbb1 faf8 	udiv	sl, r1, r8
   1c962:	fb08 111a 	mls	r1, r8, sl, r1
   1c966:	fb0a fb09 	mul.w	fp, sl, r9
   1c96a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c96e:	458b      	cmp	fp, r1
   1c970:	d90a      	bls.n	1c988 <__udivmoddi4+0x1a0>
   1c972:	1851      	adds	r1, r2, r1
   1c974:	bf2c      	ite	cs
   1c976:	2301      	movcs	r3, #1
   1c978:	2300      	movcc	r3, #0
   1c97a:	458b      	cmp	fp, r1
   1c97c:	d902      	bls.n	1c984 <__udivmoddi4+0x19c>
   1c97e:	2b00      	cmp	r3, #0
   1c980:	f000 8088 	beq.w	1ca94 <__udivmoddi4+0x2ac>
   1c984:	f10a 3aff 	add.w	sl, sl, #4294967295
   1c988:	eba1 010b 	sub.w	r1, r1, fp
   1c98c:	b2a4      	uxth	r4, r4
   1c98e:	fbb1 f0f8 	udiv	r0, r1, r8
   1c992:	fb08 1110 	mls	r1, r8, r0, r1
   1c996:	fb00 f909 	mul.w	r9, r0, r9
   1c99a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   1c99e:	4589      	cmp	r9, r1
   1c9a0:	d904      	bls.n	1c9ac <__udivmoddi4+0x1c4>
   1c9a2:	1851      	adds	r1, r2, r1
   1c9a4:	d201      	bcs.n	1c9aa <__udivmoddi4+0x1c2>
   1c9a6:	4589      	cmp	r9, r1
   1c9a8:	d87b      	bhi.n	1caa2 <__udivmoddi4+0x2ba>
   1c9aa:	3801      	subs	r0, #1
   1c9ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1c9b0:	eba1 0109 	sub.w	r1, r1, r9
   1c9b4:	fba0 890c 	umull	r8, r9, r0, ip
   1c9b8:	4549      	cmp	r1, r9
   1c9ba:	4644      	mov	r4, r8
   1c9bc:	464b      	mov	r3, r9
   1c9be:	d302      	bcc.n	1c9c6 <__udivmoddi4+0x1de>
   1c9c0:	d106      	bne.n	1c9d0 <__udivmoddi4+0x1e8>
   1c9c2:	45c6      	cmp	lr, r8
   1c9c4:	d204      	bcs.n	1c9d0 <__udivmoddi4+0x1e8>
   1c9c6:	3801      	subs	r0, #1
   1c9c8:	ebb8 040c 	subs.w	r4, r8, ip
   1c9cc:	eb69 0302 	sbc.w	r3, r9, r2
   1c9d0:	2e00      	cmp	r6, #0
   1c9d2:	d05d      	beq.n	1ca90 <__udivmoddi4+0x2a8>
   1c9d4:	ebbe 0204 	subs.w	r2, lr, r4
   1c9d8:	eb61 0103 	sbc.w	r1, r1, r3
   1c9dc:	fa01 f505 	lsl.w	r5, r1, r5
   1c9e0:	fa22 f307 	lsr.w	r3, r2, r7
   1c9e4:	40f9      	lsrs	r1, r7
   1c9e6:	2700      	movs	r7, #0
   1c9e8:	431d      	orrs	r5, r3
   1c9ea:	e9c6 5100 	strd	r5, r1, [r6]
   1c9ee:	e749      	b.n	1c884 <__udivmoddi4+0x9c>
   1c9f0:	4637      	mov	r7, r6
   1c9f2:	4630      	mov	r0, r6
   1c9f4:	e746      	b.n	1c884 <__udivmoddi4+0x9c>
   1c9f6:	f1c2 0020 	rsb	r0, r2, #32
   1c9fa:	4095      	lsls	r5, r2
   1c9fc:	fa01 f702 	lsl.w	r7, r1, r2
   1ca00:	fa21 f300 	lsr.w	r3, r1, r0
   1ca04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ca08:	fa24 f100 	lsr.w	r1, r4, r0
   1ca0c:	fa1f f885 	uxth.w	r8, r5
   1ca10:	4094      	lsls	r4, r2
   1ca12:	4339      	orrs	r1, r7
   1ca14:	fbb3 f0fe 	udiv	r0, r3, lr
   1ca18:	0c0f      	lsrs	r7, r1, #16
   1ca1a:	fb0e 3310 	mls	r3, lr, r0, r3
   1ca1e:	fb00 fc08 	mul.w	ip, r0, r8
   1ca22:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   1ca26:	459c      	cmp	ip, r3
   1ca28:	d907      	bls.n	1ca3a <__udivmoddi4+0x252>
   1ca2a:	18eb      	adds	r3, r5, r3
   1ca2c:	bf2c      	ite	cs
   1ca2e:	2701      	movcs	r7, #1
   1ca30:	2700      	movcc	r7, #0
   1ca32:	459c      	cmp	ip, r3
   1ca34:	d900      	bls.n	1ca38 <__udivmoddi4+0x250>
   1ca36:	b38f      	cbz	r7, 1ca9c <__udivmoddi4+0x2b4>
   1ca38:	3801      	subs	r0, #1
   1ca3a:	eba3 030c 	sub.w	r3, r3, ip
   1ca3e:	b289      	uxth	r1, r1
   1ca40:	fbb3 f7fe 	udiv	r7, r3, lr
   1ca44:	fb0e 3317 	mls	r3, lr, r7, r3
   1ca48:	fb07 fc08 	mul.w	ip, r7, r8
   1ca4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1ca50:	458c      	cmp	ip, r1
   1ca52:	d904      	bls.n	1ca5e <__udivmoddi4+0x276>
   1ca54:	1869      	adds	r1, r5, r1
   1ca56:	d201      	bcs.n	1ca5c <__udivmoddi4+0x274>
   1ca58:	458c      	cmp	ip, r1
   1ca5a:	d825      	bhi.n	1caa8 <__udivmoddi4+0x2c0>
   1ca5c:	3f01      	subs	r7, #1
   1ca5e:	eba1 010c 	sub.w	r1, r1, ip
   1ca62:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   1ca66:	e71d      	b.n	1c8a4 <__udivmoddi4+0xbc>
   1ca68:	1a84      	subs	r4, r0, r2
   1ca6a:	eb61 0303 	sbc.w	r3, r1, r3
   1ca6e:	2001      	movs	r0, #1
   1ca70:	4699      	mov	r9, r3
   1ca72:	e759      	b.n	1c928 <__udivmoddi4+0x140>
   1ca74:	3802      	subs	r0, #2
   1ca76:	442c      	add	r4, r5
   1ca78:	e73c      	b.n	1c8f4 <__udivmoddi4+0x10c>
   1ca7a:	f1ac 0c02 	sub.w	ip, ip, #2
   1ca7e:	442b      	add	r3, r5
   1ca80:	e726      	b.n	1c8d0 <__udivmoddi4+0xe8>
   1ca82:	f1ac 0c02 	sub.w	ip, ip, #2
   1ca86:	442b      	add	r3, r5
   1ca88:	e6e0      	b.n	1c84c <__udivmoddi4+0x64>
   1ca8a:	3802      	subs	r0, #2
   1ca8c:	442c      	add	r4, r5
   1ca8e:	e6ef      	b.n	1c870 <__udivmoddi4+0x88>
   1ca90:	4637      	mov	r7, r6
   1ca92:	e6f7      	b.n	1c884 <__udivmoddi4+0x9c>
   1ca94:	f1aa 0a02 	sub.w	sl, sl, #2
   1ca98:	4411      	add	r1, r2
   1ca9a:	e775      	b.n	1c988 <__udivmoddi4+0x1a0>
   1ca9c:	3802      	subs	r0, #2
   1ca9e:	442b      	add	r3, r5
   1caa0:	e7cb      	b.n	1ca3a <__udivmoddi4+0x252>
   1caa2:	3802      	subs	r0, #2
   1caa4:	4411      	add	r1, r2
   1caa6:	e781      	b.n	1c9ac <__udivmoddi4+0x1c4>
   1caa8:	3f02      	subs	r7, #2
   1caaa:	4429      	add	r1, r5
   1caac:	e7d7      	b.n	1ca5e <__udivmoddi4+0x276>
   1caae:	bf00      	nop

0001cab0 <__aeabi_idiv0>:
   1cab0:	4770      	bx	lr
   1cab2:	bf00      	nop

0001cab4 <__aeabi_dmul>:
   1cab4:	b570      	push	{r4, r5, r6, lr}
   1cab6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1caba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1cabe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1cac2:	bf1d      	ittte	ne
   1cac4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1cac8:	ea94 0f0c 	teqne	r4, ip
   1cacc:	ea95 0f0c 	teqne	r5, ip
   1cad0:	f000 f8de 	bleq	1cc90 <__aeabi_dmul+0x1dc>
   1cad4:	442c      	add	r4, r5
   1cad6:	ea81 0603 	eor.w	r6, r1, r3
   1cada:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1cade:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1cae2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1cae6:	bf18      	it	ne
   1cae8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1caec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1caf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1caf4:	d038      	beq.n	1cb68 <__aeabi_dmul+0xb4>
   1caf6:	fba0 ce02 	umull	ip, lr, r0, r2
   1cafa:	f04f 0500 	mov.w	r5, #0
   1cafe:	fbe1 e502 	umlal	lr, r5, r1, r2
   1cb02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1cb06:	fbe0 e503 	umlal	lr, r5, r0, r3
   1cb0a:	f04f 0600 	mov.w	r6, #0
   1cb0e:	fbe1 5603 	umlal	r5, r6, r1, r3
   1cb12:	f09c 0f00 	teq	ip, #0
   1cb16:	bf18      	it	ne
   1cb18:	f04e 0e01 	orrne.w	lr, lr, #1
   1cb1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1cb20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1cb24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1cb28:	d204      	bcs.n	1cb34 <__aeabi_dmul+0x80>
   1cb2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1cb2e:	416d      	adcs	r5, r5
   1cb30:	eb46 0606 	adc.w	r6, r6, r6
   1cb34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1cb38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1cb3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1cb40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1cb44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1cb48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb4c:	bf88      	it	hi
   1cb4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb52:	d81e      	bhi.n	1cb92 <__aeabi_dmul+0xde>
   1cb54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1cb58:	bf08      	it	eq
   1cb5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1cb5e:	f150 0000 	adcs.w	r0, r0, #0
   1cb62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	pop	{r4, r5, r6, pc}
   1cb68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1cb6c:	ea46 0101 	orr.w	r1, r6, r1
   1cb70:	ea40 0002 	orr.w	r0, r0, r2
   1cb74:	ea81 0103 	eor.w	r1, r1, r3
   1cb78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1cb7c:	bfc2      	ittt	gt
   1cb7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb86:	bd70      	popgt	{r4, r5, r6, pc}
   1cb88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb8c:	f04f 0e00 	mov.w	lr, #0
   1cb90:	3c01      	subs	r4, #1
   1cb92:	f300 80ab 	bgt.w	1ccec <__aeabi_dmul+0x238>
   1cb96:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1cb9a:	bfde      	ittt	le
   1cb9c:	2000      	movle	r0, #0
   1cb9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1cba2:	bd70      	pople	{r4, r5, r6, pc}
   1cba4:	f1c4 0400 	rsb	r4, r4, #0
   1cba8:	3c20      	subs	r4, #32
   1cbaa:	da35      	bge.n	1cc18 <__aeabi_dmul+0x164>
   1cbac:	340c      	adds	r4, #12
   1cbae:	dc1b      	bgt.n	1cbe8 <__aeabi_dmul+0x134>
   1cbb0:	f104 0414 	add.w	r4, r4, #20
   1cbb4:	f1c4 0520 	rsb	r5, r4, #32
   1cbb8:	fa00 f305 	lsl.w	r3, r0, r5
   1cbbc:	fa20 f004 	lsr.w	r0, r0, r4
   1cbc0:	fa01 f205 	lsl.w	r2, r1, r5
   1cbc4:	ea40 0002 	orr.w	r0, r0, r2
   1cbc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1cbcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1cbd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1cbd4:	fa21 f604 	lsr.w	r6, r1, r4
   1cbd8:	eb42 0106 	adc.w	r1, r2, r6
   1cbdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cbe0:	bf08      	it	eq
   1cbe2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cbe6:	bd70      	pop	{r4, r5, r6, pc}
   1cbe8:	f1c4 040c 	rsb	r4, r4, #12
   1cbec:	f1c4 0520 	rsb	r5, r4, #32
   1cbf0:	fa00 f304 	lsl.w	r3, r0, r4
   1cbf4:	fa20 f005 	lsr.w	r0, r0, r5
   1cbf8:	fa01 f204 	lsl.w	r2, r1, r4
   1cbfc:	ea40 0002 	orr.w	r0, r0, r2
   1cc00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cc04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1cc08:	f141 0100 	adc.w	r1, r1, #0
   1cc0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cc10:	bf08      	it	eq
   1cc12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cc16:	bd70      	pop	{r4, r5, r6, pc}
   1cc18:	f1c4 0520 	rsb	r5, r4, #32
   1cc1c:	fa00 f205 	lsl.w	r2, r0, r5
   1cc20:	ea4e 0e02 	orr.w	lr, lr, r2
   1cc24:	fa20 f304 	lsr.w	r3, r0, r4
   1cc28:	fa01 f205 	lsl.w	r2, r1, r5
   1cc2c:	ea43 0302 	orr.w	r3, r3, r2
   1cc30:	fa21 f004 	lsr.w	r0, r1, r4
   1cc34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cc38:	fa21 f204 	lsr.w	r2, r1, r4
   1cc3c:	ea20 0002 	bic.w	r0, r0, r2
   1cc40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1cc44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cc48:	bf08      	it	eq
   1cc4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cc4e:	bd70      	pop	{r4, r5, r6, pc}
   1cc50:	f094 0f00 	teq	r4, #0
   1cc54:	d10f      	bne.n	1cc76 <__aeabi_dmul+0x1c2>
   1cc56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1cc5a:	0040      	lsls	r0, r0, #1
   1cc5c:	eb41 0101 	adc.w	r1, r1, r1
   1cc60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cc64:	bf08      	it	eq
   1cc66:	3c01      	subeq	r4, #1
   1cc68:	d0f7      	beq.n	1cc5a <__aeabi_dmul+0x1a6>
   1cc6a:	ea41 0106 	orr.w	r1, r1, r6
   1cc6e:	f095 0f00 	teq	r5, #0
   1cc72:	bf18      	it	ne
   1cc74:	4770      	bxne	lr
   1cc76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1cc7a:	0052      	lsls	r2, r2, #1
   1cc7c:	eb43 0303 	adc.w	r3, r3, r3
   1cc80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1cc84:	bf08      	it	eq
   1cc86:	3d01      	subeq	r5, #1
   1cc88:	d0f7      	beq.n	1cc7a <__aeabi_dmul+0x1c6>
   1cc8a:	ea43 0306 	orr.w	r3, r3, r6
   1cc8e:	4770      	bx	lr
   1cc90:	ea94 0f0c 	teq	r4, ip
   1cc94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cc98:	bf18      	it	ne
   1cc9a:	ea95 0f0c 	teqne	r5, ip
   1cc9e:	d00c      	beq.n	1ccba <__aeabi_dmul+0x206>
   1cca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cca4:	bf18      	it	ne
   1cca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ccaa:	d1d1      	bne.n	1cc50 <__aeabi_dmul+0x19c>
   1ccac:	ea81 0103 	eor.w	r1, r1, r3
   1ccb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ccb4:	f04f 0000 	mov.w	r0, #0
   1ccb8:	bd70      	pop	{r4, r5, r6, pc}
   1ccba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ccbe:	bf06      	itte	eq
   1ccc0:	4610      	moveq	r0, r2
   1ccc2:	4619      	moveq	r1, r3
   1ccc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ccc8:	d019      	beq.n	1ccfe <__aeabi_dmul+0x24a>
   1ccca:	ea94 0f0c 	teq	r4, ip
   1ccce:	d102      	bne.n	1ccd6 <__aeabi_dmul+0x222>
   1ccd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1ccd4:	d113      	bne.n	1ccfe <__aeabi_dmul+0x24a>
   1ccd6:	ea95 0f0c 	teq	r5, ip
   1ccda:	d105      	bne.n	1cce8 <__aeabi_dmul+0x234>
   1ccdc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1cce0:	bf1c      	itt	ne
   1cce2:	4610      	movne	r0, r2
   1cce4:	4619      	movne	r1, r3
   1cce6:	d10a      	bne.n	1ccfe <__aeabi_dmul+0x24a>
   1cce8:	ea81 0103 	eor.w	r1, r1, r3
   1ccec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ccf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ccf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1ccf8:	f04f 0000 	mov.w	r0, #0
   1ccfc:	bd70      	pop	{r4, r5, r6, pc}
   1ccfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1cd02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1cd06:	bd70      	pop	{r4, r5, r6, pc}

0001cd08 <__aeabi_ddiv>:
   1cd08:	b570      	push	{r4, r5, r6, lr}
   1cd0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1cd0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1cd12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1cd16:	bf1d      	ittte	ne
   1cd18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1cd1c:	ea94 0f0c 	teqne	r4, ip
   1cd20:	ea95 0f0c 	teqne	r5, ip
   1cd24:	f000 f8a7 	bleq	1ce76 <__aeabi_ddiv+0x16e>
   1cd28:	eba4 0405 	sub.w	r4, r4, r5
   1cd2c:	ea81 0e03 	eor.w	lr, r1, r3
   1cd30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cd34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1cd38:	f000 8088 	beq.w	1ce4c <__aeabi_ddiv+0x144>
   1cd3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1cd40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1cd44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1cd48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1cd4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1cd50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1cd54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1cd58:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1cd5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1cd60:	429d      	cmp	r5, r3
   1cd62:	bf08      	it	eq
   1cd64:	4296      	cmpeq	r6, r2
   1cd66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1cd6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1cd6e:	d202      	bcs.n	1cd76 <__aeabi_ddiv+0x6e>
   1cd70:	085b      	lsrs	r3, r3, #1
   1cd72:	ea4f 0232 	mov.w	r2, r2, rrx
   1cd76:	1ab6      	subs	r6, r6, r2
   1cd78:	eb65 0503 	sbc.w	r5, r5, r3
   1cd7c:	085b      	lsrs	r3, r3, #1
   1cd7e:	ea4f 0232 	mov.w	r2, r2, rrx
   1cd82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1cd86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1cd8a:	ebb6 0e02 	subs.w	lr, r6, r2
   1cd8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cd92:	bf22      	ittt	cs
   1cd94:	1ab6      	subcs	r6, r6, r2
   1cd96:	4675      	movcs	r5, lr
   1cd98:	ea40 000c 	orrcs.w	r0, r0, ip
   1cd9c:	085b      	lsrs	r3, r3, #1
   1cd9e:	ea4f 0232 	mov.w	r2, r2, rrx
   1cda2:	ebb6 0e02 	subs.w	lr, r6, r2
   1cda6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cdaa:	bf22      	ittt	cs
   1cdac:	1ab6      	subcs	r6, r6, r2
   1cdae:	4675      	movcs	r5, lr
   1cdb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cdb4:	085b      	lsrs	r3, r3, #1
   1cdb6:	ea4f 0232 	mov.w	r2, r2, rrx
   1cdba:	ebb6 0e02 	subs.w	lr, r6, r2
   1cdbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cdc2:	bf22      	ittt	cs
   1cdc4:	1ab6      	subcs	r6, r6, r2
   1cdc6:	4675      	movcs	r5, lr
   1cdc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cdcc:	085b      	lsrs	r3, r3, #1
   1cdce:	ea4f 0232 	mov.w	r2, r2, rrx
   1cdd2:	ebb6 0e02 	subs.w	lr, r6, r2
   1cdd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cdda:	bf22      	ittt	cs
   1cddc:	1ab6      	subcs	r6, r6, r2
   1cdde:	4675      	movcs	r5, lr
   1cde0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cde4:	ea55 0e06 	orrs.w	lr, r5, r6
   1cde8:	d018      	beq.n	1ce1c <__aeabi_ddiv+0x114>
   1cdea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1cdee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1cdf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cdf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cdfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cdfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1ce02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1ce06:	d1c0      	bne.n	1cd8a <__aeabi_ddiv+0x82>
   1ce08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ce0c:	d10b      	bne.n	1ce26 <__aeabi_ddiv+0x11e>
   1ce0e:	ea41 0100 	orr.w	r1, r1, r0
   1ce12:	f04f 0000 	mov.w	r0, #0
   1ce16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1ce1a:	e7b6      	b.n	1cd8a <__aeabi_ddiv+0x82>
   1ce1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ce20:	bf04      	itt	eq
   1ce22:	4301      	orreq	r1, r0
   1ce24:	2000      	moveq	r0, #0
   1ce26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ce2a:	bf88      	it	hi
   1ce2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ce30:	f63f aeaf 	bhi.w	1cb92 <__aeabi_dmul+0xde>
   1ce34:	ebb5 0c03 	subs.w	ip, r5, r3
   1ce38:	bf04      	itt	eq
   1ce3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1ce3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ce42:	f150 0000 	adcs.w	r0, r0, #0
   1ce46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ce4a:	bd70      	pop	{r4, r5, r6, pc}
   1ce4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1ce50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1ce54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1ce58:	bfc2      	ittt	gt
   1ce5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ce5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ce62:	bd70      	popgt	{r4, r5, r6, pc}
   1ce64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ce68:	f04f 0e00 	mov.w	lr, #0
   1ce6c:	3c01      	subs	r4, #1
   1ce6e:	e690      	b.n	1cb92 <__aeabi_dmul+0xde>
   1ce70:	ea45 0e06 	orr.w	lr, r5, r6
   1ce74:	e68d      	b.n	1cb92 <__aeabi_dmul+0xde>
   1ce76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ce7a:	ea94 0f0c 	teq	r4, ip
   1ce7e:	bf08      	it	eq
   1ce80:	ea95 0f0c 	teqeq	r5, ip
   1ce84:	f43f af3b 	beq.w	1ccfe <__aeabi_dmul+0x24a>
   1ce88:	ea94 0f0c 	teq	r4, ip
   1ce8c:	d10a      	bne.n	1cea4 <__aeabi_ddiv+0x19c>
   1ce8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ce92:	f47f af34 	bne.w	1ccfe <__aeabi_dmul+0x24a>
   1ce96:	ea95 0f0c 	teq	r5, ip
   1ce9a:	f47f af25 	bne.w	1cce8 <__aeabi_dmul+0x234>
   1ce9e:	4610      	mov	r0, r2
   1cea0:	4619      	mov	r1, r3
   1cea2:	e72c      	b.n	1ccfe <__aeabi_dmul+0x24a>
   1cea4:	ea95 0f0c 	teq	r5, ip
   1cea8:	d106      	bne.n	1ceb8 <__aeabi_ddiv+0x1b0>
   1ceaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ceae:	f43f aefd 	beq.w	1ccac <__aeabi_dmul+0x1f8>
   1ceb2:	4610      	mov	r0, r2
   1ceb4:	4619      	mov	r1, r3
   1ceb6:	e722      	b.n	1ccfe <__aeabi_dmul+0x24a>
   1ceb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cebc:	bf18      	it	ne
   1cebe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cec2:	f47f aec5 	bne.w	1cc50 <__aeabi_dmul+0x19c>
   1cec6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1ceca:	f47f af0d 	bne.w	1cce8 <__aeabi_dmul+0x234>
   1cece:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1ced2:	f47f aeeb 	bne.w	1ccac <__aeabi_dmul+0x1f8>
   1ced6:	e712      	b.n	1ccfe <__aeabi_dmul+0x24a>

0001ced8 <__gedf2>:
   1ced8:	f04f 3cff 	mov.w	ip, #4294967295
   1cedc:	e006      	b.n	1ceec <__cmpdf2+0x4>
   1cede:	bf00      	nop

0001cee0 <__ledf2>:
   1cee0:	f04f 0c01 	mov.w	ip, #1
   1cee4:	e002      	b.n	1ceec <__cmpdf2+0x4>
   1cee6:	bf00      	nop

0001cee8 <__cmpdf2>:
   1cee8:	f04f 0c01 	mov.w	ip, #1
   1ceec:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cef0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cef8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cefc:	bf18      	it	ne
   1cefe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cf02:	d01b      	beq.n	1cf3c <__cmpdf2+0x54>
   1cf04:	b001      	add	sp, #4
   1cf06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cf0a:	bf0c      	ite	eq
   1cf0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cf10:	ea91 0f03 	teqne	r1, r3
   1cf14:	bf02      	ittt	eq
   1cf16:	ea90 0f02 	teqeq	r0, r2
   1cf1a:	2000      	moveq	r0, #0
   1cf1c:	4770      	bxeq	lr
   1cf1e:	f110 0f00 	cmn.w	r0, #0
   1cf22:	ea91 0f03 	teq	r1, r3
   1cf26:	bf58      	it	pl
   1cf28:	4299      	cmppl	r1, r3
   1cf2a:	bf08      	it	eq
   1cf2c:	4290      	cmpeq	r0, r2
   1cf2e:	bf2c      	ite	cs
   1cf30:	17d8      	asrcs	r0, r3, #31
   1cf32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cf36:	f040 0001 	orr.w	r0, r0, #1
   1cf3a:	4770      	bx	lr
   1cf3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cf40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cf44:	d102      	bne.n	1cf4c <__cmpdf2+0x64>
   1cf46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cf4a:	d107      	bne.n	1cf5c <__cmpdf2+0x74>
   1cf4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cf50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cf54:	d1d6      	bne.n	1cf04 <__cmpdf2+0x1c>
   1cf56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cf5a:	d0d3      	beq.n	1cf04 <__cmpdf2+0x1c>
   1cf5c:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cf60:	4770      	bx	lr
   1cf62:	bf00      	nop

0001cf64 <__aeabi_cdrcmple>:
   1cf64:	4684      	mov	ip, r0
   1cf66:	4610      	mov	r0, r2
   1cf68:	4662      	mov	r2, ip
   1cf6a:	468c      	mov	ip, r1
   1cf6c:	4619      	mov	r1, r3
   1cf6e:	4663      	mov	r3, ip
   1cf70:	e000      	b.n	1cf74 <__aeabi_cdcmpeq>
   1cf72:	bf00      	nop

0001cf74 <__aeabi_cdcmpeq>:
   1cf74:	b501      	push	{r0, lr}
   1cf76:	f7ff ffb7 	bl	1cee8 <__cmpdf2>
   1cf7a:	2800      	cmp	r0, #0
   1cf7c:	bf48      	it	mi
   1cf7e:	f110 0f00 	cmnmi.w	r0, #0
   1cf82:	bd01      	pop	{r0, pc}

0001cf84 <__aeabi_dcmpeq>:
   1cf84:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cf88:	f7ff fff4 	bl	1cf74 <__aeabi_cdcmpeq>
   1cf8c:	bf0c      	ite	eq
   1cf8e:	2001      	moveq	r0, #1
   1cf90:	2000      	movne	r0, #0
   1cf92:	f85d fb08 	ldr.w	pc, [sp], #8
   1cf96:	bf00      	nop

0001cf98 <__aeabi_dcmplt>:
   1cf98:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cf9c:	f7ff ffea 	bl	1cf74 <__aeabi_cdcmpeq>
   1cfa0:	bf34      	ite	cc
   1cfa2:	2001      	movcc	r0, #1
   1cfa4:	2000      	movcs	r0, #0
   1cfa6:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfaa:	bf00      	nop

0001cfac <__aeabi_dcmple>:
   1cfac:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfb0:	f7ff ffe0 	bl	1cf74 <__aeabi_cdcmpeq>
   1cfb4:	bf94      	ite	ls
   1cfb6:	2001      	movls	r0, #1
   1cfb8:	2000      	movhi	r0, #0
   1cfba:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfbe:	bf00      	nop

0001cfc0 <__aeabi_dcmpge>:
   1cfc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfc4:	f7ff ffce 	bl	1cf64 <__aeabi_cdrcmple>
   1cfc8:	bf94      	ite	ls
   1cfca:	2001      	movls	r0, #1
   1cfcc:	2000      	movhi	r0, #0
   1cfce:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfd2:	bf00      	nop

0001cfd4 <__aeabi_dcmpgt>:
   1cfd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cfd8:	f7ff ffc4 	bl	1cf64 <__aeabi_cdrcmple>
   1cfdc:	bf34      	ite	cc
   1cfde:	2001      	movcc	r0, #1
   1cfe0:	2000      	movcs	r0, #0
   1cfe2:	f85d fb08 	ldr.w	pc, [sp], #8
   1cfe6:	bf00      	nop

0001cfe8 <__aeabi_dcmpun>:
   1cfe8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cfec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cff0:	d102      	bne.n	1cff8 <__aeabi_dcmpun+0x10>
   1cff2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cff6:	d10a      	bne.n	1d00e <__aeabi_dcmpun+0x26>
   1cff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d000:	d102      	bne.n	1d008 <__aeabi_dcmpun+0x20>
   1d002:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d006:	d102      	bne.n	1d00e <__aeabi_dcmpun+0x26>
   1d008:	f04f 0000 	mov.w	r0, #0
   1d00c:	4770      	bx	lr
   1d00e:	f04f 0001 	mov.w	r0, #1
   1d012:	4770      	bx	lr

0001d014 <__aeabi_d2iz>:
   1d014:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1d018:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1d01c:	d215      	bcs.n	1d04a <__aeabi_d2iz+0x36>
   1d01e:	d511      	bpl.n	1d044 <__aeabi_d2iz+0x30>
   1d020:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1d024:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1d028:	d912      	bls.n	1d050 <__aeabi_d2iz+0x3c>
   1d02a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1d02e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d032:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1d036:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1d03a:	fa23 f002 	lsr.w	r0, r3, r2
   1d03e:	bf18      	it	ne
   1d040:	4240      	negne	r0, r0
   1d042:	4770      	bx	lr
   1d044:	f04f 0000 	mov.w	r0, #0
   1d048:	4770      	bx	lr
   1d04a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1d04e:	d105      	bne.n	1d05c <__aeabi_d2iz+0x48>
   1d050:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1d054:	bf08      	it	eq
   1d056:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1d05a:	4770      	bx	lr
   1d05c:	f04f 0000 	mov.w	r0, #0
   1d060:	4770      	bx	lr
   1d062:	bf00      	nop

0001d064 <strcmp>:
   1d064:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d068:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d06c:	2a01      	cmp	r2, #1
   1d06e:	bf28      	it	cs
   1d070:	429a      	cmpcs	r2, r3
   1d072:	d0f7      	beq.n	1d064 <strcmp>
   1d074:	1ad0      	subs	r0, r2, r3
   1d076:	4770      	bx	lr

0001d078 <strlen>:
   1d078:	4603      	mov	r3, r0
   1d07a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d07e:	2a00      	cmp	r2, #0
   1d080:	d1fb      	bne.n	1d07a <strlen+0x2>
   1d082:	1a18      	subs	r0, r3, r0
   1d084:	3801      	subs	r0, #1
   1d086:	4770      	bx	lr

0001d088 <_dtoa_r>:
   1d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d08c:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1d08e:	b099      	sub	sp, #100	; 0x64
   1d090:	4683      	mov	fp, r0
   1d092:	9108      	str	r1, [sp, #32]
   1d094:	920d      	str	r2, [sp, #52]	; 0x34
   1d096:	9314      	str	r3, [sp, #80]	; 0x50
   1d098:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1d09a:	ec55 4b10 	vmov	r4, r5, d0
   1d09e:	e9cd 4500 	strd	r4, r5, [sp]
   1d0a2:	b947      	cbnz	r7, 1d0b6 <_dtoa_r+0x2e>
   1d0a4:	2010      	movs	r0, #16
   1d0a6:	f011 f963 	bl	2e370 <malloc>
   1d0aa:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   1d0ae:	6007      	str	r7, [r0, #0]
   1d0b0:	60c7      	str	r7, [r0, #12]
   1d0b2:	e9c0 7701 	strd	r7, r7, [r0, #4]
   1d0b6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1d0ba:	6819      	ldr	r1, [r3, #0]
   1d0bc:	b159      	cbz	r1, 1d0d6 <_dtoa_r+0x4e>
   1d0be:	685a      	ldr	r2, [r3, #4]
   1d0c0:	2301      	movs	r3, #1
   1d0c2:	4658      	mov	r0, fp
   1d0c4:	4093      	lsls	r3, r2
   1d0c6:	604a      	str	r2, [r1, #4]
   1d0c8:	608b      	str	r3, [r1, #8]
   1d0ca:	f013 f9ac 	bl	30426 <_Bfree>
   1d0ce:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1d0d2:	2200      	movs	r2, #0
   1d0d4:	601a      	str	r2, [r3, #0]
   1d0d6:	1e2b      	subs	r3, r5, #0
   1d0d8:	bfb7      	itett	lt
   1d0da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1d0de:	2300      	movge	r3, #0
   1d0e0:	2201      	movlt	r2, #1
   1d0e2:	9301      	strlt	r3, [sp, #4]
   1d0e4:	bfa8      	it	ge
   1d0e6:	6033      	strge	r3, [r6, #0]
   1d0e8:	9c01      	ldr	r4, [sp, #4]
   1d0ea:	4bb1      	ldr	r3, [pc, #708]	; (1d3b0 <_dtoa_r+0x328>)
   1d0ec:	bfb8      	it	lt
   1d0ee:	6032      	strlt	r2, [r6, #0]
   1d0f0:	43a3      	bics	r3, r4
   1d0f2:	d11a      	bne.n	1d12a <_dtoa_r+0xa2>
   1d0f4:	f242 730f 	movw	r3, #9999	; 0x270f
   1d0f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d0fa:	6013      	str	r3, [r2, #0]
   1d0fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1d100:	9a00      	ldr	r2, [sp, #0]
   1d102:	4313      	orrs	r3, r2
   1d104:	f000 8547 	beq.w	1db96 <_dtoa_r+0xb0e>
   1d108:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d10a:	b953      	cbnz	r3, 1d122 <_dtoa_r+0x9a>
   1d10c:	4ba9      	ldr	r3, [pc, #676]	; (1d3b4 <_dtoa_r+0x32c>)
   1d10e:	e023      	b.n	1d158 <_dtoa_r+0xd0>
   1d110:	4ba9      	ldr	r3, [pc, #676]	; (1d3b8 <_dtoa_r+0x330>)
   1d112:	9303      	str	r3, [sp, #12]
   1d114:	3308      	adds	r3, #8
   1d116:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1d118:	6013      	str	r3, [r2, #0]
   1d11a:	9803      	ldr	r0, [sp, #12]
   1d11c:	b019      	add	sp, #100	; 0x64
   1d11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d122:	4ba4      	ldr	r3, [pc, #656]	; (1d3b4 <_dtoa_r+0x32c>)
   1d124:	9303      	str	r3, [sp, #12]
   1d126:	3303      	adds	r3, #3
   1d128:	e7f5      	b.n	1d116 <_dtoa_r+0x8e>
   1d12a:	ed9d 7b00 	vldr	d7, [sp]
   1d12e:	2200      	movs	r2, #0
   1d130:	2300      	movs	r3, #0
   1d132:	ec51 0b17 	vmov	r0, r1, d7
   1d136:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   1d13a:	f7ff ff23 	bl	1cf84 <__aeabi_dcmpeq>
   1d13e:	4607      	mov	r7, r0
   1d140:	b160      	cbz	r0, 1d15c <_dtoa_r+0xd4>
   1d142:	2301      	movs	r3, #1
   1d144:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d146:	6013      	str	r3, [r2, #0]
   1d148:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d14a:	2b00      	cmp	r3, #0
   1d14c:	f000 8520 	beq.w	1db90 <_dtoa_r+0xb08>
   1d150:	4b9a      	ldr	r3, [pc, #616]	; (1d3bc <_dtoa_r+0x334>)
   1d152:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1d154:	6013      	str	r3, [r2, #0]
   1d156:	3b01      	subs	r3, #1
   1d158:	9303      	str	r3, [sp, #12]
   1d15a:	e7de      	b.n	1d11a <_dtoa_r+0x92>
   1d15c:	f3c4 560a 	ubfx	r6, r4, #20, #11
   1d160:	aa16      	add	r2, sp, #88	; 0x58
   1d162:	a917      	add	r1, sp, #92	; 0x5c
   1d164:	4658      	mov	r0, fp
   1d166:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   1d16a:	f013 fb65 	bl	30838 <__d2b>
   1d16e:	4680      	mov	r8, r0
   1d170:	2e00      	cmp	r6, #0
   1d172:	d07d      	beq.n	1d270 <_dtoa_r+0x1e8>
   1d174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d176:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   1d17a:	9715      	str	r7, [sp, #84]	; 0x54
   1d17c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d180:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   1d184:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   1d188:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1d18c:	2200      	movs	r2, #0
   1d18e:	4b8c      	ldr	r3, [pc, #560]	; (1d3c0 <_dtoa_r+0x338>)
   1d190:	4620      	mov	r0, r4
   1d192:	4629      	mov	r1, r5
   1d194:	f7ff f958 	bl	1c448 <__aeabi_dsub>
   1d198:	a37f      	add	r3, pc, #508	; (adr r3, 1d398 <_dtoa_r+0x310>)
   1d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d19e:	f7ff fc89 	bl	1cab4 <__aeabi_dmul>
   1d1a2:	a37f      	add	r3, pc, #508	; (adr r3, 1d3a0 <_dtoa_r+0x318>)
   1d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1a8:	f7ff f950 	bl	1c44c <__adddf3>
   1d1ac:	4604      	mov	r4, r0
   1d1ae:	460d      	mov	r5, r1
   1d1b0:	4630      	mov	r0, r6
   1d1b2:	f7ff fa97 	bl	1c6e4 <__aeabi_i2d>
   1d1b6:	a37c      	add	r3, pc, #496	; (adr r3, 1d3a8 <_dtoa_r+0x320>)
   1d1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1bc:	f7ff fc7a 	bl	1cab4 <__aeabi_dmul>
   1d1c0:	4602      	mov	r2, r0
   1d1c2:	460b      	mov	r3, r1
   1d1c4:	4620      	mov	r0, r4
   1d1c6:	4629      	mov	r1, r5
   1d1c8:	f7ff f940 	bl	1c44c <__adddf3>
   1d1cc:	4604      	mov	r4, r0
   1d1ce:	460d      	mov	r5, r1
   1d1d0:	f7ff ff20 	bl	1d014 <__aeabi_d2iz>
   1d1d4:	2200      	movs	r2, #0
   1d1d6:	4682      	mov	sl, r0
   1d1d8:	2300      	movs	r3, #0
   1d1da:	4620      	mov	r0, r4
   1d1dc:	4629      	mov	r1, r5
   1d1de:	f7ff fedb 	bl	1cf98 <__aeabi_dcmplt>
   1d1e2:	b148      	cbz	r0, 1d1f8 <_dtoa_r+0x170>
   1d1e4:	4650      	mov	r0, sl
   1d1e6:	f7ff fa7d 	bl	1c6e4 <__aeabi_i2d>
   1d1ea:	4622      	mov	r2, r4
   1d1ec:	462b      	mov	r3, r5
   1d1ee:	f7ff fec9 	bl	1cf84 <__aeabi_dcmpeq>
   1d1f2:	b908      	cbnz	r0, 1d1f8 <_dtoa_r+0x170>
   1d1f4:	f10a 3aff 	add.w	sl, sl, #4294967295
   1d1f8:	f1ba 0f16 	cmp.w	sl, #22
   1d1fc:	d857      	bhi.n	1d2ae <_dtoa_r+0x226>
   1d1fe:	4b71      	ldr	r3, [pc, #452]	; (1d3c4 <_dtoa_r+0x33c>)
   1d200:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1d204:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1d208:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d20c:	f7ff fec4 	bl	1cf98 <__aeabi_dcmplt>
   1d210:	2800      	cmp	r0, #0
   1d212:	d04e      	beq.n	1d2b2 <_dtoa_r+0x22a>
   1d214:	f10a 3aff 	add.w	sl, sl, #4294967295
   1d218:	2300      	movs	r3, #0
   1d21a:	9311      	str	r3, [sp, #68]	; 0x44
   1d21c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d21e:	1b9e      	subs	r6, r3, r6
   1d220:	1e73      	subs	r3, r6, #1
   1d222:	9307      	str	r3, [sp, #28]
   1d224:	bf49      	itett	mi
   1d226:	f1c6 0301 	rsbmi	r3, r6, #1
   1d22a:	2300      	movpl	r3, #0
   1d22c:	9306      	strmi	r3, [sp, #24]
   1d22e:	2300      	movmi	r3, #0
   1d230:	bf54      	ite	pl
   1d232:	9306      	strpl	r3, [sp, #24]
   1d234:	9307      	strmi	r3, [sp, #28]
   1d236:	f1ba 0f00 	cmp.w	sl, #0
   1d23a:	db3c      	blt.n	1d2b6 <_dtoa_r+0x22e>
   1d23c:	9b07      	ldr	r3, [sp, #28]
   1d23e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   1d242:	4453      	add	r3, sl
   1d244:	9307      	str	r3, [sp, #28]
   1d246:	2300      	movs	r3, #0
   1d248:	9309      	str	r3, [sp, #36]	; 0x24
   1d24a:	9b08      	ldr	r3, [sp, #32]
   1d24c:	2b09      	cmp	r3, #9
   1d24e:	f200 808d 	bhi.w	1d36c <_dtoa_r+0x2e4>
   1d252:	2b05      	cmp	r3, #5
   1d254:	bfc5      	ittet	gt
   1d256:	3b04      	subgt	r3, #4
   1d258:	2400      	movgt	r4, #0
   1d25a:	2401      	movle	r4, #1
   1d25c:	9308      	strgt	r3, [sp, #32]
   1d25e:	9b08      	ldr	r3, [sp, #32]
   1d260:	3b02      	subs	r3, #2
   1d262:	2b03      	cmp	r3, #3
   1d264:	f200 808d 	bhi.w	1d382 <_dtoa_r+0x2fa>
   1d268:	e8df f003 	tbb	[pc, r3]
   1d26c:	7e3a3c2f 	.word	0x7e3a3c2f
   1d270:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   1d274:	441e      	add	r6, r3
   1d276:	f206 4032 	addw	r0, r6, #1074	; 0x432
   1d27a:	2820      	cmp	r0, #32
   1d27c:	dd11      	ble.n	1d2a2 <_dtoa_r+0x21a>
   1d27e:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   1d282:	9b00      	ldr	r3, [sp, #0]
   1d284:	4084      	lsls	r4, r0
   1d286:	f206 4012 	addw	r0, r6, #1042	; 0x412
   1d28a:	fa23 f000 	lsr.w	r0, r3, r0
   1d28e:	4320      	orrs	r0, r4
   1d290:	f7ff fa18 	bl	1c6c4 <__aeabi_ui2d>
   1d294:	2301      	movs	r3, #1
   1d296:	4604      	mov	r4, r0
   1d298:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   1d29c:	3e01      	subs	r6, #1
   1d29e:	9315      	str	r3, [sp, #84]	; 0x54
   1d2a0:	e774      	b.n	1d18c <_dtoa_r+0x104>
   1d2a2:	f1c0 0020 	rsb	r0, r0, #32
   1d2a6:	9b00      	ldr	r3, [sp, #0]
   1d2a8:	fa03 f000 	lsl.w	r0, r3, r0
   1d2ac:	e7f0      	b.n	1d290 <_dtoa_r+0x208>
   1d2ae:	2301      	movs	r3, #1
   1d2b0:	e7b3      	b.n	1d21a <_dtoa_r+0x192>
   1d2b2:	9011      	str	r0, [sp, #68]	; 0x44
   1d2b4:	e7b2      	b.n	1d21c <_dtoa_r+0x194>
   1d2b6:	9b06      	ldr	r3, [sp, #24]
   1d2b8:	eba3 030a 	sub.w	r3, r3, sl
   1d2bc:	9306      	str	r3, [sp, #24]
   1d2be:	f1ca 0300 	rsb	r3, sl, #0
   1d2c2:	9309      	str	r3, [sp, #36]	; 0x24
   1d2c4:	2300      	movs	r3, #0
   1d2c6:	9310      	str	r3, [sp, #64]	; 0x40
   1d2c8:	e7bf      	b.n	1d24a <_dtoa_r+0x1c2>
   1d2ca:	2300      	movs	r3, #0
   1d2cc:	930c      	str	r3, [sp, #48]	; 0x30
   1d2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	dc59      	bgt.n	1d388 <_dtoa_r+0x300>
   1d2d4:	2301      	movs	r3, #1
   1d2d6:	4699      	mov	r9, r3
   1d2d8:	461a      	mov	r2, r3
   1d2da:	9304      	str	r3, [sp, #16]
   1d2dc:	920d      	str	r2, [sp, #52]	; 0x34
   1d2de:	e00c      	b.n	1d2fa <_dtoa_r+0x272>
   1d2e0:	2301      	movs	r3, #1
   1d2e2:	e7f3      	b.n	1d2cc <_dtoa_r+0x244>
   1d2e4:	2300      	movs	r3, #0
   1d2e6:	930c      	str	r3, [sp, #48]	; 0x30
   1d2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d2ea:	4453      	add	r3, sl
   1d2ec:	f103 0901 	add.w	r9, r3, #1
   1d2f0:	9304      	str	r3, [sp, #16]
   1d2f2:	464b      	mov	r3, r9
   1d2f4:	2b01      	cmp	r3, #1
   1d2f6:	bfb8      	it	lt
   1d2f8:	2301      	movlt	r3, #1
   1d2fa:	2200      	movs	r2, #0
   1d2fc:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   1d300:	606a      	str	r2, [r5, #4]
   1d302:	2204      	movs	r2, #4
   1d304:	f102 0014 	add.w	r0, r2, #20
   1d308:	6869      	ldr	r1, [r5, #4]
   1d30a:	4298      	cmp	r0, r3
   1d30c:	d940      	bls.n	1d390 <_dtoa_r+0x308>
   1d30e:	4658      	mov	r0, fp
   1d310:	f013 f855 	bl	303be <_Balloc>
   1d314:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1d318:	6028      	str	r0, [r5, #0]
   1d31a:	f1b9 0f0e 	cmp.w	r9, #14
   1d31e:	681b      	ldr	r3, [r3, #0]
   1d320:	9303      	str	r3, [sp, #12]
   1d322:	f200 80d4 	bhi.w	1d4ce <_dtoa_r+0x446>
   1d326:	2c00      	cmp	r4, #0
   1d328:	f000 80d1 	beq.w	1d4ce <_dtoa_r+0x446>
   1d32c:	f1ba 0f00 	cmp.w	sl, #0
   1d330:	dd66      	ble.n	1d400 <_dtoa_r+0x378>
   1d332:	4a24      	ldr	r2, [pc, #144]	; (1d3c4 <_dtoa_r+0x33c>)
   1d334:	f00a 030f 	and.w	r3, sl, #15
   1d338:	ea4f 142a 	mov.w	r4, sl, asr #4
   1d33c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d340:	06e2      	lsls	r2, r4, #27
   1d342:	ed93 7b00 	vldr	d7, [r3]
   1d346:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1d34a:	d557      	bpl.n	1d3fc <_dtoa_r+0x374>
   1d34c:	4b1e      	ldr	r3, [pc, #120]	; (1d3c8 <_dtoa_r+0x340>)
   1d34e:	f004 040f 	and.w	r4, r4, #15
   1d352:	2603      	movs	r6, #3
   1d354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1d358:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1d35c:	f7ff fcd4 	bl	1cd08 <__aeabi_ddiv>
   1d360:	e9cd 0100 	strd	r0, r1, [sp]
   1d364:	4d18      	ldr	r5, [pc, #96]	; (1d3c8 <_dtoa_r+0x340>)
   1d366:	e03e      	b.n	1d3e6 <_dtoa_r+0x35e>
   1d368:	2301      	movs	r3, #1
   1d36a:	e7bc      	b.n	1d2e6 <_dtoa_r+0x25e>
   1d36c:	2401      	movs	r4, #1
   1d36e:	2300      	movs	r3, #0
   1d370:	940c      	str	r4, [sp, #48]	; 0x30
   1d372:	9308      	str	r3, [sp, #32]
   1d374:	f04f 33ff 	mov.w	r3, #4294967295
   1d378:	2200      	movs	r2, #0
   1d37a:	9304      	str	r3, [sp, #16]
   1d37c:	4699      	mov	r9, r3
   1d37e:	2312      	movs	r3, #18
   1d380:	e7ac      	b.n	1d2dc <_dtoa_r+0x254>
   1d382:	2301      	movs	r3, #1
   1d384:	930c      	str	r3, [sp, #48]	; 0x30
   1d386:	e7f5      	b.n	1d374 <_dtoa_r+0x2ec>
   1d388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d38a:	9304      	str	r3, [sp, #16]
   1d38c:	4699      	mov	r9, r3
   1d38e:	e7b4      	b.n	1d2fa <_dtoa_r+0x272>
   1d390:	3101      	adds	r1, #1
   1d392:	0052      	lsls	r2, r2, #1
   1d394:	6069      	str	r1, [r5, #4]
   1d396:	e7b5      	b.n	1d304 <_dtoa_r+0x27c>
   1d398:	636f4361 	.word	0x636f4361
   1d39c:	3fd287a7 	.word	0x3fd287a7
   1d3a0:	8b60c8b3 	.word	0x8b60c8b3
   1d3a4:	3fc68a28 	.word	0x3fc68a28
   1d3a8:	509f79fb 	.word	0x509f79fb
   1d3ac:	3fd34413 	.word	0x3fd34413
   1d3b0:	7ff00000 	.word	0x7ff00000
   1d3b4:	000335ee 	.word	0x000335ee
   1d3b8:	000335e5 	.word	0x000335e5
   1d3bc:	0003302a 	.word	0x0003302a
   1d3c0:	3ff80000 	.word	0x3ff80000
   1d3c4:	00030f10 	.word	0x00030f10
   1d3c8:	00030ee8 	.word	0x00030ee8
   1d3cc:	07e3      	lsls	r3, r4, #31
   1d3ce:	d508      	bpl.n	1d3e2 <_dtoa_r+0x35a>
   1d3d0:	3601      	adds	r6, #1
   1d3d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d3d6:	e9d5 2300 	ldrd	r2, r3, [r5]
   1d3da:	f7ff fb6b 	bl	1cab4 <__aeabi_dmul>
   1d3de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1d3e2:	1064      	asrs	r4, r4, #1
   1d3e4:	3508      	adds	r5, #8
   1d3e6:	2c00      	cmp	r4, #0
   1d3e8:	d1f0      	bne.n	1d3cc <_dtoa_r+0x344>
   1d3ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d3ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d3f2:	f7ff fc89 	bl	1cd08 <__aeabi_ddiv>
   1d3f6:	e9cd 0100 	strd	r0, r1, [sp]
   1d3fa:	e01a      	b.n	1d432 <_dtoa_r+0x3aa>
   1d3fc:	2602      	movs	r6, #2
   1d3fe:	e7b1      	b.n	1d364 <_dtoa_r+0x2dc>
   1d400:	f000 809f 	beq.w	1d542 <_dtoa_r+0x4ba>
   1d404:	f1ca 0400 	rsb	r4, sl, #0
   1d408:	4b9e      	ldr	r3, [pc, #632]	; (1d684 <_dtoa_r+0x5fc>)
   1d40a:	4d9f      	ldr	r5, [pc, #636]	; (1d688 <_dtoa_r+0x600>)
   1d40c:	2602      	movs	r6, #2
   1d40e:	f004 020f 	and.w	r2, r4, #15
   1d412:	1124      	asrs	r4, r4, #4
   1d414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d418:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d420:	f7ff fb48 	bl	1cab4 <__aeabi_dmul>
   1d424:	2300      	movs	r3, #0
   1d426:	e9cd 0100 	strd	r0, r1, [sp]
   1d42a:	2c00      	cmp	r4, #0
   1d42c:	d17e      	bne.n	1d52c <_dtoa_r+0x4a4>
   1d42e:	2b00      	cmp	r3, #0
   1d430:	d1e1      	bne.n	1d3f6 <_dtoa_r+0x36e>
   1d432:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d434:	2b00      	cmp	r3, #0
   1d436:	f000 8086 	beq.w	1d546 <_dtoa_r+0x4be>
   1d43a:	2200      	movs	r2, #0
   1d43c:	4b93      	ldr	r3, [pc, #588]	; (1d68c <_dtoa_r+0x604>)
   1d43e:	e9dd 4500 	ldrd	r4, r5, [sp]
   1d442:	4620      	mov	r0, r4
   1d444:	4629      	mov	r1, r5
   1d446:	f7ff fda7 	bl	1cf98 <__aeabi_dcmplt>
   1d44a:	2800      	cmp	r0, #0
   1d44c:	d07b      	beq.n	1d546 <_dtoa_r+0x4be>
   1d44e:	f1b9 0f00 	cmp.w	r9, #0
   1d452:	d078      	beq.n	1d546 <_dtoa_r+0x4be>
   1d454:	9b04      	ldr	r3, [sp, #16]
   1d456:	2b00      	cmp	r3, #0
   1d458:	dd35      	ble.n	1d4c6 <_dtoa_r+0x43e>
   1d45a:	f10a 33ff 	add.w	r3, sl, #4294967295
   1d45e:	4620      	mov	r0, r4
   1d460:	2200      	movs	r2, #0
   1d462:	4629      	mov	r1, r5
   1d464:	930a      	str	r3, [sp, #40]	; 0x28
   1d466:	3601      	adds	r6, #1
   1d468:	4b89      	ldr	r3, [pc, #548]	; (1d690 <_dtoa_r+0x608>)
   1d46a:	f7ff fb23 	bl	1cab4 <__aeabi_dmul>
   1d46e:	9c04      	ldr	r4, [sp, #16]
   1d470:	e9cd 0100 	strd	r0, r1, [sp]
   1d474:	4630      	mov	r0, r6
   1d476:	f7ff f935 	bl	1c6e4 <__aeabi_i2d>
   1d47a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d47e:	f7ff fb19 	bl	1cab4 <__aeabi_dmul>
   1d482:	2200      	movs	r2, #0
   1d484:	4b83      	ldr	r3, [pc, #524]	; (1d694 <_dtoa_r+0x60c>)
   1d486:	f7fe ffe1 	bl	1c44c <__adddf3>
   1d48a:	4606      	mov	r6, r0
   1d48c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1d490:	2c00      	cmp	r4, #0
   1d492:	d15c      	bne.n	1d54e <_dtoa_r+0x4c6>
   1d494:	2200      	movs	r2, #0
   1d496:	4b80      	ldr	r3, [pc, #512]	; (1d698 <_dtoa_r+0x610>)
   1d498:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d49c:	f7fe ffd4 	bl	1c448 <__aeabi_dsub>
   1d4a0:	4632      	mov	r2, r6
   1d4a2:	463b      	mov	r3, r7
   1d4a4:	e9cd 0100 	strd	r0, r1, [sp]
   1d4a8:	f7ff fd94 	bl	1cfd4 <__aeabi_dcmpgt>
   1d4ac:	2800      	cmp	r0, #0
   1d4ae:	f040 8289 	bne.w	1d9c4 <_dtoa_r+0x93c>
   1d4b2:	4632      	mov	r2, r6
   1d4b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1d4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d4bc:	f7ff fd6c 	bl	1cf98 <__aeabi_dcmplt>
   1d4c0:	2800      	cmp	r0, #0
   1d4c2:	f040 827d 	bne.w	1d9c0 <_dtoa_r+0x938>
   1d4c6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1d4ca:	e9cd 3400 	strd	r3, r4, [sp]
   1d4ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d4d0:	2b00      	cmp	r3, #0
   1d4d2:	f2c0 814c 	blt.w	1d76e <_dtoa_r+0x6e6>
   1d4d6:	f1ba 0f0e 	cmp.w	sl, #14
   1d4da:	f300 8148 	bgt.w	1d76e <_dtoa_r+0x6e6>
   1d4de:	4b69      	ldr	r3, [pc, #420]	; (1d684 <_dtoa_r+0x5fc>)
   1d4e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1d4e4:	ed93 7b00 	vldr	d7, [r3]
   1d4e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d4ea:	2b00      	cmp	r3, #0
   1d4ec:	ed8d 7b04 	vstr	d7, [sp, #16]
   1d4f0:	f280 80d6 	bge.w	1d6a0 <_dtoa_r+0x618>
   1d4f4:	f1b9 0f00 	cmp.w	r9, #0
   1d4f8:	f300 80d2 	bgt.w	1d6a0 <_dtoa_r+0x618>
   1d4fc:	f040 825f 	bne.w	1d9be <_dtoa_r+0x936>
   1d500:	2200      	movs	r2, #0
   1d502:	4b65      	ldr	r3, [pc, #404]	; (1d698 <_dtoa_r+0x610>)
   1d504:	464c      	mov	r4, r9
   1d506:	464e      	mov	r6, r9
   1d508:	ec51 0b17 	vmov	r0, r1, d7
   1d50c:	f7ff fad2 	bl	1cab4 <__aeabi_dmul>
   1d510:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d514:	f7ff fd54 	bl	1cfc0 <__aeabi_dcmpge>
   1d518:	2800      	cmp	r0, #0
   1d51a:	f040 8238 	bne.w	1d98e <_dtoa_r+0x906>
   1d51e:	9d03      	ldr	r5, [sp, #12]
   1d520:	2331      	movs	r3, #49	; 0x31
   1d522:	f10a 0a01 	add.w	sl, sl, #1
   1d526:	f805 3b01 	strb.w	r3, [r5], #1
   1d52a:	e234      	b.n	1d996 <_dtoa_r+0x90e>
   1d52c:	07e7      	lsls	r7, r4, #31
   1d52e:	d505      	bpl.n	1d53c <_dtoa_r+0x4b4>
   1d530:	3601      	adds	r6, #1
   1d532:	e9d5 2300 	ldrd	r2, r3, [r5]
   1d536:	f7ff fabd 	bl	1cab4 <__aeabi_dmul>
   1d53a:	2301      	movs	r3, #1
   1d53c:	1064      	asrs	r4, r4, #1
   1d53e:	3508      	adds	r5, #8
   1d540:	e773      	b.n	1d42a <_dtoa_r+0x3a2>
   1d542:	2602      	movs	r6, #2
   1d544:	e775      	b.n	1d432 <_dtoa_r+0x3aa>
   1d546:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1d54a:	464c      	mov	r4, r9
   1d54c:	e792      	b.n	1d474 <_dtoa_r+0x3ec>
   1d54e:	4b4d      	ldr	r3, [pc, #308]	; (1d684 <_dtoa_r+0x5fc>)
   1d550:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d554:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   1d558:	9b03      	ldr	r3, [sp, #12]
   1d55a:	441c      	add	r4, r3
   1d55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d55e:	2b00      	cmp	r3, #0
   1d560:	d046      	beq.n	1d5f0 <_dtoa_r+0x568>
   1d562:	4602      	mov	r2, r0
   1d564:	460b      	mov	r3, r1
   1d566:	2000      	movs	r0, #0
   1d568:	494c      	ldr	r1, [pc, #304]	; (1d69c <_dtoa_r+0x614>)
   1d56a:	f7ff fbcd 	bl	1cd08 <__aeabi_ddiv>
   1d56e:	4632      	mov	r2, r6
   1d570:	463b      	mov	r3, r7
   1d572:	f7fe ff69 	bl	1c448 <__aeabi_dsub>
   1d576:	9d03      	ldr	r5, [sp, #12]
   1d578:	4606      	mov	r6, r0
   1d57a:	460f      	mov	r7, r1
   1d57c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d580:	f7ff fd48 	bl	1d014 <__aeabi_d2iz>
   1d584:	9012      	str	r0, [sp, #72]	; 0x48
   1d586:	f7ff f8ad 	bl	1c6e4 <__aeabi_i2d>
   1d58a:	4602      	mov	r2, r0
   1d58c:	460b      	mov	r3, r1
   1d58e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d592:	f7fe ff59 	bl	1c448 <__aeabi_dsub>
   1d596:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d598:	4632      	mov	r2, r6
   1d59a:	3330      	adds	r3, #48	; 0x30
   1d59c:	f805 3b01 	strb.w	r3, [r5], #1
   1d5a0:	463b      	mov	r3, r7
   1d5a2:	e9cd 0100 	strd	r0, r1, [sp]
   1d5a6:	f7ff fcf7 	bl	1cf98 <__aeabi_dcmplt>
   1d5aa:	2800      	cmp	r0, #0
   1d5ac:	d15f      	bne.n	1d66e <_dtoa_r+0x5e6>
   1d5ae:	2000      	movs	r0, #0
   1d5b0:	4936      	ldr	r1, [pc, #216]	; (1d68c <_dtoa_r+0x604>)
   1d5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d5b6:	f7fe ff47 	bl	1c448 <__aeabi_dsub>
   1d5ba:	4632      	mov	r2, r6
   1d5bc:	463b      	mov	r3, r7
   1d5be:	f7ff fceb 	bl	1cf98 <__aeabi_dcmplt>
   1d5c2:	2800      	cmp	r0, #0
   1d5c4:	f040 80b2 	bne.w	1d72c <_dtoa_r+0x6a4>
   1d5c8:	42a5      	cmp	r5, r4
   1d5ca:	f43f af7c 	beq.w	1d4c6 <_dtoa_r+0x43e>
   1d5ce:	2200      	movs	r2, #0
   1d5d0:	4b2f      	ldr	r3, [pc, #188]	; (1d690 <_dtoa_r+0x608>)
   1d5d2:	4630      	mov	r0, r6
   1d5d4:	4639      	mov	r1, r7
   1d5d6:	f7ff fa6d 	bl	1cab4 <__aeabi_dmul>
   1d5da:	2200      	movs	r2, #0
   1d5dc:	4606      	mov	r6, r0
   1d5de:	460f      	mov	r7, r1
   1d5e0:	4b2b      	ldr	r3, [pc, #172]	; (1d690 <_dtoa_r+0x608>)
   1d5e2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d5e6:	f7ff fa65 	bl	1cab4 <__aeabi_dmul>
   1d5ea:	e9cd 0100 	strd	r0, r1, [sp]
   1d5ee:	e7c5      	b.n	1d57c <_dtoa_r+0x4f4>
   1d5f0:	4632      	mov	r2, r6
   1d5f2:	463b      	mov	r3, r7
   1d5f4:	f7ff fa5e 	bl	1cab4 <__aeabi_dmul>
   1d5f8:	4625      	mov	r5, r4
   1d5fa:	9e03      	ldr	r6, [sp, #12]
   1d5fc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1d600:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d604:	f7ff fd06 	bl	1d014 <__aeabi_d2iz>
   1d608:	4607      	mov	r7, r0
   1d60a:	f7ff f86b 	bl	1c6e4 <__aeabi_i2d>
   1d60e:	4602      	mov	r2, r0
   1d610:	3730      	adds	r7, #48	; 0x30
   1d612:	460b      	mov	r3, r1
   1d614:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d618:	f7fe ff16 	bl	1c448 <__aeabi_dsub>
   1d61c:	f806 7b01 	strb.w	r7, [r6], #1
   1d620:	42a6      	cmp	r6, r4
   1d622:	f04f 0200 	mov.w	r2, #0
   1d626:	e9cd 0100 	strd	r0, r1, [sp]
   1d62a:	d125      	bne.n	1d678 <_dtoa_r+0x5f0>
   1d62c:	4b1b      	ldr	r3, [pc, #108]	; (1d69c <_dtoa_r+0x614>)
   1d62e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1d632:	f7fe ff0b 	bl	1c44c <__adddf3>
   1d636:	4602      	mov	r2, r0
   1d638:	460b      	mov	r3, r1
   1d63a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d63e:	f7ff fcc9 	bl	1cfd4 <__aeabi_dcmpgt>
   1d642:	2800      	cmp	r0, #0
   1d644:	d172      	bne.n	1d72c <_dtoa_r+0x6a4>
   1d646:	2000      	movs	r0, #0
   1d648:	4914      	ldr	r1, [pc, #80]	; (1d69c <_dtoa_r+0x614>)
   1d64a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1d64e:	f7fe fefb 	bl	1c448 <__aeabi_dsub>
   1d652:	4602      	mov	r2, r0
   1d654:	460b      	mov	r3, r1
   1d656:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d65a:	f7ff fc9d 	bl	1cf98 <__aeabi_dcmplt>
   1d65e:	2800      	cmp	r0, #0
   1d660:	f43f af31 	beq.w	1d4c6 <_dtoa_r+0x43e>
   1d664:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1d668:	1e6a      	subs	r2, r5, #1
   1d66a:	2b30      	cmp	r3, #48	; 0x30
   1d66c:	d002      	beq.n	1d674 <_dtoa_r+0x5ec>
   1d66e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1d672:	e049      	b.n	1d708 <_dtoa_r+0x680>
   1d674:	4615      	mov	r5, r2
   1d676:	e7f5      	b.n	1d664 <_dtoa_r+0x5dc>
   1d678:	4b05      	ldr	r3, [pc, #20]	; (1d690 <_dtoa_r+0x608>)
   1d67a:	f7ff fa1b 	bl	1cab4 <__aeabi_dmul>
   1d67e:	e9cd 0100 	strd	r0, r1, [sp]
   1d682:	e7bd      	b.n	1d600 <_dtoa_r+0x578>
   1d684:	00030f10 	.word	0x00030f10
   1d688:	00030ee8 	.word	0x00030ee8
   1d68c:	3ff00000 	.word	0x3ff00000
   1d690:	40240000 	.word	0x40240000
   1d694:	401c0000 	.word	0x401c0000
   1d698:	40140000 	.word	0x40140000
   1d69c:	3fe00000 	.word	0x3fe00000
   1d6a0:	e9dd 6700 	ldrd	r6, r7, [sp]
   1d6a4:	9d03      	ldr	r5, [sp, #12]
   1d6a6:	4630      	mov	r0, r6
   1d6a8:	4639      	mov	r1, r7
   1d6aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d6ae:	f7ff fb2b 	bl	1cd08 <__aeabi_ddiv>
   1d6b2:	f7ff fcaf 	bl	1d014 <__aeabi_d2iz>
   1d6b6:	4604      	mov	r4, r0
   1d6b8:	f7ff f814 	bl	1c6e4 <__aeabi_i2d>
   1d6bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d6c0:	f7ff f9f8 	bl	1cab4 <__aeabi_dmul>
   1d6c4:	4602      	mov	r2, r0
   1d6c6:	4630      	mov	r0, r6
   1d6c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1d6cc:	460b      	mov	r3, r1
   1d6ce:	4639      	mov	r1, r7
   1d6d0:	f7fe feba 	bl	1c448 <__aeabi_dsub>
   1d6d4:	f805 6b01 	strb.w	r6, [r5], #1
   1d6d8:	9e03      	ldr	r6, [sp, #12]
   1d6da:	4602      	mov	r2, r0
   1d6dc:	460b      	mov	r3, r1
   1d6de:	1bae      	subs	r6, r5, r6
   1d6e0:	45b1      	cmp	r9, r6
   1d6e2:	d137      	bne.n	1d754 <_dtoa_r+0x6cc>
   1d6e4:	f7fe feb2 	bl	1c44c <__adddf3>
   1d6e8:	4606      	mov	r6, r0
   1d6ea:	460f      	mov	r7, r1
   1d6ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d6f0:	f7ff fc70 	bl	1cfd4 <__aeabi_dcmpgt>
   1d6f4:	b9c0      	cbnz	r0, 1d728 <_dtoa_r+0x6a0>
   1d6f6:	4630      	mov	r0, r6
   1d6f8:	4639      	mov	r1, r7
   1d6fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d6fe:	f7ff fc41 	bl	1cf84 <__aeabi_dcmpeq>
   1d702:	b108      	cbz	r0, 1d708 <_dtoa_r+0x680>
   1d704:	07e1      	lsls	r1, r4, #31
   1d706:	d40f      	bmi.n	1d728 <_dtoa_r+0x6a0>
   1d708:	4641      	mov	r1, r8
   1d70a:	4658      	mov	r0, fp
   1d70c:	f012 fe8b 	bl	30426 <_Bfree>
   1d710:	2300      	movs	r3, #0
   1d712:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d714:	702b      	strb	r3, [r5, #0]
   1d716:	f10a 0301 	add.w	r3, sl, #1
   1d71a:	6013      	str	r3, [r2, #0]
   1d71c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d71e:	2b00      	cmp	r3, #0
   1d720:	f43f acfb 	beq.w	1d11a <_dtoa_r+0x92>
   1d724:	601d      	str	r5, [r3, #0]
   1d726:	e4f8      	b.n	1d11a <_dtoa_r+0x92>
   1d728:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1d72c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1d730:	1e6b      	subs	r3, r5, #1
   1d732:	2a39      	cmp	r2, #57	; 0x39
   1d734:	d108      	bne.n	1d748 <_dtoa_r+0x6c0>
   1d736:	9a03      	ldr	r2, [sp, #12]
   1d738:	429a      	cmp	r2, r3
   1d73a:	d109      	bne.n	1d750 <_dtoa_r+0x6c8>
   1d73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d73e:	9903      	ldr	r1, [sp, #12]
   1d740:	3201      	adds	r2, #1
   1d742:	920a      	str	r2, [sp, #40]	; 0x28
   1d744:	2230      	movs	r2, #48	; 0x30
   1d746:	700a      	strb	r2, [r1, #0]
   1d748:	781a      	ldrb	r2, [r3, #0]
   1d74a:	3201      	adds	r2, #1
   1d74c:	701a      	strb	r2, [r3, #0]
   1d74e:	e78e      	b.n	1d66e <_dtoa_r+0x5e6>
   1d750:	461d      	mov	r5, r3
   1d752:	e7eb      	b.n	1d72c <_dtoa_r+0x6a4>
   1d754:	2200      	movs	r2, #0
   1d756:	4b9d      	ldr	r3, [pc, #628]	; (1d9cc <_dtoa_r+0x944>)
   1d758:	f7ff f9ac 	bl	1cab4 <__aeabi_dmul>
   1d75c:	2200      	movs	r2, #0
   1d75e:	2300      	movs	r3, #0
   1d760:	4606      	mov	r6, r0
   1d762:	460f      	mov	r7, r1
   1d764:	f7ff fc0e 	bl	1cf84 <__aeabi_dcmpeq>
   1d768:	2800      	cmp	r0, #0
   1d76a:	d09c      	beq.n	1d6a6 <_dtoa_r+0x61e>
   1d76c:	e7cc      	b.n	1d708 <_dtoa_r+0x680>
   1d76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d770:	2a00      	cmp	r2, #0
   1d772:	f000 80cb 	beq.w	1d90c <_dtoa_r+0x884>
   1d776:	9a08      	ldr	r2, [sp, #32]
   1d778:	2a01      	cmp	r2, #1
   1d77a:	f300 80ae 	bgt.w	1d8da <_dtoa_r+0x852>
   1d77e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1d780:	2a00      	cmp	r2, #0
   1d782:	f000 80a6 	beq.w	1d8d2 <_dtoa_r+0x84a>
   1d786:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1d78a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1d78c:	9d06      	ldr	r5, [sp, #24]
   1d78e:	9a06      	ldr	r2, [sp, #24]
   1d790:	2101      	movs	r1, #1
   1d792:	4658      	mov	r0, fp
   1d794:	441a      	add	r2, r3
   1d796:	9206      	str	r2, [sp, #24]
   1d798:	9a07      	ldr	r2, [sp, #28]
   1d79a:	441a      	add	r2, r3
   1d79c:	9207      	str	r2, [sp, #28]
   1d79e:	f012 fee6 	bl	3056e <__i2b>
   1d7a2:	4606      	mov	r6, r0
   1d7a4:	2d00      	cmp	r5, #0
   1d7a6:	dd0c      	ble.n	1d7c2 <_dtoa_r+0x73a>
   1d7a8:	9b07      	ldr	r3, [sp, #28]
   1d7aa:	2b00      	cmp	r3, #0
   1d7ac:	dd09      	ble.n	1d7c2 <_dtoa_r+0x73a>
   1d7ae:	42ab      	cmp	r3, r5
   1d7b0:	9a06      	ldr	r2, [sp, #24]
   1d7b2:	bfa8      	it	ge
   1d7b4:	462b      	movge	r3, r5
   1d7b6:	1ad2      	subs	r2, r2, r3
   1d7b8:	1aed      	subs	r5, r5, r3
   1d7ba:	9206      	str	r2, [sp, #24]
   1d7bc:	9a07      	ldr	r2, [sp, #28]
   1d7be:	1ad3      	subs	r3, r2, r3
   1d7c0:	9307      	str	r3, [sp, #28]
   1d7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d7c4:	b1f3      	cbz	r3, 1d804 <_dtoa_r+0x77c>
   1d7c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d7c8:	2b00      	cmp	r3, #0
   1d7ca:	f000 80a3 	beq.w	1d914 <_dtoa_r+0x88c>
   1d7ce:	2c00      	cmp	r4, #0
   1d7d0:	dd10      	ble.n	1d7f4 <_dtoa_r+0x76c>
   1d7d2:	4631      	mov	r1, r6
   1d7d4:	4622      	mov	r2, r4
   1d7d6:	4658      	mov	r0, fp
   1d7d8:	f010 fdd2 	bl	2e380 <__pow5mult>
   1d7dc:	4642      	mov	r2, r8
   1d7de:	4601      	mov	r1, r0
   1d7e0:	4606      	mov	r6, r0
   1d7e2:	4658      	mov	r0, fp
   1d7e4:	f012 fecc 	bl	30580 <__multiply>
   1d7e8:	4607      	mov	r7, r0
   1d7ea:	4641      	mov	r1, r8
   1d7ec:	4658      	mov	r0, fp
   1d7ee:	46b8      	mov	r8, r7
   1d7f0:	f012 fe19 	bl	30426 <_Bfree>
   1d7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d7f6:	1b1a      	subs	r2, r3, r4
   1d7f8:	d004      	beq.n	1d804 <_dtoa_r+0x77c>
   1d7fa:	4641      	mov	r1, r8
   1d7fc:	4658      	mov	r0, fp
   1d7fe:	f010 fdbf 	bl	2e380 <__pow5mult>
   1d802:	4680      	mov	r8, r0
   1d804:	2101      	movs	r1, #1
   1d806:	4658      	mov	r0, fp
   1d808:	f012 feb1 	bl	3056e <__i2b>
   1d80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d80e:	4604      	mov	r4, r0
   1d810:	2b00      	cmp	r3, #0
   1d812:	f340 8081 	ble.w	1d918 <_dtoa_r+0x890>
   1d816:	461a      	mov	r2, r3
   1d818:	4601      	mov	r1, r0
   1d81a:	4658      	mov	r0, fp
   1d81c:	f010 fdb0 	bl	2e380 <__pow5mult>
   1d820:	9b08      	ldr	r3, [sp, #32]
   1d822:	4604      	mov	r4, r0
   1d824:	2b01      	cmp	r3, #1
   1d826:	dd7a      	ble.n	1d91e <_dtoa_r+0x896>
   1d828:	2700      	movs	r7, #0
   1d82a:	6923      	ldr	r3, [r4, #16]
   1d82c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1d830:	6918      	ldr	r0, [r3, #16]
   1d832:	f012 fe4c 	bl	304ce <__hi0bits>
   1d836:	f1c0 0020 	rsb	r0, r0, #32
   1d83a:	9b07      	ldr	r3, [sp, #28]
   1d83c:	4418      	add	r0, r3
   1d83e:	f010 001f 	ands.w	r0, r0, #31
   1d842:	f000 808b 	beq.w	1d95c <_dtoa_r+0x8d4>
   1d846:	f1c0 0320 	rsb	r3, r0, #32
   1d84a:	2b04      	cmp	r3, #4
   1d84c:	f340 8084 	ble.w	1d958 <_dtoa_r+0x8d0>
   1d850:	f1c0 001c 	rsb	r0, r0, #28
   1d854:	9b06      	ldr	r3, [sp, #24]
   1d856:	4405      	add	r5, r0
   1d858:	4403      	add	r3, r0
   1d85a:	9306      	str	r3, [sp, #24]
   1d85c:	9b07      	ldr	r3, [sp, #28]
   1d85e:	4403      	add	r3, r0
   1d860:	9307      	str	r3, [sp, #28]
   1d862:	9b06      	ldr	r3, [sp, #24]
   1d864:	2b00      	cmp	r3, #0
   1d866:	dd05      	ble.n	1d874 <_dtoa_r+0x7ec>
   1d868:	4641      	mov	r1, r8
   1d86a:	461a      	mov	r2, r3
   1d86c:	4658      	mov	r0, fp
   1d86e:	f012 ff16 	bl	3069e <__lshift>
   1d872:	4680      	mov	r8, r0
   1d874:	9b07      	ldr	r3, [sp, #28]
   1d876:	2b00      	cmp	r3, #0
   1d878:	dd05      	ble.n	1d886 <_dtoa_r+0x7fe>
   1d87a:	4621      	mov	r1, r4
   1d87c:	461a      	mov	r2, r3
   1d87e:	4658      	mov	r0, fp
   1d880:	f012 ff0d 	bl	3069e <__lshift>
   1d884:	4604      	mov	r4, r0
   1d886:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d888:	2b00      	cmp	r3, #0
   1d88a:	d069      	beq.n	1d960 <_dtoa_r+0x8d8>
   1d88c:	4621      	mov	r1, r4
   1d88e:	4640      	mov	r0, r8
   1d890:	f012 ff58 	bl	30744 <__mcmp>
   1d894:	2800      	cmp	r0, #0
   1d896:	da63      	bge.n	1d960 <_dtoa_r+0x8d8>
   1d898:	2300      	movs	r3, #0
   1d89a:	4641      	mov	r1, r8
   1d89c:	220a      	movs	r2, #10
   1d89e:	4658      	mov	r0, fp
   1d8a0:	f012 fdd8 	bl	30454 <__multadd>
   1d8a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d8a6:	f10a 3aff 	add.w	sl, sl, #4294967295
   1d8aa:	4680      	mov	r8, r0
   1d8ac:	2b00      	cmp	r3, #0
   1d8ae:	f000 8179 	beq.w	1dba4 <_dtoa_r+0xb1c>
   1d8b2:	2300      	movs	r3, #0
   1d8b4:	4631      	mov	r1, r6
   1d8b6:	220a      	movs	r2, #10
   1d8b8:	4658      	mov	r0, fp
   1d8ba:	f012 fdcb 	bl	30454 <__multadd>
   1d8be:	9b04      	ldr	r3, [sp, #16]
   1d8c0:	4606      	mov	r6, r0
   1d8c2:	2b00      	cmp	r3, #0
   1d8c4:	f300 808a 	bgt.w	1d9dc <_dtoa_r+0x954>
   1d8c8:	9b08      	ldr	r3, [sp, #32]
   1d8ca:	2b02      	cmp	r3, #2
   1d8cc:	f340 8086 	ble.w	1d9dc <_dtoa_r+0x954>
   1d8d0:	e04e      	b.n	1d970 <_dtoa_r+0x8e8>
   1d8d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d8d4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1d8d8:	e757      	b.n	1d78a <_dtoa_r+0x702>
   1d8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d8dc:	f109 34ff 	add.w	r4, r9, #4294967295
   1d8e0:	42a3      	cmp	r3, r4
   1d8e2:	bfb7      	itett	lt
   1d8e4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1d8e6:	1b1c      	subge	r4, r3, r4
   1d8e8:	9409      	strlt	r4, [sp, #36]	; 0x24
   1d8ea:	1ae2      	sublt	r2, r4, r3
   1d8ec:	bfbf      	itttt	lt
   1d8ee:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   1d8f0:	2400      	movlt	r4, #0
   1d8f2:	189b      	addlt	r3, r3, r2
   1d8f4:	9310      	strlt	r3, [sp, #64]	; 0x40
   1d8f6:	f1b9 0f00 	cmp.w	r9, #0
   1d8fa:	bfb3      	iteet	lt
   1d8fc:	9b06      	ldrlt	r3, [sp, #24]
   1d8fe:	464b      	movge	r3, r9
   1d900:	9d06      	ldrge	r5, [sp, #24]
   1d902:	eba3 0509 	sublt.w	r5, r3, r9
   1d906:	bfb8      	it	lt
   1d908:	2300      	movlt	r3, #0
   1d90a:	e740      	b.n	1d78e <_dtoa_r+0x706>
   1d90c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1d90e:	9d06      	ldr	r5, [sp, #24]
   1d910:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1d912:	e747      	b.n	1d7a4 <_dtoa_r+0x71c>
   1d914:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d916:	e770      	b.n	1d7fa <_dtoa_r+0x772>
   1d918:	9b08      	ldr	r3, [sp, #32]
   1d91a:	2b01      	cmp	r3, #1
   1d91c:	dc18      	bgt.n	1d950 <_dtoa_r+0x8c8>
   1d91e:	9b00      	ldr	r3, [sp, #0]
   1d920:	b9b3      	cbnz	r3, 1d950 <_dtoa_r+0x8c8>
   1d922:	9b01      	ldr	r3, [sp, #4]
   1d924:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d928:	b9a3      	cbnz	r3, 1d954 <_dtoa_r+0x8cc>
   1d92a:	9b01      	ldr	r3, [sp, #4]
   1d92c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1d930:	0d3f      	lsrs	r7, r7, #20
   1d932:	053f      	lsls	r7, r7, #20
   1d934:	b137      	cbz	r7, 1d944 <_dtoa_r+0x8bc>
   1d936:	9b06      	ldr	r3, [sp, #24]
   1d938:	2701      	movs	r7, #1
   1d93a:	3301      	adds	r3, #1
   1d93c:	9306      	str	r3, [sp, #24]
   1d93e:	9b07      	ldr	r3, [sp, #28]
   1d940:	3301      	adds	r3, #1
   1d942:	9307      	str	r3, [sp, #28]
   1d944:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d946:	2b00      	cmp	r3, #0
   1d948:	f47f af6f 	bne.w	1d82a <_dtoa_r+0x7a2>
   1d94c:	2001      	movs	r0, #1
   1d94e:	e774      	b.n	1d83a <_dtoa_r+0x7b2>
   1d950:	2700      	movs	r7, #0
   1d952:	e7f7      	b.n	1d944 <_dtoa_r+0x8bc>
   1d954:	9f00      	ldr	r7, [sp, #0]
   1d956:	e7f5      	b.n	1d944 <_dtoa_r+0x8bc>
   1d958:	d083      	beq.n	1d862 <_dtoa_r+0x7da>
   1d95a:	4618      	mov	r0, r3
   1d95c:	301c      	adds	r0, #28
   1d95e:	e779      	b.n	1d854 <_dtoa_r+0x7cc>
   1d960:	f1b9 0f00 	cmp.w	r9, #0
   1d964:	dc34      	bgt.n	1d9d0 <_dtoa_r+0x948>
   1d966:	9b08      	ldr	r3, [sp, #32]
   1d968:	2b02      	cmp	r3, #2
   1d96a:	dd31      	ble.n	1d9d0 <_dtoa_r+0x948>
   1d96c:	f8cd 9010 	str.w	r9, [sp, #16]
   1d970:	9b04      	ldr	r3, [sp, #16]
   1d972:	b963      	cbnz	r3, 1d98e <_dtoa_r+0x906>
   1d974:	4621      	mov	r1, r4
   1d976:	2205      	movs	r2, #5
   1d978:	4658      	mov	r0, fp
   1d97a:	f012 fd6b 	bl	30454 <__multadd>
   1d97e:	4601      	mov	r1, r0
   1d980:	4604      	mov	r4, r0
   1d982:	4640      	mov	r0, r8
   1d984:	f012 fede 	bl	30744 <__mcmp>
   1d988:	2800      	cmp	r0, #0
   1d98a:	f73f adc8 	bgt.w	1d51e <_dtoa_r+0x496>
   1d98e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d990:	9d03      	ldr	r5, [sp, #12]
   1d992:	ea6f 0a03 	mvn.w	sl, r3
   1d996:	2700      	movs	r7, #0
   1d998:	4621      	mov	r1, r4
   1d99a:	4658      	mov	r0, fp
   1d99c:	f012 fd43 	bl	30426 <_Bfree>
   1d9a0:	2e00      	cmp	r6, #0
   1d9a2:	f43f aeb1 	beq.w	1d708 <_dtoa_r+0x680>
   1d9a6:	b12f      	cbz	r7, 1d9b4 <_dtoa_r+0x92c>
   1d9a8:	42b7      	cmp	r7, r6
   1d9aa:	d003      	beq.n	1d9b4 <_dtoa_r+0x92c>
   1d9ac:	4639      	mov	r1, r7
   1d9ae:	4658      	mov	r0, fp
   1d9b0:	f012 fd39 	bl	30426 <_Bfree>
   1d9b4:	4631      	mov	r1, r6
   1d9b6:	4658      	mov	r0, fp
   1d9b8:	f012 fd35 	bl	30426 <_Bfree>
   1d9bc:	e6a4      	b.n	1d708 <_dtoa_r+0x680>
   1d9be:	2400      	movs	r4, #0
   1d9c0:	4626      	mov	r6, r4
   1d9c2:	e7e4      	b.n	1d98e <_dtoa_r+0x906>
   1d9c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1d9c8:	4626      	mov	r6, r4
   1d9ca:	e5a8      	b.n	1d51e <_dtoa_r+0x496>
   1d9cc:	40240000 	.word	0x40240000
   1d9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d9d2:	f8cd 9010 	str.w	r9, [sp, #16]
   1d9d6:	2b00      	cmp	r3, #0
   1d9d8:	f000 80eb 	beq.w	1dbb2 <_dtoa_r+0xb2a>
   1d9dc:	2d00      	cmp	r5, #0
   1d9de:	dd05      	ble.n	1d9ec <_dtoa_r+0x964>
   1d9e0:	4631      	mov	r1, r6
   1d9e2:	462a      	mov	r2, r5
   1d9e4:	4658      	mov	r0, fp
   1d9e6:	f012 fe5a 	bl	3069e <__lshift>
   1d9ea:	4606      	mov	r6, r0
   1d9ec:	2f00      	cmp	r7, #0
   1d9ee:	d056      	beq.n	1da9e <_dtoa_r+0xa16>
   1d9f0:	6871      	ldr	r1, [r6, #4]
   1d9f2:	4658      	mov	r0, fp
   1d9f4:	f012 fce3 	bl	303be <_Balloc>
   1d9f8:	6932      	ldr	r2, [r6, #16]
   1d9fa:	4605      	mov	r5, r0
   1d9fc:	f106 010c 	add.w	r1, r6, #12
   1da00:	3202      	adds	r2, #2
   1da02:	300c      	adds	r0, #12
   1da04:	0092      	lsls	r2, r2, #2
   1da06:	f012 fa06 	bl	2fe16 <memcpy>
   1da0a:	2201      	movs	r2, #1
   1da0c:	4629      	mov	r1, r5
   1da0e:	4658      	mov	r0, fp
   1da10:	f012 fe45 	bl	3069e <__lshift>
   1da14:	9b03      	ldr	r3, [sp, #12]
   1da16:	4637      	mov	r7, r6
   1da18:	4606      	mov	r6, r0
   1da1a:	f103 0901 	add.w	r9, r3, #1
   1da1e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   1da22:	4413      	add	r3, r2
   1da24:	9309      	str	r3, [sp, #36]	; 0x24
   1da26:	9b00      	ldr	r3, [sp, #0]
   1da28:	f003 0301 	and.w	r3, r3, #1
   1da2c:	9307      	str	r3, [sp, #28]
   1da2e:	f109 33ff 	add.w	r3, r9, #4294967295
   1da32:	4621      	mov	r1, r4
   1da34:	4640      	mov	r0, r8
   1da36:	9300      	str	r3, [sp, #0]
   1da38:	f012 fbbe 	bl	301b8 <quorem>
   1da3c:	4603      	mov	r3, r0
   1da3e:	9004      	str	r0, [sp, #16]
   1da40:	4639      	mov	r1, r7
   1da42:	4640      	mov	r0, r8
   1da44:	3330      	adds	r3, #48	; 0x30
   1da46:	930a      	str	r3, [sp, #40]	; 0x28
   1da48:	f012 fe7c 	bl	30744 <__mcmp>
   1da4c:	4632      	mov	r2, r6
   1da4e:	9006      	str	r0, [sp, #24]
   1da50:	4621      	mov	r1, r4
   1da52:	4658      	mov	r0, fp
   1da54:	f012 fe90 	bl	30778 <__mdiff>
   1da58:	68c2      	ldr	r2, [r0, #12]
   1da5a:	4605      	mov	r5, r0
   1da5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1da5e:	bb02      	cbnz	r2, 1daa2 <_dtoa_r+0xa1a>
   1da60:	4601      	mov	r1, r0
   1da62:	4640      	mov	r0, r8
   1da64:	f012 fe6e 	bl	30744 <__mcmp>
   1da68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1da6a:	4602      	mov	r2, r0
   1da6c:	4629      	mov	r1, r5
   1da6e:	4658      	mov	r0, fp
   1da70:	920c      	str	r2, [sp, #48]	; 0x30
   1da72:	464d      	mov	r5, r9
   1da74:	930a      	str	r3, [sp, #40]	; 0x28
   1da76:	f012 fcd6 	bl	30426 <_Bfree>
   1da7a:	9b08      	ldr	r3, [sp, #32]
   1da7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1da7e:	ea43 0102 	orr.w	r1, r3, r2
   1da82:	9b07      	ldr	r3, [sp, #28]
   1da84:	430b      	orrs	r3, r1
   1da86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1da88:	d10d      	bne.n	1daa6 <_dtoa_r+0xa1e>
   1da8a:	2b39      	cmp	r3, #57	; 0x39
   1da8c:	d027      	beq.n	1dade <_dtoa_r+0xa56>
   1da8e:	9a06      	ldr	r2, [sp, #24]
   1da90:	2a00      	cmp	r2, #0
   1da92:	dd01      	ble.n	1da98 <_dtoa_r+0xa10>
   1da94:	9b04      	ldr	r3, [sp, #16]
   1da96:	3331      	adds	r3, #49	; 0x31
   1da98:	9a00      	ldr	r2, [sp, #0]
   1da9a:	7013      	strb	r3, [r2, #0]
   1da9c:	e77c      	b.n	1d998 <_dtoa_r+0x910>
   1da9e:	4630      	mov	r0, r6
   1daa0:	e7b8      	b.n	1da14 <_dtoa_r+0x98c>
   1daa2:	2201      	movs	r2, #1
   1daa4:	e7e2      	b.n	1da6c <_dtoa_r+0x9e4>
   1daa6:	9906      	ldr	r1, [sp, #24]
   1daa8:	2900      	cmp	r1, #0
   1daaa:	db04      	blt.n	1dab6 <_dtoa_r+0xa2e>
   1daac:	9808      	ldr	r0, [sp, #32]
   1daae:	4301      	orrs	r1, r0
   1dab0:	9807      	ldr	r0, [sp, #28]
   1dab2:	4301      	orrs	r1, r0
   1dab4:	d11d      	bne.n	1daf2 <_dtoa_r+0xa6a>
   1dab6:	2a00      	cmp	r2, #0
   1dab8:	ddee      	ble.n	1da98 <_dtoa_r+0xa10>
   1daba:	4641      	mov	r1, r8
   1dabc:	2201      	movs	r2, #1
   1dabe:	4658      	mov	r0, fp
   1dac0:	9306      	str	r3, [sp, #24]
   1dac2:	f012 fdec 	bl	3069e <__lshift>
   1dac6:	4621      	mov	r1, r4
   1dac8:	4680      	mov	r8, r0
   1daca:	f012 fe3b 	bl	30744 <__mcmp>
   1dace:	2800      	cmp	r0, #0
   1dad0:	9b06      	ldr	r3, [sp, #24]
   1dad2:	dc02      	bgt.n	1dada <_dtoa_r+0xa52>
   1dad4:	d1e0      	bne.n	1da98 <_dtoa_r+0xa10>
   1dad6:	07da      	lsls	r2, r3, #31
   1dad8:	d5de      	bpl.n	1da98 <_dtoa_r+0xa10>
   1dada:	2b39      	cmp	r3, #57	; 0x39
   1dadc:	d1da      	bne.n	1da94 <_dtoa_r+0xa0c>
   1dade:	2339      	movs	r3, #57	; 0x39
   1dae0:	9a00      	ldr	r2, [sp, #0]
   1dae2:	7013      	strb	r3, [r2, #0]
   1dae4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1dae8:	1e6a      	subs	r2, r5, #1
   1daea:	2b39      	cmp	r3, #57	; 0x39
   1daec:	d046      	beq.n	1db7c <_dtoa_r+0xaf4>
   1daee:	3301      	adds	r3, #1
   1daf0:	e7d3      	b.n	1da9a <_dtoa_r+0xa12>
   1daf2:	2a00      	cmp	r2, #0
   1daf4:	dd03      	ble.n	1dafe <_dtoa_r+0xa76>
   1daf6:	2b39      	cmp	r3, #57	; 0x39
   1daf8:	d0f1      	beq.n	1dade <_dtoa_r+0xa56>
   1dafa:	3301      	adds	r3, #1
   1dafc:	e7cc      	b.n	1da98 <_dtoa_r+0xa10>
   1dafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1db00:	f809 3c01 	strb.w	r3, [r9, #-1]
   1db04:	4591      	cmp	r9, r2
   1db06:	d021      	beq.n	1db4c <_dtoa_r+0xac4>
   1db08:	4641      	mov	r1, r8
   1db0a:	2300      	movs	r3, #0
   1db0c:	220a      	movs	r2, #10
   1db0e:	4658      	mov	r0, fp
   1db10:	f012 fca0 	bl	30454 <__multadd>
   1db14:	42b7      	cmp	r7, r6
   1db16:	4680      	mov	r8, r0
   1db18:	f04f 0300 	mov.w	r3, #0
   1db1c:	f04f 020a 	mov.w	r2, #10
   1db20:	4639      	mov	r1, r7
   1db22:	4658      	mov	r0, fp
   1db24:	d106      	bne.n	1db34 <_dtoa_r+0xaac>
   1db26:	f012 fc95 	bl	30454 <__multadd>
   1db2a:	4607      	mov	r7, r0
   1db2c:	4606      	mov	r6, r0
   1db2e:	f109 0901 	add.w	r9, r9, #1
   1db32:	e77c      	b.n	1da2e <_dtoa_r+0x9a6>
   1db34:	f012 fc8e 	bl	30454 <__multadd>
   1db38:	4631      	mov	r1, r6
   1db3a:	4607      	mov	r7, r0
   1db3c:	2300      	movs	r3, #0
   1db3e:	220a      	movs	r2, #10
   1db40:	4658      	mov	r0, fp
   1db42:	f012 fc87 	bl	30454 <__multadd>
   1db46:	4606      	mov	r6, r0
   1db48:	e7f1      	b.n	1db2e <_dtoa_r+0xaa6>
   1db4a:	2700      	movs	r7, #0
   1db4c:	4641      	mov	r1, r8
   1db4e:	2201      	movs	r2, #1
   1db50:	4658      	mov	r0, fp
   1db52:	9300      	str	r3, [sp, #0]
   1db54:	f012 fda3 	bl	3069e <__lshift>
   1db58:	4621      	mov	r1, r4
   1db5a:	4680      	mov	r8, r0
   1db5c:	f012 fdf2 	bl	30744 <__mcmp>
   1db60:	2800      	cmp	r0, #0
   1db62:	dcbf      	bgt.n	1dae4 <_dtoa_r+0xa5c>
   1db64:	d102      	bne.n	1db6c <_dtoa_r+0xae4>
   1db66:	9b00      	ldr	r3, [sp, #0]
   1db68:	07db      	lsls	r3, r3, #31
   1db6a:	d4bb      	bmi.n	1dae4 <_dtoa_r+0xa5c>
   1db6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1db70:	1e6a      	subs	r2, r5, #1
   1db72:	2b30      	cmp	r3, #48	; 0x30
   1db74:	f47f af10 	bne.w	1d998 <_dtoa_r+0x910>
   1db78:	4615      	mov	r5, r2
   1db7a:	e7f7      	b.n	1db6c <_dtoa_r+0xae4>
   1db7c:	9b03      	ldr	r3, [sp, #12]
   1db7e:	4293      	cmp	r3, r2
   1db80:	d104      	bne.n	1db8c <_dtoa_r+0xb04>
   1db82:	f10a 0a01 	add.w	sl, sl, #1
   1db86:	2331      	movs	r3, #49	; 0x31
   1db88:	9a03      	ldr	r2, [sp, #12]
   1db8a:	e786      	b.n	1da9a <_dtoa_r+0xa12>
   1db8c:	4615      	mov	r5, r2
   1db8e:	e7a9      	b.n	1dae4 <_dtoa_r+0xa5c>
   1db90:	4b13      	ldr	r3, [pc, #76]	; (1dbe0 <_dtoa_r+0xb58>)
   1db92:	f7ff bae1 	b.w	1d158 <_dtoa_r+0xd0>
   1db96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1db98:	2b00      	cmp	r3, #0
   1db9a:	f47f aab9 	bne.w	1d110 <_dtoa_r+0x88>
   1db9e:	4b11      	ldr	r3, [pc, #68]	; (1dbe4 <_dtoa_r+0xb5c>)
   1dba0:	f7ff bada 	b.w	1d158 <_dtoa_r+0xd0>
   1dba4:	9b04      	ldr	r3, [sp, #16]
   1dba6:	2b00      	cmp	r3, #0
   1dba8:	dc03      	bgt.n	1dbb2 <_dtoa_r+0xb2a>
   1dbaa:	9b08      	ldr	r3, [sp, #32]
   1dbac:	2b02      	cmp	r3, #2
   1dbae:	f73f aedf 	bgt.w	1d970 <_dtoa_r+0x8e8>
   1dbb2:	9d03      	ldr	r5, [sp, #12]
   1dbb4:	4621      	mov	r1, r4
   1dbb6:	4640      	mov	r0, r8
   1dbb8:	f012 fafe 	bl	301b8 <quorem>
   1dbbc:	9a03      	ldr	r2, [sp, #12]
   1dbbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1dbc2:	9904      	ldr	r1, [sp, #16]
   1dbc4:	f805 3b01 	strb.w	r3, [r5], #1
   1dbc8:	1aaa      	subs	r2, r5, r2
   1dbca:	4291      	cmp	r1, r2
   1dbcc:	ddbd      	ble.n	1db4a <_dtoa_r+0xac2>
   1dbce:	4641      	mov	r1, r8
   1dbd0:	2300      	movs	r3, #0
   1dbd2:	220a      	movs	r2, #10
   1dbd4:	4658      	mov	r0, fp
   1dbd6:	f012 fc3d 	bl	30454 <__multadd>
   1dbda:	4680      	mov	r8, r0
   1dbdc:	e7ea      	b.n	1dbb4 <_dtoa_r+0xb2c>
   1dbde:	bf00      	nop
   1dbe0:	00033029 	.word	0x00033029
   1dbe4:	000335e5 	.word	0x000335e5

0001dbe8 <main>:

	return ret;
}

int main(void)
{
   1dbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dbec:	ed2d 8b02 	vpush	{d8}
	int err;

	printk("nrf91 saadc sampling AIN0 (P0.13)\n");
   1dbf0:	484b      	ldr	r0, [pc, #300]	; (1dd20 <main+0x138>)
{
   1dbf2:	b086      	sub	sp, #24
	printk("nrf91 saadc sampling AIN0 (P0.13)\n");
   1dbf4:	f011 f8ef 	bl	2edd6 <printk>
	printk("Example requires secure_boot to have ");
   1dbf8:	484a      	ldr	r0, [pc, #296]	; (1dd24 <main+0x13c>)
   1dbfa:	f011 f8ec 	bl	2edd6 <printk>
	printk("SAADC set to non-secure!\n");
   1dbfe:	484a      	ldr	r0, [pc, #296]	; (1dd28 <main+0x140>)
   1dc00:	f011 f8e9 	bl	2edd6 <printk>
	printk("If not; BusFault/UsageFault will be triggered\n");
   1dc04:	4849      	ldr	r0, [pc, #292]	; (1dd2c <main+0x144>)
   1dc06:	f011 f8e6 	bl	2edd6 <printk>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1dc0a:	4849      	ldr	r0, [pc, #292]	; (1dd30 <main+0x148>)
   1dc0c:	f00c f9b8 	bl	29f80 <z_impl_device_get_binding>

	static struct device *led1;
	led1 = device_get_binding( "GPIO_0" );
   1dc10:	4c48      	ldr	r4, [pc, #288]	; (1dd34 <main+0x14c>)
   1dc12:	6020      	str	r0, [r4, #0]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   1dc14:	6843      	ldr	r3, [r0, #4]
   1dc16:	2202      	movs	r2, #2
   1dc18:	681d      	ldr	r5, [r3, #0]
   1dc1a:	2100      	movs	r1, #0
   1dc1c:	2301      	movs	r3, #1
   1dc1e:	47a8      	blx	r5
	gpio_pin_configure( led1, 2, GPIO_DIR_OUT );
	gpio_pin_configure( led1, 15, GPIO_DIR_OUT );
   1dc20:	6820      	ldr	r0, [r4, #0]
   1dc22:	6843      	ldr	r3, [r0, #4]
   1dc24:	220f      	movs	r2, #15
   1dc26:	681d      	ldr	r5, [r3, #0]
   1dc28:	2100      	movs	r1, #0
   1dc2a:	2301      	movs	r3, #1
   1dc2c:	47a8      	blx	r5
     gpio_pin_write( led1, (u32_t)2, 1);
   1dc2e:	6820      	ldr	r0, [r4, #0]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   1dc30:	6843      	ldr	r3, [r0, #4]
   1dc32:	2202      	movs	r2, #2
   1dc34:	685d      	ldr	r5, [r3, #4]
   1dc36:	2100      	movs	r1, #0
   1dc38:	2301      	movs	r3, #1
   1dc3a:	47a8      	blx	r5
 	gpio_pin_write( led1, (u32_t)15, 1);
   1dc3c:	6820      	ldr	r0, [r4, #0]
   1dc3e:	6843      	ldr	r3, [r0, #4]
   1dc40:	220f      	movs	r2, #15
   1dc42:	685d      	ldr	r5, [r3, #4]
   1dc44:	2100      	movs	r1, #0
   1dc46:	2301      	movs	r3, #1
   1dc48:	47a8      	blx	r5
	if (!led1) 
   1dc4a:	6823      	ldr	r3, [r4, #0]
   1dc4c:	b913      	cbnz	r3, 1dc54 <main+0x6c>
	{
		printk("device_get_binding GPIO_0 failed\n");
   1dc4e:	483a      	ldr	r0, [pc, #232]	; (1dd38 <main+0x150>)
   1dc50:	f011 f8c1 	bl	2edd6 <printk>
   1dc54:	4839      	ldr	r0, [pc, #228]	; (1dd3c <main+0x154>)
   1dc56:	f00c f993 	bl	29f80 <z_impl_device_get_binding>
	}

	adc_dev = device_get_binding("ADC_0");
   1dc5a:	4c39      	ldr	r4, [pc, #228]	; (1dd40 <main+0x158>)
   1dc5c:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
   1dc5e:	b910      	cbnz	r0, 1dc66 <main+0x7e>
		printk("device_get_binding ADC_0 failed\n");
   1dc60:	4838      	ldr	r0, [pc, #224]	; (1dd44 <main+0x15c>)
   1dc62:	f011 f8b8 	bl	2edd6 <printk>
	}
	err = adc_channel_setup(adc_dev, &m_1st_channel_cfg);
   1dc66:	6820      	ldr	r0, [r4, #0]
				const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->driver_api;

	return api->channel_setup(dev, channel_cfg);
   1dc68:	6843      	ldr	r3, [r0, #4]
   1dc6a:	4937      	ldr	r1, [pc, #220]	; (1dd48 <main+0x160>)
   1dc6c:	681b      	ldr	r3, [r3, #0]
   1dc6e:	4798      	blx	r3
	if (err) {
   1dc70:	4601      	mov	r1, r0
   1dc72:	b110      	cbz	r0, 1dc7a <main+0x92>
		printk("Error in adc setup: %d\n", err);
   1dc74:	4835      	ldr	r0, [pc, #212]	; (1dd4c <main+0x164>)
   1dc76:	f011 f8ae 	bl	2edd6 <printk>

	/* Trigger offset calibration
	 * As this generates a _DONE and _RESULT event
	 * the first result will be incorrect.
	 */
	NRF_SAADC_NS->TASKS_CALIBRATEOFFSET = 1;
   1dc7a:	2201      	movs	r2, #1
   1dc7c:	4b34      	ldr	r3, [pc, #208]	; (1dd50 <main+0x168>)
	const struct adc_sequence sequence = {
   1dc7e:	4e35      	ldr	r6, [pc, #212]	; (1dd54 <main+0x16c>)
	while (1) {
		err = adc_sample();
		if (err) {
			printk("Error in adc sampling: %d\n", err);
   1dc80:	4f35      	ldr	r7, [pc, #212]	; (1dd58 <main+0x170>)
	printk("ADC read err: %d\n", ret);
   1dc82:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1dd70 <main+0x188>
	NRF_SAADC_NS->TASKS_CALIBRATEOFFSET = 1;
   1dc86:	60da      	str	r2, [r3, #12]
	const struct adc_sequence sequence = {
   1dc88:	2214      	movs	r2, #20
   1dc8a:	2100      	movs	r1, #0
   1dc8c:	a801      	add	r0, sp, #4
   1dc8e:	f012 f8cf 	bl	2fe30 <memset>
   1dc92:	2202      	movs	r2, #2
   1dc94:	2301      	movs	r3, #1
   1dc96:	9204      	str	r2, [sp, #16]
   1dc98:	f640 020c 	movw	r2, #2060	; 0x80c
	if (!adc_dev) {
   1dc9c:	6820      	ldr	r0, [r4, #0]
	const struct adc_sequence sequence = {
   1dc9e:	e9cd 3602 	strd	r3, r6, [sp, #8]
   1dca2:	f8ad 2014 	strh.w	r2, [sp, #20]
   1dca6:	f88d 3016 	strb.w	r3, [sp, #22]
	if (!adc_dev) {
   1dcaa:	b930      	cbnz	r0, 1dcba <main+0xd2>
		return -1;
   1dcac:	f04f 35ff 	mov.w	r5, #4294967295
			printk("Error in adc sampling: %d\n", err);
   1dcb0:	4629      	mov	r1, r5
   1dcb2:	4638      	mov	r0, r7
   1dcb4:	f011 f88f 	bl	2edd6 <printk>
   1dcb8:	e02d      	b.n	1dd16 <main+0x12e>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->driver_api;

	return api->read(dev, sequence);
   1dcba:	6843      	ldr	r3, [r0, #4]
   1dcbc:	a901      	add	r1, sp, #4
   1dcbe:	685b      	ldr	r3, [r3, #4]
   1dcc0:	4798      	blx	r3
	printk("ADC read err: %d\n", ret);
   1dcc2:	4601      	mov	r1, r0
   1dcc4:	4605      	mov	r5, r0
   1dcc6:	4640      	mov	r0, r8
   1dcc8:	f011 f885 	bl	2edd6 <printk>
		adc_voltage = (float)(((float)m_sample_buffer[i] / 4095.0f) *
   1dccc:	f9b6 1000 	ldrsh.w	r1, [r6]
		printk("ADC raw value: %d\n", m_sample_buffer[i]);
   1dcd0:	4822      	ldr	r0, [pc, #136]	; (1dd5c <main+0x174>)
		adc_voltage = (float)(((float)m_sample_buffer[i] / 4095.0f) *
   1dcd2:	ee07 1a90 	vmov	s15, r1
   1dcd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   1dcda:	eddf 7a21 	vldr	s15, [pc, #132]	; 1dd60 <main+0x178>
   1dcde:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1dce2:	eddf 7a20 	vldr	s15, [pc, #128]	; 1dd64 <main+0x17c>
   1dce6:	ee28 8a27 	vmul.f32	s16, s16, s15
		printk("ADC raw value: %d\n", m_sample_buffer[i]);
   1dcea:	f011 f874 	bl	2edd6 <printk>
		printk("Measured voltage: %d mV\n", (int)adc_voltage);
   1dcee:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   1dcf2:	481d      	ldr	r0, [pc, #116]	; (1dd68 <main+0x180>)
   1dcf4:	ee17 1a90 	vmov	r1, s15
   1dcf8:	f011 f86d 	bl	2edd6 <printk>
		printk("Measured voltage x 3: %d mV\n", (int)(3 * adc_voltage));
   1dcfc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   1dd00:	ee28 8a27 	vmul.f32	s16, s16, s15
   1dd04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   1dd08:	4818      	ldr	r0, [pc, #96]	; (1dd6c <main+0x184>)
   1dd0a:	ee17 1a90 	vmov	r1, s15
   1dd0e:	f011 f862 	bl	2edd6 <printk>
		if (err) {
   1dd12:	2d00      	cmp	r5, #0
   1dd14:	d1cc      	bne.n	1dcb0 <main+0xc8>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
   1dd16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1dd1a:	f00e f9e5 	bl	2c0e8 <z_impl_k_sleep>
   1dd1e:	e7b3      	b.n	1dc88 <main+0xa0>
   1dd20:	0003151e 	.word	0x0003151e
   1dd24:	00031541 	.word	0x00031541
   1dd28:	00031567 	.word	0x00031567
   1dd2c:	00031581 	.word	0x00031581
   1dd30:	000315b0 	.word	0x000315b0
   1dd34:	2002000c 	.word	0x2002000c
   1dd38:	000315b7 	.word	0x000315b7
   1dd3c:	000315d9 	.word	0x000315d9
   1dd40:	20020008 	.word	0x20020008
   1dd44:	000315df 	.word	0x000315df
   1dd48:	00031518 	.word	0x00031518
   1dd4c:	00031600 	.word	0x00031600
   1dd50:	4000e000 	.word	0x4000e000
   1dd54:	200214f0 	.word	0x200214f0
   1dd58:	00031673 	.word	0x00031673
   1dd5c:	0003162a 	.word	0x0003162a
   1dd60:	457ff000 	.word	0x457ff000
   1dd64:	45610000 	.word	0x45610000
   1dd68:	0003163d 	.word	0x0003163d
   1dd6c:	00031656 	.word	0x00031656
   1dd70:	00031618 	.word	0x00031618

0001dd74 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd78:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1dd7a:	7a83      	ldrb	r3, [r0, #10]
{
   1dd7c:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1dd7e:	009b      	lsls	r3, r3, #2
   1dd80:	3307      	adds	r3, #7
   1dd82:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1dd86:	ebad 0d03 	sub.w	sp, sp, r3
   1dd8a:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1dd8c:	6843      	ldr	r3, [r0, #4]
{
   1dd8e:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1dd90:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1dd92:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1dd94:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1dd98:	4281      	cmp	r1, r0
   1dd9a:	d222      	bcs.n	1dde2 <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1dd9c:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1dd9e:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1dda0:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1dda4:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1dda6:	d001      	beq.n	1ddac <z_sys_mem_pool_block_free+0x38>
   1dda8:	f010 fd8d 	bl	2e8c6 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1ddac:	4604      	mov	r4, r0
	while (level >= 0) {
   1ddae:	f1b8 0f00 	cmp.w	r8, #0
   1ddb2:	da1e      	bge.n	1ddf2 <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
   1ddb4:	23bc      	movs	r3, #188	; 0xbc
   1ddb6:	4a50      	ldr	r2, [pc, #320]	; (1def8 <z_sys_mem_pool_block_free+0x184>)
   1ddb8:	4950      	ldr	r1, [pc, #320]	; (1defc <z_sys_mem_pool_block_free+0x188>)
   1ddba:	4851      	ldr	r0, [pc, #324]	; (1df00 <z_sys_mem_pool_block_free+0x18c>)
   1ddbc:	f011 f80b 	bl	2edd6 <printk>
   1ddc0:	4850      	ldr	r0, [pc, #320]	; (1df04 <z_sys_mem_pool_block_free+0x190>)
   1ddc2:	f011 f808 	bl	2edd6 <printk>
   1ddc6:	21bc      	movs	r1, #188	; 0xbc
   1ddc8:	484b      	ldr	r0, [pc, #300]	; (1def8 <z_sys_mem_pool_block_free+0x184>)
   1ddca:	f011 f84a 	bl	2ee62 <assert_post_action>
	return -1;
   1ddce:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   1ddd2:	4621      	mov	r1, r4
   1ddd4:	7c30      	ldrb	r0, [r6, #16]
   1ddd6:	f010 fd7f 	bl	2e8d8 <pool_irq_unlock.isra.4>
}
   1ddda:	3714      	adds	r7, #20
   1dddc:	46bd      	mov	sp, r7
   1ddde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1dde2:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1dde4:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1dde6:	089b      	lsrs	r3, r3, #2
   1dde8:	f023 0303 	bic.w	r3, r3, #3
   1ddec:	f844 3f04 	str.w	r3, [r4, #4]!
   1ddf0:	e7d2      	b.n	1dd98 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1ddf2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ddf6:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1ddf8:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1ddfc:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1ddfe:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1de00:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1de02:	603b      	str	r3, [r7, #0]
   1de04:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
   1de08:	4630      	mov	r0, r6
   1de0a:	f107 030c 	add.w	r3, r7, #12
   1de0e:	f010 fd43 	bl	2e898 <get_bit_ptr>
	return (*word >> bit) & 1;
   1de12:	68fb      	ldr	r3, [r7, #12]
   1de14:	681b      	ldr	r3, [r3, #0]
   1de16:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
   1de1a:	07c3      	lsls	r3, r0, #31
   1de1c:	d40d      	bmi.n	1de3a <z_sys_mem_pool_block_free+0xc6>
   1de1e:	23a3      	movs	r3, #163	; 0xa3
   1de20:	4a35      	ldr	r2, [pc, #212]	; (1def8 <z_sys_mem_pool_block_free+0x184>)
   1de22:	4939      	ldr	r1, [pc, #228]	; (1df08 <z_sys_mem_pool_block_free+0x194>)
   1de24:	4836      	ldr	r0, [pc, #216]	; (1df00 <z_sys_mem_pool_block_free+0x18c>)
   1de26:	f010 ffd6 	bl	2edd6 <printk>
   1de2a:	4649      	mov	r1, r9
   1de2c:	4837      	ldr	r0, [pc, #220]	; (1df0c <z_sys_mem_pool_block_free+0x198>)
   1de2e:	f010 ffd2 	bl	2edd6 <printk>
   1de32:	21a3      	movs	r1, #163	; 0xa3
   1de34:	4830      	ldr	r0, [pc, #192]	; (1def8 <z_sys_mem_pool_block_free+0x184>)
   1de36:	f011 f814 	bl	2ee62 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
   1de3a:	f107 030c 	add.w	r3, r7, #12
   1de3e:	462a      	mov	r2, r5
   1de40:	4641      	mov	r1, r8
   1de42:	4630      	mov	r0, r6
   1de44:	f010 fd28 	bl	2e898 <get_bit_ptr>
	*word &= ~(1<<bit);
   1de48:	2301      	movs	r3, #1
   1de4a:	68fa      	ldr	r2, [r7, #12]
   1de4c:	fa03 f000 	lsl.w	r0, r3, r0
   1de50:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1de52:	6839      	ldr	r1, [r7, #0]
   1de54:	ea23 0300 	bic.w	r3, r3, r0
   1de58:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1de5a:	230c      	movs	r3, #12
   1de5c:	68f2      	ldr	r2, [r6, #12]
   1de5e:	fb03 2308 	mla	r3, r3, r8, r2
   1de62:	1d1a      	adds	r2, r3, #4
   1de64:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1de68:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1de6a:	4621      	mov	r1, r4
   1de6c:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   1de70:	689a      	ldr	r2, [r3, #8]
   1de72:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1de76:	f8c3 9008 	str.w	r9, [r3, #8]
   1de7a:	7c30      	ldrb	r0, [r6, #16]
   1de7c:	f010 fd2c 	bl	2e8d8 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1de80:	7c30      	ldrb	r0, [r6, #16]
   1de82:	f010 0001 	ands.w	r0, r0, #1
   1de86:	d001      	beq.n	1de8c <z_sys_mem_pool_block_free+0x118>
   1de88:	f010 fd1d 	bl	2e8c6 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1de8c:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1de8e:	f1b8 0f00 	cmp.w	r8, #0
   1de92:	d09e      	beq.n	1ddd2 <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
   1de94:	f107 030c 	add.w	r3, r7, #12
   1de98:	462a      	mov	r2, r5
   1de9a:	4641      	mov	r1, r8
   1de9c:	4630      	mov	r0, r6
   1de9e:	f010 fcfb 	bl	2e898 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1dea2:	68fb      	ldr	r3, [r7, #12]
   1dea4:	2800      	cmp	r0, #0
   1dea6:	bfb8      	it	lt
   1dea8:	3003      	addlt	r0, #3
   1deaa:	681b      	ldr	r3, [r3, #0]
   1deac:	f020 0003 	bic.w	r0, r0, #3
   1deb0:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1deb4:	f010 000f 	ands.w	r0, r0, #15
   1deb8:	d18b      	bne.n	1ddd2 <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
   1deba:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1debc:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1dec0:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1dec2:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1dec6:	4353      	muls	r3, r2
   1dec8:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1deca:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1decc:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1dece:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1ded2:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1ded6:	2804      	cmp	r0, #4
   1ded8:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1dedc:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1dee0:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1dee4:	f8c1 c004 	str.w	ip, [r1, #4]
   1dee8:	d1ea      	bne.n	1dec0 <z_sys_mem_pool_block_free+0x14c>
		bn = bn / 4;
   1deea:	2d00      	cmp	r5, #0
   1deec:	bfb8      	it	lt
   1deee:	3503      	addlt	r5, #3
		level = level - 1;
   1def0:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
   1def4:	10ad      	asrs	r5, r5, #2
   1def6:	e75a      	b.n	1ddae <z_sys_mem_pool_block_free+0x3a>
   1def8:	0003168e 	.word	0x0003168e
   1defc:	00033029 	.word	0x00033029
   1df00:	000316d1 	.word	0x000316d1
   1df04:	00031713 	.word	0x00031713
   1df08:	000316b2 	.word	0x000316b2
   1df0c:	000316ee 	.word	0x000316ee

0001df10 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1df10:	680b      	ldr	r3, [r1, #0]
   1df12:	3301      	adds	r3, #1
   1df14:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1df16:	4b01      	ldr	r3, [pc, #4]	; (1df1c <char_out+0xc>)
   1df18:	681b      	ldr	r3, [r3, #0]
   1df1a:	4718      	bx	r3
   1df1c:	20026718 	.word	0x20026718

0001df20 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   1df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df24:	b085      	sub	sp, #20
   1df26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1df28:	469b      	mov	fp, r3
   1df2a:	2c01      	cmp	r4, #1
   1df2c:	bfb8      	it	lt
   1df2e:	2401      	movlt	r4, #1
   1df30:	2b01      	cmp	r3, #1
   1df32:	bf0c      	ite	eq
   1df34:	2330      	moveq	r3, #48	; 0x30
   1df36:	2320      	movne	r3, #32
   1df38:	4616      	mov	r6, r2
   1df3a:	4682      	mov	sl, r0
   1df3c:	4688      	mov	r8, r1
   1df3e:	2501      	movs	r5, #1
   1df40:	270a      	movs	r7, #10
   1df42:	2200      	movs	r2, #0
   1df44:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1dfb4 <_printk_dec_ulong+0x94>
   1df48:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   1df4a:	fbb6 f3f9 	udiv	r3, r6, r9
   1df4e:	9301      	str	r3, [sp, #4]
   1df50:	b90a      	cbnz	r2, 1df56 <_printk_dec_ulong+0x36>
   1df52:	45b1      	cmp	r9, r6
   1df54:	d81c      	bhi.n	1df90 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   1df56:	9b01      	ldr	r3, [sp, #4]
   1df58:	4641      	mov	r1, r8
   1df5a:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1df5e:	47d0      	blx	sl
			found_largest_digit = 1;
   1df60:	2201      	movs	r2, #1
			digits++;
   1df62:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   1df64:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   1df66:	3f01      	subs	r7, #1
		remainder %= pos;
   1df68:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   1df6c:	230a      	movs	r3, #10
	while (pos >= 10) {
   1df6e:	2f01      	cmp	r7, #1
		pos /= 10;
   1df70:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   1df74:	d1e9      	bne.n	1df4a <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   1df76:	4641      	mov	r1, r8
   1df78:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1df7c:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   1df7e:	f1bb 0f03 	cmp.w	fp, #3
   1df82:	d102      	bne.n	1df8a <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   1df84:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   1df86:	2c00      	cmp	r4, #0
   1df88:	dc0e      	bgt.n	1dfa8 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   1df8a:	b005      	add	sp, #20
   1df8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   1df90:	42bc      	cmp	r4, r7
   1df92:	dbe7      	blt.n	1df64 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   1df94:	f1bb 0f02 	cmp.w	fp, #2
   1df98:	d8e4      	bhi.n	1df64 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1df9a:	4641      	mov	r1, r8
   1df9c:	9802      	ldr	r0, [sp, #8]
   1df9e:	9203      	str	r2, [sp, #12]
			digits++;
   1dfa0:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1dfa2:	47d0      	blx	sl
			digits++;
   1dfa4:	9a03      	ldr	r2, [sp, #12]
   1dfa6:	e7dd      	b.n	1df64 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   1dfa8:	4641      	mov	r1, r8
   1dfaa:	2020      	movs	r0, #32
   1dfac:	47d0      	blx	sl
   1dfae:	3c01      	subs	r4, #1
   1dfb0:	e7e9      	b.n	1df86 <_printk_dec_ulong+0x66>
   1dfb2:	bf00      	nop
   1dfb4:	3b9aca00 	.word	0x3b9aca00

0001dfb8 <vprintk>:
	struct out_context ctx = { 0 };
   1dfb8:	2300      	movs	r3, #0
{
   1dfba:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   1dfbc:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1dfbe:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   1dfc0:	4803      	ldr	r0, [pc, #12]	; (1dfd0 <vprintk+0x18>)
   1dfc2:	460b      	mov	r3, r1
   1dfc4:	a901      	add	r1, sp, #4
   1dfc6:	f010 fd96 	bl	2eaf6 <z_vprintk>
}
   1dfca:	b003      	add	sp, #12
   1dfcc:	f85d fb04 	ldr.w	pc, [sp], #4
   1dfd0:	0001df11 	.word	0x0001df11

0001dfd4 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1dfd4:	f04f 0220 	mov.w	r2, #32
   1dfd8:	f3ef 8311 	mrs	r3, BASEPRI
   1dfdc:	f382 8811 	msr	BASEPRI, r2
   1dfe0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1dfe4:	2101      	movs	r1, #1
   1dfe6:	4a04      	ldr	r2, [pc, #16]	; (1dff8 <nordicsemi_nrf91_init+0x24>)
   1dfe8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1dfec:	f383 8811 	msr	BASEPRI, r3
   1dff0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1dff4:	2000      	movs	r0, #0
   1dff6:	4770      	bx	lr
   1dff8:	40039000 	.word	0x40039000

0001dffc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1dffc:	b120      	cbz	r0, 1e008 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1dffe:	4b03      	ldr	r3, [pc, #12]	; (1e00c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1e000:	0180      	lsls	r0, r0, #6
   1e002:	f043 0301 	orr.w	r3, r3, #1
   1e006:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1e008:	4770      	bx	lr
   1e00a:	bf00      	nop
   1e00c:	00030ee0 	.word	0x00030ee0

0001e010 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   1e010:	4b13      	ldr	r3, [pc, #76]	; (1e060 <log_generic+0x50>)
{
   1e012:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		u32_t timestamp = timestamp_func();
   1e016:	681b      	ldr	r3, [r3, #0]
{
   1e018:	4680      	mov	r8, r0
   1e01a:	4689      	mov	r9, r1
   1e01c:	4692      	mov	sl, r2
		u32_t timestamp = timestamp_func();
   1e01e:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   1e020:	2600      	movs	r6, #0
		u32_t timestamp = timestamp_func();
   1e022:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1e024:	4c0f      	ldr	r4, [pc, #60]	; (1e064 <log_generic+0x54>)
   1e026:	4d10      	ldr	r5, [pc, #64]	; (1e068 <log_generic+0x58>)
   1e028:	1b2d      	subs	r5, r5, r4
   1e02a:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   1e02c:	42ae      	cmp	r6, r5
   1e02e:	db02      	blt.n	1e036 <log_generic+0x26>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   1e030:	b003      	add	sp, #12
   1e032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   1e036:	4620      	mov	r0, r4
   1e038:	f010 ff1d 	bl	2ee76 <log_backend_is_active>
   1e03c:	b160      	cbz	r0, 1e058 <log_generic+0x48>
	if (backend->api->put_sync_string) {
   1e03e:	6823      	ldr	r3, [r4, #0]
   1e040:	f8d3 b004 	ldr.w	fp, [r3, #4]
   1e044:	f1bb 0f00 	cmp.w	fp, #0
   1e048:	d006      	beq.n	1e058 <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
   1e04a:	f8cd a000 	str.w	sl, [sp]
   1e04e:	464b      	mov	r3, r9
   1e050:	463a      	mov	r2, r7
   1e052:	4641      	mov	r1, r8
   1e054:	4620      	mov	r0, r4
   1e056:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   1e058:	3601      	adds	r6, #1
   1e05a:	3410      	adds	r4, #16
   1e05c:	e7e6      	b.n	1e02c <log_generic+0x1c>
   1e05e:	bf00      	nop
   1e060:	2002671c 	.word	0x2002671c
   1e064:	00030ea4 	.word	0x00030ea4
   1e068:	00030eb4 	.word	0x00030eb4

0001e06c <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   1e06c:	4b03      	ldr	r3, [pc, #12]	; (1e07c <log_core_init+0x10>)
   1e06e:	4a04      	ldr	r2, [pc, #16]	; (1e080 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   1e070:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   1e074:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1e076:	f000 ba35 	b.w	1e4e4 <log_output_timestamp_freq_set>
   1e07a:	bf00      	nop
   1e07c:	2002671c 	.word	0x2002671c
   1e080:	0002ee7d 	.word	0x0002ee7d

0001e084 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1e084:	4a04      	ldr	r2, [pc, #16]	; (1e098 <log_source_name_get+0x14>)
   1e086:	4b05      	ldr	r3, [pc, #20]	; (1e09c <log_source_name_get+0x18>)
   1e088:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1e08a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1e08e:	bf34      	ite	cc
   1e090:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   1e094:	2000      	movcs	r0, #0
}
   1e096:	4770      	bx	lr
   1e098:	00030e1c 	.word	0x00030e1c
   1e09c:	00030ea4 	.word	0x00030ea4

0001e0a0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   1e0a0:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1e0a2:	4c10      	ldr	r4, [pc, #64]	; (1e0e4 <log_backend_enable+0x44>)
{
   1e0a4:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   1e0a6:	1b04      	subs	r4, r0, r4
   1e0a8:	1124      	asrs	r4, r4, #4
   1e0aa:	3401      	adds	r4, #1
{
   1e0ac:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   1e0ae:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   1e0b0:	b948      	cbnz	r0, 1e0c6 <log_backend_enable+0x26>
   1e0b2:	490d      	ldr	r1, [pc, #52]	; (1e0e8 <log_backend_enable+0x48>)
   1e0b4:	480d      	ldr	r0, [pc, #52]	; (1e0ec <log_backend_enable+0x4c>)
   1e0b6:	23c0      	movs	r3, #192	; 0xc0
   1e0b8:	4a0d      	ldr	r2, [pc, #52]	; (1e0f0 <log_backend_enable+0x50>)
   1e0ba:	f010 fe8c 	bl	2edd6 <printk>
   1e0be:	21c0      	movs	r1, #192	; 0xc0
   1e0c0:	480b      	ldr	r0, [pc, #44]	; (1e0f0 <log_backend_enable+0x50>)
   1e0c2:	f010 fece 	bl	2ee62 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   1e0c6:	2201      	movs	r2, #1
	backend->cb->id = id;
   1e0c8:	686b      	ldr	r3, [r5, #4]
   1e0ca:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   1e0cc:	4c09      	ldr	r4, [pc, #36]	; (1e0f4 <log_backend_enable+0x54>)
	backend->cb->active = true;
   1e0ce:	715a      	strb	r2, [r3, #5]
   1e0d0:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   1e0d2:	601e      	str	r6, [r3, #0]
   1e0d4:	b912      	cbnz	r2, 1e0dc <log_backend_enable+0x3c>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1e0d6:	4808      	ldr	r0, [pc, #32]	; (1e0f8 <log_backend_enable+0x58>)
   1e0d8:	f00e f848 	bl	2c16c <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   1e0dc:	2301      	movs	r3, #1
   1e0de:	7023      	strb	r3, [r4, #0]
}
   1e0e0:	bd70      	pop	{r4, r5, r6, pc}
   1e0e2:	bf00      	nop
   1e0e4:	00030ea4 	.word	0x00030ea4
   1e0e8:	00031761 	.word	0x00031761
   1e0ec:	000316d1 	.word	0x000316d1
   1e0f0:	00031730 	.word	0x00031730
   1e0f4:	200214fc 	.word	0x200214fc
   1e0f8:	20026a54 	.word	0x20026a54

0001e0fc <log_init>:
{
   1e0fc:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   1e0fe:	4b13      	ldr	r3, [pc, #76]	; (1e14c <log_init+0x50>)
   1e100:	4c13      	ldr	r4, [pc, #76]	; (1e150 <log_init+0x54>)
   1e102:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1e104:	2b90      	cmp	r3, #144	; 0x90
   1e106:	dd06      	ble.n	1e116 <log_init+0x1a>
   1e108:	4b12      	ldr	r3, [pc, #72]	; (1e154 <log_init+0x58>)
   1e10a:	4a13      	ldr	r2, [pc, #76]	; (1e158 <log_init+0x5c>)
   1e10c:	f240 11ed 	movw	r1, #493	; 0x1ed
   1e110:	4812      	ldr	r0, [pc, #72]	; (1e15c <log_init+0x60>)
   1e112:	f00f f90b 	bl	2d32c <__assert_func>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e116:	4a12      	ldr	r2, [pc, #72]	; (1e160 <log_init+0x64>)
   1e118:	e8d2 6fef 	ldaex	r6, [r2]
   1e11c:	1c71      	adds	r1, r6, #1
   1e11e:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1e122:	2800      	cmp	r0, #0
   1e124:	d1f8      	bne.n	1e118 <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   1e126:	b916      	cbnz	r6, 1e12e <log_init+0x32>
   1e128:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   1e12a:	42ae      	cmp	r6, r5
   1e12c:	db00      	blt.n	1e130 <log_init+0x34>
}
   1e12e:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1e130:	7b23      	ldrb	r3, [r4, #12]
   1e132:	b143      	cbz	r3, 1e146 <log_init+0x4a>
			if (backend->api->init != NULL) {
   1e134:	6823      	ldr	r3, [r4, #0]
   1e136:	695b      	ldr	r3, [r3, #20]
   1e138:	b103      	cbz	r3, 1e13c <log_init+0x40>
				backend->api->init();
   1e13a:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   1e13c:	2204      	movs	r2, #4
   1e13e:	2100      	movs	r1, #0
   1e140:	4620      	mov	r0, r4
   1e142:	f7ff ffad 	bl	1e0a0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1e146:	3601      	adds	r6, #1
   1e148:	3410      	adds	r4, #16
   1e14a:	e7ee      	b.n	1e12a <log_init+0x2e>
   1e14c:	00030eb4 	.word	0x00030eb4
   1e150:	00030ea4 	.word	0x00030ea4
   1e154:	00031778 	.word	0x00031778
   1e158:	00031727 	.word	0x00031727
   1e15c:	000317af 	.word	0x000317af
   1e160:	20020010 	.word	0x20020010

0001e164 <z_impl_log_panic>:
{
   1e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1e166:	4f0c      	ldr	r7, [pc, #48]	; (1e198 <z_impl_log_panic+0x34>)
   1e168:	783d      	ldrb	r5, [r7, #0]
   1e16a:	b94d      	cbnz	r5, 1e180 <z_impl_log_panic+0x1c>
	log_init();
   1e16c:	f7ff ffc6 	bl	1e0fc <log_init>
   1e170:	4c0a      	ldr	r4, [pc, #40]	; (1e19c <z_impl_log_panic+0x38>)
   1e172:	4e0b      	ldr	r6, [pc, #44]	; (1e1a0 <z_impl_log_panic+0x3c>)
   1e174:	1b36      	subs	r6, r6, r4
   1e176:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1e178:	42b5      	cmp	r5, r6
   1e17a:	db02      	blt.n	1e182 <z_impl_log_panic+0x1e>
	panic_mode = true;
   1e17c:	2301      	movs	r3, #1
   1e17e:	703b      	strb	r3, [r7, #0]
}
   1e180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   1e182:	4620      	mov	r0, r4
   1e184:	f010 fe77 	bl	2ee76 <log_backend_is_active>
   1e188:	b118      	cbz	r0, 1e192 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   1e18a:	6823      	ldr	r3, [r4, #0]
   1e18c:	4620      	mov	r0, r4
   1e18e:	691b      	ldr	r3, [r3, #16]
   1e190:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1e192:	3501      	adds	r5, #1
   1e194:	3410      	adds	r4, #16
   1e196:	e7ef      	b.n	1e178 <z_impl_log_panic+0x14>
   1e198:	200214fd 	.word	0x200214fd
   1e19c:	00030ea4 	.word	0x00030ea4
   1e1a0:	00030eb4 	.word	0x00030eb4

0001e1a4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   1e1a4:	b40e      	push	{r1, r2, r3}
   1e1a6:	b503      	push	{r0, r1, lr}
   1e1a8:	ab03      	add	r3, sp, #12
   1e1aa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   1e1ae:	4601      	mov	r1, r0
   1e1b0:	4804      	ldr	r0, [pc, #16]	; (1e1c4 <print_formatted+0x20>)
	va_start(args, fmt);
   1e1b2:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   1e1b4:	f010 fc9f 	bl	2eaf6 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   1e1b8:	2000      	movs	r0, #0
   1e1ba:	b002      	add	sp, #8
   1e1bc:	f85d eb04 	ldr.w	lr, [sp], #4
   1e1c0:	b003      	add	sp, #12
   1e1c2:	4770      	bx	lr
   1e1c4:	0002eeab 	.word	0x0002eeab

0001e1c8 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   1e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   1e1cc:	f011 0402 	ands.w	r4, r1, #2
{
   1e1d0:	b085      	sub	sp, #20
   1e1d2:	4606      	mov	r6, r0
   1e1d4:	4690      	mov	r8, r2
   1e1d6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1e1da:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1e1de:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1e1e2:	d007      	beq.n	1e1f4 <prefix_print+0x2c>
	if (!format) {
   1e1e4:	f011 0f44 	tst.w	r1, #68	; 0x44
   1e1e8:	d137      	bne.n	1e25a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   1e1ea:	461a      	mov	r2, r3
   1e1ec:	4932      	ldr	r1, [pc, #200]	; (1e2b8 <prefix_print+0xf0>)
   1e1ee:	f7ff ffd9 	bl	1e1a4 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   1e1f2:	4604      	mov	r4, r0
	if (color) {
   1e1f4:	f1b9 0f00 	cmp.w	r9, #0
   1e1f8:	d00a      	beq.n	1e210 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   1e1fa:	4b30      	ldr	r3, [pc, #192]	; (1e2bc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   1e1fc:	4930      	ldr	r1, [pc, #192]	; (1e2c0 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   1e1fe:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   1e202:	4b30      	ldr	r3, [pc, #192]	; (1e2c4 <prefix_print+0xfc>)
   1e204:	4630      	mov	r0, r6
   1e206:	2a00      	cmp	r2, #0
   1e208:	bf08      	it	eq
   1e20a:	461a      	moveq	r2, r3
   1e20c:	f7ff ffca 	bl	1e1a4 <print_formatted>
	if (level_on) {
   1e210:	b13d      	cbz	r5, 1e222 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   1e212:	4b2d      	ldr	r3, [pc, #180]	; (1e2c8 <prefix_print+0x100>)
   1e214:	492d      	ldr	r1, [pc, #180]	; (1e2cc <prefix_print+0x104>)
   1e216:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   1e21a:	4630      	mov	r0, r6
   1e21c:	f7ff ffc2 	bl	1e1a4 <print_formatted>
   1e220:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   1e222:	f1b8 0f00 	cmp.w	r8, #0
   1e226:	d044      	beq.n	1e2b2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1e228:	2301      	movs	r3, #1
   1e22a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1e22e:	4b28      	ldr	r3, [pc, #160]	; (1e2d0 <prefix_print+0x108>)
   1e230:	f017 0f10 	tst.w	r7, #16
   1e234:	4f27      	ldr	r7, [pc, #156]	; (1e2d4 <prefix_print+0x10c>)
   1e236:	bf18      	it	ne
   1e238:	461f      	movne	r7, r3
   1e23a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1e23e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1e242:	f7ff ff1f 	bl	1e084 <log_source_name_get>
   1e246:	4639      	mov	r1, r7
   1e248:	4602      	mov	r2, r0
   1e24a:	4630      	mov	r0, r6
   1e24c:	f7ff ffaa 	bl	1e1a4 <print_formatted>
   1e250:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   1e252:	4420      	add	r0, r4
   1e254:	b005      	add	sp, #20
   1e256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1e25a:	4a1f      	ldr	r2, [pc, #124]	; (1e2d8 <prefix_print+0x110>)
   1e25c:	6811      	ldr	r1, [r2, #0]
   1e25e:	b331      	cbz	r1, 1e2ae <prefix_print+0xe6>
		timestamp /= timestamp_div;
   1e260:	4a1e      	ldr	r2, [pc, #120]	; (1e2dc <prefix_print+0x114>)
   1e262:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1e266:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   1e268:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1e26c:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   1e270:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   1e274:	fbb4 f2fe 	udiv	r2, r4, lr
   1e278:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   1e27c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   1e280:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1e284:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1e288:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1e28c:	fb01 441b 	mls	r4, r1, fp, r4
   1e290:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   1e294:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1e298:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   1e29c:	e9cd b101 	strd	fp, r1, [sp, #4]
   1e2a0:	fb0a e113 	mls	r1, sl, r3, lr
   1e2a4:	9100      	str	r1, [sp, #0]
   1e2a6:	490e      	ldr	r1, [pc, #56]	; (1e2e0 <prefix_print+0x118>)
   1e2a8:	f7ff ff7c 	bl	1e1a4 <print_formatted>
   1e2ac:	e7a1      	b.n	1e1f2 <prefix_print+0x2a>
		length = 0;
   1e2ae:	4608      	mov	r0, r1
   1e2b0:	e79f      	b.n	1e1f2 <prefix_print+0x2a>
	total += print_formatted(log_output,
   1e2b2:	4f08      	ldr	r7, [pc, #32]	; (1e2d4 <prefix_print+0x10c>)
   1e2b4:	e7c1      	b.n	1e23a <prefix_print+0x72>
   1e2b6:	bf00      	nop
   1e2b8:	00031853 	.word	0x00031853
   1e2bc:	00030fd8 	.word	0x00030fd8
   1e2c0:	00031878 	.word	0x00031878
   1e2c4:	00031845 	.word	0x00031845
   1e2c8:	00030fec 	.word	0x00030fec
   1e2cc:	0003187b 	.word	0x0003187b
   1e2d0:	0003184f 	.word	0x0003184f
   1e2d4:	0003184a 	.word	0x0003184a
   1e2d8:	20020014 	.word	0x20020014
   1e2dc:	20020018 	.word	0x20020018
   1e2e0:	0003185c 	.word	0x0003185c

0001e2e4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   1e2e4:	b538      	push	{r3, r4, r5, lr}
   1e2e6:	460c      	mov	r4, r1
	if (color) {
   1e2e8:	07e1      	lsls	r1, r4, #31
{
   1e2ea:	4605      	mov	r5, r0
	if (color) {
   1e2ec:	d503      	bpl.n	1e2f6 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   1e2ee:	4a08      	ldr	r2, [pc, #32]	; (1e310 <postfix_print+0x2c>)
   1e2f0:	4908      	ldr	r1, [pc, #32]	; (1e314 <postfix_print+0x30>)
   1e2f2:	f7ff ff57 	bl	1e1a4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1e2f6:	06e2      	lsls	r2, r4, #27
   1e2f8:	d408      	bmi.n	1e30c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1e2fa:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1e2fc:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1e2fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1e302:	bf4c      	ite	mi
   1e304:	4904      	ldrmi	r1, [pc, #16]	; (1e318 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1e306:	4905      	ldrpl	r1, [pc, #20]	; (1e31c <postfix_print+0x38>)
   1e308:	f7ff bf4c 	b.w	1e1a4 <print_formatted>
}
   1e30c:	bd38      	pop	{r3, r4, r5, pc}
   1e30e:	bf00      	nop
   1e310:	00031845 	.word	0x00031845
   1e314:	00031878 	.word	0x00031878
   1e318:	000323ef 	.word	0x000323ef
   1e31c:	00032c46 	.word	0x00032c46

0001e320 <hexdump_line_print>:
{
   1e320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e324:	4698      	mov	r8, r3
   1e326:	9b08      	ldr	r3, [sp, #32]
   1e328:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1e32a:	06dd      	lsls	r5, r3, #27
{
   1e32c:	460e      	mov	r6, r1
   1e32e:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1e330:	d405      	bmi.n	1e33e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1e332:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   1e334:	bf4c      	ite	mi
   1e336:	492a      	ldrmi	r1, [pc, #168]	; (1e3e0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   1e338:	492a      	ldrpl	r1, [pc, #168]	; (1e3e4 <hexdump_line_print+0xc4>)
   1e33a:	f7ff ff33 	bl	1e1a4 <print_formatted>
{
   1e33e:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   1e340:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1e3ec <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   1e344:	4545      	cmp	r5, r8
   1e346:	db2d      	blt.n	1e3a4 <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1e348:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   1e34a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1e3f0 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   1e34e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1e3f4 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   1e352:	f8df a098 	ldr.w	sl, [pc, #152]	; 1e3ec <hexdump_line_print+0xcc>
		if (i < length) {
   1e356:	42bd      	cmp	r5, r7
   1e358:	d231      	bcs.n	1e3be <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   1e35a:	5d72      	ldrb	r2, [r6, r5]
   1e35c:	4649      	mov	r1, r9
   1e35e:	4620      	mov	r0, r4
   1e360:	f7ff ff20 	bl	1e1a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1e364:	3501      	adds	r5, #1
   1e366:	2d10      	cmp	r5, #16
   1e368:	d122      	bne.n	1e3b0 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   1e36a:	491f      	ldr	r1, [pc, #124]	; (1e3e8 <hexdump_line_print+0xc8>)
   1e36c:	4620      	mov	r0, r4
   1e36e:	f7ff ff19 	bl	1e1a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1e372:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   1e374:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1e3ec <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   1e378:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1e3f8 <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   1e37c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1e3fc <hexdump_line_print+0xdc>
		if (i < length) {
   1e380:	42af      	cmp	r7, r5
   1e382:	d928      	bls.n	1e3d6 <hexdump_line_print+0xb6>
			char c = (char)data[i];
   1e384:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   1e386:	4651      	mov	r1, sl
   1e388:	f812 3009 	ldrb.w	r3, [r2, r9]
   1e38c:	4620      	mov	r0, r4
   1e38e:	f013 0f97 	tst.w	r3, #151	; 0x97
   1e392:	bf08      	it	eq
   1e394:	222e      	moveq	r2, #46	; 0x2e
   1e396:	f7ff ff05 	bl	1e1a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1e39a:	3501      	adds	r5, #1
   1e39c:	2d10      	cmp	r5, #16
   1e39e:	d113      	bne.n	1e3c8 <hexdump_line_print+0xa8>
}
   1e3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   1e3a4:	4649      	mov	r1, r9
   1e3a6:	4620      	mov	r0, r4
   1e3a8:	f7ff fefc 	bl	1e1a4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1e3ac:	3501      	adds	r5, #1
   1e3ae:	e7c9      	b.n	1e344 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   1e3b0:	076a      	lsls	r2, r5, #29
   1e3b2:	d1d0      	bne.n	1e356 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   1e3b4:	4651      	mov	r1, sl
   1e3b6:	4620      	mov	r0, r4
   1e3b8:	f7ff fef4 	bl	1e1a4 <print_formatted>
   1e3bc:	e7cb      	b.n	1e356 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   1e3be:	4641      	mov	r1, r8
   1e3c0:	4620      	mov	r0, r4
   1e3c2:	f7ff feef 	bl	1e1a4 <print_formatted>
   1e3c6:	e7cd      	b.n	1e364 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   1e3c8:	076b      	lsls	r3, r5, #29
   1e3ca:	d1d9      	bne.n	1e380 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   1e3cc:	4641      	mov	r1, r8
   1e3ce:	4620      	mov	r0, r4
   1e3d0:	f7ff fee8 	bl	1e1a4 <print_formatted>
   1e3d4:	e7d4      	b.n	1e380 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   1e3d6:	4641      	mov	r1, r8
   1e3d8:	4620      	mov	r0, r4
   1e3da:	f7ff fee3 	bl	1e1a4 <print_formatted>
   1e3de:	e7dc      	b.n	1e39a <hexdump_line_print+0x7a>
   1e3e0:	000323ef 	.word	0x000323ef
   1e3e4:	00032c46 	.word	0x00032c46
   1e3e8:	000317fe 	.word	0x000317fe
   1e3ec:	000317fc 	.word	0x000317fc
   1e3f0:	000317fa 	.word	0x000317fa
   1e3f4:	000317f4 	.word	0x000317f4
   1e3f8:	00033478 	.word	0x00033478
   1e3fc:	00031800 	.word	0x00031800

0001e400 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   1e400:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   1e404:	f011 0407 	ands.w	r4, r1, #7
{
   1e408:	4606      	mov	r6, r0
   1e40a:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   1e40e:	461d      	mov	r5, r3
	if (!raw_string) {
   1e410:	d00b      	beq.n	1e42a <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   1e412:	f3c1 1389 	ubfx	r3, r1, #6, #10
   1e416:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1e41a:	9302      	str	r3, [sp, #8]
   1e41c:	e9cd 4100 	strd	r4, r1, [sp]
   1e420:	4613      	mov	r3, r2
   1e422:	4639      	mov	r1, r7
   1e424:	2201      	movs	r2, #1
   1e426:	f7ff fecf 	bl	1e1c8 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   1e42a:	4643      	mov	r3, r8
   1e42c:	462a      	mov	r2, r5
   1e42e:	4631      	mov	r1, r6
   1e430:	480d      	ldr	r0, [pc, #52]	; (1e468 <log_output_string+0x68>)
   1e432:	f010 fb60 	bl	2eaf6 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   1e436:	b98c      	cbnz	r4, 1e45c <log_output_string+0x5c>
   1e438:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   1e43a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   1e43e:	b95b      	cbnz	r3, 1e458 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   1e440:	2c0a      	cmp	r4, #10
   1e442:	d103      	bne.n	1e44c <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   1e444:	4909      	ldr	r1, [pc, #36]	; (1e46c <log_output_string+0x6c>)
   1e446:	4630      	mov	r0, r6
   1e448:	f7ff feac 	bl	1e1a4 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   1e44c:	4630      	mov	r0, r6
}
   1e44e:	b004      	add	sp, #16
   1e450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   1e454:	f010 bd42 	b.w	2eedc <log_output_flush>
	while (*fmt != '\0') {
   1e458:	461c      	mov	r4, r3
   1e45a:	e7ee      	b.n	1e43a <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   1e45c:	4622      	mov	r2, r4
   1e45e:	4639      	mov	r1, r7
   1e460:	4630      	mov	r0, r6
   1e462:	f7ff ff3f 	bl	1e2e4 <postfix_print>
   1e466:	e7f1      	b.n	1e44c <log_output_string+0x4c>
   1e468:	0002eeab 	.word	0x0002eeab
   1e46c:	00031843 	.word	0x00031843

0001e470 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   1e470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e474:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1e476:	4698      	mov	r8, r3
   1e478:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1e47c:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   1e480:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1e484:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1e488:	9302      	str	r3, [sp, #8]
   1e48a:	e9cd 9100 	strd	r9, r1, [sp]
   1e48e:	4613      	mov	r3, r2
   1e490:	4631      	mov	r1, r6
   1e492:	2201      	movs	r2, #1
{
   1e494:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1e496:	f7ff fe97 	bl	1e1c8 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   1e49a:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1e49c:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   1e49e:	4910      	ldr	r1, [pc, #64]	; (1e4e0 <log_output_hexdump+0x70>)
   1e4a0:	4620      	mov	r0, r4
   1e4a2:	f7ff fe7f 	bl	1e1a4 <print_formatted>

	while (length) {
   1e4a6:	b955      	cbnz	r5, 1e4be <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   1e4a8:	4620      	mov	r0, r4
   1e4aa:	464a      	mov	r2, r9
   1e4ac:	4631      	mov	r1, r6
   1e4ae:	f7ff ff19 	bl	1e2e4 <postfix_print>
	log_output_flush(log_output);
   1e4b2:	4620      	mov	r0, r4
}
   1e4b4:	b004      	add	sp, #16
   1e4b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   1e4ba:	f010 bd0f 	b.w	2eedc <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   1e4be:	2d10      	cmp	r5, #16
   1e4c0:	46a8      	mov	r8, r5
   1e4c2:	bf28      	it	cs
   1e4c4:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   1e4c8:	4639      	mov	r1, r7
   1e4ca:	9600      	str	r6, [sp, #0]
   1e4cc:	4653      	mov	r3, sl
   1e4ce:	4642      	mov	r2, r8
   1e4d0:	4620      	mov	r0, r4
   1e4d2:	f7ff ff25 	bl	1e320 <hexdump_line_print>
		data += part_len;
   1e4d6:	4447      	add	r7, r8
		length -= part_len;
   1e4d8:	eba5 0508 	sub.w	r5, r5, r8
   1e4dc:	e7e3      	b.n	1e4a6 <log_output_hexdump+0x36>
   1e4de:	bf00      	nop
   1e4e0:	00031878 	.word	0x00031878

0001e4e4 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   1e4e4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1e4e6:	2100      	movs	r1, #0
	timestamp_div = 1U;
   1e4e8:	4a07      	ldr	r2, [pc, #28]	; (1e508 <log_output_timestamp_freq_set+0x24>)
{
   1e4ea:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   1e4ec:	4c07      	ldr	r4, [pc, #28]	; (1e50c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1e4ee:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1e4f0:	42a0      	cmp	r0, r4
   1e4f2:	d804      	bhi.n	1e4fe <log_output_timestamp_freq_set+0x1a>
   1e4f4:	b101      	cbz	r1, 1e4f8 <log_output_timestamp_freq_set+0x14>
   1e4f6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1e4f8:	4b05      	ldr	r3, [pc, #20]	; (1e510 <log_output_timestamp_freq_set+0x2c>)
   1e4fa:	6018      	str	r0, [r3, #0]
}
   1e4fc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   1e4fe:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1e500:	005b      	lsls	r3, r3, #1
   1e502:	2101      	movs	r1, #1
   1e504:	e7f4      	b.n	1e4f0 <log_output_timestamp_freq_set+0xc>
   1e506:	bf00      	nop
   1e508:	20020018 	.word	0x20020018
   1e50c:	000f4240 	.word	0x000f4240
   1e510:	20020014 	.word	0x20020014

0001e514 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   1e514:	2201      	movs	r2, #1
   1e516:	4b01      	ldr	r3, [pc, #4]	; (1e51c <log_backend_rtt_init+0x8>)
   1e518:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   1e51a:	4770      	bx	lr
   1e51c:	200214ff 	.word	0x200214ff

0001e520 <panic>:

static void panic(struct log_backend const *const backend)
{
   1e520:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   1e522:	4803      	ldr	r0, [pc, #12]	; (1e530 <panic+0x10>)
   1e524:	f010 fcda 	bl	2eedc <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
   1e528:	2201      	movs	r2, #1
   1e52a:	4b02      	ldr	r3, [pc, #8]	; (1e534 <panic+0x14>)
   1e52c:	701a      	strb	r2, [r3, #0]
}
   1e52e:	bd08      	pop	{r3, pc}
   1e530:	00031018 	.word	0x00031018
   1e534:	20021500 	.word	0x20021500

0001e538 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   1e538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   1e53a:	200a      	movs	r0, #10
   1e53c:	9002      	str	r0, [sp, #8]
   1e53e:	9807      	ldr	r0, [sp, #28]
   1e540:	9001      	str	r0, [sp, #4]
   1e542:	9806      	ldr	r0, [sp, #24]
   1e544:	9000      	str	r0, [sp, #0]
   1e546:	4803      	ldr	r0, [pc, #12]	; (1e554 <sync_hexdump+0x1c>)
   1e548:	f7ff ff92 	bl	1e470 <log_output_hexdump>
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
   1e54c:	b005      	add	sp, #20
   1e54e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e552:	bf00      	nop
   1e554:	00031018 	.word	0x00031018

0001e558 <sync_string>:
{
   1e558:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   1e55a:	200a      	movs	r0, #10
   1e55c:	9001      	str	r0, [sp, #4]
   1e55e:	9804      	ldr	r0, [sp, #16]
   1e560:	9000      	str	r0, [sp, #0]
   1e562:	4803      	ldr	r0, [pc, #12]	; (1e570 <sync_string+0x18>)
   1e564:	f7ff ff4c 	bl	1e400 <log_output_string>
}
   1e568:	b003      	add	sp, #12
   1e56a:	f85d fb04 	ldr.w	pc, [sp], #4
   1e56e:	bf00      	nop
   1e570:	00031018 	.word	0x00031018

0001e574 <data_out_drop_mode>:
{
   1e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e576:	4607      	mov	r7, r0
   1e578:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
   1e57a:	240a      	movs	r4, #10
   1e57c:	4d17      	ldr	r5, [pc, #92]	; (1e5dc <data_out_drop_mode+0x68>)
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1e57e:	4632      	mov	r2, r6
   1e580:	4639      	mov	r1, r7
   1e582:	2000      	movs	r0, #0
   1e584:	f000 fbbe 	bl	1ed04 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
   1e588:	b1c8      	cbz	r0, 1e5be <data_out_drop_mode+0x4a>
	host_present = true;
   1e58a:	2301      	movs	r3, #1
   1e58c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
   1e58e:	4b14      	ldr	r3, [pc, #80]	; (1e5e0 <data_out_drop_mode+0x6c>)
	if (is_panic_mode()) {
   1e590:	781b      	ldrb	r3, [r3, #0]
   1e592:	b92b      	cbnz	r3, 1e5a0 <data_out_drop_mode+0x2c>
}
   1e594:	4630      	mov	r0, r6
   1e596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
   1e598:	b95c      	cbnz	r4, 1e5b2 <data_out_drop_mode+0x3e>
		host_present = false;
   1e59a:	702c      	strb	r4, [r5, #0]
   1e59c:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   1e5a0:	2000      	movs	r0, #0
   1e5a2:	f000 fbfb 	bl	1ed9c <SEGGER_RTT_HasDataUp>
   1e5a6:	2800      	cmp	r0, #0
   1e5a8:	d0f4      	beq.n	1e594 <data_out_drop_mode+0x20>
   1e5aa:	782b      	ldrb	r3, [r5, #0]
   1e5ac:	2b00      	cmp	r3, #0
   1e5ae:	d1f3      	bne.n	1e598 <data_out_drop_mode+0x24>
   1e5b0:	e7f0      	b.n	1e594 <data_out_drop_mode+0x20>
			on_failed_write(retry_cnt--);
   1e5b2:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
   1e5b4:	f242 7010 	movw	r0, #10000	; 0x2710
   1e5b8:	f011 fb8d 	bl	2fcd6 <z_impl_k_busy_wait>
   1e5bc:	e7f0      	b.n	1e5a0 <data_out_drop_mode+0x2c>
		} else if (host_present) {
   1e5be:	782b      	ldrb	r3, [r5, #0]
   1e5c0:	b113      	cbz	r3, 1e5c8 <data_out_drop_mode+0x54>
	if (retry_cnt == 0) {
   1e5c2:	3c01      	subs	r4, #1
   1e5c4:	d104      	bne.n	1e5d0 <data_out_drop_mode+0x5c>
		host_present = false;
   1e5c6:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   1e5c8:	782b      	ldrb	r3, [r5, #0]
   1e5ca:	2b00      	cmp	r3, #0
   1e5cc:	d1d7      	bne.n	1e57e <data_out_drop_mode+0xa>
   1e5ce:	e7e1      	b.n	1e594 <data_out_drop_mode+0x20>
   1e5d0:	f242 7010 	movw	r0, #10000	; 0x2710
   1e5d4:	f011 fb7f 	bl	2fcd6 <z_impl_k_busy_wait>
   1e5d8:	e7f6      	b.n	1e5c8 <data_out_drop_mode+0x54>
   1e5da:	bf00      	nop
   1e5dc:	200214ff 	.word	0x200214ff
   1e5e0:	20021500 	.word	0x20021500

0001e5e4 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   1e5e4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1e5e6:	4605      	mov	r5, r0
   1e5e8:	b948      	cbnz	r0, 1e5fe <socket_offload_register+0x1a>
   1e5ea:	490c      	ldr	r1, [pc, #48]	; (1e61c <socket_offload_register+0x38>)
   1e5ec:	480c      	ldr	r0, [pc, #48]	; (1e620 <socket_offload_register+0x3c>)
   1e5ee:	2311      	movs	r3, #17
   1e5f0:	4a0c      	ldr	r2, [pc, #48]	; (1e624 <socket_offload_register+0x40>)
   1e5f2:	f010 fbf0 	bl	2edd6 <printk>
   1e5f6:	2111      	movs	r1, #17
   1e5f8:	480a      	ldr	r0, [pc, #40]	; (1e624 <socket_offload_register+0x40>)
   1e5fa:	f010 fc32 	bl	2ee62 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   1e5fe:	4c0a      	ldr	r4, [pc, #40]	; (1e628 <socket_offload_register+0x44>)
   1e600:	6822      	ldr	r2, [r4, #0]
   1e602:	b14a      	cbz	r2, 1e618 <socket_offload_register+0x34>
   1e604:	4909      	ldr	r1, [pc, #36]	; (1e62c <socket_offload_register+0x48>)
   1e606:	4806      	ldr	r0, [pc, #24]	; (1e620 <socket_offload_register+0x3c>)
   1e608:	2312      	movs	r3, #18
   1e60a:	4a06      	ldr	r2, [pc, #24]	; (1e624 <socket_offload_register+0x40>)
   1e60c:	f010 fbe3 	bl	2edd6 <printk>
   1e610:	2112      	movs	r1, #18
   1e612:	4804      	ldr	r0, [pc, #16]	; (1e624 <socket_offload_register+0x40>)
   1e614:	f010 fc25 	bl	2ee62 <assert_post_action>

	socket_ops = ops;
   1e618:	6025      	str	r5, [r4, #0]
}
   1e61a:	bd38      	pop	{r3, r4, r5, pc}
   1e61c:	00032759 	.word	0x00032759
   1e620:	000316d1 	.word	0x000316d1
   1e624:	000318c2 	.word	0x000318c2
   1e628:	20020030 	.word	0x20020030
   1e62c:	000318fd 	.word	0x000318fd

0001e630 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   1e630:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1e632:	2200      	movs	r2, #0
{
   1e634:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1e636:	2101      	movs	r1, #1
   1e638:	2005      	movs	r0, #5
   1e63a:	f000 fc9d 	bl	1ef78 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   1e63e:	2005      	movs	r0, #5
   1e640:	f000 fc8a 	bl	1ef58 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e644:	2202      	movs	r2, #2
   1e646:	4b07      	ldr	r3, [pc, #28]	; (1e664 <clk_init+0x34>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1e648:	2000      	movs	r0, #0
   1e64a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   1e64e:	2203      	movs	r2, #3
   1e650:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1e654:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   1e656:	e9c3 0000 	strd	r0, r0, [r3]
   1e65a:	68a3      	ldr	r3, [r4, #8]
   1e65c:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   1e660:	bd10      	pop	{r4, pc}
   1e662:	bf00      	nop
   1e664:	40005000 	.word	0x40005000

0001e668 <get_status>:
{
   1e668:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e66a:	b2cc      	uxtb	r4, r1
   1e66c:	2c01      	cmp	r4, #1
{
   1e66e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e670:	d909      	bls.n	1e686 <get_status+0x1e>
   1e672:	490b      	ldr	r1, [pc, #44]	; (1e6a0 <get_status+0x38>)
   1e674:	480b      	ldr	r0, [pc, #44]	; (1e6a4 <get_status+0x3c>)
   1e676:	2384      	movs	r3, #132	; 0x84
   1e678:	4a0b      	ldr	r2, [pc, #44]	; (1e6a8 <get_status+0x40>)
   1e67a:	f010 fbac 	bl	2edd6 <printk>
   1e67e:	2184      	movs	r1, #132	; 0x84
   1e680:	4809      	ldr	r0, [pc, #36]	; (1e6a8 <get_status+0x40>)
   1e682:	f010 fbee 	bl	2ee62 <assert_post_action>
	if (data->started) {
   1e686:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
   1e688:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
   1e68a:	fb04 3101 	mla	r1, r4, r1, r3
   1e68e:	7a4b      	ldrb	r3, [r1, #9]
   1e690:	b923      	cbnz	r3, 1e69c <get_status+0x34>
	if (data->ref > 0) {
   1e692:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1e694:	fab0 f080 	clz	r0, r0
   1e698:	0940      	lsrs	r0, r0, #5
}
   1e69a:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
   1e69c:	2002      	movs	r0, #2
   1e69e:	e7fc      	b.n	1e69a <get_status+0x32>
   1e6a0:	000319b8 	.word	0x000319b8
   1e6a4:	000316d1 	.word	0x000316d1
   1e6a8:	0003197d 	.word	0x0003197d

0001e6ac <clock_async_start>:
{
   1e6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1e6b0:	b2ce      	uxtb	r6, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e6b2:	2e01      	cmp	r6, #1
{
   1e6b4:	4607      	mov	r7, r0
   1e6b6:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e6b8:	d909      	bls.n	1e6ce <clock_async_start+0x22>
   1e6ba:	4949      	ldr	r1, [pc, #292]	; (1e7e0 <clock_async_start+0x134>)
   1e6bc:	4849      	ldr	r0, [pc, #292]	; (1e7e4 <clock_async_start+0x138>)
   1e6be:	23fd      	movs	r3, #253	; 0xfd
   1e6c0:	4a49      	ldr	r2, [pc, #292]	; (1e7e8 <clock_async_start+0x13c>)
   1e6c2:	f010 fb88 	bl	2edd6 <printk>
   1e6c6:	21fd      	movs	r1, #253	; 0xfd
   1e6c8:	4847      	ldr	r0, [pc, #284]	; (1e7e8 <clock_async_start+0x13c>)
   1e6ca:	f010 fbca 	bl	2ee62 <assert_post_action>
	const struct nrf_clock_control_config *config =
   1e6ce:	683b      	ldr	r3, [r7, #0]
	clk_data = get_sub_data(dev, type);
   1e6d0:	f8d7 8008 	ldr.w	r8, [r7, #8]
	const struct nrf_clock_control_config *config =
   1e6d4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   1e6d8:	2c00      	cmp	r4, #0
   1e6da:	d157      	bne.n	1e78c <clock_async_start+0xe0>
	__asm__ volatile(
   1e6dc:	f04f 0320 	mov.w	r3, #32
   1e6e0:	f3ef 8a11 	mrs	sl, BASEPRI
   1e6e4:	f383 8811 	msr	BASEPRI, r3
   1e6e8:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1e6ec:	230c      	movs	r3, #12
   1e6ee:	fb03 8306 	mla	r3, r3, r6, r8
   1e6f2:	7a1d      	ldrb	r5, [r3, #8]
   1e6f4:	3501      	adds	r5, #1
   1e6f6:	b2ed      	uxtb	r5, r5
   1e6f8:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
   1e6fa:	b95d      	cbnz	r5, 1e714 <clock_async_start+0x68>
   1e6fc:	493b      	ldr	r1, [pc, #236]	; (1e7ec <clock_async_start+0x140>)
   1e6fe:	4839      	ldr	r0, [pc, #228]	; (1e7e4 <clock_async_start+0x138>)
   1e700:	f44f 7387 	mov.w	r3, #270	; 0x10e
   1e704:	4a38      	ldr	r2, [pc, #224]	; (1e7e8 <clock_async_start+0x13c>)
   1e706:	f010 fb66 	bl	2edd6 <printk>
   1e70a:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1e70e:	4836      	ldr	r0, [pc, #216]	; (1e7e8 <clock_async_start+0x13c>)
   1e710:	f010 fba7 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   1e714:	f38a 8811 	msr	BASEPRI, sl
   1e718:	f3bf 8f6f 	isb	sy
	if (data) {
   1e71c:	b32c      	cbz	r4, 1e76a <clock_async_start+0xbe>
    p_reg->INTENCLR = mask;
   1e71e:	2203      	movs	r2, #3
   1e720:	4b33      	ldr	r3, [pc, #204]	; (1e7f0 <clock_async_start+0x144>)
   1e722:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
   1e726:	220c      	movs	r2, #12
   1e728:	4372      	muls	r2, r6
   1e72a:	eb08 0302 	add.w	r3, r8, r2
   1e72e:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
   1e730:	b991      	cbnz	r1, 1e758 <clock_async_start+0xac>
	__asm__ volatile(
   1e732:	f04f 0020 	mov.w	r0, #32
   1e736:	f3ef 8c11 	mrs	ip, BASEPRI
   1e73a:	f380 8811 	msr	BASEPRI, r0
   1e73e:	f3bf 8f6f 	isb	sy
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
   1e742:	6021      	str	r1, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1e744:	6858      	ldr	r0, [r3, #4]
   1e746:	2800      	cmp	r0, #0
   1e748:	d13a      	bne.n	1e7c0 <clock_async_start+0x114>
	list->tail = node;
   1e74a:	605c      	str	r4, [r3, #4]
	list->head = node;
   1e74c:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
   1e750:	f38c 8811 	msr	BASEPRI, ip
   1e754:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   1e758:	2203      	movs	r2, #3
   1e75a:	4b25      	ldr	r3, [pc, #148]	; (1e7f0 <clock_async_start+0x144>)
   1e75c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
   1e760:	b119      	cbz	r1, 1e76a <clock_async_start+0xbe>
			data->cb(dev, data->user_data);
   1e762:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1e766:	4638      	mov	r0, r7
   1e768:	4798      	blx	r3
	if (ref == 1) {
   1e76a:	2d01      	cmp	r5, #1
   1e76c:	d10c      	bne.n	1e788 <clock_async_start+0xdc>
		do_start =  (config->start_handler) ?
   1e76e:	0135      	lsls	r5, r6, #4
   1e770:	f859 3005 	ldr.w	r3, [r9, r5]
				config->start_handler(dev) : true;
   1e774:	bb3b      	cbnz	r3, 1e7c6 <clock_async_start+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e776:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK,
   1e778:	44a9      	add	r9, r5
   1e77a:	f899 300a 	ldrb.w	r3, [r9, #10]
   1e77e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e782:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1e786:	601a      	str	r2, [r3, #0]
	return 0;
   1e788:	2000      	movs	r0, #0
   1e78a:	e027      	b.n	1e7dc <clock_async_start+0x130>
	__ASSERT_NO_MSG((data == NULL) ||
   1e78c:	6863      	ldr	r3, [r4, #4]
   1e78e:	b95b      	cbnz	r3, 1e7a8 <clock_async_start+0xfc>
   1e790:	4918      	ldr	r1, [pc, #96]	; (1e7f4 <clock_async_start+0x148>)
   1e792:	4814      	ldr	r0, [pc, #80]	; (1e7e4 <clock_async_start+0x138>)
   1e794:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e798:	4a13      	ldr	r2, [pc, #76]	; (1e7e8 <clock_async_start+0x13c>)
   1e79a:	f010 fb1c 	bl	2edd6 <printk>
   1e79e:	f44f 7181 	mov.w	r1, #258	; 0x102
   1e7a2:	4811      	ldr	r0, [pc, #68]	; (1e7e8 <clock_async_start+0x13c>)
   1e7a4:	f010 fb5d 	bl	2ee62 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
   1e7a8:	230c      	movs	r3, #12
   1e7aa:	4373      	muls	r3, r6
   1e7ac:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
   1e7b0:	429c      	cmp	r4, r3
   1e7b2:	d011      	beq.n	1e7d8 <clock_async_start+0x12c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e7b4:	2b00      	cmp	r3, #0
   1e7b6:	d091      	beq.n	1e6dc <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e7b8:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1e7ba:	2b00      	cmp	r3, #0
   1e7bc:	d1f8      	bne.n	1e7b0 <clock_async_start+0x104>
   1e7be:	e78d      	b.n	1e6dc <clock_async_start+0x30>
	parent->next = child;
   1e7c0:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1e7c2:	605c      	str	r4, [r3, #4]
   1e7c4:	e7c4      	b.n	1e750 <clock_async_start+0xa4>
				config->start_handler(dev) : true;
   1e7c6:	4638      	mov	r0, r7
   1e7c8:	4798      	blx	r3
   1e7ca:	2800      	cmp	r0, #0
   1e7cc:	d1d3      	bne.n	1e776 <clock_async_start+0xca>
			clkstarted_handle(dev, type);
   1e7ce:	4631      	mov	r1, r6
   1e7d0:	4638      	mov	r0, r7
   1e7d2:	f010 fb90 	bl	2eef6 <clkstarted_handle>
   1e7d6:	e7d7      	b.n	1e788 <clock_async_start+0xdc>
		return -EBUSY;
   1e7d8:	f06f 000f 	mvn.w	r0, #15
}
   1e7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e7e0:	000319b8 	.word	0x000319b8
   1e7e4:	000316d1 	.word	0x000316d1
   1e7e8:	0003197d 	.word	0x0003197d
   1e7ec:	0003196b 	.word	0x0003196b
   1e7f0:	40005000 	.word	0x40005000
   1e7f4:	0003191d 	.word	0x0003191d

0001e7f8 <clock_stop>:
{
   1e7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e7fc:	b2cd      	uxtb	r5, r1
   1e7fe:	2d01      	cmp	r5, #1
{
   1e800:	4680      	mov	r8, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e802:	d909      	bls.n	1e818 <clock_stop+0x20>
   1e804:	4925      	ldr	r1, [pc, #148]	; (1e89c <clock_stop+0xa4>)
   1e806:	4826      	ldr	r0, [pc, #152]	; (1e8a0 <clock_stop+0xa8>)
   1e808:	2399      	movs	r3, #153	; 0x99
   1e80a:	4a26      	ldr	r2, [pc, #152]	; (1e8a4 <clock_stop+0xac>)
   1e80c:	f010 fae3 	bl	2edd6 <printk>
   1e810:	2199      	movs	r1, #153	; 0x99
   1e812:	4824      	ldr	r0, [pc, #144]	; (1e8a4 <clock_stop+0xac>)
   1e814:	f010 fb25 	bl	2ee62 <assert_post_action>
	const struct nrf_clock_control_config *config =
   1e818:	f8d8 3000 	ldr.w	r3, [r8]
	data = get_sub_data(dev, type);
   1e81c:	f8d8 7008 	ldr.w	r7, [r8, #8]
	const struct nrf_clock_control_config *config =
   1e820:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__asm__ volatile(
   1e824:	f04f 0320 	mov.w	r3, #32
   1e828:	f3ef 8611 	mrs	r6, BASEPRI
   1e82c:	f383 8811 	msr	BASEPRI, r3
   1e830:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1e834:	220c      	movs	r2, #12
   1e836:	436a      	muls	r2, r5
   1e838:	18b9      	adds	r1, r7, r2
   1e83a:	7a0b      	ldrb	r3, [r1, #8]
   1e83c:	b34b      	cbz	r3, 1e892 <clock_stop+0x9a>
	data->ref--;
   1e83e:	3b01      	subs	r3, #1
   1e840:	b2db      	uxtb	r3, r3
   1e842:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   1e844:	bb43      	cbnz	r3, 1e898 <clock_stop+0xa0>
		do_stop =  (config->stop_handler) ?
   1e846:	012c      	lsls	r4, r5, #4
	list->head = NULL;
   1e848:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   1e84a:	604b      	str	r3, [r1, #4]
   1e84c:	eb09 0304 	add.w	r3, r9, r4
   1e850:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   1e852:	b9cb      	cbnz	r3, 1e888 <clock_stop+0x90>
   1e854:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1e856:	444c      	add	r4, r9
   1e858:	7ae3      	ldrb	r3, [r4, #11]
   1e85a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e85e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1e862:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e864:	2200      	movs	r2, #0
   1e866:	8923      	ldrh	r3, [r4, #8]
   1e868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e86c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1e870:	601a      	str	r2, [r3, #0]
		data->started = false;
   1e872:	230c      	movs	r3, #12
   1e874:	2000      	movs	r0, #0
   1e876:	fb05 7503 	mla	r5, r5, r3, r7
   1e87a:	7268      	strb	r0, [r5, #9]
	__asm__ volatile(
   1e87c:	f386 8811 	msr	BASEPRI, r6
   1e880:	f3bf 8f6f 	isb	sy
}
   1e884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config->stop_handler(dev) : true;
   1e888:	4640      	mov	r0, r8
   1e88a:	4798      	blx	r3
   1e88c:	2800      	cmp	r0, #0
   1e88e:	d1e1      	bne.n	1e854 <clock_stop+0x5c>
   1e890:	e7ef      	b.n	1e872 <clock_stop+0x7a>
		err = -EALREADY;
   1e892:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e896:	e7f1      	b.n	1e87c <clock_stop+0x84>
	int err = 0;
   1e898:	2000      	movs	r0, #0
   1e89a:	e7ef      	b.n	1e87c <clock_stop+0x84>
   1e89c:	000319b8 	.word	0x000319b8
   1e8a0:	000316d1 	.word	0x000316d1
   1e8a4:	0003197d 	.word	0x0003197d

0001e8a8 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   1e8a8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e8aa:	4b10      	ldr	r3, [pc, #64]	; (1e8ec <nrf_power_clock_isr+0x44>)
   1e8ac:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1e8ae:	b162      	cbz	r2, 1e8ca <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   1e8b0:	4a0f      	ldr	r2, [pc, #60]	; (1e8f0 <nrf_power_clock_isr+0x48>)
   1e8b2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1e8b6:	07d1      	lsls	r1, r2, #31
   1e8b8:	d507      	bpl.n	1e8ca <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e8ba:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1e8bc:	480d      	ldr	r0, [pc, #52]	; (1e8f4 <nrf_power_clock_isr+0x4c>)
   1e8be:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1e8c0:	6883      	ldr	r3, [r0, #8]
   1e8c2:	7a59      	ldrb	r1, [r3, #9]
   1e8c4:	b909      	cbnz	r1, 1e8ca <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1e8c6:	f010 fb16 	bl	2eef6 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e8ca:	4b0b      	ldr	r3, [pc, #44]	; (1e8f8 <nrf_power_clock_isr+0x50>)
   1e8cc:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1e8ce:	b162      	cbz	r2, 1e8ea <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
   1e8d0:	4a07      	ldr	r2, [pc, #28]	; (1e8f0 <nrf_power_clock_isr+0x48>)
   1e8d2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1e8d6:	0792      	lsls	r2, r2, #30
   1e8d8:	d507      	bpl.n	1e8ea <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e8da:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1e8dc:	2101      	movs	r1, #1
   1e8de:	601a      	str	r2, [r3, #0]
   1e8e0:	4804      	ldr	r0, [pc, #16]	; (1e8f4 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   1e8e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1e8e6:	f010 bb06 	b.w	2eef6 <clkstarted_handle>
}
   1e8ea:	bd08      	pop	{r3, pc}
   1e8ec:	40005100 	.word	0x40005100
   1e8f0:	40005000 	.word	0x40005000
   1e8f4:	20026968 	.word	0x20026968
   1e8f8:	40005104 	.word	0x40005104

0001e8fc <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   1e8fc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1e8fe:	4c06      	ldr	r4, [pc, #24]	; (1e918 <z_clock_isr+0x1c>)
   1e900:	4906      	ldr	r1, [pc, #24]	; (1e91c <z_clock_isr+0x20>)
   1e902:	4622      	mov	r2, r4
   1e904:	4806      	ldr	r0, [pc, #24]	; (1e920 <z_clock_isr+0x24>)
   1e906:	2317      	movs	r3, #23
   1e908:	f010 fa65 	bl	2edd6 <printk>
   1e90c:	4620      	mov	r0, r4
}
   1e90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1e912:	2117      	movs	r1, #23
   1e914:	f010 baa5 	b.w	2ee62 <assert_post_action>
   1e918:	00031a06 	.word	0x00031a06
   1e91c:	00033029 	.word	0x00033029
   1e920:	000316d1 	.word	0x000316d1

0001e924 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   1e924:	2200      	movs	r2, #0
{
   1e926:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   1e928:	4b22      	ldr	r3, [pc, #136]	; (1e9b4 <rtc1_nrf_isr+0x90>)
   1e92a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   1e92e:	f04f 0320 	mov.w	r3, #32
   1e932:	f3ef 8511 	mrs	r5, BASEPRI
   1e936:	f383 8811 	msr	BASEPRI, r3
   1e93a:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e93e:	481e      	ldr	r0, [pc, #120]	; (1e9b8 <rtc1_nrf_isr+0x94>)
   1e940:	f00d fd12 	bl	2c368 <z_spin_lock_valid>
   1e944:	b968      	cbnz	r0, 1e962 <rtc1_nrf_isr+0x3e>
   1e946:	234a      	movs	r3, #74	; 0x4a
   1e948:	4a1c      	ldr	r2, [pc, #112]	; (1e9bc <rtc1_nrf_isr+0x98>)
   1e94a:	491d      	ldr	r1, [pc, #116]	; (1e9c0 <rtc1_nrf_isr+0x9c>)
   1e94c:	481d      	ldr	r0, [pc, #116]	; (1e9c4 <rtc1_nrf_isr+0xa0>)
   1e94e:	f010 fa42 	bl	2edd6 <printk>
   1e952:	4919      	ldr	r1, [pc, #100]	; (1e9b8 <rtc1_nrf_isr+0x94>)
   1e954:	481c      	ldr	r0, [pc, #112]	; (1e9c8 <rtc1_nrf_isr+0xa4>)
   1e956:	f010 fa3e 	bl	2edd6 <printk>
   1e95a:	214a      	movs	r1, #74	; 0x4a
   1e95c:	4817      	ldr	r0, [pc, #92]	; (1e9bc <rtc1_nrf_isr+0x98>)
   1e95e:	f010 fa80 	bl	2ee62 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1e962:	4815      	ldr	r0, [pc, #84]	; (1e9b8 <rtc1_nrf_isr+0x94>)
   1e964:	f00d fd1e 	bl	2c3a4 <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1e968:	4b12      	ldr	r3, [pc, #72]	; (1e9b4 <rtc1_nrf_isr+0x90>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1e96a:	4a18      	ldr	r2, [pc, #96]	; (1e9cc <rtc1_nrf_isr+0xa8>)
   1e96c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   1e970:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e972:	4811      	ldr	r0, [pc, #68]	; (1e9b8 <rtc1_nrf_isr+0x94>)
	return (a - b) & COUNTER_MAX;
   1e974:	1ae4      	subs	r4, r4, r3
   1e976:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1e97a:	4423      	add	r3, r4
   1e97c:	6013      	str	r3, [r2, #0]
   1e97e:	f00d fd01 	bl	2c384 <z_spin_unlock_valid>
   1e982:	b968      	cbnz	r0, 1e9a0 <rtc1_nrf_isr+0x7c>
   1e984:	235d      	movs	r3, #93	; 0x5d
   1e986:	4a0d      	ldr	r2, [pc, #52]	; (1e9bc <rtc1_nrf_isr+0x98>)
   1e988:	4911      	ldr	r1, [pc, #68]	; (1e9d0 <rtc1_nrf_isr+0xac>)
   1e98a:	480e      	ldr	r0, [pc, #56]	; (1e9c4 <rtc1_nrf_isr+0xa0>)
   1e98c:	f010 fa23 	bl	2edd6 <printk>
   1e990:	4909      	ldr	r1, [pc, #36]	; (1e9b8 <rtc1_nrf_isr+0x94>)
   1e992:	4810      	ldr	r0, [pc, #64]	; (1e9d4 <rtc1_nrf_isr+0xb0>)
   1e994:	f010 fa1f 	bl	2edd6 <printk>
   1e998:	215d      	movs	r1, #93	; 0x5d
   1e99a:	4808      	ldr	r0, [pc, #32]	; (1e9bc <rtc1_nrf_isr+0x98>)
   1e99c:	f010 fa61 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   1e9a0:	f385 8811 	msr	BASEPRI, r5
   1e9a4:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   1e9a8:	4620      	mov	r0, r4
}
   1e9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   1e9ae:	f00e b875 	b.w	2ca9c <z_clock_announce>
   1e9b2:	bf00      	nop
   1e9b4:	40015000 	.word	0x40015000
   1e9b8:	20020050 	.word	0x20020050
   1e9bc:	00031a38 	.word	0x00031a38
   1e9c0:	00031a5e 	.word	0x00031a5e
   1e9c4:	000316d1 	.word	0x000316d1
   1e9c8:	00031a73 	.word	0x00031a73
   1e9cc:	2002004c 	.word	0x2002004c
   1e9d0:	00031a8b 	.word	0x00031a8b
   1e9d4:	00031aa2 	.word	0x00031aa2

0001e9d8 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   1e9d8:	b570      	push	{r4, r5, r6, lr}
   1e9da:	4815      	ldr	r0, [pc, #84]	; (1ea30 <z_clock_driver_init+0x58>)
   1e9dc:	f00b fad0 	bl	29f80 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
   1e9e0:	b310      	cbz	r0, 1ea28 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   1e9e2:	6843      	ldr	r3, [r0, #4]
   1e9e4:	2101      	movs	r1, #1
   1e9e6:	681b      	ldr	r3, [r3, #0]
   1e9e8:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1e9ea:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   1e9ec:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
   1e9ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e9f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   1e9f6:	4d0f      	ldr	r5, [pc, #60]	; (1ea34 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   1e9f8:	4631      	mov	r1, r6
   1e9fa:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   1e9fe:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   1ea02:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ea06:	4b0c      	ldr	r3, [pc, #48]	; (1ea38 <z_clock_driver_init+0x60>)
   1ea08:	2015      	movs	r0, #21
   1ea0a:	601c      	str	r4, [r3, #0]
   1ea0c:	4b0b      	ldr	r3, [pc, #44]	; (1ea3c <z_clock_driver_init+0x64>)
   1ea0e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1ea12:	4622      	mov	r2, r4
   1ea14:	f000 fab0 	bl	1ef78 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   1ea18:	2015      	movs	r0, #21
   1ea1a:	f000 fa9d 	bl	1ef58 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   1ea1e:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ea20:	4b07      	ldr	r3, [pc, #28]	; (1ea40 <z_clock_driver_init+0x68>)
   1ea22:	601e      	str	r6, [r3, #0]
   1ea24:	602e      	str	r6, [r5, #0]
}
   1ea26:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1ea28:	f04f 30ff 	mov.w	r0, #4294967295
   1ea2c:	e7fb      	b.n	1ea26 <z_clock_driver_init+0x4e>
   1ea2e:	bf00      	nop
   1ea30:	000319dc 	.word	0x000319dc
   1ea34:	40015000 	.word	0x40015000
   1ea38:	40015140 	.word	0x40015140
   1ea3c:	e000e100 	.word	0xe000e100
   1ea40:	40015008 	.word	0x40015008

0001ea44 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   1ea44:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   1ea46:	4c3a      	ldr	r4, [pc, #232]	; (1eb30 <z_clock_set_timeout+0xec>)
   1ea48:	f1b0 3fff 	cmp.w	r0, #4294967295
   1ea4c:	bf18      	it	ne
   1ea4e:	4604      	movne	r4, r0
	__asm__ volatile(
   1ea50:	f04f 0320 	mov.w	r3, #32
   1ea54:	f3ef 8511 	mrs	r5, BASEPRI
   1ea58:	f383 8811 	msr	BASEPRI, r3
   1ea5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ea60:	4834      	ldr	r0, [pc, #208]	; (1eb34 <z_clock_set_timeout+0xf0>)
   1ea62:	f00d fc81 	bl	2c368 <z_spin_lock_valid>
   1ea66:	b968      	cbnz	r0, 1ea84 <z_clock_set_timeout+0x40>
   1ea68:	234a      	movs	r3, #74	; 0x4a
   1ea6a:	4a33      	ldr	r2, [pc, #204]	; (1eb38 <z_clock_set_timeout+0xf4>)
   1ea6c:	4933      	ldr	r1, [pc, #204]	; (1eb3c <z_clock_set_timeout+0xf8>)
   1ea6e:	4834      	ldr	r0, [pc, #208]	; (1eb40 <z_clock_set_timeout+0xfc>)
   1ea70:	f010 f9b1 	bl	2edd6 <printk>
   1ea74:	492f      	ldr	r1, [pc, #188]	; (1eb34 <z_clock_set_timeout+0xf0>)
   1ea76:	4833      	ldr	r0, [pc, #204]	; (1eb44 <z_clock_set_timeout+0x100>)
   1ea78:	f010 f9ad 	bl	2edd6 <printk>
   1ea7c:	214a      	movs	r1, #74	; 0x4a
   1ea7e:	482e      	ldr	r0, [pc, #184]	; (1eb38 <z_clock_set_timeout+0xf4>)
   1ea80:	f010 f9ef 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ea84:	482b      	ldr	r0, [pc, #172]	; (1eb34 <z_clock_set_timeout+0xf0>)
   1ea86:	f00d fc8d 	bl	2c3a4 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   1ea8a:	4b2f      	ldr	r3, [pc, #188]	; (1eb48 <z_clock_set_timeout+0x104>)
   1ea8c:	4e28      	ldr	r6, [pc, #160]	; (1eb30 <z_clock_set_timeout+0xec>)
   1ea8e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
   1ea92:	4b2e      	ldr	r3, [pc, #184]	; (1eb4c <z_clock_set_timeout+0x108>)
   1ea94:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1ea96:	1ad0      	subs	r0, r2, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   1ea98:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   1ea9c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
   1eaa0:	d12c      	bne.n	1eafc <z_clock_set_timeout+0xb8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   1eaa2:	1e60      	subs	r0, r4, #1
   1eaa4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1eaa8:	42b0      	cmp	r0, r6
   1eaaa:	bfa8      	it	ge
   1eaac:	4630      	movge	r0, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1eaae:	3101      	adds	r1, #1
   1eab0:	4408      	add	r0, r1
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   1eab2:	42b0      	cmp	r0, r6
   1eab4:	bf94      	ite	ls
   1eab6:	181b      	addls	r3, r3, r0
   1eab8:	199b      	addhi	r3, r3, r6
	return (a - b) & COUNTER_MAX;
   1eaba:	1a9a      	subs	r2, r3, r2
   1eabc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1eac0:	4921      	ldr	r1, [pc, #132]	; (1eb48 <z_clock_set_timeout+0x104>)
   1eac2:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   1eac6:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
   1eac8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   1eacc:	d918      	bls.n	1eb00 <z_clock_set_timeout+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eace:	4819      	ldr	r0, [pc, #100]	; (1eb34 <z_clock_set_timeout+0xf0>)
   1ead0:	f00d fc58 	bl	2c384 <z_spin_unlock_valid>
   1ead4:	b968      	cbnz	r0, 1eaf2 <z_clock_set_timeout+0xae>
   1ead6:	235d      	movs	r3, #93	; 0x5d
   1ead8:	4a17      	ldr	r2, [pc, #92]	; (1eb38 <z_clock_set_timeout+0xf4>)
   1eada:	491d      	ldr	r1, [pc, #116]	; (1eb50 <z_clock_set_timeout+0x10c>)
   1eadc:	4818      	ldr	r0, [pc, #96]	; (1eb40 <z_clock_set_timeout+0xfc>)
   1eade:	f010 f97a 	bl	2edd6 <printk>
   1eae2:	4914      	ldr	r1, [pc, #80]	; (1eb34 <z_clock_set_timeout+0xf0>)
   1eae4:	481b      	ldr	r0, [pc, #108]	; (1eb54 <z_clock_set_timeout+0x110>)
   1eae6:	f010 f976 	bl	2edd6 <printk>
   1eaea:	215d      	movs	r1, #93	; 0x5d
   1eaec:	4812      	ldr	r0, [pc, #72]	; (1eb38 <z_clock_set_timeout+0xf4>)
   1eaee:	f010 f9b8 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   1eaf2:	f385 8811 	msr	BASEPRI, r5
   1eaf6:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   1eafa:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
   1eafc:	2000      	movs	r0, #0
   1eafe:	e7d6      	b.n	1eaae <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
   1eb00:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   1eb04:	4814      	ldr	r0, [pc, #80]	; (1eb58 <z_clock_set_timeout+0x114>)
	return (a - b) & COUNTER_MAX;
   1eb06:	1a9a      	subs	r2, r3, r2
   1eb08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   1eb0c:	1e54      	subs	r4, r2, #1
   1eb0e:	4284      	cmp	r4, r0
   1eb10:	d905      	bls.n	1eb1e <z_clock_set_timeout+0xda>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1eb12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1eb16:	4b11      	ldr	r3, [pc, #68]	; (1eb5c <z_clock_set_timeout+0x118>)
   1eb18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1eb1c:	e7d7      	b.n	1eace <z_clock_set_timeout+0x8a>
		} else if (dt == 1) {
   1eb1e:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
   1eb20:	bf02      	ittt	eq
   1eb22:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1eb24:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1eb28:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
   1eb2c:	e7cf      	b.n	1eace <z_clock_set_timeout+0x8a>
   1eb2e:	bf00      	nop
   1eb30:	00fffffe 	.word	0x00fffffe
   1eb34:	20020050 	.word	0x20020050
   1eb38:	00031a38 	.word	0x00031a38
   1eb3c:	00031a5e 	.word	0x00031a5e
   1eb40:	000316d1 	.word	0x000316d1
   1eb44:	00031a73 	.word	0x00031a73
   1eb48:	40015000 	.word	0x40015000
   1eb4c:	2002004c 	.word	0x2002004c
   1eb50:	00031a8b 	.word	0x00031a8b
   1eb54:	00031aa2 	.word	0x00031aa2
   1eb58:	007ffffe 	.word	0x007ffffe
   1eb5c:	e000e100 	.word	0xe000e100

0001eb60 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   1eb60:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1eb62:	f04f 0320 	mov.w	r3, #32
   1eb66:	f3ef 8511 	mrs	r5, BASEPRI
   1eb6a:	f383 8811 	msr	BASEPRI, r3
   1eb6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eb72:	481a      	ldr	r0, [pc, #104]	; (1ebdc <z_clock_elapsed+0x7c>)
   1eb74:	f00d fbf8 	bl	2c368 <z_spin_lock_valid>
   1eb78:	b968      	cbnz	r0, 1eb96 <z_clock_elapsed+0x36>
   1eb7a:	234a      	movs	r3, #74	; 0x4a
   1eb7c:	4a18      	ldr	r2, [pc, #96]	; (1ebe0 <z_clock_elapsed+0x80>)
   1eb7e:	4919      	ldr	r1, [pc, #100]	; (1ebe4 <z_clock_elapsed+0x84>)
   1eb80:	4819      	ldr	r0, [pc, #100]	; (1ebe8 <z_clock_elapsed+0x88>)
   1eb82:	f010 f928 	bl	2edd6 <printk>
   1eb86:	4915      	ldr	r1, [pc, #84]	; (1ebdc <z_clock_elapsed+0x7c>)
   1eb88:	4818      	ldr	r0, [pc, #96]	; (1ebec <z_clock_elapsed+0x8c>)
   1eb8a:	f010 f924 	bl	2edd6 <printk>
   1eb8e:	214a      	movs	r1, #74	; 0x4a
   1eb90:	4813      	ldr	r0, [pc, #76]	; (1ebe0 <z_clock_elapsed+0x80>)
   1eb92:	f010 f966 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   1eb96:	4811      	ldr	r0, [pc, #68]	; (1ebdc <z_clock_elapsed+0x7c>)
   1eb98:	f00d fc04 	bl	2c3a4 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   1eb9c:	4b14      	ldr	r3, [pc, #80]	; (1ebf0 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eb9e:	480f      	ldr	r0, [pc, #60]	; (1ebdc <z_clock_elapsed+0x7c>)
   1eba0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   1eba4:	4b13      	ldr	r3, [pc, #76]	; (1ebf4 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   1eba6:	681b      	ldr	r3, [r3, #0]
   1eba8:	1ae4      	subs	r4, r4, r3
   1ebaa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1ebae:	f00d fbe9 	bl	2c384 <z_spin_unlock_valid>
   1ebb2:	b968      	cbnz	r0, 1ebd0 <z_clock_elapsed+0x70>
   1ebb4:	235d      	movs	r3, #93	; 0x5d
   1ebb6:	4a0a      	ldr	r2, [pc, #40]	; (1ebe0 <z_clock_elapsed+0x80>)
   1ebb8:	490f      	ldr	r1, [pc, #60]	; (1ebf8 <z_clock_elapsed+0x98>)
   1ebba:	480b      	ldr	r0, [pc, #44]	; (1ebe8 <z_clock_elapsed+0x88>)
   1ebbc:	f010 f90b 	bl	2edd6 <printk>
   1ebc0:	4906      	ldr	r1, [pc, #24]	; (1ebdc <z_clock_elapsed+0x7c>)
   1ebc2:	480e      	ldr	r0, [pc, #56]	; (1ebfc <z_clock_elapsed+0x9c>)
   1ebc4:	f010 f907 	bl	2edd6 <printk>
   1ebc8:	215d      	movs	r1, #93	; 0x5d
   1ebca:	4805      	ldr	r0, [pc, #20]	; (1ebe0 <z_clock_elapsed+0x80>)
   1ebcc:	f010 f949 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   1ebd0:	f385 8811 	msr	BASEPRI, r5
   1ebd4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1ebd8:	4620      	mov	r0, r4
   1ebda:	bd38      	pop	{r3, r4, r5, pc}
   1ebdc:	20020050 	.word	0x20020050
   1ebe0:	00031a38 	.word	0x00031a38
   1ebe4:	00031a5e 	.word	0x00031a5e
   1ebe8:	000316d1 	.word	0x000316d1
   1ebec:	00031a73 	.word	0x00031a73
   1ebf0:	40015000 	.word	0x40015000
   1ebf4:	2002004c 	.word	0x2002004c
   1ebf8:	00031a8b 	.word	0x00031a8b
   1ebfc:	00031aa2 	.word	0x00031aa2

0001ec00 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   1ec00:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ec02:	f04f 0320 	mov.w	r3, #32
   1ec06:	f3ef 8511 	mrs	r5, BASEPRI
   1ec0a:	f383 8811 	msr	BASEPRI, r3
   1ec0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ec12:	481b      	ldr	r0, [pc, #108]	; (1ec80 <z_timer_cycle_get_32+0x80>)
   1ec14:	f00d fba8 	bl	2c368 <z_spin_lock_valid>
   1ec18:	b968      	cbnz	r0, 1ec36 <z_timer_cycle_get_32+0x36>
   1ec1a:	234a      	movs	r3, #74	; 0x4a
   1ec1c:	4a19      	ldr	r2, [pc, #100]	; (1ec84 <z_timer_cycle_get_32+0x84>)
   1ec1e:	491a      	ldr	r1, [pc, #104]	; (1ec88 <z_timer_cycle_get_32+0x88>)
   1ec20:	481a      	ldr	r0, [pc, #104]	; (1ec8c <z_timer_cycle_get_32+0x8c>)
   1ec22:	f010 f8d8 	bl	2edd6 <printk>
   1ec26:	4916      	ldr	r1, [pc, #88]	; (1ec80 <z_timer_cycle_get_32+0x80>)
   1ec28:	4819      	ldr	r0, [pc, #100]	; (1ec90 <z_timer_cycle_get_32+0x90>)
   1ec2a:	f010 f8d4 	bl	2edd6 <printk>
   1ec2e:	214a      	movs	r1, #74	; 0x4a
   1ec30:	4814      	ldr	r0, [pc, #80]	; (1ec84 <z_timer_cycle_get_32+0x84>)
   1ec32:	f010 f916 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ec36:	4812      	ldr	r0, [pc, #72]	; (1ec80 <z_timer_cycle_get_32+0x80>)
   1ec38:	f00d fbb4 	bl	2c3a4 <z_spin_lock_set_owner>
   1ec3c:	4b15      	ldr	r3, [pc, #84]	; (1ec94 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ec3e:	4810      	ldr	r0, [pc, #64]	; (1ec80 <z_timer_cycle_get_32+0x80>)
   1ec40:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1ec44:	4b14      	ldr	r3, [pc, #80]	; (1ec98 <z_timer_cycle_get_32+0x98>)
   1ec46:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1ec48:	1ae4      	subs	r4, r4, r3
   1ec4a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1ec4e:	441c      	add	r4, r3
   1ec50:	f00d fb98 	bl	2c384 <z_spin_unlock_valid>
   1ec54:	b968      	cbnz	r0, 1ec72 <z_timer_cycle_get_32+0x72>
   1ec56:	235d      	movs	r3, #93	; 0x5d
   1ec58:	4a0a      	ldr	r2, [pc, #40]	; (1ec84 <z_timer_cycle_get_32+0x84>)
   1ec5a:	4910      	ldr	r1, [pc, #64]	; (1ec9c <z_timer_cycle_get_32+0x9c>)
   1ec5c:	480b      	ldr	r0, [pc, #44]	; (1ec8c <z_timer_cycle_get_32+0x8c>)
   1ec5e:	f010 f8ba 	bl	2edd6 <printk>
   1ec62:	4907      	ldr	r1, [pc, #28]	; (1ec80 <z_timer_cycle_get_32+0x80>)
   1ec64:	480e      	ldr	r0, [pc, #56]	; (1eca0 <z_timer_cycle_get_32+0xa0>)
   1ec66:	f010 f8b6 	bl	2edd6 <printk>
   1ec6a:	215d      	movs	r1, #93	; 0x5d
   1ec6c:	4805      	ldr	r0, [pc, #20]	; (1ec84 <z_timer_cycle_get_32+0x84>)
   1ec6e:	f010 f8f8 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   1ec72:	f385 8811 	msr	BASEPRI, r5
   1ec76:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1ec7a:	4620      	mov	r0, r4
   1ec7c:	bd38      	pop	{r3, r4, r5, pc}
   1ec7e:	bf00      	nop
   1ec80:	20020050 	.word	0x20020050
   1ec84:	00031a38 	.word	0x00031a38
   1ec88:	00031a5e 	.word	0x00031a5e
   1ec8c:	000316d1 	.word	0x000316d1
   1ec90:	00031a73 	.word	0x00031a73
   1ec94:	40015000 	.word	0x40015000
   1ec98:	2002004c 	.word	0x2002004c
   1ec9c:	00031a8b 	.word	0x00031a8b
   1eca0:	00031aa2 	.word	0x00031aa2

0001eca4 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1eca4:	2303      	movs	r3, #3
static void _DoInit(void) {
   1eca6:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1eca8:	4c10      	ldr	r4, [pc, #64]	; (1ecec <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1ecaa:	4a11      	ldr	r2, [pc, #68]	; (1ecf0 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1ecac:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ecb0:	4b10      	ldr	r3, [pc, #64]	; (1ecf4 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1ecb2:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ecb4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1ecb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1ecba:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1ecbc:	4a0e      	ldr	r2, [pc, #56]	; (1ecf8 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1ecbe:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   1ecc0:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   1ecc2:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1ecc4:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   1ecc6:	490d      	ldr	r1, [pc, #52]	; (1ecfc <_DoInit+0x58>)
   1ecc8:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   1ecca:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1eccc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1ecce:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   1ecd0:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1ecd2:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1ecd4:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1ecd6:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   1ecd8:	f011 fa0a 	bl	300f0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   1ecdc:	4908      	ldr	r1, [pc, #32]	; (1ed00 <_DoInit+0x5c>)
   1ecde:	4620      	mov	r0, r4
   1ece0:	f011 fa06 	bl	300f0 <strcpy>
  p->acID[6] = ' ';
   1ece4:	2320      	movs	r3, #32
   1ece6:	71a3      	strb	r3, [r4, #6]
}
   1ece8:	bd10      	pop	{r4, pc}
   1ecea:	bf00      	nop
   1ecec:	20020054 	.word	0x20020054
   1ecf0:	00031ab7 	.word	0x00031ab7
   1ecf4:	20021511 	.word	0x20021511
   1ecf8:	20021501 	.word	0x20021501
   1ecfc:	00031ac0 	.word	0x00031ac0
   1ed00:	00031ac4 	.word	0x00031ac4

0001ed04 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ed04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   1ed08:	f04f 0b18 	mov.w	fp, #24
   1ed0c:	4e22      	ldr	r6, [pc, #136]	; (1ed98 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ed0e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1ed10:	fb0b 6200 	mla	r2, fp, r0, r6
   1ed14:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1ed16:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ed18:	4607      	mov	r7, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ed1a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ed1c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ed1e:	d834      	bhi.n	1ed8a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1ed20:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1ed24:	ebaa 0905 	sub.w	r9, sl, r5
   1ed28:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1ed2c:	42a2      	cmp	r2, r4
   1ed2e:	d311      	bcc.n	1ed54 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   1ed30:	f04f 0918 	mov.w	r9, #24
   1ed34:	fb07 9309 	mla	r3, r7, r9, r9
   1ed38:	4433      	add	r3, r6
   1ed3a:	6858      	ldr	r0, [r3, #4]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ed3c:	4622      	mov	r2, r4
   1ed3e:	4641      	mov	r1, r8
   1ed40:	4428      	add	r0, r5
   1ed42:	f011 f868 	bl	2fe16 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   1ed46:	fb09 6607 	mla	r6, r9, r7, r6
   1ed4a:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   1ed4c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1ed4e:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1ed50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1ed54:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1ed56:	429c      	cmp	r4, r3
   1ed58:	d81b      	bhi.n	1ed92 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   1ed5a:	fb00 bb0b 	mla	fp, r0, fp, fp
   1ed5e:	44b3      	add	fp, r6
   1ed60:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ed64:	464a      	mov	r2, r9
   1ed66:	4428      	add	r0, r5
   1ed68:	442c      	add	r4, r5
   1ed6a:	f011 f854 	bl	2fe16 <memcpy>
      if (NumBytes) {
   1ed6e:	ebb4 040a 	subs.w	r4, r4, sl
   1ed72:	d006      	beq.n	1ed82 <SEGGER_RTT_WriteSkipNoLock+0x7e>
   1ed74:	4622      	mov	r2, r4
   1ed76:	eb08 0109 	add.w	r1, r8, r9
   1ed7a:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ed7e:	f011 f84a 	bl	2fe16 <memcpy>
      pRing->WrOff = NumBytes;
   1ed82:	2318      	movs	r3, #24
   1ed84:	fb03 6607 	mla	r6, r3, r7, r6
   1ed88:	e7e0      	b.n	1ed4c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1ed8a:	3b01      	subs	r3, #1
   1ed8c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1ed8e:	429c      	cmp	r4, r3
   1ed90:	d9ce      	bls.n	1ed30 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1ed92:	2000      	movs	r0, #0
   1ed94:	e7dc      	b.n	1ed50 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1ed96:	bf00      	nop
   1ed98:	20020054 	.word	0x20020054

0001ed9c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   1ed9c:	2318      	movs	r3, #24
   1ed9e:	4a03      	ldr	r2, [pc, #12]	; (1edac <SEGGER_RTT_HasDataUp+0x10>)
   1eda0:	fb03 2300 	mla	r3, r3, r0, r2
   1eda4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1eda6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1eda8:	1a80      	subs	r0, r0, r2
   1edaa:	4770      	bx	lr
   1edac:	20020054 	.word	0x20020054

0001edb0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   1edb0:	4804      	ldr	r0, [pc, #16]	; (1edc4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   1edb2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   1edb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   1edb6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   1edb8:	d003      	beq.n	1edc2 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   1edba:	4903      	ldr	r1, [pc, #12]	; (1edc8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   1edbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   1edc0:	600a      	str	r2, [r1, #0]

0001edc2 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   1edc2:	4770      	bx	lr
    ldr r0, =_kernel
   1edc4:	200213cc 	.word	0x200213cc
    ldr r1, =_SCS_ICSR
   1edc8:	e000ed04 	.word	0xe000ed04

0001edcc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1edcc:	492e      	ldr	r1, [pc, #184]	; (1ee88 <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1edce:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1edd0:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   1edd4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1edd6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1edda:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   1edde:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1ede2:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   1ede6:	d004      	beq.n	1edf2 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   1ede8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   1edec:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   1edf0:	e007      	b.n	1ee02 <out_fp_endif>

0001edf2 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   1edf2:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   1edf6:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   1edfa:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   1edfe:	f050 0004 	orrs.w	r0, r0, #4

0001ee02 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   1ee02:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1ee06:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1ee08:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1ee0c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1ee10:	4f1e      	ldr	r7, [pc, #120]	; (1ee8c <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1ee12:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1ee16:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1ee18:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1ee1a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1ee1c:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   1ee1e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1ee20:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1ee22:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   1ee26:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1ee2a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   1ee2e:	d105      	bne.n	1ee3c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   1ee30:	2300      	movs	r3, #0
    vmsr fpscr, r3
   1ee32:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1ee36:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1ee3a:	e005      	b.n	1ee48 <in_fp_endif>

0001ee3c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   1ee3c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   1ee40:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   1ee44:	ec90 8a10 	vldmia	r0, {s16-s31}

0001ee48 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1ee48:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   1ee4c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   1ee50:	f383 8814 	msr	CONTROL, r3
    isb
   1ee54:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1ee58:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1ee5a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1ee5c:	f010 f88a 	bl	2ef74 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1ee60:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1ee64:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   1ee68:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   1ee6c:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   1ee70:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1ee74:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1ee78:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1ee7c:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1ee7e:	f010 f86a 	bl	2ef56 <configure_builtin_stack_guard>
    pop {r2, lr}
   1ee82:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1ee86:	4770      	bx	lr
    ldr r1, =_kernel
   1ee88:	200213cc 	.word	0x200213cc
    ldr v4, =_SCS_ICSR
   1ee8c:	e000ed04 	.word	0xe000ed04

0001ee90 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   1ee90:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1ee94:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1ee96:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1ee9a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1ee9e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1eea0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1eea4:	2902      	cmp	r1, #2
    beq _oops
   1eea6:	d0ff      	beq.n	1eea8 <_oops>

0001eea8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1eea8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1eeaa:	f010 f858 	bl	2ef5e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1eeae:	bd01      	pop	{r0, pc}

0001eeb0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   1eeb0:	4901      	ldr	r1, [pc, #4]	; (1eeb8 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   1eeb2:	2210      	movs	r2, #16
	str r2, [r1]
   1eeb4:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   1eeb6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   1eeb8:	e000ed10 	.word	0xe000ed10

0001eebc <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   1eebc:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1eebe:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   1eec2:	bf30      	wfi

	bx lr
   1eec4:	4770      	bx	lr
   1eec6:	bf00      	nop

0001eec8 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   1eec8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1eecc:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   1eed0:	4672      	mov	r2, lr

	push {r0, lr}
   1eed2:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   1eed4:	f000 fbae 	bl	1f634 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   1eed8:	bd01      	pop	{r0, pc}
   1eeda:	bf00      	nop

0001eedc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1eedc:	bf30      	wfi
    b z_SysNmiOnReset
   1eede:	f7ff bffd 	b.w	1eedc <z_SysNmiOnReset>
   1eee2:	bf00      	nop

0001eee4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1eee4:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
   1eee6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1eee8:	4a0b      	ldr	r2, [pc, #44]	; (1ef18 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1eeea:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   1eeec:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1eeee:	bf1e      	ittt	ne
	movne	r1, #0
   1eef0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1eef2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   1eef4:	f010 fe61 	blne	2fbba <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1eef8:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1eefa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1eefe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1ef02:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   1ef06:	4905      	ldr	r1, [pc, #20]	; (1ef1c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1ef08:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1ef0a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   1ef0c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1ef0e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1ef12:	4903      	ldr	r1, [pc, #12]	; (1ef20 <_isr_wrapper+0x3c>)
	bx r1
   1ef14:	4708      	bx	r1
   1ef16:	0000      	.short	0x0000
	ldr r2, =_kernel
   1ef18:	200213cc 	.word	0x200213cc
	ldr r1, =_sw_isr_table
   1ef1c:	00030b24 	.word	0x00030b24
	ldr r1, =z_arm_int_exit
   1ef20:	0001edb1 	.word	0x0001edb1

0001ef24 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   1ef24:	4a09      	ldr	r2, [pc, #36]	; (1ef4c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1ef26:	490a      	ldr	r1, [pc, #40]	; (1ef50 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1ef28:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1ef2a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1ef2c:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   1ef2e:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1ef30:	4908      	ldr	r1, [pc, #32]	; (1ef54 <arch_swap+0x30>)
   1ef32:	684b      	ldr	r3, [r1, #4]
   1ef34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1ef38:	604b      	str	r3, [r1, #4]
   1ef3a:	2300      	movs	r3, #0
   1ef3c:	f383 8811 	msr	BASEPRI, r3
   1ef40:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1ef44:	6893      	ldr	r3, [r2, #8]
}
   1ef46:	6e98      	ldr	r0, [r3, #104]	; 0x68
   1ef48:	4770      	bx	lr
   1ef4a:	bf00      	nop
   1ef4c:	200213cc 	.word	0x200213cc
   1ef50:	00031490 	.word	0x00031490
   1ef54:	e000ed00 	.word	0xe000ed00

0001ef58 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1ef58:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1ef5a:	2b00      	cmp	r3, #0
   1ef5c:	db08      	blt.n	1ef70 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ef5e:	2201      	movs	r2, #1
   1ef60:	f000 001f 	and.w	r0, r0, #31
   1ef64:	fa02 f000 	lsl.w	r0, r2, r0
   1ef68:	4a02      	ldr	r2, [pc, #8]	; (1ef74 <arch_irq_enable+0x1c>)
   1ef6a:	095b      	lsrs	r3, r3, #5
   1ef6c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1ef70:	4770      	bx	lr
   1ef72:	bf00      	nop
   1ef74:	e000e100 	.word	0xe000e100

0001ef78 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   1ef78:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   1ef7a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   1ef7c:	2c07      	cmp	r4, #7
{
   1ef7e:	4605      	mov	r5, r0
   1ef80:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   1ef82:	d90e      	bls.n	1efa2 <z_arm_irq_priority_set+0x2a>
   1ef84:	235f      	movs	r3, #95	; 0x5f
   1ef86:	4a10      	ldr	r2, [pc, #64]	; (1efc8 <z_arm_irq_priority_set+0x50>)
   1ef88:	4910      	ldr	r1, [pc, #64]	; (1efcc <z_arm_irq_priority_set+0x54>)
   1ef8a:	4811      	ldr	r0, [pc, #68]	; (1efd0 <z_arm_irq_priority_set+0x58>)
   1ef8c:	f00f ff23 	bl	2edd6 <printk>
   1ef90:	4631      	mov	r1, r6
   1ef92:	4810      	ldr	r0, [pc, #64]	; (1efd4 <z_arm_irq_priority_set+0x5c>)
   1ef94:	2207      	movs	r2, #7
   1ef96:	f00f ff1e 	bl	2edd6 <printk>
   1ef9a:	215f      	movs	r1, #95	; 0x5f
   1ef9c:	480a      	ldr	r0, [pc, #40]	; (1efc8 <z_arm_irq_priority_set+0x50>)
   1ef9e:	f00f ff60 	bl	2ee62 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1efa2:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1efa4:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1efa6:	bfa8      	it	ge
   1efa8:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   1efac:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1efb0:	bfb8      	it	lt
   1efb2:	4b09      	ldrlt	r3, [pc, #36]	; (1efd8 <z_arm_irq_priority_set+0x60>)
   1efb4:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1efb6:	bfab      	itete	ge
   1efb8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1efbc:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1efc0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1efc4:	555c      	strblt	r4, [r3, r5]
}
   1efc6:	bd70      	pop	{r4, r5, r6, pc}
   1efc8:	00031acb 	.word	0x00031acb
   1efcc:	00031b01 	.word	0x00031b01
   1efd0:	000316d1 	.word	0x000316d1
   1efd4:	00031b1c 	.word	0x00031b1c
   1efd8:	e000ed14 	.word	0xe000ed14

0001efdc <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   1efdc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1efde:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1efe0:	4b04      	ldr	r3, [pc, #16]	; (1eff4 <_arch_isr_direct_pm+0x18>)
   1efe2:	6a18      	ldr	r0, [r3, #32]
   1efe4:	b118      	cbz	r0, 1efee <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1efe6:	2200      	movs	r2, #0
   1efe8:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   1efea:	f010 fde6 	bl	2fbba <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1efee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1eff0:	bd08      	pop	{r3, pc}
   1eff2:	bf00      	nop
   1eff4:	200213cc 	.word	0x200213cc

0001eff8 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   1eff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1effc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1effe:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   1f000:	2e0f      	cmp	r6, #15
{
   1f002:	4688      	mov	r8, r1
   1f004:	4691      	mov	r9, r2
   1f006:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   1f008:	d126      	bne.n	1f058 <arch_new_thread+0x60>
   1f00a:	4b1e      	ldr	r3, [pc, #120]	; (1f084 <arch_new_thread+0x8c>)
   1f00c:	429f      	cmp	r7, r3
   1f00e:	d127      	bne.n	1f060 <arch_new_thread+0x68>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   1f010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f012:	464a      	mov	r2, r9
   1f014:	9300      	str	r3, [sp, #0]
   1f016:	4641      	mov	r1, r8
   1f018:	4633      	mov	r3, r6
   1f01a:	4628      	mov	r0, r5
   1f01c:	f010 fe62 	bl	2fce4 <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
   1f020:	eb08 0409 	add.w	r4, r8, r9
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   1f024:	4a18      	ldr	r2, [pc, #96]	; (1f088 <arch_new_thread+0x90>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   1f026:	f1a4 0320 	sub.w	r3, r4, #32
   1f02a:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   1f02e:	f022 0201 	bic.w	r2, r2, #1
   1f032:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1f034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
   1f036:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1f038:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   1f03a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f03c:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   1f03e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f040:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
   1f042:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1f046:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   1f048:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   1f04a:	2300      	movs	r3, #0
   1f04c:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   1f04e:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1f052:	b003      	add	sp, #12
   1f054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   1f058:	f106 0310 	add.w	r3, r6, #16
   1f05c:	2b1e      	cmp	r3, #30
   1f05e:	d9d7      	bls.n	1f010 <arch_new_thread+0x18>
   1f060:	232d      	movs	r3, #45	; 0x2d
   1f062:	4a0a      	ldr	r2, [pc, #40]	; (1f08c <arch_new_thread+0x94>)
   1f064:	490a      	ldr	r1, [pc, #40]	; (1f090 <arch_new_thread+0x98>)
   1f066:	480b      	ldr	r0, [pc, #44]	; (1f094 <arch_new_thread+0x9c>)
   1f068:	f00f feb5 	bl	2edd6 <printk>
   1f06c:	4631      	mov	r1, r6
   1f06e:	f06f 030f 	mvn.w	r3, #15
   1f072:	220e      	movs	r2, #14
   1f074:	4808      	ldr	r0, [pc, #32]	; (1f098 <arch_new_thread+0xa0>)
   1f076:	f00f feae 	bl	2edd6 <printk>
   1f07a:	212d      	movs	r1, #45	; 0x2d
   1f07c:	4803      	ldr	r0, [pc, #12]	; (1f08c <arch_new_thread+0x94>)
   1f07e:	f00f fef0 	bl	2ee62 <assert_post_action>
   1f082:	e7c5      	b.n	1f010 <arch_new_thread+0x18>
   1f084:	0002a0d1 	.word	0x0002a0d1
   1f088:	0002ee19 	.word	0x0002ee19
   1f08c:	00031b51 	.word	0x00031b51
   1f090:	00031b83 	.word	0x00031b83
   1f094:	000316d1 	.word	0x000316d1
   1f098:	00031c10 	.word	0x00031c10

0001f09c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   1f09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f09e:	461f      	mov	r7, r3
   1f0a0:	4606      	mov	r6, r0
   1f0a2:	460d      	mov	r5, r1
   1f0a4:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1f0a6:	2300      	movs	r3, #0
   1f0a8:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1f0ac:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1f0b0:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1f0b4:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   1f0b8:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1f0bc:	f000 fc2a 	bl	1f914 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   1f0c0:	4b0b      	ldr	r3, [pc, #44]	; (1f0f0 <arch_switch_to_main_thread+0x54>)
	start_of_main_stack =
   1f0c2:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1f0c4:	4630      	mov	r0, r6
	_current = main_thread;
   1f0c6:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   1f0c8:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1f0cc:	f00f ff52 	bl	2ef74 <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1f0d0:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1f0d4:	4638      	mov	r0, r7
   1f0d6:	f384 8809 	msr	PSP, r4
   1f0da:	2100      	movs	r1, #0
   1f0dc:	b663      	cpsie	if
   1f0de:	f381 8811 	msr	BASEPRI, r1
   1f0e2:	f3bf 8f6f 	isb	sy
   1f0e6:	2200      	movs	r2, #0
   1f0e8:	2300      	movs	r3, #0
   1f0ea:	f00f fe95 	bl	2ee18 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1f0ee:	bf00      	nop
   1f0f0:	200213cc 	.word	0x200213cc

0001f0f4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f0f8:	4681      	mov	r9, r0
   1f0fa:	b086      	sub	sp, #24

	if (esf != NULL) {
   1f0fc:	460c      	mov	r4, r1
   1f0fe:	2900      	cmp	r1, #0
   1f100:	d075      	beq.n	1f1ee <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1f102:	2301      	movs	r3, #1
   1f104:	f04f 0000 	mov.w	r0, #0
   1f108:	4d3c      	ldr	r5, [pc, #240]	; (1f1fc <z_arm_fatal_error+0x108>)
   1f10a:	f363 0007 	bfi	r0, r3, #0, #8
   1f10e:	4b3c      	ldr	r3, [pc, #240]	; (1f200 <z_arm_fatal_error+0x10c>)
   1f110:	4627      	mov	r7, r4
   1f112:	1aed      	subs	r5, r5, r3
   1f114:	688b      	ldr	r3, [r1, #8]
   1f116:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1f11a:	9300      	str	r3, [sp, #0]
   1f11c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1f120:	f365 108f 	bfi	r0, r5, #6, #10
   1f124:	4937      	ldr	r1, [pc, #220]	; (1f204 <z_arm_fatal_error+0x110>)
   1f126:	f00f fead 	bl	2ee84 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1f12a:	2301      	movs	r3, #1
   1f12c:	f04f 0000 	mov.w	r0, #0
   1f130:	f363 0007 	bfi	r0, r3, #0, #8
   1f134:	6963      	ldr	r3, [r4, #20]
   1f136:	f365 108f 	bfi	r0, r5, #6, #10
   1f13a:	9300      	str	r3, [sp, #0]
   1f13c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1f140:	4931      	ldr	r1, [pc, #196]	; (1f208 <z_arm_fatal_error+0x114>)
   1f142:	f00f fe9f 	bl	2ee84 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1f146:	2301      	movs	r3, #1
   1f148:	f04f 0000 	mov.w	r0, #0
   1f14c:	f363 0007 	bfi	r0, r3, #0, #8
   1f150:	f365 108f 	bfi	r0, r5, #6, #10
   1f154:	69e2      	ldr	r2, [r4, #28]
   1f156:	492d      	ldr	r1, [pc, #180]	; (1f20c <z_arm_fatal_error+0x118>)
   1f158:	f00f fe94 	bl	2ee84 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   1f15c:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1f15e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1f218 <z_arm_fatal_error+0x124>
   1f162:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1f166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1f16a:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   1f16e:	f043 0301 	orr.w	r3, r3, #1
   1f172:	f363 0807 	bfi	r8, r3, #0, #8
   1f176:	1cf3      	adds	r3, r6, #3
   1f178:	ed97 7a08 	vldr	s14, [r7, #32]
   1f17c:	9304      	str	r3, [sp, #16]
   1f17e:	edcd 7a05 	vstr	s15, [sp, #20]
   1f182:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1f186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1f18a:	1cb3      	adds	r3, r6, #2
   1f18c:	9302      	str	r3, [sp, #8]
   1f18e:	edcd 7a03 	vstr	s15, [sp, #12]
   1f192:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   1f196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1f19a:	edcd 7a01 	vstr	s15, [sp, #4]
   1f19e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   1f1a2:	1c73      	adds	r3, r6, #1
   1f1a4:	f365 188f 	bfi	r8, r5, #6, #10
   1f1a8:	9300      	str	r3, [sp, #0]
   1f1aa:	4632      	mov	r2, r6
   1f1ac:	ee17 3a90 	vmov	r3, s15
   1f1b0:	4651      	mov	r1, sl
   1f1b2:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   1f1b4:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1f1b6:	f00f fe65 	bl	2ee84 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   1f1ba:	2e10      	cmp	r6, #16
   1f1bc:	f107 0710 	add.w	r7, r7, #16
   1f1c0:	d1cf      	bne.n	1f162 <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   1f1c2:	2301      	movs	r3, #1
   1f1c4:	f04f 0000 	mov.w	r0, #0
   1f1c8:	f363 0007 	bfi	r0, r3, #0, #8
   1f1cc:	f365 108f 	bfi	r0, r5, #6, #10
   1f1d0:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1f1d2:	490f      	ldr	r1, [pc, #60]	; (1f210 <z_arm_fatal_error+0x11c>)
   1f1d4:	f00f fe56 	bl	2ee84 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1f1d8:	f04f 0000 	mov.w	r0, #0
   1f1dc:	2301      	movs	r3, #1
   1f1de:	f363 0007 	bfi	r0, r3, #0, #8
   1f1e2:	f365 108f 	bfi	r0, r5, #6, #10
   1f1e6:	69a2      	ldr	r2, [r4, #24]
   1f1e8:	490a      	ldr	r1, [pc, #40]	; (1f214 <z_arm_fatal_error+0x120>)
   1f1ea:	f00f fe4b 	bl	2ee84 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1f1ee:	4621      	mov	r1, r4
   1f1f0:	4648      	mov	r0, r9
}
   1f1f2:	b006      	add	sp, #24
   1f1f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   1f1f8:	f00a beee 	b.w	29fd8 <z_fatal_error>
   1f1fc:	00030e84 	.word	0x00030e84
   1f200:	00030e1c 	.word	0x00030e1c
   1f204:	00031c41 	.word	0x00031c41
   1f208:	00031c70 	.word	0x00031c70
   1f20c:	00031c9f 	.word	0x00031c9f
   1f210:	00031cf1 	.word	0x00031cf1
   1f214:	00031d00 	.word	0x00031d00
   1f218:	00031cae 	.word	0x00031cae

0001f21c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1f21c:	4a11      	ldr	r2, [pc, #68]	; (1f264 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1f21e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1f220:	4b11      	ldr	r3, [pc, #68]	; (1f268 <z_arm_prep_c+0x4c>)
   1f222:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1f226:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1f228:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f22c:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   1f230:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1f234:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   1f238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   1f23c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1f240:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   1f244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f248:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1f24c:	2300      	movs	r3, #0
   1f24e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   1f252:	f00a ff57 	bl	2a104 <z_bss_zero>
	z_data_copy();
   1f256:	f00a ff5f 	bl	2a118 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   1f25a:	f000 fb11 	bl	1f880 <z_arm_int_lib_init>
	z_cstart();
   1f25e:	f00a ff8d 	bl	2a17c <z_cstart>
   1f262:	bf00      	nop
   1f264:	0001c200 	.word	0x0001c200
   1f268:	e000ed00 	.word	0xe000ed00

0001f26c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1f26c:	f00f fe01 	bl	2ee72 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1f270:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1f272:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   1f276:	4808      	ldr	r0, [pc, #32]	; (1f298 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   1f278:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1f27c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1f27e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1f282:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1f286:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1f288:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1f28a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1f28e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1f292:	f7ff ffc3 	bl	1f21c <z_arm_prep_c>
   1f296:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   1f298:	200241d8 	.word	0x200241d8

0001f29c <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1f29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1f29e:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1f2a0:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1f2a2:	f04f 0000 	mov.w	r0, #0
   1f2a6:	4c40      	ldr	r4, [pc, #256]	; (1f3a8 <mem_manage_fault.isra.2+0x10c>)
   1f2a8:	f363 0007 	bfi	r0, r3, #0, #8
   1f2ac:	4b3f      	ldr	r3, [pc, #252]	; (1f3ac <mem_manage_fault.isra.2+0x110>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1f2ae:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1f2b0:	1ae4      	subs	r4, r4, r3
   1f2b2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1f2b6:	493e      	ldr	r1, [pc, #248]	; (1f3b0 <mem_manage_fault.isra.2+0x114>)
   1f2b8:	f364 108f 	bfi	r0, r4, #6, #10
   1f2bc:	f00f fde2 	bl	2ee84 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1f2c0:	4b3c      	ldr	r3, [pc, #240]	; (1f3b4 <mem_manage_fault.isra.2+0x118>)
   1f2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f2c4:	06d9      	lsls	r1, r3, #27
   1f2c6:	d509      	bpl.n	1f2dc <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1f2c8:	f04f 0000 	mov.w	r0, #0
   1f2cc:	2301      	movs	r3, #1
   1f2ce:	f363 0007 	bfi	r0, r3, #0, #8
   1f2d2:	f364 108f 	bfi	r0, r4, #6, #10
   1f2d6:	4938      	ldr	r1, [pc, #224]	; (1f3b8 <mem_manage_fault.isra.2+0x11c>)
   1f2d8:	f00f fdd4 	bl	2ee84 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1f2dc:	4b35      	ldr	r3, [pc, #212]	; (1f3b4 <mem_manage_fault.isra.2+0x118>)
   1f2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f2e0:	071a      	lsls	r2, r3, #28
   1f2e2:	d509      	bpl.n	1f2f8 <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1f2e4:	f04f 0000 	mov.w	r0, #0
   1f2e8:	2301      	movs	r3, #1
   1f2ea:	f363 0007 	bfi	r0, r3, #0, #8
   1f2ee:	f364 108f 	bfi	r0, r4, #6, #10
   1f2f2:	4932      	ldr	r1, [pc, #200]	; (1f3bc <mem_manage_fault.isra.2+0x120>)
   1f2f4:	f00f fdc6 	bl	2ee84 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1f2f8:	4d2e      	ldr	r5, [pc, #184]	; (1f3b4 <mem_manage_fault.isra.2+0x118>)
   1f2fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f2fc:	079b      	lsls	r3, r3, #30
   1f2fe:	d51c      	bpl.n	1f33a <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   1f300:	2301      	movs	r3, #1
   1f302:	f04f 0000 	mov.w	r0, #0
   1f306:	f363 0007 	bfi	r0, r3, #0, #8
   1f30a:	f364 108f 	bfi	r0, r4, #6, #10
   1f30e:	492c      	ldr	r1, [pc, #176]	; (1f3c0 <mem_manage_fault.isra.2+0x124>)
   1f310:	f00f fdb8 	bl	2ee84 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   1f314:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1f316:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f318:	0618      	lsls	r0, r3, #24
   1f31a:	d50e      	bpl.n	1f33a <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1f31c:	f04f 0000 	mov.w	r0, #0
   1f320:	2301      	movs	r3, #1
   1f322:	f363 0007 	bfi	r0, r3, #0, #8
   1f326:	f364 108f 	bfi	r0, r4, #6, #10
   1f32a:	4926      	ldr	r1, [pc, #152]	; (1f3c4 <mem_manage_fault.isra.2+0x128>)
   1f32c:	f00f fdaa 	bl	2ee84 <log_string_sync>
			if (from_hard_fault) {
   1f330:	b11f      	cbz	r7, 1f33a <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1f332:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1f338:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1f33a:	4b1e      	ldr	r3, [pc, #120]	; (1f3b4 <mem_manage_fault.isra.2+0x118>)
   1f33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f33e:	07d9      	lsls	r1, r3, #31
   1f340:	d509      	bpl.n	1f356 <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   1f342:	f04f 0000 	mov.w	r0, #0
   1f346:	2301      	movs	r3, #1
   1f348:	f363 0007 	bfi	r0, r3, #0, #8
   1f34c:	f364 108f 	bfi	r0, r4, #6, #10
   1f350:	491d      	ldr	r1, [pc, #116]	; (1f3c8 <mem_manage_fault.isra.2+0x12c>)
   1f352:	f00f fd97 	bl	2ee84 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1f356:	4b17      	ldr	r3, [pc, #92]	; (1f3b4 <mem_manage_fault.isra.2+0x118>)
   1f358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f35a:	069a      	lsls	r2, r3, #26
   1f35c:	d509      	bpl.n	1f372 <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
   1f35e:	f04f 0000 	mov.w	r0, #0
   1f362:	2301      	movs	r3, #1
   1f364:	f363 0007 	bfi	r0, r3, #0, #8
   1f368:	f364 108f 	bfi	r0, r4, #6, #10
   1f36c:	4917      	ldr	r1, [pc, #92]	; (1f3cc <mem_manage_fault.isra.2+0x130>)
   1f36e:	f00f fd89 	bl	2ee84 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   1f372:	4b10      	ldr	r3, [pc, #64]	; (1f3b4 <mem_manage_fault.isra.2+0x118>)
   1f374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f376:	06db      	lsls	r3, r3, #27
   1f378:	d50e      	bpl.n	1f398 <mem_manage_fault.isra.2+0xfc>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   1f37a:	4915      	ldr	r1, [pc, #84]	; (1f3d0 <mem_manage_fault.isra.2+0x134>)
   1f37c:	f44f 739b 	mov.w	r3, #310	; 0x136
   1f380:	4a14      	ldr	r2, [pc, #80]	; (1f3d4 <mem_manage_fault.isra.2+0x138>)
   1f382:	4815      	ldr	r0, [pc, #84]	; (1f3d8 <mem_manage_fault.isra.2+0x13c>)
   1f384:	f00f fd27 	bl	2edd6 <printk>
   1f388:	4814      	ldr	r0, [pc, #80]	; (1f3dc <mem_manage_fault.isra.2+0x140>)
   1f38a:	f00f fd24 	bl	2edd6 <printk>
   1f38e:	f44f 719b 	mov.w	r1, #310	; 0x136
   1f392:	4810      	ldr	r0, [pc, #64]	; (1f3d4 <mem_manage_fault.isra.2+0x138>)
   1f394:	f00f fd65 	bl	2ee62 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   1f398:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1f39a:	4a06      	ldr	r2, [pc, #24]	; (1f3b4 <mem_manage_fault.isra.2+0x118>)
   1f39c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1f39e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1f3a2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1f3a4:	7030      	strb	r0, [r6, #0]

	return reason;
}
   1f3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f3a8:	00030e84 	.word	0x00030e84
   1f3ac:	00030e1c 	.word	0x00030e1c
   1f3b0:	00031db6 	.word	0x00031db6
   1f3b4:	e000ed00 	.word	0xe000ed00
   1f3b8:	00031dcc 	.word	0x00031dcc
   1f3bc:	00031dff 	.word	0x00031dff
   1f3c0:	00031e12 	.word	0x00031e12
   1f3c4:	00031e2a 	.word	0x00031e2a
   1f3c8:	00031e40 	.word	0x00031e40
   1f3cc:	00031e5f 	.word	0x00031e5f
   1f3d0:	00033029 	.word	0x00033029
   1f3d4:	00031e8e 	.word	0x00031e8e
   1f3d8:	000316d1 	.word	0x000316d1
   1f3dc:	00031ec8 	.word	0x00031ec8

0001f3e0 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1f3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1f3e2:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1f3e4:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   1f3e6:	f04f 0000 	mov.w	r0, #0
   1f3ea:	4c3d      	ldr	r4, [pc, #244]	; (1f4e0 <bus_fault.isra.3+0x100>)
   1f3ec:	f363 0007 	bfi	r0, r3, #0, #8
   1f3f0:	4b3c      	ldr	r3, [pc, #240]	; (1f4e4 <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1f3f2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1f3f4:	1ae4      	subs	r4, r4, r3
   1f3f6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1f3fa:	493b      	ldr	r1, [pc, #236]	; (1f4e8 <bus_fault.isra.3+0x108>)
   1f3fc:	f364 108f 	bfi	r0, r4, #6, #10
   1f400:	f00f fd40 	bl	2ee84 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1f404:	4b39      	ldr	r3, [pc, #228]	; (1f4ec <bus_fault.isra.3+0x10c>)
   1f406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f408:	04d9      	lsls	r1, r3, #19
   1f40a:	d509      	bpl.n	1f420 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
   1f40c:	f04f 0000 	mov.w	r0, #0
   1f410:	2301      	movs	r3, #1
   1f412:	f363 0007 	bfi	r0, r3, #0, #8
   1f416:	f364 108f 	bfi	r0, r4, #6, #10
   1f41a:	4935      	ldr	r1, [pc, #212]	; (1f4f0 <bus_fault.isra.3+0x110>)
   1f41c:	f00f fd32 	bl	2ee84 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1f420:	4b32      	ldr	r3, [pc, #200]	; (1f4ec <bus_fault.isra.3+0x10c>)
   1f422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f424:	051a      	lsls	r2, r3, #20
   1f426:	d509      	bpl.n	1f43c <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1f428:	f04f 0000 	mov.w	r0, #0
   1f42c:	2301      	movs	r3, #1
   1f42e:	f363 0007 	bfi	r0, r3, #0, #8
   1f432:	f364 108f 	bfi	r0, r4, #6, #10
   1f436:	492f      	ldr	r1, [pc, #188]	; (1f4f4 <bus_fault.isra.3+0x114>)
   1f438:	f00f fd24 	bl	2ee84 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1f43c:	4d2b      	ldr	r5, [pc, #172]	; (1f4ec <bus_fault.isra.3+0x10c>)
   1f43e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f440:	059b      	lsls	r3, r3, #22
   1f442:	d51c      	bpl.n	1f47e <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   1f444:	2301      	movs	r3, #1
   1f446:	f04f 0000 	mov.w	r0, #0
   1f44a:	f363 0007 	bfi	r0, r3, #0, #8
   1f44e:	f364 108f 	bfi	r0, r4, #6, #10
   1f452:	4929      	ldr	r1, [pc, #164]	; (1f4f8 <bus_fault.isra.3+0x118>)
   1f454:	f00f fd16 	bl	2ee84 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1f458:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1f45a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f45c:	0418      	lsls	r0, r3, #16
   1f45e:	d50e      	bpl.n	1f47e <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1f460:	f04f 0000 	mov.w	r0, #0
   1f464:	2301      	movs	r3, #1
   1f466:	f363 0007 	bfi	r0, r3, #0, #8
   1f46a:	f364 108f 	bfi	r0, r4, #6, #10
   1f46e:	4923      	ldr	r1, [pc, #140]	; (1f4fc <bus_fault.isra.3+0x11c>)
   1f470:	f00f fd08 	bl	2ee84 <log_string_sync>
			if (from_hard_fault) {
   1f474:	b11f      	cbz	r7, 1f47e <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1f476:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f478:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1f47c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1f47e:	4b1b      	ldr	r3, [pc, #108]	; (1f4ec <bus_fault.isra.3+0x10c>)
   1f480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f482:	0559      	lsls	r1, r3, #21
   1f484:	d509      	bpl.n	1f49a <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   1f486:	f04f 0000 	mov.w	r0, #0
   1f48a:	2301      	movs	r3, #1
   1f48c:	f363 0007 	bfi	r0, r3, #0, #8
   1f490:	f364 108f 	bfi	r0, r4, #6, #10
   1f494:	491a      	ldr	r1, [pc, #104]	; (1f500 <bus_fault.isra.3+0x120>)
   1f496:	f00f fcf5 	bl	2ee84 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1f49a:	4b14      	ldr	r3, [pc, #80]	; (1f4ec <bus_fault.isra.3+0x10c>)
   1f49c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1f49e:	05d2      	lsls	r2, r2, #23
   1f4a0:	d511      	bpl.n	1f4c6 <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   1f4a2:	f04f 0000 	mov.w	r0, #0
   1f4a6:	2301      	movs	r3, #1
   1f4a8:	4916      	ldr	r1, [pc, #88]	; (1f504 <bus_fault.isra.3+0x124>)
   1f4aa:	f363 0007 	bfi	r0, r3, #0, #8
   1f4ae:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1f4b2:	f00f fce7 	bl	2ee84 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   1f4b6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1f4b8:	4a0c      	ldr	r2, [pc, #48]	; (1f4ec <bus_fault.isra.3+0x10c>)
   1f4ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1f4bc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1f4c0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1f4c2:	7030      	strb	r0, [r6, #0]

	return reason;
}
   1f4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1f4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f4c8:	049b      	lsls	r3, r3, #18
   1f4ca:	d5f4      	bpl.n	1f4b6 <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1f4cc:	f04f 0000 	mov.w	r0, #0
   1f4d0:	2301      	movs	r3, #1
   1f4d2:	f363 0007 	bfi	r0, r3, #0, #8
   1f4d6:	f364 108f 	bfi	r0, r4, #6, #10
   1f4da:	490b      	ldr	r1, [pc, #44]	; (1f508 <bus_fault.isra.3+0x128>)
   1f4dc:	e7e9      	b.n	1f4b2 <bus_fault.isra.3+0xd2>
   1f4de:	bf00      	nop
   1f4e0:	00030e84 	.word	0x00030e84
   1f4e4:	00030e1c 	.word	0x00030e1c
   1f4e8:	00031d2e 	.word	0x00031d2e
   1f4ec:	e000ed00 	.word	0xe000ed00
   1f4f0:	00031d44 	.word	0x00031d44
   1f4f4:	00031dff 	.word	0x00031dff
   1f4f8:	00031d55 	.word	0x00031d55
   1f4fc:	00031d6e 	.word	0x00031d6e
   1f500:	00031d83 	.word	0x00031d83
   1f504:	00031d9e 	.word	0x00031d9e
   1f508:	00031e5f 	.word	0x00031e5f

0001f50c <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   1f50c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1f50e:	f04f 0000 	mov.w	r0, #0
   1f512:	2301      	movs	r3, #1
   1f514:	4c3c      	ldr	r4, [pc, #240]	; (1f608 <usage_fault.isra.4+0xfc>)
   1f516:	f363 0007 	bfi	r0, r3, #0, #8
   1f51a:	4b3c      	ldr	r3, [pc, #240]	; (1f60c <usage_fault.isra.4+0x100>)
   1f51c:	493c      	ldr	r1, [pc, #240]	; (1f610 <usage_fault.isra.4+0x104>)
   1f51e:	1ae4      	subs	r4, r4, r3
   1f520:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1f524:	f364 108f 	bfi	r0, r4, #6, #10
   1f528:	f00f fcac 	bl	2ee84 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1f52c:	4b39      	ldr	r3, [pc, #228]	; (1f614 <usage_fault.isra.4+0x108>)
   1f52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f530:	019b      	lsls	r3, r3, #6
   1f532:	d509      	bpl.n	1f548 <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
   1f534:	f04f 0000 	mov.w	r0, #0
   1f538:	2301      	movs	r3, #1
   1f53a:	f363 0007 	bfi	r0, r3, #0, #8
   1f53e:	f364 108f 	bfi	r0, r4, #6, #10
   1f542:	4935      	ldr	r1, [pc, #212]	; (1f618 <usage_fault.isra.4+0x10c>)
   1f544:	f00f fc9e 	bl	2ee84 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1f548:	4b32      	ldr	r3, [pc, #200]	; (1f614 <usage_fault.isra.4+0x108>)
   1f54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f54c:	01dd      	lsls	r5, r3, #7
   1f54e:	d509      	bpl.n	1f564 <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   1f550:	f04f 0000 	mov.w	r0, #0
   1f554:	2301      	movs	r3, #1
   1f556:	f363 0007 	bfi	r0, r3, #0, #8
   1f55a:	f364 108f 	bfi	r0, r4, #6, #10
   1f55e:	492f      	ldr	r1, [pc, #188]	; (1f61c <usage_fault.isra.4+0x110>)
   1f560:	f00f fc90 	bl	2ee84 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1f564:	4b2b      	ldr	r3, [pc, #172]	; (1f614 <usage_fault.isra.4+0x108>)
   1f566:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1f568:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1f56c:	d00a      	beq.n	1f584 <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1f56e:	2301      	movs	r3, #1
   1f570:	f04f 0000 	mov.w	r0, #0
   1f574:	f363 0007 	bfi	r0, r3, #0, #8
   1f578:	f364 108f 	bfi	r0, r4, #6, #10
   1f57c:	4928      	ldr	r1, [pc, #160]	; (1f620 <usage_fault.isra.4+0x114>)
   1f57e:	f00f fc81 	bl	2ee84 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1f582:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1f584:	4b23      	ldr	r3, [pc, #140]	; (1f614 <usage_fault.isra.4+0x108>)
   1f586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f588:	0318      	lsls	r0, r3, #12
   1f58a:	d509      	bpl.n	1f5a0 <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
   1f58c:	f04f 0000 	mov.w	r0, #0
   1f590:	2301      	movs	r3, #1
   1f592:	f363 0007 	bfi	r0, r3, #0, #8
   1f596:	f364 108f 	bfi	r0, r4, #6, #10
   1f59a:	4922      	ldr	r1, [pc, #136]	; (1f624 <usage_fault.isra.4+0x118>)
   1f59c:	f00f fc72 	bl	2ee84 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1f5a0:	4b1c      	ldr	r3, [pc, #112]	; (1f614 <usage_fault.isra.4+0x108>)
   1f5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f5a4:	0359      	lsls	r1, r3, #13
   1f5a6:	d509      	bpl.n	1f5bc <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1f5a8:	f04f 0000 	mov.w	r0, #0
   1f5ac:	2301      	movs	r3, #1
   1f5ae:	f363 0007 	bfi	r0, r3, #0, #8
   1f5b2:	f364 108f 	bfi	r0, r4, #6, #10
   1f5b6:	491c      	ldr	r1, [pc, #112]	; (1f628 <usage_fault.isra.4+0x11c>)
   1f5b8:	f00f fc64 	bl	2ee84 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1f5bc:	4b15      	ldr	r3, [pc, #84]	; (1f614 <usage_fault.isra.4+0x108>)
   1f5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f5c0:	039a      	lsls	r2, r3, #14
   1f5c2:	d509      	bpl.n	1f5d8 <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1f5c4:	f04f 0000 	mov.w	r0, #0
   1f5c8:	2301      	movs	r3, #1
   1f5ca:	f363 0007 	bfi	r0, r3, #0, #8
   1f5ce:	f364 108f 	bfi	r0, r4, #6, #10
   1f5d2:	4916      	ldr	r1, [pc, #88]	; (1f62c <usage_fault.isra.4+0x120>)
   1f5d4:	f00f fc56 	bl	2ee84 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1f5d8:	4b0e      	ldr	r3, [pc, #56]	; (1f614 <usage_fault.isra.4+0x108>)
   1f5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f5dc:	03db      	lsls	r3, r3, #15
   1f5de:	d509      	bpl.n	1f5f4 <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1f5e0:	f04f 0000 	mov.w	r0, #0
   1f5e4:	2301      	movs	r3, #1
   1f5e6:	f363 0007 	bfi	r0, r3, #0, #8
   1f5ea:	f364 108f 	bfi	r0, r4, #6, #10
   1f5ee:	4910      	ldr	r1, [pc, #64]	; (1f630 <usage_fault.isra.4+0x124>)
   1f5f0:	f00f fc48 	bl	2ee84 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1f5f4:	4a07      	ldr	r2, [pc, #28]	; (1f614 <usage_fault.isra.4+0x108>)

	return reason;
}
   1f5f6:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1f5f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1f5fa:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1f5fe:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1f602:	6293      	str	r3, [r2, #40]	; 0x28
}
   1f604:	bd38      	pop	{r3, r4, r5, pc}
   1f606:	bf00      	nop
   1f608:	00030e84 	.word	0x00030e84
   1f60c:	00030e1c 	.word	0x00030e1c
   1f610:	00031f02 	.word	0x00031f02
   1f614:	e000ed00 	.word	0xe000ed00
   1f618:	00031f1a 	.word	0x00031f1a
   1f61c:	00031f2d 	.word	0x00031f2d
   1f620:	00031f47 	.word	0x00031f47
   1f624:	00031f71 	.word	0x00031f71
   1f628:	00031f8f 	.word	0x00031f8f
   1f62c:	00031fb4 	.word	0x00031fb4
   1f630:	00031fce 	.word	0x00031fce

0001f634 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   1f634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1f638:	4b70      	ldr	r3, [pc, #448]	; (1f7fc <z_arm_fault+0x1c8>)
{
   1f63a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1f63c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   1f640:	4606      	mov	r6, r0
   1f642:	4689      	mov	r9, r1
   1f644:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1f646:	f3c8 0708 	ubfx	r7, r8, #0, #9
   1f64a:	2500      	movs	r5, #0
   1f64c:	f385 8811 	msr	BASEPRI, r5
   1f650:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1f654:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1f658:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1f65c:	d11b      	bne.n	1f696 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1f65e:	07d0      	lsls	r0, r2, #31
   1f660:	d419      	bmi.n	1f696 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1f662:	0651      	lsls	r1, r2, #25
   1f664:	d403      	bmi.n	1f66e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1f666:	0722      	lsls	r2, r4, #28
   1f668:	d412      	bmi.n	1f690 <z_arm_fault+0x5c>
			*nested_exc = true;
   1f66a:	2501      	movs	r5, #1
   1f66c:	e012      	b.n	1f694 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1f66e:	2301      	movs	r3, #1
   1f670:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1f674:	4a62      	ldr	r2, [pc, #392]	; (1f800 <z_arm_fault+0x1cc>)
   1f676:	f363 0007 	bfi	r0, r3, #0, #8
   1f67a:	4b62      	ldr	r3, [pc, #392]	; (1f804 <z_arm_fault+0x1d0>)
   1f67c:	4962      	ldr	r1, [pc, #392]	; (1f808 <z_arm_fault+0x1d4>)
   1f67e:	1a9b      	subs	r3, r3, r2
   1f680:	08db      	lsrs	r3, r3, #3
   1f682:	f363 108f 	bfi	r0, r3, #6, #10
   1f686:	f00f fbfd 	bl	2ee84 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1f68a:	f014 0504 	ands.w	r5, r4, #4
   1f68e:	d001      	beq.n	1f694 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   1f690:	464e      	mov	r6, r9
	*nested_exc = false;
   1f692:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1f694:	b97e      	cbnz	r6, 1f6b6 <z_arm_fault+0x82>
   1f696:	f240 33b1 	movw	r3, #945	; 0x3b1
   1f69a:	4a5c      	ldr	r2, [pc, #368]	; (1f80c <z_arm_fault+0x1d8>)
   1f69c:	495c      	ldr	r1, [pc, #368]	; (1f810 <z_arm_fault+0x1dc>)
   1f69e:	485d      	ldr	r0, [pc, #372]	; (1f814 <z_arm_fault+0x1e0>)
   1f6a0:	f00f fb99 	bl	2edd6 <printk>
   1f6a4:	485c      	ldr	r0, [pc, #368]	; (1f818 <z_arm_fault+0x1e4>)
   1f6a6:	f00f fb96 	bl	2edd6 <printk>
   1f6aa:	f240 31b1 	movw	r1, #945	; 0x3b1
   1f6ae:	4857      	ldr	r0, [pc, #348]	; (1f80c <z_arm_fault+0x1d8>)
   1f6b0:	f00f fbd7 	bl	2ee62 <assert_post_action>
   1f6b4:	2600      	movs	r6, #0
	*recoverable = false;
   1f6b6:	2300      	movs	r3, #0
   1f6b8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1f6bc:	1efb      	subs	r3, r7, #3
   1f6be:	2b09      	cmp	r3, #9
   1f6c0:	d87f      	bhi.n	1f7c2 <z_arm_fault+0x18e>
   1f6c2:	e8df f003 	tbb	[pc, r3]
   1f6c6:	6905      	.short	0x6905
   1f6c8:	7e7e4c6d 	.word	0x7e7e4c6d
   1f6cc:	717e7e7e 	.word	0x717e7e7e
	PR_FAULT_INFO("***** HARD FAULT *****");
   1f6d0:	2301      	movs	r3, #1
   1f6d2:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   1f6d6:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   1f6da:	f363 0007 	bfi	r0, r3, #0, #8
   1f6de:	4f49      	ldr	r7, [pc, #292]	; (1f804 <z_arm_fault+0x1d0>)
   1f6e0:	4b47      	ldr	r3, [pc, #284]	; (1f800 <z_arm_fault+0x1cc>)
   1f6e2:	494e      	ldr	r1, [pc, #312]	; (1f81c <z_arm_fault+0x1e8>)
   1f6e4:	1aff      	subs	r7, r7, r3
   1f6e6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   1f6ea:	f367 108f 	bfi	r0, r7, #6, #10
   1f6ee:	f00f fbc9 	bl	2ee84 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1f6f2:	4b42      	ldr	r3, [pc, #264]	; (1f7fc <z_arm_fault+0x1c8>)
	*recoverable = false;
   1f6f4:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1f6f8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1f6fa:	f014 0402 	ands.w	r4, r4, #2
   1f6fe:	d00b      	beq.n	1f718 <z_arm_fault+0xe4>
		PR_EXC("  Bus fault on vector table read");
   1f700:	f04f 0000 	mov.w	r0, #0
   1f704:	2301      	movs	r3, #1
   1f706:	4946      	ldr	r1, [pc, #280]	; (1f820 <z_arm_fault+0x1ec>)
   1f708:	f363 0007 	bfi	r0, r3, #0, #8
   1f70c:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
   1f710:	f00f fbb8 	bl	2ee84 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   1f714:	2400      	movs	r4, #0
   1f716:	e025      	b.n	1f764 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1f718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f71a:	005b      	lsls	r3, r3, #1
   1f71c:	d522      	bpl.n	1f764 <z_arm_fault+0x130>
		PR_EXC("  Fault escalation (see below)");
   1f71e:	2301      	movs	r3, #1
   1f720:	f04f 0000 	mov.w	r0, #0
   1f724:	f363 0007 	bfi	r0, r3, #0, #8
   1f728:	f367 108f 	bfi	r0, r7, #6, #10
   1f72c:	493d      	ldr	r1, [pc, #244]	; (1f824 <z_arm_fault+0x1f0>)
   1f72e:	f00f fba9 	bl	2ee84 <log_string_sync>
		if (SCB_MMFSR != 0) {
   1f732:	4b3d      	ldr	r3, [pc, #244]	; (1f828 <z_arm_fault+0x1f4>)
   1f734:	781b      	ldrb	r3, [r3, #0]
   1f736:	b12b      	cbz	r3, 1f744 <z_arm_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
   1f738:	2001      	movs	r0, #1
   1f73a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1f73e:	f7ff fdad 	bl	1f29c <mem_manage_fault.isra.2>
   1f742:	e00e      	b.n	1f762 <z_arm_fault+0x12e>
		} else if (SCB_BFSR != 0) {
   1f744:	4b39      	ldr	r3, [pc, #228]	; (1f82c <z_arm_fault+0x1f8>)
   1f746:	781b      	ldrb	r3, [r3, #0]
   1f748:	b12b      	cbz	r3, 1f756 <z_arm_fault+0x122>
			reason = bus_fault(esf, 1, recoverable);
   1f74a:	2001      	movs	r0, #1
   1f74c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1f750:	f7ff fe46 	bl	1f3e0 <bus_fault.isra.3>
   1f754:	e005      	b.n	1f762 <z_arm_fault+0x12e>
		} else if (SCB_UFSR != 0) {
   1f756:	4b36      	ldr	r3, [pc, #216]	; (1f830 <z_arm_fault+0x1fc>)
   1f758:	881b      	ldrh	r3, [r3, #0]
   1f75a:	b29b      	uxth	r3, r3
   1f75c:	b113      	cbz	r3, 1f764 <z_arm_fault+0x130>
			reason = usage_fault(esf);
   1f75e:	f7ff fed5 	bl	1f50c <usage_fault.isra.4>
   1f762:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1f764:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f768:	b99b      	cbnz	r3, 1f792 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1f76a:	2268      	movs	r2, #104	; 0x68
   1f76c:	4631      	mov	r1, r6
   1f76e:	a802      	add	r0, sp, #8
   1f770:	f010 fb51 	bl	2fe16 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1f774:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f776:	2d00      	cmp	r5, #0
   1f778:	d03a      	beq.n	1f7f0 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1f77a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1f77e:	b922      	cbnz	r2, 1f78a <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1f780:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1f784:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1f788:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1f78a:	a902      	add	r1, sp, #8
   1f78c:	4620      	mov	r0, r4
   1f78e:	f7ff fcb1 	bl	1f0f4 <z_arm_fatal_error>
}
   1f792:	b01d      	add	sp, #116	; 0x74
   1f794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1f798:	f10d 0107 	add.w	r1, sp, #7
   1f79c:	2000      	movs	r0, #0
   1f79e:	e7ce      	b.n	1f73e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   1f7a0:	f10d 0107 	add.w	r1, sp, #7
   1f7a4:	2000      	movs	r0, #0
   1f7a6:	e7d3      	b.n	1f750 <z_arm_fault+0x11c>
	PR_FAULT_INFO(
   1f7a8:	2301      	movs	r3, #1
   1f7aa:	f04f 0000 	mov.w	r0, #0
   1f7ae:	4a14      	ldr	r2, [pc, #80]	; (1f800 <z_arm_fault+0x1cc>)
   1f7b0:	f363 0007 	bfi	r0, r3, #0, #8
   1f7b4:	4b13      	ldr	r3, [pc, #76]	; (1f804 <z_arm_fault+0x1d0>)
   1f7b6:	491f      	ldr	r1, [pc, #124]	; (1f834 <z_arm_fault+0x200>)
   1f7b8:	1a9b      	subs	r3, r3, r2
   1f7ba:	08db      	lsrs	r3, r3, #3
   1f7bc:	f363 108f 	bfi	r0, r3, #6, #10
   1f7c0:	e7a6      	b.n	1f710 <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
   1f7c2:	2301      	movs	r3, #1
   1f7c4:	f04f 0000 	mov.w	r0, #0
   1f7c8:	4a0d      	ldr	r2, [pc, #52]	; (1f800 <z_arm_fault+0x1cc>)
   1f7ca:	f363 0007 	bfi	r0, r3, #0, #8
   1f7ce:	4b0d      	ldr	r3, [pc, #52]	; (1f804 <z_arm_fault+0x1d0>)
   1f7d0:	4919      	ldr	r1, [pc, #100]	; (1f838 <z_arm_fault+0x204>)
   1f7d2:	1a9b      	subs	r3, r3, r2
   1f7d4:	08db      	lsrs	r3, r3, #3
   1f7d6:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1f7da:	f363 108f 	bfi	r0, r3, #6, #10
   1f7de:	4a17      	ldr	r2, [pc, #92]	; (1f83c <z_arm_fault+0x208>)
   1f7e0:	f1a7 0310 	sub.w	r3, r7, #16
   1f7e4:	bf08      	it	eq
   1f7e6:	460a      	moveq	r2, r1
   1f7e8:	4915      	ldr	r1, [pc, #84]	; (1f840 <z_arm_fault+0x20c>)
   1f7ea:	f00f fb4b 	bl	2ee84 <log_string_sync>
   1f7ee:	e791      	b.n	1f714 <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1f7f0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1f7f4:	f023 0301 	bic.w	r3, r3, #1
   1f7f8:	e7c6      	b.n	1f788 <z_arm_fault+0x154>
   1f7fa:	bf00      	nop
   1f7fc:	e000ed00 	.word	0xe000ed00
   1f800:	00030e1c 	.word	0x00030e1c
   1f804:	00030e84 	.word	0x00030e84
   1f808:	00032027 	.word	0x00032027
   1f80c:	00031e8e 	.word	0x00031e8e
   1f810:	0003204a 	.word	0x0003204a
   1f814:	000316d1 	.word	0x000316d1
   1f818:	0003205d 	.word	0x0003205d
   1f81c:	0003209b 	.word	0x0003209b
   1f820:	000320b2 	.word	0x000320b2
   1f824:	000320d3 	.word	0x000320d3
   1f828:	e000ed28 	.word	0xe000ed28
   1f82c:	e000ed29 	.word	0xe000ed29
   1f830:	e000ed2a 	.word	0xe000ed2a
   1f834:	000320f2 	.word	0x000320f2
   1f838:	00031ff9 	.word	0x00031ff9
   1f83c:	0003200e 	.word	0x0003200e
   1f840:	00032128 	.word	0x00032128

0001f844 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1f844:	4b04      	ldr	r3, [pc, #16]	; (1f858 <z_arm_fault_init+0x14>)
   1f846:	695a      	ldr	r2, [r3, #20]
   1f848:	f042 0210 	orr.w	r2, r2, #16
   1f84c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1f84e:	695a      	ldr	r2, [r3, #20]
   1f850:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1f854:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1f856:	4770      	bx	lr
   1f858:	e000ed00 	.word	0xe000ed00

0001f85c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1f85c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f860:	4905      	ldr	r1, [pc, #20]	; (1f878 <sys_arch_reboot+0x1c>)
   1f862:	4b06      	ldr	r3, [pc, #24]	; (1f87c <sys_arch_reboot+0x20>)
   1f864:	68ca      	ldr	r2, [r1, #12]
   1f866:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f86a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f86c:	60cb      	str	r3, [r1, #12]
   1f86e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1f872:	bf00      	nop
   1f874:	e7fd      	b.n	1f872 <sys_arch_reboot+0x16>
   1f876:	bf00      	nop
   1f878:	e000ed00 	.word	0xe000ed00
   1f87c:	05fa0004 	.word	0x05fa0004

0001f880 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   1f880:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f882:	2120      	movs	r1, #32
   1f884:	4803      	ldr	r0, [pc, #12]	; (1f894 <z_arm_int_lib_init+0x14>)
   1f886:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1f888:	3301      	adds	r3, #1
   1f88a:	2b41      	cmp	r3, #65	; 0x41
   1f88c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1f890:	d1f9      	bne.n	1f886 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1f892:	4770      	bx	lr
   1f894:	e000e100 	.word	0xe000e100

0001f898 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   1f898:	b538      	push	{r3, r4, r5, lr}
   1f89a:	4604      	mov	r4, r0
	__asm__ volatile(
   1f89c:	f04f 0320 	mov.w	r3, #32
   1f8a0:	f3ef 8511 	mrs	r5, BASEPRI
   1f8a4:	f383 8811 	msr	BASEPRI, r3
   1f8a8:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1f8ac:	7b03      	ldrb	r3, [r0, #12]
   1f8ae:	07db      	lsls	r3, r3, #31
   1f8b0:	d50c      	bpl.n	1f8cc <z_impl_k_thread_abort+0x34>
   1f8b2:	4912      	ldr	r1, [pc, #72]	; (1f8fc <z_impl_k_thread_abort+0x64>)
   1f8b4:	2324      	movs	r3, #36	; 0x24
   1f8b6:	4a12      	ldr	r2, [pc, #72]	; (1f900 <z_impl_k_thread_abort+0x68>)
   1f8b8:	4812      	ldr	r0, [pc, #72]	; (1f904 <z_impl_k_thread_abort+0x6c>)
   1f8ba:	f00f fa8c 	bl	2edd6 <printk>
   1f8be:	4812      	ldr	r0, [pc, #72]	; (1f908 <z_impl_k_thread_abort+0x70>)
   1f8c0:	f00f fa89 	bl	2edd6 <printk>
   1f8c4:	2124      	movs	r1, #36	; 0x24
   1f8c6:	480e      	ldr	r0, [pc, #56]	; (1f900 <z_impl_k_thread_abort+0x68>)
   1f8c8:	f00f facb 	bl	2ee62 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   1f8cc:	4620      	mov	r0, r4
   1f8ce:	f00b ffcf 	bl	2b870 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   1f8d2:	4b0e      	ldr	r3, [pc, #56]	; (1f90c <z_impl_k_thread_abort+0x74>)
   1f8d4:	689b      	ldr	r3, [r3, #8]
   1f8d6:	42a3      	cmp	r3, r4
   1f8d8:	d10b      	bne.n	1f8f2 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   1f8da:	4b0d      	ldr	r3, [pc, #52]	; (1f910 <z_impl_k_thread_abort+0x78>)
   1f8dc:	685a      	ldr	r2, [r3, #4]
   1f8de:	f3c2 0208 	ubfx	r2, r2, #0, #9
   1f8e2:	b912      	cbnz	r2, 1f8ea <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   1f8e4:	4628      	mov	r0, r5
   1f8e6:	f7ff fb1d 	bl	1ef24 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1f8ea:	685a      	ldr	r2, [r3, #4]
   1f8ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1f8f0:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   1f8f2:	4628      	mov	r0, r5
}
   1f8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1f8f8:	f010 b9a5 	b.w	2fc46 <z_reschedule_irqlock>
   1f8fc:	0003217c 	.word	0x0003217c
   1f900:	0003213b 	.word	0x0003213b
   1f904:	000316d1 	.word	0x000316d1
   1f908:	000321aa 	.word	0x000321aa
   1f90c:	200213cc 	.word	0x200213cc
   1f910:	e000ed00 	.word	0xe000ed00

0001f914 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1f914:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1f916:	4b0e      	ldr	r3, [pc, #56]	; (1f950 <z_arm_configure_static_mpu_regions+0x3c>)
{
   1f918:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   1f91a:	9302      	str	r3, [sp, #8]
   1f91c:	4b0d      	ldr	r3, [pc, #52]	; (1f954 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1f91e:	4c0e      	ldr	r4, [pc, #56]	; (1f958 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   1f920:	9303      	str	r3, [sp, #12]
   1f922:	4b0e      	ldr	r3, [pc, #56]	; (1f95c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1f924:	4a0e      	ldr	r2, [pc, #56]	; (1f960 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   1f926:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   1f928:	ab02      	add	r3, sp, #8
   1f92a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1f92c:	a801      	add	r0, sp, #4
   1f92e:	4623      	mov	r3, r4
   1f930:	2101      	movs	r1, #1
   1f932:	f000 f97d 	bl	1fc30 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   1f936:	2300      	movs	r3, #0
   1f938:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1f93a:	4b0a      	ldr	r3, [pc, #40]	; (1f964 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1f93c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1f93e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1f940:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1f942:	9305      	str	r3, [sp, #20]
   1f944:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1f946:	f000 f997 	bl	1fc78 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1f94a:	b008      	add	sp, #32
   1f94c:	bd10      	pop	{r4, pc}
   1f94e:	bf00      	nop
   1f950:	20020000 	.word	0x20020000
   1f954:	00000000 	.word	0x00000000
   1f958:	20040000 	.word	0x20040000
   1f95c:	00010006 	.word	0x00010006
   1f960:	20020000 	.word	0x20020000
   1f964:	20020000 	.word	0x20020000

0001f968 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   1f968:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1f96a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1f96c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1f96e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1f972:	f004 031f 	and.w	r3, r4, #31
   1f976:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1f978:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1f97a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1f97c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1f980:	4904      	ldr	r1, [pc, #16]	; (1f994 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1f982:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1f986:	f043 0301 	orr.w	r3, r3, #1
   1f98a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1f98c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1f98e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1f990:	bd10      	pop	{r4, pc}
   1f992:	bf00      	nop
   1f994:	e000ed90 	.word	0xe000ed90

0001f998 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   1f998:	280f      	cmp	r0, #15
{
   1f99a:	b510      	push	{r4, lr}
   1f99c:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   1f99e:	d912      	bls.n	1f9c6 <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1f9a0:	2301      	movs	r3, #1
   1f9a2:	f04f 0000 	mov.w	r0, #0
   1f9a6:	4a09      	ldr	r2, [pc, #36]	; (1f9cc <region_allocate_and_init+0x34>)
   1f9a8:	f363 0007 	bfi	r0, r3, #0, #8
   1f9ac:	4b08      	ldr	r3, [pc, #32]	; (1f9d0 <region_allocate_and_init+0x38>)
   1f9ae:	4909      	ldr	r1, [pc, #36]	; (1f9d4 <region_allocate_and_init+0x3c>)
   1f9b0:	1a9b      	subs	r3, r3, r2
   1f9b2:	08db      	lsrs	r3, r3, #3
   1f9b4:	4622      	mov	r2, r4
   1f9b6:	f363 108f 	bfi	r0, r3, #6, #10
   1f9ba:	f00f fa63 	bl	2ee84 <log_string_sync>
		return -EINVAL;
   1f9be:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1f9c2:	4620      	mov	r0, r4
   1f9c4:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   1f9c6:	f7ff ffcf 	bl	1f968 <region_init>
	return index;
   1f9ca:	e7fa      	b.n	1f9c2 <region_allocate_and_init+0x2a>
   1f9cc:	00030e1c 	.word	0x00030e1c
   1f9d0:	00030e74 	.word	0x00030e74
   1f9d4:	0003237d 	.word	0x0003237d

0001f9d8 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9dc:	4607      	mov	r7, r0
   1f9de:	4688      	mov	r8, r1
   1f9e0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1f9e2:	2600      	movs	r6, #0
	MPU->RNR = index;
   1f9e4:	4d58      	ldr	r5, [pc, #352]	; (1fb48 <mpu_configure_regions_and_partition.constprop.2+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1f9e6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1f9e8:	4546      	cmp	r6, r8
   1f9ea:	da3d      	bge.n	1fa68 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   1f9ec:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   1f9f0:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1f9f4:	f1b9 0f00 	cmp.w	r9, #0
   1f9f8:	d059      	beq.n	1faae <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   1f9fa:	f1b9 0f1f 	cmp.w	r9, #31
   1f9fe:	d922      	bls.n	1fa46 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   1fa00:	f019 0f1f 	tst.w	r9, #31
   1fa04:	d11f      	bne.n	1fa46 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   1fa06:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1fa0a:	f01a 0f1f 	tst.w	sl, #31
   1fa0e:	d11a      	bne.n	1fa46 <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1fa10:	4650      	mov	r0, sl
   1fa12:	f00f fad2 	bl	2efba <arm_cmse_mpu_region_get>
   1fa16:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1fa18:	eb09 000a 	add.w	r0, r9, sl
   1fa1c:	3801      	subs	r0, #1
   1fa1e:	f00f facc 	bl	2efba <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1fa22:	4583      	cmp	fp, r0
   1fa24:	d024      	beq.n	1fa70 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   1fa26:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1fa2a:	2301      	movs	r3, #1
   1fa2c:	f04f 0000 	mov.w	r0, #0
   1fa30:	4a46      	ldr	r2, [pc, #280]	; (1fb4c <mpu_configure_regions_and_partition.constprop.2+0x174>)
   1fa32:	f363 0007 	bfi	r0, r3, #0, #8
   1fa36:	4b46      	ldr	r3, [pc, #280]	; (1fb50 <mpu_configure_regions_and_partition.constprop.2+0x178>)
   1fa38:	4946      	ldr	r1, [pc, #280]	; (1fb54 <mpu_configure_regions_and_partition.constprop.2+0x17c>)
   1fa3a:	1a9b      	subs	r3, r3, r2
   1fa3c:	08db      	lsrs	r3, r3, #3
   1fa3e:	f363 108f 	bfi	r0, r3, #6, #10
   1fa42:	465a      	mov	r2, fp
   1fa44:	e00c      	b.n	1fa60 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1fa46:	2301      	movs	r3, #1
   1fa48:	f04f 0000 	mov.w	r0, #0
   1fa4c:	4a3f      	ldr	r2, [pc, #252]	; (1fb4c <mpu_configure_regions_and_partition.constprop.2+0x174>)
   1fa4e:	f363 0007 	bfi	r0, r3, #0, #8
   1fa52:	4b3f      	ldr	r3, [pc, #252]	; (1fb50 <mpu_configure_regions_and_partition.constprop.2+0x178>)
   1fa54:	4940      	ldr	r1, [pc, #256]	; (1fb58 <mpu_configure_regions_and_partition.constprop.2+0x180>)
   1fa56:	1a9b      	subs	r3, r3, r2
   1fa58:	4632      	mov	r2, r6
   1fa5a:	08db      	lsrs	r3, r3, #3
   1fa5c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   1fa60:	f00f fa10 	bl	2ee84 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1fa64:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1fa68:	4620      	mov	r0, r4
   1fa6a:	b005      	add	sp, #20
   1fa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1fa70:	f11b 0f16 	cmn.w	fp, #22
   1fa74:	d0d9      	beq.n	1fa2a <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   1fa76:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1fa78:	455b      	cmp	r3, fp
   1fa7a:	dbd6      	blt.n	1fa2a <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   1fa7c:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1fa80:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1fa82:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1fa86:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1fa88:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1fa8c:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1fa90:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1fa94:	e9d1 3200 	ldrd	r3, r2, [r1]
   1fa98:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1fa9a:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1fa9c:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   1faa0:	d118      	bne.n	1fad4 <mpu_configure_regions_and_partition.constprop.2+0xfc>
   1faa2:	45ca      	cmp	sl, r9
   1faa4:	d105      	bne.n	1fab2 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   1faa6:	fa5f f08b 	uxtb.w	r0, fp
   1faaa:	f00f fa6b 	bl	2ef84 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1faae:	3601      	adds	r6, #1
   1fab0:	e79a      	b.n	1f9e8 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   1fab2:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1fab6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1fab8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1fabc:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1fac0:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1fac2:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   1fac4:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1fac6:	f00f fa5d 	bl	2ef84 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1faca:	f110 0f16 	cmn.w	r0, #22
   1face:	d0c9      	beq.n	1fa64 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   1fad0:	1c44      	adds	r4, r0, #1
   1fad2:	e7ec      	b.n	1faae <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   1fad4:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1fad8:	692a      	ldr	r2, [r5, #16]
   1fada:	3b01      	subs	r3, #1
   1fadc:	f023 031f 	bic.w	r3, r3, #31
   1fae0:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1fae4:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1fae6:	45ca      	cmp	sl, r9
   1fae8:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1faea:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   1faec:	d0eb      	beq.n	1fac6 <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   1faee:	f00f fa49 	bl	2ef84 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1faf2:	f110 0f16 	cmn.w	r0, #22
   1faf6:	d0b5      	beq.n	1fa64 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   1faf8:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   1fafc:	68ea      	ldr	r2, [r5, #12]
   1fafe:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1fb02:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   1fb06:	f362 0304 	bfi	r3, r2, #0, #5
   1fb0a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1fb0e:	692b      	ldr	r3, [r5, #16]
   1fb10:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1fb14:	085b      	lsrs	r3, r3, #1
   1fb16:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   1fb1a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1fb1e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fb26:	4413      	add	r3, r2
   1fb28:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1fb2a:	f023 031f 	bic.w	r3, r3, #31
   1fb2e:	4453      	add	r3, sl
   1fb30:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   1fb34:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   1fb36:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   1fb3a:	4669      	mov	r1, sp
   1fb3c:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   1fb3e:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   1fb40:	f7ff ff2a 	bl	1f998 <region_allocate_and_init>
   1fb44:	e7c1      	b.n	1faca <mpu_configure_regions_and_partition.constprop.2+0xf2>
   1fb46:	bf00      	nop
   1fb48:	e000ed90 	.word	0xe000ed90
   1fb4c:	00030e1c 	.word	0x00030e1c
   1fb50:	00030e74 	.word	0x00030e74
   1fb54:	0003235a 	.word	0x0003235a
   1fb58:	00032337 	.word	0x00032337

0001fb5c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1fb5c:	2205      	movs	r2, #5
   1fb5e:	4b03      	ldr	r3, [pc, #12]	; (1fb6c <arm_core_mpu_enable+0x10>)
   1fb60:	605a      	str	r2, [r3, #4]
   1fb62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1fb66:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1fb6a:	4770      	bx	lr
   1fb6c:	e000ed90 	.word	0xe000ed90

0001fb70 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1fb70:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1fb74:	2200      	movs	r2, #0
   1fb76:	4b01      	ldr	r3, [pc, #4]	; (1fb7c <arm_core_mpu_disable+0xc>)
   1fb78:	605a      	str	r2, [r3, #4]
}
   1fb7a:	4770      	bx	lr
   1fb7c:	e000ed90 	.word	0xe000ed90

0001fb80 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   1fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1fb82:	4f21      	ldr	r7, [pc, #132]	; (1fc08 <arm_mpu_init+0x88>)
   1fb84:	683e      	ldr	r6, [r7, #0]
   1fb86:	2e10      	cmp	r6, #16
   1fb88:	d913      	bls.n	1fbb2 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1fb8a:	f240 132d 	movw	r3, #301	; 0x12d
   1fb8e:	4a1f      	ldr	r2, [pc, #124]	; (1fc0c <arm_mpu_init+0x8c>)
   1fb90:	491f      	ldr	r1, [pc, #124]	; (1fc10 <arm_mpu_init+0x90>)
   1fb92:	4820      	ldr	r0, [pc, #128]	; (1fc14 <arm_mpu_init+0x94>)
   1fb94:	f00f f91f 	bl	2edd6 <printk>
   1fb98:	2210      	movs	r2, #16
   1fb9a:	4631      	mov	r1, r6
   1fb9c:	481e      	ldr	r0, [pc, #120]	; (1fc18 <arm_mpu_init+0x98>)
   1fb9e:	f00f f91a 	bl	2edd6 <printk>
   1fba2:	481a      	ldr	r0, [pc, #104]	; (1fc0c <arm_mpu_init+0x8c>)
   1fba4:	f240 112d 	movw	r1, #301	; 0x12d
   1fba8:	f00f f95b 	bl	2ee62 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   1fbac:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   1fbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1fbb2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   1fbb4:	f7ff ffdc 	bl	1fb70 <arm_core_mpu_disable>
	MPU->MAIR0 =
   1fbb8:	4d18      	ldr	r5, [pc, #96]	; (1fc1c <arm_mpu_init+0x9c>)
   1fbba:	4a19      	ldr	r2, [pc, #100]	; (1fc20 <arm_mpu_init+0xa0>)
   1fbbc:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1fbbe:	42a6      	cmp	r6, r4
   1fbc0:	d119      	bne.n	1fbf6 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   1fbc2:	4b18      	ldr	r3, [pc, #96]	; (1fc24 <arm_mpu_init+0xa4>)
   1fbc4:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   1fbc6:	f7ff ffc9 	bl	1fb5c <arm_core_mpu_enable>
	__ASSERT(
   1fbca:	682b      	ldr	r3, [r5, #0]
   1fbcc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1fbd0:	2b10      	cmp	r3, #16
   1fbd2:	d00e      	beq.n	1fbf2 <arm_mpu_init+0x72>
   1fbd4:	4914      	ldr	r1, [pc, #80]	; (1fc28 <arm_mpu_init+0xa8>)
   1fbd6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1fbda:	4a0c      	ldr	r2, [pc, #48]	; (1fc0c <arm_mpu_init+0x8c>)
   1fbdc:	480d      	ldr	r0, [pc, #52]	; (1fc14 <arm_mpu_init+0x94>)
   1fbde:	f00f f8fa 	bl	2edd6 <printk>
   1fbe2:	4812      	ldr	r0, [pc, #72]	; (1fc2c <arm_mpu_init+0xac>)
   1fbe4:	f00f f8f7 	bl	2edd6 <printk>
   1fbe8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1fbec:	4807      	ldr	r0, [pc, #28]	; (1fc0c <arm_mpu_init+0x8c>)
   1fbee:	f00f f938 	bl	2ee62 <assert_post_action>
	return 0;
   1fbf2:	2000      	movs	r0, #0
   1fbf4:	e7dc      	b.n	1fbb0 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1fbf6:	6879      	ldr	r1, [r7, #4]
   1fbf8:	4620      	mov	r0, r4
   1fbfa:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1fbfe:	f7ff feb3 	bl	1f968 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1fc02:	3401      	adds	r4, #1
   1fc04:	e7db      	b.n	1fbbe <arm_mpu_init+0x3e>
   1fc06:	bf00      	nop
   1fc08:	0003105c 	.word	0x0003105c
   1fc0c:	00032251 	.word	0x00032251
   1fc10:	00033029 	.word	0x00033029
   1fc14:	000316d1 	.word	0x000316d1
   1fc18:	00032291 	.word	0x00032291
   1fc1c:	e000ed90 	.word	0xe000ed90
   1fc20:	0044ffaa 	.word	0x0044ffaa
   1fc24:	20021911 	.word	0x20021911
   1fc28:	000322c5 	.word	0x000322c5
   1fc2c:	00032316 	.word	0x00032316

0001fc30 <arm_core_mpu_configure_static_mpu_regions>:
{
   1fc30:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1fc32:	4c0c      	ldr	r4, [pc, #48]	; (1fc64 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1fc34:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1fc36:	7822      	ldrb	r2, [r4, #0]
   1fc38:	f7ff fece 	bl	1f9d8 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1fc3c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1fc3e:	3016      	adds	r0, #22
   1fc40:	d10f      	bne.n	1fc62 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1fc42:	23f3      	movs	r3, #243	; 0xf3
   1fc44:	4a08      	ldr	r2, [pc, #32]	; (1fc68 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1fc46:	4909      	ldr	r1, [pc, #36]	; (1fc6c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1fc48:	4809      	ldr	r0, [pc, #36]	; (1fc70 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1fc4a:	f00f f8c4 	bl	2edd6 <printk>
   1fc4e:	4629      	mov	r1, r5
   1fc50:	4808      	ldr	r0, [pc, #32]	; (1fc74 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   1fc52:	f00f f8c0 	bl	2edd6 <printk>
}
   1fc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1fc5a:	21f3      	movs	r1, #243	; 0xf3
   1fc5c:	4802      	ldr	r0, [pc, #8]	; (1fc68 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1fc5e:	f00f b900 	b.w	2ee62 <assert_post_action>
}
   1fc62:	bd38      	pop	{r3, r4, r5, pc}
   1fc64:	20021911 	.word	0x20021911
   1fc68:	00032251 	.word	0x00032251
   1fc6c:	00033029 	.word	0x00033029
   1fc70:	000316d1 	.word	0x000316d1
   1fc74:	000321f6 	.word	0x000321f6

0001fc78 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1fc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc7c:	4c2e      	ldr	r4, [pc, #184]	; (1fd38 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   1fc7e:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1fc80:	4680      	mov	r8, r0
   1fc82:	2700      	movs	r7, #0
   1fc84:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   1fc86:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   1fc8a:	4d2c      	ldr	r5, [pc, #176]	; (1fd3c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1fc8c:	454f      	cmp	r7, r9
   1fc8e:	db02      	blt.n	1fc96 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   1fc90:	b003      	add	sp, #12
   1fc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   1fc96:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1fc9a:	9301      	str	r3, [sp, #4]
   1fc9c:	2b00      	cmp	r3, #0
   1fc9e:	d046      	beq.n	1fd2e <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1fca0:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1fca4:	4608      	mov	r0, r1
   1fca6:	9100      	str	r1, [sp, #0]
   1fca8:	f00f f987 	bl	2efba <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1fcac:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1fcb0:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1fcb2:	1858      	adds	r0, r3, r1
   1fcb4:	3801      	subs	r0, #1
   1fcb6:	f00f f980 	bl	2efba <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1fcba:	4286      	cmp	r6, r0
   1fcbc:	4a20      	ldr	r2, [pc, #128]	; (1fd40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   1fcbe:	d018      	beq.n	1fcf2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   1fcc0:	2314      	movs	r3, #20
   1fcc2:	435f      	muls	r7, r3
   1fcc4:	f06f 0315 	mvn.w	r3, #21
   1fcc8:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1fccc:	f240 1303 	movw	r3, #259	; 0x103
   1fcd0:	4a1c      	ldr	r2, [pc, #112]	; (1fd44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1fcd2:	491d      	ldr	r1, [pc, #116]	; (1fd48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   1fcd4:	481d      	ldr	r0, [pc, #116]	; (1fd4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1fcd6:	f00f f87e 	bl	2edd6 <printk>
   1fcda:	4649      	mov	r1, r9
   1fcdc:	481c      	ldr	r0, [pc, #112]	; (1fd50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1fcde:	f00f f87a 	bl	2edd6 <printk>
   1fce2:	f240 1103 	movw	r1, #259	; 0x103
   1fce6:	4817      	ldr	r0, [pc, #92]	; (1fd44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   1fce8:	b003      	add	sp, #12
   1fcea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1fcee:	f00f b8b8 	b.w	2ee62 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1fcf2:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   1fcf6:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1fcf8:	d0e8      	beq.n	1fccc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1fcfa:	7813      	ldrb	r3, [r2, #0]
   1fcfc:	42b3      	cmp	r3, r6
   1fcfe:	dde5      	ble.n	1fccc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   1fd00:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   1fd04:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   1fd06:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   1fd08:	68e8      	ldr	r0, [r5, #12]
   1fd0a:	7b19      	ldrb	r1, [r3, #12]
   1fd0c:	f360 0104 	bfi	r1, r0, #0, #5
   1fd10:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1fd12:	6929      	ldr	r1, [r5, #16]
   1fd14:	7b18      	ldrb	r0, [r3, #12]
   1fd16:	0849      	lsrs	r1, r1, #1
   1fd18:	f361 1047 	bfi	r0, r1, #5, #3
   1fd1c:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1fd1e:	68eb      	ldr	r3, [r5, #12]
   1fd20:	f023 031f 	bic.w	r3, r3, #31
   1fd24:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1fd26:	692b      	ldr	r3, [r5, #16]
   1fd28:	f023 031f 	bic.w	r3, r3, #31
   1fd2c:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1fd2e:	3701      	adds	r7, #1
   1fd30:	3414      	adds	r4, #20
   1fd32:	f108 080c 	add.w	r8, r8, #12
   1fd36:	e7a9      	b.n	1fc8c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   1fd38:	200200fc 	.word	0x200200fc
   1fd3c:	e000ed90 	.word	0xe000ed90
   1fd40:	20021911 	.word	0x20021911
   1fd44:	00032251 	.word	0x00032251
   1fd48:	00033029 	.word	0x00033029
   1fd4c:	000316d1 	.word	0x000316d1
   1fd50:	00032222 	.word	0x00032222

0001fd54 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   1fd54:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   1fd56:	4b16      	ldr	r3, [pc, #88]	; (1fdb0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   1fd58:	460c      	mov	r4, r1
   1fd5a:	781d      	ldrb	r5, [r3, #0]
   1fd5c:	4606      	mov	r6, r0
   1fd5e:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   1fd60:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   1fd62:	4a14      	ldr	r2, [pc, #80]	; (1fdb4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1fd64:	2b0f      	cmp	r3, #15
   1fd66:	dd1d      	ble.n	1fda4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   1fd68:	4913      	ldr	r1, [pc, #76]	; (1fdb8 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   1fd6a:	f851 0b04 	ldr.w	r0, [r1], #4
   1fd6e:	f7ff fdfb 	bl	1f968 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   1fd72:	462a      	mov	r2, r5
   1fd74:	4621      	mov	r1, r4
   1fd76:	4630      	mov	r0, r6
   1fd78:	f7ff fe2e 	bl	1f9d8 <mpu_configure_regions_and_partition.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   1fd7c:	3016      	adds	r0, #22
   1fd7e:	d115      	bne.n	1fdac <arm_core_mpu_configure_dynamic_mpu_regions+0x58>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   1fd80:	f44f 7389 	mov.w	r3, #274	; 0x112
   1fd84:	4a0d      	ldr	r2, [pc, #52]	; (1fdbc <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   1fd86:	490e      	ldr	r1, [pc, #56]	; (1fdc0 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   1fd88:	480e      	ldr	r0, [pc, #56]	; (1fdc4 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   1fd8a:	f00f f824 	bl	2edd6 <printk>
   1fd8e:	4621      	mov	r1, r4
   1fd90:	480d      	ldr	r0, [pc, #52]	; (1fdc8 <arm_core_mpu_configure_dynamic_mpu_regions+0x74>)
   1fd92:	f00f f820 	bl	2edd6 <printk>
}
   1fd96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   1fd9a:	f44f 7189 	mov.w	r1, #274	; 0x112
   1fd9e:	4807      	ldr	r0, [pc, #28]	; (1fdbc <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   1fda0:	f00f b85f 	b.w	2ee62 <assert_post_action>
   1fda4:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   1fda6:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1fda8:	3301      	adds	r3, #1
   1fdaa:	e7db      	b.n	1fd64 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   1fdac:	bd70      	pop	{r4, r5, r6, pc}
   1fdae:	bf00      	nop
   1fdb0:	20021911 	.word	0x20021911
   1fdb4:	e000ed90 	.word	0xe000ed90
   1fdb8:	200200fc 	.word	0x200200fc
   1fdbc:	00032251 	.word	0x00032251
   1fdc0:	00033029 	.word	0x00033029
   1fdc4:	000316d1 	.word	0x000316d1
   1fdc8:	000321c9 	.word	0x000321c9

0001fdcc <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   1fdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdce:	4606      	mov	r6, r0
   1fdd0:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1fdd2:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   1fdd4:	4f06      	ldr	r7, [pc, #24]	; (1fdf0 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1fdd6:	42ac      	cmp	r4, r5
   1fdd8:	da08      	bge.n	1fdec <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1fdda:	683b      	ldr	r3, [r7, #0]
   1fddc:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1fdde:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1fde0:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1fde2:	f104 0401 	add.w	r4, r4, #1
   1fde6:	d001      	beq.n	1fdec <z_impl_zephyr_read_stdin+0x20>
   1fde8:	280d      	cmp	r0, #13
   1fdea:	d1f4      	bne.n	1fdd6 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   1fdec:	4620      	mov	r0, r4
   1fdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fdf0:	20026720 	.word	0x20026720

0001fdf4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdf6:	460e      	mov	r6, r1
   1fdf8:	4f09      	ldr	r7, [pc, #36]	; (1fe20 <z_impl_zephyr_write_stdout+0x2c>)
   1fdfa:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   1fdfc:	f1c0 0501 	rsb	r5, r0, #1
   1fe00:	192b      	adds	r3, r5, r4
   1fe02:	429e      	cmp	r6, r3
   1fe04:	dc01      	bgt.n	1fe0a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1fe06:	4630      	mov	r0, r6
   1fe08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1fe0a:	7863      	ldrb	r3, [r4, #1]
   1fe0c:	2b0a      	cmp	r3, #10
   1fe0e:	d102      	bne.n	1fe16 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1fe10:	683b      	ldr	r3, [r7, #0]
   1fe12:	200d      	movs	r0, #13
   1fe14:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1fe16:	683b      	ldr	r3, [r7, #0]
   1fe18:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1fe1c:	4798      	blx	r3
   1fe1e:	e7ef      	b.n	1fe00 <z_impl_zephyr_write_stdout+0xc>
   1fe20:	20026724 	.word	0x20026724

0001fe24 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1fe24:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1fe26:	2105      	movs	r1, #5
   1fe28:	4801      	ldr	r0, [pc, #4]	; (1fe30 <_exit+0xc>)
   1fe2a:	f7ff ffe3 	bl	1fdf4 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   1fe2e:	e7fe      	b.n	1fe2e <_exit+0xa>
   1fe30:	000323a3 	.word	0x000323a3

0001fe34 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   1fe34:	b538      	push	{r3, r4, r5, lr}
   1fe36:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   1fe38:	f04f 31ff 	mov.w	r1, #4294967295
   1fe3c:	480b      	ldr	r0, [pc, #44]	; (1fe6c <_sbrk+0x38>)
   1fe3e:	f00e ffdc 	bl	2edfa <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1fe42:	4a0b      	ldr	r2, [pc, #44]	; (1fe70 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1fe44:	490b      	ldr	r1, [pc, #44]	; (1fe74 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1fe46:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1fe48:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   1fe4c:	4425      	add	r5, r4
   1fe4e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1fe52:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   1fe54:	bf2c      	ite	cs
   1fe56:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1fe5a:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   1fe5c:	4803      	ldr	r0, [pc, #12]	; (1fe6c <_sbrk+0x38>)
		heap_sz += count;
   1fe5e:	bf38      	it	cc
   1fe60:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   1fe62:	f00e ffc5 	bl	2edf0 <sys_sem_give>

	return ret;
}
   1fe66:	4620      	mov	r0, r4
   1fe68:	bd38      	pop	{r3, r4, r5, pc}
   1fe6a:	bf00      	nop
   1fe6c:	20026a84 	.word	0x20026a84
   1fe70:	20020110 	.word	0x20020110
   1fe74:	20026b5c 	.word	0x20026b5c

0001fe78 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   1fe78:	b538      	push	{r3, r4, r5, lr}
   1fe7a:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   1fe7c:	4604      	mov	r4, r0
   1fe7e:	b970      	cbnz	r0, 1fe9e <net_if_flag_is_set+0x26>
   1fe80:	490b      	ldr	r1, [pc, #44]	; (1feb0 <net_if_flag_is_set+0x38>)
   1fe82:	f240 2311 	movw	r3, #529	; 0x211
   1fe86:	4a0b      	ldr	r2, [pc, #44]	; (1feb4 <net_if_flag_is_set+0x3c>)
   1fe88:	480b      	ldr	r0, [pc, #44]	; (1feb8 <net_if_flag_is_set+0x40>)
   1fe8a:	f00e ffa4 	bl	2edd6 <printk>
   1fe8e:	480b      	ldr	r0, [pc, #44]	; (1febc <net_if_flag_is_set+0x44>)
   1fe90:	f00e ffa1 	bl	2edd6 <printk>
   1fe94:	f240 2111 	movw	r1, #529	; 0x211
   1fe98:	4806      	ldr	r0, [pc, #24]	; (1feb4 <net_if_flag_is_set+0x3c>)
   1fe9a:	f00e ffe2 	bl	2ee62 <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fe9e:	6823      	ldr	r3, [r4, #0]
   1fea0:	330c      	adds	r3, #12
   1fea2:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fea6:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   1fea8:	f000 0001 	and.w	r0, r0, #1
   1feac:	bd38      	pop	{r3, r4, r5, pc}
   1feae:	bf00      	nop
   1feb0:	000323e8 	.word	0x000323e8
   1feb4:	000323c0 	.word	0x000323c0
   1feb8:	000316d1 	.word	0x000316d1
   1febc:	000323ee 	.word	0x000323ee

0001fec0 <net_if_flag_set.constprop.24>:
static inline void net_if_flag_set(struct net_if *iface,
   1fec0:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   1fec2:	4604      	mov	r4, r0
   1fec4:	b970      	cbnz	r0, 1fee4 <net_if_flag_set.constprop.24+0x24>
   1fec6:	490d      	ldr	r1, [pc, #52]	; (1fefc <net_if_flag_set.constprop.24+0x3c>)
   1fec8:	f240 13e3 	movw	r3, #483	; 0x1e3
   1fecc:	4a0c      	ldr	r2, [pc, #48]	; (1ff00 <net_if_flag_set.constprop.24+0x40>)
   1fece:	480d      	ldr	r0, [pc, #52]	; (1ff04 <net_if_flag_set.constprop.24+0x44>)
   1fed0:	f00e ff81 	bl	2edd6 <printk>
   1fed4:	480c      	ldr	r0, [pc, #48]	; (1ff08 <net_if_flag_set.constprop.24+0x48>)
   1fed6:	f00e ff7e 	bl	2edd6 <printk>
   1feda:	f240 11e3 	movw	r1, #483	; 0x1e3
   1fede:	4808      	ldr	r0, [pc, #32]	; (1ff00 <net_if_flag_set.constprop.24+0x40>)
   1fee0:	f00e ffbf 	bl	2ee62 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fee4:	6823      	ldr	r3, [r4, #0]
   1fee6:	330c      	adds	r3, #12
   1fee8:	e8d3 2fef 	ldaex	r2, [r3]
   1feec:	f042 0201 	orr.w	r2, r2, #1
   1fef0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1fef4:	2900      	cmp	r1, #0
   1fef6:	d1f7      	bne.n	1fee8 <net_if_flag_set.constprop.24+0x28>
}
   1fef8:	bd10      	pop	{r4, pc}
   1fefa:	bf00      	nop
   1fefc:	000323e8 	.word	0x000323e8
   1ff00:	000323c0 	.word	0x000323c0
   1ff04:	000316d1 	.word	0x000316d1
   1ff08:	000323ee 	.word	0x000323ee

0001ff0c <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1ff0c:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1ff0e:	2100      	movs	r1, #0
{
   1ff10:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1ff12:	f7ff ffb1 	bl	1fe78 <net_if_flag_is_set>
   1ff16:	b928      	cbnz	r0, 1ff24 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   1ff18:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   1ff1a:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1ff1c:	7e9b      	ldrb	r3, [r3, #26]
   1ff1e:	b11b      	cbz	r3, 1ff28 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   1ff20:	f7ff ffce 	bl	1fec0 <net_if_flag_set.constprop.24>
		return 0;
   1ff24:	2000      	movs	r0, #0
   1ff26:	e023      	b.n	1ff70 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1ff28:	f00f f876 	bl	2f018 <net_if_l2>
   1ff2c:	b9c0      	cbnz	r0, 1ff60 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1ff2e:	682b      	ldr	r3, [r5, #0]
   1ff30:	691b      	ldr	r3, [r3, #16]
   1ff32:	b973      	cbnz	r3, 1ff52 <net_if_up+0x46>
   1ff34:	490f      	ldr	r1, [pc, #60]	; (1ff74 <net_if_up+0x68>)
   1ff36:	f640 538f 	movw	r3, #3471	; 0xd8f
   1ff3a:	4a0f      	ldr	r2, [pc, #60]	; (1ff78 <net_if_up+0x6c>)
   1ff3c:	480f      	ldr	r0, [pc, #60]	; (1ff7c <net_if_up+0x70>)
   1ff3e:	f00e ff4a 	bl	2edd6 <printk>
   1ff42:	480f      	ldr	r0, [pc, #60]	; (1ff80 <net_if_up+0x74>)
   1ff44:	f00e ff47 	bl	2edd6 <printk>
   1ff48:	f640 518f 	movw	r1, #3471	; 0xd8f
   1ff4c:	480a      	ldr	r0, [pc, #40]	; (1ff78 <net_if_up+0x6c>)
   1ff4e:	f00e ff88 	bl	2ee62 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   1ff52:	4628      	mov	r0, r5
   1ff54:	f7ff ffb4 	bl	1fec0 <net_if_flag_set.constprop.24>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1ff58:	4628      	mov	r0, r5
   1ff5a:	f00f f862 	bl	2f022 <l2_flags_get>
   1ff5e:	e7e1      	b.n	1ff24 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1ff60:	6883      	ldr	r3, [r0, #8]
   1ff62:	2b00      	cmp	r3, #0
   1ff64:	d0e3      	beq.n	1ff2e <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   1ff66:	2101      	movs	r1, #1
   1ff68:	4628      	mov	r0, r5
   1ff6a:	4798      	blx	r3
	if (status < 0) {
   1ff6c:	2800      	cmp	r0, #0
   1ff6e:	dade      	bge.n	1ff2e <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1ff70:	bd38      	pop	{r3, r4, r5, pc}
   1ff72:	bf00      	nop
   1ff74:	000323f1 	.word	0x000323f1
   1ff78:	00032422 	.word	0x00032422
   1ff7c:	000316d1 	.word	0x000316d1
   1ff80:	000323ee 	.word	0x000323ee

0001ff84 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1ff84:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   1ff86:	4c07      	ldr	r4, [pc, #28]	; (1ffa4 <net_if_init+0x20>)
   1ff88:	4d07      	ldr	r5, [pc, #28]	; (1ffa8 <net_if_init+0x24>)
   1ff8a:	42ac      	cmp	r4, r5
   1ff8c:	d100      	bne.n	1ff90 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   1ff8e:	bd38      	pop	{r3, r4, r5, pc}
	return iface->if_dev->dev;
   1ff90:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   1ff92:	681b      	ldr	r3, [r3, #0]
   1ff94:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   1ff96:	b11b      	cbz	r3, 1ffa0 <net_if_init+0x1c>
   1ff98:	681b      	ldr	r3, [r3, #0]
   1ff9a:	b10b      	cbz	r3, 1ffa0 <net_if_init+0x1c>
	api->init(iface);
   1ff9c:	4620      	mov	r0, r4
   1ff9e:	4798      	blx	r3
	     iface++, if_count++) {
   1ffa0:	3420      	adds	r4, #32
   1ffa2:	e7f2      	b.n	1ff8a <net_if_init+0x6>
   1ffa4:	20026b20 	.word	0x20026b20
   1ffa8:	20026b40 	.word	0x20026b40

0001ffac <net_if_post_init>:

void net_if_post_init(void)
{
   1ffac:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ffae:	4c07      	ldr	r4, [pc, #28]	; (1ffcc <net_if_post_init+0x20>)
   1ffb0:	4d07      	ldr	r5, [pc, #28]	; (1ffd0 <net_if_post_init+0x24>)
   1ffb2:	42ac      	cmp	r4, r5
   1ffb4:	d100      	bne.n	1ffb8 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1ffb6:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1ffb8:	2103      	movs	r1, #3
   1ffba:	4620      	mov	r0, r4
   1ffbc:	f7ff ff5c 	bl	1fe78 <net_if_flag_is_set>
   1ffc0:	b910      	cbnz	r0, 1ffc8 <net_if_post_init+0x1c>
			net_if_up(iface);
   1ffc2:	4620      	mov	r0, r4
   1ffc4:	f7ff ffa2 	bl	1ff0c <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ffc8:	3420      	adds	r4, #32
   1ffca:	e7f2      	b.n	1ffb2 <net_if_post_init+0x6>
   1ffcc:	20026b20 	.word	0x20026b20
   1ffd0:	20026b40 	.word	0x20026b40

0001ffd4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1ffd4:	b570      	push	{r4, r5, r6, lr}
   1ffd6:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ffd8:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1ffda:	460d      	mov	r5, r1
   1ffdc:	b961      	cbnz	r1, 1fff8 <gpio_nrfx_manage_callback+0x24>
   1ffde:	4922      	ldr	r1, [pc, #136]	; (20068 <__kernel_ram_size+0x68>)
   1ffe0:	231c      	movs	r3, #28
   1ffe2:	4a22      	ldr	r2, [pc, #136]	; (2006c <__kernel_ram_size+0x6c>)
   1ffe4:	4822      	ldr	r0, [pc, #136]	; (20070 <__kernel_ram_size+0x70>)
   1ffe6:	f00e fef6 	bl	2edd6 <printk>
   1ffea:	4822      	ldr	r0, [pc, #136]	; (20074 <__kernel_ram_size+0x74>)
   1ffec:	f00e fef3 	bl	2edd6 <printk>
   1fff0:	211c      	movs	r1, #28
   1fff2:	481e      	ldr	r0, [pc, #120]	; (2006c <__kernel_ram_size+0x6c>)
   1fff4:	f00e ff35 	bl	2ee62 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1fff8:	686b      	ldr	r3, [r5, #4]
   1fffa:	b963      	cbnz	r3, 20016 <__kernel_ram_size+0x16>
   1fffc:	491e      	ldr	r1, [pc, #120]	; (20078 <__kernel_ram_size+0x78>)
   1fffe:	231d      	movs	r3, #29
   20000:	4a1a      	ldr	r2, [pc, #104]	; (2006c <__kernel_ram_size+0x6c>)
   20002:	481b      	ldr	r0, [pc, #108]	; (20070 <__kernel_ram_size+0x70>)
   20004:	f00e fee7 	bl	2edd6 <printk>
   20008:	481c      	ldr	r0, [pc, #112]	; (2007c <__kernel_ram_size+0x7c>)
   2000a:	f00e fee4 	bl	2edd6 <printk>
   2000e:	211d      	movs	r1, #29
   20010:	4816      	ldr	r0, [pc, #88]	; (2006c <__kernel_ram_size+0x6c>)
   20012:	f00e ff26 	bl	2ee62 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   20016:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   20018:	b15b      	cbz	r3, 20032 <__kernel_ram_size+0x32>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2001a:	2200      	movs	r2, #0
   2001c:	429d      	cmp	r5, r3
   2001e:	d113      	bne.n	20048 <__kernel_ram_size+0x48>
Z_GENLIST_REMOVE(slist, snode)
   20020:	682b      	ldr	r3, [r5, #0]
   20022:	b95a      	cbnz	r2, 2003c <__kernel_ram_size+0x3c>
   20024:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   20026:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   20028:	4295      	cmp	r5, r2
   2002a:	d100      	bne.n	2002e <__kernel_ram_size+0x2e>
	list->tail = node;
   2002c:	6063      	str	r3, [r4, #4]
	parent->next = child;
   2002e:	2300      	movs	r3, #0
   20030:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   20032:	b976      	cbnz	r6, 20052 <__kernel_ram_size+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   20034:	2000      	movs	r0, #0
				     callback, set);
}
   20036:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20038:	460b      	mov	r3, r1
   2003a:	e7ef      	b.n	2001c <__kernel_ram_size+0x1c>
	parent->next = child;
   2003c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2003e:	6863      	ldr	r3, [r4, #4]
   20040:	429d      	cmp	r5, r3
	list->tail = node;
   20042:	bf08      	it	eq
   20044:	6062      	streq	r2, [r4, #4]
   20046:	e7f2      	b.n	2002e <__kernel_ram_size+0x2e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20048:	6819      	ldr	r1, [r3, #0]
	return node->next;
   2004a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2004c:	2900      	cmp	r1, #0
   2004e:	d1f3      	bne.n	20038 <__kernel_ram_size+0x38>
			if (!set) {
   20050:	b13e      	cbz	r6, 20062 <__kernel_ram_size+0x62>
Z_GENLIST_PREPEND(slist, snode)
   20052:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   20054:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   20056:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   20058:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2005a:	2800      	cmp	r0, #0
   2005c:	d1ea      	bne.n	20034 <__kernel_ram_size+0x34>
	list->tail = node;
   2005e:	6065      	str	r5, [r4, #4]
   20060:	e7e9      	b.n	20036 <__kernel_ram_size+0x36>
				return -EINVAL;
   20062:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20066:	e7e6      	b.n	20036 <__kernel_ram_size+0x36>
   20068:	00032492 	.word	0x00032492
   2006c:	00032465 	.word	0x00032465
   20070:	000316d1 	.word	0x000316d1
   20074:	0003249b 	.word	0x0003249b
   20078:	000324aa 	.word	0x000324aa
   2007c:	000324bc 	.word	0x000324bc

00020080 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   20080:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   20082:	4a03      	ldr	r2, [pc, #12]	; (20090 <nrf_gpio_pin_port_decode.isra.8.part.9+0x10>)
   20084:	4b03      	ldr	r3, [pc, #12]	; (20094 <nrf_gpio_pin_port_decode.isra.8.part.9+0x14>)
   20086:	f240 11ff 	movw	r1, #511	; 0x1ff
   2008a:	4803      	ldr	r0, [pc, #12]	; (20098 <nrf_gpio_pin_port_decode.isra.8.part.9+0x18>)
   2008c:	f00d f94e 	bl	2d32c <__assert_func>
   20090:	0003244c 	.word	0x0003244c
   20094:	0003250b 	.word	0x0003250b
   20098:	00032519 	.word	0x00032519

0002009c <nrf_gpio_cfg_sense_set>:
   2009c:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   2009e:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   200a0:	d901      	bls.n	200a6 <nrf_gpio_cfg_sense_set+0xa>
   200a2:	f7ff ffed 	bl	20080 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   200a6:	4a06      	ldr	r2, [pc, #24]	; (200c0 <nrf_gpio_cfg_sense_set+0x24>)
   200a8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   200ac:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   200b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   200b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   200b8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   200bc:	bd08      	pop	{r3, pc}
   200be:	bf00      	nop
   200c0:	40842500 	.word	0x40842500

000200c4 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   200c4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   200c6:	4b09      	ldr	r3, [pc, #36]	; (200ec <gpio_nrfx_init+0x28>)
   200c8:	781a      	ldrb	r2, [r3, #0]
   200ca:	b96a      	cbnz	r2, 200e8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   200cc:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   200ce:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   200d0:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   200d2:	2105      	movs	r1, #5
   200d4:	f7fe ff50 	bl	1ef78 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   200d8:	2031      	movs	r0, #49	; 0x31
   200da:	f7fe ff3d 	bl	1ef58 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   200de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   200e2:	4b03      	ldr	r3, [pc, #12]	; (200f0 <gpio_nrfx_init+0x2c>)
   200e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   200e8:	2000      	movs	r0, #0
   200ea:	bd08      	pop	{r3, pc}
   200ec:	20021912 	.word	0x20021912
   200f0:	40031000 	.word	0x40031000

000200f4 <gpiote_pin_int_cfg>:
{
   200f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   200f8:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   200fa:	f001 041f 	and.w	r4, r1, #31
   200fe:	689b      	ldr	r3, [r3, #8]
{
   20100:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20102:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   20104:	4e4b      	ldr	r6, [pc, #300]	; (20234 <gpiote_pin_int_cfg+0x140>)
   20106:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2010a:	2300      	movs	r3, #0
   2010c:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   20110:	6887      	ldr	r7, [r0, #8]
   20112:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20114:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   20118:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   2011c:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   20120:	428c      	cmp	r4, r1
   20122:	d16c      	bne.n	201fe <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
   20124:	fa22 f103 	lsr.w	r1, r2, r3
   20128:	07c9      	lsls	r1, r1, #31
   2012a:	d568      	bpl.n	201fe <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   2012c:	009a      	lsls	r2, r3, #2
   2012e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20132:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   20136:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   2013a:	f021 0101 	bic.w	r1, r1, #1
   2013e:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   20142:	2201      	movs	r2, #1
   20144:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   20148:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2014c:	4620      	mov	r0, r4
   2014e:	2100      	movs	r1, #0
   20150:	f7ff ffa4 	bl	2009c <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   20154:	68b8      	ldr	r0, [r7, #8]
   20156:	40e8      	lsrs	r0, r5
   20158:	f010 0001 	ands.w	r0, r0, #1
   2015c:	d04d      	beq.n	201fa <gpiote_pin_int_cfg+0x106>
   2015e:	68f8      	ldr	r0, [r7, #12]
   20160:	40e8      	lsrs	r0, r5
   20162:	f010 0001 	ands.w	r0, r0, #1
   20166:	d048      	beq.n	201fa <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   20168:	6978      	ldr	r0, [r7, #20]
   2016a:	40e8      	lsrs	r0, r5
   2016c:	f010 0801 	ands.w	r8, r0, #1
   20170:	d051      	beq.n	20216 <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
   20172:	69bb      	ldr	r3, [r7, #24]
   20174:	40eb      	lsrs	r3, r5
   20176:	07db      	lsls	r3, r3, #31
   20178:	d445      	bmi.n	20206 <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
   2017a:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2017c:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   2017e:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   20180:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   20184:	f003 0301 	and.w	r3, r3, #1
   20188:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   2018c:	42ab      	cmp	r3, r5
   2018e:	bf14      	ite	ne
   20190:	2501      	movne	r5, #1
   20192:	2502      	moveq	r5, #2
   20194:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   20196:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   2019a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   2019e:	f010 0003 	ands.w	r0, r0, #3
   201a2:	d132      	bne.n	2020a <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   201a4:	008b      	lsls	r3, r1, #2
   201a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   201aa:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   201ae:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   201b2:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   201b4:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   201b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   201bc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   201c0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   201c4:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   201c8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   201cc:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
   201ce:	f101 0240 	add.w	r2, r1, #64	; 0x40
   201d2:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   201d4:	b292      	uxth	r2, r2
   201d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   201da:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   201de:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   201e2:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   201e4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   201e8:	f042 0201 	orr.w	r2, r2, #1
   201ec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   201f0:	2301      	movs	r3, #1
   201f2:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   201f6:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   201fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   201fe:	3301      	adds	r3, #1
   20200:	2b08      	cmp	r3, #8
   20202:	d187      	bne.n	20114 <gpiote_pin_int_cfg+0x20>
   20204:	e7a2      	b.n	2014c <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   20206:	2503      	movs	r5, #3
   20208:	e7c4      	b.n	20194 <gpiote_pin_int_cfg+0xa0>
   2020a:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2020c:	2908      	cmp	r1, #8
   2020e:	d1c2      	bne.n	20196 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   20210:	f06f 0012 	mvn.w	r0, #18
   20214:	e7f1      	b.n	201fa <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   20216:	693b      	ldr	r3, [r7, #16]
   20218:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2021a:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2021c:	4053      	eors	r3, r2
   2021e:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   20222:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   20226:	bf0c      	ite	eq
   20228:	2103      	moveq	r1, #3
   2022a:	2102      	movne	r1, #2
   2022c:	f7ff ff36 	bl	2009c <nrf_gpio_cfg_sense_set>
	int res = 0;
   20230:	4640      	mov	r0, r8
   20232:	e7e2      	b.n	201fa <gpiote_pin_int_cfg+0x106>
   20234:	40031000 	.word	0x40031000

00020238 <gpio_nrfx_config>:
{
   20238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2023c:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   2023e:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   20240:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   20244:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   20248:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2024a:	d040      	beq.n	202ce <gpio_nrfx_config+0x96>
   2024c:	dc09      	bgt.n	20262 <gpio_nrfx_config+0x2a>
   2024e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   20252:	d03e      	beq.n	202d2 <gpio_nrfx_config+0x9a>
   20254:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   20258:	d03d      	beq.n	202d6 <gpio_nrfx_config+0x9e>
   2025a:	b190      	cbz	r0, 20282 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   2025c:	f06f 0015 	mvn.w	r0, #21
   20260:	e032      	b.n	202c8 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   20262:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   20266:	d038      	beq.n	202da <gpio_nrfx_config+0xa2>
   20268:	dc04      	bgt.n	20274 <gpio_nrfx_config+0x3c>
   2026a:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   2026e:	d1f5      	bne.n	2025c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   20270:	2003      	movs	r0, #3
   20272:	e006      	b.n	20282 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   20274:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   20278:	d031      	beq.n	202de <gpio_nrfx_config+0xa6>
   2027a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   2027e:	d1ed      	bne.n	2025c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   20280:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   20282:	f406 7740 	and.w	r7, r6, #768	; 0x300
   20286:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   2028a:	d02a      	beq.n	202e2 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   2028c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   20290:	4263      	negs	r3, r4
   20292:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   20294:	2901      	cmp	r1, #1
		from_pin = pin;
   20296:	bf19      	ittee	ne
   20298:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   2029a:	46a1      	movne	r9, r4
		to_pin   = 31U;
   2029c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   202a0:	2400      	moveq	r4, #0
   202a2:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   202a6:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   202aa:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   202ae:	ea47 070c 	orr.w	r7, r7, ip
   202b2:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   202b6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 20360 <gpio_nrfx_config+0x128>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   202ba:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   202be:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   202c2:	45a1      	cmp	r9, r4
   202c4:	d20f      	bcs.n	202e6 <gpio_nrfx_config+0xae>
	return 0;
   202c6:	2000      	movs	r0, #0
}
   202c8:	b003      	add	sp, #12
   202ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   202ce:	2002      	movs	r0, #2
   202d0:	e7d7      	b.n	20282 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   202d2:	2001      	movs	r0, #1
   202d4:	e7d5      	b.n	20282 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   202d6:	2004      	movs	r0, #4
   202d8:	e7d3      	b.n	20282 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   202da:	2005      	movs	r0, #5
   202dc:	e7d1      	b.n	20282 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   202de:	2006      	movs	r0, #6
   202e0:	e7cf      	b.n	20282 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   202e2:	2303      	movs	r3, #3
   202e4:	e7d6      	b.n	20294 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   202e6:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   202ea:	6892      	ldr	r2, [r2, #8]
   202ec:	7911      	ldrb	r1, [r2, #4]
   202ee:	f004 021f 	and.w	r2, r4, #31
   202f2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   202f6:	2a1f      	cmp	r2, #31
   202f8:	dd01      	ble.n	202fe <gpio_nrfx_config+0xc6>
   202fa:	f7ff fec1 	bl	20080 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   202fe:	3280      	adds	r2, #128	; 0x80
   20300:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   20304:	68a9      	ldr	r1, [r5, #8]
   20306:	fa0b f204 	lsl.w	r2, fp, r4
   2030a:	2b00      	cmp	r3, #0
   2030c:	d025      	beq.n	2035a <gpio_nrfx_config+0x122>
   2030e:	4311      	orrs	r1, r2
   20310:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   20312:	6969      	ldr	r1, [r5, #20]
   20314:	06b0      	lsls	r0, r6, #26
   20316:	bf4c      	ite	mi
   20318:	4311      	orrmi	r1, r2
   2031a:	4391      	bicpl	r1, r2
   2031c:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   2031e:	69a9      	ldr	r1, [r5, #24]
   20320:	0670      	lsls	r0, r6, #25
   20322:	bf4c      	ite	mi
   20324:	4311      	orrmi	r1, r2
   20326:	4391      	bicpl	r1, r2
   20328:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   2032a:	6929      	ldr	r1, [r5, #16]
   2032c:	0770      	lsls	r0, r6, #29
   2032e:	bf4c      	ite	mi
   20330:	4311      	orrmi	r1, r2
   20332:	4391      	bicpl	r1, r2
   20334:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   20336:	69e9      	ldr	r1, [r5, #28]
   20338:	0630      	lsls	r0, r6, #24
   2033a:	bf4c      	ite	mi
   2033c:	430a      	orrmi	r2, r1
   2033e:	ea21 0202 	bicpl.w	r2, r1, r2
   20342:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   20344:	4621      	mov	r1, r4
   20346:	4640      	mov	r0, r8
   20348:	9301      	str	r3, [sp, #4]
   2034a:	f7ff fed3 	bl	200f4 <gpiote_pin_int_cfg>
		if (res != 0) {
   2034e:	2800      	cmp	r0, #0
   20350:	d1ba      	bne.n	202c8 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   20352:	3401      	adds	r4, #1
   20354:	b2e4      	uxtb	r4, r4
   20356:	9b01      	ldr	r3, [sp, #4]
   20358:	e7b3      	b.n	202c2 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2035a:	ea21 0102 	bic.w	r1, r1, r2
   2035e:	e7d7      	b.n	20310 <gpio_nrfx_config+0xd8>
   20360:	40842500 	.word	0x40842500

00020364 <gpiote_event_handler>:
{
   20364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20368:	4b56      	ldr	r3, [pc, #344]	; (204c4 <gpiote_event_handler+0x160>)
   2036a:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
   2036c:	4698      	mov	r8, r3
   2036e:	2e00      	cmp	r6, #0
   20370:	d05e      	beq.n	20430 <gpiote_event_handler+0xcc>
	u32_t bit = 1U << pin;
   20372:	2701      	movs	r7, #1
	u32_t pin = 0U;
   20374:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   20378:	4a53      	ldr	r2, [pc, #332]	; (204c8 <gpiote_event_handler+0x164>)
   2037a:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   2037c:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2037e:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   20380:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   20384:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   20388:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   2038a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2038e:	430a      	orrs	r2, r1
   20390:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   20394:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   20398:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   2039a:	6912      	ldr	r2, [r2, #16]
   2039c:	405c      	eors	r4, r3
   2039e:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   203a0:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   203a4:	bb9d      	cbnz	r5, 2040e <gpiote_event_handler+0xaa>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   203a6:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   203aa:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   203ac:	2001      	movs	r0, #1
   203ae:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   203b0:	4946      	ldr	r1, [pc, #280]	; (204cc <gpiote_event_handler+0x168>)
   203b2:	4d47      	ldr	r5, [pc, #284]	; (204d0 <gpiote_event_handler+0x16c>)
   203b4:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   203b8:	fa00 fc03 	lsl.w	ip, r0, r3
   203bc:	ea1c 0f02 	tst.w	ip, r2
   203c0:	d00d      	beq.n	203de <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203c2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   203c6:	b152      	cbz	r2, 203de <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   203c8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   203cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   203d0:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   203d4:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   203d8:	fa00 f202 	lsl.w	r2, r0, r2
   203dc:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   203de:	3301      	adds	r3, #1
   203e0:	2b08      	cmp	r3, #8
   203e2:	d1e7      	bne.n	203b4 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   203e4:	bb34      	cbnz	r4, 20434 <gpiote_event_handler+0xd0>
	if (port_event) {
   203e6:	b186      	cbz	r6, 2040a <gpiote_event_handler+0xa6>
	u32_t bit = 1U << pin;
   203e8:	2701      	movs	r7, #1
	u32_t pin = 0U;
   203ea:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   203ee:	4b36      	ldr	r3, [pc, #216]	; (204c8 <gpiote_event_handler+0x164>)
   203f0:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   203f2:	681b      	ldr	r3, [r3, #0]
   203f4:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   203f6:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   203fa:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   203fc:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   20400:	4313      	orrs	r3, r2
   20402:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   20406:	2c00      	cmp	r4, #0
   20408:	d142      	bne.n	20490 <gpiote_event_handler+0x12c>
}
   2040a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   2040e:	423d      	tst	r5, r7
   20410:	d00a      	beq.n	20428 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20412:	f899 3004 	ldrb.w	r3, [r9, #4]
   20416:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2041a:	2100      	movs	r1, #0
   2041c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   20420:	f7ff fe3c 	bl	2009c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   20424:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   20428:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   2042c:	007f      	lsls	r7, r7, #1
   2042e:	e7b9      	b.n	203a4 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   20430:	4634      	mov	r4, r6
   20432:	e7ba      	b.n	203aa <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   20434:	4b24      	ldr	r3, [pc, #144]	; (204c8 <gpiote_event_handler+0x164>)
   20436:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2043a:	f8d9 5000 	ldr.w	r5, [r9]
   2043e:	2d00      	cmp	r5, #0
   20440:	d0d1      	beq.n	203e6 <gpiote_event_handler+0x82>
			cb->handler(port, cb, pins);
   20442:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20444:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   20446:	f8df a094 	ldr.w	sl, [pc, #148]	; 204dc <gpiote_event_handler+0x178>
   2044a:	f8df b094 	ldr.w	fp, [pc, #148]	; 204e0 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   2044e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20452:	68aa      	ldr	r2, [r5, #8]
   20454:	4023      	ands	r3, r4
   20456:	4213      	tst	r3, r2
   20458:	d015      	beq.n	20486 <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
   2045a:	686b      	ldr	r3, [r5, #4]
   2045c:	b973      	cbnz	r3, 2047c <gpiote_event_handler+0x118>
   2045e:	4659      	mov	r1, fp
   20460:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   20464:	4652      	mov	r2, sl
   20466:	481b      	ldr	r0, [pc, #108]	; (204d4 <gpiote_event_handler+0x170>)
   20468:	f00e fcb5 	bl	2edd6 <printk>
   2046c:	481a      	ldr	r0, [pc, #104]	; (204d8 <gpiote_event_handler+0x174>)
   2046e:	f00e fcb2 	bl	2edd6 <printk>
   20472:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   20476:	4650      	mov	r0, sl
   20478:	f00e fcf3 	bl	2ee62 <assert_post_action>
			cb->handler(port, cb, pins);
   2047c:	686b      	ldr	r3, [r5, #4]
   2047e:	4622      	mov	r2, r4
   20480:	4629      	mov	r1, r5
   20482:	4640      	mov	r0, r8
   20484:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20486:	2f00      	cmp	r7, #0
   20488:	d0ad      	beq.n	203e6 <gpiote_event_handler+0x82>
   2048a:	463d      	mov	r5, r7
   2048c:	683f      	ldr	r7, [r7, #0]
   2048e:	e7de      	b.n	2044e <gpiote_event_handler+0xea>
		if (level_pins & bit) {
   20490:	4227      	tst	r7, r4
   20492:	d013      	beq.n	204bc <gpiote_event_handler+0x158>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   20494:	692b      	ldr	r3, [r5, #16]
   20496:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20498:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2049c:	4053      	eors	r3, r2
   2049e:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
   204a2:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   204a6:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   204aa:	bf0c      	ite	eq
   204ac:	2103      	moveq	r1, #3
   204ae:	2102      	movne	r1, #2
   204b0:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   204b4:	f7ff fdf2 	bl	2009c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   204b8:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   204bc:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   204c0:	007f      	lsls	r7, r7, #1
   204c2:	e7a0      	b.n	20406 <gpiote_event_handler+0xa2>
   204c4:	4003117c 	.word	0x4003117c
   204c8:	200269b0 	.word	0x200269b0
   204cc:	40031000 	.word	0x40031000
   204d0:	40031100 	.word	0x40031100
   204d4:	000316d1 	.word	0x000316d1
   204d8:	000324bc 	.word	0x000324bc
   204dc:	000324d3 	.word	0x000324d3
   204e0:	000324ff 	.word	0x000324ff

000204e4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   204e4:	4b02      	ldr	r3, [pc, #8]	; (204f0 <flash_nrf_pages_layout+0xc>)
   204e6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   204e8:	2301      	movs	r3, #1
   204ea:	6013      	str	r3, [r2, #0]
}
   204ec:	4770      	bx	lr
   204ee:	bf00      	nop
   204f0:	20020134 	.word	0x20020134

000204f4 <flash_nrf_erase>:
{
   204f4:	b570      	push	{r4, r5, r6, lr}
   204f6:	460d      	mov	r5, r1
   204f8:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   204fa:	f00f fb58 	bl	2fbae <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   204fe:	4621      	mov	r1, r4
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20500:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   20502:	4628      	mov	r0, r5
   20504:	f00e fe10 	bl	2f128 <is_regular_addr_valid>
   20508:	b1f0      	cbz	r0, 20548 <flash_nrf_erase+0x54>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2050a:	fbb5 f3f6 	udiv	r3, r5, r6
   2050e:	fb06 5313 	mls	r3, r6, r3, r5
   20512:	b9cb      	cbnz	r3, 20548 <flash_nrf_erase+0x54>
   20514:	fbb4 f0f6 	udiv	r0, r4, r6
   20518:	fb06 4010 	mls	r0, r6, r0, r4
   2051c:	b9a0      	cbnz	r0, 20548 <flash_nrf_erase+0x54>
		if (!n_pages) {
   2051e:	42a6      	cmp	r6, r4
   20520:	d811      	bhi.n	20546 <flash_nrf_erase+0x52>
	return z_impl_k_sem_take(sem, timeout);
   20522:	f04f 31ff 	mov.w	r1, #4294967295
   20526:	480a      	ldr	r0, [pc, #40]	; (20550 <flash_nrf_erase+0x5c>)
   20528:	f00b fe6a 	bl	2c200 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2052c:	f00f fb3f 	bl	2fbae <nrfx_nvmc_flash_page_size_get>
   20530:	4606      	mov	r6, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   20532:	4628      	mov	r0, r5
   20534:	f009 fcbc 	bl	29eb0 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   20538:	1ba4      	subs	r4, r4, r6
   2053a:	4435      	add	r5, r6
   2053c:	d1f9      	bne.n	20532 <flash_nrf_erase+0x3e>
	z_impl_k_sem_give(sem);
   2053e:	4804      	ldr	r0, [pc, #16]	; (20550 <flash_nrf_erase+0x5c>)
   20540:	f00b fe14 	bl	2c16c <z_impl_k_sem_give>
	return ret;
   20544:	4620      	mov	r0, r4
}
   20546:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20548:	f06f 0015 	mvn.w	r0, #21
   2054c:	e7fb      	b.n	20546 <flash_nrf_erase+0x52>
   2054e:	bf00      	nop
   20550:	2002013c 	.word	0x2002013c

00020554 <nrf_flash_init>:
{
   20554:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20556:	2201      	movs	r2, #1
   20558:	4806      	ldr	r0, [pc, #24]	; (20574 <nrf_flash_init+0x20>)
   2055a:	4611      	mov	r1, r2
   2055c:	f00f fba5 	bl	2fcaa <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   20560:	f00f fb28 	bl	2fbb4 <nrfx_nvmc_flash_page_count_get>
   20564:	4c04      	ldr	r4, [pc, #16]	; (20578 <nrf_flash_init+0x24>)
   20566:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   20568:	f00f fb21 	bl	2fbae <nrfx_nvmc_flash_page_size_get>
   2056c:	6060      	str	r0, [r4, #4]
}
   2056e:	2000      	movs	r0, #0
   20570:	bd10      	pop	{r4, pc}
   20572:	bf00      	nop
   20574:	2002013c 	.word	0x2002013c
   20578:	20020134 	.word	0x20020134

0002057c <flash_nrf_write>:
{
   2057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2057e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   20580:	4619      	mov	r1, r3
   20582:	4630      	mov	r0, r6
{
   20584:	4617      	mov	r7, r2
   20586:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   20588:	f00e fdce 	bl	2f128 <is_regular_addr_valid>
   2058c:	b1f8      	cbz	r0, 205ce <flash_nrf_write+0x52>
	return (data & 0x3) ? false : true;
   2058e:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
   20592:	f015 0503 	ands.w	r5, r5, #3
   20596:	d11a      	bne.n	205ce <flash_nrf_write+0x52>
	if (!len) {
   20598:	b1e4      	cbz	r4, 205d4 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2059a:	f04f 31ff 	mov.w	r1, #4294967295
   2059e:	480e      	ldr	r0, [pc, #56]	; (205d8 <flash_nrf_write+0x5c>)
   205a0:	f00b fe2e 	bl	2c200 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   205a4:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
   205a8:	42a5      	cmp	r5, r4
   205aa:	eb06 0005 	add.w	r0, r6, r5
   205ae:	d109      	bne.n	205c4 <flash_nrf_write+0x48>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   205b0:	4a0a      	ldr	r2, [pc, #40]	; (205dc <flash_nrf_write+0x60>)
   205b2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   205b6:	07db      	lsls	r3, r3, #31
   205b8:	d5fb      	bpl.n	205b2 <flash_nrf_write+0x36>
	z_impl_k_sem_give(sem);
   205ba:	4807      	ldr	r0, [pc, #28]	; (205d8 <flash_nrf_write+0x5c>)
   205bc:	f00b fdd6 	bl	2c16c <z_impl_k_sem_give>
   205c0:	2000      	movs	r0, #0
}
   205c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   205c4:	5979      	ldr	r1, [r7, r5]
   205c6:	f009 fc9f 	bl	29f08 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   205ca:	3504      	adds	r5, #4
   205cc:	e7ec      	b.n	205a8 <flash_nrf_write+0x2c>
		return -EINVAL;
   205ce:	f06f 0015 	mvn.w	r0, #21
   205d2:	e7f6      	b.n	205c2 <flash_nrf_write+0x46>
		return 0;
   205d4:	4620      	mov	r0, r4
   205d6:	e7f4      	b.n	205c2 <flash_nrf_write+0x46>
   205d8:	2002013c 	.word	0x2002013c
   205dc:	40039000 	.word	0x40039000

000205e0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   205e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   205e2:	794b      	ldrb	r3, [r1, #5]
   205e4:	2b01      	cmp	r3, #1
   205e6:	d029      	beq.n	2063c <uarte_nrfx_configure+0x5c>
   205e8:	2b03      	cmp	r3, #3
   205ea:	d124      	bne.n	20636 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   205ec:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   205ee:	798b      	ldrb	r3, [r1, #6]
   205f0:	2b03      	cmp	r3, #3
   205f2:	d120      	bne.n	20636 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   205f4:	79cc      	ldrb	r4, [r1, #7]
   205f6:	b12c      	cbz	r4, 20604 <uarte_nrfx_configure+0x24>
   205f8:	2c01      	cmp	r4, #1
   205fa:	d11c      	bne.n	20636 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   205fc:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   205fe:	689b      	ldr	r3, [r3, #8]
   20600:	791b      	ldrb	r3, [r3, #4]
   20602:	b1c3      	cbz	r3, 20636 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   20604:	790a      	ldrb	r2, [r1, #4]
   20606:	b112      	cbz	r2, 2060e <uarte_nrfx_configure+0x2e>
   20608:	2a02      	cmp	r2, #2
   2060a:	d114      	bne.n	20636 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2060c:	220e      	movs	r2, #14
	switch (baudrate) {
   2060e:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   20612:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20614:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20616:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   20618:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   2061a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2061c:	d062      	beq.n	206e4 <uarte_nrfx_configure+0x104>
   2061e:	d829      	bhi.n	20674 <uarte_nrfx_configure+0x94>
   20620:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20624:	d061      	beq.n	206ea <uarte_nrfx_configure+0x10a>
   20626:	d814      	bhi.n	20652 <uarte_nrfx_configure+0x72>
   20628:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2062c:	d05f      	beq.n	206ee <uarte_nrfx_configure+0x10e>
   2062e:	d807      	bhi.n	20640 <uarte_nrfx_configure+0x60>
   20630:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20634:	d05e      	beq.n	206f4 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   20636:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2063a:	e052      	b.n	206e2 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2063c:	2600      	movs	r6, #0
   2063e:	e7d6      	b.n	205ee <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   20640:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20644:	d059      	beq.n	206fa <uarte_nrfx_configure+0x11a>
   20646:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2064a:	d1f4      	bne.n	20636 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2064c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20650:	e03c      	b.n	206cc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   20652:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   20656:	d053      	beq.n	20700 <uarte_nrfx_configure+0x120>
   20658:	d804      	bhi.n	20664 <uarte_nrfx_configure+0x84>
   2065a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2065e:	d1ea      	bne.n	20636 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20660:	4b32      	ldr	r3, [pc, #200]	; (2072c <uarte_nrfx_configure+0x14c>)
   20662:	e033      	b.n	206cc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   20664:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20668:	d04c      	beq.n	20704 <uarte_nrfx_configure+0x124>
   2066a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2066e:	d1e2      	bne.n	20636 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20670:	4b2f      	ldr	r3, [pc, #188]	; (20730 <uarte_nrfx_configure+0x150>)
   20672:	e02b      	b.n	206cc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   20674:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   20678:	d046      	beq.n	20708 <uarte_nrfx_configure+0x128>
   2067a:	d812      	bhi.n	206a2 <uarte_nrfx_configure+0xc2>
   2067c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   20680:	42bb      	cmp	r3, r7
   20682:	d044      	beq.n	2070e <uarte_nrfx_configure+0x12e>
   20684:	d805      	bhi.n	20692 <uarte_nrfx_configure+0xb2>
   20686:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   2068a:	d1d4      	bne.n	20636 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2068c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   20690:	e01c      	b.n	206cc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   20692:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20696:	d03d      	beq.n	20714 <uarte_nrfx_configure+0x134>
   20698:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2069c:	d1cb      	bne.n	20636 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2069e:	4b25      	ldr	r3, [pc, #148]	; (20734 <uarte_nrfx_configure+0x154>)
   206a0:	e014      	b.n	206cc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   206a2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   206a6:	d038      	beq.n	2071a <uarte_nrfx_configure+0x13a>
   206a8:	d808      	bhi.n	206bc <uarte_nrfx_configure+0xdc>
   206aa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   206ae:	d037      	beq.n	20720 <uarte_nrfx_configure+0x140>
   206b0:	4f21      	ldr	r7, [pc, #132]	; (20738 <uarte_nrfx_configure+0x158>)
   206b2:	42bb      	cmp	r3, r7
   206b4:	d1bf      	bne.n	20636 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   206b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   206ba:	e007      	b.n	206cc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   206bc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   206c0:	d031      	beq.n	20726 <uarte_nrfx_configure+0x146>
   206c2:	4f1e      	ldr	r7, [pc, #120]	; (2073c <uarte_nrfx_configure+0x15c>)
   206c4:	42bb      	cmp	r3, r7
   206c6:	d1b6      	bne.n	20636 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   206c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   206cc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   206d0:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   206d2:	6883      	ldr	r3, [r0, #8]
   206d4:	4322      	orrs	r2, r4
   206d6:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   206d8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   206dc:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   206e0:	2000      	movs	r0, #0
}
   206e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   206e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   206e8:	e7f0      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   206ea:	4b15      	ldr	r3, [pc, #84]	; (20740 <uarte_nrfx_configure+0x160>)
   206ec:	e7ee      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   206ee:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   206f2:	e7eb      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   206f4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   206f8:	e7e8      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   206fa:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   206fe:	e7e5      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20700:	4b10      	ldr	r3, [pc, #64]	; (20744 <uarte_nrfx_configure+0x164>)
   20702:	e7e3      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   20704:	4b10      	ldr	r3, [pc, #64]	; (20748 <uarte_nrfx_configure+0x168>)
   20706:	e7e1      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   20708:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2070c:	e7de      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2070e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20712:	e7db      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20714:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20718:	e7d8      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2071a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2071e:	e7d5      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20720:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20724:	e7d2      	b.n	206cc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20726:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2072a:	e7cf      	b.n	206cc <uarte_nrfx_configure+0xec>
   2072c:	00275000 	.word	0x00275000
   20730:	0075c000 	.word	0x0075c000
   20734:	013a9000 	.word	0x013a9000
   20738:	0003d090 	.word	0x0003d090
   2073c:	000f4240 	.word	0x000f4240
   20740:	0013b000 	.word	0x0013b000
   20744:	003af000 	.word	0x003af000
   20748:	004ea000 	.word	0x004ea000

0002074c <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
   2074c:	b570      	push	{r4, r5, r6, lr}
   2074e:	4606      	mov	r6, r0
   20750:	2200      	movs	r2, #0
   20752:	2101      	movs	r1, #1
   20754:	2008      	movs	r0, #8
   20756:	f7fe fc0f 	bl	1ef78 <z_arm_irq_priority_set>
   2075a:	2008      	movs	r0, #8
   2075c:	f7fe fbfc 	bl	1ef58 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   20760:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   20764:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   20766:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   20768:	689b      	ldr	r3, [r3, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2076a:	4629      	mov	r1, r5
	return config->uarte_regs;
   2076c:	681c      	ldr	r4, [r3, #0]
   2076e:	4b14      	ldr	r3, [pc, #80]	; (207c0 <uarte_0_init+0x74>)
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   20770:	4630      	mov	r0, r6
   20772:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   20774:	2203      	movs	r2, #3
   20776:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
   2077a:	2200      	movs	r2, #0
   2077c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    p_reg->PSEL.TXD = pseltxd;
   20780:	231d      	movs	r3, #29
   20782:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   20786:	231c      	movs	r3, #28
   20788:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
   2078c:	f7ff ff28 	bl	205e0 <uarte_nrfx_configure>
	if (err) {
   20790:	b9a0      	cbnz	r0, 207bc <uarte_0_init+0x70>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20792:	2308      	movs	r3, #8
   20794:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   20798:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2079c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   207a0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   207a4:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   207a6:	68aa      	ldr	r2, [r5, #8]
   207a8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   207ac:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   207ae:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   207b0:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   207b4:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   207b8:	60a3      	str	r3, [r4, #8]
   207ba:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   207bc:	bd70      	pop	{r4, r5, r6, pc}
   207be:	bf00      	nop
   207c0:	40842500 	.word	0x40842500

000207c4 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   207c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   207c6:	460d      	mov	r5, r1
   207c8:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   207ca:	b948      	cbnz	r0, 207e0 <entropy_cc310_rng_get_entropy+0x1c>
   207cc:	4910      	ldr	r1, [pc, #64]	; (20810 <entropy_cc310_rng_get_entropy+0x4c>)
   207ce:	4811      	ldr	r0, [pc, #68]	; (20814 <entropy_cc310_rng_get_entropy+0x50>)
   207d0:	231e      	movs	r3, #30
   207d2:	4a11      	ldr	r2, [pc, #68]	; (20818 <entropy_cc310_rng_get_entropy+0x54>)
   207d4:	f00e faff 	bl	2edd6 <printk>
   207d8:	211e      	movs	r1, #30
   207da:	480f      	ldr	r0, [pc, #60]	; (20818 <entropy_cc310_rng_get_entropy+0x54>)
   207dc:	f00e fb41 	bl	2ee62 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   207e0:	b94d      	cbnz	r5, 207f6 <entropy_cc310_rng_get_entropy+0x32>
   207e2:	490e      	ldr	r1, [pc, #56]	; (2081c <entropy_cc310_rng_get_entropy+0x58>)
   207e4:	480b      	ldr	r0, [pc, #44]	; (20814 <entropy_cc310_rng_get_entropy+0x50>)
   207e6:	231f      	movs	r3, #31
   207e8:	4a0b      	ldr	r2, [pc, #44]	; (20818 <entropy_cc310_rng_get_entropy+0x54>)
   207ea:	f00e faf4 	bl	2edd6 <printk>
   207ee:	211f      	movs	r1, #31
   207f0:	4809      	ldr	r0, [pc, #36]	; (20818 <entropy_cc310_rng_get_entropy+0x54>)
   207f2:	f00e fb36 	bl	2ee62 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   207f6:	aa01      	add	r2, sp, #4
   207f8:	4621      	mov	r1, r4
   207fa:	4628      	mov	r0, r5
   207fc:	f7f7 fbf8 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   20800:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   20802:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   20804:	bf18      	it	ne
   20806:	f06f 0015 	mvnne.w	r0, #21
   2080a:	b003      	add	sp, #12
   2080c:	bd30      	pop	{r4, r5, pc}
   2080e:	bf00      	nop
   20810:	000325a6 	.word	0x000325a6
   20814:	000316d1 	.word	0x000316d1
   20818:	00032576 	.word	0x00032576
   2081c:	000325b9 	.word	0x000325b9

00020820 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   20820:	2200      	movs	r2, #0
{
   20822:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   20824:	4611      	mov	r1, r2
   20826:	202a      	movs	r0, #42	; 0x2a
   20828:	f7fe fba6 	bl	1ef78 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   2082c:	f003 fa06 	bl	23c3c <bsd_init>
   20830:	4b01      	ldr	r3, [pc, #4]	; (20838 <_bsdlib_init+0x18>)
   20832:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   20834:	2000      	movs	r0, #0
   20836:	bd08      	pop	{r3, pc}
   20838:	20020154 	.word	0x20020154

0002083c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2083c:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2083e:	4b0d      	ldr	r3, [pc, #52]	; (20874 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   20840:	4c0d      	ldr	r4, [pc, #52]	; (20878 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   20842:	681a      	ldr	r2, [r3, #0]
   20844:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   20846:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   20848:	4623      	mov	r3, r4
		if (entry->id == id) {
   2084a:	6819      	ldr	r1, [r3, #0]
   2084c:	4281      	cmp	r1, r0
   2084e:	d00e      	beq.n	2086e <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   20850:	b151      	cbz	r1, 20868 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   20852:	6859      	ldr	r1, [r3, #4]
   20854:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   20856:	42b1      	cmp	r1, r6
   20858:	bfc4      	itt	gt
   2085a:	461c      	movgt	r4, r3
   2085c:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   2085e:	3d01      	subs	r5, #1
   20860:	f103 0308 	add.w	r3, r3, #8
   20864:	d1f1      	bne.n	2084a <thread_monitor_entry_get+0xe>
   20866:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   20868:	3a01      	subs	r2, #1
	new_entry->id = id;
   2086a:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   2086c:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   2086e:	4618      	mov	r0, r3
   20870:	bd70      	pop	{r4, r5, r6, pc}
   20872:	bf00      	nop
   20874:	20020158 	.word	0x20020158
   20878:	20020164 	.word	0x20020164

0002087c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   2087c:	4668      	mov	r0, sp
   2087e:	f020 0107 	bic.w	r1, r0, #7
   20882:	468d      	mov	sp, r1
   20884:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20886:	4b0d      	ldr	r3, [pc, #52]	; (208bc <rpc_proxy_irq_handler+0x40>)
   20888:	e8d3 2fef 	ldaex	r2, [r3]
   2088c:	3201      	adds	r2, #1
   2088e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   20892:	2900      	cmp	r1, #0
   20894:	d1f8      	bne.n	20888 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   20896:	f007 fb89 	bl	27fac <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2089a:	4b09      	ldr	r3, [pc, #36]	; (208c0 <rpc_proxy_irq_handler+0x44>)
   2089c:	681c      	ldr	r4, [r3, #0]
   2089e:	b93c      	cbnz	r4, 208b0 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   208a0:	f7fe fb9c 	bl	1efdc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   208a4:	f7fe fa84 	bl	1edb0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   208a8:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   208ac:	4685      	mov	sp, r0
   208ae:	4770      	bx	lr
   208b0:	1d20      	adds	r0, r4, #4
   208b2:	f00b fc5b 	bl	2c16c <z_impl_k_sem_give>
   208b6:	6824      	ldr	r4, [r4, #0]
	return node->next;
   208b8:	e7f1      	b.n	2089e <rpc_proxy_irq_handler+0x22>
   208ba:	bf00      	nop
   208bc:	20020158 	.word	0x20020158
   208c0:	2002015c 	.word	0x2002015c

000208c4 <bsd_os_timedwait>:
{
   208c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208c8:	4688      	mov	r8, r1
   208ca:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   208cc:	f00f fa1d 	bl	2fd0a <z_impl_k_uptime_get>
	if (*timeout == 0) {
   208d0:	f8d8 3000 	ldr.w	r3, [r8]
   208d4:	4606      	mov	r6, r0
   208d6:	2b00      	cmp	r3, #0
   208d8:	460f      	mov	r7, r1
   208da:	d103      	bne.n	208e4 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   208dc:	f00b fac2 	bl	2be64 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   208e0:	203c      	movs	r0, #60	; 0x3c
   208e2:	e06e      	b.n	209c2 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   208e4:	bfbc      	itt	lt
   208e6:	f04f 33ff 	movlt.w	r3, #4294967295
   208ea:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
   208ee:	2201      	movs	r2, #1
   208f0:	2100      	movs	r1, #0
   208f2:	a802      	add	r0, sp, #8
   208f4:	f00f f9d9 	bl	2fcaa <z_impl_k_sem_init>
   208f8:	f10d 0a04 	add.w	sl, sp, #4
   208fc:	f04f 0320 	mov.w	r3, #32
   20900:	f3ef 8b11 	mrs	fp, BASEPRI
   20904:	f383 8811 	msr	BASEPRI, r3
   20908:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2090c:	f00b fc28 	bl	2c160 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   20910:	f7ff ff94 	bl	2083c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   20914:	4933      	ldr	r1, [pc, #204]	; (209e4 <bsd_os_timedwait+0x120>)
   20916:	6843      	ldr	r3, [r0, #4]
   20918:	680a      	ldr	r2, [r1, #0]
   2091a:	4689      	mov	r9, r1
   2091c:	4293      	cmp	r3, r2
   2091e:	f04f 0300 	mov.w	r3, #0
   20922:	d108      	bne.n	20936 <bsd_os_timedwait+0x72>
	parent->next = child;
   20924:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   20926:	4b30      	ldr	r3, [pc, #192]	; (209e8 <bsd_os_timedwait+0x124>)
   20928:	685a      	ldr	r2, [r3, #4]
   2092a:	2a00      	cmp	r2, #0
   2092c:	d14c      	bne.n	209c8 <bsd_os_timedwait+0x104>
	list->head = node;
   2092e:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   20932:	2301      	movs	r3, #1
   20934:	e000      	b.n	20938 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   20936:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   20938:	f38b 8811 	msr	BASEPRI, fp
   2093c:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   20940:	2b00      	cmp	r3, #0
   20942:	d03d      	beq.n	209c0 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   20944:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   20948:	a802      	add	r0, sp, #8
   2094a:	f00b fc59 	bl	2c200 <z_impl_k_sem_take>
	__asm__ volatile(
   2094e:	f04f 0320 	mov.w	r3, #32
   20952:	f3ef 8b11 	mrs	fp, BASEPRI
   20956:	f383 8811 	msr	BASEPRI, r3
   2095a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2095e:	2000      	movs	r0, #0
   20960:	4b21      	ldr	r3, [pc, #132]	; (209e8 <bsd_os_timedwait+0x124>)
   20962:	681a      	ldr	r2, [r3, #0]
   20964:	b152      	cbz	r2, 2097c <bsd_os_timedwait+0xb8>
   20966:	4552      	cmp	r2, sl
   20968:	d139      	bne.n	209de <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   2096a:	9901      	ldr	r1, [sp, #4]
   2096c:	bb88      	cbnz	r0, 209d2 <bsd_os_timedwait+0x10e>
   2096e:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   20970:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   20972:	4290      	cmp	r0, r2
   20974:	d100      	bne.n	20978 <bsd_os_timedwait+0xb4>
	list->tail = node;
   20976:	6059      	str	r1, [r3, #4]
	parent->next = child;
   20978:	2300      	movs	r3, #0
   2097a:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   2097c:	f00b fbf0 	bl	2c160 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   20980:	f7ff ff5c 	bl	2083c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   20984:	f8d9 3000 	ldr.w	r3, [r9]
   20988:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2098a:	f38b 8811 	msr	BASEPRI, fp
   2098e:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   20992:	f8d8 9000 	ldr.w	r9, [r8]
   20996:	f1b9 3fff 	cmp.w	r9, #4294967295
   2099a:	d011      	beq.n	209c0 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   2099c:	f00f f9b5 	bl	2fd0a <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   209a0:	eb16 0209 	adds.w	r2, r6, r9
   209a4:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   209a8:	1a14      	subs	r4, r2, r0
   209aa:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   209ae:	2c00      	cmp	r4, #0
   209b0:	f175 0300 	sbcs.w	r3, r5, #0
   209b4:	bfb8      	it	lt
   209b6:	2400      	movlt	r4, #0
   209b8:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   209bc:	2c00      	cmp	r4, #0
   209be:	d08f      	beq.n	208e0 <bsd_os_timedwait+0x1c>
	return 0;
   209c0:	2000      	movs	r0, #0
}
   209c2:	b009      	add	sp, #36	; 0x24
   209c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209c8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   209cc:	f8c3 a004 	str.w	sl, [r3, #4]
   209d0:	e7af      	b.n	20932 <bsd_os_timedwait+0x6e>
	parent->next = child;
   209d2:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   209d4:	6859      	ldr	r1, [r3, #4]
   209d6:	4291      	cmp	r1, r2
	list->tail = node;
   209d8:	bf08      	it	eq
   209da:	6058      	streq	r0, [r3, #4]
   209dc:	e7cc      	b.n	20978 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   209de:	4610      	mov	r0, r2
   209e0:	6812      	ldr	r2, [r2, #0]
   209e2:	e7bf      	b.n	20964 <bsd_os_timedwait+0xa0>
   209e4:	20020158 	.word	0x20020158
   209e8:	2002015c 	.word	0x2002015c

000209ec <bsd_os_errno_set>:
	switch (err_code) {
   209ec:	282d      	cmp	r0, #45	; 0x2d
{
   209ee:	b510      	push	{r4, lr}
   209f0:	4604      	mov	r4, r0
	switch (err_code) {
   209f2:	f000 80a8 	beq.w	20b46 <bsd_os_errno_set+0x15a>
   209f6:	dc50      	bgt.n	20a9a <bsd_os_errno_set+0xae>
   209f8:	2816      	cmp	r0, #22
   209fa:	d009      	beq.n	20a10 <bsd_os_errno_set+0x24>
   209fc:	dc38      	bgt.n	20a70 <bsd_os_errno_set+0x84>
   209fe:	2808      	cmp	r0, #8
   20a00:	d006      	beq.n	20a10 <bsd_os_errno_set+0x24>
   20a02:	dc09      	bgt.n	20a18 <bsd_os_errno_set+0x2c>
   20a04:	2802      	cmp	r0, #2
   20a06:	d003      	beq.n	20a10 <bsd_os_errno_set+0x24>
   20a08:	2805      	cmp	r0, #5
   20a0a:	d001      	beq.n	20a10 <bsd_os_errno_set+0x24>
   20a0c:	2801      	cmp	r0, #1
   20a0e:	d10c      	bne.n	20a2a <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   20a10:	f00e faf9 	bl	2f006 <__errno>
   20a14:	6004      	str	r4, [r0, #0]
}
   20a16:	bd10      	pop	{r4, pc}
	switch (err_code) {
   20a18:	280c      	cmp	r0, #12
   20a1a:	d0f9      	beq.n	20a10 <bsd_os_errno_set+0x24>
   20a1c:	dc01      	bgt.n	20a22 <bsd_os_errno_set+0x36>
   20a1e:	2809      	cmp	r0, #9
   20a20:	e7f5      	b.n	20a0e <bsd_os_errno_set+0x22>
   20a22:	280d      	cmp	r0, #13
   20a24:	d0f4      	beq.n	20a10 <bsd_os_errno_set+0x24>
   20a26:	280e      	cmp	r0, #14
   20a28:	d074      	beq.n	20b14 <bsd_os_errno_set+0x128>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   20a2a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   20a2e:	4a63      	ldr	r2, [pc, #396]	; (20bbc <bsd_os_errno_set+0x1d0>)
   20a30:	4963      	ldr	r1, [pc, #396]	; (20bc0 <bsd_os_errno_set+0x1d4>)
   20a32:	4864      	ldr	r0, [pc, #400]	; (20bc4 <bsd_os_errno_set+0x1d8>)
   20a34:	f00e f9cf 	bl	2edd6 <printk>
   20a38:	4621      	mov	r1, r4
   20a3a:	4863      	ldr	r0, [pc, #396]	; (20bc8 <bsd_os_errno_set+0x1dc>)
   20a3c:	f00e f9cb 	bl	2edd6 <printk>
   20a40:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   20a44:	485d      	ldr	r0, [pc, #372]	; (20bbc <bsd_os_errno_set+0x1d0>)
   20a46:	f00e fa0c 	bl	2ee62 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   20a4a:	2301      	movs	r3, #1
   20a4c:	f04f 0000 	mov.w	r0, #0
   20a50:	4a5e      	ldr	r2, [pc, #376]	; (20bcc <bsd_os_errno_set+0x1e0>)
   20a52:	f363 0007 	bfi	r0, r3, #0, #8
   20a56:	4b5e      	ldr	r3, [pc, #376]	; (20bd0 <bsd_os_errno_set+0x1e4>)
   20a58:	495e      	ldr	r1, [pc, #376]	; (20bd4 <bsd_os_errno_set+0x1e8>)
   20a5a:	1a9b      	subs	r3, r3, r2
   20a5c:	08db      	lsrs	r3, r3, #3
   20a5e:	f363 108f 	bfi	r0, r3, #6, #10
   20a62:	4622      	mov	r2, r4
   20a64:	f00e fa0e 	bl	2ee84 <log_string_sync>
		errno = 0xBAADBAAD;
   20a68:	f00e facd 	bl	2f006 <__errno>
   20a6c:	4b5a      	ldr	r3, [pc, #360]	; (20bd8 <bsd_os_errno_set+0x1ec>)
   20a6e:	e054      	b.n	20b1a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   20a70:	2828      	cmp	r0, #40	; 0x28
   20a72:	f000 809f 	beq.w	20bb4 <bsd_os_errno_set+0x1c8>
   20a76:	dc05      	bgt.n	20a84 <bsd_os_errno_set+0x98>
   20a78:	2823      	cmp	r0, #35	; 0x23
   20a7a:	d050      	beq.n	20b1e <bsd_os_errno_set+0x132>
   20a7c:	2825      	cmp	r0, #37	; 0x25
   20a7e:	d052      	beq.n	20b26 <bsd_os_errno_set+0x13a>
   20a80:	2818      	cmp	r0, #24
   20a82:	e7c4      	b.n	20a0e <bsd_os_errno_set+0x22>
   20a84:	282a      	cmp	r0, #42	; 0x2a
   20a86:	d056      	beq.n	20b36 <bsd_os_errno_set+0x14a>
   20a88:	db51      	blt.n	20b2e <bsd_os_errno_set+0x142>
   20a8a:	282b      	cmp	r0, #43	; 0x2b
   20a8c:	d057      	beq.n	20b3e <bsd_os_errno_set+0x152>
   20a8e:	282c      	cmp	r0, #44	; 0x2c
   20a90:	d1cb      	bne.n	20a2a <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   20a92:	f00e fab8 	bl	2f006 <__errno>
   20a96:	237c      	movs	r3, #124	; 0x7c
   20a98:	e03f      	b.n	20b1a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   20a9a:	283c      	cmp	r0, #60	; 0x3c
   20a9c:	d06b      	beq.n	20b76 <bsd_os_errno_set+0x18a>
   20a9e:	dc1d      	bgt.n	20adc <bsd_os_errno_set+0xf0>
   20aa0:	2833      	cmp	r0, #51	; 0x33
   20aa2:	d05c      	beq.n	20b5e <bsd_os_errno_set+0x172>
   20aa4:	dc09      	bgt.n	20aba <bsd_os_errno_set+0xce>
   20aa6:	2830      	cmp	r0, #48	; 0x30
   20aa8:	d051      	beq.n	20b4e <bsd_os_errno_set+0x162>
   20aaa:	2832      	cmp	r0, #50	; 0x32
   20aac:	d053      	beq.n	20b56 <bsd_os_errno_set+0x16a>
   20aae:	282f      	cmp	r0, #47	; 0x2f
   20ab0:	d1bb      	bne.n	20a2a <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   20ab2:	f00e faa8 	bl	2f006 <__errno>
   20ab6:	236a      	movs	r3, #106	; 0x6a
   20ab8:	e02f      	b.n	20b1a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   20aba:	2836      	cmp	r0, #54	; 0x36
   20abc:	d053      	beq.n	20b66 <bsd_os_errno_set+0x17a>
   20abe:	dc05      	bgt.n	20acc <bsd_os_errno_set+0xe0>
   20ac0:	2834      	cmp	r0, #52	; 0x34
   20ac2:	d1b2      	bne.n	20a2a <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   20ac4:	f00e fa9f 	bl	2f006 <__errno>
   20ac8:	237e      	movs	r3, #126	; 0x7e
   20aca:	e026      	b.n	20b1a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   20acc:	2838      	cmp	r0, #56	; 0x38
   20ace:	d04e      	beq.n	20b6e <bsd_os_errno_set+0x182>
   20ad0:	2839      	cmp	r0, #57	; 0x39
   20ad2:	d1aa      	bne.n	20a2a <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   20ad4:	f00e fa97 	bl	2f006 <__errno>
   20ad8:	2380      	movs	r3, #128	; 0x80
   20ada:	e01e      	b.n	20b1a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   20adc:	287d      	cmp	r0, #125	; 0x7d
   20ade:	d056      	beq.n	20b8e <bsd_os_errno_set+0x1a2>
   20ae0:	dc0c      	bgt.n	20afc <bsd_os_errno_set+0x110>
   20ae2:	2870      	cmp	r0, #112	; 0x70
   20ae4:	d04b      	beq.n	20b7e <bsd_os_errno_set+0x192>
   20ae6:	dc01      	bgt.n	20aec <bsd_os_errno_set+0x100>
   20ae8:	2869      	cmp	r0, #105	; 0x69
   20aea:	e790      	b.n	20a0e <bsd_os_errno_set+0x22>
   20aec:	2872      	cmp	r0, #114	; 0x72
   20aee:	d04a      	beq.n	20b86 <bsd_os_errno_set+0x19a>
   20af0:	2873      	cmp	r0, #115	; 0x73
   20af2:	d19a      	bne.n	20a2a <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   20af4:	f00e fa87 	bl	2f006 <__errno>
   20af8:	2377      	movs	r3, #119	; 0x77
   20afa:	e00e      	b.n	20b1a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   20afc:	287f      	cmp	r0, #127	; 0x7f
   20afe:	d04f      	beq.n	20ba0 <bsd_os_errno_set+0x1b4>
   20b00:	db49      	blt.n	20b96 <bsd_os_errno_set+0x1aa>
   20b02:	2880      	cmp	r0, #128	; 0x80
   20b04:	d051      	beq.n	20baa <bsd_os_errno_set+0x1be>
   20b06:	2881      	cmp	r0, #129	; 0x81
   20b08:	d18f      	bne.n	20a2a <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   20b0a:	f00e fa7c 	bl	2f006 <__errno>
   20b0e:	f240 73d4 	movw	r3, #2004	; 0x7d4
   20b12:	e002      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EFAULT;
   20b14:	f00e fa77 	bl	2f006 <__errno>
   20b18:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   20b1a:	6003      	str	r3, [r0, #0]
}
   20b1c:	e77b      	b.n	20a16 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   20b1e:	f00e fa72 	bl	2f006 <__errno>
   20b22:	230b      	movs	r3, #11
   20b24:	e7f9      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EDOM;
   20b26:	f00e fa6e 	bl	2f006 <__errno>
   20b2a:	2321      	movs	r3, #33	; 0x21
   20b2c:	e7f5      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EPROTOTYPE;
   20b2e:	f00e fa6a 	bl	2f006 <__errno>
   20b32:	236b      	movs	r3, #107	; 0x6b
   20b34:	e7f1      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = ENOPROTOOPT;
   20b36:	f00e fa66 	bl	2f006 <__errno>
   20b3a:	236d      	movs	r3, #109	; 0x6d
   20b3c:	e7ed      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EPROTONOSUPPORT;
   20b3e:	f00e fa62 	bl	2f006 <__errno>
   20b42:	237b      	movs	r3, #123	; 0x7b
   20b44:	e7e9      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EOPNOTSUPP;
   20b46:	f00e fa5e 	bl	2f006 <__errno>
   20b4a:	235f      	movs	r3, #95	; 0x5f
   20b4c:	e7e5      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EADDRINUSE;
   20b4e:	f00e fa5a 	bl	2f006 <__errno>
   20b52:	2370      	movs	r3, #112	; 0x70
   20b54:	e7e1      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = ENETDOWN;
   20b56:	f00e fa56 	bl	2f006 <__errno>
   20b5a:	2373      	movs	r3, #115	; 0x73
   20b5c:	e7dd      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = ENETUNREACH;
   20b5e:	f00e fa52 	bl	2f006 <__errno>
   20b62:	2372      	movs	r3, #114	; 0x72
   20b64:	e7d9      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = ECONNRESET;
   20b66:	f00e fa4e 	bl	2f006 <__errno>
   20b6a:	2368      	movs	r3, #104	; 0x68
   20b6c:	e7d5      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EISCONN;
   20b6e:	f00e fa4a 	bl	2f006 <__errno>
   20b72:	237f      	movs	r3, #127	; 0x7f
   20b74:	e7d1      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = ETIMEDOUT;
   20b76:	f00e fa46 	bl	2f006 <__errno>
   20b7a:	2374      	movs	r3, #116	; 0x74
   20b7c:	e7cd      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EHOSTDOWN;
   20b7e:	f00e fa42 	bl	2f006 <__errno>
   20b82:	2375      	movs	r3, #117	; 0x75
   20b84:	e7c9      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EALREADY;
   20b86:	f00e fa3e 	bl	2f006 <__errno>
   20b8a:	2378      	movs	r3, #120	; 0x78
   20b8c:	e7c5      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = ECANCELED;
   20b8e:	f00e fa3a 	bl	2f006 <__errno>
   20b92:	238c      	movs	r3, #140	; 0x8c
   20b94:	e7c1      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = ENOKEY;
   20b96:	f00e fa36 	bl	2f006 <__errno>
   20b9a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   20b9e:	e7bc      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EKEYEXPIRED;
   20ba0:	f00e fa31 	bl	2f006 <__errno>
   20ba4:	f240 73d2 	movw	r3, #2002	; 0x7d2
   20ba8:	e7b7      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EKEYREVOKED;
   20baa:	f00e fa2c 	bl	2f006 <__errno>
   20bae:	f240 73d3 	movw	r3, #2003	; 0x7d3
   20bb2:	e7b2      	b.n	20b1a <bsd_os_errno_set+0x12e>
		errno = EMSGSIZE;
   20bb4:	f00e fa27 	bl	2f006 <__errno>
   20bb8:	237a      	movs	r3, #122	; 0x7a
   20bba:	e7ae      	b.n	20b1a <bsd_os_errno_set+0x12e>
   20bbc:	000325d9 	.word	0x000325d9
   20bc0:	00033029 	.word	0x00033029
   20bc4:	000316d1 	.word	0x000316d1
   20bc8:	000325fd 	.word	0x000325fd
   20bcc:	00030e1c 	.word	0x00030e1c
   20bd0:	00030e34 	.word	0x00030e34
   20bd4:	00032624 	.word	0x00032624
   20bd8:	baadbaad 	.word	0xbaadbaad

00020bdc <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20be0:	4b01      	ldr	r3, [pc, #4]	; (20be8 <bsd_os_application_irq_set+0xc>)
   20be2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   20be6:	4770      	bx	lr
   20be8:	e000e100 	.word	0xe000e100

00020bec <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20bf0:	4b01      	ldr	r3, [pc, #4]	; (20bf8 <bsd_os_application_irq_clear+0xc>)
   20bf2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   20bf6:	4770      	bx	lr
   20bf8:	e000e100 	.word	0xe000e100

00020bfc <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20bfc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   20c00:	4b01      	ldr	r3, [pc, #4]	; (20c08 <bsd_os_trace_irq_set+0xc>)
   20c02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   20c06:	4770      	bx	lr
   20c08:	e000e100 	.word	0xe000e100

00020c0c <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20c0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   20c10:	4b01      	ldr	r3, [pc, #4]	; (20c18 <bsd_os_trace_irq_clear+0xc>)
   20c12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   20c16:	4770      	bx	lr
   20c18:	e000e100 	.word	0xe000e100

00020c1c <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   20c1c:	b508      	push	{r3, lr}
	list->head = NULL;
   20c1e:	2300      	movs	r3, #0
   20c20:	4a07      	ldr	r2, [pc, #28]	; (20c40 <bsd_os_init+0x24>)
	list->tail = NULL;
   20c22:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20c26:	4a07      	ldr	r2, [pc, #28]	; (20c44 <bsd_os_init+0x28>)
   20c28:	e8d2 1fef 	ldaex	r1, [r2]
   20c2c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   20c30:	2800      	cmp	r0, #0
   20c32:	d1f9      	bne.n	20c28 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   20c34:	f00e fbc3 	bl	2f3be <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   20c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   20c3c:	f00e bbb4 	b.w	2f3a8 <trace_task_create>
   20c40:	2002015c 	.word	0x2002015c
   20c44:	20020158 	.word	0x20020158

00020c48 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   20c48:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   20c4c:	d03c      	beq.n	20cc8 <z_to_nrf_optname+0x80>
   20c4e:	dc04      	bgt.n	20c5a <z_to_nrf_optname+0x12>
   20c50:	2801      	cmp	r0, #1
   20c52:	d044      	beq.n	20cde <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   20c54:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   20c58:	4770      	bx	lr
	switch (z_in_level) {
   20c5a:	f240 2302 	movw	r3, #514	; 0x202
   20c5e:	4298      	cmp	r0, r3
   20c60:	d052      	beq.n	20d08 <z_to_nrf_optname+0xc0>
   20c62:	f240 2303 	movw	r3, #515	; 0x203
   20c66:	4298      	cmp	r0, r3
   20c68:	d1f4      	bne.n	20c54 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   20c6a:	3901      	subs	r1, #1
   20c6c:	2913      	cmp	r1, #19
   20c6e:	d8f1      	bhi.n	20c54 <z_to_nrf_optname+0xc>
   20c70:	a301      	add	r3, pc, #4	; (adr r3, 20c78 <z_to_nrf_optname+0x30>)
   20c72:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   20c76:	bf00      	nop
   20c78:	00020d15 	.word	0x00020d15
   20c7c:	00020cd9 	.word	0x00020cd9
   20c80:	00020cf9 	.word	0x00020cf9
   20c84:	00020ceb 	.word	0x00020ceb
   20c88:	00020cfd 	.word	0x00020cfd
   20c8c:	00020d01 	.word	0x00020d01
   20c90:	00020d05 	.word	0x00020d05
   20c94:	00020c55 	.word	0x00020c55
   20c98:	00020c55 	.word	0x00020c55
   20c9c:	00020c55 	.word	0x00020c55
   20ca0:	00020c55 	.word	0x00020c55
   20ca4:	00020c55 	.word	0x00020c55
   20ca8:	00020c55 	.word	0x00020c55
   20cac:	00020c55 	.word	0x00020c55
   20cb0:	00020c55 	.word	0x00020c55
   20cb4:	00020c55 	.word	0x00020c55
   20cb8:	00020c55 	.word	0x00020c55
   20cbc:	00020c55 	.word	0x00020c55
   20cc0:	00020c55 	.word	0x00020c55
   20cc4:	00020cef 	.word	0x00020cef
		switch (z_in_optname) {
   20cc8:	3901      	subs	r1, #1
   20cca:	2905      	cmp	r1, #5
   20ccc:	d8c2      	bhi.n	20c54 <z_to_nrf_optname+0xc>
   20cce:	e8df f001 	tbb	[pc, r1]
   20cd2:	1503      	.short	0x1503
   20cd4:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   20cd8:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   20cda:	6013      	str	r3, [r2, #0]
   20cdc:	e00a      	b.n	20cf4 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   20cde:	2914      	cmp	r1, #20
   20ce0:	d005      	beq.n	20cee <z_to_nrf_optname+0xa6>
   20ce2:	2919      	cmp	r1, #25
   20ce4:	d005      	beq.n	20cf2 <z_to_nrf_optname+0xaa>
   20ce6:	2904      	cmp	r1, #4
   20ce8:	d1b4      	bne.n	20c54 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   20cea:	2304      	movs	r3, #4
   20cec:	e7f5      	b.n	20cda <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   20cee:	2314      	movs	r3, #20
   20cf0:	e7f3      	b.n	20cda <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   20cf2:	6011      	str	r1, [r2, #0]
	int retval = 0;
   20cf4:	2000      	movs	r0, #0
			break;
   20cf6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   20cf8:	2303      	movs	r3, #3
   20cfa:	e7ee      	b.n	20cda <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   20cfc:	2305      	movs	r3, #5
   20cfe:	e7ec      	b.n	20cda <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   20d00:	2306      	movs	r3, #6
   20d02:	e7ea      	b.n	20cda <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   20d04:	2307      	movs	r3, #7
   20d06:	e7e8      	b.n	20cda <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   20d08:	2902      	cmp	r1, #2
   20d0a:	d0e5      	beq.n	20cd8 <z_to_nrf_optname+0x90>
   20d0c:	2903      	cmp	r1, #3
   20d0e:	d0f3      	beq.n	20cf8 <z_to_nrf_optname+0xb0>
   20d10:	2901      	cmp	r1, #1
   20d12:	d19f      	bne.n	20c54 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   20d14:	2301      	movs	r3, #1
   20d16:	e7e0      	b.n	20cda <z_to_nrf_optname+0x92>

00020d18 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   20d18:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   20d1a:	4b03      	ldr	r3, [pc, #12]	; (20d28 <nrf91_socket_iface_init+0x10>)
   20d1c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   20d1e:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   20d20:	4802      	ldr	r0, [pc, #8]	; (20d2c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   20d22:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   20d24:	f7fd bc5e 	b.w	1e5e4 <socket_offload_register>
   20d28:	200201b4 	.word	0x200201b4
   20d2c:	0003111c 	.word	0x0003111c

00020d30 <close>:

	return socket_ops->socket(family, type, proto);
}

static inline int close(int sock)
{
   20d30:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   20d32:	4c10      	ldr	r4, [pc, #64]	; (20d74 <close+0x44>)
{
   20d34:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   20d36:	6823      	ldr	r3, [r4, #0]
   20d38:	b94b      	cbnz	r3, 20d4e <close+0x1e>
   20d3a:	490f      	ldr	r1, [pc, #60]	; (20d78 <close+0x48>)
   20d3c:	480f      	ldr	r0, [pc, #60]	; (20d7c <close+0x4c>)
   20d3e:	2321      	movs	r3, #33	; 0x21
   20d40:	4a0f      	ldr	r2, [pc, #60]	; (20d80 <close+0x50>)
   20d42:	f00e f848 	bl	2edd6 <printk>
   20d46:	2121      	movs	r1, #33	; 0x21
   20d48:	480d      	ldr	r0, [pc, #52]	; (20d80 <close+0x50>)
   20d4a:	f00e f88a 	bl	2ee62 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   20d4e:	6823      	ldr	r3, [r4, #0]
   20d50:	685b      	ldr	r3, [r3, #4]
   20d52:	b94b      	cbnz	r3, 20d68 <close+0x38>
   20d54:	490b      	ldr	r1, [pc, #44]	; (20d84 <close+0x54>)
   20d56:	4809      	ldr	r0, [pc, #36]	; (20d7c <close+0x4c>)
   20d58:	2322      	movs	r3, #34	; 0x22
   20d5a:	4a09      	ldr	r2, [pc, #36]	; (20d80 <close+0x50>)
   20d5c:	f00e f83b 	bl	2edd6 <printk>
   20d60:	2122      	movs	r1, #34	; 0x22
   20d62:	4807      	ldr	r0, [pc, #28]	; (20d80 <close+0x50>)
   20d64:	f00e f87d 	bl	2ee62 <assert_post_action>

	return socket_ops->close(sock);
   20d68:	6823      	ldr	r3, [r4, #0]
   20d6a:	4628      	mov	r0, r5
}
   20d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   20d70:	685b      	ldr	r3, [r3, #4]
   20d72:	4718      	bx	r3
   20d74:	20020030 	.word	0x20020030
   20d78:	00032752 	.word	0x00032752
   20d7c:	000316d1 	.word	0x000316d1
   20d80:	00032722 	.word	0x00032722
   20d84:	0003275d 	.word	0x0003275d

00020d88 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   20d88:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   20d8a:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   20d8c:	b118      	cbz	r0, 20d96 <callback_worker+0xe>
		data->callback(data->data);
   20d8e:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   20d92:	300c      	adds	r0, #12
   20d94:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   20d96:	a901      	add	r1, sp, #4
   20d98:	4802      	ldr	r0, [pc, #8]	; (20da4 <callback_worker+0x1c>)
   20d9a:	f009 fb17 	bl	2a3cc <k_mem_slab_free>
}
   20d9e:	b003      	add	sp, #12
   20da0:	f85d fb04 	ldr.w	pc, [sp], #4
   20da4:	20026a1c 	.word	0x20026a1c

00020da8 <open_socket>:
{
   20da8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   20daa:	4c16      	ldr	r4, [pc, #88]	; (20e04 <open_socket+0x5c>)
   20dac:	6823      	ldr	r3, [r4, #0]
   20dae:	b94b      	cbnz	r3, 20dc4 <open_socket+0x1c>
   20db0:	4915      	ldr	r1, [pc, #84]	; (20e08 <open_socket+0x60>)
   20db2:	4816      	ldr	r0, [pc, #88]	; (20e0c <open_socket+0x64>)
   20db4:	2319      	movs	r3, #25
   20db6:	4a16      	ldr	r2, [pc, #88]	; (20e10 <open_socket+0x68>)
   20db8:	f00e f80d 	bl	2edd6 <printk>
   20dbc:	2119      	movs	r1, #25
   20dbe:	4814      	ldr	r0, [pc, #80]	; (20e10 <open_socket+0x68>)
   20dc0:	f00e f84f 	bl	2ee62 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   20dc4:	6823      	ldr	r3, [r4, #0]
   20dc6:	681b      	ldr	r3, [r3, #0]
   20dc8:	b94b      	cbnz	r3, 20dde <open_socket+0x36>
   20dca:	4912      	ldr	r1, [pc, #72]	; (20e14 <open_socket+0x6c>)
   20dcc:	480f      	ldr	r0, [pc, #60]	; (20e0c <open_socket+0x64>)
   20dce:	231a      	movs	r3, #26
   20dd0:	4a0f      	ldr	r2, [pc, #60]	; (20e10 <open_socket+0x68>)
   20dd2:	f00e f800 	bl	2edd6 <printk>
   20dd6:	211a      	movs	r1, #26
   20dd8:	480d      	ldr	r0, [pc, #52]	; (20e10 <open_socket+0x68>)
   20dda:	f00e f842 	bl	2ee62 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   20dde:	6823      	ldr	r3, [r4, #0]
   20de0:	f240 2201 	movw	r2, #513	; 0x201
   20de4:	681b      	ldr	r3, [r3, #0]
   20de6:	2102      	movs	r1, #2
   20de8:	2066      	movs	r0, #102	; 0x66
   20dea:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   20dec:	4b0a      	ldr	r3, [pc, #40]	; (20e18 <open_socket+0x70>)
   20dee:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   20df0:	3001      	adds	r0, #1
   20df2:	d104      	bne.n	20dfe <open_socket+0x56>
		return -errno;
   20df4:	f00e f907 	bl	2f006 <__errno>
   20df8:	6800      	ldr	r0, [r0, #0]
   20dfa:	4240      	negs	r0, r0
}
   20dfc:	bd10      	pop	{r4, pc}
	return 0;
   20dfe:	2000      	movs	r0, #0
   20e00:	e7fc      	b.n	20dfc <open_socket+0x54>
   20e02:	bf00      	nop
   20e04:	20020030 	.word	0x20020030
   20e08:	00032752 	.word	0x00032752
   20e0c:	000316d1 	.word	0x000316d1
   20e10:	00032722 	.word	0x00032722
   20e14:	0003276f 	.word	0x0003276f
   20e18:	200201b8 	.word	0x200201b8

00020e1c <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   20e1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20e20:	4680      	mov	r8, r0
   20e22:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   20e24:	f7fc f928 	bl	1d078 <strlen>
}

static inline ssize_t send(int sock, const void *buf, size_t len,
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   20e28:	4c30      	ldr	r4, [pc, #192]	; (20eec <at_write+0xd0>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   20e2a:	4b31      	ldr	r3, [pc, #196]	; (20ef0 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   20e2c:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   20e2e:	681f      	ldr	r7, [r3, #0]
   20e30:	6823      	ldr	r3, [r4, #0]
   20e32:	b94b      	cbnz	r3, 20e48 <at_write+0x2c>
   20e34:	492f      	ldr	r1, [pc, #188]	; (20ef4 <at_write+0xd8>)
   20e36:	4830      	ldr	r0, [pc, #192]	; (20ef8 <at_write+0xdc>)
   20e38:	237e      	movs	r3, #126	; 0x7e
   20e3a:	4a30      	ldr	r2, [pc, #192]	; (20efc <at_write+0xe0>)
   20e3c:	f00d ffcb 	bl	2edd6 <printk>
   20e40:	217e      	movs	r1, #126	; 0x7e
   20e42:	482e      	ldr	r0, [pc, #184]	; (20efc <at_write+0xe0>)
   20e44:	f00e f80d 	bl	2ee62 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   20e48:	6823      	ldr	r3, [r4, #0]
   20e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20e4c:	b94b      	cbnz	r3, 20e62 <at_write+0x46>
   20e4e:	492c      	ldr	r1, [pc, #176]	; (20f00 <at_write+0xe4>)
   20e50:	4829      	ldr	r0, [pc, #164]	; (20ef8 <at_write+0xdc>)
   20e52:	237f      	movs	r3, #127	; 0x7f
   20e54:	4a29      	ldr	r2, [pc, #164]	; (20efc <at_write+0xe0>)
   20e56:	f00d ffbe 	bl	2edd6 <printk>
   20e5a:	217f      	movs	r1, #127	; 0x7f
   20e5c:	4827      	ldr	r0, [pc, #156]	; (20efc <at_write+0xe0>)
   20e5e:	f00e f800 	bl	2ee62 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   20e62:	6823      	ldr	r3, [r4, #0]
   20e64:	4632      	mov	r2, r6
   20e66:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   20e68:	4641      	mov	r1, r8
   20e6a:	2300      	movs	r3, #0
   20e6c:	4638      	mov	r0, r7
   20e6e:	47a0      	blx	r4

	if (bytes_sent == -1) {
   20e70:	1c43      	adds	r3, r0, #1
   20e72:	4604      	mov	r4, r0
   20e74:	d121      	bne.n	20eba <at_write+0x9e>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   20e76:	2301      	movs	r3, #1
   20e78:	f04f 0400 	mov.w	r4, #0
   20e7c:	4a21      	ldr	r2, [pc, #132]	; (20f04 <at_write+0xe8>)
   20e7e:	f363 0407 	bfi	r4, r3, #0, #8
   20e82:	4b21      	ldr	r3, [pc, #132]	; (20f08 <at_write+0xec>)
   20e84:	1a9b      	subs	r3, r3, r2
   20e86:	08db      	lsrs	r3, r3, #3
   20e88:	f363 148f 	bfi	r4, r3, #6, #10
   20e8c:	f00e f8bb 	bl	2f006 <__errno>
   20e90:	491e      	ldr	r1, [pc, #120]	; (20f0c <at_write+0xf0>)
   20e92:	6802      	ldr	r2, [r0, #0]
   20e94:	4620      	mov	r0, r4
   20e96:	f00d fff5 	bl	2ee84 <log_string_sync>
		ret.code  = -errno;
   20e9a:	f00e f8b4 	bl	2f006 <__errno>
   20e9e:	6803      	ldr	r3, [r0, #0]
   20ea0:	425b      	negs	r3, r3
   20ea2:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   20ea4:	2301      	movs	r3, #1
   20ea6:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   20eaa:	b115      	cbz	r5, 20eb2 <at_write+0x96>
		*state = ret.state;
   20eac:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20eb0:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   20eb2:	9800      	ldr	r0, [sp, #0]
   20eb4:	b002      	add	sp, #8
   20eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   20eba:	f04f 32ff 	mov.w	r2, #4294967295
   20ebe:	4669      	mov	r1, sp
   20ec0:	4813      	ldr	r0, [pc, #76]	; (20f10 <at_write+0xf4>)
   20ec2:	f009 fc95 	bl	2a7f0 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   20ec6:	42a6      	cmp	r6, r4
   20ec8:	d0ef      	beq.n	20eaa <at_write+0x8e>
			LOG_ERR("Bytes sent (%d) was not the "
   20eca:	2301      	movs	r3, #1
   20ecc:	f04f 0000 	mov.w	r0, #0
   20ed0:	4a0c      	ldr	r2, [pc, #48]	; (20f04 <at_write+0xe8>)
   20ed2:	f363 0007 	bfi	r0, r3, #0, #8
   20ed6:	4b0c      	ldr	r3, [pc, #48]	; (20f08 <at_write+0xec>)
   20ed8:	490e      	ldr	r1, [pc, #56]	; (20f14 <at_write+0xf8>)
   20eda:	1a9b      	subs	r3, r3, r2
   20edc:	08db      	lsrs	r3, r3, #3
   20ede:	f363 108f 	bfi	r0, r3, #6, #10
   20ee2:	4622      	mov	r2, r4
   20ee4:	4633      	mov	r3, r6
   20ee6:	f00d ffcd 	bl	2ee84 <log_string_sync>
   20eea:	e7de      	b.n	20eaa <at_write+0x8e>
   20eec:	20020030 	.word	0x20020030
   20ef0:	200201b8 	.word	0x200201b8
   20ef4:	00032752 	.word	0x00032752
   20ef8:	000316d1 	.word	0x000316d1
   20efc:	00032722 	.word	0x00032722
   20f00:	000326bc 	.word	0x000326bc
   20f04:	00030e1c 	.word	0x00030e1c
   20f08:	00030e1c 	.word	0x00030e1c
   20f0c:	000326cd 	.word	0x000326cd
   20f10:	20026ad8 	.word	0x20026ad8
   20f14:	000326f0 	.word	0x000326f0

00020f18 <socket_thread_fn>:
{
   20f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   20f1c:	4b9e      	ldr	r3, [pc, #632]	; (21198 <socket_thread_fn+0x280>)
   20f1e:	4c9f      	ldr	r4, [pc, #636]	; (2119c <socket_thread_fn+0x284>)
{
   20f20:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   20f22:	1ae4      	subs	r4, r4, r3
   20f24:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   20f28:	f04f 32ff 	mov.w	r2, #4294967295
   20f2c:	a903      	add	r1, sp, #12
   20f2e:	489c      	ldr	r0, [pc, #624]	; (211a0 <socket_thread_fn+0x288>)
   20f30:	f009 f9e8 	bl	2a304 <k_mem_slab_alloc>
		ret.code  = 0;
   20f34:	2300      	movs	r3, #0
		item->callback = NULL;
   20f36:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   20f38:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   20f3a:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   20f3e:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   20f42:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 211f8 <socket_thread_fn+0x2e0>
		bytes_read = recv(common_socket_fd, item->data,
   20f46:	4b97      	ldr	r3, [pc, #604]	; (211a4 <socket_thread_fn+0x28c>)
   20f48:	350c      	adds	r5, #12
   20f4a:	f8d3 b000 	ldr.w	fp, [r3]
   20f4e:	f8da 3000 	ldr.w	r3, [sl]
   20f52:	b94b      	cbnz	r3, 20f68 <socket_thread_fn+0x50>
   20f54:	4994      	ldr	r1, [pc, #592]	; (211a8 <socket_thread_fn+0x290>)
   20f56:	4895      	ldr	r0, [pc, #596]	; (211ac <socket_thread_fn+0x294>)
   20f58:	2369      	movs	r3, #105	; 0x69
   20f5a:	4a95      	ldr	r2, [pc, #596]	; (211b0 <socket_thread_fn+0x298>)
   20f5c:	f00d ff3b 	bl	2edd6 <printk>
   20f60:	2169      	movs	r1, #105	; 0x69
   20f62:	4893      	ldr	r0, [pc, #588]	; (211b0 <socket_thread_fn+0x298>)
   20f64:	f00d ff7d 	bl	2ee62 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   20f68:	f8da 3000 	ldr.w	r3, [sl]
   20f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20f6e:	b94b      	cbnz	r3, 20f84 <socket_thread_fn+0x6c>
   20f70:	4990      	ldr	r1, [pc, #576]	; (211b4 <socket_thread_fn+0x29c>)
   20f72:	488e      	ldr	r0, [pc, #568]	; (211ac <socket_thread_fn+0x294>)
   20f74:	236a      	movs	r3, #106	; 0x6a
   20f76:	4a8e      	ldr	r2, [pc, #568]	; (211b0 <socket_thread_fn+0x298>)
   20f78:	f00d ff2d 	bl	2edd6 <printk>
   20f7c:	216a      	movs	r1, #106	; 0x6a
   20f7e:	488c      	ldr	r0, [pc, #560]	; (211b0 <socket_thread_fn+0x298>)
   20f80:	f00d ff6f 	bl	2ee62 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   20f84:	f8da 3000 	ldr.w	r3, [sl]
   20f88:	f640 228c 	movw	r2, #2700	; 0xa8c
   20f8c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   20f90:	4629      	mov	r1, r5
   20f92:	2300      	movs	r3, #0
   20f94:	4658      	mov	r0, fp
   20f96:	47d0      	blx	sl
		if (bytes_read < 0) {
   20f98:	1e02      	subs	r2, r0, #0
   20f9a:	da58      	bge.n	2104e <socket_thread_fn+0x136>
			LOG_ERR("AT socket recv failed with err %d",
   20f9c:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   20fa0:	f043 0301 	orr.w	r3, r3, #1
   20fa4:	f363 0607 	bfi	r6, r3, #0, #8
   20fa8:	f364 168f 	bfi	r6, r4, #6, #10
   20fac:	4630      	mov	r0, r6
   20fae:	4982      	ldr	r1, [pc, #520]	; (211b8 <socket_thread_fn+0x2a0>)
   20fb0:	f00d ff68 	bl	2ee84 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   20fb4:	4b7b      	ldr	r3, [pc, #492]	; (211a4 <socket_thread_fn+0x28c>)
   20fb6:	6818      	ldr	r0, [r3, #0]
   20fb8:	f7ff feba 	bl	20d30 <close>
   20fbc:	2800      	cmp	r0, #0
   20fbe:	d131      	bne.n	21024 <socket_thread_fn+0x10c>
			    (open_socket() == 0)) {
   20fc0:	f7ff fef2 	bl	20da8 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   20fc4:	bb70      	cbnz	r0, 21024 <socket_thread_fn+0x10c>
				LOG_INF("AT socket recovered");
   20fc6:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   20fca:	f043 0303 	orr.w	r3, r3, #3
   20fce:	f363 0707 	bfi	r7, r3, #0, #8
   20fd2:	f364 178f 	bfi	r7, r4, #6, #10
   20fd6:	4979      	ldr	r1, [pc, #484]	; (211bc <socket_thread_fn+0x2a4>)
   20fd8:	4638      	mov	r0, r7
   20fda:	f00d ff53 	bl	2ee84 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   20fde:	2301      	movs	r3, #1
   20fe0:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   20fe4:	f00e f80f 	bl	2f006 <__errno>
   20fe8:	6803      	ldr	r3, [r0, #0]
   20fea:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   20fec:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   20fee:	9903      	ldr	r1, [sp, #12]
   20ff0:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   20ff4:	2b00      	cmp	r3, #0
   20ff6:	f040 80a5 	bne.w	21144 <socket_thread_fn+0x22c>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   20ffa:	a903      	add	r1, sp, #12
   20ffc:	4868      	ldr	r0, [pc, #416]	; (211a0 <socket_thread_fn+0x288>)
   20ffe:	f009 f9e5 	bl	2a3cc <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   21002:	4b6f      	ldr	r3, [pc, #444]	; (211c0 <socket_thread_fn+0x2a8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   21004:	689b      	ldr	r3, [r3, #8]
   21006:	2b00      	cmp	r3, #0
   21008:	d18e      	bne.n	20f28 <socket_thread_fn+0x10>
   2100a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2100e:	2a04      	cmp	r2, #4
   21010:	d08a      	beq.n	20f28 <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   21012:	4a6c      	ldr	r2, [pc, #432]	; (211c4 <socket_thread_fn+0x2ac>)
   21014:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   21016:	f04f 32ff 	mov.w	r2, #4294967295
   2101a:	a904      	add	r1, sp, #16
   2101c:	486a      	ldr	r0, [pc, #424]	; (211c8 <socket_thread_fn+0x2b0>)
   2101e:	f009 fb47 	bl	2a6b0 <z_impl_k_msgq_put>
   21022:	e781      	b.n	20f28 <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   21024:	2301      	movs	r3, #1
   21026:	f04f 0500 	mov.w	r5, #0
   2102a:	f363 0507 	bfi	r5, r3, #0, #8
   2102e:	f00d ffea 	bl	2f006 <__errno>
   21032:	f364 158f 	bfi	r5, r4, #6, #10
   21036:	6802      	ldr	r2, [r0, #0]
   21038:	4964      	ldr	r1, [pc, #400]	; (211cc <socket_thread_fn+0x2b4>)
   2103a:	4628      	mov	r0, r5
   2103c:	f00d ff22 	bl	2ee84 <log_string_sync>
			close(common_socket_fd);
   21040:	4b58      	ldr	r3, [pc, #352]	; (211a4 <socket_thread_fn+0x28c>)
   21042:	6818      	ldr	r0, [r3, #0]
   21044:	f7ff fe74 	bl	20d30 <close>
}
   21048:	b007      	add	sp, #28
   2104a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   2104e:	f640 238c 	movw	r3, #2700	; 0xa8c
   21052:	429a      	cmp	r2, r3
   21054:	d004      	beq.n	21060 <socket_thread_fn+0x148>
			   item->data[bytes_read - 1] != '\0') {
   21056:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2105a:	4452      	add	r2, sl
		} else if (bytes_read == sizeof(item->data) ||
   2105c:	7ad3      	ldrb	r3, [r2, #11]
   2105e:	b173      	cbz	r3, 2107e <socket_thread_fn+0x166>
			LOG_ERR("AT message to large for reception buffer or "
   21060:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   21064:	f043 0301 	orr.w	r3, r3, #1
   21068:	f363 0807 	bfi	r8, r3, #0, #8
   2106c:	f364 188f 	bfi	r8, r4, #6, #10
   21070:	4957      	ldr	r1, [pc, #348]	; (211d0 <socket_thread_fn+0x2b8>)
   21072:	4640      	mov	r0, r8
   21074:	f00d ff06 	bl	2ee84 <log_string_sync>
			ret.code  = -ENOBUFS;
   21078:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2107c:	e7b6      	b.n	20fec <socket_thread_fn+0xd4>
	ret->state = AT_CMD_NOTIFICATION;
   2107e:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   21080:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   21084:	4953      	ldr	r1, [pc, #332]	; (211d4 <socket_thread_fn+0x2bc>)
   21086:	4628      	mov	r0, r5
   21088:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   2108a:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   2108e:	f00f f849 	bl	30124 <strstr>
		if (tmpstr) {
   21092:	4683      	mov	fp, r0
   21094:	b120      	cbz	r0, 210a0 <socket_thread_fn+0x188>
			ret->state = AT_CMD_OK;
   21096:	9b01      	ldr	r3, [sp, #4]
   21098:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   2109c:	9304      	str	r3, [sp, #16]
			break;
   2109e:	e00d      	b.n	210bc <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   210a0:	494d      	ldr	r1, [pc, #308]	; (211d8 <socket_thread_fn+0x2c0>)
   210a2:	4628      	mov	r0, r5
   210a4:	f00f f83e 	bl	30124 <strstr>
		if (tmpstr) {
   210a8:	4683      	mov	fp, r0
   210aa:	b330      	cbz	r0, 210fa <socket_thread_fn+0x1e2>
			ret->state = AT_CMD_ERROR_CMS;
   210ac:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   210ae:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   210b2:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   210b6:	f00e fe8e 	bl	2fdd6 <atoi>
   210ba:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   210bc:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   210be:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   210c2:	3201      	adds	r2, #1
   210c4:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   210c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   210cc:	2b04      	cmp	r3, #4
   210ce:	d04f      	beq.n	21170 <socket_thread_fn+0x258>
			if ((response_buf_len > 0) &&
   210d0:	f8df a128 	ldr.w	sl, [pc, #296]	; 211fc <socket_thread_fn+0x2e4>
   210d4:	f8da 3000 	ldr.w	r3, [sl]
   210d8:	2b00      	cmp	r3, #0
   210da:	d052      	beq.n	21182 <socket_thread_fn+0x26a>
			    (response_buf != NULL)) {
   210dc:	4d3f      	ldr	r5, [pc, #252]	; (211dc <socket_thread_fn+0x2c4>)
   210de:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   210e0:	2800      	cmp	r0, #0
   210e2:	d04e      	beq.n	21182 <socket_thread_fn+0x26a>
				if (response_buf_len > payload_len) {
   210e4:	4293      	cmp	r3, r2
   210e6:	d91d      	bls.n	21124 <socket_thread_fn+0x20c>
   210e8:	9903      	ldr	r1, [sp, #12]
   210ea:	310c      	adds	r1, #12
   210ec:	f00e fe93 	bl	2fe16 <memcpy>
				response_buf_len = 0;
   210f0:	2300      	movs	r3, #0
   210f2:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   210f6:	602b      	str	r3, [r5, #0]
				goto next;
   210f8:	e779      	b.n	20fee <socket_thread_fn+0xd6>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   210fa:	4939      	ldr	r1, [pc, #228]	; (211e0 <socket_thread_fn+0x2c8>)
   210fc:	4628      	mov	r0, r5
   210fe:	f00f f811 	bl	30124 <strstr>
		if (tmpstr) {
   21102:	4683      	mov	fp, r0
   21104:	b108      	cbz	r0, 2110a <socket_thread_fn+0x1f2>
			ret->state = AT_CMD_ERROR_CME;
   21106:	2303      	movs	r3, #3
   21108:	e7d1      	b.n	210ae <socket_thread_fn+0x196>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   2110a:	4936      	ldr	r1, [pc, #216]	; (211e4 <socket_thread_fn+0x2cc>)
   2110c:	4628      	mov	r0, r5
   2110e:	f00f f809 	bl	30124 <strstr>
		if (tmpstr) {
   21112:	4683      	mov	fp, r0
   21114:	2800      	cmp	r0, #0
   21116:	d039      	beq.n	2118c <socket_thread_fn+0x274>
			ret->state = AT_CMD_ERROR;
   21118:	2301      	movs	r3, #1
   2111a:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   2111e:	f06f 0307 	mvn.w	r3, #7
   21122:	e7bb      	b.n	2109c <socket_thread_fn+0x184>
					LOG_ERR("Response buffer not large "
   21124:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   21128:	f043 0301 	orr.w	r3, r3, #1
   2112c:	f363 0907 	bfi	r9, r3, #0, #8
   21130:	f364 198f 	bfi	r9, r4, #6, #10
   21134:	492c      	ldr	r1, [pc, #176]	; (211e8 <socket_thread_fn+0x2d0>)
   21136:	4648      	mov	r0, r9
   21138:	f00d fea4 	bl	2ee84 <log_string_sync>
					ret.code  = -EMSGSIZE;
   2113c:	f06f 0379 	mvn.w	r3, #121	; 0x79
   21140:	9304      	str	r3, [sp, #16]
   21142:	e7d5      	b.n	210f0 <socket_thread_fn+0x1d8>
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21144:	4b29      	ldr	r3, [pc, #164]	; (211ec <socket_thread_fn+0x2d4>)
   21146:	2200      	movs	r2, #0
   21148:	604b      	str	r3, [r1, #4]
   2114a:	460b      	mov	r3, r1
   2114c:	600a      	str	r2, [r1, #0]
   2114e:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21152:	e8d3 2fef 	ldaex	r2, [r3]
   21156:	f042 0001 	orr.w	r0, r2, #1
   2115a:	e8c3 0fe5 	stlex	r5, r0, [r3]
   2115e:	2d00      	cmp	r5, #0
   21160:	d1f7      	bne.n	21152 <socket_thread_fn+0x23a>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   21162:	07d3      	lsls	r3, r2, #31
   21164:	f53f af4d 	bmi.w	21002 <socket_thread_fn+0xea>
		k_queue_append(&work_q->queue, work);
   21168:	4821      	ldr	r0, [pc, #132]	; (211f0 <socket_thread_fn+0x2d8>)
   2116a:	f00e fd55 	bl	2fc18 <k_queue_append>
   2116e:	e748      	b.n	21002 <socket_thread_fn+0xea>
		if (payload_len == 0) {
   21170:	2a00      	cmp	r2, #0
   21172:	f43f af3c 	beq.w	20fee <socket_thread_fn+0xd6>
			item->callback = notification_handler;
   21176:	4b1f      	ldr	r3, [pc, #124]	; (211f4 <socket_thread_fn+0x2dc>)
			item->callback = current_cmd_handler;
   21178:	681a      	ldr	r2, [r3, #0]
   2117a:	9b03      	ldr	r3, [sp, #12]
   2117c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   21180:	e735      	b.n	20fee <socket_thread_fn+0xd6>
		if (payload_len == 0) {
   21182:	2a00      	cmp	r2, #0
   21184:	f43f af33 	beq.w	20fee <socket_thread_fn+0xd6>
			item->callback = current_cmd_handler;
   21188:	4b0e      	ldr	r3, [pc, #56]	; (211c4 <socket_thread_fn+0x2ac>)
   2118a:	e7f5      	b.n	21178 <socket_thread_fn+0x260>
		new_len = strlen(buf) + 1;
   2118c:	4628      	mov	r0, r5
   2118e:	f7fb ff73 	bl	1d078 <strlen>
   21192:	1c42      	adds	r2, r0, #1
   21194:	e798      	b.n	210c8 <socket_thread_fn+0x1b0>
   21196:	bf00      	nop
   21198:	00030e1c 	.word	0x00030e1c
   2119c:	00030e1c 	.word	0x00030e1c
   211a0:	20026a1c 	.word	0x20026a1c
   211a4:	200201b8 	.word	0x200201b8
   211a8:	00032752 	.word	0x00032752
   211ac:	000316d1 	.word	0x000316d1
   211b0:	00032722 	.word	0x00032722
   211b4:	00032782 	.word	0x00032782
   211b8:	00032793 	.word	0x00032793
   211bc:	000327b5 	.word	0x000327b5
   211c0:	20026a6c 	.word	0x20026a6c
   211c4:	200201bc 	.word	0x200201bc
   211c8:	20026ad8 	.word	0x20026ad8
   211cc:	000327c9 	.word	0x000327c9
   211d0:	00032800 	.word	0x00032800
   211d4:	0003284a 	.word	0x0003284a
   211d8:	0003284d 	.word	0x0003284d
   211dc:	200201c4 	.word	0x200201c4
   211e0:	00032859 	.word	0x00032859
   211e4:	00032865 	.word	0x00032865
   211e8:	0003286b 	.word	0x0003286b
   211ec:	00020d89 	.word	0x00020d89
   211f0:	20021414 	.word	0x20021414
   211f4:	200201c0 	.word	0x200201c0
   211f8:	20020030 	.word	0x20020030
   211fc:	200201c8 	.word	0x200201c8

00021200 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   21200:	b510      	push	{r4, lr}
	static bool initialized;

	if (initialized) {
   21202:	4b16      	ldr	r3, [pc, #88]	; (2125c <at_cmd_driver_init+0x5c>)
{
   21204:	b086      	sub	sp, #24
	if (initialized) {
   21206:	781a      	ldrb	r2, [r3, #0]
   21208:	bb32      	cbnz	r2, 21258 <at_cmd_driver_init+0x58>
		return 0;
	}

	initialized = true;
   2120a:	2201      	movs	r2, #1
   2120c:	701a      	strb	r2, [r3, #0]

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   2120e:	f7ff fdcb 	bl	20da8 <open_socket>
	if (err) {
   21212:	4604      	mov	r4, r0
   21214:	b188      	cbz	r0, 2123a <at_cmd_driver_init+0x3a>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   21216:	2301      	movs	r3, #1
   21218:	f04f 0000 	mov.w	r0, #0
   2121c:	4a10      	ldr	r2, [pc, #64]	; (21260 <at_cmd_driver_init+0x60>)
   2121e:	f363 0007 	bfi	r0, r3, #0, #8
   21222:	4b10      	ldr	r3, [pc, #64]	; (21264 <at_cmd_driver_init+0x64>)
   21224:	4910      	ldr	r1, [pc, #64]	; (21268 <at_cmd_driver_init+0x68>)
   21226:	1a9b      	subs	r3, r3, r2
   21228:	08db      	lsrs	r3, r3, #3
   2122a:	f363 108f 	bfi	r0, r3, #6, #10
   2122e:	4622      	mov	r2, r4
   21230:	f00d fe28 	bl	2ee84 <log_string_sync>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   21234:	4620      	mov	r0, r4
   21236:	b006      	add	sp, #24
   21238:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2123a:	230a      	movs	r3, #10
   2123c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   21240:	e9cd 0302 	strd	r0, r3, [sp, #8]
   21244:	e9cd 0000 	strd	r0, r0, [sp]
   21248:	4b08      	ldr	r3, [pc, #32]	; (2126c <at_cmd_driver_init+0x6c>)
   2124a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2124e:	4908      	ldr	r1, [pc, #32]	; (21270 <at_cmd_driver_init+0x70>)
   21250:	4808      	ldr	r0, [pc, #32]	; (21274 <at_cmd_driver_init+0x74>)
   21252:	f00b f907 	bl	2c464 <z_impl_k_thread_create>
	return 0;
   21256:	e7ed      	b.n	21234 <at_cmd_driver_init+0x34>
		return 0;
   21258:	2400      	movs	r4, #0
   2125a:	e7eb      	b.n	21234 <at_cmd_driver_init+0x34>
   2125c:	20021933 	.word	0x20021933
   21260:	00030e1c 	.word	0x00030e1c
   21264:	00030e1c 	.word	0x00030e1c
   21268:	00032671 	.word	0x00032671
   2126c:	00020f19 	.word	0x00020f19
   21270:	20022a98 	.word	0x20022a98
   21274:	200201cc 	.word	0x200201cc

00021278 <at_cmd_write>:
{
   21278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2127c:	4605      	mov	r5, r0
   2127e:	4688      	mov	r8, r1
   21280:	4617      	mov	r7, r2
   21282:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   21284:	4c0a      	ldr	r4, [pc, #40]	; (212b0 <at_cmd_write+0x38>)
   21286:	f04f 31ff 	mov.w	r1, #4294967295
   2128a:	4620      	mov	r0, r4
   2128c:	f00a ffb8 	bl	2c200 <z_impl_k_sem_take>
	response_buf     = buf;
   21290:	4b08      	ldr	r3, [pc, #32]	; (212b4 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   21292:	4631      	mov	r1, r6
	response_buf     = buf;
   21294:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   21298:	4b07      	ldr	r3, [pc, #28]	; (212b8 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   2129a:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   2129c:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   2129e:	f7ff fdbd 	bl	20e1c <at_write>
   212a2:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   212a4:	4620      	mov	r0, r4
   212a6:	f00a ff61 	bl	2c16c <z_impl_k_sem_give>
}
   212aa:	4628      	mov	r0, r5
   212ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   212b0:	20026a6c 	.word	0x20026a6c
   212b4:	200201c4 	.word	0x200201c4
   212b8:	200201c8 	.word	0x200201c8

000212bc <at_cmd_set_notification_handler>:
{
   212bc:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   212be:	4c0f      	ldr	r4, [pc, #60]	; (212fc <at_cmd_set_notification_handler+0x40>)
{
   212c0:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   212c2:	6822      	ldr	r2, [r4, #0]
   212c4:	b17a      	cbz	r2, 212e6 <at_cmd_set_notification_handler+0x2a>
   212c6:	4282      	cmp	r2, r0
   212c8:	d00d      	beq.n	212e6 <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   212ca:	2302      	movs	r3, #2
   212cc:	f04f 0000 	mov.w	r0, #0
   212d0:	490b      	ldr	r1, [pc, #44]	; (21300 <at_cmd_set_notification_handler+0x44>)
   212d2:	f363 0007 	bfi	r0, r3, #0, #8
   212d6:	4b0b      	ldr	r3, [pc, #44]	; (21304 <at_cmd_set_notification_handler+0x48>)
   212d8:	1a5b      	subs	r3, r3, r1
   212da:	08db      	lsrs	r3, r3, #3
   212dc:	f363 108f 	bfi	r0, r3, #6, #10
   212e0:	4909      	ldr	r1, [pc, #36]	; (21308 <at_cmd_set_notification_handler+0x4c>)
   212e2:	f00d fdcf 	bl	2ee84 <log_string_sync>
	return z_impl_k_sem_take(sem, timeout);
   212e6:	f04f 31ff 	mov.w	r1, #4294967295
   212ea:	4808      	ldr	r0, [pc, #32]	; (2130c <at_cmd_set_notification_handler+0x50>)
   212ec:	f00a ff88 	bl	2c200 <z_impl_k_sem_take>
	notification_handler = handler;
   212f0:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   212f2:	4806      	ldr	r0, [pc, #24]	; (2130c <at_cmd_set_notification_handler+0x50>)
}
   212f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   212f8:	f00a bf38 	b.w	2c16c <z_impl_k_sem_give>
   212fc:	200201c0 	.word	0x200201c0
   21300:	00030e1c 	.word	0x00030e1c
   21304:	00030e1c 	.word	0x00030e1c
   21308:	00032693 	.word	0x00032693
   2130c:	20026a6c 	.word	0x20026a6c

00021310 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   21310:	4b0b      	ldr	r3, [pc, #44]	; (21340 <find_node+0x30>)
{
   21312:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   21314:	681b      	ldr	r3, [r3, #0]
   21316:	b153      	cbz	r3, 2132e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21318:	2500      	movs	r5, #0
   2131a:	461c      	mov	r4, r3
   2131c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   2131e:	6866      	ldr	r6, [r4, #4]
   21320:	428e      	cmp	r6, r1
   21322:	d106      	bne.n	21332 <find_node+0x22>
   21324:	68a6      	ldr	r6, [r4, #8]
   21326:	4296      	cmp	r6, r2
   21328:	d103      	bne.n	21332 <find_node+0x22>
			*prev_out = prev;
			return curr;
   2132a:	4623      	mov	r3, r4
			*prev_out = prev;
   2132c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2132e:	4618      	mov	r0, r3
   21330:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   21332:	2b00      	cmp	r3, #0
   21334:	d0fb      	beq.n	2132e <find_node+0x1e>
   21336:	4625      	mov	r5, r4
   21338:	461c      	mov	r4, r3
   2133a:	681b      	ldr	r3, [r3, #0]
   2133c:	e7ef      	b.n	2131e <find_node+0xe>
   2133e:	bf00      	nop
   21340:	2002027c 	.word	0x2002027c

00021344 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   21344:	4a0e      	ldr	r2, [pc, #56]	; (21380 <module_init+0x3c>)
{
   21346:	b508      	push	{r3, lr}
	if (initialized) {
   21348:	7813      	ldrb	r3, [r2, #0]
   2134a:	b17b      	cbz	r3, 2136c <module_init+0x28>
		LOG_WRN("Already initialized. Nothing to do");
   2134c:	2302      	movs	r3, #2
   2134e:	f04f 0000 	mov.w	r0, #0
   21352:	4a0c      	ldr	r2, [pc, #48]	; (21384 <module_init+0x40>)
   21354:	f363 0007 	bfi	r0, r3, #0, #8
   21358:	4b0b      	ldr	r3, [pc, #44]	; (21388 <module_init+0x44>)
   2135a:	490c      	ldr	r1, [pc, #48]	; (2138c <module_init+0x48>)
   2135c:	1a9b      	subs	r3, r3, r2
   2135e:	08db      	lsrs	r3, r3, #3
   21360:	f363 108f 	bfi	r0, r3, #6, #10
   21364:	f00d fd8e 	bl	2ee84 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   21368:	2000      	movs	r0, #0
   2136a:	bd08      	pop	{r3, pc}
	initialized = true;
   2136c:	2101      	movs	r1, #1
   2136e:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   21370:	4a07      	ldr	r2, [pc, #28]	; (21390 <module_init+0x4c>)
	at_cmd_set_notification_handler(notif_dispatch);
   21372:	4808      	ldr	r0, [pc, #32]	; (21394 <module_init+0x50>)
	list->tail = NULL;
   21374:	e9c2 3300 	strd	r3, r3, [r2]
   21378:	f7ff ffa0 	bl	212bc <at_cmd_set_notification_handler>
	return 0;
   2137c:	e7f4      	b.n	21368 <module_init+0x24>
   2137e:	bf00      	nop
   21380:	20021934 	.word	0x20021934
   21384:	00030e1c 	.word	0x00030e1c
   21388:	00030e2c 	.word	0x00030e2c
   2138c:	000328c4 	.word	0x000328c4
   21390:	2002027c 	.word	0x2002027c
   21394:	000213a5 	.word	0x000213a5

00021398 <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
   21398:	4801      	ldr	r0, [pc, #4]	; (213a0 <k_mutex_unlock.constprop.7+0x8>)
   2139a:	f009 bbb3 	b.w	2ab04 <z_impl_k_mutex_unlock>
   2139e:	bf00      	nop
   213a0:	20026ac4 	.word	0x20026ac4

000213a4 <notif_dispatch>:
{
   213a4:	b538      	push	{r3, r4, r5, lr}
   213a6:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   213a8:	f04f 31ff 	mov.w	r1, #4294967295
   213ac:	4809      	ldr	r0, [pc, #36]	; (213d4 <notif_dispatch+0x30>)
   213ae:	f009 facb 	bl	2a948 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   213b2:	4b09      	ldr	r3, [pc, #36]	; (213d8 <notif_dispatch+0x34>)
   213b4:	681b      	ldr	r3, [r3, #0]
   213b6:	b91b      	cbnz	r3, 213c0 <notif_dispatch+0x1c>
}
   213b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   213bc:	f7ff bfec 	b.w	21398 <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   213c0:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   213c2:	689a      	ldr	r2, [r3, #8]
   213c4:	4629      	mov	r1, r5
   213c6:	6858      	ldr	r0, [r3, #4]
   213c8:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   213ca:	2c00      	cmp	r4, #0
   213cc:	d0f4      	beq.n	213b8 <notif_dispatch+0x14>
   213ce:	4623      	mov	r3, r4
   213d0:	6824      	ldr	r4, [r4, #0]
   213d2:	e7f6      	b.n	213c2 <notif_dispatch+0x1e>
   213d4:	20026ac4 	.word	0x20026ac4
   213d8:	2002027c 	.word	0x2002027c

000213dc <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   213dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   213de:	4606      	mov	r6, r0
	if (handler == NULL) {
   213e0:	460d      	mov	r5, r1
   213e2:	b999      	cbnz	r1, 2140c <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   213e4:	2301      	movs	r3, #1
   213e6:	f04f 0000 	mov.w	r0, #0
   213ea:	4a1d      	ldr	r2, [pc, #116]	; (21460 <at_notif_register_handler+0x84>)
   213ec:	f363 0007 	bfi	r0, r3, #0, #8
   213f0:	4b1c      	ldr	r3, [pc, #112]	; (21464 <at_notif_register_handler+0x88>)
   213f2:	1a9b      	subs	r3, r3, r2
   213f4:	08db      	lsrs	r3, r3, #3
   213f6:	f363 108f 	bfi	r0, r3, #6, #10
   213fa:	4632      	mov	r2, r6
   213fc:	460b      	mov	r3, r1
   213fe:	491a      	ldr	r1, [pc, #104]	; (21468 <at_notif_register_handler+0x8c>)
   21400:	f00d fd40 	bl	2ee84 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   21404:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   21408:	b002      	add	sp, #8
   2140a:	bd70      	pop	{r4, r5, r6, pc}
   2140c:	f04f 31ff 	mov.w	r1, #4294967295
   21410:	4816      	ldr	r0, [pc, #88]	; (2146c <at_notif_register_handler+0x90>)
   21412:	f009 fa99 	bl	2a948 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   21416:	462a      	mov	r2, r5
   21418:	4631      	mov	r1, r6
   2141a:	a801      	add	r0, sp, #4
   2141c:	f7ff ff78 	bl	21310 <find_node>
   21420:	4604      	mov	r4, r0
   21422:	b118      	cbz	r0, 2142c <at_notif_register_handler+0x50>
		k_mutex_unlock(&list_mtx);
   21424:	f7ff ffb8 	bl	21398 <k_mutex_unlock.constprop.7>
		return 0;
   21428:	2000      	movs	r0, #0
   2142a:	e7ed      	b.n	21408 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   2142c:	200c      	movs	r0, #12
   2142e:	f009 f923 	bl	2a678 <k_malloc>
   21432:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   21434:	b920      	cbnz	r0, 21440 <at_notif_register_handler+0x64>
		k_mutex_unlock(&list_mtx);
   21436:	f7ff ffaf 	bl	21398 <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   2143a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2143e:	e7e3      	b.n	21408 <at_notif_register_handler+0x2c>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   21440:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   21442:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   21444:	4a0a      	ldr	r2, [pc, #40]	; (21470 <at_notif_register_handler+0x94>)
   21446:	6044      	str	r4, [r0, #4]
   21448:	6084      	str	r4, [r0, #8]
	parent->next = child;
   2144a:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   2144c:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2144e:	e9c3 6501 	strd	r6, r5, [r3, #4]
   21452:	b911      	cbnz	r1, 2145a <at_notif_register_handler+0x7e>
	list->head = node;
   21454:	e9c2 3300 	strd	r3, r3, [r2]
   21458:	e7e4      	b.n	21424 <at_notif_register_handler+0x48>
	parent->next = child;
   2145a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2145c:	6053      	str	r3, [r2, #4]
   2145e:	e7e1      	b.n	21424 <at_notif_register_handler+0x48>
   21460:	00030e1c 	.word	0x00030e1c
   21464:	00030e2c 	.word	0x00030e2c
   21468:	00032893 	.word	0x00032893
   2146c:	20026ac4 	.word	0x20026ac4
   21470:	2002027c 	.word	0x2002027c

00021474 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   21474:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   21476:	4d05      	ldr	r5, [pc, #20]	; (2148c <write_uart_string+0x18>)
   21478:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   2147a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2147e:	b901      	cbnz	r1, 21482 <write_uart_string+0xe>
	}
}
   21480:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   21482:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   21484:	6843      	ldr	r3, [r0, #4]
   21486:	685b      	ldr	r3, [r3, #4]
   21488:	4798      	blx	r3
   2148a:	e7f6      	b.n	2147a <write_uart_string+0x6>
   2148c:	20020358 	.word	0x20020358

00021490 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   21490:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   21492:	4923      	ldr	r1, [pc, #140]	; (21520 <cmd_send+0x90>)
{
   21494:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   21496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2149a:	f10d 030b 	add.w	r3, sp, #11
   2149e:	4608      	mov	r0, r1
   214a0:	f7ff feea 	bl	21278 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   214a4:	1e02      	subs	r2, r0, #0
   214a6:	da12      	bge.n	214ce <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   214a8:	2301      	movs	r3, #1
   214aa:	f04f 0000 	mov.w	r0, #0
   214ae:	491d      	ldr	r1, [pc, #116]	; (21524 <cmd_send+0x94>)
   214b0:	f363 0007 	bfi	r0, r3, #0, #8
   214b4:	4b1c      	ldr	r3, [pc, #112]	; (21528 <cmd_send+0x98>)
   214b6:	1a5b      	subs	r3, r3, r1
   214b8:	08db      	lsrs	r3, r3, #3
   214ba:	f363 108f 	bfi	r0, r3, #6, #10
   214be:	491b      	ldr	r1, [pc, #108]	; (2152c <cmd_send+0x9c>)
   214c0:	f00d fce0 	bl	2ee84 <log_string_sync>
		state = AT_CMD_ERROR;
   214c4:	2301      	movs	r3, #1
   214c6:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   214ca:	4819      	ldr	r0, [pc, #100]	; (21530 <cmd_send+0xa0>)
   214cc:	e012      	b.n	214f4 <cmd_send+0x64>
	switch (state) {
   214ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
   214d2:	2b03      	cmp	r3, #3
   214d4:	d810      	bhi.n	214f8 <cmd_send+0x68>
   214d6:	a101      	add	r1, pc, #4	; (adr r1, 214dc <cmd_send+0x4c>)
   214d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   214dc:	000214ed 	.word	0x000214ed
   214e0:	000214cb 	.word	0x000214cb
   214e4:	00021507 	.word	0x00021507
   214e8:	00021519 	.word	0x00021519
		write_uart_string(at_buf);
   214ec:	480c      	ldr	r0, [pc, #48]	; (21520 <cmd_send+0x90>)
   214ee:	f7ff ffc1 	bl	21474 <write_uart_string>
		write_uart_string(OK_STR);
   214f2:	4810      	ldr	r0, [pc, #64]	; (21534 <cmd_send+0xa4>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   214f4:	f7ff ffbe 	bl	21474 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   214f8:	4b0f      	ldr	r3, [pc, #60]	; (21538 <cmd_send+0xa8>)
   214fa:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   214fc:	f00e fb4c 	bl	2fb98 <z_impl_uart_irq_rx_enable>
}
   21500:	b00b      	add	sp, #44	; 0x2c
   21502:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   21506:	4b0d      	ldr	r3, [pc, #52]	; (2153c <cmd_send+0xac>)
   21508:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2150a:	2219      	movs	r2, #25
   2150c:	2100      	movs	r1, #0
   2150e:	a803      	add	r0, sp, #12
   21510:	f00e fdc7 	bl	300a2 <__sprintf_chk>
		write_uart_string(str);
   21514:	a803      	add	r0, sp, #12
   21516:	e7ed      	b.n	214f4 <cmd_send+0x64>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   21518:	9200      	str	r2, [sp, #0]
   2151a:	4b09      	ldr	r3, [pc, #36]	; (21540 <cmd_send+0xb0>)
   2151c:	e7f5      	b.n	2150a <cmd_send+0x7a>
   2151e:	bf00      	nop
   21520:	20021935 	.word	0x20021935
   21524:	00030e1c 	.word	0x00030e1c
   21528:	00030e24 	.word	0x00030e24
   2152c:	000329ab 	.word	0x000329ab
   21530:	000329d6 	.word	0x000329d6
   21534:	000329d1 	.word	0x000329d1
   21538:	20020358 	.word	0x20020358
   2153c:	000329de 	.word	0x000329de
   21540:	000329ef 	.word	0x000329ef

00021544 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   21544:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21548:	4606      	mov	r6, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   2154a:	6843      	ldr	r3, [r0, #4]
   2154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2154e:	b103      	cbz	r3, 21552 <isr+0xe>
		return api->irq_update(dev);
   21550:	4798      	blx	r3
	if (api->irq_rx_ready) {
   21552:	6873      	ldr	r3, [r6, #4]
   21554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   21556:	b1c3      	cbz	r3, 2158a <isr+0x46>
		return api->irq_rx_ready(dev);
   21558:	4630      	mov	r0, r6
   2155a:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   2155c:	b1a8      	cbz	r0, 2158a <isr+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2155e:	f8df a14c 	ldr.w	sl, [pc, #332]	; 216ac <isr+0x168>
   21562:	4d47      	ldr	r5, [pc, #284]	; (21680 <isr+0x13c>)
   21564:	46d1      	mov	r9, sl
			LOG_WRN("Ignored null; would terminate string early.");
   21566:	4b47      	ldr	r3, [pc, #284]	; (21684 <isr+0x140>)
		if (at_cmd_len > 0) {
   21568:	4c47      	ldr	r4, [pc, #284]	; (21688 <isr+0x144>)
			LOG_WRN("Ignored null; would terminate string early.");
   2156a:	1aed      	subs	r5, r5, r3
   2156c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   21570:	e8da 3faf 	lda	r3, [sl]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   21574:	07db      	lsls	r3, r3, #31
   21576:	d408      	bmi.n	2158a <isr+0x46>
	if (api->fifo_read) {
   21578:	6873      	ldr	r3, [r6, #4]
   2157a:	699b      	ldr	r3, [r3, #24]
   2157c:	b12b      	cbz	r3, 2158a <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   2157e:	2201      	movs	r2, #1
   21580:	f10d 0107 	add.w	r1, sp, #7
   21584:	4630      	mov	r0, r6
   21586:	4798      	blx	r3
   21588:	b910      	cbnz	r0, 21590 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   2158a:	b002      	add	sp, #8
   2158c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uart_rx_handler(character);
   21590:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   21594:	2a08      	cmp	r2, #8
   21596:	d001      	beq.n	2159c <isr+0x58>
   21598:	2a7f      	cmp	r2, #127	; 0x7f
   2159a:	d105      	bne.n	215a8 <isr+0x64>
		if (at_cmd_len > 0) {
   2159c:	6823      	ldr	r3, [r4, #0]
   2159e:	2b00      	cmp	r3, #0
   215a0:	d0e6      	beq.n	21570 <isr+0x2c>
			at_cmd_len--;
   215a2:	3b01      	subs	r3, #1
   215a4:	6023      	str	r3, [r4, #0]
   215a6:	e7e3      	b.n	21570 <isr+0x2c>
	if (!inside_quotes) {
   215a8:	4938      	ldr	r1, [pc, #224]	; (2168c <isr+0x148>)
   215aa:	780b      	ldrb	r3, [r1, #0]
   215ac:	b9cb      	cbnz	r3, 215e2 <isr+0x9e>
		switch (character) {
   215ae:	2a0a      	cmp	r2, #10
   215b0:	d02b      	beq.n	2160a <isr+0xc6>
   215b2:	2a0d      	cmp	r2, #13
   215b4:	d011      	beq.n	215da <isr+0x96>
   215b6:	b9a2      	cbnz	r2, 215e2 <isr+0x9e>
			if (term_mode == MODE_NULL_TERM) {
   215b8:	4b35      	ldr	r3, [pc, #212]	; (21690 <isr+0x14c>)
   215ba:	781b      	ldrb	r3, [r3, #0]
   215bc:	2b00      	cmp	r3, #0
   215be:	d040      	beq.n	21642 <isr+0xfe>
			LOG_WRN("Ignored null; would terminate string early.");
   215c0:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   215c4:	f043 0302 	orr.w	r3, r3, #2
   215c8:	f363 0707 	bfi	r7, r3, #0, #8
   215cc:	f365 178f 	bfi	r7, r5, #6, #10
   215d0:	4930      	ldr	r1, [pc, #192]	; (21694 <isr+0x150>)
   215d2:	4638      	mov	r0, r7
   215d4:	f00d fc56 	bl	2ee84 <log_string_sync>
			return;
   215d8:	e7ca      	b.n	21570 <isr+0x2c>
			if (term_mode == MODE_CR) {
   215da:	482d      	ldr	r0, [pc, #180]	; (21690 <isr+0x14c>)
   215dc:	7800      	ldrb	r0, [r0, #0]
   215de:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   215e0:	d02f      	beq.n	21642 <isr+0xfe>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   215e2:	f8d4 c000 	ldr.w	ip, [r4]
   215e6:	f10c 0001 	add.w	r0, ip, #1
   215ea:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   215ee:	d31d      	bcc.n	2162c <isr+0xe8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   215f0:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   215f4:	f043 0301 	orr.w	r3, r3, #1
   215f8:	f363 0807 	bfi	r8, r3, #0, #8
   215fc:	f365 188f 	bfi	r8, r5, #6, #10
   21600:	4925      	ldr	r1, [pc, #148]	; (21698 <isr+0x154>)
   21602:	4640      	mov	r0, r8
   21604:	f00d fc3e 	bl	2ee84 <log_string_sync>
		return;
   21608:	e7b2      	b.n	21570 <isr+0x2c>
			if (term_mode == MODE_LF) {
   2160a:	4821      	ldr	r0, [pc, #132]	; (21690 <isr+0x14c>)
   2160c:	7800      	ldrb	r0, [r0, #0]
   2160e:	2802      	cmp	r0, #2
   21610:	d017      	beq.n	21642 <isr+0xfe>
			if (term_mode == MODE_CR_LF &&
   21612:	2803      	cmp	r0, #3
   21614:	d1e5      	bne.n	215e2 <isr+0x9e>
   21616:	f8d4 c000 	ldr.w	ip, [r4]
   2161a:	f1bc 0f00 	cmp.w	ip, #0
   2161e:	d0e0      	beq.n	215e2 <isr+0x9e>
			    at_buf[at_cmd_len - 1] == '\r') {
   21620:	481e      	ldr	r0, [pc, #120]	; (2169c <isr+0x158>)
   21622:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   21624:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   21628:	280d      	cmp	r0, #13
   2162a:	e7d9      	b.n	215e0 <isr+0x9c>
	at_buf[at_cmd_len] = character;
   2162c:	f8df e06c 	ldr.w	lr, [pc, #108]	; 2169c <isr+0x158>
	if (character == '"') {
   21630:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   21632:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   21636:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   21638:	d19a      	bne.n	21570 <isr+0x2c>
	if (!inside_quotes) {
   2163a:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   2163e:	700b      	strb	r3, [r1, #0]
   21640:	e796      	b.n	21570 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   21642:	2300      	movs	r3, #0
   21644:	4a15      	ldr	r2, [pc, #84]	; (2169c <isr+0x158>)
   21646:	6820      	ldr	r0, [r4, #0]
	inside_quotes = false;
   21648:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2164a:	5413      	strb	r3, [r2, r0]
	at_cmd_len = 0;
   2164c:	6023      	str	r3, [r4, #0]
	if (at_buf[0]) {
   2164e:	7813      	ldrb	r3, [r2, #0]
   21650:	2b00      	cmp	r3, #0
   21652:	d08d      	beq.n	21570 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   21654:	4b12      	ldr	r3, [pc, #72]	; (216a0 <isr+0x15c>)
   21656:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   21658:	6843      	ldr	r3, [r0, #4]
   2165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2165c:	b103      	cbz	r3, 21660 <isr+0x11c>
		api->irq_rx_disable(dev);
   2165e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21660:	e8d9 3fef 	ldaex	r3, [r9]
   21664:	f043 0201 	orr.w	r2, r3, #1
   21668:	e8c9 2fe1 	stlex	r1, r2, [r9]
   2166c:	2900      	cmp	r1, #0
   2166e:	d1f7      	bne.n	21660 <isr+0x11c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   21670:	07da      	lsls	r2, r3, #31
   21672:	f53f af7d 	bmi.w	21570 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   21676:	490b      	ldr	r1, [pc, #44]	; (216a4 <isr+0x160>)
   21678:	480b      	ldr	r0, [pc, #44]	; (216a8 <isr+0x164>)
   2167a:	f00e facd 	bl	2fc18 <k_queue_append>
   2167e:	e777      	b.n	21570 <isr+0x2c>
   21680:	00030e24 	.word	0x00030e24
   21684:	00030e1c 	.word	0x00030e1c
   21688:	20020284 	.word	0x20020284
   2168c:	20022935 	.word	0x20022935
   21690:	20022936 	.word	0x20022936
   21694:	00032a00 	.word	0x00032a00
   21698:	00032a2c 	.word	0x00032a2c
   2169c:	20021935 	.word	0x20021935
   216a0:	20020358 	.word	0x20020358
   216a4:	2002034c 	.word	0x2002034c
   216a8:	20020288 	.word	0x20020288
   216ac:	20020354 	.word	0x20020354

000216b0 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   216b0:	2202      	movs	r2, #2
   216b2:	4b49      	ldr	r3, [pc, #292]	; (217d8 <at_host_init+0x128>)
{
   216b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   216b8:	4948      	ldr	r1, [pc, #288]	; (217dc <at_host_init+0x12c>)
   216ba:	2000      	movs	r0, #0
		term_mode = mode;
   216bc:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   216be:	f7ff fe8d 	bl	213dc <at_notif_register_handler>
	if (err != 0) {
   216c2:	4c47      	ldr	r4, [pc, #284]	; (217e0 <at_host_init+0x130>)
   216c4:	4b47      	ldr	r3, [pc, #284]	; (217e4 <at_host_init+0x134>)
   216c6:	4606      	mov	r6, r0
   216c8:	1ae4      	subs	r4, r4, r3
   216ca:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   216ce:	b170      	cbz	r0, 216ee <at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
   216d0:	f04f 0000 	mov.w	r0, #0
   216d4:	2301      	movs	r3, #1
   216d6:	f363 0007 	bfi	r0, r3, #0, #8
   216da:	f364 108f 	bfi	r0, r4, #6, #10
   216de:	4632      	mov	r2, r6
   216e0:	4941      	ldr	r1, [pc, #260]	; (217e8 <at_host_init+0x138>)
   216e2:	f00d fbcf 	bl	2ee84 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   216e6:	4630      	mov	r0, r6
   216e8:	b002      	add	sp, #8
   216ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   216ee:	483f      	ldr	r0, [pc, #252]	; (217ec <at_host_init+0x13c>)
   216f0:	f008 fc46 	bl	29f80 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   216f4:	4d3e      	ldr	r5, [pc, #248]	; (217f0 <at_host_init+0x140>)
   216f6:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   216f8:	b9b8      	cbnz	r0, 2172a <at_host_init+0x7a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   216fa:	2301      	movs	r3, #1
   216fc:	f363 0007 	bfi	r0, r3, #0, #8
   21700:	4a3a      	ldr	r2, [pc, #232]	; (217ec <at_host_init+0x13c>)
   21702:	f364 108f 	bfi	r0, r4, #6, #10
   21706:	493b      	ldr	r1, [pc, #236]	; (217f4 <at_host_init+0x144>)
   21708:	f00d fbbc 	bl	2ee84 <log_string_sync>
		return -EINVAL;
   2170c:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   21710:	2301      	movs	r3, #1
   21712:	f04f 0000 	mov.w	r0, #0
   21716:	f363 0007 	bfi	r0, r3, #0, #8
   2171a:	f364 108f 	bfi	r0, r4, #6, #10
   2171e:	4936      	ldr	r1, [pc, #216]	; (217f8 <at_host_init+0x148>)
   21720:	f00d fbb0 	bl	2ee84 <log_string_sync>
		return -EFAULT;
   21724:	f06f 060d 	mvn.w	r6, #13
   21728:	e7dd      	b.n	216e6 <at_host_init+0x36>
	return z_impl_k_uptime_get();
   2172a:	f00e faee 	bl	2fd0a <z_impl_k_uptime_get>
   2172e:	4681      	mov	r9, r0
			LOG_INF("UART check failed: %d. "
   21730:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 21814 <at_host_init+0x164>
		err = uart_err_check(uart_dev);
   21734:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   21736:	6843      	ldr	r3, [r0, #4]
   21738:	689b      	ldr	r3, [r3, #8]
   2173a:	b39b      	cbz	r3, 217a4 <at_host_init+0xf4>
		return api->err_check(dev);
   2173c:	4798      	blx	r3
		if (err) {
   2173e:	4680      	mov	r8, r0
   21740:	b380      	cbz	r0, 217a4 <at_host_init+0xf4>
   21742:	f00e fae2 	bl	2fd0a <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   21746:	eba0 0009 	sub.w	r0, r0, r9
   2174a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   2174e:	d90d      	bls.n	2176c <at_host_init+0xbc>
				LOG_ERR("UART check failed: %d. "
   21750:	2301      	movs	r3, #1
   21752:	f04f 0000 	mov.w	r0, #0
   21756:	f363 0007 	bfi	r0, r3, #0, #8
   2175a:	4642      	mov	r2, r8
   2175c:	f364 108f 	bfi	r0, r4, #6, #10
   21760:	4926      	ldr	r1, [pc, #152]	; (217fc <at_host_init+0x14c>)
   21762:	f00d fb8f 	bl	2ee84 <log_string_sync>
				return -EIO;
   21766:	f06f 0204 	mvn.w	r2, #4
   2176a:	e7d1      	b.n	21710 <at_host_init+0x60>
			LOG_INF("UART check failed: %d. "
   2176c:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   21770:	f043 0303 	orr.w	r3, r3, #3
   21774:	f363 0707 	bfi	r7, r3, #0, #8
   21778:	f364 178f 	bfi	r7, r4, #6, #10
   2177c:	4642      	mov	r2, r8
   2177e:	4651      	mov	r1, sl
   21780:	4638      	mov	r0, r7
   21782:	f00d fb7f 	bl	2ee84 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   21786:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   21788:	6843      	ldr	r3, [r0, #4]
   2178a:	699b      	ldr	r3, [r3, #24]
   2178c:	b91b      	cbnz	r3, 21796 <at_host_init+0xe6>
	return z_impl_k_sleep(ms);
   2178e:	200a      	movs	r0, #10
   21790:	f00a fcaa 	bl	2c0e8 <z_impl_k_sleep>
   21794:	e7ce      	b.n	21734 <at_host_init+0x84>
		return api->fifo_read(dev, rx_data, size);
   21796:	2201      	movs	r2, #1
   21798:	f10d 0107 	add.w	r1, sp, #7
   2179c:	4798      	blx	r3
   2179e:	2800      	cmp	r0, #0
   217a0:	d1f1      	bne.n	21786 <at_host_init+0xd6>
   217a2:	e7f4      	b.n	2178e <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   217a4:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   217a6:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   217a8:	b123      	cbz	r3, 217b4 <at_host_init+0x104>
   217aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   217ac:	b113      	cbz	r3, 217b4 <at_host_init+0x104>
		api->irq_callback_set(dev, cb, user_data);
   217ae:	4914      	ldr	r1, [pc, #80]	; (21800 <at_host_init+0x150>)
   217b0:	4610      	mov	r0, r2
   217b2:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   217b4:	2200      	movs	r2, #0
   217b6:	4b13      	ldr	r3, [pc, #76]	; (21804 <at_host_init+0x154>)
   217b8:	4913      	ldr	r1, [pc, #76]	; (21808 <at_host_init+0x158>)
   217ba:	601a      	str	r2, [r3, #0]
   217bc:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   217c0:	4812      	ldr	r0, [pc, #72]	; (2180c <at_host_init+0x15c>)
   217c2:	230a      	movs	r3, #10
   217c4:	f44f 7200 	mov.w	r2, #512	; 0x200
   217c8:	4911      	ldr	r1, [pc, #68]	; (21810 <at_host_init+0x160>)
   217ca:	f00a ff7d 	bl	2c6c8 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   217ce:	6828      	ldr	r0, [r5, #0]
   217d0:	f00e f9e2 	bl	2fb98 <z_impl_uart_irq_rx_enable>
	return err;
   217d4:	e787      	b.n	216e6 <at_host_init+0x36>
   217d6:	bf00      	nop
   217d8:	20022936 	.word	0x20022936
   217dc:	0002fba3 	.word	0x0002fba3
   217e0:	00030e24 	.word	0x00030e24
   217e4:	00030e1c 	.word	0x00030e1c
   217e8:	000328f0 	.word	0x000328f0
   217ec:	0003255f 	.word	0x0003255f
   217f0:	20020358 	.word	0x20020358
   217f4:	0003290e 	.word	0x0003290e
   217f8:	00032989 	.word	0x00032989
   217fc:	0003291e 	.word	0x0003291e
   21800:	00021545 	.word	0x00021545
   21804:	2002034c 	.word	0x2002034c
   21808:	00021491 	.word	0x00021491
   2180c:	20020288 	.word	0x20020288
   21810:	20022e98 	.word	0x20022e98
   21814:	00032954 	.word	0x00032954

00021818 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   21818:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   2181a:	f7fc fca3 	bl	1e164 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   2181e:	2301      	movs	r3, #1
   21820:	f04f 0000 	mov.w	r0, #0
   21824:	4a06      	ldr	r2, [pc, #24]	; (21840 <k_sys_fatal_error_handler+0x28>)
   21826:	f363 0007 	bfi	r0, r3, #0, #8
   2182a:	4b06      	ldr	r3, [pc, #24]	; (21844 <k_sys_fatal_error_handler+0x2c>)
   2182c:	4906      	ldr	r1, [pc, #24]	; (21848 <k_sys_fatal_error_handler+0x30>)
   2182e:	1a9b      	subs	r3, r3, r2
   21830:	08db      	lsrs	r3, r3, #3
   21832:	f363 108f 	bfi	r0, r3, #6, #10
   21836:	f00d fb25 	bl	2ee84 <log_string_sync>
	sys_arch_reboot(0);
   2183a:	2000      	movs	r0, #0
   2183c:	f7fe f80e 	bl	1f85c <sys_arch_reboot>

	CODE_UNREACHABLE;
   21840:	00030e1c 	.word	0x00030e1c
   21844:	00030e4c 	.word	0x00030e4c
   21848:	00032bd0 	.word	0x00032bd0

0002184c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   2184c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   21850:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   21852:	4c21      	ldr	r4, [pc, #132]	; (218d8 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   21854:	4e21      	ldr	r6, [pc, #132]	; (218dc <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   21856:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2185a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 218e4 <check_ext_api_requests+0x98>
{
   2185e:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   21860:	45a8      	cmp	r8, r5
   21862:	d803      	bhi.n	2186c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   21864:	2000      	movs	r0, #0
   21866:	b005      	add	sp, #20
   21868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   2186c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2186e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   21872:	681f      	ldr	r7, [r3, #0]
   21874:	ab01      	add	r3, sp, #4
   21876:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2187a:	220c      	movs	r2, #12
   2187c:	4619      	mov	r1, r3
   2187e:	4638      	mov	r0, r7
   21880:	f00e fabb 	bl	2fdfa <memcmp>
   21884:	b990      	cbnz	r0, 218ac <check_ext_api_requests+0x60>
   21886:	b18f      	cbz	r7, 218ac <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   21888:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   2188a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2188c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   2188e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   21890:	4291      	cmp	r1, r2
   21892:	d10b      	bne.n	218ac <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   21894:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   21896:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   21898:	4291      	cmp	r1, r2
   2189a:	d807      	bhi.n	218ac <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   2189c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2189e:	4291      	cmp	r1, r2
   218a0:	d904      	bls.n	218ac <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   218a2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   218a4:	695b      	ldr	r3, [r3, #20]
   218a6:	ea32 0303 	bics.w	r3, r2, r3
   218aa:	d00a      	beq.n	218c2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   218ac:	6a27      	ldr	r7, [r4, #32]
   218ae:	b167      	cbz	r7, 218ca <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   218b0:	480b      	ldr	r0, [pc, #44]	; (218e0 <check_ext_api_requests+0x94>)
   218b2:	f00d fa90 	bl	2edd6 <printk>
			k_panic();
   218b6:	4040      	eors	r0, r0
   218b8:	f380 8811 	msr	BASEPRI, r0
   218bc:	f04f 0004 	mov.w	r0, #4
   218c0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   218c2:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   218c4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   218c6:	441c      	add	r4, r3
   218c8:	e7ca      	b.n	21860 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   218ca:	4648      	mov	r0, r9
   218cc:	f00d fa83 	bl	2edd6 <printk>
			*ext_api_req->ext_api = NULL;
   218d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   218d2:	601f      	str	r7, [r3, #0]
   218d4:	e7f5      	b.n	218c2 <check_ext_api_requests+0x76>
   218d6:	bf00      	nop
   218d8:	0001c43c 	.word	0x0001c43c
   218dc:	00030ec0 	.word	0x00030ec0
   218e0:	00032bed 	.word	0x00032bed
   218e4:	00032c16 	.word	0x00032c16

000218e8 <rpc_logobj_client_evt_handler>:
   218e8:	b120      	cbz	r0, 218f4 <rpc_logobj_client_evt_handler+0xc>
   218ea:	f850 1b08 	ldr.w	r1, [r0], #8
   218ee:	0c09      	lsrs	r1, r1, #16
   218f0:	f000 b852 	b.w	21998 <logobj_event_handler>
   218f4:	4770      	bx	lr
   218f6:	bf00      	nop

000218f8 <rpc_logobj_client_init>:
   218f8:	4801      	ldr	r0, [pc, #4]	; (21900 <rpc_logobj_client_init+0x8>)
   218fa:	f006 bbd1 	b.w	280a0 <rpc_client_register>
   218fe:	bf00      	nop
   21900:	0003115c 	.word	0x0003115c

00021904 <rpc_logobj_client_request_alloc>:
   21904:	2300      	movs	r3, #0
   21906:	b510      	push	{r4, lr}
   21908:	b082      	sub	sp, #8
   2190a:	9301      	str	r3, [sp, #4]
   2190c:	b961      	cbnz	r1, 21928 <rpc_logobj_client_request_alloc+0x24>
   2190e:	b170      	cbz	r0, 2192e <rpc_logobj_client_request_alloc+0x2a>
   21910:	4604      	mov	r4, r0
   21912:	aa01      	add	r2, sp, #4
   21914:	2009      	movs	r0, #9
   21916:	f006 fdfb 	bl	28510 <rpc_message_alloc>
   2191a:	b918      	cbnz	r0, 21924 <rpc_logobj_client_request_alloc+0x20>
   2191c:	9b01      	ldr	r3, [sp, #4]
   2191e:	b10b      	cbz	r3, 21924 <rpc_logobj_client_request_alloc+0x20>
   21920:	3308      	adds	r3, #8
   21922:	6023      	str	r3, [r4, #0]
   21924:	b002      	add	sp, #8
   21926:	bd10      	pop	{r4, pc}
   21928:	200f      	movs	r0, #15
   2192a:	b002      	add	sp, #8
   2192c:	bd10      	pop	{r4, pc}
   2192e:	200e      	movs	r0, #14
   21930:	b002      	add	sp, #8
   21932:	bd10      	pop	{r4, pc}

00021934 <rpc_logobj_client_request_send>:
   21934:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   21938:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2193c:	d10b      	bne.n	21956 <rpc_logobj_client_request_send+0x22>
   2193e:	b160      	cbz	r0, 2195a <rpc_logobj_client_request_send+0x26>
   21940:	4603      	mov	r3, r0
   21942:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   21946:	2009      	movs	r0, #9
   21948:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2194c:	f843 1d08 	str.w	r1, [r3, #-8]!
   21950:	4619      	mov	r1, r3
   21952:	f006 bdc5 	b.w	284e0 <rpc_message_send>
   21956:	200f      	movs	r0, #15
   21958:	4770      	bx	lr
   2195a:	200e      	movs	r0, #14
   2195c:	4770      	bx	lr
   2195e:	bf00      	nop

00021960 <rpc_logobj_client_message_free>:
   21960:	b120      	cbz	r0, 2196c <rpc_logobj_client_message_free+0xc>
   21962:	f1a0 0108 	sub.w	r1, r0, #8
   21966:	2009      	movs	r0, #9
   21968:	f006 be04 	b.w	28574 <rpc_message_free>
   2196c:	200e      	movs	r0, #14
   2196e:	4770      	bx	lr

00021970 <rpc_logobj_client_data_free>:
   21970:	b118      	cbz	r0, 2197a <rpc_logobj_client_data_free+0xa>
   21972:	4601      	mov	r1, r0
   21974:	2009      	movs	r0, #9
   21976:	f006 bf0f 	b.w	28798 <rpc_message_data_free>
   2197a:	200e      	movs	r0, #14
   2197c:	4770      	bx	lr
   2197e:	bf00      	nop

00021980 <packet_free_cb>:
   21980:	b510      	push	{r4, lr}
   21982:	4604      	mov	r4, r0
   21984:	6800      	ldr	r0, [r0, #0]
   21986:	f7ff fff3 	bl	21970 <rpc_logobj_client_data_free>
   2198a:	68a0      	ldr	r0, [r4, #8]
   2198c:	b118      	cbz	r0, 21996 <packet_free_cb+0x16>
   2198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21992:	f001 b935 	b.w	22c00 <nrf_free>
   21996:	bd10      	pop	{r4, pc}

00021998 <logobj_event_handler>:
   21998:	b530      	push	{r4, r5, lr}
   2199a:	4b3b      	ldr	r3, [pc, #236]	; (21a88 <logobj_event_handler+0xf0>)
   2199c:	b085      	sub	sp, #20
   2199e:	681d      	ldr	r5, [r3, #0]
   219a0:	2d00      	cmp	r5, #0
   219a2:	d04c      	beq.n	21a3e <logobj_event_handler+0xa6>
   219a4:	f248 0302 	movw	r3, #32770	; 0x8002
   219a8:	4299      	cmp	r1, r3
   219aa:	d053      	beq.n	21a54 <logobj_event_handler+0xbc>
   219ac:	d91c      	bls.n	219e8 <logobj_event_handler+0x50>
   219ae:	f248 0303 	movw	r3, #32771	; 0x8003
   219b2:	4299      	cmp	r1, r3
   219b4:	d05a      	beq.n	21a6c <logobj_event_handler+0xd4>
   219b6:	f249 0301 	movw	r3, #36865	; 0x9001
   219ba:	4299      	cmp	r1, r3
   219bc:	d147      	bne.n	21a4e <logobj_event_handler+0xb6>
   219be:	2400      	movs	r4, #0
   219c0:	6843      	ldr	r3, [r0, #4]
   219c2:	6802      	ldr	r2, [r0, #0]
   219c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
   219c8:	e9cd 2300 	strd	r2, r3, [sp]
   219cc:	69e8      	ldr	r0, [r5, #28]
   219ce:	4669      	mov	r1, sp
   219d0:	6803      	ldr	r3, [r0, #0]
   219d2:	685b      	ldr	r3, [r3, #4]
   219d4:	4798      	blx	r3
   219d6:	3001      	adds	r0, #1
   219d8:	d04e      	beq.n	21a78 <logobj_event_handler+0xe0>
   219da:	4620      	mov	r0, r4
   219dc:	682b      	ldr	r3, [r5, #0]
   219de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   219e2:	602b      	str	r3, [r5, #0]
   219e4:	b005      	add	sp, #20
   219e6:	bd30      	pop	{r4, r5, pc}
   219e8:	f248 0301 	movw	r3, #32769	; 0x8001
   219ec:	4299      	cmp	r1, r3
   219ee:	d12e      	bne.n	21a4e <logobj_event_handler+0xb6>
   219f0:	68c3      	ldr	r3, [r0, #12]
   219f2:	2b00      	cmp	r3, #0
   219f4:	d135      	bne.n	21a62 <logobj_event_handler+0xca>
   219f6:	6828      	ldr	r0, [r5, #0]
   219f8:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   219fc:	d03e      	beq.n	21a7c <logobj_event_handler+0xe4>
   219fe:	682b      	ldr	r3, [r5, #0]
   21a00:	b29b      	uxth	r3, r3
   21a02:	2b01      	cmp	r3, #1
   21a04:	d105      	bne.n	21a12 <logobj_event_handler+0x7a>
   21a06:	682b      	ldr	r3, [r5, #0]
   21a08:	0c1b      	lsrs	r3, r3, #16
   21a0a:	041b      	lsls	r3, r3, #16
   21a0c:	f043 0302 	orr.w	r3, r3, #2
   21a10:	602b      	str	r3, [r5, #0]
   21a12:	4b1e      	ldr	r3, [pc, #120]	; (21a8c <logobj_event_handler+0xf4>)
   21a14:	781a      	ldrb	r2, [r3, #0]
   21a16:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   21a1a:	2a00      	cmp	r2, #0
   21a1c:	d031      	beq.n	21a82 <logobj_event_handler+0xea>
   21a1e:	4a1c      	ldr	r2, [pc, #112]	; (21a90 <logobj_event_handler+0xf8>)
   21a20:	7811      	ldrb	r1, [r2, #0]
   21a22:	b909      	cbnz	r1, 21a28 <logobj_event_handler+0x90>
   21a24:	2101      	movs	r1, #1
   21a26:	7011      	strb	r1, [r2, #0]
   21a28:	2000      	movs	r0, #0
   21a2a:	7018      	strb	r0, [r3, #0]
   21a2c:	682b      	ldr	r3, [r5, #0]
   21a2e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   21a32:	602b      	str	r3, [r5, #0]
   21a34:	682b      	ldr	r3, [r5, #0]
   21a36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   21a3a:	602b      	str	r3, [r5, #0]
   21a3c:	e7d2      	b.n	219e4 <logobj_event_handler+0x4c>
   21a3e:	6800      	ldr	r0, [r0, #0]
   21a40:	2800      	cmp	r0, #0
   21a42:	d0cf      	beq.n	219e4 <logobj_event_handler+0x4c>
   21a44:	f7ff ff94 	bl	21970 <rpc_logobj_client_data_free>
   21a48:	4628      	mov	r0, r5
   21a4a:	b005      	add	sp, #20
   21a4c:	bd30      	pop	{r4, r5, pc}
   21a4e:	2000      	movs	r0, #0
   21a50:	b005      	add	sp, #20
   21a52:	bd30      	pop	{r4, r5, pc}
   21a54:	682b      	ldr	r3, [r5, #0]
   21a56:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   21a5a:	d00b      	beq.n	21a74 <logobj_event_handler+0xdc>
   21a5c:	68c0      	ldr	r0, [r0, #12]
   21a5e:	2800      	cmp	r0, #0
   21a60:	d0e4      	beq.n	21a2c <logobj_event_handler+0x94>
   21a62:	230e      	movs	r3, #14
   21a64:	2000      	movs	r0, #0
   21a66:	606b      	str	r3, [r5, #4]
   21a68:	b005      	add	sp, #20
   21a6a:	bd30      	pop	{r4, r5, pc}
   21a6c:	68c3      	ldr	r3, [r0, #12]
   21a6e:	2b01      	cmp	r3, #1
   21a70:	d1a5      	bne.n	219be <logobj_event_handler+0x26>
   21a72:	e7f6      	b.n	21a62 <logobj_event_handler+0xca>
   21a74:	4618      	mov	r0, r3
   21a76:	e7b5      	b.n	219e4 <logobj_event_handler+0x4c>
   21a78:	2002      	movs	r0, #2
   21a7a:	e7b3      	b.n	219e4 <logobj_event_handler+0x4c>
   21a7c:	230e      	movs	r3, #14
   21a7e:	606b      	str	r3, [r5, #4]
   21a80:	e7b0      	b.n	219e4 <logobj_event_handler+0x4c>
   21a82:	4a03      	ldr	r2, [pc, #12]	; (21a90 <logobj_event_handler+0xf8>)
   21a84:	7011      	strb	r1, [r2, #0]
   21a86:	e7cf      	b.n	21a28 <logobj_event_handler+0x90>
   21a88:	20020360 	.word	0x20020360
   21a8c:	20022937 	.word	0x20022937
   21a90:	20022938 	.word	0x20022938

00021a94 <logobj_interface_init>:
   21a94:	2300      	movs	r3, #0
   21a96:	b510      	push	{r4, lr}
   21a98:	4907      	ldr	r1, [pc, #28]	; (21ab8 <logobj_interface_init+0x24>)
   21a9a:	4a08      	ldr	r2, [pc, #32]	; (21abc <logobj_interface_init+0x28>)
   21a9c:	4c08      	ldr	r4, [pc, #32]	; (21ac0 <logobj_interface_init+0x2c>)
   21a9e:	4809      	ldr	r0, [pc, #36]	; (21ac4 <logobj_interface_init+0x30>)
   21aa0:	7023      	strb	r3, [r4, #0]
   21aa2:	6003      	str	r3, [r0, #0]
   21aa4:	700b      	strb	r3, [r1, #0]
   21aa6:	6013      	str	r3, [r2, #0]
   21aa8:	f7ff ff26 	bl	218f8 <rpc_logobj_client_init>
   21aac:	3000      	adds	r0, #0
   21aae:	bf18      	it	ne
   21ab0:	2001      	movne	r0, #1
   21ab2:	4240      	negs	r0, r0
   21ab4:	bd10      	pop	{r4, pc}
   21ab6:	bf00      	nop
   21ab8:	20022937 	.word	0x20022937
   21abc:	2002035c 	.word	0x2002035c
   21ac0:	20022938 	.word	0x20022938
   21ac4:	20020360 	.word	0x20020360

00021ac8 <logobj_interface_open>:
   21ac8:	2300      	movs	r3, #0
   21aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21ace:	2866      	cmp	r0, #102	; 0x66
   21ad0:	b082      	sub	sp, #8
   21ad2:	9300      	str	r3, [sp, #0]
   21ad4:	d172      	bne.n	21bbc <logobj_interface_open+0xf4>
   21ad6:	2902      	cmp	r1, #2
   21ad8:	4689      	mov	r9, r1
   21ada:	d16f      	bne.n	21bbc <logobj_interface_open+0xf4>
   21adc:	f240 2305 	movw	r3, #517	; 0x205
   21ae0:	429a      	cmp	r2, r3
   21ae2:	4692      	mov	sl, r2
   21ae4:	d16a      	bne.n	21bbc <logobj_interface_open+0xf4>
   21ae6:	4f48      	ldr	r7, [pc, #288]	; (21c08 <logobj_interface_open+0x140>)
   21ae8:	683d      	ldr	r5, [r7, #0]
   21aea:	2d00      	cmp	r5, #0
   21aec:	d17c      	bne.n	21be8 <logobj_interface_open+0x120>
   21aee:	4680      	mov	r8, r0
   21af0:	4a46      	ldr	r2, [pc, #280]	; (21c0c <logobj_interface_open+0x144>)
   21af2:	4668      	mov	r0, sp
   21af4:	f006 f872 	bl	27bdc <interface_socket_allocate>
   21af8:	9b00      	ldr	r3, [sp, #0]
   21afa:	4606      	mov	r6, r0
   21afc:	2b00      	cmp	r3, #0
   21afe:	d07d      	beq.n	21bfc <logobj_interface_open+0x134>
   21b00:	4629      	mov	r1, r5
   21b02:	2204      	movs	r2, #4
   21b04:	4842      	ldr	r0, [pc, #264]	; (21c10 <logobj_interface_open+0x148>)
   21b06:	603b      	str	r3, [r7, #0]
   21b08:	f00e f992 	bl	2fe30 <memset>
   21b0c:	9c00      	ldr	r4, [sp, #0]
   21b0e:	4629      	mov	r1, r5
   21b10:	e9c4 8903 	strd	r8, r9, [r4, #12]
   21b14:	f8c4 a014 	str.w	sl, [r4, #20]
   21b18:	a801      	add	r0, sp, #4
   21b1a:	f7ff fef3 	bl	21904 <rpc_logobj_client_request_alloc>
   21b1e:	2800      	cmp	r0, #0
   21b20:	d13c      	bne.n	21b9c <logobj_interface_open+0xd4>
   21b22:	2201      	movs	r2, #1
   21b24:	2104      	movs	r1, #4
   21b26:	9b01      	ldr	r3, [sp, #4]
   21b28:	4d3a      	ldr	r5, [pc, #232]	; (21c14 <logobj_interface_open+0x14c>)
   21b2a:	7358      	strb	r0, [r3, #13]
   21b2c:	7398      	strb	r0, [r3, #14]
   21b2e:	73d8      	strb	r0, [r3, #15]
   21b30:	7258      	strb	r0, [r3, #9]
   21b32:	7298      	strb	r0, [r3, #10]
   21b34:	72d8      	strb	r0, [r3, #11]
   21b36:	7219      	strb	r1, [r3, #8]
   21b38:	702a      	strb	r2, [r5, #0]
   21b3a:	731a      	strb	r2, [r3, #12]
   21b3c:	6822      	ldr	r2, [r4, #0]
   21b3e:	4618      	mov	r0, r3
   21b40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   21b44:	6022      	str	r2, [r4, #0]
   21b46:	f247 0101 	movw	r1, #28673	; 0x7001
   21b4a:	f7ff fef3 	bl	21934 <rpc_logobj_client_request_send>
   21b4e:	bb38      	cbnz	r0, 21ba0 <logobj_interface_open+0xd8>
   21b50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   21b54:	f04f 33ff 	mov.w	r3, #4294967295
   21b58:	4611      	mov	r1, r2
   21b5a:	4630      	mov	r0, r6
   21b5c:	f006 f8f0 	bl	27d40 <interface_socket_wait>
   21b60:	4604      	mov	r4, r0
   21b62:	b310      	cbz	r0, 21baa <logobj_interface_open+0xe2>
   21b64:	9a00      	ldr	r2, [sp, #0]
   21b66:	2e00      	cmp	r6, #0
   21b68:	6813      	ldr	r3, [r2, #0]
   21b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21b6e:	6013      	str	r3, [r2, #0]
   21b70:	9a00      	ldr	r2, [sp, #0]
   21b72:	6813      	ldr	r3, [r2, #0]
   21b74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   21b78:	6013      	str	r3, [r2, #0]
   21b7a:	9a00      	ldr	r2, [sp, #0]
   21b7c:	6813      	ldr	r3, [r2, #0]
   21b7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   21b82:	6013      	str	r3, [r2, #0]
   21b84:	da36      	bge.n	21bf4 <logobj_interface_open+0x12c>
   21b86:	2300      	movs	r3, #0
   21b88:	4620      	mov	r0, r4
   21b8a:	603b      	str	r3, [r7, #0]
   21b8c:	f04f 36ff 	mov.w	r6, #4294967295
   21b90:	f7fe ff2c 	bl	209ec <bsd_os_errno_set>
   21b94:	4630      	mov	r0, r6
   21b96:	b002      	add	sp, #8
   21b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21b9c:	240c      	movs	r4, #12
   21b9e:	e7e1      	b.n	21b64 <logobj_interface_open+0x9c>
   21ba0:	9801      	ldr	r0, [sp, #4]
   21ba2:	f7ff fedd 	bl	21960 <rpc_logobj_client_message_free>
   21ba6:	2405      	movs	r4, #5
   21ba8:	e7dc      	b.n	21b64 <logobj_interface_open+0x9c>
   21baa:	4630      	mov	r0, r6
   21bac:	f006 f93c 	bl	27e28 <interface_socket_from_handle_get>
   21bb0:	b150      	cbz	r0, 21bc8 <logobj_interface_open+0x100>
   21bb2:	6844      	ldr	r4, [r0, #4]
   21bb4:	b144      	cbz	r4, 21bc8 <logobj_interface_open+0x100>
   21bb6:	2300      	movs	r3, #0
   21bb8:	6043      	str	r3, [r0, #4]
   21bba:	e7d3      	b.n	21b64 <logobj_interface_open+0x9c>
   21bbc:	2016      	movs	r0, #22
   21bbe:	f7fe ff15 	bl	209ec <bsd_os_errno_set>
   21bc2:	f04f 36ff 	mov.w	r6, #4294967295
   21bc6:	e7e5      	b.n	21b94 <logobj_interface_open+0xcc>
   21bc8:	9a00      	ldr	r2, [sp, #0]
   21bca:	6813      	ldr	r3, [r2, #0]
   21bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21bd0:	6013      	str	r3, [r2, #0]
   21bd2:	9a00      	ldr	r2, [sp, #0]
   21bd4:	6813      	ldr	r3, [r2, #0]
   21bd6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   21bda:	6013      	str	r3, [r2, #0]
   21bdc:	9a00      	ldr	r2, [sp, #0]
   21bde:	6813      	ldr	r3, [r2, #0]
   21be0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   21be4:	6013      	str	r3, [r2, #0]
   21be6:	e7d5      	b.n	21b94 <logobj_interface_open+0xcc>
   21be8:	2001      	movs	r0, #1
   21bea:	f7fe feff 	bl	209ec <bsd_os_errno_set>
   21bee:	f04f 36ff 	mov.w	r6, #4294967295
   21bf2:	e7cf      	b.n	21b94 <logobj_interface_open+0xcc>
   21bf4:	4630      	mov	r0, r6
   21bf6:	f006 f855 	bl	27ca4 <interface_socket_free>
   21bfa:	e7c4      	b.n	21b86 <logobj_interface_open+0xbe>
   21bfc:	2018      	movs	r0, #24
   21bfe:	f7fe fef5 	bl	209ec <bsd_os_errno_set>
   21c02:	f04f 36ff 	mov.w	r6, #4294967295
   21c06:	e7c5      	b.n	21b94 <logobj_interface_open+0xcc>
   21c08:	20020360 	.word	0x20020360
   21c0c:	00021981 	.word	0x00021981
   21c10:	2002035c 	.word	0x2002035c
   21c14:	20022937 	.word	0x20022937

00021c18 <logobj_interface_read>:
   21c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21c1c:	b085      	sub	sp, #20
   21c1e:	2900      	cmp	r1, #0
   21c20:	d068      	beq.n	21cf4 <logobj_interface_read+0xdc>
   21c22:	2a00      	cmp	r2, #0
   21c24:	4617      	mov	r7, r2
   21c26:	dd65      	ble.n	21cf4 <logobj_interface_read+0xdc>
   21c28:	461d      	mov	r5, r3
   21c2a:	4680      	mov	r8, r0
   21c2c:	460e      	mov	r6, r1
   21c2e:	f006 f8fb 	bl	27e28 <interface_socket_from_handle_get>
   21c32:	4604      	mov	r4, r0
   21c34:	2800      	cmp	r0, #0
   21c36:	d063      	beq.n	21d00 <logobj_interface_read+0xe8>
   21c38:	bb4d      	cbnz	r5, 21c8e <logobj_interface_read+0x76>
   21c3a:	69e0      	ldr	r0, [r4, #28]
   21c3c:	07aa      	lsls	r2, r5, #30
   21c3e:	6803      	ldr	r3, [r0, #0]
   21c40:	68db      	ldr	r3, [r3, #12]
   21c42:	d52d      	bpl.n	21ca0 <logobj_interface_read+0x88>
   21c44:	4798      	blx	r3
   21c46:	3001      	adds	r0, #1
   21c48:	d044      	beq.n	21cd4 <logobj_interface_read+0xbc>
   21c4a:	6823      	ldr	r3, [r4, #0]
   21c4c:	69e0      	ldr	r0, [r4, #28]
   21c4e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   21c52:	d041      	beq.n	21cd8 <logobj_interface_read+0xc0>
   21c54:	2100      	movs	r1, #0
   21c56:	6823      	ldr	r3, [r4, #0]
   21c58:	462a      	mov	r2, r5
   21c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   21c5e:	6023      	str	r3, [r4, #0]
   21c60:	e9cd 1102 	strd	r1, r1, [sp, #8]
   21c64:	e9cd 6700 	strd	r6, r7, [sp]
   21c68:	6803      	ldr	r3, [r0, #0]
   21c6a:	4669      	mov	r1, sp
   21c6c:	689b      	ldr	r3, [r3, #8]
   21c6e:	4798      	blx	r3
   21c70:	4605      	mov	r5, r0
   21c72:	69e0      	ldr	r0, [r4, #28]
   21c74:	6803      	ldr	r3, [r0, #0]
   21c76:	68db      	ldr	r3, [r3, #12]
   21c78:	4798      	blx	r3
   21c7a:	3001      	adds	r0, #1
   21c7c:	d003      	beq.n	21c86 <logobj_interface_read+0x6e>
   21c7e:	6823      	ldr	r3, [r4, #0]
   21c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   21c84:	6023      	str	r3, [r4, #0]
   21c86:	4628      	mov	r0, r5
   21c88:	b005      	add	sp, #20
   21c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21c8e:	f015 0f0a 	tst.w	r5, #10
   21c92:	d1d2      	bne.n	21c3a <logobj_interface_read+0x22>
   21c94:	202d      	movs	r0, #45	; 0x2d
   21c96:	f7fe fea9 	bl	209ec <bsd_os_errno_set>
   21c9a:	f04f 35ff 	mov.w	r5, #4294967295
   21c9e:	e7f2      	b.n	21c86 <logobj_interface_read+0x6e>
   21ca0:	6822      	ldr	r2, [r4, #0]
   21ca2:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   21ca6:	d1cd      	bne.n	21c44 <logobj_interface_read+0x2c>
   21ca8:	4798      	blx	r3
   21caa:	1c43      	adds	r3, r0, #1
   21cac:	d1cd      	bne.n	21c4a <logobj_interface_read+0x32>
   21cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21cb2:	6a23      	ldr	r3, [r4, #32]
   21cb4:	4611      	mov	r1, r2
   21cb6:	2b00      	cmp	r3, #0
   21cb8:	bf08      	it	eq
   21cba:	4603      	moveq	r3, r0
   21cbc:	4640      	mov	r0, r8
   21cbe:	f006 f83f 	bl	27d40 <interface_socket_wait>
   21cc2:	b158      	cbz	r0, 21cdc <logobj_interface_read+0xc4>
   21cc4:	f04f 35ff 	mov.w	r5, #4294967295
   21cc8:	f7fe fe90 	bl	209ec <bsd_os_errno_set>
   21ccc:	4628      	mov	r0, r5
   21cce:	b005      	add	sp, #20
   21cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21cd4:	2023      	movs	r0, #35	; 0x23
   21cd6:	e7f5      	b.n	21cc4 <logobj_interface_read+0xac>
   21cd8:	461d      	mov	r5, r3
   21cda:	e7cb      	b.n	21c74 <logobj_interface_read+0x5c>
   21cdc:	4640      	mov	r0, r8
   21cde:	f006 f8a3 	bl	27e28 <interface_socket_from_handle_get>
   21ce2:	4603      	mov	r3, r0
   21ce4:	2800      	cmp	r0, #0
   21ce6:	d0b0      	beq.n	21c4a <logobj_interface_read+0x32>
   21ce8:	6840      	ldr	r0, [r0, #4]
   21cea:	2800      	cmp	r0, #0
   21cec:	d0ad      	beq.n	21c4a <logobj_interface_read+0x32>
   21cee:	f8c3 9004 	str.w	r9, [r3, #4]
   21cf2:	e7e7      	b.n	21cc4 <logobj_interface_read+0xac>
   21cf4:	2016      	movs	r0, #22
   21cf6:	f7fe fe79 	bl	209ec <bsd_os_errno_set>
   21cfa:	f04f 35ff 	mov.w	r5, #4294967295
   21cfe:	e7c2      	b.n	21c86 <logobj_interface_read+0x6e>
   21d00:	2009      	movs	r0, #9
   21d02:	f7fe fe73 	bl	209ec <bsd_os_errno_set>
   21d06:	f04f 35ff 	mov.w	r5, #4294967295
   21d0a:	e7bc      	b.n	21c86 <logobj_interface_read+0x6e>

00021d0c <logobj_interface_write>:
   21d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d10:	b082      	sub	sp, #8
   21d12:	2900      	cmp	r1, #0
   21d14:	d05e      	beq.n	21dd4 <logobj_interface_write+0xc8>
   21d16:	2a04      	cmp	r2, #4
   21d18:	d15c      	bne.n	21dd4 <logobj_interface_write+0xc8>
   21d1a:	461e      	mov	r6, r3
   21d1c:	4607      	mov	r7, r0
   21d1e:	460d      	mov	r5, r1
   21d20:	f006 f882 	bl	27e28 <interface_socket_from_handle_get>
   21d24:	4604      	mov	r4, r0
   21d26:	2800      	cmp	r0, #0
   21d28:	d070      	beq.n	21e0c <logobj_interface_write+0x100>
   21d2a:	b1e6      	cbz	r6, 21d66 <logobj_interface_write+0x5a>
   21d2c:	07b0      	lsls	r0, r6, #30
   21d2e:	d567      	bpl.n	21e00 <logobj_interface_write+0xf4>
   21d30:	6823      	ldr	r3, [r4, #0]
   21d32:	039b      	lsls	r3, r3, #14
   21d34:	d560      	bpl.n	21df8 <logobj_interface_write+0xec>
   21d36:	2600      	movs	r6, #0
   21d38:	6823      	ldr	r3, [r4, #0]
   21d3a:	2100      	movs	r1, #0
   21d3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   21d40:	6023      	str	r3, [r4, #0]
   21d42:	a801      	add	r0, sp, #4
   21d44:	f8d5 8000 	ldr.w	r8, [r5]
   21d48:	f7ff fddc 	bl	21904 <rpc_logobj_client_request_alloc>
   21d4c:	b198      	cbz	r0, 21d76 <logobj_interface_write+0x6a>
   21d4e:	200c      	movs	r0, #12
   21d50:	6823      	ldr	r3, [r4, #0]
   21d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21d56:	6023      	str	r3, [r4, #0]
   21d58:	f7fe fe48 	bl	209ec <bsd_os_errno_set>
   21d5c:	f04f 30ff 	mov.w	r0, #4294967295
   21d60:	b002      	add	sp, #8
   21d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21d66:	6803      	ldr	r3, [r0, #0]
   21d68:	00d9      	lsls	r1, r3, #3
   21d6a:	d4e1      	bmi.n	21d30 <logobj_interface_write+0x24>
   21d6c:	6803      	ldr	r3, [r0, #0]
   21d6e:	039a      	lsls	r2, r3, #14
   21d70:	d544      	bpl.n	21dfc <logobj_interface_write+0xf0>
   21d72:	2601      	movs	r6, #1
   21d74:	e7e0      	b.n	21d38 <logobj_interface_write+0x2c>
   21d76:	2504      	movs	r5, #4
   21d78:	9b01      	ldr	r3, [sp, #4]
   21d7a:	f247 0103 	movw	r1, #28675	; 0x7003
   21d7e:	f8c3 800c 	str.w	r8, [r3, #12]
   21d82:	7258      	strb	r0, [r3, #9]
   21d84:	7298      	strb	r0, [r3, #10]
   21d86:	72d8      	strb	r0, [r3, #11]
   21d88:	721d      	strb	r5, [r3, #8]
   21d8a:	4618      	mov	r0, r3
   21d8c:	f7ff fdd2 	bl	21934 <rpc_logobj_client_request_send>
   21d90:	4680      	mov	r8, r0
   21d92:	b9b0      	cbnz	r0, 21dc2 <logobj_interface_write+0xb6>
   21d94:	b93e      	cbnz	r6, 21da6 <logobj_interface_write+0x9a>
   21d96:	4628      	mov	r0, r5
   21d98:	6823      	ldr	r3, [r4, #0]
   21d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21d9e:	6023      	str	r3, [r4, #0]
   21da0:	b002      	add	sp, #8
   21da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21da6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21daa:	f04f 33ff 	mov.w	r3, #4294967295
   21dae:	4611      	mov	r1, r2
   21db0:	4638      	mov	r0, r7
   21db2:	f005 ffc5 	bl	27d40 <interface_socket_wait>
   21db6:	b198      	cbz	r0, 21de0 <logobj_interface_write+0xd4>
   21db8:	6823      	ldr	r3, [r4, #0]
   21dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21dbe:	6023      	str	r3, [r4, #0]
   21dc0:	e7ca      	b.n	21d58 <logobj_interface_write+0x4c>
   21dc2:	9801      	ldr	r0, [sp, #4]
   21dc4:	f7ff fdcc 	bl	21960 <rpc_logobj_client_message_free>
   21dc8:	6823      	ldr	r3, [r4, #0]
   21dca:	2005      	movs	r0, #5
   21dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21dd0:	6023      	str	r3, [r4, #0]
   21dd2:	e7c1      	b.n	21d58 <logobj_interface_write+0x4c>
   21dd4:	2016      	movs	r0, #22
   21dd6:	f7fe fe09 	bl	209ec <bsd_os_errno_set>
   21dda:	f04f 30ff 	mov.w	r0, #4294967295
   21dde:	e7bf      	b.n	21d60 <logobj_interface_write+0x54>
   21de0:	4638      	mov	r0, r7
   21de2:	f006 f821 	bl	27e28 <interface_socket_from_handle_get>
   21de6:	4603      	mov	r3, r0
   21de8:	2800      	cmp	r0, #0
   21dea:	d0d4      	beq.n	21d96 <logobj_interface_write+0x8a>
   21dec:	6840      	ldr	r0, [r0, #4]
   21dee:	2800      	cmp	r0, #0
   21df0:	d0d1      	beq.n	21d96 <logobj_interface_write+0x8a>
   21df2:	f8c3 8004 	str.w	r8, [r3, #4]
   21df6:	e7df      	b.n	21db8 <logobj_interface_write+0xac>
   21df8:	2073      	movs	r0, #115	; 0x73
   21dfa:	e7ad      	b.n	21d58 <logobj_interface_write+0x4c>
   21dfc:	2009      	movs	r0, #9
   21dfe:	e7ab      	b.n	21d58 <logobj_interface_write+0x4c>
   21e00:	202d      	movs	r0, #45	; 0x2d
   21e02:	f7fe fdf3 	bl	209ec <bsd_os_errno_set>
   21e06:	f04f 30ff 	mov.w	r0, #4294967295
   21e0a:	e7a9      	b.n	21d60 <logobj_interface_write+0x54>
   21e0c:	2009      	movs	r0, #9
   21e0e:	f7fe fded 	bl	209ec <bsd_os_errno_set>
   21e12:	f04f 30ff 	mov.w	r0, #4294967295
   21e16:	e7a3      	b.n	21d60 <logobj_interface_write+0x54>

00021e18 <logobj_interface_setopt>:
   21e18:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e1a:	2901      	cmp	r1, #1
   21e1c:	b085      	sub	sp, #20
   21e1e:	d068      	beq.n	21ef2 <logobj_interface_setopt+0xda>
   21e20:	461e      	mov	r6, r3
   21e22:	f240 2305 	movw	r3, #517	; 0x205
   21e26:	4299      	cmp	r1, r3
   21e28:	f040 8095 	bne.w	21f56 <logobj_interface_setopt+0x13e>
   21e2c:	4607      	mov	r7, r0
   21e2e:	4615      	mov	r5, r2
   21e30:	f005 fffa 	bl	27e28 <interface_socket_from_handle_get>
   21e34:	4604      	mov	r4, r0
   21e36:	2800      	cmp	r0, #0
   21e38:	f000 80b2 	beq.w	21fa0 <logobj_interface_setopt+0x188>
   21e3c:	2d01      	cmp	r5, #1
   21e3e:	d019      	beq.n	21e74 <logobj_interface_setopt+0x5c>
   21e40:	2d02      	cmp	r5, #2
   21e42:	d010      	beq.n	21e66 <logobj_interface_setopt+0x4e>
   21e44:	252a      	movs	r5, #42	; 0x2a
   21e46:	6803      	ldr	r3, [r0, #0]
   21e48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   21e4c:	6023      	str	r3, [r4, #0]
   21e4e:	6823      	ldr	r3, [r4, #0]
   21e50:	4628      	mov	r0, r5
   21e52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   21e56:	6023      	str	r3, [r4, #0]
   21e58:	f7fe fdc8 	bl	209ec <bsd_os_errno_set>
   21e5c:	f04f 35ff 	mov.w	r5, #4294967295
   21e60:	4628      	mov	r0, r5
   21e62:	b005      	add	sp, #20
   21e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21e66:	b116      	cbz	r6, 21e6e <logobj_interface_setopt+0x56>
   21e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e6a:	2b01      	cmp	r3, #1
   21e6c:	d049      	beq.n	21f02 <logobj_interface_setopt+0xea>
   21e6e:	6823      	ldr	r3, [r4, #0]
   21e70:	2516      	movs	r5, #22
   21e72:	e7e9      	b.n	21e48 <logobj_interface_setopt+0x30>
   21e74:	2e00      	cmp	r6, #0
   21e76:	d0fa      	beq.n	21e6e <logobj_interface_setopt+0x56>
   21e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e7a:	2b04      	cmp	r3, #4
   21e7c:	d1f7      	bne.n	21e6e <logobj_interface_setopt+0x56>
   21e7e:	2100      	movs	r1, #0
   21e80:	a803      	add	r0, sp, #12
   21e82:	f7ff fd3f 	bl	21904 <rpc_logobj_client_request_alloc>
   21e86:	4605      	mov	r5, r0
   21e88:	2800      	cmp	r0, #0
   21e8a:	d16a      	bne.n	21f62 <logobj_interface_setopt+0x14a>
   21e8c:	9803      	ldr	r0, [sp, #12]
   21e8e:	2208      	movs	r2, #8
   21e90:	4629      	mov	r1, r5
   21e92:	300c      	adds	r0, #12
   21e94:	f00d ffcc 	bl	2fe30 <memset>
   21e98:	9803      	ldr	r0, [sp, #12]
   21e9a:	4631      	mov	r1, r6
   21e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21e9e:	300c      	adds	r0, #12
   21ea0:	f00d ffb9 	bl	2fe16 <memcpy>
   21ea4:	2308      	movs	r3, #8
   21ea6:	9803      	ldr	r0, [sp, #12]
   21ea8:	f247 0102 	movw	r1, #28674	; 0x7002
   21eac:	7203      	strb	r3, [r0, #8]
   21eae:	7245      	strb	r5, [r0, #9]
   21eb0:	7285      	strb	r5, [r0, #10]
   21eb2:	72c5      	strb	r5, [r0, #11]
   21eb4:	6823      	ldr	r3, [r4, #0]
   21eb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   21eba:	6023      	str	r3, [r4, #0]
   21ebc:	f7ff fd3a 	bl	21934 <rpc_logobj_client_request_send>
   21ec0:	2800      	cmp	r0, #0
   21ec2:	d151      	bne.n	21f68 <logobj_interface_setopt+0x150>
   21ec4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   21ec8:	f04f 33ff 	mov.w	r3, #4294967295
   21ecc:	4611      	mov	r1, r2
   21ece:	4638      	mov	r0, r7
   21ed0:	f005 ff36 	bl	27d40 <interface_socket_wait>
   21ed4:	4605      	mov	r5, r0
   21ed6:	2800      	cmp	r0, #0
   21ed8:	d13b      	bne.n	21f52 <logobj_interface_setopt+0x13a>
   21eda:	4638      	mov	r0, r7
   21edc:	f005 ffa4 	bl	27e28 <interface_socket_from_handle_get>
   21ee0:	2800      	cmp	r0, #0
   21ee2:	d04f      	beq.n	21f84 <logobj_interface_setopt+0x16c>
   21ee4:	6843      	ldr	r3, [r0, #4]
   21ee6:	2b00      	cmp	r3, #0
   21ee8:	d04c      	beq.n	21f84 <logobj_interface_setopt+0x16c>
   21eea:	2200      	movs	r2, #0
   21eec:	461d      	mov	r5, r3
   21eee:	6042      	str	r2, [r0, #4]
   21ef0:	e02f      	b.n	21f52 <logobj_interface_setopt+0x13a>
   21ef2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   21ef4:	9400      	str	r4, [sp, #0]
   21ef6:	f005 ffbf 	bl	27e78 <interface_socket_setopt>
   21efa:	4605      	mov	r5, r0
   21efc:	4628      	mov	r0, r5
   21efe:	b005      	add	sp, #20
   21f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21f02:	2100      	movs	r1, #0
   21f04:	a803      	add	r0, sp, #12
   21f06:	7835      	ldrb	r5, [r6, #0]
   21f08:	f7ff fcfc 	bl	21904 <rpc_logobj_client_request_alloc>
   21f0c:	bb48      	cbnz	r0, 21f62 <logobj_interface_setopt+0x14a>
   21f0e:	2d01      	cmp	r5, #1
   21f10:	bf08      	it	eq
   21f12:	4b26      	ldreq	r3, [pc, #152]	; (21fac <logobj_interface_setopt+0x194>)
   21f14:	f04f 0204 	mov.w	r2, #4
   21f18:	bf08      	it	eq
   21f1a:	701d      	strbeq	r5, [r3, #0]
   21f1c:	2300      	movs	r3, #0
   21f1e:	9803      	ldr	r0, [sp, #12]
   21f20:	f247 0101 	movw	r1, #28673	; 0x7001
   21f24:	7243      	strb	r3, [r0, #9]
   21f26:	60c5      	str	r5, [r0, #12]
   21f28:	7283      	strb	r3, [r0, #10]
   21f2a:	72c3      	strb	r3, [r0, #11]
   21f2c:	7202      	strb	r2, [r0, #8]
   21f2e:	6823      	ldr	r3, [r4, #0]
   21f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   21f34:	6023      	str	r3, [r4, #0]
   21f36:	f7ff fcfd 	bl	21934 <rpc_logobj_client_request_send>
   21f3a:	4606      	mov	r6, r0
   21f3c:	b9a0      	cbnz	r0, 21f68 <logobj_interface_setopt+0x150>
   21f3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   21f42:	f04f 33ff 	mov.w	r3, #4294967295
   21f46:	4611      	mov	r1, r2
   21f48:	4638      	mov	r0, r7
   21f4a:	f005 fef9 	bl	27d40 <interface_socket_wait>
   21f4e:	4605      	mov	r5, r0
   21f50:	b180      	cbz	r0, 21f74 <logobj_interface_setopt+0x15c>
   21f52:	6823      	ldr	r3, [r4, #0]
   21f54:	e778      	b.n	21e48 <logobj_interface_setopt+0x30>
   21f56:	202a      	movs	r0, #42	; 0x2a
   21f58:	f7fe fd48 	bl	209ec <bsd_os_errno_set>
   21f5c:	f04f 35ff 	mov.w	r5, #4294967295
   21f60:	e77e      	b.n	21e60 <logobj_interface_setopt+0x48>
   21f62:	6823      	ldr	r3, [r4, #0]
   21f64:	250c      	movs	r5, #12
   21f66:	e76f      	b.n	21e48 <logobj_interface_setopt+0x30>
   21f68:	9803      	ldr	r0, [sp, #12]
   21f6a:	f7ff fcf9 	bl	21960 <rpc_logobj_client_message_free>
   21f6e:	2505      	movs	r5, #5
   21f70:	6823      	ldr	r3, [r4, #0]
   21f72:	e769      	b.n	21e48 <logobj_interface_setopt+0x30>
   21f74:	4638      	mov	r0, r7
   21f76:	f005 ff57 	bl	27e28 <interface_socket_from_handle_get>
   21f7a:	b140      	cbz	r0, 21f8e <logobj_interface_setopt+0x176>
   21f7c:	6845      	ldr	r5, [r0, #4]
   21f7e:	b135      	cbz	r5, 21f8e <logobj_interface_setopt+0x176>
   21f80:	6046      	str	r6, [r0, #4]
   21f82:	e7e6      	b.n	21f52 <logobj_interface_setopt+0x13a>
   21f84:	4631      	mov	r1, r6
   21f86:	2204      	movs	r2, #4
   21f88:	4809      	ldr	r0, [pc, #36]	; (21fb0 <logobj_interface_setopt+0x198>)
   21f8a:	f00d ff44 	bl	2fe16 <memcpy>
   21f8e:	6823      	ldr	r3, [r4, #0]
   21f90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   21f94:	6023      	str	r3, [r4, #0]
   21f96:	6823      	ldr	r3, [r4, #0]
   21f98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   21f9c:	6023      	str	r3, [r4, #0]
   21f9e:	e75f      	b.n	21e60 <logobj_interface_setopt+0x48>
   21fa0:	2009      	movs	r0, #9
   21fa2:	f7fe fd23 	bl	209ec <bsd_os_errno_set>
   21fa6:	f04f 35ff 	mov.w	r5, #4294967295
   21faa:	e759      	b.n	21e60 <logobj_interface_setopt+0x48>
   21fac:	20022937 	.word	0x20022937
   21fb0:	2002035c 	.word	0x2002035c

00021fb4 <logobj_interface_getopt>:
   21fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21fb6:	2901      	cmp	r1, #1
   21fb8:	b083      	sub	sp, #12
   21fba:	9e08      	ldr	r6, [sp, #32]
   21fbc:	d030      	beq.n	22020 <logobj_interface_getopt+0x6c>
   21fbe:	461f      	mov	r7, r3
   21fc0:	f240 2305 	movw	r3, #517	; 0x205
   21fc4:	4299      	cmp	r1, r3
   21fc6:	d134      	bne.n	22032 <logobj_interface_getopt+0x7e>
   21fc8:	4615      	mov	r5, r2
   21fca:	f005 ff2d 	bl	27e28 <interface_socket_from_handle_get>
   21fce:	2800      	cmp	r0, #0
   21fd0:	d037      	beq.n	22042 <logobj_interface_getopt+0x8e>
   21fd2:	2d01      	cmp	r5, #1
   21fd4:	d015      	beq.n	22002 <logobj_interface_getopt+0x4e>
   21fd6:	2d02      	cmp	r5, #2
   21fd8:	d10b      	bne.n	21ff2 <logobj_interface_getopt+0x3e>
   21fda:	b387      	cbz	r7, 2203e <logobj_interface_getopt+0x8a>
   21fdc:	6833      	ldr	r3, [r6, #0]
   21fde:	b373      	cbz	r3, 2203e <logobj_interface_getopt+0x8a>
   21fe0:	2300      	movs	r3, #0
   21fe2:	2201      	movs	r2, #1
   21fe4:	4618      	mov	r0, r3
   21fe6:	491a      	ldr	r1, [pc, #104]	; (22050 <logobj_interface_getopt+0x9c>)
   21fe8:	7809      	ldrb	r1, [r1, #0]
   21fea:	7039      	strb	r1, [r7, #0]
   21fec:	6032      	str	r2, [r6, #0]
   21fee:	b003      	add	sp, #12
   21ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ff2:	2009      	movs	r0, #9
   21ff4:	f7fe fcfa 	bl	209ec <bsd_os_errno_set>
   21ff8:	f04f 33ff 	mov.w	r3, #4294967295
   21ffc:	4618      	mov	r0, r3
   21ffe:	b003      	add	sp, #12
   22000:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22002:	b1e7      	cbz	r7, 2203e <logobj_interface_getopt+0x8a>
   22004:	6833      	ldr	r3, [r6, #0]
   22006:	2b03      	cmp	r3, #3
   22008:	d919      	bls.n	2203e <logobj_interface_getopt+0x8a>
   2200a:	4638      	mov	r0, r7
   2200c:	2204      	movs	r2, #4
   2200e:	4911      	ldr	r1, [pc, #68]	; (22054 <logobj_interface_getopt+0xa0>)
   22010:	f00d ff01 	bl	2fe16 <memcpy>
   22014:	2300      	movs	r3, #0
   22016:	2204      	movs	r2, #4
   22018:	4618      	mov	r0, r3
   2201a:	6032      	str	r2, [r6, #0]
   2201c:	b003      	add	sp, #12
   2201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22020:	9600      	str	r6, [sp, #0]
   22022:	f005 ff6b 	bl	27efc <interface_socket_getopt>
   22026:	4603      	mov	r3, r0
   22028:	2800      	cmp	r0, #0
   2202a:	d1e3      	bne.n	21ff4 <logobj_interface_getopt+0x40>
   2202c:	4618      	mov	r0, r3
   2202e:	b003      	add	sp, #12
   22030:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22032:	202a      	movs	r0, #42	; 0x2a
   22034:	f7fe fcda 	bl	209ec <bsd_os_errno_set>
   22038:	f04f 33ff 	mov.w	r3, #4294967295
   2203c:	e7de      	b.n	21ffc <logobj_interface_getopt+0x48>
   2203e:	2016      	movs	r0, #22
   22040:	e7d8      	b.n	21ff4 <logobj_interface_getopt+0x40>
   22042:	2009      	movs	r0, #9
   22044:	f7fe fcd2 	bl	209ec <bsd_os_errno_set>
   22048:	f04f 33ff 	mov.w	r3, #4294967295
   2204c:	e7d6      	b.n	21ffc <logobj_interface_getopt+0x48>
   2204e:	bf00      	nop
   22050:	20022938 	.word	0x20022938
   22054:	2002035c 	.word	0x2002035c

00022058 <logobj_interface_close>:
   22058:	b510      	push	{r4, lr}
   2205a:	4604      	mov	r4, r0
   2205c:	f005 fee4 	bl	27e28 <interface_socket_from_handle_get>
   22060:	b138      	cbz	r0, 22072 <logobj_interface_close+0x1a>
   22062:	4620      	mov	r0, r4
   22064:	f005 fe1e 	bl	27ca4 <interface_socket_free>
   22068:	2300      	movs	r3, #0
   2206a:	4a05      	ldr	r2, [pc, #20]	; (22080 <logobj_interface_close+0x28>)
   2206c:	4618      	mov	r0, r3
   2206e:	6013      	str	r3, [r2, #0]
   22070:	bd10      	pop	{r4, pc}
   22072:	2009      	movs	r0, #9
   22074:	f7fe fcba 	bl	209ec <bsd_os_errno_set>
   22078:	f04f 30ff 	mov.w	r0, #4294967295
   2207c:	bd10      	pop	{r4, pc}
   2207e:	bf00      	nop
   22080:	20020360 	.word	0x20020360

00022084 <packet_free_cb>:
   22084:	6800      	ldr	r0, [r0, #0]
   22086:	f004 b9f1 	b.w	2646c <rpc_at_client_data_free>
   2208a:	bf00      	nop

0002208c <at_interface_write>:
   2208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22090:	b082      	sub	sp, #8
   22092:	9c08      	ldr	r4, [sp, #32]
   22094:	2c00      	cmp	r4, #0
   22096:	d15b      	bne.n	22150 <at_interface_write+0xc4>
   22098:	460f      	mov	r7, r1
   2209a:	4615      	mov	r5, r2
   2209c:	4698      	mov	r8, r3
   2209e:	4606      	mov	r6, r0
   220a0:	f005 fec2 	bl	27e28 <interface_socket_from_handle_get>
   220a4:	4604      	mov	r4, r0
   220a6:	f1b8 0f00 	cmp.w	r8, #0
   220aa:	d12b      	bne.n	22104 <at_interface_write+0x78>
   220ac:	2800      	cmp	r0, #0
   220ae:	d055      	beq.n	2215c <at_interface_write+0xd0>
   220b0:	6803      	ldr	r3, [r0, #0]
   220b2:	039b      	lsls	r3, r3, #14
   220b4:	d552      	bpl.n	2215c <at_interface_write+0xd0>
   220b6:	6803      	ldr	r3, [r0, #0]
   220b8:	4629      	mov	r1, r5
   220ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   220be:	6003      	str	r3, [r0, #0]
   220c0:	6803      	ldr	r3, [r0, #0]
   220c2:	a801      	add	r0, sp, #4
   220c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   220c8:	6023      	str	r3, [r4, #0]
   220ca:	f004 f9a5 	bl	26418 <rpc_at_client_request_alloc>
   220ce:	bb08      	cbnz	r0, 22114 <at_interface_write+0x88>
   220d0:	2204      	movs	r2, #4
   220d2:	9b01      	ldr	r3, [sp, #4]
   220d4:	721a      	strb	r2, [r3, #8]
   220d6:	7258      	strb	r0, [r3, #9]
   220d8:	7298      	strb	r0, [r3, #10]
   220da:	72d8      	strb	r0, [r3, #11]
   220dc:	60de      	str	r6, [r3, #12]
   220de:	b9fd      	cbnz	r5, 22120 <at_interface_write+0x94>
   220e0:	4618      	mov	r0, r3
   220e2:	2101      	movs	r1, #1
   220e4:	f004 f9ac 	bl	26440 <rpc_at_client_request_send>
   220e8:	bb48      	cbnz	r0, 2213e <at_interface_write+0xb2>
   220ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   220ee:	4630      	mov	r0, r6
   220f0:	4611      	mov	r1, r2
   220f2:	f04f 33ff 	mov.w	r3, #4294967295
   220f6:	f005 fe23 	bl	27d40 <interface_socket_wait>
   220fa:	b960      	cbnz	r0, 22116 <at_interface_write+0x8a>
   220fc:	4628      	mov	r0, r5
   220fe:	b002      	add	sp, #8
   22100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22104:	b360      	cbz	r0, 22160 <at_interface_write+0xd4>
   22106:	6803      	ldr	r3, [r0, #0]
   22108:	202d      	movs	r0, #45	; 0x2d
   2210a:	f7fe fc6f 	bl	209ec <bsd_os_errno_set>
   2210e:	f04f 30ff 	mov.w	r0, #4294967295
   22112:	e7f4      	b.n	220fe <at_interface_write+0x72>
   22114:	200c      	movs	r0, #12
   22116:	6823      	ldr	r3, [r4, #0]
   22118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2211c:	6023      	str	r3, [r4, #0]
   2211e:	e7f4      	b.n	2210a <at_interface_write+0x7e>
   22120:	4639      	mov	r1, r7
   22122:	6818      	ldr	r0, [r3, #0]
   22124:	462a      	mov	r2, r5
   22126:	f00d fe76 	bl	2fe16 <memcpy>
   2212a:	2101      	movs	r1, #1
   2212c:	9801      	ldr	r0, [sp, #4]
   2212e:	f004 f987 	bl	26440 <rpc_at_client_request_send>
   22132:	2800      	cmp	r0, #0
   22134:	d0d9      	beq.n	220ea <at_interface_write+0x5e>
   22136:	9b01      	ldr	r3, [sp, #4]
   22138:	6818      	ldr	r0, [r3, #0]
   2213a:	f004 f997 	bl	2646c <rpc_at_client_data_free>
   2213e:	9801      	ldr	r0, [sp, #4]
   22140:	f004 f98c 	bl	2645c <rpc_at_client_message_free>
   22144:	6823      	ldr	r3, [r4, #0]
   22146:	2023      	movs	r0, #35	; 0x23
   22148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2214c:	6023      	str	r3, [r4, #0]
   2214e:	e7dc      	b.n	2210a <at_interface_write+0x7e>
   22150:	2038      	movs	r0, #56	; 0x38
   22152:	f7fe fc4b 	bl	209ec <bsd_os_errno_set>
   22156:	f04f 30ff 	mov.w	r0, #4294967295
   2215a:	e7d0      	b.n	220fe <at_interface_write+0x72>
   2215c:	2016      	movs	r0, #22
   2215e:	e7d4      	b.n	2210a <at_interface_write+0x7e>
   22160:	202d      	movs	r0, #45	; 0x2d
   22162:	e7d2      	b.n	2210a <at_interface_write+0x7e>

00022164 <at_interface_init>:
   22164:	f004 b952 	b.w	2640c <rpc_at_client_init>

00022168 <at_interface_open>:
   22168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2216c:	2600      	movs	r6, #0
   2216e:	b082      	sub	sp, #8
   22170:	2902      	cmp	r1, #2
   22172:	9600      	str	r6, [sp, #0]
   22174:	d13e      	bne.n	221f4 <at_interface_open+0x8c>
   22176:	4680      	mov	r8, r0
   22178:	4617      	mov	r7, r2
   2217a:	4668      	mov	r0, sp
   2217c:	4a20      	ldr	r2, [pc, #128]	; (22200 <at_interface_open+0x98>)
   2217e:	460c      	mov	r4, r1
   22180:	f005 fd2c 	bl	27bdc <interface_socket_allocate>
   22184:	9b00      	ldr	r3, [sp, #0]
   22186:	4605      	mov	r5, r0
   22188:	b30b      	cbz	r3, 221ce <at_interface_open+0x66>
   2218a:	e9c3 8403 	strd	r8, r4, [r3, #12]
   2218e:	615f      	str	r7, [r3, #20]
   22190:	4631      	mov	r1, r6
   22192:	a801      	add	r0, sp, #4
   22194:	f004 f940 	bl	26418 <rpc_at_client_request_alloc>
   22198:	bb50      	cbnz	r0, 221f0 <at_interface_open+0x88>
   2219a:	2204      	movs	r2, #4
   2219c:	9b01      	ldr	r3, [sp, #4]
   2219e:	2105      	movs	r1, #5
   221a0:	7258      	strb	r0, [r3, #9]
   221a2:	7298      	strb	r0, [r3, #10]
   221a4:	72d8      	strb	r0, [r3, #11]
   221a6:	721a      	strb	r2, [r3, #8]
   221a8:	60dd      	str	r5, [r3, #12]
   221aa:	4618      	mov	r0, r3
   221ac:	f004 f948 	bl	26440 <rpc_at_client_request_send>
   221b0:	b988      	cbnz	r0, 221d6 <at_interface_open+0x6e>
   221b2:	4622      	mov	r2, r4
   221b4:	4621      	mov	r1, r4
   221b6:	f04f 33ff 	mov.w	r3, #4294967295
   221ba:	4628      	mov	r0, r5
   221bc:	f005 fdc0 	bl	27d40 <interface_socket_wait>
   221c0:	4604      	mov	r4, r0
   221c2:	b960      	cbnz	r0, 221de <at_interface_open+0x76>
   221c4:	9a00      	ldr	r2, [sp, #0]
   221c6:	6813      	ldr	r3, [r2, #0]
   221c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   221cc:	6013      	str	r3, [r2, #0]
   221ce:	4628      	mov	r0, r5
   221d0:	b002      	add	sp, #8
   221d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   221d6:	9801      	ldr	r0, [sp, #4]
   221d8:	f004 f940 	bl	2645c <rpc_at_client_message_free>
   221dc:	2423      	movs	r4, #35	; 0x23
   221de:	4628      	mov	r0, r5
   221e0:	f005 fd60 	bl	27ca4 <interface_socket_free>
   221e4:	4620      	mov	r0, r4
   221e6:	f7fe fc01 	bl	209ec <bsd_os_errno_set>
   221ea:	f04f 35ff 	mov.w	r5, #4294967295
   221ee:	e7ee      	b.n	221ce <at_interface_open+0x66>
   221f0:	240c      	movs	r4, #12
   221f2:	e7f4      	b.n	221de <at_interface_open+0x76>
   221f4:	2029      	movs	r0, #41	; 0x29
   221f6:	f7fe fbf9 	bl	209ec <bsd_os_errno_set>
   221fa:	f04f 35ff 	mov.w	r5, #4294967295
   221fe:	e7e6      	b.n	221ce <at_interface_open+0x66>
   22200:	00022085 	.word	0x00022085

00022204 <at_interface_close>:
   22204:	b5f0      	push	{r4, r5, r6, r7, lr}
   22206:	b083      	sub	sp, #12
   22208:	4606      	mov	r6, r0
   2220a:	f005 fe0d 	bl	27e28 <interface_socket_from_handle_get>
   2220e:	2800      	cmp	r0, #0
   22210:	d03d      	beq.n	2228e <at_interface_close+0x8a>
   22212:	230d      	movs	r3, #13
   22214:	6807      	ldr	r7, [r0, #0]
   22216:	6003      	str	r3, [r0, #0]
   22218:	6803      	ldr	r3, [r0, #0]
   2221a:	4604      	mov	r4, r0
   2221c:	039b      	lsls	r3, r3, #14
   2221e:	d41f      	bmi.n	22260 <at_interface_close+0x5c>
   22220:	2100      	movs	r1, #0
   22222:	a801      	add	r0, sp, #4
   22224:	f004 f8f8 	bl	26418 <rpc_at_client_request_alloc>
   22228:	bb20      	cbnz	r0, 22274 <at_interface_close+0x70>
   2222a:	2204      	movs	r2, #4
   2222c:	9b01      	ldr	r3, [sp, #4]
   2222e:	2106      	movs	r1, #6
   22230:	7258      	strb	r0, [r3, #9]
   22232:	7298      	strb	r0, [r3, #10]
   22234:	72d8      	strb	r0, [r3, #11]
   22236:	721a      	strb	r2, [r3, #8]
   22238:	60de      	str	r6, [r3, #12]
   2223a:	4618      	mov	r0, r3
   2223c:	f004 f900 	bl	26440 <rpc_at_client_request_send>
   22240:	b9d0      	cbnz	r0, 22278 <at_interface_close+0x74>
   22242:	220e      	movs	r2, #14
   22244:	f04f 33ff 	mov.w	r3, #4294967295
   22248:	4611      	mov	r1, r2
   2224a:	4630      	mov	r0, r6
   2224c:	f005 fd78 	bl	27d40 <interface_socket_wait>
   22250:	4605      	mov	r5, r0
   22252:	b9a8      	cbnz	r0, 22280 <at_interface_close+0x7c>
   22254:	4630      	mov	r0, r6
   22256:	f005 fd25 	bl	27ca4 <interface_socket_free>
   2225a:	4628      	mov	r0, r5
   2225c:	b003      	add	sp, #12
   2225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22260:	6803      	ldr	r3, [r0, #0]
   22262:	2100      	movs	r1, #0
   22264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   22268:	6003      	str	r3, [r0, #0]
   2226a:	a801      	add	r0, sp, #4
   2226c:	f004 f8d4 	bl	26418 <rpc_at_client_request_alloc>
   22270:	2800      	cmp	r0, #0
   22272:	d0da      	beq.n	2222a <at_interface_close+0x26>
   22274:	250c      	movs	r5, #12
   22276:	e003      	b.n	22280 <at_interface_close+0x7c>
   22278:	9801      	ldr	r0, [sp, #4]
   2227a:	f004 f8ef 	bl	2645c <rpc_at_client_message_free>
   2227e:	2523      	movs	r5, #35	; 0x23
   22280:	6027      	str	r7, [r4, #0]
   22282:	4628      	mov	r0, r5
   22284:	f7fe fbb2 	bl	209ec <bsd_os_errno_set>
   22288:	f04f 35ff 	mov.w	r5, #4294967295
   2228c:	e7e5      	b.n	2225a <at_interface_close+0x56>
   2228e:	2516      	movs	r5, #22
   22290:	e7f7      	b.n	22282 <at_interface_close+0x7e>
   22292:	bf00      	nop

00022294 <at_interface_read>:
   22294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22298:	b084      	sub	sp, #16
   2229a:	4688      	mov	r8, r1
   2229c:	4615      	mov	r5, r2
   2229e:	461e      	mov	r6, r3
   222a0:	4607      	mov	r7, r0
   222a2:	f005 fdc1 	bl	27e28 <interface_socket_from_handle_get>
   222a6:	2800      	cmp	r0, #0
   222a8:	d043      	beq.n	22332 <at_interface_read+0x9e>
   222aa:	2300      	movs	r3, #0
   222ac:	4604      	mov	r4, r0
   222ae:	e9cd 8500 	strd	r8, r5, [sp]
   222b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   222b6:	bb2e      	cbnz	r6, 22304 <at_interface_read+0x70>
   222b8:	f016 0502 	ands.w	r5, r6, #2
   222bc:	d00d      	beq.n	222da <at_interface_read+0x46>
   222be:	e028      	b.n	22312 <at_interface_read+0x7e>
   222c0:	b9cd      	cbnz	r5, 222f6 <at_interface_read+0x62>
   222c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   222c6:	6a23      	ldr	r3, [r4, #32]
   222c8:	4611      	mov	r1, r2
   222ca:	2b00      	cmp	r3, #0
   222cc:	bf08      	it	eq
   222ce:	f04f 33ff 	moveq.w	r3, #4294967295
   222d2:	4638      	mov	r0, r7
   222d4:	f005 fd34 	bl	27d40 <interface_socket_wait>
   222d8:	4605      	mov	r5, r0
   222da:	6823      	ldr	r3, [r4, #0]
   222dc:	69e0      	ldr	r0, [r4, #28]
   222de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   222e2:	6023      	str	r3, [r4, #0]
   222e4:	6803      	ldr	r3, [r0, #0]
   222e6:	4632      	mov	r2, r6
   222e8:	689b      	ldr	r3, [r3, #8]
   222ea:	4669      	mov	r1, sp
   222ec:	4798      	blx	r3
   222ee:	f1b0 0800 	subs.w	r8, r0, #0
   222f2:	dbe5      	blt.n	222c0 <at_interface_read+0x2c>
   222f4:	b115      	cbz	r5, 222fc <at_interface_read+0x68>
   222f6:	4628      	mov	r0, r5
   222f8:	f7fe fb78 	bl	209ec <bsd_os_errno_set>
   222fc:	4640      	mov	r0, r8
   222fe:	b004      	add	sp, #16
   22300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22304:	f016 0f0a 	tst.w	r6, #10
   22308:	d1d6      	bne.n	222b8 <at_interface_read+0x24>
   2230a:	252d      	movs	r5, #45	; 0x2d
   2230c:	f04f 38ff 	mov.w	r8, #4294967295
   22310:	e7f1      	b.n	222f6 <at_interface_read+0x62>
   22312:	6823      	ldr	r3, [r4, #0]
   22314:	69e0      	ldr	r0, [r4, #28]
   22316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2231a:	6023      	str	r3, [r4, #0]
   2231c:	6803      	ldr	r3, [r0, #0]
   2231e:	4632      	mov	r2, r6
   22320:	689b      	ldr	r3, [r3, #8]
   22322:	4669      	mov	r1, sp
   22324:	4798      	blx	r3
   22326:	f1b0 3fff 	cmp.w	r0, #4294967295
   2232a:	4680      	mov	r8, r0
   2232c:	d1e6      	bne.n	222fc <at_interface_read+0x68>
   2232e:	2523      	movs	r5, #35	; 0x23
   22330:	e7e1      	b.n	222f6 <at_interface_read+0x62>
   22332:	2516      	movs	r5, #22
   22334:	f04f 38ff 	mov.w	r8, #4294967295
   22338:	e7dd      	b.n	222f6 <at_interface_read+0x62>
   2233a:	bf00      	nop

0002233c <at_interface_getopt>:
   2233c:	f005 bdde 	b.w	27efc <interface_socket_getopt>

00022340 <at_interface_setopt>:
   22340:	f005 bd9a 	b.w	27e78 <interface_socket_setopt>

00022344 <rpc_at_event_handler>:
   22344:	b570      	push	{r4, r5, r6, lr}
   22346:	4606      	mov	r6, r0
   22348:	b084      	sub	sp, #16
   2234a:	68c0      	ldr	r0, [r0, #12]
   2234c:	460d      	mov	r5, r1
   2234e:	f005 fd6b 	bl	27e28 <interface_socket_from_handle_get>
   22352:	4604      	mov	r4, r0
   22354:	b348      	cbz	r0, 223aa <rpc_at_event_handler+0x66>
   22356:	6803      	ldr	r3, [r0, #0]
   22358:	b29b      	uxth	r3, r3
   2235a:	2b01      	cmp	r3, #1
   2235c:	d01f      	beq.n	2239e <rpc_at_event_handler+0x5a>
   2235e:	6803      	ldr	r3, [r0, #0]
   22360:	b29b      	uxth	r3, r3
   22362:	2b0d      	cmp	r3, #13
   22364:	d029      	beq.n	223ba <rpc_at_event_handler+0x76>
   22366:	6803      	ldr	r3, [r0, #0]
   22368:	b29b      	uxth	r3, r3
   2236a:	2b02      	cmp	r3, #2
   2236c:	d02d      	beq.n	223ca <rpc_at_event_handler+0x86>
   2236e:	3d03      	subs	r5, #3
   22370:	2d01      	cmp	r5, #1
   22372:	d817      	bhi.n	223a4 <rpc_at_event_handler+0x60>
   22374:	2500      	movs	r5, #0
   22376:	6873      	ldr	r3, [r6, #4]
   22378:	6832      	ldr	r2, [r6, #0]
   2237a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2237e:	e9cd 2300 	strd	r2, r3, [sp]
   22382:	69e0      	ldr	r0, [r4, #28]
   22384:	4669      	mov	r1, sp
   22386:	6803      	ldr	r3, [r0, #0]
   22388:	685b      	ldr	r3, [r3, #4]
   2238a:	4798      	blx	r3
   2238c:	3001      	adds	r0, #1
   2238e:	d019      	beq.n	223c4 <rpc_at_event_handler+0x80>
   22390:	4628      	mov	r0, r5
   22392:	6823      	ldr	r3, [r4, #0]
   22394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   22398:	6023      	str	r3, [r4, #0]
   2239a:	b004      	add	sp, #16
   2239c:	bd70      	pop	{r4, r5, r6, pc}
   2239e:	2d02      	cmp	r5, #2
   223a0:	d1e5      	bne.n	2236e <rpc_at_event_handler+0x2a>
   223a2:	6005      	str	r5, [r0, #0]
   223a4:	2000      	movs	r0, #0
   223a6:	b004      	add	sp, #16
   223a8:	bd70      	pop	{r4, r5, r6, pc}
   223aa:	6830      	ldr	r0, [r6, #0]
   223ac:	2800      	cmp	r0, #0
   223ae:	d0f9      	beq.n	223a4 <rpc_at_event_handler+0x60>
   223b0:	f004 f85c 	bl	2646c <rpc_at_client_data_free>
   223b4:	4620      	mov	r0, r4
   223b6:	b004      	add	sp, #16
   223b8:	bd70      	pop	{r4, r5, r6, pc}
   223ba:	2d02      	cmp	r5, #2
   223bc:	d1d7      	bne.n	2236e <rpc_at_event_handler+0x2a>
   223be:	230e      	movs	r3, #14
   223c0:	6003      	str	r3, [r0, #0]
   223c2:	e7ef      	b.n	223a4 <rpc_at_event_handler+0x60>
   223c4:	2002      	movs	r0, #2
   223c6:	b004      	add	sp, #16
   223c8:	bd70      	pop	{r4, r5, r6, pc}
   223ca:	6803      	ldr	r3, [r0, #0]
   223cc:	029b      	lsls	r3, r3, #10
   223ce:	d5ce      	bpl.n	2236e <rpc_at_event_handler+0x2a>
   223d0:	2d02      	cmp	r5, #2
   223d2:	d1cc      	bne.n	2236e <rpc_at_event_handler+0x2a>
   223d4:	6803      	ldr	r3, [r0, #0]
   223d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   223da:	6003      	str	r3, [r0, #0]
   223dc:	6803      	ldr	r3, [r0, #0]
   223de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   223e2:	6003      	str	r3, [r0, #0]
   223e4:	e7de      	b.n	223a4 <rpc_at_event_handler+0x60>
   223e6:	bf00      	nop

000223e8 <dfu_client_event_handler>:
   223e8:	f850 1b08 	ldr.w	r1, [r0], #8
   223ec:	0c09      	lsrs	r1, r1, #16
   223ee:	f001 b925 	b.w	2363c <rpc_dfu_event_handler>
   223f2:	bf00      	nop

000223f4 <rpc_dfu_client_init>:
   223f4:	4801      	ldr	r0, [pc, #4]	; (223fc <rpc_dfu_client_init+0x8>)
   223f6:	f005 be53 	b.w	280a0 <rpc_client_register>
   223fa:	bf00      	nop
   223fc:	0003116c 	.word	0x0003116c

00022400 <rpc_dfu_client_request_alloc>:
   22400:	2300      	movs	r3, #0
   22402:	b510      	push	{r4, lr}
   22404:	b082      	sub	sp, #8
   22406:	9301      	str	r3, [sp, #4]
   22408:	b158      	cbz	r0, 22422 <rpc_dfu_client_request_alloc+0x22>
   2240a:	4604      	mov	r4, r0
   2240c:	aa01      	add	r2, sp, #4
   2240e:	2006      	movs	r0, #6
   22410:	f006 f87e 	bl	28510 <rpc_message_alloc>
   22414:	b918      	cbnz	r0, 2241e <rpc_dfu_client_request_alloc+0x1e>
   22416:	9b01      	ldr	r3, [sp, #4]
   22418:	b10b      	cbz	r3, 2241e <rpc_dfu_client_request_alloc+0x1e>
   2241a:	3308      	adds	r3, #8
   2241c:	6023      	str	r3, [r4, #0]
   2241e:	b002      	add	sp, #8
   22420:	bd10      	pop	{r4, pc}
   22422:	2007      	movs	r0, #7
   22424:	b002      	add	sp, #8
   22426:	bd10      	pop	{r4, pc}

00022428 <rpc_dfu_client_request_send>:
   22428:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   2242c:	d10b      	bne.n	22446 <rpc_dfu_client_request_send+0x1e>
   2242e:	b160      	cbz	r0, 2244a <rpc_dfu_client_request_send+0x22>
   22430:	4603      	mov	r3, r0
   22432:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   22436:	2006      	movs	r0, #6
   22438:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2243c:	f843 1d08 	str.w	r1, [r3, #-8]!
   22440:	4619      	mov	r1, r3
   22442:	f006 b84d 	b.w	284e0 <rpc_message_send>
   22446:	200f      	movs	r0, #15
   22448:	4770      	bx	lr
   2244a:	2007      	movs	r0, #7
   2244c:	4770      	bx	lr
   2244e:	bf00      	nop

00022450 <rpc_dfu_client_message_free>:
   22450:	b120      	cbz	r0, 2245c <rpc_dfu_client_message_free+0xc>
   22452:	f1a0 0108 	sub.w	r1, r0, #8
   22456:	2006      	movs	r0, #6
   22458:	f006 b88c 	b.w	28574 <rpc_message_free>
   2245c:	2007      	movs	r0, #7
   2245e:	4770      	bx	lr

00022460 <rpc_dfu_client_data_free>:
   22460:	b118      	cbz	r0, 2246a <rpc_dfu_client_data_free+0xa>
   22462:	4601      	mov	r1, r0
   22464:	2006      	movs	r0, #6
   22466:	f006 b997 	b.w	28798 <rpc_message_data_free>
   2246a:	2007      	movs	r0, #7
   2246c:	4770      	bx	lr
   2246e:	bf00      	nop

00022470 <mem_free>:
   22470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22474:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 22544 <mem_free+0xd4>
   22478:	b083      	sub	sp, #12
   2247a:	9000      	str	r0, [sp, #0]
   2247c:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   22480:	f8dc 3008 	ldr.w	r3, [ip, #8]
   22484:	b12b      	cbz	r3, 22492 <mem_free+0x22>
   22486:	f8dc 2000 	ldr.w	r2, [ip]
   2248a:	9c00      	ldr	r4, [sp, #0]
   2248c:	7810      	ldrb	r0, [r2, #0]
   2248e:	42a0      	cmp	r0, r4
   22490:	d006      	beq.n	224a0 <mem_free+0x30>
   22492:	f10c 0c0c 	add.w	ip, ip, #12
   22496:	45e3      	cmp	fp, ip
   22498:	d1f2      	bne.n	22480 <mem_free+0x10>
   2249a:	b003      	add	sp, #12
   2249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224a0:	f8dc a004 	ldr.w	sl, [ip, #4]
   224a4:	eb03 080a 	add.w	r8, r3, sl
   224a8:	45c2      	cmp	sl, r8
   224aa:	d2f2      	bcs.n	22492 <mem_free+0x22>
   224ac:	6853      	ldr	r3, [r2, #4]
   224ae:	f8cd c004 	str.w	ip, [sp, #4]
   224b2:	46d6      	mov	lr, sl
   224b4:	469c      	mov	ip, r3
   224b6:	f8d2 9010 	ldr.w	r9, [r2, #16]
   224ba:	8997      	ldrh	r7, [r2, #12]
   224bc:	ebae 000a 	sub.w	r0, lr, sl
   224c0:	b3df      	cbz	r7, 2253a <mem_free+0xca>
   224c2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   224c6:	4290      	cmp	r0, r2
   224c8:	d31c      	bcc.n	22504 <mem_free+0x94>
   224ca:	4665      	mov	r5, ip
   224cc:	2400      	movs	r4, #0
   224ce:	f109 0304 	add.w	r3, r9, #4
   224d2:	e003      	b.n	224dc <mem_free+0x6c>
   224d4:	885a      	ldrh	r2, [r3, #2]
   224d6:	3304      	adds	r3, #4
   224d8:	4282      	cmp	r2, r0
   224da:	d815      	bhi.n	22508 <mem_free+0x98>
   224dc:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   224e0:	3401      	adds	r4, #1
   224e2:	42a7      	cmp	r7, r4
   224e4:	fb02 5506 	mla	r5, r2, r6, r5
   224e8:	eba0 0002 	sub.w	r0, r0, r2
   224ec:	461e      	mov	r6, r3
   224ee:	d1f1      	bne.n	224d4 <mem_free+0x64>
   224f0:	2000      	movs	r0, #0
   224f2:	4281      	cmp	r1, r0
   224f4:	d00d      	beq.n	22512 <mem_free+0xa2>
   224f6:	f10e 0e01 	add.w	lr, lr, #1
   224fa:	45f0      	cmp	r8, lr
   224fc:	d1de      	bne.n	224bc <mem_free+0x4c>
   224fe:	f8dd c004 	ldr.w	ip, [sp, #4]
   22502:	e7c6      	b.n	22492 <mem_free+0x22>
   22504:	4665      	mov	r5, ip
   22506:	464e      	mov	r6, r9
   22508:	8833      	ldrh	r3, [r6, #0]
   2250a:	fb00 5003 	mla	r0, r0, r3, r5
   2250e:	4281      	cmp	r1, r0
   22510:	d1f1      	bne.n	224f6 <mem_free+0x86>
   22512:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   22516:	f8dd c004 	ldr.w	ip, [sp, #4]
   2251a:	d0ba      	beq.n	22492 <mem_free+0x22>
   2251c:	2301      	movs	r3, #1
   2251e:	4a08      	ldr	r2, [pc, #32]	; (22540 <mem_free+0xd0>)
   22520:	ea4f 115e 	mov.w	r1, lr, lsr #5
   22524:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   22528:	f00e 0e1f 	and.w	lr, lr, #31
   2252c:	fa03 fe0e 	lsl.w	lr, r3, lr
   22530:	ea4e 0000 	orr.w	r0, lr, r0
   22534:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   22538:	e7af      	b.n	2249a <mem_free+0x2a>
   2253a:	4638      	mov	r0, r7
   2253c:	e7d9      	b.n	224f2 <mem_free+0x82>
   2253e:	bf00      	nop
   22540:	20020364 	.word	0x20020364
   22544:	200203a8 	.word	0x200203a8

00022548 <mem_alloc.constprop.5>:
   22548:	2800      	cmp	r0, #0
   2254a:	d050      	beq.n	225ee <mem_alloc.constprop.5+0xa6>
   2254c:	4b6d      	ldr	r3, [pc, #436]	; (22704 <mem_alloc.constprop.5+0x1bc>)
   2254e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22552:	4290      	cmp	r0, r2
   22554:	d84b      	bhi.n	225ee <mem_alloc.constprop.5+0xa6>
   22556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2255a:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   2255e:	b083      	sub	sp, #12
   22560:	f1bb 0f00 	cmp.w	fp, #0
   22564:	d054      	beq.n	22610 <mem_alloc.constprop.5+0xc8>
   22566:	f10b 32ff 	add.w	r2, fp, #4294967295
   2256a:	4691      	mov	r9, r2
   2256c:	2600      	movs	r6, #0
   2256e:	f04f 0812 	mov.w	r8, #18
   22572:	4f65      	ldr	r7, [pc, #404]	; (22708 <mem_alloc.constprop.5+0x1c0>)
   22574:	9201      	str	r2, [sp, #4]
   22576:	f10b 0e11 	add.w	lr, fp, #17
   2257a:	eb06 0209 	add.w	r2, r6, r9
   2257e:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   22582:	3201      	adds	r2, #1
   22584:	0852      	lsrs	r2, r2, #1
   22586:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   2258a:	f102 0112 	add.w	r1, r2, #18
   2258e:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   22592:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   22596:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   2259a:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   2259e:	f8dc c004 	ldr.w	ip, [ip, #4]
   225a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   225a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   225aa:	f8da a010 	ldr.w	sl, [sl, #16]
   225ae:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   225b2:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   225b6:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   225ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   225be:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   225c2:	6849      	ldr	r1, [r1, #4]
   225c4:	692d      	ldr	r5, [r5, #16]
   225c6:	6924      	ldr	r4, [r4, #16]
   225c8:	f8dc c004 	ldr.w	ip, [ip, #4]
   225cc:	4550      	cmp	r0, sl
   225ce:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   225d2:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   225d6:	d915      	bls.n	22604 <mem_alloc.constprop.5+0xbc>
   225d8:	4288      	cmp	r0, r1
   225da:	d211      	bcs.n	22600 <mem_alloc.constprop.5+0xb8>
   225dc:	42a8      	cmp	r0, r5
   225de:	d908      	bls.n	225f2 <mem_alloc.constprop.5+0xaa>
   225e0:	1c56      	adds	r6, r2, #1
   225e2:	45b1      	cmp	r9, r6
   225e4:	f0c0 8087 	bcc.w	226f6 <mem_alloc.constprop.5+0x1ae>
   225e8:	f102 0813 	add.w	r8, r2, #19
   225ec:	e7c5      	b.n	2257a <mem_alloc.constprop.5+0x32>
   225ee:	2000      	movs	r0, #0
   225f0:	4770      	bx	lr
   225f2:	f102 39ff 	add.w	r9, r2, #4294967295
   225f6:	454e      	cmp	r6, r9
   225f8:	d87d      	bhi.n	226f6 <mem_alloc.constprop.5+0x1ae>
   225fa:	f102 0e11 	add.w	lr, r2, #17
   225fe:	e7bc      	b.n	2257a <mem_alloc.constprop.5+0x32>
   22600:	f109 0601 	add.w	r6, r9, #1
   22604:	45b3      	cmp	fp, r6
   22606:	d007      	beq.n	22618 <mem_alloc.constprop.5+0xd0>
   22608:	2e10      	cmp	r6, #16
   2260a:	d001      	beq.n	22610 <mem_alloc.constprop.5+0xc8>
   2260c:	45b3      	cmp	fp, r6
   2260e:	d808      	bhi.n	22622 <mem_alloc.constprop.5+0xda>
   22610:	2000      	movs	r0, #0
   22612:	b003      	add	sp, #12
   22614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22618:	9a01      	ldr	r2, [sp, #4]
   2261a:	2a10      	cmp	r2, #16
   2261c:	bf18      	it	ne
   2261e:	4616      	movne	r6, r2
   22620:	d0f6      	beq.n	22610 <mem_alloc.constprop.5+0xc8>
   22622:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 2270c <mem_alloc.constprop.5+0x1c4>
   22626:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   2262a:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   2262e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   22632:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   22636:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   2263a:	f8d2 e004 	ldr.w	lr, [r2, #4]
   2263e:	691d      	ldr	r5, [r3, #16]
   22640:	2c00      	cmp	r4, #0
   22642:	d056      	beq.n	226f2 <mem_alloc.constprop.5+0x1aa>
   22644:	462a      	mov	r2, r5
   22646:	4670      	mov	r0, lr
   22648:	00a4      	lsls	r4, r4, #2
   2264a:	eb05 0904 	add.w	r9, r5, r4
   2264e:	8851      	ldrh	r1, [r2, #2]
   22650:	3204      	adds	r2, #4
   22652:	4591      	cmp	r9, r2
   22654:	4408      	add	r0, r1
   22656:	d1fa      	bne.n	2264e <mem_alloc.constprop.5+0x106>
   22658:	1929      	adds	r1, r5, r4
   2265a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   2265e:	4482      	add	sl, r0
   22660:	4582      	cmp	sl, r0
   22662:	d918      	bls.n	22696 <mem_alloc.constprop.5+0x14e>
   22664:	0941      	lsrs	r1, r0, #5
   22666:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   2266a:	f000 041f 	and.w	r4, r0, #31
   2266e:	fa22 f904 	lsr.w	r9, r2, r4
   22672:	f019 0f01 	tst.w	r9, #1
   22676:	d007      	beq.n	22688 <mem_alloc.constprop.5+0x140>
   22678:	e013      	b.n	226a2 <mem_alloc.constprop.5+0x15a>
   2267a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   2267e:	fa22 f904 	lsr.w	r9, r2, r4
   22682:	f019 0f01 	tst.w	r9, #1
   22686:	d10c      	bne.n	226a2 <mem_alloc.constprop.5+0x15a>
   22688:	3001      	adds	r0, #1
   2268a:	4582      	cmp	sl, r0
   2268c:	ea4f 1150 	mov.w	r1, r0, lsr #5
   22690:	f000 041f 	and.w	r4, r0, #31
   22694:	d1f1      	bne.n	2267a <mem_alloc.constprop.5+0x132>
   22696:	3601      	adds	r6, #1
   22698:	455e      	cmp	r6, fp
   2269a:	f108 0808 	add.w	r8, r8, #8
   2269e:	d3c4      	bcc.n	2262a <mem_alloc.constprop.5+0xe2>
   226a0:	e7b6      	b.n	22610 <mem_alloc.constprop.5+0xc8>
   226a2:	2601      	movs	r6, #1
   226a4:	fa06 f404 	lsl.w	r4, r6, r4
   226a8:	899e      	ldrh	r6, [r3, #12]
   226aa:	ea22 0204 	bic.w	r2, r2, r4
   226ae:	eba0 000e 	sub.w	r0, r0, lr
   226b2:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   226b6:	685c      	ldr	r4, [r3, #4]
   226b8:	2e00      	cmp	r6, #0
   226ba:	d0a9      	beq.n	22610 <mem_alloc.constprop.5+0xc8>
   226bc:	886a      	ldrh	r2, [r5, #2]
   226be:	4282      	cmp	r2, r0
   226c0:	d811      	bhi.n	226e6 <mem_alloc.constprop.5+0x19e>
   226c2:	2100      	movs	r1, #0
   226c4:	1d2b      	adds	r3, r5, #4
   226c6:	e003      	b.n	226d0 <mem_alloc.constprop.5+0x188>
   226c8:	885a      	ldrh	r2, [r3, #2]
   226ca:	3304      	adds	r3, #4
   226cc:	4282      	cmp	r2, r0
   226ce:	d80a      	bhi.n	226e6 <mem_alloc.constprop.5+0x19e>
   226d0:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   226d4:	3101      	adds	r1, #1
   226d6:	428e      	cmp	r6, r1
   226d8:	fb02 4405 	mla	r4, r2, r5, r4
   226dc:	eba0 0002 	sub.w	r0, r0, r2
   226e0:	461d      	mov	r5, r3
   226e2:	d1f1      	bne.n	226c8 <mem_alloc.constprop.5+0x180>
   226e4:	e794      	b.n	22610 <mem_alloc.constprop.5+0xc8>
   226e6:	882b      	ldrh	r3, [r5, #0]
   226e8:	fb00 4003 	mla	r0, r0, r3, r4
   226ec:	b003      	add	sp, #12
   226ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226f2:	4670      	mov	r0, lr
   226f4:	e7b0      	b.n	22658 <mem_alloc.constprop.5+0x110>
   226f6:	f1bb 0f10 	cmp.w	fp, #16
   226fa:	bf08      	it	eq
   226fc:	260f      	moveq	r6, #15
   226fe:	d090      	beq.n	22622 <mem_alloc.constprop.5+0xda>
   22700:	e786      	b.n	22610 <mem_alloc.constprop.5+0xc8>
   22702:	bf00      	nop
   22704:	200203e4 	.word	0x200203e4
   22708:	200203a8 	.word	0x200203a8
   2270c:	20020364 	.word	0x20020364

00022710 <mem_alloc.constprop.4>:
   22710:	2800      	cmp	r0, #0
   22712:	d04c      	beq.n	227ae <mem_alloc.constprop.4+0x9e>
   22714:	4b6b      	ldr	r3, [pc, #428]	; (228c4 <mem_alloc.constprop.4+0x1b4>)
   22716:	681a      	ldr	r2, [r3, #0]
   22718:	4290      	cmp	r0, r2
   2271a:	d848      	bhi.n	227ae <mem_alloc.constprop.4+0x9e>
   2271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22720:	685f      	ldr	r7, [r3, #4]
   22722:	b083      	sub	sp, #12
   22724:	9700      	str	r7, [sp, #0]
   22726:	2f00      	cmp	r7, #0
   22728:	d051      	beq.n	227ce <mem_alloc.constprop.4+0xbe>
   2272a:	1e7a      	subs	r2, r7, #1
   2272c:	4696      	mov	lr, r2
   2272e:	2100      	movs	r1, #0
   22730:	f04f 0c01 	mov.w	ip, #1
   22734:	4c64      	ldr	r4, [pc, #400]	; (228c8 <mem_alloc.constprop.4+0x1b8>)
   22736:	9201      	str	r2, [sp, #4]
   22738:	eb01 020e 	add.w	r2, r1, lr
   2273c:	3201      	adds	r2, #1
   2273e:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   22742:	0852      	lsrs	r2, r2, #1
   22744:	f102 0801 	add.w	r8, r2, #1
   22748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2274c:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   22750:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   22754:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   22758:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   2275c:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   22760:	f8d9 9004 	ldr.w	r9, [r9, #4]
   22764:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   22768:	f8da a010 	ldr.w	sl, [sl, #16]
   2276c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   22770:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   22774:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   22778:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   2277c:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   22780:	6936      	ldr	r6, [r6, #16]
   22782:	f8db b004 	ldr.w	fp, [fp, #4]
   22786:	692d      	ldr	r5, [r5, #16]
   22788:	f8d9 9004 	ldr.w	r9, [r9, #4]
   2278c:	4550      	cmp	r0, sl
   2278e:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   22792:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   22796:	d913      	bls.n	227c0 <mem_alloc.constprop.4+0xb0>
   22798:	42a8      	cmp	r0, r5
   2279a:	d210      	bcs.n	227be <mem_alloc.constprop.4+0xae>
   2279c:	42b0      	cmp	r0, r6
   2279e:	d908      	bls.n	227b2 <mem_alloc.constprop.4+0xa2>
   227a0:	45c6      	cmp	lr, r8
   227a2:	4641      	mov	r1, r8
   227a4:	f0c0 8087 	bcc.w	228b6 <mem_alloc.constprop.4+0x1a6>
   227a8:	f108 0c01 	add.w	ip, r8, #1
   227ac:	e7c4      	b.n	22738 <mem_alloc.constprop.4+0x28>
   227ae:	2000      	movs	r0, #0
   227b0:	4770      	bx	lr
   227b2:	f102 3eff 	add.w	lr, r2, #4294967295
   227b6:	4571      	cmp	r1, lr
   227b8:	d87d      	bhi.n	228b6 <mem_alloc.constprop.4+0x1a6>
   227ba:	4617      	mov	r7, r2
   227bc:	e7bc      	b.n	22738 <mem_alloc.constprop.4+0x28>
   227be:	4639      	mov	r1, r7
   227c0:	9a00      	ldr	r2, [sp, #0]
   227c2:	428a      	cmp	r2, r1
   227c4:	d007      	beq.n	227d6 <mem_alloc.constprop.4+0xc6>
   227c6:	2910      	cmp	r1, #16
   227c8:	d001      	beq.n	227ce <mem_alloc.constprop.4+0xbe>
   227ca:	428a      	cmp	r2, r1
   227cc:	d808      	bhi.n	227e0 <mem_alloc.constprop.4+0xd0>
   227ce:	2000      	movs	r0, #0
   227d0:	b003      	add	sp, #12
   227d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227d6:	9a01      	ldr	r2, [sp, #4]
   227d8:	2a10      	cmp	r2, #16
   227da:	bf18      	it	ne
   227dc:	4611      	movne	r1, r2
   227de:	d0f6      	beq.n	227ce <mem_alloc.constprop.4+0xbe>
   227e0:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 228cc <mem_alloc.constprop.4+0x1bc>
   227e4:	f8dd 9000 	ldr.w	r9, [sp]
   227e8:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   227ec:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   227f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   227f4:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   227f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   227fc:	f8d2 e004 	ldr.w	lr, [r2, #4]
   22800:	691f      	ldr	r7, [r3, #16]
   22802:	2e00      	cmp	r6, #0
   22804:	d055      	beq.n	228b2 <mem_alloc.constprop.4+0x1a2>
   22806:	463a      	mov	r2, r7
   22808:	4670      	mov	r0, lr
   2280a:	00b6      	lsls	r6, r6, #2
   2280c:	eb07 0a06 	add.w	sl, r7, r6
   22810:	8855      	ldrh	r5, [r2, #2]
   22812:	3204      	adds	r2, #4
   22814:	4592      	cmp	sl, r2
   22816:	4428      	add	r0, r5
   22818:	d1fa      	bne.n	22810 <mem_alloc.constprop.4+0x100>
   2281a:	19bd      	adds	r5, r7, r6
   2281c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   22820:	4483      	add	fp, r0
   22822:	4583      	cmp	fp, r0
   22824:	d918      	bls.n	22858 <mem_alloc.constprop.4+0x148>
   22826:	0945      	lsrs	r5, r0, #5
   22828:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   2282c:	f000 061f 	and.w	r6, r0, #31
   22830:	fa22 fa06 	lsr.w	sl, r2, r6
   22834:	f01a 0f01 	tst.w	sl, #1
   22838:	d007      	beq.n	2284a <mem_alloc.constprop.4+0x13a>
   2283a:	e013      	b.n	22864 <mem_alloc.constprop.4+0x154>
   2283c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   22840:	fa22 fa06 	lsr.w	sl, r2, r6
   22844:	f01a 0f01 	tst.w	sl, #1
   22848:	d10c      	bne.n	22864 <mem_alloc.constprop.4+0x154>
   2284a:	3001      	adds	r0, #1
   2284c:	4583      	cmp	fp, r0
   2284e:	ea4f 1550 	mov.w	r5, r0, lsr #5
   22852:	f000 061f 	and.w	r6, r0, #31
   22856:	d1f1      	bne.n	2283c <mem_alloc.constprop.4+0x12c>
   22858:	3101      	adds	r1, #1
   2285a:	4549      	cmp	r1, r9
   2285c:	f108 0808 	add.w	r8, r8, #8
   22860:	d3c4      	bcc.n	227ec <mem_alloc.constprop.4+0xdc>
   22862:	e7b4      	b.n	227ce <mem_alloc.constprop.4+0xbe>
   22864:	2101      	movs	r1, #1
   22866:	40b1      	lsls	r1, r6
   22868:	899e      	ldrh	r6, [r3, #12]
   2286a:	ea22 0201 	bic.w	r2, r2, r1
   2286e:	eba0 000e 	sub.w	r0, r0, lr
   22872:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   22876:	685c      	ldr	r4, [r3, #4]
   22878:	2e00      	cmp	r6, #0
   2287a:	d0a8      	beq.n	227ce <mem_alloc.constprop.4+0xbe>
   2287c:	887a      	ldrh	r2, [r7, #2]
   2287e:	4282      	cmp	r2, r0
   22880:	d811      	bhi.n	228a6 <mem_alloc.constprop.4+0x196>
   22882:	2100      	movs	r1, #0
   22884:	1d3b      	adds	r3, r7, #4
   22886:	e003      	b.n	22890 <mem_alloc.constprop.4+0x180>
   22888:	885a      	ldrh	r2, [r3, #2]
   2288a:	3304      	adds	r3, #4
   2288c:	4282      	cmp	r2, r0
   2288e:	d80a      	bhi.n	228a6 <mem_alloc.constprop.4+0x196>
   22890:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   22894:	3101      	adds	r1, #1
   22896:	428e      	cmp	r6, r1
   22898:	eba0 0002 	sub.w	r0, r0, r2
   2289c:	fb02 4405 	mla	r4, r2, r5, r4
   228a0:	461f      	mov	r7, r3
   228a2:	d1f1      	bne.n	22888 <mem_alloc.constprop.4+0x178>
   228a4:	e793      	b.n	227ce <mem_alloc.constprop.4+0xbe>
   228a6:	883b      	ldrh	r3, [r7, #0]
   228a8:	fb00 4003 	mla	r0, r0, r3, r4
   228ac:	b003      	add	sp, #12
   228ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228b2:	4670      	mov	r0, lr
   228b4:	e7b1      	b.n	2281a <mem_alloc.constprop.4+0x10a>
   228b6:	9a00      	ldr	r2, [sp, #0]
   228b8:	2a10      	cmp	r2, #16
   228ba:	bf08      	it	eq
   228bc:	210f      	moveq	r1, #15
   228be:	d08f      	beq.n	227e0 <mem_alloc.constprop.4+0xd0>
   228c0:	e785      	b.n	227ce <mem_alloc.constprop.4+0xbe>
   228c2:	bf00      	nop
   228c4:	200203e4 	.word	0x200203e4
   228c8:	200203a8 	.word	0x200203a8
   228cc:	20020364 	.word	0x20020364

000228d0 <nrf_mem_init>:
   228d0:	b570      	push	{r4, r5, r6, lr}
   228d2:	2200      	movs	r2, #0
   228d4:	2501      	movs	r5, #1
   228d6:	4833      	ldr	r0, [pc, #204]	; (229a4 <nrf_mem_init+0xd4>)
   228d8:	0951      	lsrs	r1, r2, #5
   228da:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   228de:	f002 031f 	and.w	r3, r2, #31
   228e2:	fa05 f303 	lsl.w	r3, r5, r3
   228e6:	3201      	adds	r2, #1
   228e8:	4323      	orrs	r3, r4
   228ea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   228ee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   228f2:	d1f1      	bne.n	228d8 <nrf_mem_init+0x8>
   228f4:	2400      	movs	r4, #0
   228f6:	4b2c      	ldr	r3, [pc, #176]	; (229a8 <nrf_mem_init+0xd8>)
   228f8:	4621      	mov	r1, r4
   228fa:	223c      	movs	r2, #60	; 0x3c
   228fc:	482b      	ldr	r0, [pc, #172]	; (229ac <nrf_mem_init+0xdc>)
   228fe:	601c      	str	r4, [r3, #0]
   22900:	f00d fa96 	bl	2fe30 <memset>
   22904:	2110      	movs	r1, #16
   22906:	2205      	movs	r2, #5
   22908:	4b29      	ldr	r3, [pc, #164]	; (229b0 <nrf_mem_init+0xe0>)
   2290a:	4e2a      	ldr	r6, [pc, #168]	; (229b4 <nrf_mem_init+0xe4>)
   2290c:	e9c3 4400 	strd	r4, r4, [r3]
   22910:	60d9      	str	r1, [r3, #12]
   22912:	6159      	str	r1, [r3, #20]
   22914:	61d9      	str	r1, [r3, #28]
   22916:	6259      	str	r1, [r3, #36]	; 0x24
   22918:	62d9      	str	r1, [r3, #44]	; 0x2c
   2291a:	6359      	str	r1, [r3, #52]	; 0x34
   2291c:	63d9      	str	r1, [r3, #60]	; 0x3c
   2291e:	6459      	str	r1, [r3, #68]	; 0x44
   22920:	64d9      	str	r1, [r3, #76]	; 0x4c
   22922:	6559      	str	r1, [r3, #84]	; 0x54
   22924:	65d9      	str	r1, [r3, #92]	; 0x5c
   22926:	6659      	str	r1, [r3, #100]	; 0x64
   22928:	66d9      	str	r1, [r3, #108]	; 0x6c
   2292a:	6759      	str	r1, [r3, #116]	; 0x74
   2292c:	67d9      	str	r1, [r3, #124]	; 0x7c
   2292e:	609a      	str	r2, [r3, #8]
   22930:	611a      	str	r2, [r3, #16]
   22932:	619a      	str	r2, [r3, #24]
   22934:	621a      	str	r2, [r3, #32]
   22936:	629a      	str	r2, [r3, #40]	; 0x28
   22938:	631a      	str	r2, [r3, #48]	; 0x30
   2293a:	639a      	str	r2, [r3, #56]	; 0x38
   2293c:	641a      	str	r2, [r3, #64]	; 0x40
   2293e:	649a      	str	r2, [r3, #72]	; 0x48
   22940:	651a      	str	r2, [r3, #80]	; 0x50
   22942:	659a      	str	r2, [r3, #88]	; 0x58
   22944:	661a      	str	r2, [r3, #96]	; 0x60
   22946:	669a      	str	r2, [r3, #104]	; 0x68
   22948:	671a      	str	r2, [r3, #112]	; 0x70
   2294a:	679a      	str	r2, [r3, #120]	; 0x78
   2294c:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   22950:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   22954:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   22958:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   2295c:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   22960:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   22964:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   22968:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   2296c:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   22970:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   22974:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   22978:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   2297c:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   22980:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   22984:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   22988:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   2298c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   22990:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22994:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   22998:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2299c:	4620      	mov	r0, r4
   2299e:	7035      	strb	r5, [r6, #0]
   229a0:	bd70      	pop	{r4, r5, r6, pc}
   229a2:	bf00      	nop
   229a4:	20020364 	.word	0x20020364
   229a8:	200203a4 	.word	0x200203a4
   229ac:	200203a8 	.word	0x200203a8
   229b0:	200203e4 	.word	0x200203e4
   229b4:	20022939 	.word	0x20022939

000229b8 <nrf_mem_register>:
   229b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229bc:	4b87      	ldr	r3, [pc, #540]	; (22bdc <nrf_mem_register+0x224>)
   229be:	b087      	sub	sp, #28
   229c0:	781b      	ldrb	r3, [r3, #0]
   229c2:	2b00      	cmp	r3, #0
   229c4:	f000 808c 	beq.w	22ae0 <nrf_mem_register+0x128>
   229c8:	b328      	cbz	r0, 22a16 <nrf_mem_register+0x5e>
   229ca:	b321      	cbz	r1, 22a16 <nrf_mem_register+0x5e>
   229cc:	780b      	ldrb	r3, [r1, #0]
   229ce:	f8df 8218 	ldr.w	r8, [pc, #536]	; 22be8 <nrf_mem_register+0x230>
   229d2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   229d6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   229da:	685b      	ldr	r3, [r3, #4]
   229dc:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   229e0:	4463      	add	r3, ip
   229e2:	2b10      	cmp	r3, #16
   229e4:	d811      	bhi.n	22a0a <nrf_mem_register+0x52>
   229e6:	f04f 0a00 	mov.w	sl, #0
   229ea:	4689      	mov	r9, r1
   229ec:	4b7c      	ldr	r3, [pc, #496]	; (22be0 <nrf_mem_register+0x228>)
   229ee:	4f7d      	ldr	r7, [pc, #500]	; (22be4 <nrf_mem_register+0x22c>)
   229f0:	681b      	ldr	r3, [r3, #0]
   229f2:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   229f6:	9300      	str	r3, [sp, #0]
   229f8:	68b9      	ldr	r1, [r7, #8]
   229fa:	b191      	cbz	r1, 22a22 <nrf_mem_register+0x6a>
   229fc:	f10a 0a01 	add.w	sl, sl, #1
   22a00:	f1ba 0f05 	cmp.w	sl, #5
   22a04:	f107 070c 	add.w	r7, r7, #12
   22a08:	d1f6      	bne.n	229f8 <nrf_mem_register+0x40>
   22a0a:	f248 1b07 	movw	fp, #33031	; 0x8107
   22a0e:	4658      	mov	r0, fp
   22a10:	b007      	add	sp, #28
   22a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a16:	f248 1b0e 	movw	fp, #33038	; 0x810e
   22a1a:	4658      	mov	r0, fp
   22a1c:	b007      	add	sp, #28
   22a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a22:	f1bc 0f00 	cmp.w	ip, #0
   22a26:	d061      	beq.n	22aec <nrf_mem_register+0x134>
   22a28:	460d      	mov	r5, r1
   22a2a:	460c      	mov	r4, r1
   22a2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   22a30:	eb0e 0b03 	add.w	fp, lr, r3
   22a34:	885a      	ldrh	r2, [r3, #2]
   22a36:	f833 6b04 	ldrh.w	r6, [r3], #4
   22a3a:	4415      	add	r5, r2
   22a3c:	459b      	cmp	fp, r3
   22a3e:	fb02 4406 	mla	r4, r2, r6, r4
   22a42:	d1f7      	bne.n	22a34 <nrf_mem_register+0x7c>
   22a44:	f8d9 3008 	ldr.w	r3, [r9, #8]
   22a48:	42a3      	cmp	r3, r4
   22a4a:	d3d7      	bcc.n	229fc <nrf_mem_register+0x44>
   22a4c:	9b00      	ldr	r3, [sp, #0]
   22a4e:	442b      	add	r3, r5
   22a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   22a54:	d2d2      	bcs.n	229fc <nrf_mem_register+0x44>
   22a56:	4c63      	ldr	r4, [pc, #396]	; (22be4 <nrf_mem_register+0x22c>)
   22a58:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   22a5c:	0092      	lsls	r2, r2, #2
   22a5e:	f8c0 a000 	str.w	sl, [r0]
   22a62:	18a0      	adds	r0, r4, r2
   22a64:	f844 9002 	str.w	r9, [r4, r2]
   22a68:	9a00      	ldr	r2, [sp, #0]
   22a6a:	468b      	mov	fp, r1
   22a6c:	e9c0 2501 	strd	r2, r5, [r0, #4]
   22a70:	f899 2001 	ldrb.w	r2, [r9, #1]
   22a74:	485a      	ldr	r0, [pc, #360]	; (22be0 <nrf_mem_register+0x228>)
   22a76:	2a01      	cmp	r2, #1
   22a78:	6003      	str	r3, [r0, #0]
   22a7a:	d0c8      	beq.n	22a0e <nrf_mem_register+0x56>
   22a7c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   22a80:	2b00      	cmp	r3, #0
   22a82:	d0c4      	beq.n	22a0e <nrf_mem_register+0x56>
   22a84:	2500      	movs	r5, #0
   22a86:	f8cd 9004 	str.w	r9, [sp, #4]
   22a8a:	f8cd a00c 	str.w	sl, [sp, #12]
   22a8e:	f8cd b014 	str.w	fp, [sp, #20]
   22a92:	9b01      	ldr	r3, [sp, #4]
   22a94:	781f      	ldrb	r7, [r3, #0]
   22a96:	691a      	ldr	r2, [r3, #16]
   22a98:	013b      	lsls	r3, r7, #4
   22a9a:	eb03 0907 	add.w	r9, r3, r7
   22a9e:	9300      	str	r3, [sp, #0]
   22aa0:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   22aa4:	6859      	ldr	r1, [r3, #4]
   22aa6:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   22aaa:	9102      	str	r1, [sp, #8]
   22aac:	bb39      	cbnz	r1, 22afe <nrf_mem_register+0x146>
   22aae:	9a03      	ldr	r2, [sp, #12]
   22ab0:	60dd      	str	r5, [r3, #12]
   22ab2:	609a      	str	r2, [r3, #8]
   22ab4:	9b00      	ldr	r3, [sp, #0]
   22ab6:	443b      	add	r3, r7
   22ab8:	461f      	mov	r7, r3
   22aba:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   22abe:	684b      	ldr	r3, [r1, #4]
   22ac0:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   22ac4:	3301      	adds	r3, #1
   22ac6:	4294      	cmp	r4, r2
   22ac8:	604b      	str	r3, [r1, #4]
   22aca:	d912      	bls.n	22af2 <nrf_mem_register+0x13a>
   22acc:	9b01      	ldr	r3, [sp, #4]
   22ace:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   22ad2:	899b      	ldrh	r3, [r3, #12]
   22ad4:	3501      	adds	r5, #1
   22ad6:	429d      	cmp	r5, r3
   22ad8:	d3db      	bcc.n	22a92 <nrf_mem_register+0xda>
   22ada:	f8dd b014 	ldr.w	fp, [sp, #20]
   22ade:	e796      	b.n	22a0e <nrf_mem_register+0x56>
   22ae0:	f248 1b08 	movw	fp, #33032	; 0x8108
   22ae4:	4658      	mov	r0, fp
   22ae6:	b007      	add	sp, #28
   22ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22aec:	9b00      	ldr	r3, [sp, #0]
   22aee:	4665      	mov	r5, ip
   22af0:	e7ae      	b.n	22a50 <nrf_mem_register+0x98>
   22af2:	9b01      	ldr	r3, [sp, #4]
   22af4:	3501      	adds	r5, #1
   22af6:	899b      	ldrh	r3, [r3, #12]
   22af8:	42ab      	cmp	r3, r5
   22afa:	d8ca      	bhi.n	22a92 <nrf_mem_register+0xda>
   22afc:	e7ed      	b.n	22ada <nrf_mem_register+0x122>
   22afe:	2600      	movs	r6, #0
   22b00:	f101 3aff 	add.w	sl, r1, #4294967295
   22b04:	9504      	str	r5, [sp, #16]
   22b06:	eb06 000a 	add.w	r0, r6, sl
   22b0a:	eb09 0206 	add.w	r2, r9, r6
   22b0e:	3201      	adds	r2, #1
   22b10:	3001      	adds	r0, #1
   22b12:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   22b16:	0840      	lsrs	r0, r0, #1
   22b18:	4d32      	ldr	r5, [pc, #200]	; (22be4 <nrf_mem_register+0x22c>)
   22b1a:	eb09 0100 	add.w	r1, r9, r0
   22b1e:	eb09 030a 	add.w	r3, r9, sl
   22b22:	3101      	adds	r1, #1
   22b24:	3301      	adds	r3, #1
   22b26:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   22b2a:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   22b2e:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   22b32:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   22b36:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   22b3a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   22b3e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   22b42:	f8db b010 	ldr.w	fp, [fp, #16]
   22b46:	6852      	ldr	r2, [r2, #4]
   22b48:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   22b4c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   22b50:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   22b54:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   22b58:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   22b5c:	f8de e010 	ldr.w	lr, [lr, #16]
   22b60:	6849      	ldr	r1, [r1, #4]
   22b62:	f8dc c010 	ldr.w	ip, [ip, #16]
   22b66:	685b      	ldr	r3, [r3, #4]
   22b68:	4294      	cmp	r4, r2
   22b6a:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   22b6e:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   22b72:	d92d      	bls.n	22bd0 <nrf_mem_register+0x218>
   22b74:	429c      	cmp	r4, r3
   22b76:	d22d      	bcs.n	22bd4 <nrf_mem_register+0x21c>
   22b78:	428c      	cmp	r4, r1
   22b7a:	d924      	bls.n	22bc6 <nrf_mem_register+0x20e>
   22b7c:	1c46      	adds	r6, r0, #1
   22b7e:	45b2      	cmp	sl, r6
   22b80:	d2c1      	bcs.n	22b06 <nrf_mem_register+0x14e>
   22b82:	2610      	movs	r6, #16
   22b84:	9d04      	ldr	r5, [sp, #16]
   22b86:	9a02      	ldr	r2, [sp, #8]
   22b88:	42b2      	cmp	r2, r6
   22b8a:	d911      	bls.n	22bb0 <nrf_mem_register+0x1f8>
   22b8c:	9b00      	ldr	r3, [sp, #0]
   22b8e:	443b      	add	r3, r7
   22b90:	441a      	add	r2, r3
   22b92:	4433      	add	r3, r6
   22b94:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   22b98:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   22b9c:	2208      	movs	r2, #8
   22b9e:	4651      	mov	r1, sl
   22ba0:	eb0a 0002 	add.w	r0, sl, r2
   22ba4:	f1aa 0a08 	sub.w	sl, sl, #8
   22ba8:	f00d f935 	bl	2fe16 <memcpy>
   22bac:	45d1      	cmp	r9, sl
   22bae:	d1f5      	bne.n	22b9c <nrf_mem_register+0x1e4>
   22bb0:	9b00      	ldr	r3, [sp, #0]
   22bb2:	9903      	ldr	r1, [sp, #12]
   22bb4:	443b      	add	r3, r7
   22bb6:	4433      	add	r3, r6
   22bb8:	3301      	adds	r3, #1
   22bba:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   22bbe:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   22bc2:	6055      	str	r5, [r2, #4]
   22bc4:	e776      	b.n	22ab4 <nrf_mem_register+0xfc>
   22bc6:	f100 3aff 	add.w	sl, r0, #4294967295
   22bca:	4556      	cmp	r6, sl
   22bcc:	d99b      	bls.n	22b06 <nrf_mem_register+0x14e>
   22bce:	e7d8      	b.n	22b82 <nrf_mem_register+0x1ca>
   22bd0:	9d04      	ldr	r5, [sp, #16]
   22bd2:	e7d8      	b.n	22b86 <nrf_mem_register+0x1ce>
   22bd4:	9d04      	ldr	r5, [sp, #16]
   22bd6:	f10a 0601 	add.w	r6, sl, #1
   22bda:	e7d4      	b.n	22b86 <nrf_mem_register+0x1ce>
   22bdc:	20022939 	.word	0x20022939
   22be0:	200203a4 	.word	0x200203a4
   22be4:	200203a8 	.word	0x200203a8
   22be8:	200203e4 	.word	0x200203e4

00022bec <nrf_malloc>:
   22bec:	4b03      	ldr	r3, [pc, #12]	; (22bfc <nrf_malloc+0x10>)
   22bee:	781b      	ldrb	r3, [r3, #0]
   22bf0:	b10b      	cbz	r3, 22bf6 <nrf_malloc+0xa>
   22bf2:	f7ff bd8d 	b.w	22710 <mem_alloc.constprop.4>
   22bf6:	4618      	mov	r0, r3
   22bf8:	4770      	bx	lr
   22bfa:	bf00      	nop
   22bfc:	20022939 	.word	0x20022939

00022c00 <nrf_free>:
   22c00:	4b04      	ldr	r3, [pc, #16]	; (22c14 <nrf_free+0x14>)
   22c02:	781b      	ldrb	r3, [r3, #0]
   22c04:	b123      	cbz	r3, 22c10 <nrf_free+0x10>
   22c06:	b118      	cbz	r0, 22c10 <nrf_free+0x10>
   22c08:	4601      	mov	r1, r0
   22c0a:	2000      	movs	r0, #0
   22c0c:	f7ff bc30 	b.w	22470 <mem_free>
   22c10:	4770      	bx	lr
   22c12:	bf00      	nop
   22c14:	20022939 	.word	0x20022939

00022c18 <nrf_shared_malloc>:
   22c18:	4b03      	ldr	r3, [pc, #12]	; (22c28 <nrf_shared_malloc+0x10>)
   22c1a:	781b      	ldrb	r3, [r3, #0]
   22c1c:	b10b      	cbz	r3, 22c22 <nrf_shared_malloc+0xa>
   22c1e:	f7ff bc93 	b.w	22548 <mem_alloc.constprop.5>
   22c22:	4618      	mov	r0, r3
   22c24:	4770      	bx	lr
   22c26:	bf00      	nop
   22c28:	20022939 	.word	0x20022939

00022c2c <nrf_shared_free>:
   22c2c:	4b04      	ldr	r3, [pc, #16]	; (22c40 <nrf_shared_free+0x14>)
   22c2e:	781b      	ldrb	r3, [r3, #0]
   22c30:	b123      	cbz	r3, 22c3c <nrf_shared_free+0x10>
   22c32:	b118      	cbz	r0, 22c3c <nrf_shared_free+0x10>
   22c34:	4601      	mov	r1, r0
   22c36:	2001      	movs	r0, #1
   22c38:	f7ff bc1a 	b.w	22470 <mem_free>
   22c3c:	4770      	bx	lr
   22c3e:	bf00      	nop
   22c40:	20022939 	.word	0x20022939

00022c44 <ip_client_event_handler>:
   22c44:	f850 1b08 	ldr.w	r1, [r0], #8
   22c48:	0c09      	lsrs	r1, r1, #16
   22c4a:	f004 bd35 	b.w	276b8 <rpc_ip_event_handler>
   22c4e:	bf00      	nop

00022c50 <rpc_ip_client_init>:
   22c50:	4801      	ldr	r0, [pc, #4]	; (22c58 <rpc_ip_client_init+0x8>)
   22c52:	f005 ba25 	b.w	280a0 <rpc_client_register>
   22c56:	bf00      	nop
   22c58:	0003117c 	.word	0x0003117c

00022c5c <rpc_ip_client_request_alloc>:
   22c5c:	2300      	movs	r3, #0
   22c5e:	b510      	push	{r4, lr}
   22c60:	b082      	sub	sp, #8
   22c62:	9301      	str	r3, [sp, #4]
   22c64:	b158      	cbz	r0, 22c7e <rpc_ip_client_request_alloc+0x22>
   22c66:	4604      	mov	r4, r0
   22c68:	aa01      	add	r2, sp, #4
   22c6a:	2004      	movs	r0, #4
   22c6c:	f005 fc50 	bl	28510 <rpc_message_alloc>
   22c70:	b918      	cbnz	r0, 22c7a <rpc_ip_client_request_alloc+0x1e>
   22c72:	9b01      	ldr	r3, [sp, #4]
   22c74:	b10b      	cbz	r3, 22c7a <rpc_ip_client_request_alloc+0x1e>
   22c76:	3308      	adds	r3, #8
   22c78:	6023      	str	r3, [r4, #0]
   22c7a:	b002      	add	sp, #8
   22c7c:	bd10      	pop	{r4, pc}
   22c7e:	2007      	movs	r0, #7
   22c80:	b002      	add	sp, #8
   22c82:	bd10      	pop	{r4, pc}

00022c84 <rpc_ip_client_request_send>:
   22c84:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   22c88:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   22c8c:	d10b      	bne.n	22ca6 <rpc_ip_client_request_send+0x22>
   22c8e:	b160      	cbz	r0, 22caa <rpc_ip_client_request_send+0x26>
   22c90:	4603      	mov	r3, r0
   22c92:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   22c96:	2004      	movs	r0, #4
   22c98:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   22c9c:	f843 1d08 	str.w	r1, [r3, #-8]!
   22ca0:	4619      	mov	r1, r3
   22ca2:	f005 bc1d 	b.w	284e0 <rpc_message_send>
   22ca6:	200f      	movs	r0, #15
   22ca8:	4770      	bx	lr
   22caa:	2007      	movs	r0, #7
   22cac:	4770      	bx	lr
   22cae:	bf00      	nop

00022cb0 <rpc_ip_client_message_free>:
   22cb0:	b120      	cbz	r0, 22cbc <rpc_ip_client_message_free+0xc>
   22cb2:	f1a0 0108 	sub.w	r1, r0, #8
   22cb6:	2004      	movs	r0, #4
   22cb8:	f005 bc5c 	b.w	28574 <rpc_message_free>
   22cbc:	2007      	movs	r0, #7
   22cbe:	4770      	bx	lr

00022cc0 <rpc_ip_client_data_free>:
   22cc0:	b118      	cbz	r0, 22cca <rpc_ip_client_data_free+0xa>
   22cc2:	4601      	mov	r1, r0
   22cc4:	2004      	movs	r0, #4
   22cc6:	f005 bd67 	b.w	28798 <rpc_message_data_free>
   22cca:	2007      	movs	r0, #7
   22ccc:	4770      	bx	lr
   22cce:	bf00      	nop

00022cd0 <secure_client_socket>:
   22cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22cd4:	460c      	mov	r4, r1
   22cd6:	680b      	ldr	r3, [r1, #0]
   22cd8:	4f46      	ldr	r7, [pc, #280]	; (22df4 <secure_client_socket+0x124>)
   22cda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   22cde:	600b      	str	r3, [r1, #0]
   22ce0:	680b      	ldr	r3, [r1, #0]
   22ce2:	00c6      	lsls	r6, r0, #3
   22ce4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   22ce8:	600b      	str	r3, [r1, #0]
   22cea:	eb07 0a06 	add.w	sl, r7, r6
   22cee:	b082      	sub	sp, #8
   22cf0:	f8da 3004 	ldr.w	r3, [sl, #4]
   22cf4:	6989      	ldr	r1, [r1, #24]
   22cf6:	f247 0281 	movw	r2, #28801	; 0x7081
   22cfa:	4605      	mov	r5, r0
   22cfc:	f8d4 8000 	ldr.w	r8, [r4]
   22d00:	f003 fbd2 	bl	264a8 <ip_interface_request_create>
   22d04:	2800      	cmp	r0, #0
   22d06:	d06f      	beq.n	22de8 <secure_client_socket+0x118>
   22d08:	f8da 2004 	ldr.w	r2, [sl, #4]
   22d0c:	4681      	mov	r9, r0
   22d0e:	2a00      	cmp	r2, #0
   22d10:	d15f      	bne.n	22dd2 <secure_client_socket+0x102>
   22d12:	4b39      	ldr	r3, [pc, #228]	; (22df8 <secure_client_socket+0x128>)
   22d14:	1971      	adds	r1, r6, r5
   22d16:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   22d1a:	2224      	movs	r2, #36	; 0x24
   22d1c:	f109 0014 	add.w	r0, r9, #20
   22d20:	f00d f879 	bl	2fe16 <memcpy>
   22d24:	f8d9 3008 	ldr.w	r3, [r9, #8]
   22d28:	4649      	mov	r1, r9
   22d2a:	3324      	adds	r3, #36	; 0x24
   22d2c:	f8c9 3008 	str.w	r3, [r9, #8]
   22d30:	6822      	ldr	r2, [r4, #0]
   22d32:	4643      	mov	r3, r8
   22d34:	0c12      	lsrs	r2, r2, #16
   22d36:	0412      	lsls	r2, r2, #16
   22d38:	f042 020a 	orr.w	r2, r2, #10
   22d3c:	6022      	str	r2, [r4, #0]
   22d3e:	4620      	mov	r0, r4
   22d40:	f247 0281 	movw	r2, #28801	; 0x7081
   22d44:	f003 fbd0 	bl	264e8 <ip_interface_request_send>
   22d48:	4603      	mov	r3, r0
   22d4a:	b970      	cbnz	r0, 22d6a <secure_client_socket+0x9a>
   22d4c:	6823      	ldr	r3, [r4, #0]
   22d4e:	00db      	lsls	r3, r3, #3
   22d50:	d40f      	bmi.n	22d72 <secure_client_socket+0xa2>
   22d52:	f04f 33ff 	mov.w	r3, #4294967295
   22d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22d5a:	210b      	movs	r1, #11
   22d5c:	4628      	mov	r0, r5
   22d5e:	f003 fbd7 	bl	26510 <ip_interface_wait>
   22d62:	4603      	mov	r3, r0
   22d64:	b150      	cbz	r0, 22d7c <secure_client_socket+0xac>
   22d66:	f8c4 8000 	str.w	r8, [r4]
   22d6a:	4618      	mov	r0, r3
   22d6c:	b002      	add	sp, #8
   22d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22d72:	2373      	movs	r3, #115	; 0x73
   22d74:	4618      	mov	r0, r3
   22d76:	b002      	add	sp, #8
   22d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22d7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   22d80:	f04f 33ff 	mov.w	r3, #4294967295
   22d84:	4611      	mov	r1, r2
   22d86:	4628      	mov	r0, r5
   22d88:	f003 fbc2 	bl	26510 <ip_interface_wait>
   22d8c:	4603      	mov	r3, r0
   22d8e:	bb30      	cbnz	r0, 22dde <secure_client_socket+0x10e>
   22d90:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   22d94:	b138      	cbz	r0, 22da6 <secure_client_socket+0xd6>
   22d96:	9301      	str	r3, [sp, #4]
   22d98:	f7ff ff32 	bl	22c00 <nrf_free>
   22d9c:	9b01      	ldr	r3, [sp, #4]
   22d9e:	443e      	add	r6, r7
   22da0:	6073      	str	r3, [r6, #4]
   22da2:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   22da6:	4618      	mov	r0, r3
   22da8:	6822      	ldr	r2, [r4, #0]
   22daa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   22dae:	6022      	str	r2, [r4, #0]
   22db0:	6822      	ldr	r2, [r4, #0]
   22db2:	0c12      	lsrs	r2, r2, #16
   22db4:	0412      	lsls	r2, r2, #16
   22db6:	f042 020c 	orr.w	r2, r2, #12
   22dba:	6022      	str	r2, [r4, #0]
   22dbc:	6822      	ldr	r2, [r4, #0]
   22dbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   22dc2:	6022      	str	r2, [r4, #0]
   22dc4:	6822      	ldr	r2, [r4, #0]
   22dc6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   22dca:	6022      	str	r2, [r4, #0]
   22dcc:	b002      	add	sp, #8
   22dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22dd2:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   22dd6:	6800      	ldr	r0, [r0, #0]
   22dd8:	f00d f81d 	bl	2fe16 <memcpy>
   22ddc:	e799      	b.n	22d12 <secure_client_socket+0x42>
   22dde:	2b73      	cmp	r3, #115	; 0x73
   22de0:	d0c3      	beq.n	22d6a <secure_client_socket+0x9a>
   22de2:	f8c4 8000 	str.w	r8, [r4]
   22de6:	e7c0      	b.n	22d6a <secure_client_socket+0x9a>
   22de8:	230c      	movs	r3, #12
   22dea:	4618      	mov	r0, r3
   22dec:	b002      	add	sp, #8
   22dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22df2:	bf00      	nop
   22df4:	20020638 	.word	0x20020638
   22df8:	200204f4 	.word	0x200204f4

00022dfc <tls_interface_init>:
   22dfc:	2000      	movs	r0, #0
   22dfe:	4770      	bx	lr

00022e00 <tls_interface_open>:
   22e00:	b538      	push	{r3, r4, r5, lr}
   22e02:	1e4b      	subs	r3, r1, #1
   22e04:	2b01      	cmp	r3, #1
   22e06:	d808      	bhi.n	22e1a <tls_interface_open+0x1a>
   22e08:	4614      	mov	r4, r2
   22e0a:	b162      	cbz	r2, 22e26 <tls_interface_open+0x26>
   22e0c:	2901      	cmp	r1, #1
   22e0e:	d02d      	beq.n	22e6c <tls_interface_open+0x6c>
   22e10:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   22e14:	bf08      	it	eq
   22e16:	2202      	moveq	r2, #2
   22e18:	d00d      	beq.n	22e36 <tls_interface_open+0x36>
   22e1a:	2029      	movs	r0, #41	; 0x29
   22e1c:	f7fd fde6 	bl	209ec <bsd_os_errno_set>
   22e20:	f04f 35ff 	mov.w	r5, #4294967295
   22e24:	e020      	b.n	22e68 <tls_interface_open+0x68>
   22e26:	2901      	cmp	r1, #1
   22e28:	bf0b      	itete	eq
   22e2a:	2201      	moveq	r2, #1
   22e2c:	2202      	movne	r2, #2
   22e2e:	f44f 7482 	moveq.w	r4, #260	; 0x104
   22e32:	f44f 7487 	movne.w	r4, #270	; 0x10e
   22e36:	f003 fb97 	bl	26568 <ip_interface_open>
   22e3a:	1e05      	subs	r5, r0, #0
   22e3c:	db1b      	blt.n	22e76 <tls_interface_open+0x76>
   22e3e:	4b0f      	ldr	r3, [pc, #60]	; (22e7c <tls_interface_open+0x7c>)
   22e40:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   22e44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22e48:	2224      	movs	r2, #36	; 0x24
   22e4a:	490d      	ldr	r1, [pc, #52]	; (22e80 <tls_interface_open+0x80>)
   22e4c:	f00c ffe3 	bl	2fe16 <memcpy>
   22e50:	4628      	mov	r0, r5
   22e52:	f004 ffe9 	bl	27e28 <interface_socket_from_handle_get>
   22e56:	6803      	ldr	r3, [r0, #0]
   22e58:	6144      	str	r4, [r0, #20]
   22e5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   22e5e:	6003      	str	r3, [r0, #0]
   22e60:	6803      	ldr	r3, [r0, #0]
   22e62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   22e66:	6003      	str	r3, [r0, #0]
   22e68:	4628      	mov	r0, r5
   22e6a:	bd38      	pop	{r3, r4, r5, pc}
   22e6c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   22e70:	d1d3      	bne.n	22e1a <tls_interface_open+0x1a>
   22e72:	460a      	mov	r2, r1
   22e74:	e7df      	b.n	22e36 <tls_interface_open+0x36>
   22e76:	f04f 35ff 	mov.w	r5, #4294967295
   22e7a:	e7f5      	b.n	22e68 <tls_interface_open+0x68>
   22e7c:	200204f4 	.word	0x200204f4
   22e80:	0003118c 	.word	0x0003118c

00022e84 <tls_interface_close>:
   22e84:	b538      	push	{r3, r4, r5, lr}
   22e86:	4604      	mov	r4, r0
   22e88:	f004 ffce 	bl	27e28 <interface_socket_from_handle_get>
   22e8c:	b180      	cbz	r0, 22eb0 <tls_interface_close+0x2c>
   22e8e:	4d0b      	ldr	r5, [pc, #44]	; (22ebc <tls_interface_close+0x38>)
   22e90:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   22e94:	b138      	cbz	r0, 22ea6 <tls_interface_close+0x22>
   22e96:	f7ff feb3 	bl	22c00 <nrf_free>
   22e9a:	2300      	movs	r3, #0
   22e9c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   22ea0:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   22ea4:	6053      	str	r3, [r2, #4]
   22ea6:	4620      	mov	r0, r4
   22ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22eac:	f003 bc0e 	b.w	266cc <ip_interface_close>
   22eb0:	2009      	movs	r0, #9
   22eb2:	f7fd fd9b 	bl	209ec <bsd_os_errno_set>
   22eb6:	f04f 30ff 	mov.w	r0, #4294967295
   22eba:	bd38      	pop	{r3, r4, r5, pc}
   22ebc:	20020638 	.word	0x20020638

00022ec0 <tls_interface_sendto>:
   22ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22ec4:	460d      	mov	r5, r1
   22ec6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   22eca:	4616      	mov	r6, r2
   22ecc:	461f      	mov	r7, r3
   22ece:	4604      	mov	r4, r0
   22ed0:	f004 ffaa 	bl	27e28 <interface_socket_from_handle_get>
   22ed4:	2800      	cmp	r0, #0
   22ed6:	d03b      	beq.n	22f50 <tls_interface_sendto+0x90>
   22ed8:	6803      	ldr	r3, [r0, #0]
   22eda:	b29b      	uxth	r3, r3
   22edc:	2b0c      	cmp	r3, #12
   22ede:	d039      	beq.n	22f54 <tls_interface_sendto+0x94>
   22ee0:	6803      	ldr	r3, [r0, #0]
   22ee2:	b29b      	uxth	r3, r3
   22ee4:	2b0b      	cmp	r3, #11
   22ee6:	d111      	bne.n	22f0c <tls_interface_sendto+0x4c>
   22ee8:	4b20      	ldr	r3, [pc, #128]	; (22f6c <tls_interface_sendto+0xac>)
   22eea:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   22eee:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   22ef2:	2b02      	cmp	r3, #2
   22ef4:	d038      	beq.n	22f68 <tls_interface_sendto+0xa8>
   22ef6:	6903      	ldr	r3, [r0, #16]
   22ef8:	2b01      	cmp	r3, #1
   22efa:	bf14      	ite	ne
   22efc:	2039      	movne	r0, #57	; 0x39
   22efe:	202a      	moveq	r0, #42	; 0x2a
   22f00:	f7fd fd74 	bl	209ec <bsd_os_errno_set>
   22f04:	f04f 30ff 	mov.w	r0, #4294967295
   22f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22f0c:	6903      	ldr	r3, [r0, #16]
   22f0e:	2b01      	cmp	r3, #1
   22f10:	d00b      	beq.n	22f2a <tls_interface_sendto+0x6a>
   22f12:	2b02      	cmp	r3, #2
   22f14:	d001      	beq.n	22f1a <tls_interface_sendto+0x5a>
   22f16:	2039      	movs	r0, #57	; 0x39
   22f18:	e7f2      	b.n	22f00 <tls_interface_sendto+0x40>
   22f1a:	6803      	ldr	r3, [r0, #0]
   22f1c:	b29b      	uxth	r3, r3
   22f1e:	2b02      	cmp	r3, #2
   22f20:	d007      	beq.n	22f32 <tls_interface_sendto+0x72>
   22f22:	6803      	ldr	r3, [r0, #0]
   22f24:	b29b      	uxth	r3, r3
   22f26:	2b04      	cmp	r3, #4
   22f28:	d003      	beq.n	22f32 <tls_interface_sendto+0x72>
   22f2a:	6803      	ldr	r3, [r0, #0]
   22f2c:	b29b      	uxth	r3, r3
   22f2e:	2b05      	cmp	r3, #5
   22f30:	d1f1      	bne.n	22f16 <tls_interface_sendto+0x56>
   22f32:	4b0e      	ldr	r3, [pc, #56]	; (22f6c <tls_interface_sendto+0xac>)
   22f34:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   22f38:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   22f3c:	2b02      	cmp	r3, #2
   22f3e:	d1ea      	bne.n	22f16 <tls_interface_sendto+0x56>
   22f40:	4601      	mov	r1, r0
   22f42:	4620      	mov	r0, r4
   22f44:	f7ff fec4 	bl	22cd0 <secure_client_socket>
   22f48:	2800      	cmp	r0, #0
   22f4a:	d003      	beq.n	22f54 <tls_interface_sendto+0x94>
   22f4c:	dcd8      	bgt.n	22f00 <tls_interface_sendto+0x40>
   22f4e:	e7d9      	b.n	22f04 <tls_interface_sendto+0x44>
   22f50:	2009      	movs	r0, #9
   22f52:	e7d5      	b.n	22f00 <tls_interface_sendto+0x40>
   22f54:	e9cd 8908 	strd	r8, r9, [sp, #32]
   22f58:	463b      	mov	r3, r7
   22f5a:	4632      	mov	r2, r6
   22f5c:	4629      	mov	r1, r5
   22f5e:	4620      	mov	r0, r4
   22f60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f64:	f003 bc22 	b.w	267ac <ip_interface_sendto>
   22f68:	2023      	movs	r0, #35	; 0x23
   22f6a:	e7c9      	b.n	22f00 <tls_interface_sendto+0x40>
   22f6c:	200204f4 	.word	0x200204f4

00022f70 <tls_interface_recvfrom>:
   22f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f74:	460d      	mov	r5, r1
   22f76:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   22f7a:	4616      	mov	r6, r2
   22f7c:	461f      	mov	r7, r3
   22f7e:	4604      	mov	r4, r0
   22f80:	f004 ff52 	bl	27e28 <interface_socket_from_handle_get>
   22f84:	2800      	cmp	r0, #0
   22f86:	d038      	beq.n	22ffa <tls_interface_recvfrom+0x8a>
   22f88:	6803      	ldr	r3, [r0, #0]
   22f8a:	b29b      	uxth	r3, r3
   22f8c:	2b0c      	cmp	r3, #12
   22f8e:	d00f      	beq.n	22fb0 <tls_interface_recvfrom+0x40>
   22f90:	6803      	ldr	r3, [r0, #0]
   22f92:	b29b      	uxth	r3, r3
   22f94:	2b0d      	cmp	r3, #13
   22f96:	d00b      	beq.n	22fb0 <tls_interface_recvfrom+0x40>
   22f98:	6903      	ldr	r3, [r0, #16]
   22f9a:	2b01      	cmp	r3, #1
   22f9c:	d01a      	beq.n	22fd4 <tls_interface_recvfrom+0x64>
   22f9e:	2b02      	cmp	r3, #2
   22fa0:	d010      	beq.n	22fc4 <tls_interface_recvfrom+0x54>
   22fa2:	2023      	movs	r0, #35	; 0x23
   22fa4:	f7fd fd22 	bl	209ec <bsd_os_errno_set>
   22fa8:	f04f 30ff 	mov.w	r0, #4294967295
   22fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22fb0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   22fb4:	463b      	mov	r3, r7
   22fb6:	4632      	mov	r2, r6
   22fb8:	4629      	mov	r1, r5
   22fba:	4620      	mov	r0, r4
   22fbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22fc0:	f003 bd6c 	b.w	26a9c <ip_interface_recvfrom>
   22fc4:	6803      	ldr	r3, [r0, #0]
   22fc6:	b29b      	uxth	r3, r3
   22fc8:	2b02      	cmp	r3, #2
   22fca:	d007      	beq.n	22fdc <tls_interface_recvfrom+0x6c>
   22fcc:	6803      	ldr	r3, [r0, #0]
   22fce:	b29b      	uxth	r3, r3
   22fd0:	2b04      	cmp	r3, #4
   22fd2:	d003      	beq.n	22fdc <tls_interface_recvfrom+0x6c>
   22fd4:	6803      	ldr	r3, [r0, #0]
   22fd6:	b29b      	uxth	r3, r3
   22fd8:	2b05      	cmp	r3, #5
   22fda:	d1e2      	bne.n	22fa2 <tls_interface_recvfrom+0x32>
   22fdc:	4b08      	ldr	r3, [pc, #32]	; (23000 <tls_interface_recvfrom+0x90>)
   22fde:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   22fe2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   22fe6:	2b02      	cmp	r3, #2
   22fe8:	d1db      	bne.n	22fa2 <tls_interface_recvfrom+0x32>
   22fea:	4601      	mov	r1, r0
   22fec:	4620      	mov	r0, r4
   22fee:	f7ff fe6f 	bl	22cd0 <secure_client_socket>
   22ff2:	2800      	cmp	r0, #0
   22ff4:	d0dc      	beq.n	22fb0 <tls_interface_recvfrom+0x40>
   22ff6:	dcd5      	bgt.n	22fa4 <tls_interface_recvfrom+0x34>
   22ff8:	e7d6      	b.n	22fa8 <tls_interface_recvfrom+0x38>
   22ffa:	2009      	movs	r0, #9
   22ffc:	e7d2      	b.n	22fa4 <tls_interface_recvfrom+0x34>
   22ffe:	bf00      	nop
   23000:	200204f4 	.word	0x200204f4

00023004 <tls_interface_bind>:
   23004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23008:	460c      	mov	r4, r1
   2300a:	4617      	mov	r7, r2
   2300c:	4606      	mov	r6, r0
   2300e:	f004 ff0b 	bl	27e28 <interface_socket_from_handle_get>
   23012:	2800      	cmp	r0, #0
   23014:	d06d      	beq.n	230f2 <tls_interface_bind+0xee>
   23016:	6803      	ldr	r3, [r0, #0]
   23018:	4605      	mov	r5, r0
   2301a:	b29b      	uxth	r3, r3
   2301c:	2b02      	cmp	r3, #2
   2301e:	d15a      	bne.n	230d6 <tls_interface_bind+0xd2>
   23020:	4621      	mov	r1, r4
   23022:	463a      	mov	r2, r7
   23024:	4630      	mov	r0, r6
   23026:	f003 ff27 	bl	26e78 <ip_interface_bind>
   2302a:	4604      	mov	r4, r0
   2302c:	2800      	cmp	r0, #0
   2302e:	d148      	bne.n	230c2 <tls_interface_bind+0xbe>
   23030:	00f7      	lsls	r7, r6, #3
   23032:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 230f8 <tls_interface_bind+0xf4>
   23036:	19bb      	adds	r3, r7, r6
   23038:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   2303c:	2b01      	cmp	r3, #1
   2303e:	d002      	beq.n	23046 <tls_interface_bind+0x42>
   23040:	4620      	mov	r0, r4
   23042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23046:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 230fc <tls_interface_bind+0xf8>
   2304a:	f247 0281 	movw	r2, #28801	; 0x7081
   2304e:	eb0b 0a07 	add.w	sl, fp, r7
   23052:	f8da 3004 	ldr.w	r3, [sl, #4]
   23056:	69a9      	ldr	r1, [r5, #24]
   23058:	4630      	mov	r0, r6
   2305a:	f003 fa25 	bl	264a8 <ip_interface_request_create>
   2305e:	4681      	mov	r9, r0
   23060:	2800      	cmp	r0, #0
   23062:	d044      	beq.n	230ee <tls_interface_bind+0xea>
   23064:	f8da 2004 	ldr.w	r2, [sl, #4]
   23068:	2a00      	cmp	r2, #0
   2306a:	d13a      	bne.n	230e2 <tls_interface_bind+0xde>
   2306c:	19b9      	adds	r1, r7, r6
   2306e:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   23072:	2224      	movs	r2, #36	; 0x24
   23074:	f109 0014 	add.w	r0, r9, #20
   23078:	f00c fecd 	bl	2fe16 <memcpy>
   2307c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   23080:	4649      	mov	r1, r9
   23082:	3324      	adds	r3, #36	; 0x24
   23084:	f8c9 3008 	str.w	r3, [r9, #8]
   23088:	682a      	ldr	r2, [r5, #0]
   2308a:	2304      	movs	r3, #4
   2308c:	0c12      	lsrs	r2, r2, #16
   2308e:	0412      	lsls	r2, r2, #16
   23090:	f042 020a 	orr.w	r2, r2, #10
   23094:	602a      	str	r2, [r5, #0]
   23096:	4628      	mov	r0, r5
   23098:	f247 0281 	movw	r2, #28801	; 0x7081
   2309c:	f003 fa24 	bl	264e8 <ip_interface_request_send>
   230a0:	b9e8      	cbnz	r0, 230de <tls_interface_bind+0xda>
   230a2:	682b      	ldr	r3, [r5, #0]
   230a4:	00db      	lsls	r3, r3, #3
   230a6:	d418      	bmi.n	230da <tls_interface_bind+0xd6>
   230a8:	4630      	mov	r0, r6
   230aa:	f04f 33ff 	mov.w	r3, #4294967295
   230ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   230b2:	210b      	movs	r1, #11
   230b4:	f003 fa2c 	bl	26510 <ip_interface_wait>
   230b8:	2800      	cmp	r0, #0
   230ba:	d0c1      	beq.n	23040 <tls_interface_bind+0x3c>
   230bc:	2304      	movs	r3, #4
   230be:	4604      	mov	r4, r0
   230c0:	602b      	str	r3, [r5, #0]
   230c2:	2c00      	cmp	r4, #0
   230c4:	ddbc      	ble.n	23040 <tls_interface_bind+0x3c>
   230c6:	4620      	mov	r0, r4
   230c8:	f04f 34ff 	mov.w	r4, #4294967295
   230cc:	f7fd fc8e 	bl	209ec <bsd_os_errno_set>
   230d0:	4620      	mov	r0, r4
   230d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230d6:	242d      	movs	r4, #45	; 0x2d
   230d8:	e7f5      	b.n	230c6 <tls_interface_bind+0xc2>
   230da:	2473      	movs	r4, #115	; 0x73
   230dc:	e7f3      	b.n	230c6 <tls_interface_bind+0xc2>
   230de:	4604      	mov	r4, r0
   230e0:	e7ef      	b.n	230c2 <tls_interface_bind+0xbe>
   230e2:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   230e6:	6800      	ldr	r0, [r0, #0]
   230e8:	f00c fe95 	bl	2fe16 <memcpy>
   230ec:	e7be      	b.n	2306c <tls_interface_bind+0x68>
   230ee:	240c      	movs	r4, #12
   230f0:	e7e9      	b.n	230c6 <tls_interface_bind+0xc2>
   230f2:	2409      	movs	r4, #9
   230f4:	e7e7      	b.n	230c6 <tls_interface_bind+0xc2>
   230f6:	bf00      	nop
   230f8:	200204f4 	.word	0x200204f4
   230fc:	20020638 	.word	0x20020638

00023100 <tls_interface_connect>:
   23100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23102:	460e      	mov	r6, r1
   23104:	4617      	mov	r7, r2
   23106:	4604      	mov	r4, r0
   23108:	f004 fe8e 	bl	27e28 <interface_socket_from_handle_get>
   2310c:	b1e8      	cbz	r0, 2314a <tls_interface_connect+0x4a>
   2310e:	4b13      	ldr	r3, [pc, #76]	; (2315c <tls_interface_connect+0x5c>)
   23110:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   23114:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   23118:	2b02      	cmp	r3, #2
   2311a:	d11c      	bne.n	23156 <tls_interface_connect+0x56>
   2311c:	6803      	ldr	r3, [r0, #0]
   2311e:	4605      	mov	r5, r0
   23120:	b29b      	uxth	r3, r3
   23122:	2b02      	cmp	r3, #2
   23124:	d003      	beq.n	2312e <tls_interface_connect+0x2e>
   23126:	6803      	ldr	r3, [r0, #0]
   23128:	b29b      	uxth	r3, r3
   2312a:	2b04      	cmp	r3, #4
   2312c:	d113      	bne.n	23156 <tls_interface_connect+0x56>
   2312e:	463a      	mov	r2, r7
   23130:	4631      	mov	r1, r6
   23132:	4620      	mov	r0, r4
   23134:	f003 fde6 	bl	26d04 <ip_interface_connect>
   23138:	b110      	cbz	r0, 23140 <tls_interface_connect+0x40>
   2313a:	2800      	cmp	r0, #0
   2313c:	dc06      	bgt.n	2314c <tls_interface_connect+0x4c>
   2313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23140:	4629      	mov	r1, r5
   23142:	4620      	mov	r0, r4
   23144:	f7ff fdc4 	bl	22cd0 <secure_client_socket>
   23148:	e7f7      	b.n	2313a <tls_interface_connect+0x3a>
   2314a:	2009      	movs	r0, #9
   2314c:	f7fd fc4e 	bl	209ec <bsd_os_errno_set>
   23150:	f04f 30ff 	mov.w	r0, #4294967295
   23154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23156:	202d      	movs	r0, #45	; 0x2d
   23158:	e7f8      	b.n	2314c <tls_interface_connect+0x4c>
   2315a:	bf00      	nop
   2315c:	200204f4 	.word	0x200204f4

00023160 <tls_interface_listen>:
   23160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23164:	b083      	sub	sp, #12
   23166:	9101      	str	r1, [sp, #4]
   23168:	4605      	mov	r5, r0
   2316a:	f004 fe5d 	bl	27e28 <interface_socket_from_handle_get>
   2316e:	2800      	cmp	r0, #0
   23170:	d079      	beq.n	23266 <tls_interface_listen+0x106>
   23172:	6903      	ldr	r3, [r0, #16]
   23174:	4604      	mov	r4, r0
   23176:	2b01      	cmp	r3, #1
   23178:	d173      	bne.n	23262 <tls_interface_listen+0x102>
   2317a:	6803      	ldr	r3, [r0, #0]
   2317c:	b29b      	uxth	r3, r3
   2317e:	2b04      	cmp	r3, #4
   23180:	d05f      	beq.n	23242 <tls_interface_listen+0xe2>
   23182:	6823      	ldr	r3, [r4, #0]
   23184:	b29b      	uxth	r3, r3
   23186:	2b0b      	cmp	r3, #11
   23188:	d16b      	bne.n	23262 <tls_interface_listen+0x102>
   2318a:	00ee      	lsls	r6, r5, #3
   2318c:	4f37      	ldr	r7, [pc, #220]	; (2326c <tls_interface_listen+0x10c>)
   2318e:	1973      	adds	r3, r6, r5
   23190:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   23194:	2b01      	cmp	r3, #1
   23196:	d164      	bne.n	23262 <tls_interface_listen+0x102>
   23198:	2201      	movs	r2, #1
   2319a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 23270 <tls_interface_listen+0x110>
   2319e:	1973      	adds	r3, r6, r5
   231a0:	00ee      	lsls	r6, r5, #3
   231a2:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   231a6:	eb09 0806 	add.w	r8, r9, r6
   231aa:	69a1      	ldr	r1, [r4, #24]
   231ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   231b0:	f247 0281 	movw	r2, #28801	; 0x7081
   231b4:	4628      	mov	r0, r5
   231b6:	f8d4 a000 	ldr.w	sl, [r4]
   231ba:	f003 f975 	bl	264a8 <ip_interface_request_create>
   231be:	4683      	mov	fp, r0
   231c0:	2800      	cmp	r0, #0
   231c2:	d04c      	beq.n	2325e <tls_interface_listen+0xfe>
   231c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   231c8:	2a00      	cmp	r2, #0
   231ca:	d142      	bne.n	23252 <tls_interface_listen+0xf2>
   231cc:	1971      	adds	r1, r6, r5
   231ce:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   231d2:	2224      	movs	r2, #36	; 0x24
   231d4:	f10b 0014 	add.w	r0, fp, #20
   231d8:	f00c fe1d 	bl	2fe16 <memcpy>
   231dc:	f8db 2008 	ldr.w	r2, [fp, #8]
   231e0:	4659      	mov	r1, fp
   231e2:	3224      	adds	r2, #36	; 0x24
   231e4:	f8cb 2008 	str.w	r2, [fp, #8]
   231e8:	6822      	ldr	r2, [r4, #0]
   231ea:	4653      	mov	r3, sl
   231ec:	0c12      	lsrs	r2, r2, #16
   231ee:	0412      	lsls	r2, r2, #16
   231f0:	f042 020a 	orr.w	r2, r2, #10
   231f4:	6022      	str	r2, [r4, #0]
   231f6:	4620      	mov	r0, r4
   231f8:	f247 0281 	movw	r2, #28801	; 0x7081
   231fc:	f003 f974 	bl	264e8 <ip_interface_request_send>
   23200:	b968      	cbnz	r0, 2321e <tls_interface_listen+0xbe>
   23202:	6823      	ldr	r3, [r4, #0]
   23204:	00db      	lsls	r3, r3, #3
   23206:	d40f      	bmi.n	23228 <tls_interface_listen+0xc8>
   23208:	f04f 33ff 	mov.w	r3, #4294967295
   2320c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23210:	210b      	movs	r1, #11
   23212:	4628      	mov	r0, r5
   23214:	f003 f97c 	bl	26510 <ip_interface_wait>
   23218:	b170      	cbz	r0, 23238 <tls_interface_listen+0xd8>
   2321a:	f8c4 a000 	str.w	sl, [r4]
   2321e:	2800      	cmp	r0, #0
   23220:	dc03      	bgt.n	2322a <tls_interface_listen+0xca>
   23222:	b003      	add	sp, #12
   23224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23228:	2073      	movs	r0, #115	; 0x73
   2322a:	f7fd fbdf 	bl	209ec <bsd_os_errno_set>
   2322e:	f04f 30ff 	mov.w	r0, #4294967295
   23232:	b003      	add	sp, #12
   23234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23238:	9901      	ldr	r1, [sp, #4]
   2323a:	4628      	mov	r0, r5
   2323c:	f003 febc 	bl	26fb8 <ip_interface_listen>
   23240:	e7ed      	b.n	2321e <tls_interface_listen+0xbe>
   23242:	00ee      	lsls	r6, r5, #3
   23244:	4f09      	ldr	r7, [pc, #36]	; (2326c <tls_interface_listen+0x10c>)
   23246:	1973      	adds	r3, r6, r5
   23248:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   2324c:	2b02      	cmp	r3, #2
   2324e:	d198      	bne.n	23182 <tls_interface_listen+0x22>
   23250:	e7a2      	b.n	23198 <tls_interface_listen+0x38>
   23252:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   23256:	6800      	ldr	r0, [r0, #0]
   23258:	f00c fddd 	bl	2fe16 <memcpy>
   2325c:	e7b6      	b.n	231cc <tls_interface_listen+0x6c>
   2325e:	200c      	movs	r0, #12
   23260:	e7e3      	b.n	2322a <tls_interface_listen+0xca>
   23262:	202d      	movs	r0, #45	; 0x2d
   23264:	e7e1      	b.n	2322a <tls_interface_listen+0xca>
   23266:	2009      	movs	r0, #9
   23268:	e7df      	b.n	2322a <tls_interface_listen+0xca>
   2326a:	bf00      	nop
   2326c:	200204f4 	.word	0x200204f4
   23270:	20020638 	.word	0x20020638

00023274 <tls_interface_accept>:
   23274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23276:	460c      	mov	r4, r1
   23278:	4616      	mov	r6, r2
   2327a:	461f      	mov	r7, r3
   2327c:	4605      	mov	r5, r0
   2327e:	f004 fdd3 	bl	27e28 <interface_socket_from_handle_get>
   23282:	2800      	cmp	r0, #0
   23284:	d03b      	beq.n	232fe <tls_interface_accept+0x8a>
   23286:	6800      	ldr	r0, [r0, #0]
   23288:	b280      	uxth	r0, r0
   2328a:	2806      	cmp	r0, #6
   2328c:	d137      	bne.n	232fe <tls_interface_accept+0x8a>
   2328e:	4621      	mov	r1, r4
   23290:	463b      	mov	r3, r7
   23292:	4632      	mov	r2, r6
   23294:	4628      	mov	r0, r5
   23296:	f003 ff05 	bl	270a4 <ip_interface_accept>
   2329a:	4604      	mov	r4, r0
   2329c:	b118      	cbz	r0, 232a6 <tls_interface_accept+0x32>
   2329e:	2c00      	cmp	r4, #0
   232a0:	dc2e      	bgt.n	23300 <tls_interface_accept+0x8c>
   232a2:	4620      	mov	r0, r4
   232a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   232a6:	4628      	mov	r0, r5
   232a8:	f004 fdbe 	bl	27e28 <interface_socket_from_handle_get>
   232ac:	6803      	ldr	r3, [r0, #0]
   232ae:	4f18      	ldr	r7, [pc, #96]	; (23310 <tls_interface_accept+0x9c>)
   232b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   232b4:	6003      	str	r3, [r0, #0]
   232b6:	6803      	ldr	r3, [r0, #0]
   232b8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   232bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   232c0:	4606      	mov	r6, r0
   232c2:	6003      	str	r3, [r0, #0]
   232c4:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   232c8:	2224      	movs	r2, #36	; 0x24
   232ca:	4638      	mov	r0, r7
   232cc:	f00c fda3 	bl	2fe16 <memcpy>
   232d0:	2302      	movs	r3, #2
   232d2:	703b      	strb	r3, [r7, #0]
   232d4:	6833      	ldr	r3, [r6, #0]
   232d6:	4620      	mov	r0, r4
   232d8:	0c1b      	lsrs	r3, r3, #16
   232da:	041b      	lsls	r3, r3, #16
   232dc:	f043 030b 	orr.w	r3, r3, #11
   232e0:	6033      	str	r3, [r6, #0]
   232e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   232e6:	f04f 33ff 	mov.w	r3, #4294967295
   232ea:	210c      	movs	r1, #12
   232ec:	f003 f910 	bl	26510 <ip_interface_wait>
   232f0:	4604      	mov	r4, r0
   232f2:	2800      	cmp	r0, #0
   232f4:	d0d5      	beq.n	232a2 <tls_interface_accept+0x2e>
   232f6:	2000      	movs	r0, #0
   232f8:	f003 f9e8 	bl	266cc <ip_interface_close>
   232fc:	e7cf      	b.n	2329e <tls_interface_accept+0x2a>
   232fe:	2409      	movs	r4, #9
   23300:	4620      	mov	r0, r4
   23302:	f04f 34ff 	mov.w	r4, #4294967295
   23306:	f7fd fb71 	bl	209ec <bsd_os_errno_set>
   2330a:	4620      	mov	r0, r4
   2330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2330e:	bf00      	nop
   23310:	200204f4 	.word	0x200204f4

00023314 <tls_interface_setopt>:
   23314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23318:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2331c:	9e06      	ldr	r6, [sp, #24]
   2331e:	d11e      	bne.n	2335e <tls_interface_setopt+0x4a>
   23320:	461f      	mov	r7, r3
   23322:	4605      	mov	r5, r0
   23324:	2b00      	cmp	r3, #0
   23326:	f000 808c 	beq.w	23442 <tls_interface_setopt+0x12e>
   2332a:	4690      	mov	r8, r2
   2332c:	f004 fd7c 	bl	27e28 <interface_socket_from_handle_get>
   23330:	2800      	cmp	r0, #0
   23332:	d07b      	beq.n	2342c <tls_interface_setopt+0x118>
   23334:	6804      	ldr	r4, [r0, #0]
   23336:	b2a4      	uxth	r4, r4
   23338:	2c02      	cmp	r4, #2
   2333a:	d007      	beq.n	2334c <tls_interface_setopt+0x38>
   2333c:	6803      	ldr	r3, [r0, #0]
   2333e:	b29b      	uxth	r3, r3
   23340:	2b04      	cmp	r3, #4
   23342:	d003      	beq.n	2334c <tls_interface_setopt+0x38>
   23344:	6803      	ldr	r3, [r0, #0]
   23346:	b29b      	uxth	r3, r3
   23348:	2b05      	cmp	r3, #5
   2334a:	d16f      	bne.n	2342c <tls_interface_setopt+0x118>
   2334c:	f108 32ff 	add.w	r2, r8, #4294967295
   23350:	2a04      	cmp	r2, #4
   23352:	d87c      	bhi.n	2344e <tls_interface_setopt+0x13a>
   23354:	e8df f002 	tbb	[pc, r2]
   23358:	41324e24 	.word	0x41324e24
   2335c:	07          	.byte	0x07
   2335d:	00          	.byte	0x00
   2335e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23362:	f003 bfd7 	b.w	27314 <ip_interface_setopt>
   23366:	4c3b      	ldr	r4, [pc, #236]	; (23454 <tls_interface_setopt+0x140>)
   23368:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   2336c:	b138      	cbz	r0, 2337e <tls_interface_setopt+0x6a>
   2336e:	f7ff fc47 	bl	22c00 <nrf_free>
   23372:	2200      	movs	r2, #0
   23374:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   23378:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   2337c:	605a      	str	r2, [r3, #4]
   2337e:	4630      	mov	r0, r6
   23380:	b34e      	cbz	r6, 233d6 <tls_interface_setopt+0xc2>
   23382:	f7ff fc33 	bl	22bec <nrf_malloc>
   23386:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   2338a:	2800      	cmp	r0, #0
   2338c:	d057      	beq.n	2343e <tls_interface_setopt+0x12a>
   2338e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   23392:	4632      	mov	r2, r6
   23394:	4639      	mov	r1, r7
   23396:	6066      	str	r6, [r4, #4]
   23398:	f00c fd3d 	bl	2fe16 <memcpy>
   2339c:	2000      	movs	r0, #0
   2339e:	e01a      	b.n	233d6 <tls_interface_setopt+0xc2>
   233a0:	2e04      	cmp	r6, #4
   233a2:	d14a      	bne.n	2343a <tls_interface_setopt+0x126>
   233a4:	6838      	ldr	r0, [r7, #0]
   233a6:	2800      	cmp	r0, #0
   233a8:	d039      	beq.n	2341e <tls_interface_setopt+0x10a>
   233aa:	2801      	cmp	r0, #1
   233ac:	d145      	bne.n	2343a <tls_interface_setopt+0x126>
   233ae:	4a2a      	ldr	r2, [pc, #168]	; (23458 <tls_interface_setopt+0x144>)
   233b0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   233b4:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   233b8:	2000      	movs	r0, #0
   233ba:	e00c      	b.n	233d6 <tls_interface_setopt+0xc2>
   233bc:	2e01      	cmp	r6, #1
   233be:	d13c      	bne.n	2343a <tls_interface_setopt+0x126>
   233c0:	783a      	ldrb	r2, [r7, #0]
   233c2:	2000      	movs	r0, #0
   233c4:	3200      	adds	r2, #0
   233c6:	bf18      	it	ne
   233c8:	2201      	movne	r2, #1
   233ca:	4b23      	ldr	r3, [pc, #140]	; (23458 <tls_interface_setopt+0x144>)
   233cc:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   233d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   233d4:	7062      	strb	r2, [r4, #1]
   233d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   233da:	2e04      	cmp	r6, #4
   233dc:	d12d      	bne.n	2343a <tls_interface_setopt+0x126>
   233de:	683a      	ldr	r2, [r7, #0]
   233e0:	2a02      	cmp	r2, #2
   233e2:	d82a      	bhi.n	2343a <tls_interface_setopt+0x126>
   233e4:	4b1c      	ldr	r3, [pc, #112]	; (23458 <tls_interface_setopt+0x144>)
   233e6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   233ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   233ee:	70a2      	strb	r2, [r4, #2]
   233f0:	2000      	movs	r0, #0
   233f2:	e7f0      	b.n	233d6 <tls_interface_setopt+0xc2>
   233f4:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   233f8:	d01f      	beq.n	2343a <tls_interface_setopt+0x126>
   233fa:	f016 0403 	ands.w	r4, r6, #3
   233fe:	d11c      	bne.n	2343a <tls_interface_setopt+0x126>
   23400:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   23404:	00ad      	lsls	r5, r5, #2
   23406:	4b14      	ldr	r3, [pc, #80]	; (23458 <tls_interface_setopt+0x144>)
   23408:	1d28      	adds	r0, r5, #4
   2340a:	4418      	add	r0, r3
   2340c:	442b      	add	r3, r5
   2340e:	4632      	mov	r2, r6
   23410:	4639      	mov	r1, r7
   23412:	f883 c003 	strb.w	ip, [r3, #3]
   23416:	f00c fcfe 	bl	2fe16 <memcpy>
   2341a:	4620      	mov	r0, r4
   2341c:	e7db      	b.n	233d6 <tls_interface_setopt+0xc2>
   2341e:	2102      	movs	r1, #2
   23420:	4a0d      	ldr	r2, [pc, #52]	; (23458 <tls_interface_setopt+0x144>)
   23422:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   23426:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   2342a:	e7d4      	b.n	233d6 <tls_interface_setopt+0xc2>
   2342c:	2009      	movs	r0, #9
   2342e:	f7fd fadd 	bl	209ec <bsd_os_errno_set>
   23432:	f04f 30ff 	mov.w	r0, #4294967295
   23436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2343a:	2016      	movs	r0, #22
   2343c:	e7f7      	b.n	2342e <tls_interface_setopt+0x11a>
   2343e:	200c      	movs	r0, #12
   23440:	e7f5      	b.n	2342e <tls_interface_setopt+0x11a>
   23442:	200e      	movs	r0, #14
   23444:	f7fd fad2 	bl	209ec <bsd_os_errno_set>
   23448:	f04f 30ff 	mov.w	r0, #4294967295
   2344c:	e7c3      	b.n	233d6 <tls_interface_setopt+0xc2>
   2344e:	202a      	movs	r0, #42	; 0x2a
   23450:	e7ed      	b.n	2342e <tls_interface_setopt+0x11a>
   23452:	bf00      	nop
   23454:	20020638 	.word	0x20020638
   23458:	200204f4 	.word	0x200204f4

0002345c <tls_interface_getopt>:
   2345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23460:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   23464:	9f06      	ldr	r7, [sp, #24]
   23466:	d112      	bne.n	2348e <tls_interface_getopt+0x32>
   23468:	461d      	mov	r5, r3
   2346a:	b16b      	cbz	r3, 23488 <tls_interface_getopt+0x2c>
   2346c:	b167      	cbz	r7, 23488 <tls_interface_getopt+0x2c>
   2346e:	4606      	mov	r6, r0
   23470:	4614      	mov	r4, r2
   23472:	f004 fcd9 	bl	27e28 <interface_socket_from_handle_get>
   23476:	2800      	cmp	r0, #0
   23478:	d04f      	beq.n	2351a <tls_interface_getopt+0xbe>
   2347a:	3c01      	subs	r4, #1
   2347c:	2c03      	cmp	r4, #3
   2347e:	d852      	bhi.n	23526 <tls_interface_getopt+0xca>
   23480:	e8df f004 	tbb	[pc, r4]
   23484:	09152139 	.word	0x09152139
   23488:	200e      	movs	r0, #14
   2348a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2348e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23492:	f003 bffb 	b.w	2748c <ip_interface_getopt>
   23496:	683b      	ldr	r3, [r7, #0]
   23498:	2b04      	cmp	r3, #4
   2349a:	d13c      	bne.n	23516 <tls_interface_getopt+0xba>
   2349c:	4b23      	ldr	r3, [pc, #140]	; (2352c <tls_interface_getopt+0xd0>)
   2349e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   234a2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   234a6:	78b3      	ldrb	r3, [r6, #2]
   234a8:	2000      	movs	r0, #0
   234aa:	602b      	str	r3, [r5, #0]
   234ac:	e7ed      	b.n	2348a <tls_interface_getopt+0x2e>
   234ae:	683b      	ldr	r3, [r7, #0]
   234b0:	2b01      	cmp	r3, #1
   234b2:	d130      	bne.n	23516 <tls_interface_getopt+0xba>
   234b4:	4b1d      	ldr	r3, [pc, #116]	; (2352c <tls_interface_getopt+0xd0>)
   234b6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   234ba:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   234be:	7873      	ldrb	r3, [r6, #1]
   234c0:	2000      	movs	r0, #0
   234c2:	702b      	strb	r3, [r5, #0]
   234c4:	e7e1      	b.n	2348a <tls_interface_getopt+0x2e>
   234c6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   234ca:	4918      	ldr	r1, [pc, #96]	; (2352c <tls_interface_getopt+0xd0>)
   234cc:	683b      	ldr	r3, [r7, #0]
   234ce:	00b6      	lsls	r6, r6, #2
   234d0:	198a      	adds	r2, r1, r6
   234d2:	f013 0403 	ands.w	r4, r3, #3
   234d6:	78d0      	ldrb	r0, [r2, #3]
   234d8:	d121      	bne.n	2351e <tls_interface_getopt+0xc2>
   234da:	089b      	lsrs	r3, r3, #2
   234dc:	4283      	cmp	r3, r0
   234de:	bf28      	it	cs
   234e0:	4603      	movcs	r3, r0
   234e2:	009a      	lsls	r2, r3, #2
   234e4:	b1db      	cbz	r3, 2351e <tls_interface_getopt+0xc2>
   234e6:	3604      	adds	r6, #4
   234e8:	4431      	add	r1, r6
   234ea:	603a      	str	r2, [r7, #0]
   234ec:	4628      	mov	r0, r5
   234ee:	f00c fc92 	bl	2fe16 <memcpy>
   234f2:	4620      	mov	r0, r4
   234f4:	e7c9      	b.n	2348a <tls_interface_getopt+0x2e>
   234f6:	683b      	ldr	r3, [r7, #0]
   234f8:	2b04      	cmp	r3, #4
   234fa:	d10c      	bne.n	23516 <tls_interface_getopt+0xba>
   234fc:	4b0b      	ldr	r3, [pc, #44]	; (2352c <tls_interface_getopt+0xd0>)
   234fe:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   23502:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   23506:	2000      	movs	r0, #0
   23508:	f1a3 0301 	sub.w	r3, r3, #1
   2350c:	fab3 f383 	clz	r3, r3
   23510:	095b      	lsrs	r3, r3, #5
   23512:	602b      	str	r3, [r5, #0]
   23514:	e7b9      	b.n	2348a <tls_interface_getopt+0x2e>
   23516:	2016      	movs	r0, #22
   23518:	e7b7      	b.n	2348a <tls_interface_getopt+0x2e>
   2351a:	2009      	movs	r0, #9
   2351c:	e7b5      	b.n	2348a <tls_interface_getopt+0x2e>
   2351e:	2800      	cmp	r0, #0
   23520:	d1f9      	bne.n	23516 <tls_interface_getopt+0xba>
   23522:	6038      	str	r0, [r7, #0]
   23524:	e7b1      	b.n	2348a <tls_interface_getopt+0x2e>
   23526:	202a      	movs	r0, #42	; 0x2a
   23528:	e7af      	b.n	2348a <tls_interface_getopt+0x2e>
   2352a:	bf00      	nop
   2352c:	200204f4 	.word	0x200204f4

00023530 <tls_rpc_ip_event_handler>:
   23530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23532:	f248 0581 	movw	r5, #32897	; 0x8081
   23536:	42ab      	cmp	r3, r5
   23538:	460c      	mov	r4, r1
   2353a:	d062      	beq.n	23602 <tls_rpc_ip_event_handler+0xd2>
   2353c:	f249 0182 	movw	r1, #36994	; 0x9082
   23540:	428b      	cmp	r3, r1
   23542:	4606      	mov	r6, r0
   23544:	d02e      	beq.n	235a4 <tls_rpc_ip_event_handler+0x74>
   23546:	f248 0102 	movw	r1, #32770	; 0x8002
   2354a:	428b      	cmp	r3, r1
   2354c:	d001      	beq.n	23552 <tls_rpc_ip_event_handler+0x22>
   2354e:	2001      	movs	r0, #1
   23550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23552:	2c00      	cmp	r4, #0
   23554:	d0fb      	beq.n	2354e <tls_rpc_ip_event_handler+0x1e>
   23556:	6963      	ldr	r3, [r4, #20]
   23558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   2355c:	d002      	beq.n	23564 <tls_rpc_ip_event_handler+0x34>
   2355e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   23562:	d1f4      	bne.n	2354e <tls_rpc_ip_event_handler+0x1e>
   23564:	6823      	ldr	r3, [r4, #0]
   23566:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2356a:	6023      	str	r3, [r4, #0]
   2356c:	6955      	ldr	r5, [r2, #20]
   2356e:	2d00      	cmp	r5, #0
   23570:	d156      	bne.n	23620 <tls_rpc_ip_event_handler+0xf0>
   23572:	6823      	ldr	r3, [r4, #0]
   23574:	0c1b      	lsrs	r3, r3, #16
   23576:	041b      	lsls	r3, r3, #16
   23578:	f043 0305 	orr.w	r3, r3, #5
   2357c:	6023      	str	r3, [r4, #0]
   2357e:	6823      	ldr	r3, [r4, #0]
   23580:	00da      	lsls	r2, r3, #3
   23582:	d50d      	bpl.n	235a0 <tls_rpc_ip_event_handler+0x70>
   23584:	4b2b      	ldr	r3, [pc, #172]	; (23634 <tls_rpc_ip_event_handler+0x104>)
   23586:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   2358a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2358e:	2b02      	cmp	r3, #2
   23590:	d106      	bne.n	235a0 <tls_rpc_ip_event_handler+0x70>
   23592:	4630      	mov	r0, r6
   23594:	4621      	mov	r1, r4
   23596:	f7ff fb9b 	bl	22cd0 <secure_client_socket>
   2359a:	b108      	cbz	r0, 235a0 <tls_rpc_ip_event_handler+0x70>
   2359c:	2873      	cmp	r0, #115	; 0x73
   2359e:	d142      	bne.n	23626 <tls_rpc_ip_event_handler+0xf6>
   235a0:	2000      	movs	r0, #0
   235a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   235a4:	2c00      	cmp	r4, #0
   235a6:	d0fb      	beq.n	235a0 <tls_rpc_ip_event_handler+0x70>
   235a8:	6823      	ldr	r3, [r4, #0]
   235aa:	b29b      	uxth	r3, r3
   235ac:	2b0b      	cmp	r3, #11
   235ae:	d1f7      	bne.n	235a0 <tls_rpc_ip_event_handler+0x70>
   235b0:	6915      	ldr	r5, [r2, #16]
   235b2:	2d00      	cmp	r5, #0
   235b4:	d134      	bne.n	23620 <tls_rpc_ip_event_handler+0xf0>
   235b6:	6823      	ldr	r3, [r4, #0]
   235b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   235bc:	6023      	str	r3, [r4, #0]
   235be:	6823      	ldr	r3, [r4, #0]
   235c0:	00db      	lsls	r3, r3, #3
   235c2:	d5ed      	bpl.n	235a0 <tls_rpc_ip_event_handler+0x70>
   235c4:	4f1c      	ldr	r7, [pc, #112]	; (23638 <tls_rpc_ip_event_handler+0x108>)
   235c6:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   235ca:	b130      	cbz	r0, 235da <tls_rpc_ip_event_handler+0xaa>
   235cc:	f7ff fb18 	bl	22c00 <nrf_free>
   235d0:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   235d4:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   235d8:	605d      	str	r5, [r3, #4]
   235da:	6823      	ldr	r3, [r4, #0]
   235dc:	2000      	movs	r0, #0
   235de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   235e2:	6023      	str	r3, [r4, #0]
   235e4:	6823      	ldr	r3, [r4, #0]
   235e6:	0c1b      	lsrs	r3, r3, #16
   235e8:	041b      	lsls	r3, r3, #16
   235ea:	f043 030c 	orr.w	r3, r3, #12
   235ee:	6023      	str	r3, [r4, #0]
   235f0:	6823      	ldr	r3, [r4, #0]
   235f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   235f6:	6023      	str	r3, [r4, #0]
   235f8:	6823      	ldr	r3, [r4, #0]
   235fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   235fe:	6023      	str	r3, [r4, #0]
   23600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23602:	2900      	cmp	r1, #0
   23604:	d0cc      	beq.n	235a0 <tls_rpc_ip_event_handler+0x70>
   23606:	680b      	ldr	r3, [r1, #0]
   23608:	b29b      	uxth	r3, r3
   2360a:	2b0a      	cmp	r3, #10
   2360c:	d1c8      	bne.n	235a0 <tls_rpc_ip_event_handler+0x70>
   2360e:	6950      	ldr	r0, [r2, #20]
   23610:	b938      	cbnz	r0, 23622 <tls_rpc_ip_event_handler+0xf2>
   23612:	680b      	ldr	r3, [r1, #0]
   23614:	0c1b      	lsrs	r3, r3, #16
   23616:	041b      	lsls	r3, r3, #16
   23618:	f043 030b 	orr.w	r3, r3, #11
   2361c:	600b      	str	r3, [r1, #0]
   2361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23620:	4628      	mov	r0, r5
   23622:	f002 ff37 	bl	26494 <rpc_error_to_nrf_bsd_error>
   23626:	6060      	str	r0, [r4, #4]
   23628:	6823      	ldr	r3, [r4, #0]
   2362a:	2000      	movs	r0, #0
   2362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   23630:	6023      	str	r3, [r4, #0]
   23632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23634:	200204f4 	.word	0x200204f4
   23638:	20020638 	.word	0x20020638

0002363c <rpc_dfu_event_handler>:
   2363c:	b508      	push	{r3, lr}
   2363e:	4a08      	ldr	r2, [pc, #32]	; (23660 <rpc_dfu_event_handler+0x24>)
   23640:	68c1      	ldr	r1, [r0, #12]
   23642:	8812      	ldrh	r2, [r2, #0]
   23644:	4603      	mov	r3, r0
   23646:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   2364a:	d005      	beq.n	23658 <rpc_dfu_event_handler+0x1c>
   2364c:	6800      	ldr	r0, [r0, #0]
   2364e:	b110      	cbz	r0, 23656 <rpc_dfu_event_handler+0x1a>
   23650:	f7fe ff06 	bl	22460 <rpc_dfu_client_data_free>
   23654:	2000      	movs	r0, #0
   23656:	bd08      	pop	{r3, pc}
   23658:	4a02      	ldr	r2, [pc, #8]	; (23664 <rpc_dfu_event_handler+0x28>)
   2365a:	2001      	movs	r0, #1
   2365c:	6013      	str	r3, [r2, #0]
   2365e:	bd08      	pop	{r3, pc}
   23660:	200214f2 	.word	0x200214f2
   23664:	20020684 	.word	0x20020684

00023668 <mfu_interface_init>:
   23668:	2300      	movs	r3, #0
   2366a:	b510      	push	{r4, lr}
   2366c:	4808      	ldr	r0, [pc, #32]	; (23690 <mfu_interface_init+0x28>)
   2366e:	4909      	ldr	r1, [pc, #36]	; (23694 <mfu_interface_init+0x2c>)
   23670:	4a09      	ldr	r2, [pc, #36]	; (23698 <mfu_interface_init+0x30>)
   23672:	4c0a      	ldr	r4, [pc, #40]	; (2369c <mfu_interface_init+0x34>)
   23674:	8003      	strh	r3, [r0, #0]
   23676:	600b      	str	r3, [r1, #0]
   23678:	6013      	str	r3, [r2, #0]
   2367a:	6023      	str	r3, [r4, #0]
   2367c:	f7fe feba 	bl	223f4 <rpc_dfu_client_init>
   23680:	b910      	cbnz	r0, 23688 <mfu_interface_init+0x20>
   23682:	2301      	movs	r3, #1
   23684:	6023      	str	r3, [r4, #0]
   23686:	bd10      	pop	{r4, pc}
   23688:	f04f 30ff 	mov.w	r0, #4294967295
   2368c:	bd10      	pop	{r4, pc}
   2368e:	bf00      	nop
   23690:	200214f2 	.word	0x200214f2
   23694:	20020684 	.word	0x20020684
   23698:	20020680 	.word	0x20020680
   2369c:	20020678 	.word	0x20020678

000236a0 <mfu_interface_open>:
   236a0:	b508      	push	{r3, lr}
   236a2:	4b07      	ldr	r3, [pc, #28]	; (236c0 <mfu_interface_open+0x20>)
   236a4:	681a      	ldr	r2, [r3, #0]
   236a6:	2a01      	cmp	r2, #1
   236a8:	d103      	bne.n	236b2 <mfu_interface_open+0x12>
   236aa:	2202      	movs	r2, #2
   236ac:	601a      	str	r2, [r3, #0]
   236ae:	4805      	ldr	r0, [pc, #20]	; (236c4 <mfu_interface_open+0x24>)
   236b0:	bd08      	pop	{r3, pc}
   236b2:	2001      	movs	r0, #1
   236b4:	f7fd f99a 	bl	209ec <bsd_os_errno_set>
   236b8:	f04f 30ff 	mov.w	r0, #4294967295
   236bc:	bd08      	pop	{r3, pc}
   236be:	bf00      	nop
   236c0:	20020678 	.word	0x20020678
   236c4:	49765432 	.word	0x49765432

000236c8 <mfu_interface_close>:
   236c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   236ca:	4c32      	ldr	r4, [pc, #200]	; (23794 <mfu_interface_close+0xcc>)
   236cc:	b083      	sub	sp, #12
   236ce:	6823      	ldr	r3, [r4, #0]
   236d0:	1e9a      	subs	r2, r3, #2
   236d2:	2a01      	cmp	r2, #1
   236d4:	d857      	bhi.n	23786 <mfu_interface_close+0xbe>
   236d6:	2b03      	cmp	r3, #3
   236d8:	d004      	beq.n	236e4 <mfu_interface_close+0x1c>
   236da:	2301      	movs	r3, #1
   236dc:	2000      	movs	r0, #0
   236de:	6023      	str	r3, [r4, #0]
   236e0:	b003      	add	sp, #12
   236e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   236e4:	2100      	movs	r1, #0
   236e6:	4668      	mov	r0, sp
   236e8:	f7fe fe8a 	bl	22400 <rpc_dfu_client_request_alloc>
   236ec:	4603      	mov	r3, r0
   236ee:	2800      	cmp	r0, #0
   236f0:	d13d      	bne.n	2376e <mfu_interface_close+0xa6>
   236f2:	2104      	movs	r1, #4
   236f4:	4e28      	ldr	r6, [pc, #160]	; (23798 <mfu_interface_close+0xd0>)
   236f6:	9800      	ldr	r0, [sp, #0]
   236f8:	8832      	ldrh	r2, [r6, #0]
   236fa:	7201      	strb	r1, [r0, #8]
   236fc:	3201      	adds	r2, #1
   236fe:	b292      	uxth	r2, r2
   23700:	0411      	lsls	r1, r2, #16
   23702:	f041 0106 	orr.w	r1, r1, #6
   23706:	4d25      	ldr	r5, [pc, #148]	; (2379c <mfu_interface_close+0xd4>)
   23708:	60c1      	str	r1, [r0, #12]
   2370a:	7103      	strb	r3, [r0, #4]
   2370c:	7143      	strb	r3, [r0, #5]
   2370e:	7183      	strb	r3, [r0, #6]
   23710:	71c3      	strb	r3, [r0, #7]
   23712:	7243      	strb	r3, [r0, #9]
   23714:	7283      	strb	r3, [r0, #10]
   23716:	72c3      	strb	r3, [r0, #11]
   23718:	2106      	movs	r1, #6
   2371a:	8032      	strh	r2, [r6, #0]
   2371c:	602b      	str	r3, [r5, #0]
   2371e:	f7fe fe83 	bl	22428 <rpc_dfu_client_request_send>
   23722:	b9d8      	cbnz	r0, 2375c <mfu_interface_close+0x94>
   23724:	f04f 33ff 	mov.w	r3, #4294967295
   23728:	ae02      	add	r6, sp, #8
   2372a:	4627      	mov	r7, r4
   2372c:	f846 3d04 	str.w	r3, [r6, #-4]!
   23730:	e004      	b.n	2373c <mfu_interface_close+0x74>
   23732:	4631      	mov	r1, r6
   23734:	4638      	mov	r0, r7
   23736:	f7fd f8c5 	bl	208c4 <bsd_os_timedwait>
   2373a:	b9f0      	cbnz	r0, 2377a <mfu_interface_close+0xb2>
   2373c:	6828      	ldr	r0, [r5, #0]
   2373e:	2800      	cmp	r0, #0
   23740:	d0f7      	beq.n	23732 <mfu_interface_close+0x6a>
   23742:	6905      	ldr	r5, [r0, #16]
   23744:	f7fe fe84 	bl	22450 <rpc_dfu_client_message_free>
   23748:	2d00      	cmp	r5, #0
   2374a:	d0c6      	beq.n	236da <mfu_interface_close+0x12>
   2374c:	4b14      	ldr	r3, [pc, #80]	; (237a0 <mfu_interface_close+0xd8>)
   2374e:	2008      	movs	r0, #8
   23750:	601d      	str	r5, [r3, #0]
   23752:	f7fd f94b 	bl	209ec <bsd_os_errno_set>
   23756:	f04f 30ff 	mov.w	r0, #4294967295
   2375a:	e7c1      	b.n	236e0 <mfu_interface_close+0x18>
   2375c:	9800      	ldr	r0, [sp, #0]
   2375e:	6803      	ldr	r3, [r0, #0]
   23760:	b11b      	cbz	r3, 2376a <mfu_interface_close+0xa2>
   23762:	4618      	mov	r0, r3
   23764:	f7fe fe7c 	bl	22460 <rpc_dfu_client_data_free>
   23768:	9800      	ldr	r0, [sp, #0]
   2376a:	f7fe fe71 	bl	22450 <rpc_dfu_client_message_free>
   2376e:	200c      	movs	r0, #12
   23770:	f7fd f93c 	bl	209ec <bsd_os_errno_set>
   23774:	f04f 30ff 	mov.w	r0, #4294967295
   23778:	e7b2      	b.n	236e0 <mfu_interface_close+0x18>
   2377a:	203c      	movs	r0, #60	; 0x3c
   2377c:	f7fd f936 	bl	209ec <bsd_os_errno_set>
   23780:	f04f 30ff 	mov.w	r0, #4294967295
   23784:	e7ac      	b.n	236e0 <mfu_interface_close+0x18>
   23786:	2001      	movs	r0, #1
   23788:	f7fd f930 	bl	209ec <bsd_os_errno_set>
   2378c:	f04f 30ff 	mov.w	r0, #4294967295
   23790:	e7a6      	b.n	236e0 <mfu_interface_close+0x18>
   23792:	bf00      	nop
   23794:	20020678 	.word	0x20020678
   23798:	200214f2 	.word	0x200214f2
   2379c:	20020684 	.word	0x20020684
   237a0:	2002067c 	.word	0x2002067c

000237a4 <mfu_interface_sendto>:
   237a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   237a8:	4e64      	ldr	r6, [pc, #400]	; (2393c <mfu_interface_sendto+0x198>)
   237aa:	460f      	mov	r7, r1
   237ac:	6831      	ldr	r1, [r6, #0]
   237ae:	4615      	mov	r5, r2
   237b0:	1e8a      	subs	r2, r1, #2
   237b2:	2a01      	cmp	r2, #1
   237b4:	b082      	sub	sp, #8
   237b6:	f200 80b4 	bhi.w	23922 <mfu_interface_sendto+0x17e>
   237ba:	2f00      	cmp	r7, #0
   237bc:	f000 80a5 	beq.w	2390a <mfu_interface_sendto+0x166>
   237c0:	2d00      	cmp	r5, #0
   237c2:	f000 80a2 	beq.w	2390a <mfu_interface_sendto+0x166>
   237c6:	2b00      	cmp	r3, #0
   237c8:	f040 80b1 	bne.w	2392e <mfu_interface_sendto+0x18a>
   237cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   237ce:	2b00      	cmp	r3, #0
   237d0:	f040 80a1 	bne.w	23916 <mfu_interface_sendto+0x172>
   237d4:	2902      	cmp	r1, #2
   237d6:	d04f      	beq.n	23878 <mfu_interface_sendto+0xd4>
   237d8:	46e8      	mov	r8, sp
   237da:	4640      	mov	r0, r8
   237dc:	4629      	mov	r1, r5
   237de:	f7fe fe0f 	bl	22400 <rpc_dfu_client_request_alloc>
   237e2:	4606      	mov	r6, r0
   237e4:	b140      	cbz	r0, 237f8 <mfu_interface_sendto+0x54>
   237e6:	200c      	movs	r0, #12
   237e8:	f7fd f900 	bl	209ec <bsd_os_errno_set>
   237ec:	f04f 35ff 	mov.w	r5, #4294967295
   237f0:	4628      	mov	r0, r5
   237f2:	b002      	add	sp, #8
   237f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   237f8:	9b00      	ldr	r3, [sp, #0]
   237fa:	4639      	mov	r1, r7
   237fc:	6818      	ldr	r0, [r3, #0]
   237fe:	462a      	mov	r2, r5
   23800:	f00c fb09 	bl	2fe16 <memcpy>
   23804:	2104      	movs	r1, #4
   23806:	4c4e      	ldr	r4, [pc, #312]	; (23940 <mfu_interface_sendto+0x19c>)
   23808:	9800      	ldr	r0, [sp, #0]
   2380a:	8823      	ldrh	r3, [r4, #0]
   2380c:	6045      	str	r5, [r0, #4]
   2380e:	3301      	adds	r3, #1
   23810:	b29b      	uxth	r3, r3
   23812:	041a      	lsls	r2, r3, #16
   23814:	8023      	strh	r3, [r4, #0]
   23816:	430a      	orrs	r2, r1
   23818:	4c4a      	ldr	r4, [pc, #296]	; (23944 <mfu_interface_sendto+0x1a0>)
   2381a:	60c2      	str	r2, [r0, #12]
   2381c:	7246      	strb	r6, [r0, #9]
   2381e:	7286      	strb	r6, [r0, #10]
   23820:	72c6      	strb	r6, [r0, #11]
   23822:	7201      	strb	r1, [r0, #8]
   23824:	6026      	str	r6, [r4, #0]
   23826:	f7fe fdff 	bl	22428 <rpc_dfu_client_request_send>
   2382a:	2800      	cmp	r0, #0
   2382c:	d163      	bne.n	238f6 <mfu_interface_sendto+0x152>
   2382e:	f04f 33ff 	mov.w	r3, #4294967295
   23832:	ae02      	add	r6, sp, #8
   23834:	4f41      	ldr	r7, [pc, #260]	; (2393c <mfu_interface_sendto+0x198>)
   23836:	f846 3d04 	str.w	r3, [r6, #-4]!
   2383a:	e004      	b.n	23846 <mfu_interface_sendto+0xa2>
   2383c:	4631      	mov	r1, r6
   2383e:	4638      	mov	r0, r7
   23840:	f7fd f840 	bl	208c4 <bsd_os_timedwait>
   23844:	b978      	cbnz	r0, 23866 <mfu_interface_sendto+0xc2>
   23846:	6820      	ldr	r0, [r4, #0]
   23848:	2800      	cmp	r0, #0
   2384a:	d0f7      	beq.n	2383c <mfu_interface_sendto+0x98>
   2384c:	6904      	ldr	r4, [r0, #16]
   2384e:	f7fe fdff 	bl	22450 <rpc_dfu_client_message_free>
   23852:	2c00      	cmp	r4, #0
   23854:	d0cc      	beq.n	237f0 <mfu_interface_sendto+0x4c>
   23856:	4b3c      	ldr	r3, [pc, #240]	; (23948 <mfu_interface_sendto+0x1a4>)
   23858:	2008      	movs	r0, #8
   2385a:	601c      	str	r4, [r3, #0]
   2385c:	f04f 35ff 	mov.w	r5, #4294967295
   23860:	f7fd f8c4 	bl	209ec <bsd_os_errno_set>
   23864:	e7c4      	b.n	237f0 <mfu_interface_sendto+0x4c>
   23866:	f04f 35ff 	mov.w	r5, #4294967295
   2386a:	203c      	movs	r0, #60	; 0x3c
   2386c:	f7fd f8be 	bl	209ec <bsd_os_errno_set>
   23870:	4628      	mov	r0, r5
   23872:	b002      	add	sp, #8
   23874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23878:	46e8      	mov	r8, sp
   2387a:	4619      	mov	r1, r3
   2387c:	4640      	mov	r0, r8
   2387e:	f7fe fdbf 	bl	22400 <rpc_dfu_client_request_alloc>
   23882:	4602      	mov	r2, r0
   23884:	2800      	cmp	r0, #0
   23886:	d1ae      	bne.n	237e6 <mfu_interface_sendto+0x42>
   23888:	f04f 0c08 	mov.w	ip, #8
   2388c:	492c      	ldr	r1, [pc, #176]	; (23940 <mfu_interface_sendto+0x19c>)
   2388e:	482f      	ldr	r0, [pc, #188]	; (2394c <mfu_interface_sendto+0x1a8>)
   23890:	880b      	ldrh	r3, [r1, #0]
   23892:	6804      	ldr	r4, [r0, #0]
   23894:	3301      	adds	r3, #1
   23896:	9800      	ldr	r0, [sp, #0]
   23898:	b29b      	uxth	r3, r3
   2389a:	800b      	strh	r3, [r1, #0]
   2389c:	041b      	lsls	r3, r3, #16
   2389e:	f043 0303 	orr.w	r3, r3, #3
   238a2:	6104      	str	r4, [r0, #16]
   238a4:	4c27      	ldr	r4, [pc, #156]	; (23944 <mfu_interface_sendto+0x1a0>)
   238a6:	60c3      	str	r3, [r0, #12]
   238a8:	7102      	strb	r2, [r0, #4]
   238aa:	7142      	strb	r2, [r0, #5]
   238ac:	7182      	strb	r2, [r0, #6]
   238ae:	71c2      	strb	r2, [r0, #7]
   238b0:	7242      	strb	r2, [r0, #9]
   238b2:	7282      	strb	r2, [r0, #10]
   238b4:	72c2      	strb	r2, [r0, #11]
   238b6:	f880 c008 	strb.w	ip, [r0, #8]
   238ba:	2103      	movs	r1, #3
   238bc:	6022      	str	r2, [r4, #0]
   238be:	f7fe fdb3 	bl	22428 <rpc_dfu_client_request_send>
   238c2:	b9c0      	cbnz	r0, 238f6 <mfu_interface_sendto+0x152>
   238c4:	f04f 33ff 	mov.w	r3, #4294967295
   238c8:	f10d 0908 	add.w	r9, sp, #8
   238cc:	f849 3d04 	str.w	r3, [r9, #-4]!
   238d0:	46b2      	mov	sl, r6
   238d2:	e005      	b.n	238e0 <mfu_interface_sendto+0x13c>
   238d4:	4649      	mov	r1, r9
   238d6:	4650      	mov	r0, sl
   238d8:	f7fc fff4 	bl	208c4 <bsd_os_timedwait>
   238dc:	2800      	cmp	r0, #0
   238de:	d1c2      	bne.n	23866 <mfu_interface_sendto+0xc2>
   238e0:	6820      	ldr	r0, [r4, #0]
   238e2:	2800      	cmp	r0, #0
   238e4:	d0f6      	beq.n	238d4 <mfu_interface_sendto+0x130>
   238e6:	6904      	ldr	r4, [r0, #16]
   238e8:	f7fe fdb2 	bl	22450 <rpc_dfu_client_message_free>
   238ec:	2c00      	cmp	r4, #0
   238ee:	d1b2      	bne.n	23856 <mfu_interface_sendto+0xb2>
   238f0:	2303      	movs	r3, #3
   238f2:	6033      	str	r3, [r6, #0]
   238f4:	e771      	b.n	237da <mfu_interface_sendto+0x36>
   238f6:	9800      	ldr	r0, [sp, #0]
   238f8:	6803      	ldr	r3, [r0, #0]
   238fa:	b11b      	cbz	r3, 23904 <mfu_interface_sendto+0x160>
   238fc:	4618      	mov	r0, r3
   238fe:	f7fe fdaf 	bl	22460 <rpc_dfu_client_data_free>
   23902:	9800      	ldr	r0, [sp, #0]
   23904:	f7fe fda4 	bl	22450 <rpc_dfu_client_message_free>
   23908:	e76d      	b.n	237e6 <mfu_interface_sendto+0x42>
   2390a:	2016      	movs	r0, #22
   2390c:	f7fd f86e 	bl	209ec <bsd_os_errno_set>
   23910:	f04f 35ff 	mov.w	r5, #4294967295
   23914:	e76c      	b.n	237f0 <mfu_interface_sendto+0x4c>
   23916:	2038      	movs	r0, #56	; 0x38
   23918:	f7fd f868 	bl	209ec <bsd_os_errno_set>
   2391c:	f04f 35ff 	mov.w	r5, #4294967295
   23920:	e766      	b.n	237f0 <mfu_interface_sendto+0x4c>
   23922:	2001      	movs	r0, #1
   23924:	f7fd f862 	bl	209ec <bsd_os_errno_set>
   23928:	f04f 35ff 	mov.w	r5, #4294967295
   2392c:	e760      	b.n	237f0 <mfu_interface_sendto+0x4c>
   2392e:	202d      	movs	r0, #45	; 0x2d
   23930:	f7fd f85c 	bl	209ec <bsd_os_errno_set>
   23934:	f04f 35ff 	mov.w	r5, #4294967295
   23938:	e75a      	b.n	237f0 <mfu_interface_sendto+0x4c>
   2393a:	bf00      	nop
   2393c:	20020678 	.word	0x20020678
   23940:	200214f2 	.word	0x200214f2
   23944:	20020684 	.word	0x20020684
   23948:	2002067c 	.word	0x2002067c
   2394c:	20020680 	.word	0x20020680

00023950 <mfu_interface_setopt>:
   23950:	b5f0      	push	{r4, r5, r6, r7, lr}
   23952:	4846      	ldr	r0, [pc, #280]	; (23a6c <mfu_interface_setopt+0x11c>)
   23954:	b083      	sub	sp, #12
   23956:	6800      	ldr	r0, [r0, #0]
   23958:	3802      	subs	r0, #2
   2395a:	2801      	cmp	r0, #1
   2395c:	d877      	bhi.n	23a4e <mfu_interface_setopt+0xfe>
   2395e:	f240 2003 	movw	r0, #515	; 0x203
   23962:	4281      	cmp	r1, r0
   23964:	d16d      	bne.n	23a42 <mfu_interface_setopt+0xf2>
   23966:	3a04      	subs	r2, #4
   23968:	2a03      	cmp	r2, #3
   2396a:	d85c      	bhi.n	23a26 <mfu_interface_setopt+0xd6>
   2396c:	e8df f002 	tbb	[pc, r2]
   23970:	514e024b 	.word	0x514e024b
   23974:	2407      	movs	r4, #7
   23976:	4625      	mov	r5, r4
   23978:	2100      	movs	r1, #0
   2397a:	4668      	mov	r0, sp
   2397c:	f7fe fd40 	bl	22400 <rpc_dfu_client_request_alloc>
   23980:	4603      	mov	r3, r0
   23982:	2800      	cmp	r0, #0
   23984:	d138      	bne.n	239f8 <mfu_interface_setopt+0xa8>
   23986:	2704      	movs	r7, #4
   23988:	4e39      	ldr	r6, [pc, #228]	; (23a70 <mfu_interface_setopt+0x120>)
   2398a:	9800      	ldr	r0, [sp, #0]
   2398c:	8832      	ldrh	r2, [r6, #0]
   2398e:	4629      	mov	r1, r5
   23990:	3201      	adds	r2, #1
   23992:	b292      	uxth	r2, r2
   23994:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   23998:	4c36      	ldr	r4, [pc, #216]	; (23a74 <mfu_interface_setopt+0x124>)
   2399a:	60c5      	str	r5, [r0, #12]
   2399c:	7103      	strb	r3, [r0, #4]
   2399e:	7143      	strb	r3, [r0, #5]
   239a0:	7183      	strb	r3, [r0, #6]
   239a2:	71c3      	strb	r3, [r0, #7]
   239a4:	7243      	strb	r3, [r0, #9]
   239a6:	7283      	strb	r3, [r0, #10]
   239a8:	72c3      	strb	r3, [r0, #11]
   239aa:	7207      	strb	r7, [r0, #8]
   239ac:	8032      	strh	r2, [r6, #0]
   239ae:	6023      	str	r3, [r4, #0]
   239b0:	f7fe fd3a 	bl	22428 <rpc_dfu_client_request_send>
   239b4:	b9b8      	cbnz	r0, 239e6 <mfu_interface_setopt+0x96>
   239b6:	f04f 33ff 	mov.w	r3, #4294967295
   239ba:	ad02      	add	r5, sp, #8
   239bc:	4e2b      	ldr	r6, [pc, #172]	; (23a6c <mfu_interface_setopt+0x11c>)
   239be:	f845 3d04 	str.w	r3, [r5, #-4]!
   239c2:	e005      	b.n	239d0 <mfu_interface_setopt+0x80>
   239c4:	4629      	mov	r1, r5
   239c6:	4630      	mov	r0, r6
   239c8:	f7fc ff7c 	bl	208c4 <bsd_os_timedwait>
   239cc:	2800      	cmp	r0, #0
   239ce:	d131      	bne.n	23a34 <mfu_interface_setopt+0xe4>
   239d0:	6820      	ldr	r0, [r4, #0]
   239d2:	2800      	cmp	r0, #0
   239d4:	d0f6      	beq.n	239c4 <mfu_interface_setopt+0x74>
   239d6:	6904      	ldr	r4, [r0, #16]
   239d8:	f7fe fd3a 	bl	22450 <rpc_dfu_client_message_free>
   239dc:	2c00      	cmp	r4, #0
   239de:	d13c      	bne.n	23a5a <mfu_interface_setopt+0x10a>
   239e0:	4620      	mov	r0, r4
   239e2:	b003      	add	sp, #12
   239e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   239e6:	9800      	ldr	r0, [sp, #0]
   239e8:	6803      	ldr	r3, [r0, #0]
   239ea:	b11b      	cbz	r3, 239f4 <mfu_interface_setopt+0xa4>
   239ec:	4618      	mov	r0, r3
   239ee:	f7fe fd37 	bl	22460 <rpc_dfu_client_data_free>
   239f2:	9800      	ldr	r0, [sp, #0]
   239f4:	f7fe fd2c 	bl	22450 <rpc_dfu_client_message_free>
   239f8:	200c      	movs	r0, #12
   239fa:	f7fc fff7 	bl	209ec <bsd_os_errno_set>
   239fe:	f04f 30ff 	mov.w	r0, #4294967295
   23a02:	b003      	add	sp, #12
   23a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23a06:	2405      	movs	r4, #5
   23a08:	4625      	mov	r5, r4
   23a0a:	e7b5      	b.n	23978 <mfu_interface_setopt+0x28>
   23a0c:	2408      	movs	r4, #8
   23a0e:	4625      	mov	r5, r4
   23a10:	e7b2      	b.n	23978 <mfu_interface_setopt+0x28>
   23a12:	b1b3      	cbz	r3, 23a42 <mfu_interface_setopt+0xf2>
   23a14:	9a08      	ldr	r2, [sp, #32]
   23a16:	2a04      	cmp	r2, #4
   23a18:	d113      	bne.n	23a42 <mfu_interface_setopt+0xf2>
   23a1a:	2000      	movs	r0, #0
   23a1c:	681a      	ldr	r2, [r3, #0]
   23a1e:	4b16      	ldr	r3, [pc, #88]	; (23a78 <mfu_interface_setopt+0x128>)
   23a20:	601a      	str	r2, [r3, #0]
   23a22:	b003      	add	sp, #12
   23a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23a26:	202a      	movs	r0, #42	; 0x2a
   23a28:	f7fc ffe0 	bl	209ec <bsd_os_errno_set>
   23a2c:	f04f 30ff 	mov.w	r0, #4294967295
   23a30:	b003      	add	sp, #12
   23a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23a34:	203c      	movs	r0, #60	; 0x3c
   23a36:	f7fc ffd9 	bl	209ec <bsd_os_errno_set>
   23a3a:	f04f 30ff 	mov.w	r0, #4294967295
   23a3e:	b003      	add	sp, #12
   23a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23a42:	2016      	movs	r0, #22
   23a44:	f7fc ffd2 	bl	209ec <bsd_os_errno_set>
   23a48:	f04f 30ff 	mov.w	r0, #4294967295
   23a4c:	e7c9      	b.n	239e2 <mfu_interface_setopt+0x92>
   23a4e:	2001      	movs	r0, #1
   23a50:	f7fc ffcc 	bl	209ec <bsd_os_errno_set>
   23a54:	f04f 30ff 	mov.w	r0, #4294967295
   23a58:	e7c3      	b.n	239e2 <mfu_interface_setopt+0x92>
   23a5a:	4b08      	ldr	r3, [pc, #32]	; (23a7c <mfu_interface_setopt+0x12c>)
   23a5c:	2008      	movs	r0, #8
   23a5e:	601c      	str	r4, [r3, #0]
   23a60:	f7fc ffc4 	bl	209ec <bsd_os_errno_set>
   23a64:	f04f 30ff 	mov.w	r0, #4294967295
   23a68:	e7bb      	b.n	239e2 <mfu_interface_setopt+0x92>
   23a6a:	bf00      	nop
   23a6c:	20020678 	.word	0x20020678
   23a70:	200214f2 	.word	0x200214f2
   23a74:	20020684 	.word	0x20020684
   23a78:	20020680 	.word	0x20020680
   23a7c:	2002067c 	.word	0x2002067c

00023a80 <mfu_interface_getopt>:
   23a80:	f240 2003 	movw	r0, #515	; 0x203
   23a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a88:	4281      	cmp	r1, r0
   23a8a:	b082      	sub	sp, #8
   23a8c:	9e08      	ldr	r6, [sp, #32]
   23a8e:	f040 80ae 	bne.w	23bee <mfu_interface_getopt+0x16e>
   23a92:	461d      	mov	r5, r3
   23a94:	2b00      	cmp	r3, #0
   23a96:	f000 80aa 	beq.w	23bee <mfu_interface_getopt+0x16e>
   23a9a:	2e00      	cmp	r6, #0
   23a9c:	f000 80a7 	beq.w	23bee <mfu_interface_getopt+0x16e>
   23aa0:	4b5e      	ldr	r3, [pc, #376]	; (23c1c <mfu_interface_getopt+0x19c>)
   23aa2:	681b      	ldr	r3, [r3, #0]
   23aa4:	3b02      	subs	r3, #2
   23aa6:	2b01      	cmp	r3, #1
   23aa8:	f200 80a7 	bhi.w	23bfa <mfu_interface_getopt+0x17a>
   23aac:	3a01      	subs	r2, #1
   23aae:	2a13      	cmp	r2, #19
   23ab0:	d879      	bhi.n	23ba6 <mfu_interface_getopt+0x126>
   23ab2:	e8df f002 	tbb	[pc, r2]
   23ab6:	5f17      	.short	0x5f17
   23ab8:	78787878 	.word	0x78787878
   23abc:	78787872 	.word	0x78787872
   23ac0:	78787878 	.word	0x78787878
   23ac4:	78787878 	.word	0x78787878
   23ac8:	0a78      	.short	0x0a78
   23aca:	6833      	ldr	r3, [r6, #0]
   23acc:	2b04      	cmp	r3, #4
   23ace:	f040 808e 	bne.w	23bee <mfu_interface_getopt+0x16e>
   23ad2:	2200      	movs	r2, #0
   23ad4:	4610      	mov	r0, r2
   23ad6:	4b52      	ldr	r3, [pc, #328]	; (23c20 <mfu_interface_getopt+0x1a0>)
   23ad8:	6819      	ldr	r1, [r3, #0]
   23ada:	601a      	str	r2, [r3, #0]
   23adc:	6029      	str	r1, [r5, #0]
   23ade:	b002      	add	sp, #8
   23ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ae4:	6833      	ldr	r3, [r6, #0]
   23ae6:	2b24      	cmp	r3, #36	; 0x24
   23ae8:	f040 8081 	bne.w	23bee <mfu_interface_getopt+0x16e>
   23aec:	2401      	movs	r4, #1
   23aee:	46a0      	mov	r8, r4
   23af0:	2100      	movs	r1, #0
   23af2:	4668      	mov	r0, sp
   23af4:	f7fe fc84 	bl	22400 <rpc_dfu_client_request_alloc>
   23af8:	2800      	cmp	r0, #0
   23afa:	d146      	bne.n	23b8a <mfu_interface_getopt+0x10a>
   23afc:	4949      	ldr	r1, [pc, #292]	; (23c24 <mfu_interface_getopt+0x1a4>)
   23afe:	9b00      	ldr	r3, [sp, #0]
   23b00:	880a      	ldrh	r2, [r1, #0]
   23b02:	f1b8 0f03 	cmp.w	r8, #3
   23b06:	f102 0201 	add.w	r2, r2, #1
   23b0a:	b292      	uxth	r2, r2
   23b0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   23b10:	7118      	strb	r0, [r3, #4]
   23b12:	800a      	strh	r2, [r1, #0]
   23b14:	60dc      	str	r4, [r3, #12]
   23b16:	7158      	strb	r0, [r3, #5]
   23b18:	7198      	strb	r0, [r3, #6]
   23b1a:	71d8      	strb	r0, [r3, #7]
   23b1c:	d04b      	beq.n	23bb6 <mfu_interface_getopt+0x136>
   23b1e:	2104      	movs	r1, #4
   23b20:	2200      	movs	r2, #0
   23b22:	4f41      	ldr	r7, [pc, #260]	; (23c28 <mfu_interface_getopt+0x1a8>)
   23b24:	6099      	str	r1, [r3, #8]
   23b26:	4618      	mov	r0, r3
   23b28:	4641      	mov	r1, r8
   23b2a:	603a      	str	r2, [r7, #0]
   23b2c:	f7fe fc7c 	bl	22428 <rpc_dfu_client_request_send>
   23b30:	2800      	cmp	r0, #0
   23b32:	d14d      	bne.n	23bd0 <mfu_interface_getopt+0x150>
   23b34:	f04f 33ff 	mov.w	r3, #4294967295
   23b38:	ac02      	add	r4, sp, #8
   23b3a:	f844 3d04 	str.w	r3, [r4, #-4]!
   23b3e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 23c1c <mfu_interface_getopt+0x19c>
   23b42:	e005      	b.n	23b50 <mfu_interface_getopt+0xd0>
   23b44:	4621      	mov	r1, r4
   23b46:	4640      	mov	r0, r8
   23b48:	f7fc febc 	bl	208c4 <bsd_os_timedwait>
   23b4c:	2800      	cmp	r0, #0
   23b4e:	d137      	bne.n	23bc0 <mfu_interface_getopt+0x140>
   23b50:	6839      	ldr	r1, [r7, #0]
   23b52:	2900      	cmp	r1, #0
   23b54:	d0f6      	beq.n	23b44 <mfu_interface_getopt+0xc4>
   23b56:	690c      	ldr	r4, [r1, #16]
   23b58:	2c00      	cmp	r4, #0
   23b5a:	d154      	bne.n	23c06 <mfu_interface_getopt+0x186>
   23b5c:	6832      	ldr	r2, [r6, #0]
   23b5e:	3114      	adds	r1, #20
   23b60:	4628      	mov	r0, r5
   23b62:	f00c f958 	bl	2fe16 <memcpy>
   23b66:	6838      	ldr	r0, [r7, #0]
   23b68:	f7fe fc72 	bl	22450 <rpc_dfu_client_message_free>
   23b6c:	4620      	mov	r0, r4
   23b6e:	b002      	add	sp, #8
   23b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b74:	6833      	ldr	r3, [r6, #0]
   23b76:	2b04      	cmp	r3, #4
   23b78:	d139      	bne.n	23bee <mfu_interface_getopt+0x16e>
   23b7a:	2402      	movs	r4, #2
   23b7c:	2100      	movs	r1, #0
   23b7e:	4668      	mov	r0, sp
   23b80:	46a0      	mov	r8, r4
   23b82:	f7fe fc3d 	bl	22400 <rpc_dfu_client_request_alloc>
   23b86:	2800      	cmp	r0, #0
   23b88:	d0b8      	beq.n	23afc <mfu_interface_getopt+0x7c>
   23b8a:	200c      	movs	r0, #12
   23b8c:	f7fc ff2e 	bl	209ec <bsd_os_errno_set>
   23b90:	f04f 30ff 	mov.w	r0, #4294967295
   23b94:	b002      	add	sp, #8
   23b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b9a:	6833      	ldr	r3, [r6, #0]
   23b9c:	2b04      	cmp	r3, #4
   23b9e:	d126      	bne.n	23bee <mfu_interface_getopt+0x16e>
   23ba0:	2409      	movs	r4, #9
   23ba2:	46a0      	mov	r8, r4
   23ba4:	e7a4      	b.n	23af0 <mfu_interface_getopt+0x70>
   23ba6:	202a      	movs	r0, #42	; 0x2a
   23ba8:	f7fc ff20 	bl	209ec <bsd_os_errno_set>
   23bac:	f04f 30ff 	mov.w	r0, #4294967295
   23bb0:	b002      	add	sp, #8
   23bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23bb6:	4a1d      	ldr	r2, [pc, #116]	; (23c2c <mfu_interface_getopt+0x1ac>)
   23bb8:	2108      	movs	r1, #8
   23bba:	6812      	ldr	r2, [r2, #0]
   23bbc:	611a      	str	r2, [r3, #16]
   23bbe:	e7af      	b.n	23b20 <mfu_interface_getopt+0xa0>
   23bc0:	203c      	movs	r0, #60	; 0x3c
   23bc2:	f7fc ff13 	bl	209ec <bsd_os_errno_set>
   23bc6:	f04f 30ff 	mov.w	r0, #4294967295
   23bca:	b002      	add	sp, #8
   23bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23bd0:	9800      	ldr	r0, [sp, #0]
   23bd2:	6803      	ldr	r3, [r0, #0]
   23bd4:	b11b      	cbz	r3, 23bde <mfu_interface_getopt+0x15e>
   23bd6:	4618      	mov	r0, r3
   23bd8:	f7fe fc42 	bl	22460 <rpc_dfu_client_data_free>
   23bdc:	9800      	ldr	r0, [sp, #0]
   23bde:	f7fe fc37 	bl	22450 <rpc_dfu_client_message_free>
   23be2:	200c      	movs	r0, #12
   23be4:	f7fc ff02 	bl	209ec <bsd_os_errno_set>
   23be8:	f04f 30ff 	mov.w	r0, #4294967295
   23bec:	e7d2      	b.n	23b94 <mfu_interface_getopt+0x114>
   23bee:	2016      	movs	r0, #22
   23bf0:	f7fc fefc 	bl	209ec <bsd_os_errno_set>
   23bf4:	f04f 30ff 	mov.w	r0, #4294967295
   23bf8:	e771      	b.n	23ade <mfu_interface_getopt+0x5e>
   23bfa:	2001      	movs	r0, #1
   23bfc:	f7fc fef6 	bl	209ec <bsd_os_errno_set>
   23c00:	f04f 30ff 	mov.w	r0, #4294967295
   23c04:	e76b      	b.n	23ade <mfu_interface_getopt+0x5e>
   23c06:	4b06      	ldr	r3, [pc, #24]	; (23c20 <mfu_interface_getopt+0x1a0>)
   23c08:	2008      	movs	r0, #8
   23c0a:	601c      	str	r4, [r3, #0]
   23c0c:	f7fc feee 	bl	209ec <bsd_os_errno_set>
   23c10:	6838      	ldr	r0, [r7, #0]
   23c12:	f7fe fc1d 	bl	22450 <rpc_dfu_client_message_free>
   23c16:	f04f 30ff 	mov.w	r0, #4294967295
   23c1a:	e760      	b.n	23ade <mfu_interface_getopt+0x5e>
   23c1c:	20020678 	.word	0x20020678
   23c20:	2002067c 	.word	0x2002067c
   23c24:	200214f2 	.word	0x200214f2
   23c28:	20020684 	.word	0x20020684
   23c2c:	20020680 	.word	0x20020680

00023c30 <bsd_recoverable_error_handler>:
   23c30:	4770      	bx	lr
   23c32:	bf00      	nop

00023c34 <bsd_platform_error_handler>:
   23c34:	b508      	push	{r3, lr}
   23c36:	f7ff fffb 	bl	23c30 <bsd_recoverable_error_handler>
   23c3a:	bd08      	pop	{r3, pc}

00023c3c <bsd_init>:
   23c3c:	b510      	push	{r4, lr}
   23c3e:	4c06      	ldr	r4, [pc, #24]	; (23c58 <bsd_init+0x1c>)
   23c40:	7823      	ldrb	r3, [r4, #0]
   23c42:	b92b      	cbnz	r3, 23c50 <bsd_init+0x14>
   23c44:	f000 f818 	bl	23c78 <bsd_platform_init>
   23c48:	b908      	cbnz	r0, 23c4e <bsd_init+0x12>
   23c4a:	2301      	movs	r3, #1
   23c4c:	7023      	strb	r3, [r4, #0]
   23c4e:	bd10      	pop	{r4, pc}
   23c50:	f04f 30ff 	mov.w	r0, #4294967295
   23c54:	bd10      	pop	{r4, pc}
   23c56:	bf00      	nop
   23c58:	2002293a 	.word	0x2002293a

00023c5c <unimplemented_method>:
   23c5c:	b40f      	push	{r0, r1, r2, r3}
   23c5e:	b508      	push	{r3, lr}
   23c60:	202d      	movs	r0, #45	; 0x2d
   23c62:	f7fc fec3 	bl	209ec <bsd_os_errno_set>
   23c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23c6a:	f04f 30ff 	mov.w	r0, #4294967295
   23c6e:	b004      	add	sp, #16
   23c70:	4770      	bx	lr
   23c72:	bf00      	nop

00023c74 <rpc_transport_ipc_fault_handler>:
   23c74:	f7ff bfde 	b.w	23c34 <bsd_platform_error_handler>

00023c78 <bsd_platform_init>:
   23c78:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c7a:	b093      	sub	sp, #76	; 0x4c
   23c7c:	f7fe fe28 	bl	228d0 <nrf_mem_init>
   23c80:	2800      	cmp	r0, #0
   23c82:	d14c      	bne.n	23d1e <bsd_platform_init+0xa6>
   23c84:	4928      	ldr	r1, [pc, #160]	; (23d28 <bsd_platform_init+0xb0>)
   23c86:	a801      	add	r0, sp, #4
   23c88:	f7fe fe96 	bl	229b8 <nrf_mem_register>
   23c8c:	2800      	cmp	r0, #0
   23c8e:	d146      	bne.n	23d1e <bsd_platform_init+0xa6>
   23c90:	f7fc ffc4 	bl	20c1c <bsd_os_init>
   23c94:	f004 f9fa 	bl	2808c <rpc_framework_init>
   23c98:	2800      	cmp	r0, #0
   23c9a:	d140      	bne.n	23d1e <bsd_platform_init+0xa6>
   23c9c:	2320      	movs	r3, #32
   23c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   23ca2:	2208      	movs	r2, #8
   23ca4:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   23ca8:	4f20      	ldr	r7, [pc, #128]	; (23d2c <bsd_platform_init+0xb4>)
   23caa:	4e21      	ldr	r6, [pc, #132]	; (23d30 <bsd_platform_init+0xb8>)
   23cac:	9303      	str	r3, [sp, #12]
   23cae:	9305      	str	r3, [sp, #20]
   23cb0:	9307      	str	r3, [sp, #28]
   23cb2:	4d20      	ldr	r5, [pc, #128]	; (23d34 <bsd_platform_init+0xbc>)
   23cb4:	9109      	str	r1, [sp, #36]	; 0x24
   23cb6:	910d      	str	r1, [sp, #52]	; 0x34
   23cb8:	4c1f      	ldr	r4, [pc, #124]	; (23d38 <bsd_platform_init+0xc0>)
   23cba:	4920      	ldr	r1, [pc, #128]	; (23d3c <bsd_platform_init+0xc4>)
   23cbc:	4b20      	ldr	r3, [pc, #128]	; (23d40 <bsd_platform_init+0xc8>)
   23cbe:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   23cc2:	eb0d 0002 	add.w	r0, sp, r2
   23cc6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   23cca:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   23cce:	9702      	str	r7, [sp, #8]
   23cd0:	9604      	str	r6, [sp, #16]
   23cd2:	9506      	str	r5, [sp, #24]
   23cd4:	9408      	str	r4, [sp, #32]
   23cd6:	910a      	str	r1, [sp, #40]	; 0x28
   23cd8:	930c      	str	r3, [sp, #48]	; 0x30
   23cda:	f000 fbe9 	bl	244b0 <rpc_transport_ipc_init>
   23cde:	b108      	cbz	r0, 23ce4 <bsd_platform_init+0x6c>
   23ce0:	b013      	add	sp, #76	; 0x4c
   23ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23ce4:	f003 ff6e 	bl	27bc4 <interface_init>
   23ce8:	b9c8      	cbnz	r0, 23d1e <bsd_platform_init+0xa6>
   23cea:	f7fe fa3b 	bl	22164 <at_interface_init>
   23cee:	b9b0      	cbnz	r0, 23d1e <bsd_platform_init+0xa6>
   23cf0:	f002 fc22 	bl	26538 <ip_interface_init>
   23cf4:	b998      	cbnz	r0, 23d1e <bsd_platform_init+0xa6>
   23cf6:	f7ff f881 	bl	22dfc <tls_interface_init>
   23cfa:	b980      	cbnz	r0, 23d1e <bsd_platform_init+0xa6>
   23cfc:	f7ff fcb4 	bl	23668 <mfu_interface_init>
   23d00:	b968      	cbnz	r0, 23d1e <bsd_platform_init+0xa6>
   23d02:	f001 f9e9 	bl	250d8 <pdn_interface_init>
   23d06:	b950      	cbnz	r0, 23d1e <bsd_platform_init+0xa6>
   23d08:	f005 fc94 	bl	29634 <gnss_interface_init>
   23d0c:	b938      	cbnz	r0, 23d1e <bsd_platform_init+0xa6>
   23d0e:	f7fd fec1 	bl	21a94 <logobj_interface_init>
   23d12:	3000      	adds	r0, #0
   23d14:	bf18      	it	ne
   23d16:	2001      	movne	r0, #1
   23d18:	4240      	negs	r0, r0
   23d1a:	b013      	add	sp, #76	; 0x4c
   23d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23d1e:	f04f 30ff 	mov.w	r0, #4294967295
   23d22:	b013      	add	sp, #76	; 0x4c
   23d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23d26:	bf00      	nop
   23d28:	00031308 	.word	0x00031308
   23d2c:	20010000 	.word	0x20010000
   23d30:	20010040 	.word	0x20010040
   23d34:	20010020 	.word	0x20010020
   23d38:	20017060 	.word	0x20017060
   23d3c:	20010060 	.word	0x20010060
   23d40:	20013060 	.word	0x20013060

00023d44 <bsd_platform_af_method_table_get>:
   23d44:	2805      	cmp	r0, #5
   23d46:	d02a      	beq.n	23d9e <bsd_platform_af_method_table_get+0x5a>
   23d48:	b508      	push	{r3, lr}
   23d4a:	d914      	bls.n	23d76 <bsd_platform_af_method_table_get+0x32>
   23d4c:	280a      	cmp	r0, #10
   23d4e:	d016      	beq.n	23d7e <bsd_platform_af_method_table_get+0x3a>
   23d50:	2866      	cmp	r0, #102	; 0x66
   23d52:	d11f      	bne.n	23d94 <bsd_platform_af_method_table_get+0x50>
   23d54:	f240 2302 	movw	r3, #514	; 0x202
   23d58:	429a      	cmp	r2, r3
   23d5a:	d035      	beq.n	23dc8 <bsd_platform_af_method_table_get+0x84>
   23d5c:	f240 2305 	movw	r3, #517	; 0x205
   23d60:	429a      	cmp	r2, r3
   23d62:	d035      	beq.n	23dd0 <bsd_platform_af_method_table_get+0x8c>
   23d64:	f240 2301 	movw	r3, #513	; 0x201
   23d68:	429a      	cmp	r2, r3
   23d6a:	d02f      	beq.n	23dcc <bsd_platform_af_method_table_get+0x88>
   23d6c:	202b      	movs	r0, #43	; 0x2b
   23d6e:	f7fc fe3d 	bl	209ec <bsd_os_errno_set>
   23d72:	2000      	movs	r0, #0
   23d74:	bd08      	pop	{r3, pc}
   23d76:	2801      	cmp	r0, #1
   23d78:	d016      	beq.n	23da8 <bsd_platform_af_method_table_get+0x64>
   23d7a:	2802      	cmp	r0, #2
   23d7c:	d10a      	bne.n	23d94 <bsd_platform_af_method_table_get+0x50>
   23d7e:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   23d82:	d21a      	bcs.n	23dba <bsd_platform_af_method_table_get+0x76>
   23d84:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   23d88:	d21a      	bcs.n	23dc0 <bsd_platform_af_method_table_get+0x7c>
   23d8a:	3a01      	subs	r2, #1
   23d8c:	2a01      	cmp	r2, #1
   23d8e:	d8ed      	bhi.n	23d6c <bsd_platform_af_method_table_get+0x28>
   23d90:	4810      	ldr	r0, [pc, #64]	; (23dd4 <bsd_platform_af_method_table_get+0x90>)
   23d92:	bd08      	pop	{r3, pc}
   23d94:	2016      	movs	r0, #22
   23d96:	f7fc fe29 	bl	209ec <bsd_os_errno_set>
   23d9a:	2000      	movs	r0, #0
   23d9c:	bd08      	pop	{r3, pc}
   23d9e:	2903      	cmp	r1, #3
   23da0:	480d      	ldr	r0, [pc, #52]	; (23dd8 <bsd_platform_af_method_table_get+0x94>)
   23da2:	bf18      	it	ne
   23da4:	2000      	movne	r0, #0
   23da6:	4770      	bx	lr
   23da8:	f240 2303 	movw	r3, #515	; 0x203
   23dac:	429a      	cmp	r2, r3
   23dae:	d009      	beq.n	23dc4 <bsd_platform_af_method_table_get+0x80>
   23db0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   23db4:	d1da      	bne.n	23d6c <bsd_platform_af_method_table_get+0x28>
   23db6:	4809      	ldr	r0, [pc, #36]	; (23ddc <bsd_platform_af_method_table_get+0x98>)
   23db8:	bd08      	pop	{r3, pc}
   23dba:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   23dbe:	d1d5      	bne.n	23d6c <bsd_platform_af_method_table_get+0x28>
   23dc0:	4807      	ldr	r0, [pc, #28]	; (23de0 <bsd_platform_af_method_table_get+0x9c>)
   23dc2:	bd08      	pop	{r3, pc}
   23dc4:	4807      	ldr	r0, [pc, #28]	; (23de4 <bsd_platform_af_method_table_get+0xa0>)
   23dc6:	bd08      	pop	{r3, pc}
   23dc8:	4807      	ldr	r0, [pc, #28]	; (23de8 <bsd_platform_af_method_table_get+0xa4>)
   23dca:	bd08      	pop	{r3, pc}
   23dcc:	4807      	ldr	r0, [pc, #28]	; (23dec <bsd_platform_af_method_table_get+0xa8>)
   23dce:	bd08      	pop	{r3, pc}
   23dd0:	4807      	ldr	r0, [pc, #28]	; (23df0 <bsd_platform_af_method_table_get+0xac>)
   23dd2:	bd08      	pop	{r3, pc}
   23dd4:	000311d8 	.word	0x000311d8
   23dd8:	000312c8 	.word	0x000312c8
   23ddc:	00031278 	.word	0x00031278
   23de0:	00031200 	.word	0x00031200
   23de4:	00031228 	.word	0x00031228
   23de8:	00031250 	.word	0x00031250
   23dec:	000311b0 	.word	0x000311b0
   23df0:	000312a0 	.word	0x000312a0

00023df4 <bsd_platform_fd_method_table_get>:
   23df4:	b538      	push	{r3, r4, r5, lr}
   23df6:	4605      	mov	r5, r0
   23df8:	f004 f816 	bl	27e28 <interface_socket_from_handle_get>
   23dfc:	4604      	mov	r4, r0
   23dfe:	b960      	cbnz	r0, 23e1a <bsd_platform_fd_method_table_get+0x26>
   23e00:	4b2c      	ldr	r3, [pc, #176]	; (23eb4 <bsd_platform_fd_method_table_get+0xc0>)
   23e02:	429d      	cmp	r5, r3
   23e04:	d02f      	beq.n	23e66 <bsd_platform_fd_method_table_get+0x72>
   23e06:	0c2b      	lsrs	r3, r5, #16
   23e08:	4a2b      	ldr	r2, [pc, #172]	; (23eb8 <bsd_platform_fd_method_table_get+0xc4>)
   23e0a:	041b      	lsls	r3, r3, #16
   23e0c:	4293      	cmp	r3, r2
   23e0e:	d03d      	beq.n	23e8c <bsd_platform_fd_method_table_get+0x98>
   23e10:	4b2a      	ldr	r3, [pc, #168]	; (23ebc <bsd_platform_fd_method_table_get+0xc8>)
   23e12:	429d      	cmp	r5, r3
   23e14:	d149      	bne.n	23eaa <bsd_platform_fd_method_table_get+0xb6>
   23e16:	482a      	ldr	r0, [pc, #168]	; (23ec0 <bsd_platform_fd_method_table_get+0xcc>)
   23e18:	bd38      	pop	{r3, r4, r5, pc}
   23e1a:	68c3      	ldr	r3, [r0, #12]
   23e1c:	6942      	ldr	r2, [r0, #20]
   23e1e:	2b05      	cmp	r3, #5
   23e20:	d036      	beq.n	23e90 <bsd_platform_fd_method_table_get+0x9c>
   23e22:	d911      	bls.n	23e48 <bsd_platform_fd_method_table_get+0x54>
   23e24:	2b0a      	cmp	r3, #10
   23e26:	d013      	beq.n	23e50 <bsd_platform_fd_method_table_get+0x5c>
   23e28:	2b66      	cmp	r3, #102	; 0x66
   23e2a:	d11e      	bne.n	23e6a <bsd_platform_fd_method_table_get+0x76>
   23e2c:	f240 2302 	movw	r3, #514	; 0x202
   23e30:	429a      	cmp	r2, r3
   23e32:	d02b      	beq.n	23e8c <bsd_platform_fd_method_table_get+0x98>
   23e34:	f240 2305 	movw	r3, #517	; 0x205
   23e38:	429a      	cmp	r2, r3
   23e3a:	d02f      	beq.n	23e9c <bsd_platform_fd_method_table_get+0xa8>
   23e3c:	f240 2301 	movw	r3, #513	; 0x201
   23e40:	429a      	cmp	r2, r3
   23e42:	d11e      	bne.n	23e82 <bsd_platform_fd_method_table_get+0x8e>
   23e44:	481f      	ldr	r0, [pc, #124]	; (23ec4 <bsd_platform_fd_method_table_get+0xd0>)
   23e46:	bd38      	pop	{r3, r4, r5, pc}
   23e48:	2b01      	cmp	r3, #1
   23e4a:	d013      	beq.n	23e74 <bsd_platform_fd_method_table_get+0x80>
   23e4c:	2b02      	cmp	r3, #2
   23e4e:	d10c      	bne.n	23e6a <bsd_platform_fd_method_table_get+0x76>
   23e50:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   23e54:	d224      	bcs.n	23ea0 <bsd_platform_fd_method_table_get+0xac>
   23e56:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   23e5a:	d224      	bcs.n	23ea6 <bsd_platform_fd_method_table_get+0xb2>
   23e5c:	3a01      	subs	r2, #1
   23e5e:	2a01      	cmp	r2, #1
   23e60:	d80f      	bhi.n	23e82 <bsd_platform_fd_method_table_get+0x8e>
   23e62:	4819      	ldr	r0, [pc, #100]	; (23ec8 <bsd_platform_fd_method_table_get+0xd4>)
   23e64:	bd38      	pop	{r3, r4, r5, pc}
   23e66:	4819      	ldr	r0, [pc, #100]	; (23ecc <bsd_platform_fd_method_table_get+0xd8>)
   23e68:	bd38      	pop	{r3, r4, r5, pc}
   23e6a:	2016      	movs	r0, #22
   23e6c:	f7fc fdbe 	bl	209ec <bsd_os_errno_set>
   23e70:	2000      	movs	r0, #0
   23e72:	bd38      	pop	{r3, r4, r5, pc}
   23e74:	f240 2303 	movw	r3, #515	; 0x203
   23e78:	429a      	cmp	r2, r3
   23e7a:	d0f4      	beq.n	23e66 <bsd_platform_fd_method_table_get+0x72>
   23e7c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   23e80:	d0c9      	beq.n	23e16 <bsd_platform_fd_method_table_get+0x22>
   23e82:	202b      	movs	r0, #43	; 0x2b
   23e84:	f7fc fdb2 	bl	209ec <bsd_os_errno_set>
   23e88:	2000      	movs	r0, #0
   23e8a:	bd38      	pop	{r3, r4, r5, pc}
   23e8c:	4810      	ldr	r0, [pc, #64]	; (23ed0 <bsd_platform_fd_method_table_get+0xdc>)
   23e8e:	bd38      	pop	{r3, r4, r5, pc}
   23e90:	6903      	ldr	r3, [r0, #16]
   23e92:	4810      	ldr	r0, [pc, #64]	; (23ed4 <bsd_platform_fd_method_table_get+0xe0>)
   23e94:	2b03      	cmp	r3, #3
   23e96:	bf18      	it	ne
   23e98:	2000      	movne	r0, #0
   23e9a:	bd38      	pop	{r3, r4, r5, pc}
   23e9c:	480e      	ldr	r0, [pc, #56]	; (23ed8 <bsd_platform_fd_method_table_get+0xe4>)
   23e9e:	bd38      	pop	{r3, r4, r5, pc}
   23ea0:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   23ea4:	d1ed      	bne.n	23e82 <bsd_platform_fd_method_table_get+0x8e>
   23ea6:	480d      	ldr	r0, [pc, #52]	; (23edc <bsd_platform_fd_method_table_get+0xe8>)
   23ea8:	bd38      	pop	{r3, r4, r5, pc}
   23eaa:	2009      	movs	r0, #9
   23eac:	f7fc fd9e 	bl	209ec <bsd_os_errno_set>
   23eb0:	4620      	mov	r0, r4
   23eb2:	bd38      	pop	{r3, r4, r5, pc}
   23eb4:	49765432 	.word	0x49765432
   23eb8:	789a0000 	.word	0x789a0000
   23ebc:	49765443 	.word	0x49765443
   23ec0:	00031278 	.word	0x00031278
   23ec4:	000311b0 	.word	0x000311b0
   23ec8:	000311d8 	.word	0x000311d8
   23ecc:	00031228 	.word	0x00031228
   23ed0:	00031250 	.word	0x00031250
   23ed4:	000312c8 	.word	0x000312c8
   23ed8:	000312a0 	.word	0x000312a0
   23edc:	00031200 	.word	0x00031200

00023ee0 <bsd_platform_getaddrinfo>:
   23ee0:	f003 bad6 	b.w	27490 <ip_interface_getaddrinfo>

00023ee4 <bsd_platform_freeaddrinfo>:
   23ee4:	f003 bbca 	b.w	2767c <ip_interface_freeaddrinfo>

00023ee8 <bsd_platform_poll>:
   23ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23eec:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   23ef0:	b083      	sub	sp, #12
   23ef2:	9200      	str	r2, [sp, #0]
   23ef4:	2800      	cmp	r0, #0
   23ef6:	d048      	beq.n	23f8a <bsd_platform_poll+0xa2>
   23ef8:	1e4b      	subs	r3, r1, #1
   23efa:	2b08      	cmp	r3, #8
   23efc:	d845      	bhi.n	23f8a <bsd_platform_poll+0xa2>
   23efe:	4680      	mov	r8, r0
   23f00:	4605      	mov	r5, r0
   23f02:	2400      	movs	r4, #0
   23f04:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   23f08:	88ab      	ldrh	r3, [r5, #4]
   23f0a:	6828      	ldr	r0, [r5, #0]
   23f0c:	f003 0303 	and.w	r3, r3, #3
   23f10:	a901      	add	r1, sp, #4
   23f12:	f043 061c 	orr.w	r6, r3, #28
   23f16:	f003 ff95 	bl	27e44 <interface_socket_event_get>
   23f1a:	9b01      	ldr	r3, [sp, #4]
   23f1c:	3508      	adds	r5, #8
   23f1e:	4033      	ands	r3, r6
   23f20:	f825 3c02 	strh.w	r3, [r5, #-2]
   23f24:	b103      	cbz	r3, 23f28 <bsd_platform_poll+0x40>
   23f26:	3401      	adds	r4, #1
   23f28:	42af      	cmp	r7, r5
   23f2a:	d1ed      	bne.n	23f08 <bsd_platform_poll+0x20>
   23f2c:	bb9c      	cbnz	r4, 23f96 <bsd_platform_poll+0xae>
   23f2e:	4669      	mov	r1, sp
   23f30:	4640      	mov	r0, r8
   23f32:	f7fc fcc7 	bl	208c4 <bsd_os_timedwait>
   23f36:	4607      	mov	r7, r0
   23f38:	b108      	cbz	r0, 23f3e <bsd_platform_poll+0x56>
   23f3a:	283c      	cmp	r0, #60	; 0x3c
   23f3c:	d11d      	bne.n	23f7a <bsd_platform_poll+0x92>
   23f3e:	46c1      	mov	r9, r8
   23f40:	2600      	movs	r6, #0
   23f42:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   23f46:	f8d9 0000 	ldr.w	r0, [r9]
   23f4a:	f003 0303 	and.w	r3, r3, #3
   23f4e:	a901      	add	r1, sp, #4
   23f50:	f043 041c 	orr.w	r4, r3, #28
   23f54:	f003 ff76 	bl	27e44 <interface_socket_event_get>
   23f58:	9b01      	ldr	r3, [sp, #4]
   23f5a:	f109 0908 	add.w	r9, r9, #8
   23f5e:	4023      	ands	r3, r4
   23f60:	f829 3c02 	strh.w	r3, [r9, #-2]
   23f64:	b103      	cbz	r3, 23f68 <bsd_platform_poll+0x80>
   23f66:	3601      	adds	r6, #1
   23f68:	454d      	cmp	r5, r9
   23f6a:	d1ea      	bne.n	23f42 <bsd_platform_poll+0x5a>
   23f6c:	b90e      	cbnz	r6, 23f72 <bsd_platform_poll+0x8a>
   23f6e:	2f00      	cmp	r7, #0
   23f70:	d0dd      	beq.n	23f2e <bsd_platform_poll+0x46>
   23f72:	4630      	mov	r0, r6
   23f74:	b003      	add	sp, #12
   23f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23f7a:	2023      	movs	r0, #35	; 0x23
   23f7c:	f7fc fd36 	bl	209ec <bsd_os_errno_set>
   23f80:	f04f 30ff 	mov.w	r0, #4294967295
   23f84:	b003      	add	sp, #12
   23f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23f8a:	2016      	movs	r0, #22
   23f8c:	f7fc fd2e 	bl	209ec <bsd_os_errno_set>
   23f90:	f04f 30ff 	mov.w	r0, #4294967295
   23f94:	e7ee      	b.n	23f74 <bsd_platform_poll+0x8c>
   23f96:	4620      	mov	r0, r4
   23f98:	e7ec      	b.n	23f74 <bsd_platform_poll+0x8c>
   23f9a:	bf00      	nop

00023f9c <bsd_platform_fcntl>:
   23f9c:	b508      	push	{r3, lr}
   23f9e:	4b06      	ldr	r3, [pc, #24]	; (23fb8 <bsd_platform_fcntl+0x1c>)
   23fa0:	4298      	cmp	r0, r3
   23fa2:	d003      	beq.n	23fac <bsd_platform_fcntl+0x10>
   23fa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23fa8:	f003 bfd6 	b.w	27f58 <interface_socket_fcntl>
   23fac:	202d      	movs	r0, #45	; 0x2d
   23fae:	f7fc fd1d 	bl	209ec <bsd_os_errno_set>
   23fb2:	f04f 30ff 	mov.w	r0, #4294967295
   23fb6:	bd08      	pop	{r3, pc}
   23fb8:	49765432 	.word	0x49765432

00023fbc <ipc_trace_init>:
   23fbc:	4b01      	ldr	r3, [pc, #4]	; (23fc4 <ipc_trace_init+0x8>)
   23fbe:	6018      	str	r0, [r3, #0]
   23fc0:	4770      	bx	lr
   23fc2:	bf00      	nop
   23fc4:	20020694 	.word	0x20020694

00023fc8 <bsd_os_trace_irq_handler>:
   23fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   23fca:	4b6c      	ldr	r3, [pc, #432]	; (2417c <bsd_os_trace_irq_handler+0x1b4>)
   23fcc:	b083      	sub	sp, #12
   23fce:	781b      	ldrb	r3, [r3, #0]
   23fd0:	2b00      	cmp	r3, #0
   23fd2:	f000 80ad 	beq.w	24130 <bsd_os_trace_irq_handler+0x168>
   23fd6:	4b6a      	ldr	r3, [pc, #424]	; (24180 <bsd_os_trace_irq_handler+0x1b8>)
   23fd8:	681c      	ldr	r4, [r3, #0]
   23fda:	68a2      	ldr	r2, [r4, #8]
   23fdc:	6863      	ldr	r3, [r4, #4]
   23fde:	429a      	cmp	r2, r3
   23fe0:	d02d      	beq.n	2403e <bsd_os_trace_irq_handler+0x76>
   23fe2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   23fe6:	f8ad 3000 	strh.w	r3, [sp]
   23fea:	7823      	ldrb	r3, [r4, #0]
   23fec:	466e      	mov	r6, sp
   23fee:	f88d 3004 	strb.w	r3, [sp, #4]
   23ff2:	6863      	ldr	r3, [r4, #4]
   23ff4:	2105      	movs	r1, #5
   23ff6:	429a      	cmp	r2, r3
   23ff8:	bf2a      	itet	cs
   23ffa:	6927      	ldrcs	r7, [r4, #16]
   23ffc:	1a9f      	subcc	r7, r3, r2
   23ffe:	1abf      	subcs	r7, r7, r2
   24000:	429a      	cmp	r2, r3
   24002:	bf94      	ite	ls
   24004:	2500      	movls	r5, #0
   24006:	68e5      	ldrhi	r5, [r4, #12]
   24008:	b2bf      	uxth	r7, r7
   2400a:	bf88      	it	hi
   2400c:	1b5b      	subhi	r3, r3, r5
   2400e:	4630      	mov	r0, r6
   24010:	bf88      	it	hi
   24012:	b29d      	uxthhi	r5, r3
   24014:	f8ad 7002 	strh.w	r7, [sp, #2]
   24018:	f00b f9dc 	bl	2f3d4 <bsd_os_trace_put>
   2401c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24020:	68a0      	ldr	r0, [r4, #8]
   24022:	f00b f9d7 	bl	2f3d4 <bsd_os_trace_put>
   24026:	68a3      	ldr	r3, [r4, #8]
   24028:	6922      	ldr	r2, [r4, #16]
   2402a:	441f      	add	r7, r3
   2402c:	4297      	cmp	r7, r2
   2402e:	bf08      	it	eq
   24030:	68e3      	ldreq	r3, [r4, #12]
   24032:	60a7      	str	r7, [r4, #8]
   24034:	bf08      	it	eq
   24036:	60a3      	streq	r3, [r4, #8]
   24038:	2d00      	cmp	r5, #0
   2403a:	f040 808d 	bne.w	24158 <bsd_os_trace_irq_handler+0x190>
   2403e:	4b51      	ldr	r3, [pc, #324]	; (24184 <bsd_os_trace_irq_handler+0x1bc>)
   24040:	681c      	ldr	r4, [r3, #0]
   24042:	68a2      	ldr	r2, [r4, #8]
   24044:	6863      	ldr	r3, [r4, #4]
   24046:	429a      	cmp	r2, r3
   24048:	d02c      	beq.n	240a4 <bsd_os_trace_irq_handler+0xdc>
   2404a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   2404e:	f8ad 3000 	strh.w	r3, [sp]
   24052:	7823      	ldrb	r3, [r4, #0]
   24054:	466e      	mov	r6, sp
   24056:	f88d 3004 	strb.w	r3, [sp, #4]
   2405a:	6863      	ldr	r3, [r4, #4]
   2405c:	2105      	movs	r1, #5
   2405e:	429a      	cmp	r2, r3
   24060:	bf2a      	itet	cs
   24062:	6927      	ldrcs	r7, [r4, #16]
   24064:	1a9f      	subcc	r7, r3, r2
   24066:	1abf      	subcs	r7, r7, r2
   24068:	429a      	cmp	r2, r3
   2406a:	bf94      	ite	ls
   2406c:	2500      	movls	r5, #0
   2406e:	68e5      	ldrhi	r5, [r4, #12]
   24070:	b2bf      	uxth	r7, r7
   24072:	bf88      	it	hi
   24074:	1b5b      	subhi	r3, r3, r5
   24076:	4630      	mov	r0, r6
   24078:	bf88      	it	hi
   2407a:	b29d      	uxthhi	r5, r3
   2407c:	f8ad 7002 	strh.w	r7, [sp, #2]
   24080:	f00b f9a8 	bl	2f3d4 <bsd_os_trace_put>
   24084:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24088:	68a0      	ldr	r0, [r4, #8]
   2408a:	f00b f9a3 	bl	2f3d4 <bsd_os_trace_put>
   2408e:	68a3      	ldr	r3, [r4, #8]
   24090:	6922      	ldr	r2, [r4, #16]
   24092:	441f      	add	r7, r3
   24094:	4297      	cmp	r7, r2
   24096:	bf08      	it	eq
   24098:	68e3      	ldreq	r3, [r4, #12]
   2409a:	60a7      	str	r7, [r4, #8]
   2409c:	bf08      	it	eq
   2409e:	60a3      	streq	r3, [r4, #8]
   240a0:	2d00      	cmp	r5, #0
   240a2:	d148      	bne.n	24136 <bsd_os_trace_irq_handler+0x16e>
   240a4:	4b38      	ldr	r3, [pc, #224]	; (24188 <bsd_os_trace_irq_handler+0x1c0>)
   240a6:	681c      	ldr	r4, [r3, #0]
   240a8:	68a2      	ldr	r2, [r4, #8]
   240aa:	6863      	ldr	r3, [r4, #4]
   240ac:	429a      	cmp	r2, r3
   240ae:	d02b      	beq.n	24108 <bsd_os_trace_irq_handler+0x140>
   240b0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   240b4:	f8ad 3000 	strh.w	r3, [sp]
   240b8:	7823      	ldrb	r3, [r4, #0]
   240ba:	466e      	mov	r6, sp
   240bc:	f88d 3004 	strb.w	r3, [sp, #4]
   240c0:	6863      	ldr	r3, [r4, #4]
   240c2:	2105      	movs	r1, #5
   240c4:	429a      	cmp	r2, r3
   240c6:	bf2a      	itet	cs
   240c8:	6927      	ldrcs	r7, [r4, #16]
   240ca:	1a9f      	subcc	r7, r3, r2
   240cc:	1abf      	subcs	r7, r7, r2
   240ce:	429a      	cmp	r2, r3
   240d0:	bf94      	ite	ls
   240d2:	2500      	movls	r5, #0
   240d4:	68e5      	ldrhi	r5, [r4, #12]
   240d6:	b2bf      	uxth	r7, r7
   240d8:	bf88      	it	hi
   240da:	1b5b      	subhi	r3, r3, r5
   240dc:	4630      	mov	r0, r6
   240de:	bf88      	it	hi
   240e0:	b29d      	uxthhi	r5, r3
   240e2:	f8ad 7002 	strh.w	r7, [sp, #2]
   240e6:	f00b f975 	bl	2f3d4 <bsd_os_trace_put>
   240ea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   240ee:	68a0      	ldr	r0, [r4, #8]
   240f0:	f00b f970 	bl	2f3d4 <bsd_os_trace_put>
   240f4:	68a3      	ldr	r3, [r4, #8]
   240f6:	6922      	ldr	r2, [r4, #16]
   240f8:	441f      	add	r7, r3
   240fa:	4297      	cmp	r7, r2
   240fc:	bf08      	it	eq
   240fe:	68e3      	ldreq	r3, [r4, #12]
   24100:	60a7      	str	r7, [r4, #8]
   24102:	bf08      	it	eq
   24104:	60a3      	streq	r3, [r4, #8]
   24106:	b90d      	cbnz	r5, 2410c <bsd_os_trace_irq_handler+0x144>
   24108:	b003      	add	sp, #12
   2410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2410c:	4630      	mov	r0, r6
   2410e:	2105      	movs	r1, #5
   24110:	f8ad 5002 	strh.w	r5, [sp, #2]
   24114:	f00b f95e 	bl	2f3d4 <bsd_os_trace_put>
   24118:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2411c:	68e0      	ldr	r0, [r4, #12]
   2411e:	f00b f959 	bl	2f3d4 <bsd_os_trace_put>
   24122:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   24126:	68e3      	ldr	r3, [r4, #12]
   24128:	4413      	add	r3, r2
   2412a:	60a3      	str	r3, [r4, #8]
   2412c:	b003      	add	sp, #12
   2412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24130:	f7fc fd6c 	bl	20c0c <bsd_os_trace_irq_clear>
   24134:	e74f      	b.n	23fd6 <bsd_os_trace_irq_handler+0xe>
   24136:	2105      	movs	r1, #5
   24138:	4630      	mov	r0, r6
   2413a:	f8ad 5002 	strh.w	r5, [sp, #2]
   2413e:	f00b f949 	bl	2f3d4 <bsd_os_trace_put>
   24142:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24146:	68e0      	ldr	r0, [r4, #12]
   24148:	f00b f944 	bl	2f3d4 <bsd_os_trace_put>
   2414c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   24150:	68e3      	ldr	r3, [r4, #12]
   24152:	4413      	add	r3, r2
   24154:	60a3      	str	r3, [r4, #8]
   24156:	e7a5      	b.n	240a4 <bsd_os_trace_irq_handler+0xdc>
   24158:	2105      	movs	r1, #5
   2415a:	4630      	mov	r0, r6
   2415c:	f8ad 5002 	strh.w	r5, [sp, #2]
   24160:	f00b f938 	bl	2f3d4 <bsd_os_trace_put>
   24164:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24168:	68e0      	ldr	r0, [r4, #12]
   2416a:	f00b f933 	bl	2f3d4 <bsd_os_trace_put>
   2416e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   24172:	68e3      	ldr	r3, [r4, #12]
   24174:	4413      	add	r3, r2
   24176:	60a3      	str	r3, [r4, #8]
   24178:	e761      	b.n	2403e <bsd_os_trace_irq_handler+0x76>
   2417a:	bf00      	nop
   2417c:	2002293b 	.word	0x2002293b
   24180:	20020690 	.word	0x20020690
   24184:	20020688 	.word	0x20020688
   24188:	2002068c 	.word	0x2002068c

0002418c <ipc_trace_handle>:
   2418c:	2200      	movs	r2, #0
   2418e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24192:	4bb0      	ldr	r3, [pc, #704]	; (24454 <ipc_trace_handle+0x2c8>)
   24194:	b083      	sub	sp, #12
   24196:	681b      	ldr	r3, [r3, #0]
   24198:	6919      	ldr	r1, [r3, #16]
   2419a:	695c      	ldr	r4, [r3, #20]
   2419c:	7c18      	ldrb	r0, [r3, #16]
   2419e:	741a      	strb	r2, [r3, #16]
   241a0:	7c58      	ldrb	r0, [r3, #17]
   241a2:	745a      	strb	r2, [r3, #17]
   241a4:	7c98      	ldrb	r0, [r3, #18]
   241a6:	749a      	strb	r2, [r3, #18]
   241a8:	7cd8      	ldrb	r0, [r3, #19]
   241aa:	74da      	strb	r2, [r3, #19]
   241ac:	7d18      	ldrb	r0, [r3, #20]
   241ae:	751a      	strb	r2, [r3, #20]
   241b0:	7d58      	ldrb	r0, [r3, #21]
   241b2:	755a      	strb	r2, [r3, #21]
   241b4:	7d98      	ldrb	r0, [r3, #22]
   241b6:	759a      	strb	r2, [r3, #22]
   241b8:	7dd8      	ldrb	r0, [r3, #23]
   241ba:	75da      	strb	r2, [r3, #23]
   241bc:	b1b9      	cbz	r1, 241ee <ipc_trace_handle+0x62>
   241be:	3901      	subs	r1, #1
   241c0:	2903      	cmp	r1, #3
   241c2:	d814      	bhi.n	241ee <ipc_trace_handle+0x62>
   241c4:	e8df f011 	tbh	[pc, r1, lsl #1]
   241c8:	010300d6 	.word	0x010300d6
   241cc:	00160004 	.word	0x00160004
   241d0:	2501      	movs	r5, #1
   241d2:	2003      	movs	r0, #3
   241d4:	2200      	movs	r2, #0
   241d6:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   241da:	4c9f      	ldr	r4, [pc, #636]	; (24458 <ipc_trace_handle+0x2cc>)
   241dc:	7025      	strb	r5, [r4, #0]
   241de:	7a1c      	ldrb	r4, [r3, #8]
   241e0:	7218      	strb	r0, [r3, #8]
   241e2:	7a58      	ldrb	r0, [r3, #9]
   241e4:	725a      	strb	r2, [r3, #9]
   241e6:	7a98      	ldrb	r0, [r3, #10]
   241e8:	729a      	strb	r2, [r3, #10]
   241ea:	7ada      	ldrb	r2, [r3, #11]
   241ec:	72d9      	strb	r1, [r3, #11]
   241ee:	b003      	add	sp, #12
   241f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   241f4:	2104      	movs	r1, #4
   241f6:	2200      	movs	r2, #0
   241f8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   241fc:	7a1c      	ldrb	r4, [r3, #8]
   241fe:	7219      	strb	r1, [r3, #8]
   24200:	7a59      	ldrb	r1, [r3, #9]
   24202:	725a      	strb	r2, [r3, #9]
   24204:	4994      	ldr	r1, [pc, #592]	; (24458 <ipc_trace_handle+0x2cc>)
   24206:	7a9c      	ldrb	r4, [r3, #10]
   24208:	729a      	strb	r2, [r3, #10]
   2420a:	7adc      	ldrb	r4, [r3, #11]
   2420c:	72d8      	strb	r0, [r3, #11]
   2420e:	700a      	strb	r2, [r1, #0]
   24210:	780b      	ldrb	r3, [r1, #0]
   24212:	2b00      	cmp	r3, #0
   24214:	f000 8117 	beq.w	24446 <ipc_trace_handle+0x2ba>
   24218:	4b90      	ldr	r3, [pc, #576]	; (2445c <ipc_trace_handle+0x2d0>)
   2421a:	681c      	ldr	r4, [r3, #0]
   2421c:	68a2      	ldr	r2, [r4, #8]
   2421e:	6863      	ldr	r3, [r4, #4]
   24220:	429a      	cmp	r2, r3
   24222:	d02d      	beq.n	24280 <ipc_trace_handle+0xf4>
   24224:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   24228:	f8ad 3000 	strh.w	r3, [sp]
   2422c:	7823      	ldrb	r3, [r4, #0]
   2422e:	466e      	mov	r6, sp
   24230:	f88d 3004 	strb.w	r3, [sp, #4]
   24234:	6863      	ldr	r3, [r4, #4]
   24236:	2105      	movs	r1, #5
   24238:	429a      	cmp	r2, r3
   2423a:	bf2a      	itet	cs
   2423c:	6927      	ldrcs	r7, [r4, #16]
   2423e:	1a9f      	subcc	r7, r3, r2
   24240:	1abf      	subcs	r7, r7, r2
   24242:	429a      	cmp	r2, r3
   24244:	bf94      	ite	ls
   24246:	2500      	movls	r5, #0
   24248:	68e5      	ldrhi	r5, [r4, #12]
   2424a:	b2bf      	uxth	r7, r7
   2424c:	bf88      	it	hi
   2424e:	1b5b      	subhi	r3, r3, r5
   24250:	4630      	mov	r0, r6
   24252:	bf88      	it	hi
   24254:	b29d      	uxthhi	r5, r3
   24256:	f8ad 7002 	strh.w	r7, [sp, #2]
   2425a:	f00b f8bb 	bl	2f3d4 <bsd_os_trace_put>
   2425e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24262:	68a0      	ldr	r0, [r4, #8]
   24264:	f00b f8b6 	bl	2f3d4 <bsd_os_trace_put>
   24268:	68a3      	ldr	r3, [r4, #8]
   2426a:	6922      	ldr	r2, [r4, #16]
   2426c:	441f      	add	r7, r3
   2426e:	4297      	cmp	r7, r2
   24270:	bf08      	it	eq
   24272:	68e3      	ldreq	r3, [r4, #12]
   24274:	60a7      	str	r7, [r4, #8]
   24276:	bf08      	it	eq
   24278:	60a3      	streq	r3, [r4, #8]
   2427a:	2d00      	cmp	r5, #0
   2427c:	f040 80d2 	bne.w	24424 <ipc_trace_handle+0x298>
   24280:	4b77      	ldr	r3, [pc, #476]	; (24460 <ipc_trace_handle+0x2d4>)
   24282:	681c      	ldr	r4, [r3, #0]
   24284:	68a2      	ldr	r2, [r4, #8]
   24286:	6863      	ldr	r3, [r4, #4]
   24288:	429a      	cmp	r2, r3
   2428a:	d02d      	beq.n	242e8 <ipc_trace_handle+0x15c>
   2428c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   24290:	f8ad 3000 	strh.w	r3, [sp]
   24294:	7823      	ldrb	r3, [r4, #0]
   24296:	466e      	mov	r6, sp
   24298:	f88d 3004 	strb.w	r3, [sp, #4]
   2429c:	6863      	ldr	r3, [r4, #4]
   2429e:	2105      	movs	r1, #5
   242a0:	429a      	cmp	r2, r3
   242a2:	bf2a      	itet	cs
   242a4:	6927      	ldrcs	r7, [r4, #16]
   242a6:	1a9f      	subcc	r7, r3, r2
   242a8:	1abf      	subcs	r7, r7, r2
   242aa:	429a      	cmp	r2, r3
   242ac:	bf94      	ite	ls
   242ae:	2500      	movls	r5, #0
   242b0:	68e5      	ldrhi	r5, [r4, #12]
   242b2:	b2bf      	uxth	r7, r7
   242b4:	bf88      	it	hi
   242b6:	1b5b      	subhi	r3, r3, r5
   242b8:	4630      	mov	r0, r6
   242ba:	bf88      	it	hi
   242bc:	b29d      	uxthhi	r5, r3
   242be:	f8ad 7002 	strh.w	r7, [sp, #2]
   242c2:	f00b f887 	bl	2f3d4 <bsd_os_trace_put>
   242c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   242ca:	68a0      	ldr	r0, [r4, #8]
   242cc:	f00b f882 	bl	2f3d4 <bsd_os_trace_put>
   242d0:	68a3      	ldr	r3, [r4, #8]
   242d2:	6922      	ldr	r2, [r4, #16]
   242d4:	441f      	add	r7, r3
   242d6:	4297      	cmp	r7, r2
   242d8:	bf08      	it	eq
   242da:	68e3      	ldreq	r3, [r4, #12]
   242dc:	60a7      	str	r7, [r4, #8]
   242de:	bf08      	it	eq
   242e0:	60a3      	streq	r3, [r4, #8]
   242e2:	2d00      	cmp	r5, #0
   242e4:	f040 808d 	bne.w	24402 <ipc_trace_handle+0x276>
   242e8:	4b5e      	ldr	r3, [pc, #376]	; (24464 <ipc_trace_handle+0x2d8>)
   242ea:	681c      	ldr	r4, [r3, #0]
   242ec:	68a2      	ldr	r2, [r4, #8]
   242ee:	6863      	ldr	r3, [r4, #4]
   242f0:	429a      	cmp	r2, r3
   242f2:	f43f af7c 	beq.w	241ee <ipc_trace_handle+0x62>
   242f6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   242fa:	f8ad 3000 	strh.w	r3, [sp]
   242fe:	7823      	ldrb	r3, [r4, #0]
   24300:	466e      	mov	r6, sp
   24302:	f88d 3004 	strb.w	r3, [sp, #4]
   24306:	6863      	ldr	r3, [r4, #4]
   24308:	2105      	movs	r1, #5
   2430a:	429a      	cmp	r2, r3
   2430c:	bf2a      	itet	cs
   2430e:	6927      	ldrcs	r7, [r4, #16]
   24310:	1a9f      	subcc	r7, r3, r2
   24312:	1abf      	subcs	r7, r7, r2
   24314:	429a      	cmp	r2, r3
   24316:	bf94      	ite	ls
   24318:	2500      	movls	r5, #0
   2431a:	68e5      	ldrhi	r5, [r4, #12]
   2431c:	b2bf      	uxth	r7, r7
   2431e:	bf88      	it	hi
   24320:	1b5b      	subhi	r3, r3, r5
   24322:	4630      	mov	r0, r6
   24324:	bf88      	it	hi
   24326:	b29d      	uxthhi	r5, r3
   24328:	f8ad 7002 	strh.w	r7, [sp, #2]
   2432c:	f00b f852 	bl	2f3d4 <bsd_os_trace_put>
   24330:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24334:	68a0      	ldr	r0, [r4, #8]
   24336:	f00b f84d 	bl	2f3d4 <bsd_os_trace_put>
   2433a:	68a3      	ldr	r3, [r4, #8]
   2433c:	6922      	ldr	r2, [r4, #16]
   2433e:	441f      	add	r7, r3
   24340:	4297      	cmp	r7, r2
   24342:	bf08      	it	eq
   24344:	68e3      	ldreq	r3, [r4, #12]
   24346:	60a7      	str	r7, [r4, #8]
   24348:	bf08      	it	eq
   2434a:	60a3      	streq	r3, [r4, #8]
   2434c:	2d00      	cmp	r5, #0
   2434e:	f43f af4e 	beq.w	241ee <ipc_trace_handle+0x62>
   24352:	2105      	movs	r1, #5
   24354:	4630      	mov	r0, r6
   24356:	f8ad 5002 	strh.w	r5, [sp, #2]
   2435a:	f00b f83b 	bl	2f3d4 <bsd_os_trace_put>
   2435e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24362:	68e0      	ldr	r0, [r4, #12]
   24364:	f00b f836 	bl	2f3d4 <bsd_os_trace_put>
   24368:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2436c:	68e3      	ldr	r3, [r4, #12]
   2436e:	4413      	add	r3, r2
   24370:	60a3      	str	r3, [r4, #8]
   24372:	e73c      	b.n	241ee <ipc_trace_handle+0x62>
   24374:	4a38      	ldr	r2, [pc, #224]	; (24458 <ipc_trace_handle+0x2cc>)
   24376:	7811      	ldrb	r1, [r2, #0]
   24378:	b109      	cbz	r1, 2437e <ipc_trace_handle+0x1f2>
   2437a:	2100      	movs	r1, #0
   2437c:	7011      	strb	r1, [r2, #0]
   2437e:	68a5      	ldr	r5, [r4, #8]
   24380:	2d00      	cmp	r5, #0
   24382:	d039      	beq.n	243f8 <ipc_trace_handle+0x26c>
   24384:	f04f 0c00 	mov.w	ip, #0
   24388:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 24460 <ipc_trace_handle+0x2d4>
   2438c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 2445c <ipc_trace_handle+0x2d0>
   24390:	4934      	ldr	r1, [pc, #208]	; (24464 <ipc_trace_handle+0x2d8>)
   24392:	46e1      	mov	r9, ip
   24394:	4666      	mov	r6, ip
   24396:	4662      	mov	r2, ip
   24398:	f8d1 e000 	ldr.w	lr, [r1]
   2439c:	f8da 8000 	ldr.w	r8, [sl]
   243a0:	f8db 7000 	ldr.w	r7, [fp]
   243a4:	e008      	b.n	243b8 <ipc_trace_handle+0x22c>
   243a6:	2963      	cmp	r1, #99	; 0x63
   243a8:	d016      	beq.n	243d8 <ipc_trace_handle+0x24c>
   243aa:	2961      	cmp	r1, #97	; 0x61
   243ac:	bf04      	itt	eq
   243ae:	4607      	moveq	r7, r0
   243b0:	2601      	moveq	r6, #1
   243b2:	3201      	adds	r2, #1
   243b4:	42aa      	cmp	r2, r5
   243b6:	d013      	beq.n	243e0 <ipc_trace_handle+0x254>
   243b8:	1c91      	adds	r1, r2, #2
   243ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   243be:	6848      	ldr	r0, [r1, #4]
   243c0:	7801      	ldrb	r1, [r0, #0]
   243c2:	2962      	cmp	r1, #98	; 0x62
   243c4:	d1ef      	bne.n	243a6 <ipc_trace_handle+0x21a>
   243c6:	4680      	mov	r8, r0
   243c8:	f04f 0901 	mov.w	r9, #1
   243cc:	e7f1      	b.n	243b2 <ipc_trace_handle+0x226>
   243ce:	f7fc fc15 	bl	20bfc <bsd_os_trace_irq_set>
   243d2:	b003      	add	sp, #12
   243d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243d8:	4686      	mov	lr, r0
   243da:	f04f 0c01 	mov.w	ip, #1
   243de:	e7e8      	b.n	243b2 <ipc_trace_handle+0x226>
   243e0:	bba6      	cbnz	r6, 2444c <ipc_trace_handle+0x2c0>
   243e2:	f1b9 0f00 	cmp.w	r9, #0
   243e6:	d001      	beq.n	243ec <ipc_trace_handle+0x260>
   243e8:	f8ca 8000 	str.w	r8, [sl]
   243ec:	f1bc 0f00 	cmp.w	ip, #0
   243f0:	d002      	beq.n	243f8 <ipc_trace_handle+0x26c>
   243f2:	4a1c      	ldr	r2, [pc, #112]	; (24464 <ipc_trace_handle+0x2d8>)
   243f4:	f8c2 e000 	str.w	lr, [r2]
   243f8:	2001      	movs	r0, #1
   243fa:	2200      	movs	r2, #0
   243fc:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   24400:	e6ed      	b.n	241de <ipc_trace_handle+0x52>
   24402:	2105      	movs	r1, #5
   24404:	4630      	mov	r0, r6
   24406:	f8ad 5002 	strh.w	r5, [sp, #2]
   2440a:	f00a ffe3 	bl	2f3d4 <bsd_os_trace_put>
   2440e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24412:	68e0      	ldr	r0, [r4, #12]
   24414:	f00a ffde 	bl	2f3d4 <bsd_os_trace_put>
   24418:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2441c:	68e3      	ldr	r3, [r4, #12]
   2441e:	4413      	add	r3, r2
   24420:	60a3      	str	r3, [r4, #8]
   24422:	e761      	b.n	242e8 <ipc_trace_handle+0x15c>
   24424:	2105      	movs	r1, #5
   24426:	4630      	mov	r0, r6
   24428:	f8ad 5002 	strh.w	r5, [sp, #2]
   2442c:	f00a ffd2 	bl	2f3d4 <bsd_os_trace_put>
   24430:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   24434:	68e0      	ldr	r0, [r4, #12]
   24436:	f00a ffcd 	bl	2f3d4 <bsd_os_trace_put>
   2443a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2443e:	68e3      	ldr	r3, [r4, #12]
   24440:	4413      	add	r3, r2
   24442:	60a3      	str	r3, [r4, #8]
   24444:	e71c      	b.n	24280 <ipc_trace_handle+0xf4>
   24446:	f7fc fbe1 	bl	20c0c <bsd_os_trace_irq_clear>
   2444a:	e6e5      	b.n	24218 <ipc_trace_handle+0x8c>
   2444c:	f8cb 7000 	str.w	r7, [fp]
   24450:	e7c7      	b.n	243e2 <ipc_trace_handle+0x256>
   24452:	bf00      	nop
   24454:	20020694 	.word	0x20020694
   24458:	2002293b 	.word	0x2002293b
   2445c:	20020690 	.word	0x20020690
   24460:	20020688 	.word	0x20020688
   24464:	2002068c 	.word	0x2002068c

00024468 <rpc_trace_coredump_in_progress>:
   24468:	4b01      	ldr	r3, [pc, #4]	; (24470 <rpc_trace_coredump_in_progress+0x8>)
   2446a:	7818      	ldrb	r0, [r3, #0]
   2446c:	4770      	bx	lr
   2446e:	bf00      	nop
   24470:	2002293b 	.word	0x2002293b

00024474 <transport_reset>:
   24474:	2000      	movs	r0, #0
   24476:	4770      	bx	lr

00024478 <transport_data_free>:
   24478:	4b0b      	ldr	r3, [pc, #44]	; (244a8 <transport_data_free+0x30>)
   2447a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2447e:	4413      	add	r3, r2
   24480:	4298      	cmp	r0, r3
   24482:	d20d      	bcs.n	244a0 <transport_data_free+0x28>
   24484:	4282      	cmp	r2, r0
   24486:	d80b      	bhi.n	244a0 <transport_data_free+0x28>
   24488:	b510      	push	{r4, lr}
   2448a:	4604      	mov	r4, r0
   2448c:	f000 fd5a 	bl	24f44 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   24490:	b140      	cbz	r0, 244a4 <transport_data_free+0x2c>
   24492:	4a06      	ldr	r2, [pc, #24]	; (244ac <transport_data_free+0x34>)
   24494:	6084      	str	r4, [r0, #8]
   24496:	6002      	str	r2, [r0, #0]
   24498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2449c:	f000 bc9a 	b.w	24dd4 <rpc_transport_ipc_tx_send>
   244a0:	f7fe bbc4 	b.w	22c2c <nrf_shared_free>
   244a4:	bd10      	pop	{r4, pc}
   244a6:	bf00      	nop
   244a8:	20020698 	.word	0x20020698
   244ac:	00020001 	.word	0x00020001

000244b0 <rpc_transport_ipc_init>:
   244b0:	2800      	cmp	r0, #0
   244b2:	d02b      	beq.n	2450c <rpc_transport_ipc_init+0x5c>
   244b4:	b530      	push	{r4, r5, lr}
   244b6:	b089      	sub	sp, #36	; 0x24
   244b8:	aa01      	add	r2, sp, #4
   244ba:	4669      	mov	r1, sp
   244bc:	4604      	mov	r4, r0
   244be:	f000 fb9f 	bl	24c00 <rpc_transport_ipc_tx_init>
   244c2:	4603      	mov	r3, r0
   244c4:	b140      	cbz	r0, 244d8 <rpc_transport_ipc_init+0x28>
   244c6:	4a13      	ldr	r2, [pc, #76]	; (24514 <rpc_transport_ipc_init+0x64>)
   244c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   244cc:	c803      	ldmia	r0, {r0, r1}
   244ce:	e882 0003 	stmia.w	r2, {r0, r1}
   244d2:	4618      	mov	r0, r3
   244d4:	b009      	add	sp, #36	; 0x24
   244d6:	bd30      	pop	{r4, r5, pc}
   244d8:	e9dd 1200 	ldrd	r1, r2, [sp]
   244dc:	4620      	mov	r0, r4
   244de:	f000 f84b 	bl	24578 <rpc_transport_ipc_rx_init>
   244e2:	4603      	mov	r3, r0
   244e4:	2800      	cmp	r0, #0
   244e6:	d1ee      	bne.n	244c6 <rpc_transport_ipc_init+0x16>
   244e8:	4b0b      	ldr	r3, [pc, #44]	; (24518 <rpc_transport_ipc_init+0x68>)
   244ea:	490c      	ldr	r1, [pc, #48]	; (2451c <rpc_transport_ipc_init+0x6c>)
   244ec:	480c      	ldr	r0, [pc, #48]	; (24520 <rpc_transport_ipc_init+0x70>)
   244ee:	4a0d      	ldr	r2, [pc, #52]	; (24524 <rpc_transport_ipc_init+0x74>)
   244f0:	9303      	str	r3, [sp, #12]
   244f2:	4d0d      	ldr	r5, [pc, #52]	; (24528 <rpc_transport_ipc_init+0x78>)
   244f4:	4b0d      	ldr	r3, [pc, #52]	; (2452c <rpc_transport_ipc_init+0x7c>)
   244f6:	9104      	str	r1, [sp, #16]
   244f8:	9005      	str	r0, [sp, #20]
   244fa:	490d      	ldr	r1, [pc, #52]	; (24530 <rpc_transport_ipc_init+0x80>)
   244fc:	a802      	add	r0, sp, #8
   244fe:	9307      	str	r3, [sp, #28]
   24500:	9506      	str	r5, [sp, #24]
   24502:	9202      	str	r2, [sp, #8]
   24504:	f003 ff44 	bl	28390 <rpc_transport_register>
   24508:	4603      	mov	r3, r0
   2450a:	e7dc      	b.n	244c6 <rpc_transport_ipc_init+0x16>
   2450c:	230e      	movs	r3, #14
   2450e:	4618      	mov	r0, r3
   24510:	4770      	bx	lr
   24512:	bf00      	nop
   24514:	20020698 	.word	0x20020698
   24518:	00024ed5 	.word	0x00024ed5
   2451c:	00024fa5 	.word	0x00024fa5
   24520:	00024b95 	.word	0x00024b95
   24524:	00024dd5 	.word	0x00024dd5
   24528:	00024479 	.word	0x00024479
   2452c:	00024475 	.word	0x00024475
   24530:	200206a0 	.word	0x200206a0

00024534 <rpc_transport_rx_handle>:
   24534:	b160      	cbz	r0, 24550 <rpc_transport_rx_handle+0x1c>
   24536:	b508      	push	{r3, lr}
   24538:	6843      	ldr	r3, [r0, #4]
   2453a:	b2db      	uxtb	r3, r3
   2453c:	2b02      	cmp	r3, #2
   2453e:	d00e      	beq.n	2455e <rpc_transport_rx_handle+0x2a>
   24540:	6803      	ldr	r3, [r0, #0]
   24542:	0c1b      	lsrs	r3, r3, #16
   24544:	2b02      	cmp	r3, #2
   24546:	d005      	beq.n	24554 <rpc_transport_rx_handle+0x20>
   24548:	2b04      	cmp	r3, #4
   2454a:	d00e      	beq.n	2456a <rpc_transport_rx_handle+0x36>
   2454c:	2000      	movs	r0, #0
   2454e:	bd08      	pop	{r3, pc}
   24550:	2000      	movs	r0, #0
   24552:	4770      	bx	lr
   24554:	6880      	ldr	r0, [r0, #8]
   24556:	f7fe fb69 	bl	22c2c <nrf_shared_free>
   2455a:	2000      	movs	r0, #0
   2455c:	bd08      	pop	{r3, pc}
   2455e:	4601      	mov	r1, r0
   24560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24564:	4803      	ldr	r0, [pc, #12]	; (24574 <rpc_transport_rx_handle+0x40>)
   24566:	f003 be05 	b.w	28174 <rpc_transport_input>
   2456a:	4802      	ldr	r0, [pc, #8]	; (24574 <rpc_transport_rx_handle+0x40>)
   2456c:	f003 ff70 	bl	28450 <rpc_transport_unregister>
   24570:	2000      	movs	r0, #0
   24572:	bd08      	pop	{r3, pc}
   24574:	200206a0 	.word	0x200206a0

00024578 <rpc_transport_ipc_rx_init>:
   24578:	2800      	cmp	r0, #0
   2457a:	f000 80ff 	beq.w	2477c <rpc_transport_ipc_rx_init+0x204>
   2457e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24582:	6805      	ldr	r5, [r0, #0]
   24584:	b095      	sub	sp, #84	; 0x54
   24586:	2d00      	cmp	r5, #0
   24588:	f000 80ee 	beq.w	24768 <rpc_transport_ipc_rx_init+0x1f0>
   2458c:	6883      	ldr	r3, [r0, #8]
   2458e:	2b00      	cmp	r3, #0
   24590:	f000 80ea 	beq.w	24768 <rpc_transport_ipc_rx_init+0x1f0>
   24594:	6907      	ldr	r7, [r0, #16]
   24596:	2f00      	cmp	r7, #0
   24598:	f000 80e6 	beq.w	24768 <rpc_transport_ipc_rx_init+0x1f0>
   2459c:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2459e:	2c00      	cmp	r4, #0
   245a0:	f000 80e2 	beq.w	24768 <rpc_transport_ipc_rx_init+0x1f0>
   245a4:	6844      	ldr	r4, [r0, #4]
   245a6:	2c1b      	cmp	r4, #27
   245a8:	f240 80e3 	bls.w	24772 <rpc_transport_ipc_rx_init+0x1fa>
   245ac:	68c4      	ldr	r4, [r0, #12]
   245ae:	2c0b      	cmp	r4, #11
   245b0:	f240 80df 	bls.w	24772 <rpc_transport_ipc_rx_init+0x1fa>
   245b4:	f8d0 e014 	ldr.w	lr, [r0, #20]
   245b8:	f1be 0f17 	cmp.w	lr, #23
   245bc:	f240 80d9 	bls.w	24772 <rpc_transport_ipc_rx_init+0x1fa>
   245c0:	2600      	movs	r6, #0
   245c2:	4604      	mov	r4, r0
   245c4:	486f      	ldr	r0, [pc, #444]	; (24784 <rpc_transport_ipc_rx_init+0x20c>)
   245c6:	e9cd 1200 	strd	r1, r2, [sp]
   245ca:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 247a4 <rpc_transport_ipc_rx_init+0x22c>
   245ce:	496e      	ldr	r1, [pc, #440]	; (24788 <rpc_transport_ipc_rx_init+0x210>)
   245d0:	8006      	strh	r6, [r0, #0]
   245d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   245d4:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 247a8 <rpc_transport_ipc_rx_init+0x230>
   245d8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 247ac <rpc_transport_ipc_rx_init+0x234>
   245dc:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 247b0 <rpc_transport_ipc_rx_init+0x238>
   245e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 247b4 <rpc_transport_ipc_rx_init+0x23c>
   245e4:	4672      	mov	r2, lr
   245e6:	600e      	str	r6, [r1, #0]
   245e8:	f8ca 0000 	str.w	r0, [sl]
   245ec:	4631      	mov	r1, r6
   245ee:	4638      	mov	r0, r7
   245f0:	f8cc 6000 	str.w	r6, [ip]
   245f4:	f8cb 3000 	str.w	r3, [fp]
   245f8:	f8c8 6000 	str.w	r6, [r8]
   245fc:	f8c9 6000 	str.w	r6, [r9]
   24600:	f00b fc16 	bl	2fe30 <memset>
   24604:	69e3      	ldr	r3, [r4, #28]
   24606:	4638      	mov	r0, r7
   24608:	603b      	str	r3, [r7, #0]
   2460a:	69a3      	ldr	r3, [r4, #24]
   2460c:	607b      	str	r3, [r7, #4]
   2460e:	f7ff fcd5 	bl	23fbc <ipc_trace_init>
   24612:	2201      	movs	r2, #1
   24614:	f04f 0c04 	mov.w	ip, #4
   24618:	4b5c      	ldr	r3, [pc, #368]	; (2478c <rpc_transport_ipc_rx_init+0x214>)
   2461a:	495d      	ldr	r1, [pc, #372]	; (24790 <rpc_transport_ipc_rx_init+0x218>)
   2461c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   24620:	6809      	ldr	r1, [r1, #0]
   24622:	2080      	movs	r0, #128	; 0x80
   24624:	9104      	str	r1, [sp, #16]
   24626:	495b      	ldr	r1, [pc, #364]	; (24794 <rpc_transport_ipc_rx_init+0x21c>)
   24628:	f8dd e010 	ldr.w	lr, [sp, #16]
   2462c:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   24630:	6809      	ldr	r1, [r1, #0]
   24632:	702e      	strb	r6, [r5, #0]
   24634:	9103      	str	r1, [sp, #12]
   24636:	706e      	strb	r6, [r5, #1]
   24638:	70ee      	strb	r6, [r5, #3]
   2463a:	70aa      	strb	r2, [r5, #2]
   2463c:	9903      	ldr	r1, [sp, #12]
   2463e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   24640:	f8db e000 	ldr.w	lr, [fp]
   24644:	6069      	str	r1, [r5, #4]
   24646:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   24648:	9c01      	ldr	r4, [sp, #4]
   2464a:	60a9      	str	r1, [r5, #8]
   2464c:	60ec      	str	r4, [r5, #12]
   2464e:	9c00      	ldr	r4, [sp, #0]
   24650:	4951      	ldr	r1, [pc, #324]	; (24798 <rpc_transport_ipc_rx_init+0x220>)
   24652:	61af      	str	r7, [r5, #24]
   24654:	f8c5 e014 	str.w	lr, [r5, #20]
   24658:	612c      	str	r4, [r5, #16]
   2465a:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   2465e:	680c      	ldr	r4, [r1, #0]
   24660:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   24664:	9405      	str	r4, [sp, #20]
   24666:	9c05      	ldr	r4, [sp, #20]
   24668:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   2466c:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   24670:	f44f 6780 	mov.w	r7, #1024	; 0x400
   24674:	9406      	str	r4, [sp, #24]
   24676:	9c06      	ldr	r4, [sp, #24]
   24678:	2410      	movs	r4, #16
   2467a:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   2467e:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   24682:	4d46      	ldr	r5, [pc, #280]	; (2479c <rpc_transport_ipc_rx_init+0x224>)
   24684:	9407      	str	r4, [sp, #28]
   24686:	9c07      	ldr	r4, [sp, #28]
   24688:	2440      	movs	r4, #64	; 0x40
   2468a:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   2468e:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   24692:	9408      	str	r4, [sp, #32]
   24694:	9c08      	ldr	r4, [sp, #32]
   24696:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   2469a:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   2469e:	9009      	str	r0, [sp, #36]	; 0x24
   246a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   246a2:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   246a6:	6808      	ldr	r0, [r1, #0]
   246a8:	900a      	str	r0, [sp, #40]	; 0x28
   246aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   246ac:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   246b0:	6888      	ldr	r0, [r1, #8]
   246b2:	900b      	str	r0, [sp, #44]	; 0x2c
   246b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   246b6:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   246ba:	6908      	ldr	r0, [r1, #16]
   246bc:	900c      	str	r0, [sp, #48]	; 0x30
   246be:	980c      	ldr	r0, [sp, #48]	; 0x30
   246c0:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   246c4:	6988      	ldr	r0, [r1, #24]
   246c6:	900d      	str	r0, [sp, #52]	; 0x34
   246c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   246ca:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   246ce:	69c8      	ldr	r0, [r1, #28]
   246d0:	f501 7101 	add.w	r1, r1, #516	; 0x204
   246d4:	900e      	str	r0, [sp, #56]	; 0x38
   246d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   246d8:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   246dc:	4310      	orrs	r0, r2
   246de:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   246e2:	680c      	ldr	r4, [r1, #0]
   246e4:	482e      	ldr	r0, [pc, #184]	; (247a0 <rpc_transport_ipc_rx_init+0x228>)
   246e6:	940f      	str	r4, [sp, #60]	; 0x3c
   246e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   246ea:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   246ee:	ea44 040c 	orr.w	r4, r4, ip
   246f2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   246f6:	680c      	ldr	r4, [r1, #0]
   246f8:	9410      	str	r4, [sp, #64]	; 0x40
   246fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
   246fc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   24700:	f044 0410 	orr.w	r4, r4, #16
   24704:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   24708:	680c      	ldr	r4, [r1, #0]
   2470a:	9411      	str	r4, [sp, #68]	; 0x44
   2470c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   2470e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   24712:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   24716:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   2471a:	680c      	ldr	r4, [r1, #0]
   2471c:	9412      	str	r4, [sp, #72]	; 0x48
   2471e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   24720:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   24724:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   24728:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   2472c:	f8da 3000 	ldr.w	r3, [sl]
   24730:	6809      	ldr	r1, [r1, #0]
   24732:	015b      	lsls	r3, r3, #5
   24734:	9113      	str	r1, [sp, #76]	; 0x4c
   24736:	b2db      	uxtb	r3, r3
   24738:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2473a:	f8c8 2000 	str.w	r2, [r8]
   2473e:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   24742:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   24746:	6047      	str	r7, [r0, #4]
   24748:	9602      	str	r6, [sp, #8]
   2474a:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   2474e:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   24752:	9302      	str	r3, [sp, #8]
   24754:	9b02      	ldr	r3, [sp, #8]
   24756:	f8d8 3000 	ldr.w	r3, [r8]
   2475a:	2b01      	cmp	r3, #1
   2475c:	d0fb      	beq.n	24756 <rpc_transport_ipc_rx_init+0x1de>
   2475e:	f8d9 0000 	ldr.w	r0, [r9]
   24762:	b015      	add	sp, #84	; 0x54
   24764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24768:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2476c:	b015      	add	sp, #84	; 0x54
   2476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24772:	f24c 0009 	movw	r0, #49161	; 0xc009
   24776:	b015      	add	sp, #84	; 0x54
   24778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2477c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   24780:	4770      	bx	lr
   24782:	bf00      	nop
   24784:	200214f4 	.word	0x200214f4
   24788:	200206b0 	.word	0x200206b0
   2478c:	4002a000 	.word	0x4002a000
   24790:	4002a610 	.word	0x4002a610
   24794:	4002a614 	.word	0x4002a614
   24798:	4002a590 	.word	0x4002a590
   2479c:	40005000 	.word	0x40005000
   247a0:	e000e100 	.word	0xe000e100
   247a4:	200206a8 	.word	0x200206a8
   247a8:	200206b4 	.word	0x200206b4
   247ac:	200206ac 	.word	0x200206ac
   247b0:	200206b8 	.word	0x200206b8
   247b4:	200206a4 	.word	0x200206a4

000247b8 <IPC_IRQHandler>:
   247b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247bc:	f44f 6580 	mov.w	r5, #1024	; 0x400
   247c0:	4ca7      	ldr	r4, [pc, #668]	; (24a60 <IPC_IRQHandler+0x2a8>)
   247c2:	b087      	sub	sp, #28
   247c4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   247c8:	f3bf 8f4f 	dsb	sy
   247cc:	f3bf 8f6f 	isb	sy
   247d0:	4ea4      	ldr	r6, [pc, #656]	; (24a64 <IPC_IRQHandler+0x2ac>)
   247d2:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   247d6:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   247da:	061f      	lsls	r7, r3, #24
   247dc:	f100 80c8 	bmi.w	24970 <IPC_IRQHandler+0x1b8>
   247e0:	4ba0      	ldr	r3, [pc, #640]	; (24a64 <IPC_IRQHandler+0x2ac>)
   247e2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   247e6:	07d0      	lsls	r0, r2, #31
   247e8:	f100 80d4 	bmi.w	24994 <IPC_IRQHandler+0x1dc>
   247ec:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   247f0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   247f4:	f040 80b6 	bne.w	24964 <IPC_IRQHandler+0x1ac>
   247f8:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   247fc:	0749      	lsls	r1, r1, #29
   247fe:	f100 80e6 	bmi.w	249ce <IPC_IRQHandler+0x216>
   24802:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   24806:	06da      	lsls	r2, r3, #27
   24808:	f140 809d 	bpl.w	24946 <IPC_IRQHandler+0x18e>
   2480c:	2100      	movs	r1, #0
   2480e:	4a95      	ldr	r2, [pc, #596]	; (24a64 <IPC_IRQHandler+0x2ac>)
   24810:	4b95      	ldr	r3, [pc, #596]	; (24a68 <IPC_IRQHandler+0x2b0>)
   24812:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   24816:	681b      	ldr	r3, [r3, #0]
   24818:	9304      	str	r3, [sp, #16]
   2481a:	9b04      	ldr	r3, [sp, #16]
   2481c:	f8df 8270 	ldr.w	r8, [pc, #624]	; 24a90 <IPC_IRQHandler+0x2d8>
   24820:	4f92      	ldr	r7, [pc, #584]	; (24a6c <IPC_IRQHandler+0x2b4>)
   24822:	f8df 9270 	ldr.w	r9, [pc, #624]	; 24a94 <IPC_IRQHandler+0x2dc>
   24826:	f8d8 a000 	ldr.w	sl, [r8]
   2482a:	f8da 1000 	ldr.w	r1, [sl]
   2482e:	2900      	cmp	r1, #0
   24830:	d03f      	beq.n	248b2 <IPC_IRQHandler+0xfa>
   24832:	2200      	movs	r2, #0
   24834:	4614      	mov	r4, r2
   24836:	e002      	b.n	2483e <IPC_IRQHandler+0x86>
   24838:	3401      	adds	r4, #1
   2483a:	428c      	cmp	r4, r1
   2483c:	d227      	bcs.n	2488e <IPC_IRQHandler+0xd6>
   2483e:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   24842:	68ab      	ldr	r3, [r5, #8]
   24844:	2b00      	cmp	r3, #0
   24846:	d0f7      	beq.n	24838 <IPC_IRQHandler+0x80>
   24848:	686e      	ldr	r6, [r5, #4]
   2484a:	b2f6      	uxtb	r6, r6
   2484c:	2e01      	cmp	r6, #1
   2484e:	d1f3      	bne.n	24838 <IPC_IRQHandler+0x80>
   24850:	6868      	ldr	r0, [r5, #4]
   24852:	f8b9 3000 	ldrh.w	r3, [r9]
   24856:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   2485a:	d1ed      	bne.n	24838 <IPC_IRQHandler+0x80>
   2485c:	686a      	ldr	r2, [r5, #4]
   2485e:	3301      	adds	r3, #1
   24860:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   24864:	f042 0202 	orr.w	r2, r2, #2
   24868:	606a      	str	r2, [r5, #4]
   2486a:	68a8      	ldr	r0, [r5, #8]
   2486c:	f8a9 3000 	strh.w	r3, [r9]
   24870:	f7ff fe60 	bl	24534 <rpc_transport_rx_handle>
   24874:	4632      	mov	r2, r6
   24876:	b928      	cbnz	r0, 24884 <IPC_IRQHandler+0xcc>
   24878:	686b      	ldr	r3, [r5, #4]
   2487a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2487e:	f043 0303 	orr.w	r3, r3, #3
   24882:	606b      	str	r3, [r5, #4]
   24884:	f8da 1000 	ldr.w	r1, [sl]
   24888:	3401      	adds	r4, #1
   2488a:	428c      	cmp	r4, r1
   2488c:	d3d7      	bcc.n	2483e <IPC_IRQHandler+0x86>
   2488e:	2a00      	cmp	r2, #0
   24890:	d1cd      	bne.n	2482e <IPC_IRQHandler+0x76>
   24892:	b171      	cbz	r1, 248b2 <IPC_IRQHandler+0xfa>
   24894:	4613      	mov	r3, r2
   24896:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   2489a:	6890      	ldr	r0, [r2, #8]
   2489c:	3301      	adds	r3, #1
   2489e:	b130      	cbz	r0, 248ae <IPC_IRQHandler+0xf6>
   248a0:	f8d2 b004 	ldr.w	fp, [r2, #4]
   248a4:	fa5f fb8b 	uxtb.w	fp, fp
   248a8:	f1bb 0f01 	cmp.w	fp, #1
   248ac:	d003      	beq.n	248b6 <IPC_IRQHandler+0xfe>
   248ae:	428b      	cmp	r3, r1
   248b0:	d1f1      	bne.n	24896 <IPC_IRQHandler+0xde>
   248b2:	f04f 0b00 	mov.w	fp, #0
   248b6:	f8d7 a000 	ldr.w	sl, [r7]
   248ba:	f8da 2000 	ldr.w	r2, [sl]
   248be:	2a00      	cmp	r2, #0
   248c0:	d03d      	beq.n	2493e <IPC_IRQHandler+0x186>
   248c2:	2100      	movs	r1, #0
   248c4:	460c      	mov	r4, r1
   248c6:	e002      	b.n	248ce <IPC_IRQHandler+0x116>
   248c8:	3401      	adds	r4, #1
   248ca:	4294      	cmp	r4, r2
   248cc:	d227      	bcs.n	2491e <IPC_IRQHandler+0x166>
   248ce:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   248d2:	68ab      	ldr	r3, [r5, #8]
   248d4:	2b00      	cmp	r3, #0
   248d6:	d0f7      	beq.n	248c8 <IPC_IRQHandler+0x110>
   248d8:	686e      	ldr	r6, [r5, #4]
   248da:	b2f6      	uxtb	r6, r6
   248dc:	2e01      	cmp	r6, #1
   248de:	d1f3      	bne.n	248c8 <IPC_IRQHandler+0x110>
   248e0:	6868      	ldr	r0, [r5, #4]
   248e2:	f8b9 3000 	ldrh.w	r3, [r9]
   248e6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   248ea:	d1ed      	bne.n	248c8 <IPC_IRQHandler+0x110>
   248ec:	686a      	ldr	r2, [r5, #4]
   248ee:	3301      	adds	r3, #1
   248f0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   248f4:	f042 0202 	orr.w	r2, r2, #2
   248f8:	606a      	str	r2, [r5, #4]
   248fa:	68a8      	ldr	r0, [r5, #8]
   248fc:	f8a9 3000 	strh.w	r3, [r9]
   24900:	f7ff fe18 	bl	24534 <rpc_transport_rx_handle>
   24904:	4631      	mov	r1, r6
   24906:	b928      	cbnz	r0, 24914 <IPC_IRQHandler+0x15c>
   24908:	686a      	ldr	r2, [r5, #4]
   2490a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   2490e:	f043 0303 	orr.w	r3, r3, #3
   24912:	606b      	str	r3, [r5, #4]
   24914:	f8da 2000 	ldr.w	r2, [sl]
   24918:	3401      	adds	r4, #1
   2491a:	4294      	cmp	r4, r2
   2491c:	d3d7      	bcc.n	248ce <IPC_IRQHandler+0x116>
   2491e:	2900      	cmp	r1, #0
   24920:	d1cd      	bne.n	248be <IPC_IRQHandler+0x106>
   24922:	b162      	cbz	r2, 2493e <IPC_IRQHandler+0x186>
   24924:	460b      	mov	r3, r1
   24926:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   2492a:	6888      	ldr	r0, [r1, #8]
   2492c:	3301      	adds	r3, #1
   2492e:	b120      	cbz	r0, 2493a <IPC_IRQHandler+0x182>
   24930:	6849      	ldr	r1, [r1, #4]
   24932:	b2c9      	uxtb	r1, r1
   24934:	2901      	cmp	r1, #1
   24936:	f43f af76 	beq.w	24826 <IPC_IRQHandler+0x6e>
   2493a:	4293      	cmp	r3, r2
   2493c:	d1f3      	bne.n	24926 <IPC_IRQHandler+0x16e>
   2493e:	f1bb 0f00 	cmp.w	fp, #0
   24942:	f47f af70 	bne.w	24826 <IPC_IRQHandler+0x6e>
   24946:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2494a:	4b49      	ldr	r3, [pc, #292]	; (24a70 <IPC_IRQHandler+0x2b8>)
   2494c:	4a44      	ldr	r2, [pc, #272]	; (24a60 <IPC_IRQHandler+0x2a8>)
   2494e:	681b      	ldr	r3, [r3, #0]
   24950:	015b      	lsls	r3, r3, #5
   24952:	b2db      	uxtb	r3, r3
   24954:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   24958:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   2495c:	6051      	str	r1, [r2, #4]
   2495e:	b007      	add	sp, #28
   24960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24964:	2206      	movs	r2, #6
   24966:	4b43      	ldr	r3, [pc, #268]	; (24a74 <IPC_IRQHandler+0x2bc>)
   24968:	601a      	str	r2, [r3, #0]
   2496a:	b007      	add	sp, #28
   2496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24970:	f7ff fc0c 	bl	2418c <ipc_trace_handle>
   24974:	f7ff fd78 	bl	24468 <rpc_trace_coredump_in_progress>
   24978:	2800      	cmp	r0, #0
   2497a:	d149      	bne.n	24a10 <IPC_IRQHandler+0x258>
   2497c:	4b3e      	ldr	r3, [pc, #248]	; (24a78 <IPC_IRQHandler+0x2c0>)
   2497e:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   24982:	681b      	ldr	r3, [r3, #0]
   24984:	9301      	str	r3, [sp, #4]
   24986:	9b01      	ldr	r3, [sp, #4]
   24988:	4b36      	ldr	r3, [pc, #216]	; (24a64 <IPC_IRQHandler+0x2ac>)
   2498a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   2498e:	07d0      	lsls	r0, r2, #31
   24990:	f57f af2c 	bpl.w	247ec <IPC_IRQHandler+0x34>
   24994:	2000      	movs	r0, #0
   24996:	f248 0202 	movw	r2, #32770	; 0x8002
   2499a:	4938      	ldr	r1, [pc, #224]	; (24a7c <IPC_IRQHandler+0x2c4>)
   2499c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   249a0:	6809      	ldr	r1, [r1, #0]
   249a2:	9102      	str	r1, [sp, #8]
   249a4:	9902      	ldr	r1, [sp, #8]
   249a6:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   249aa:	4293      	cmp	r3, r2
   249ac:	d040      	beq.n	24a30 <IPC_IRQHandler+0x278>
   249ae:	d81e      	bhi.n	249ee <IPC_IRQHandler+0x236>
   249b0:	2b00      	cmp	r3, #0
   249b2:	d04f      	beq.n	24a54 <IPC_IRQHandler+0x29c>
   249b4:	2b02      	cmp	r3, #2
   249b6:	d942      	bls.n	24a3e <IPC_IRQHandler+0x286>
   249b8:	f248 0201 	movw	r2, #32769	; 0x8001
   249bc:	4293      	cmp	r3, r2
   249be:	d149      	bne.n	24a54 <IPC_IRQHandler+0x29c>
   249c0:	2003      	movs	r0, #3
   249c2:	2207      	movs	r2, #7
   249c4:	492b      	ldr	r1, [pc, #172]	; (24a74 <IPC_IRQHandler+0x2bc>)
   249c6:	4b2e      	ldr	r3, [pc, #184]	; (24a80 <IPC_IRQHandler+0x2c8>)
   249c8:	6008      	str	r0, [r1, #0]
   249ca:	601a      	str	r2, [r3, #0]
   249cc:	e7cd      	b.n	2496a <IPC_IRQHandler+0x1b2>
   249ce:	4d29      	ldr	r5, [pc, #164]	; (24a74 <IPC_IRQHandler+0x2bc>)
   249d0:	6829      	ldr	r1, [r5, #0]
   249d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   249d6:	2901      	cmp	r1, #1
   249d8:	492a      	ldr	r1, [pc, #168]	; (24a84 <IPC_IRQHandler+0x2cc>)
   249da:	d05d      	beq.n	24a98 <IPC_IRQHandler+0x2e0>
   249dc:	680a      	ldr	r2, [r1, #0]
   249de:	9203      	str	r2, [sp, #12]
   249e0:	9a03      	ldr	r2, [sp, #12]
   249e2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   249e6:	06db      	lsls	r3, r3, #27
   249e8:	f53f af10 	bmi.w	2480c <IPC_IRQHandler+0x54>
   249ec:	e716      	b.n	2481c <IPC_IRQHandler+0x64>
   249ee:	4a26      	ldr	r2, [pc, #152]	; (24a88 <IPC_IRQHandler+0x2d0>)
   249f0:	4293      	cmp	r3, r2
   249f2:	d814      	bhi.n	24a1e <IPC_IRQHandler+0x266>
   249f4:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   249f8:	d814      	bhi.n	24a24 <IPC_IRQHandler+0x26c>
   249fa:	f248 0203 	movw	r2, #32771	; 0x8003
   249fe:	4293      	cmp	r3, r2
   24a00:	d128      	bne.n	24a54 <IPC_IRQHandler+0x29c>
   24a02:	2003      	movs	r0, #3
   24a04:	2204      	movs	r2, #4
   24a06:	491b      	ldr	r1, [pc, #108]	; (24a74 <IPC_IRQHandler+0x2bc>)
   24a08:	4b1d      	ldr	r3, [pc, #116]	; (24a80 <IPC_IRQHandler+0x2c8>)
   24a0a:	6008      	str	r0, [r1, #0]
   24a0c:	601a      	str	r2, [r3, #0]
   24a0e:	e7ac      	b.n	2496a <IPC_IRQHandler+0x1b2>
   24a10:	23e0      	movs	r3, #224	; 0xe0
   24a12:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   24a16:	6065      	str	r5, [r4, #4]
   24a18:	b007      	add	sp, #28
   24a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a1e:	4a1b      	ldr	r2, [pc, #108]	; (24a8c <IPC_IRQHandler+0x2d4>)
   24a20:	4293      	cmp	r3, r2
   24a22:	d117      	bne.n	24a54 <IPC_IRQHandler+0x29c>
   24a24:	2003      	movs	r0, #3
   24a26:	4913      	ldr	r1, [pc, #76]	; (24a74 <IPC_IRQHandler+0x2bc>)
   24a28:	4a15      	ldr	r2, [pc, #84]	; (24a80 <IPC_IRQHandler+0x2c8>)
   24a2a:	6008      	str	r0, [r1, #0]
   24a2c:	6013      	str	r3, [r2, #0]
   24a2e:	e79c      	b.n	2496a <IPC_IRQHandler+0x1b2>
   24a30:	2003      	movs	r0, #3
   24a32:	2206      	movs	r2, #6
   24a34:	490f      	ldr	r1, [pc, #60]	; (24a74 <IPC_IRQHandler+0x2bc>)
   24a36:	4b12      	ldr	r3, [pc, #72]	; (24a80 <IPC_IRQHandler+0x2c8>)
   24a38:	6008      	str	r0, [r1, #0]
   24a3a:	601a      	str	r2, [r3, #0]
   24a3c:	e795      	b.n	2496a <IPC_IRQHandler+0x1b2>
   24a3e:	2303      	movs	r3, #3
   24a40:	4618      	mov	r0, r3
   24a42:	490c      	ldr	r1, [pc, #48]	; (24a74 <IPC_IRQHandler+0x2bc>)
   24a44:	4a0e      	ldr	r2, [pc, #56]	; (24a80 <IPC_IRQHandler+0x2c8>)
   24a46:	600b      	str	r3, [r1, #0]
   24a48:	6013      	str	r3, [r2, #0]
   24a4a:	b007      	add	sp, #28
   24a4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a50:	f7ff b910 	b.w	23c74 <rpc_transport_ipc_fault_handler>
   24a54:	2303      	movs	r3, #3
   24a56:	4907      	ldr	r1, [pc, #28]	; (24a74 <IPC_IRQHandler+0x2bc>)
   24a58:	4a09      	ldr	r2, [pc, #36]	; (24a80 <IPC_IRQHandler+0x2c8>)
   24a5a:	600b      	str	r3, [r1, #0]
   24a5c:	6013      	str	r3, [r2, #0]
   24a5e:	e784      	b.n	2496a <IPC_IRQHandler+0x1b2>
   24a60:	e000e100 	.word	0xe000e100
   24a64:	4002a000 	.word	0x4002a000
   24a68:	4002a110 	.word	0x4002a110
   24a6c:	200206b0 	.word	0x200206b0
   24a70:	200206a8 	.word	0x200206a8
   24a74:	200206ac 	.word	0x200206ac
   24a78:	4002a11c 	.word	0x4002a11c
   24a7c:	4002a100 	.word	0x4002a100
   24a80:	200206a4 	.word	0x200206a4
   24a84:	4002a108 	.word	0x4002a108
   24a88:	04400004 	.word	0x04400004
   24a8c:	05500001 	.word	0x05500001
   24a90:	200206b4 	.word	0x200206b4
   24a94:	200214f4 	.word	0x200214f4
   24a98:	4a37      	ldr	r2, [pc, #220]	; (24b78 <IPC_IRQHandler+0x3c0>)
   24a9a:	680b      	ldr	r3, [r1, #0]
   24a9c:	6812      	ldr	r2, [r2, #0]
   24a9e:	9305      	str	r3, [sp, #20]
   24aa0:	6893      	ldr	r3, [r2, #8]
   24aa2:	4836      	ldr	r0, [pc, #216]	; (24b7c <IPC_IRQHandler+0x3c4>)
   24aa4:	4936      	ldr	r1, [pc, #216]	; (24b80 <IPC_IRQHandler+0x3c8>)
   24aa6:	6003      	str	r3, [r0, #0]
   24aa8:	6854      	ldr	r4, [r2, #4]
   24aaa:	9a05      	ldr	r2, [sp, #20]
   24aac:	600c      	str	r4, [r1, #0]
   24aae:	b16b      	cbz	r3, 24acc <IPC_IRQHandler+0x314>
   24ab0:	b164      	cbz	r4, 24acc <IPC_IRQHandler+0x314>
   24ab2:	681b      	ldr	r3, [r3, #0]
   24ab4:	2b10      	cmp	r3, #16
   24ab6:	d802      	bhi.n	24abe <IPC_IRQHandler+0x306>
   24ab8:	6822      	ldr	r2, [r4, #0]
   24aba:	2a10      	cmp	r2, #16
   24abc:	d90c      	bls.n	24ad8 <IPC_IRQHandler+0x320>
   24abe:	2103      	movs	r1, #3
   24ac0:	f24c 0206 	movw	r2, #49158	; 0xc006
   24ac4:	4b2f      	ldr	r3, [pc, #188]	; (24b84 <IPC_IRQHandler+0x3cc>)
   24ac6:	6029      	str	r1, [r5, #0]
   24ac8:	601a      	str	r2, [r3, #0]
   24aca:	e74e      	b.n	2496a <IPC_IRQHandler+0x1b2>
   24acc:	2103      	movs	r1, #3
   24ace:	2210      	movs	r2, #16
   24ad0:	4b2c      	ldr	r3, [pc, #176]	; (24b84 <IPC_IRQHandler+0x3cc>)
   24ad2:	6029      	str	r1, [r5, #0]
   24ad4:	601a      	str	r2, [r3, #0]
   24ad6:	e748      	b.n	2496a <IPC_IRQHandler+0x1b2>
   24ad8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 24b90 <IPC_IRQHandler+0x3d8>
   24adc:	2a00      	cmp	r2, #0
   24ade:	d042      	beq.n	24b66 <IPC_IRQHandler+0x3ae>
   24ae0:	2300      	movs	r3, #0
   24ae2:	f104 0904 	add.w	r9, r4, #4
   24ae6:	461e      	mov	r6, r3
   24ae8:	e002      	b.n	24af0 <IPC_IRQHandler+0x338>
   24aea:	3601      	adds	r6, #1
   24aec:	4296      	cmp	r6, r2
   24aee:	d22a      	bcs.n	24b46 <IPC_IRQHandler+0x38e>
   24af0:	00f7      	lsls	r7, r6, #3
   24af2:	19e1      	adds	r1, r4, r7
   24af4:	6888      	ldr	r0, [r1, #8]
   24af6:	2800      	cmp	r0, #0
   24af8:	d0f7      	beq.n	24aea <IPC_IRQHandler+0x332>
   24afa:	f8d1 a004 	ldr.w	sl, [r1, #4]
   24afe:	fa5f fa8a 	uxtb.w	sl, sl
   24b02:	f1ba 0f01 	cmp.w	sl, #1
   24b06:	d1f0      	bne.n	24aea <IPC_IRQHandler+0x332>
   24b08:	f8d1 c004 	ldr.w	ip, [r1, #4]
   24b0c:	f8b8 0000 	ldrh.w	r0, [r8]
   24b10:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   24b14:	d1e9      	bne.n	24aea <IPC_IRQHandler+0x332>
   24b16:	684b      	ldr	r3, [r1, #4]
   24b18:	1c42      	adds	r2, r0, #1
   24b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24b1e:	f043 0302 	orr.w	r3, r3, #2
   24b22:	604b      	str	r3, [r1, #4]
   24b24:	6888      	ldr	r0, [r1, #8]
   24b26:	f8a8 2000 	strh.w	r2, [r8]
   24b2a:	f7ff fd03 	bl	24534 <rpc_transport_rx_handle>
   24b2e:	4653      	mov	r3, sl
   24b30:	b938      	cbnz	r0, 24b42 <IPC_IRQHandler+0x38a>
   24b32:	f859 2007 	ldr.w	r2, [r9, r7]
   24b36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   24b3a:	f042 0203 	orr.w	r2, r2, #3
   24b3e:	f849 2007 	str.w	r2, [r9, r7]
   24b42:	6822      	ldr	r2, [r4, #0]
   24b44:	e7d1      	b.n	24aea <IPC_IRQHandler+0x332>
   24b46:	2b00      	cmp	r3, #0
   24b48:	d1c8      	bne.n	24adc <IPC_IRQHandler+0x324>
   24b4a:	b912      	cbnz	r2, 24b52 <IPC_IRQHandler+0x39a>
   24b4c:	e00b      	b.n	24b66 <IPC_IRQHandler+0x3ae>
   24b4e:	4293      	cmp	r3, r2
   24b50:	d009      	beq.n	24b66 <IPC_IRQHandler+0x3ae>
   24b52:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   24b56:	6888      	ldr	r0, [r1, #8]
   24b58:	3301      	adds	r3, #1
   24b5a:	2800      	cmp	r0, #0
   24b5c:	d0f7      	beq.n	24b4e <IPC_IRQHandler+0x396>
   24b5e:	6849      	ldr	r1, [r1, #4]
   24b60:	b2c9      	uxtb	r1, r1
   24b62:	2901      	cmp	r1, #1
   24b64:	d1f3      	bne.n	24b4e <IPC_IRQHandler+0x396>
   24b66:	2002      	movs	r0, #2
   24b68:	4b07      	ldr	r3, [pc, #28]	; (24b88 <IPC_IRQHandler+0x3d0>)
   24b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   24b6e:	4a07      	ldr	r2, [pc, #28]	; (24b8c <IPC_IRQHandler+0x3d4>)
   24b70:	681b      	ldr	r3, [r3, #0]
   24b72:	6028      	str	r0, [r5, #0]
   24b74:	e6ec      	b.n	24950 <IPC_IRQHandler+0x198>
   24b76:	bf00      	nop
   24b78:	200206b8 	.word	0x200206b8
   24b7c:	200206b4 	.word	0x200206b4
   24b80:	200206b0 	.word	0x200206b0
   24b84:	200206a4 	.word	0x200206a4
   24b88:	200206a8 	.word	0x200206a8
   24b8c:	e000e100 	.word	0xe000e100
   24b90:	200214f4 	.word	0x200214f4

00024b94 <rpc_transport_msg_free>:
   24b94:	b430      	push	{r4, r5}
   24b96:	4b18      	ldr	r3, [pc, #96]	; (24bf8 <rpc_transport_msg_free+0x64>)
   24b98:	681c      	ldr	r4, [r3, #0]
   24b9a:	6825      	ldr	r5, [r4, #0]
   24b9c:	b16d      	cbz	r5, 24bba <rpc_transport_msg_free+0x26>
   24b9e:	68a3      	ldr	r3, [r4, #8]
   24ba0:	4283      	cmp	r3, r0
   24ba2:	d027      	beq.n	24bf4 <rpc_transport_msg_free+0x60>
   24ba4:	2300      	movs	r3, #0
   24ba6:	e002      	b.n	24bae <rpc_transport_msg_free+0x1a>
   24ba8:	6889      	ldr	r1, [r1, #8]
   24baa:	4281      	cmp	r1, r0
   24bac:	d019      	beq.n	24be2 <rpc_transport_msg_free+0x4e>
   24bae:	3301      	adds	r3, #1
   24bb0:	00da      	lsls	r2, r3, #3
   24bb2:	42ab      	cmp	r3, r5
   24bb4:	eb04 0102 	add.w	r1, r4, r2
   24bb8:	d1f6      	bne.n	24ba8 <rpc_transport_msg_free+0x14>
   24bba:	4b10      	ldr	r3, [pc, #64]	; (24bfc <rpc_transport_msg_free+0x68>)
   24bbc:	681c      	ldr	r4, [r3, #0]
   24bbe:	6825      	ldr	r5, [r4, #0]
   24bc0:	b16d      	cbz	r5, 24bde <rpc_transport_msg_free+0x4a>
   24bc2:	68a3      	ldr	r3, [r4, #8]
   24bc4:	4283      	cmp	r3, r0
   24bc6:	d015      	beq.n	24bf4 <rpc_transport_msg_free+0x60>
   24bc8:	2300      	movs	r3, #0
   24bca:	e002      	b.n	24bd2 <rpc_transport_msg_free+0x3e>
   24bcc:	6889      	ldr	r1, [r1, #8]
   24bce:	4281      	cmp	r1, r0
   24bd0:	d007      	beq.n	24be2 <rpc_transport_msg_free+0x4e>
   24bd2:	3301      	adds	r3, #1
   24bd4:	00da      	lsls	r2, r3, #3
   24bd6:	429d      	cmp	r5, r3
   24bd8:	eb04 0102 	add.w	r1, r4, r2
   24bdc:	d1f6      	bne.n	24bcc <rpc_transport_msg_free+0x38>
   24bde:	bc30      	pop	{r4, r5}
   24be0:	4770      	bx	lr
   24be2:	3204      	adds	r2, #4
   24be4:	58a3      	ldr	r3, [r4, r2]
   24be6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24bea:	f043 0303 	orr.w	r3, r3, #3
   24bee:	50a3      	str	r3, [r4, r2]
   24bf0:	bc30      	pop	{r4, r5}
   24bf2:	4770      	bx	lr
   24bf4:	2204      	movs	r2, #4
   24bf6:	e7f5      	b.n	24be4 <rpc_transport_msg_free+0x50>
   24bf8:	200206b4 	.word	0x200206b4
   24bfc:	200206b0 	.word	0x200206b0

00024c00 <rpc_transport_ipc_tx_init>:
   24c00:	2800      	cmp	r0, #0
   24c02:	f000 80b8 	beq.w	24d76 <rpc_transport_ipc_tx_init+0x176>
   24c06:	2900      	cmp	r1, #0
   24c08:	f000 80b5 	beq.w	24d76 <rpc_transport_ipc_tx_init+0x176>
   24c0c:	2a00      	cmp	r2, #0
   24c0e:	f000 80b2 	beq.w	24d76 <rpc_transport_ipc_tx_init+0x176>
   24c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c16:	6a04      	ldr	r4, [r0, #32]
   24c18:	b085      	sub	sp, #20
   24c1a:	2c00      	cmp	r4, #0
   24c1c:	f000 80a6 	beq.w	24d6c <rpc_transport_ipc_tx_init+0x16c>
   24c20:	6a40      	ldr	r0, [r0, #36]	; 0x24
   24c22:	2800      	cmp	r0, #0
   24c24:	f000 80a2 	beq.w	24d6c <rpc_transport_ipc_tx_init+0x16c>
   24c28:	f642 4587 	movw	r5, #11399	; 0x2c87
   24c2c:	f04f 0a00 	mov.w	sl, #0
   24c30:	4e55      	ldr	r6, [pc, #340]	; (24d88 <rpc_transport_ipc_tx_init+0x188>)
   24c32:	42a8      	cmp	r0, r5
   24c34:	f886 a000 	strb.w	sl, [r6]
   24c38:	f240 80a0 	bls.w	24d7c <rpc_transport_ipc_tx_init+0x17c>
   24c3c:	2708      	movs	r7, #8
   24c3e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 24dc0 <rpc_transport_ipc_tx_init+0x1c0>
   24c42:	4620      	mov	r0, r4
   24c44:	4616      	mov	r6, r2
   24c46:	460d      	mov	r5, r1
   24c48:	2244      	movs	r2, #68	; 0x44
   24c4a:	4651      	mov	r1, sl
   24c4c:	f8c9 4000 	str.w	r4, [r9]
   24c50:	f00b f8ee 	bl	2fe30 <memset>
   24c54:	f8d9 2000 	ldr.w	r2, [r9]
   24c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24c5c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 24dc4 <rpc_transport_ipc_tx_init+0x1c4>
   24c60:	f882 a001 	strb.w	sl, [r2, #1]
   24c64:	f882 a002 	strb.w	sl, [r2, #2]
   24c68:	f882 a003 	strb.w	sl, [r2, #3]
   24c6c:	7017      	strb	r7, [r2, #0]
   24c6e:	4618      	mov	r0, r3
   24c70:	2244      	movs	r2, #68	; 0x44
   24c72:	4651      	mov	r1, sl
   24c74:	f8c8 3000 	str.w	r3, [r8]
   24c78:	f00b f8da 	bl	2fe30 <memset>
   24c7c:	f8d8 2000 	ldr.w	r2, [r8]
   24c80:	f104 0388 	add.w	r3, r4, #136	; 0x88
   24c84:	f8df b140 	ldr.w	fp, [pc, #320]	; 24dc8 <rpc_transport_ipc_tx_init+0x1c8>
   24c88:	7017      	strb	r7, [r2, #0]
   24c8a:	f882 a001 	strb.w	sl, [r2, #1]
   24c8e:	f882 a002 	strb.w	sl, [r2, #2]
   24c92:	f882 a003 	strb.w	sl, [r2, #3]
   24c96:	4618      	mov	r0, r3
   24c98:	f44f 7200 	mov.w	r2, #512	; 0x200
   24c9c:	4651      	mov	r1, sl
   24c9e:	f8cb 3000 	str.w	r3, [fp]
   24ca2:	f00b f8c5 	bl	2fe30 <memset>
   24ca6:	4b39      	ldr	r3, [pc, #228]	; (24d8c <rpc_transport_ipc_tx_init+0x18c>)
   24ca8:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   24cac:	f8c3 c000 	str.w	ip, [r3]
   24cb0:	4651      	mov	r1, sl
   24cb2:	4660      	mov	r0, ip
   24cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
   24cb8:	f00b f8ba 	bl	2fe30 <memset>
   24cbc:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   24cc0:	2106      	movs	r1, #6
   24cc2:	f04f 0e01 	mov.w	lr, #1
   24cc6:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   24cca:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   24cce:	4b30      	ldr	r3, [pc, #192]	; (24d90 <rpc_transport_ipc_tx_init+0x190>)
   24cd0:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   24cd4:	605c      	str	r4, [r3, #4]
   24cd6:	4c2f      	ldr	r4, [pc, #188]	; (24d94 <rpc_transport_ipc_tx_init+0x194>)
   24cd8:	f8c3 c008 	str.w	ip, [r3, #8]
   24cdc:	8199      	strh	r1, [r3, #12]
   24cde:	f8a3 e000 	strh.w	lr, [r3]
   24ce2:	4619      	mov	r1, r3
   24ce4:	611c      	str	r4, [r3, #16]
   24ce6:	4b2c      	ldr	r3, [pc, #176]	; (24d98 <rpc_transport_ipc_tx_init+0x198>)
   24ce8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 24dcc <rpc_transport_ipc_tx_init+0x1cc>
   24cec:	6120      	str	r0, [r4, #16]
   24cee:	482b      	ldr	r0, [pc, #172]	; (24d9c <rpc_transport_ipc_tx_init+0x19c>)
   24cf0:	6063      	str	r3, [r4, #4]
   24cf2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   24cf6:	60a0      	str	r0, [r4, #8]
   24cf8:	f8c4 c000 	str.w	ip, [r4]
   24cfc:	4828      	ldr	r0, [pc, #160]	; (24da0 <rpc_transport_ipc_tx_init+0x1a0>)
   24cfe:	60e3      	str	r3, [r4, #12]
   24d00:	6162      	str	r2, [r4, #20]
   24d02:	f7fd fe59 	bl	229b8 <nrf_mem_register>
   24d06:	2800      	cmp	r0, #0
   24d08:	d132      	bne.n	24d70 <rpc_transport_ipc_tx_init+0x170>
   24d0a:	f04f 0c02 	mov.w	ip, #2
   24d0e:	2420      	movs	r4, #32
   24d10:	f8d9 1000 	ldr.w	r1, [r9]
   24d14:	f8db 2000 	ldr.w	r2, [fp]
   24d18:	6029      	str	r1, [r5, #0]
   24d1a:	4b1c      	ldr	r3, [pc, #112]	; (24d8c <rpc_transport_ipc_tx_init+0x18c>)
   24d1c:	f8d8 1000 	ldr.w	r1, [r8]
   24d20:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 24dd0 <rpc_transport_ipc_tx_init+0x1d0>
   24d24:	4d1f      	ldr	r5, [pc, #124]	; (24da4 <rpc_transport_ipc_tx_init+0x1a4>)
   24d26:	6031      	str	r1, [r6, #0]
   24d28:	f8ce 2000 	str.w	r2, [lr]
   24d2c:	681b      	ldr	r3, [r3, #0]
   24d2e:	491e      	ldr	r1, [pc, #120]	; (24da8 <rpc_transport_ipc_tx_init+0x1a8>)
   24d30:	f502 7200 	add.w	r2, r2, #512	; 0x200
   24d34:	602a      	str	r2, [r5, #0]
   24d36:	4e1d      	ldr	r6, [pc, #116]	; (24dac <rpc_transport_ipc_tx_init+0x1ac>)
   24d38:	4a1d      	ldr	r2, [pc, #116]	; (24db0 <rpc_transport_ipc_tx_init+0x1b0>)
   24d3a:	4d1e      	ldr	r5, [pc, #120]	; (24db4 <rpc_transport_ipc_tx_init+0x1b4>)
   24d3c:	600b      	str	r3, [r1, #0]
   24d3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   24d42:	491d      	ldr	r1, [pc, #116]	; (24db8 <rpc_transport_ipc_tx_init+0x1b8>)
   24d44:	6033      	str	r3, [r6, #0]
   24d46:	8028      	strh	r0, [r5, #0]
   24d48:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   24d4c:	6809      	ldr	r1, [r1, #0]
   24d4e:	4b1b      	ldr	r3, [pc, #108]	; (24dbc <rpc_transport_ipc_tx_init+0x1bc>)
   24d50:	9103      	str	r1, [sp, #12]
   24d52:	9903      	ldr	r1, [sp, #12]
   24d54:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   24d58:	6819      	ldr	r1, [r3, #0]
   24d5a:	443b      	add	r3, r7
   24d5c:	9102      	str	r1, [sp, #8]
   24d5e:	9902      	ldr	r1, [sp, #8]
   24d60:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   24d64:	681b      	ldr	r3, [r3, #0]
   24d66:	9301      	str	r3, [sp, #4]
   24d68:	9b01      	ldr	r3, [sp, #4]
   24d6a:	e001      	b.n	24d70 <rpc_transport_ipc_tx_init+0x170>
   24d6c:	f24c 0007 	movw	r0, #49159	; 0xc007
   24d70:	b005      	add	sp, #20
   24d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d76:	f24c 000e 	movw	r0, #49166	; 0xc00e
   24d7a:	4770      	bx	lr
   24d7c:	f24c 0004 	movw	r0, #49156	; 0xc004
   24d80:	b005      	add	sp, #20
   24d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d86:	bf00      	nop
   24d88:	2002293c 	.word	0x2002293c
   24d8c:	200206e4 	.word	0x200206e4
   24d90:	200206d0 	.word	0x200206d0
   24d94:	200206f4 	.word	0x200206f4
   24d98:	00040080 	.word	0x00040080
   24d9c:	00040100 	.word	0x00040100
   24da0:	200206bc 	.word	0x200206bc
   24da4:	200206c8 	.word	0x200206c8
   24da8:	200206c4 	.word	0x200206c4
   24dac:	200206c0 	.word	0x200206c0
   24db0:	4002a000 	.word	0x4002a000
   24db4:	200214f6 	.word	0x200214f6
   24db8:	4002a514 	.word	0x4002a514
   24dbc:	4002a51c 	.word	0x4002a51c
   24dc0:	200206f0 	.word	0x200206f0
   24dc4:	200206e8 	.word	0x200206e8
   24dc8:	200206ec 	.word	0x200206ec
   24dcc:	00080040 	.word	0x00080040
   24dd0:	200206cc 	.word	0x200206cc

00024dd4 <rpc_transport_ipc_tx_send>:
   24dd4:	2800      	cmp	r0, #0
   24dd6:	d05f      	beq.n	24e98 <rpc_transport_ipc_tx_send+0xc4>
   24dd8:	b470      	push	{r4, r5, r6}
   24dda:	4b33      	ldr	r3, [pc, #204]	; (24ea8 <rpc_transport_ipc_tx_send+0xd4>)
   24ddc:	b083      	sub	sp, #12
   24dde:	681a      	ldr	r2, [r3, #0]
   24de0:	4b32      	ldr	r3, [pc, #200]	; (24eac <rpc_transport_ipc_tx_send+0xd8>)
   24de2:	4282      	cmp	r2, r0
   24de4:	d81e      	bhi.n	24e24 <rpc_transport_ipc_tx_send+0x50>
   24de6:	681b      	ldr	r3, [r3, #0]
   24de8:	4931      	ldr	r1, [pc, #196]	; (24eb0 <rpc_transport_ipc_tx_send+0xdc>)
   24dea:	4283      	cmp	r3, r0
   24dec:	6809      	ldr	r1, [r1, #0]
   24dee:	d803      	bhi.n	24df8 <rpc_transport_ipc_tx_send+0x24>
   24df0:	4c30      	ldr	r4, [pc, #192]	; (24eb4 <rpc_transport_ipc_tx_send+0xe0>)
   24df2:	6824      	ldr	r4, [r4, #0]
   24df4:	4284      	cmp	r4, r0
   24df6:	d847      	bhi.n	24e88 <rpc_transport_ipc_tx_send+0xb4>
   24df8:	4281      	cmp	r1, r0
   24dfa:	d90e      	bls.n	24e1a <rpc_transport_ipc_tx_send+0x46>
   24dfc:	4b2e      	ldr	r3, [pc, #184]	; (24eb8 <rpc_transport_ipc_tx_send+0xe4>)
   24dfe:	781b      	ldrb	r3, [r3, #0]
   24e00:	2b00      	cmp	r3, #0
   24e02:	d14c      	bne.n	24e9e <rpc_transport_ipc_tx_send+0xca>
   24e04:	1a83      	subs	r3, r0, r2
   24e06:	492d      	ldr	r1, [pc, #180]	; (24ebc <rpc_transport_ipc_tx_send+0xe8>)
   24e08:	099e      	lsrs	r6, r3, #6
   24e0a:	069b      	lsls	r3, r3, #26
   24e0c:	680a      	ldr	r2, [r1, #0]
   24e0e:	4c2c      	ldr	r4, [pc, #176]	; (24ec0 <rpc_transport_ipc_tx_send+0xec>)
   24e10:	f04f 0103 	mov.w	r1, #3
   24e14:	f04f 0502 	mov.w	r5, #2
   24e18:	d014      	beq.n	24e44 <rpc_transport_ipc_tx_send+0x70>
   24e1a:	f24c 0010 	movw	r0, #49168	; 0xc010
   24e1e:	b003      	add	sp, #12
   24e20:	bc70      	pop	{r4, r5, r6}
   24e22:	4770      	bx	lr
   24e24:	681b      	ldr	r3, [r3, #0]
   24e26:	4298      	cmp	r0, r3
   24e28:	d3f7      	bcc.n	24e1a <rpc_transport_ipc_tx_send+0x46>
   24e2a:	4a22      	ldr	r2, [pc, #136]	; (24eb4 <rpc_transport_ipc_tx_send+0xe0>)
   24e2c:	6812      	ldr	r2, [r2, #0]
   24e2e:	4290      	cmp	r0, r2
   24e30:	d2f3      	bcs.n	24e1a <rpc_transport_ipc_tx_send+0x46>
   24e32:	2101      	movs	r1, #1
   24e34:	1ac3      	subs	r3, r0, r3
   24e36:	4a23      	ldr	r2, [pc, #140]	; (24ec4 <rpc_transport_ipc_tx_send+0xf0>)
   24e38:	099e      	lsrs	r6, r3, #6
   24e3a:	069b      	lsls	r3, r3, #26
   24e3c:	460d      	mov	r5, r1
   24e3e:	6812      	ldr	r2, [r2, #0]
   24e40:	4c21      	ldr	r4, [pc, #132]	; (24ec8 <rpc_transport_ipc_tx_send+0xf4>)
   24e42:	d1ea      	bne.n	24e1a <rpc_transport_ipc_tx_send+0x46>
   24e44:	6843      	ldr	r3, [r0, #4]
   24e46:	b2db      	uxtb	r3, r3
   24e48:	429d      	cmp	r5, r3
   24e4a:	d120      	bne.n	24e8e <rpc_transport_ipc_tx_send+0xba>
   24e4c:	2020      	movs	r0, #32
   24e4e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   24e52:	4d1e      	ldr	r5, [pc, #120]	; (24ecc <rpc_transport_ipc_tx_send+0xf8>)
   24e54:	6853      	ldr	r3, [r2, #4]
   24e56:	882e      	ldrh	r6, [r5, #0]
   24e58:	b29b      	uxth	r3, r3
   24e5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   24e5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24e62:	f043 0301 	orr.w	r3, r3, #1
   24e66:	6053      	str	r3, [r2, #4]
   24e68:	bf00      	nop
   24e6a:	3801      	subs	r0, #1
   24e6c:	d1fc      	bne.n	24e68 <rpc_transport_ipc_tx_send+0x94>
   24e6e:	2201      	movs	r2, #1
   24e70:	4b17      	ldr	r3, [pc, #92]	; (24ed0 <rpc_transport_ipc_tx_send+0xfc>)
   24e72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   24e76:	6822      	ldr	r2, [r4, #0]
   24e78:	882b      	ldrh	r3, [r5, #0]
   24e7a:	9201      	str	r2, [sp, #4]
   24e7c:	9a01      	ldr	r2, [sp, #4]
   24e7e:	3301      	adds	r3, #1
   24e80:	802b      	strh	r3, [r5, #0]
   24e82:	b003      	add	sp, #12
   24e84:	bc70      	pop	{r4, r5, r6}
   24e86:	4770      	bx	lr
   24e88:	4281      	cmp	r1, r0
   24e8a:	d9d2      	bls.n	24e32 <rpc_transport_ipc_tx_send+0x5e>
   24e8c:	e7b6      	b.n	24dfc <rpc_transport_ipc_tx_send+0x28>
   24e8e:	f24c 0007 	movw	r0, #49159	; 0xc007
   24e92:	b003      	add	sp, #12
   24e94:	bc70      	pop	{r4, r5, r6}
   24e96:	4770      	bx	lr
   24e98:	f24c 000e 	movw	r0, #49166	; 0xc00e
   24e9c:	4770      	bx	lr
   24e9e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   24ea2:	b003      	add	sp, #12
   24ea4:	bc70      	pop	{r4, r5, r6}
   24ea6:	4770      	bx	lr
   24ea8:	200206cc 	.word	0x200206cc
   24eac:	200206c4 	.word	0x200206c4
   24eb0:	200206c8 	.word	0x200206c8
   24eb4:	200206c0 	.word	0x200206c0
   24eb8:	2002293c 	.word	0x2002293c
   24ebc:	200206f0 	.word	0x200206f0
   24ec0:	4002a00c 	.word	0x4002a00c
   24ec4:	200206e8 	.word	0x200206e8
   24ec8:	4002a004 	.word	0x4002a004
   24ecc:	200214f6 	.word	0x200214f6
   24ed0:	4002a000 	.word	0x4002a000

00024ed4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   24ed4:	4b18      	ldr	r3, [pc, #96]	; (24f38 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   24ed6:	781b      	ldrb	r3, [r3, #0]
   24ed8:	bb63      	cbnz	r3, 24f34 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   24eda:	b4f0      	push	{r4, r5, r6, r7}
   24edc:	4a17      	ldr	r2, [pc, #92]	; (24f3c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   24ede:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   24ee2:	6814      	ldr	r4, [r2, #0]
   24ee4:	4b16      	ldr	r3, [pc, #88]	; (24f40 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   24ee6:	6825      	ldr	r5, [r4, #0]
   24ee8:	681e      	ldr	r6, [r3, #0]
   24eea:	b1a5      	cbz	r5, 24f16 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   24eec:	4607      	mov	r7, r0
   24eee:	00c1      	lsls	r1, r0, #3
   24ef0:	1863      	adds	r3, r4, r1
   24ef2:	685a      	ldr	r2, [r3, #4]
   24ef4:	b2d2      	uxtb	r2, r2
   24ef6:	2a03      	cmp	r2, #3
   24ef8:	d104      	bne.n	24f04 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   24efa:	609f      	str	r7, [r3, #8]
   24efc:	685a      	ldr	r2, [r3, #4]
   24efe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   24f02:	605a      	str	r2, [r3, #4]
   24f04:	685a      	ldr	r2, [r3, #4]
   24f06:	f012 0fff 	tst.w	r2, #255	; 0xff
   24f0a:	d101      	bne.n	24f10 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   24f0c:	689b      	ldr	r3, [r3, #8]
   24f0e:	b12b      	cbz	r3, 24f1c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   24f10:	3001      	adds	r0, #1
   24f12:	42a8      	cmp	r0, r5
   24f14:	d1eb      	bne.n	24eee <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   24f16:	2000      	movs	r0, #0
   24f18:	bcf0      	pop	{r4, r5, r6, r7}
   24f1a:	4770      	bx	lr
   24f1c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   24f20:	4421      	add	r1, r4
   24f22:	6088      	str	r0, [r1, #8]
   24f24:	6843      	ldr	r3, [r0, #4]
   24f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24f2a:	f043 0302 	orr.w	r3, r3, #2
   24f2e:	6043      	str	r3, [r0, #4]
   24f30:	bcf0      	pop	{r4, r5, r6, r7}
   24f32:	4770      	bx	lr
   24f34:	2000      	movs	r0, #0
   24f36:	4770      	bx	lr
   24f38:	2002293c 	.word	0x2002293c
   24f3c:	200206f0 	.word	0x200206f0
   24f40:	200206ec 	.word	0x200206ec

00024f44 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   24f44:	b4f0      	push	{r4, r5, r6, r7}
   24f46:	4a15      	ldr	r2, [pc, #84]	; (24f9c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   24f48:	4b15      	ldr	r3, [pc, #84]	; (24fa0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   24f4a:	6814      	ldr	r4, [r2, #0]
   24f4c:	681e      	ldr	r6, [r3, #0]
   24f4e:	6825      	ldr	r5, [r4, #0]
   24f50:	b1ad      	cbz	r5, 24f7e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   24f52:	2000      	movs	r0, #0
   24f54:	4607      	mov	r7, r0
   24f56:	00c1      	lsls	r1, r0, #3
   24f58:	1863      	adds	r3, r4, r1
   24f5a:	685a      	ldr	r2, [r3, #4]
   24f5c:	b2d2      	uxtb	r2, r2
   24f5e:	2a03      	cmp	r2, #3
   24f60:	d104      	bne.n	24f6c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   24f62:	609f      	str	r7, [r3, #8]
   24f64:	685a      	ldr	r2, [r3, #4]
   24f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   24f6a:	605a      	str	r2, [r3, #4]
   24f6c:	685a      	ldr	r2, [r3, #4]
   24f6e:	f012 0fff 	tst.w	r2, #255	; 0xff
   24f72:	d101      	bne.n	24f78 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   24f74:	689b      	ldr	r3, [r3, #8]
   24f76:	b12b      	cbz	r3, 24f84 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   24f78:	3001      	adds	r0, #1
   24f7a:	4285      	cmp	r5, r0
   24f7c:	d1eb      	bne.n	24f56 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   24f7e:	2000      	movs	r0, #0
   24f80:	bcf0      	pop	{r4, r5, r6, r7}
   24f82:	4770      	bx	lr
   24f84:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   24f88:	4421      	add	r1, r4
   24f8a:	6088      	str	r0, [r1, #8]
   24f8c:	6843      	ldr	r3, [r0, #4]
   24f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24f92:	f043 0301 	orr.w	r3, r3, #1
   24f96:	6043      	str	r3, [r0, #4]
   24f98:	bcf0      	pop	{r4, r5, r6, r7}
   24f9a:	4770      	bx	lr
   24f9c:	200206e8 	.word	0x200206e8
   24fa0:	200206e4 	.word	0x200206e4

00024fa4 <rpc_transport_ipc_tx_data_alloc>:
   24fa4:	4b03      	ldr	r3, [pc, #12]	; (24fb4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   24fa6:	781b      	ldrb	r3, [r3, #0]
   24fa8:	b90b      	cbnz	r3, 24fae <rpc_transport_ipc_tx_data_alloc+0xa>
   24faa:	f7fd be35 	b.w	22c18 <nrf_shared_malloc>
   24fae:	2000      	movs	r0, #0
   24fb0:	4770      	bx	lr
   24fb2:	bf00      	nop
   24fb4:	2002293c 	.word	0x2002293c

00024fb8 <ok_rsp_parser>:
   24fb8:	2000      	movs	r0, #0
   24fba:	4770      	bx	lr

00024fbc <pdn_state_get_parser>:
   24fbc:	2200      	movs	r2, #0
   24fbe:	b570      	push	{r4, r5, r6, lr}
   24fc0:	780b      	ldrb	r3, [r1, #0]
   24fc2:	b084      	sub	sp, #16
   24fc4:	460e      	mov	r6, r1
   24fc6:	e9cd 2200 	strd	r2, r2, [sp]
   24fca:	e9cd 2202 	strd	r2, r2, [sp, #8]
   24fce:	b323      	cbz	r3, 2501a <pdn_state_get_parser+0x5e>
   24fd0:	460c      	mov	r4, r1
   24fd2:	2b20      	cmp	r3, #32
   24fd4:	460d      	mov	r5, r1
   24fd6:	d01b      	beq.n	25010 <pdn_state_get_parser+0x54>
   24fd8:	700b      	strb	r3, [r1, #0]
   24fda:	3201      	adds	r2, #1
   24fdc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   24fe0:	18b1      	adds	r1, r6, r2
   24fe2:	460d      	mov	r5, r1
   24fe4:	2b00      	cmp	r3, #0
   24fe6:	d1f4      	bne.n	24fd2 <pdn_state_get_parser+0x16>
   24fe8:	2200      	movs	r2, #0
   24fea:	4b0d      	ldr	r3, [pc, #52]	; (25020 <pdn_state_get_parser+0x64>)
   24fec:	702a      	strb	r2, [r5, #0]
   24fee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   24ff2:	4a0c      	ldr	r2, [pc, #48]	; (25024 <pdn_state_get_parser+0x68>)
   24ff4:	681b      	ldr	r3, [r3, #0]
   24ff6:	2110      	movs	r1, #16
   24ff8:	4668      	mov	r0, sp
   24ffa:	f008 fe2d 	bl	2dc58 <sniprintf>
   24ffe:	4669      	mov	r1, sp
   25000:	4630      	mov	r0, r6
   25002:	f00b f88f 	bl	30124 <strstr>
   25006:	3000      	adds	r0, #0
   25008:	bf18      	it	ne
   2500a:	2001      	movne	r0, #1
   2500c:	b004      	add	sp, #16
   2500e:	bd70      	pop	{r4, r5, r6, pc}
   25010:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   25014:	2b00      	cmp	r3, #0
   25016:	d1dc      	bne.n	24fd2 <pdn_state_get_parser+0x16>
   25018:	e7e6      	b.n	24fe8 <pdn_state_get_parser+0x2c>
   2501a:	460d      	mov	r5, r1
   2501c:	e7e4      	b.n	24fe8 <pdn_state_get_parser+0x2c>
   2501e:	bf00      	nop
   25020:	20020810 	.word	0x20020810
   25024:	000313c4 	.word	0x000313c4

00025028 <pdn_id_get_parser>:
   25028:	b570      	push	{r4, r5, r6, lr}
   2502a:	780b      	ldrb	r3, [r1, #0]
   2502c:	4606      	mov	r6, r0
   2502e:	b313      	cbz	r3, 25076 <pdn_id_get_parser+0x4e>
   25030:	4608      	mov	r0, r1
   25032:	2400      	movs	r4, #0
   25034:	460a      	mov	r2, r1
   25036:	2b20      	cmp	r3, #32
   25038:	4615      	mov	r5, r2
   2503a:	d017      	beq.n	2506c <pdn_id_get_parser+0x44>
   2503c:	7013      	strb	r3, [r2, #0]
   2503e:	3401      	adds	r4, #1
   25040:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   25044:	190a      	adds	r2, r1, r4
   25046:	4615      	mov	r5, r2
   25048:	2b00      	cmp	r3, #0
   2504a:	d1f4      	bne.n	25036 <pdn_id_get_parser+0xe>
   2504c:	2300      	movs	r3, #0
   2504e:	4608      	mov	r0, r1
   25050:	702b      	strb	r3, [r5, #0]
   25052:	213a      	movs	r1, #58	; 0x3a
   25054:	f00b f83f 	bl	300d6 <strchr>
   25058:	b130      	cbz	r0, 25068 <pdn_id_get_parser+0x40>
   2505a:	3001      	adds	r0, #1
   2505c:	f00a febb 	bl	2fdd6 <atoi>
   25060:	4b06      	ldr	r3, [pc, #24]	; (2507c <pdn_id_get_parser+0x54>)
   25062:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   25066:	6058      	str	r0, [r3, #4]
   25068:	2000      	movs	r0, #0
   2506a:	bd70      	pop	{r4, r5, r6, pc}
   2506c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   25070:	2b00      	cmp	r3, #0
   25072:	d1e0      	bne.n	25036 <pdn_id_get_parser+0xe>
   25074:	e7ea      	b.n	2504c <pdn_id_get_parser+0x24>
   25076:	460d      	mov	r5, r1
   25078:	e7e8      	b.n	2504c <pdn_id_get_parser+0x24>
   2507a:	bf00      	nop
   2507c:	20020810 	.word	0x20020810

00025080 <context_create_parser>:
   25080:	b570      	push	{r4, r5, r6, lr}
   25082:	780b      	ldrb	r3, [r1, #0]
   25084:	4606      	mov	r6, r0
   25086:	b313      	cbz	r3, 250ce <context_create_parser+0x4e>
   25088:	4608      	mov	r0, r1
   2508a:	2400      	movs	r4, #0
   2508c:	460a      	mov	r2, r1
   2508e:	2b20      	cmp	r3, #32
   25090:	4615      	mov	r5, r2
   25092:	d017      	beq.n	250c4 <context_create_parser+0x44>
   25094:	7013      	strb	r3, [r2, #0]
   25096:	3401      	adds	r4, #1
   25098:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2509c:	190a      	adds	r2, r1, r4
   2509e:	4615      	mov	r5, r2
   250a0:	2b00      	cmp	r3, #0
   250a2:	d1f4      	bne.n	2508e <context_create_parser+0xe>
   250a4:	2300      	movs	r3, #0
   250a6:	4608      	mov	r0, r1
   250a8:	702b      	strb	r3, [r5, #0]
   250aa:	213a      	movs	r1, #58	; 0x3a
   250ac:	f00b f813 	bl	300d6 <strchr>
   250b0:	b130      	cbz	r0, 250c0 <context_create_parser+0x40>
   250b2:	4b08      	ldr	r3, [pc, #32]	; (250d4 <context_create_parser+0x54>)
   250b4:	3001      	adds	r0, #1
   250b6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   250ba:	f00a fe8c 	bl	2fdd6 <atoi>
   250be:	6020      	str	r0, [r4, #0]
   250c0:	2000      	movs	r0, #0
   250c2:	bd70      	pop	{r4, r5, r6, pc}
   250c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   250c8:	2b00      	cmp	r3, #0
   250ca:	d1e0      	bne.n	2508e <context_create_parser+0xe>
   250cc:	e7ea      	b.n	250a4 <context_create_parser+0x24>
   250ce:	460d      	mov	r5, r1
   250d0:	e7e8      	b.n	250a4 <context_create_parser+0x24>
   250d2:	bf00      	nop
   250d4:	20020810 	.word	0x20020810

000250d8 <pdn_interface_init>:
   250d8:	f04f 33ff 	mov.w	r3, #4294967295
   250dc:	b510      	push	{r4, lr}
   250de:	4c09      	ldr	r4, [pc, #36]	; (25104 <pdn_interface_init+0x2c>)
   250e0:	2228      	movs	r2, #40	; 0x28
   250e2:	2100      	movs	r1, #0
   250e4:	4808      	ldr	r0, [pc, #32]	; (25108 <pdn_interface_init+0x30>)
   250e6:	6023      	str	r3, [r4, #0]
   250e8:	f00a fea2 	bl	2fe30 <memset>
   250ec:	f240 2201 	movw	r2, #513	; 0x201
   250f0:	2102      	movs	r1, #2
   250f2:	2066      	movs	r0, #102	; 0x66
   250f4:	f7fd f838 	bl	22168 <at_interface_open>
   250f8:	2800      	cmp	r0, #0
   250fa:	6020      	str	r0, [r4, #0]
   250fc:	bfb4      	ite	lt
   250fe:	2003      	movlt	r0, #3
   25100:	2000      	movge	r0, #0
   25102:	bd10      	pop	{r4, pc}
   25104:	2002070c 	.word	0x2002070c
   25108:	20020810 	.word	0x20020810

0002510c <pdn_interface_open>:
   2510c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25110:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   25114:	b083      	sub	sp, #12
   25116:	f040 80ad 	bne.w	25274 <pdn_interface_open+0x168>
   2511a:	4c5f      	ldr	r4, [pc, #380]	; (25298 <pdn_interface_open+0x18c>)
   2511c:	6825      	ldr	r5, [r4, #0]
   2511e:	b34d      	cbz	r5, 25174 <pdn_interface_open+0x68>
   25120:	6863      	ldr	r3, [r4, #4]
   25122:	2b00      	cmp	r3, #0
   25124:	f000 8098 	beq.w	25258 <pdn_interface_open+0x14c>
   25128:	68a3      	ldr	r3, [r4, #8]
   2512a:	2b00      	cmp	r3, #0
   2512c:	f000 8096 	beq.w	2525c <pdn_interface_open+0x150>
   25130:	68e3      	ldr	r3, [r4, #12]
   25132:	2b00      	cmp	r3, #0
   25134:	f000 8094 	beq.w	25260 <pdn_interface_open+0x154>
   25138:	6923      	ldr	r3, [r4, #16]
   2513a:	2b00      	cmp	r3, #0
   2513c:	f000 8092 	beq.w	25264 <pdn_interface_open+0x158>
   25140:	6963      	ldr	r3, [r4, #20]
   25142:	2b00      	cmp	r3, #0
   25144:	f000 8090 	beq.w	25268 <pdn_interface_open+0x15c>
   25148:	69a3      	ldr	r3, [r4, #24]
   2514a:	2b00      	cmp	r3, #0
   2514c:	f000 808e 	beq.w	2526c <pdn_interface_open+0x160>
   25150:	69e3      	ldr	r3, [r4, #28]
   25152:	2b00      	cmp	r3, #0
   25154:	f000 808c 	beq.w	25270 <pdn_interface_open+0x164>
   25158:	6a23      	ldr	r3, [r4, #32]
   2515a:	b153      	cbz	r3, 25172 <pdn_interface_open+0x66>
   2515c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2515e:	2509      	movs	r5, #9
   25160:	b143      	cbz	r3, 25174 <pdn_interface_open+0x68>
   25162:	200c      	movs	r0, #12
   25164:	f7fb fc42 	bl	209ec <bsd_os_errno_set>
   25168:	f04f 30ff 	mov.w	r0, #4294967295
   2516c:	b003      	add	sp, #12
   2516e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25172:	2508      	movs	r5, #8
   25174:	2074      	movs	r0, #116	; 0x74
   25176:	f7fd fd39 	bl	22bec <nrf_malloc>
   2517a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   2517e:	2800      	cmp	r0, #0
   25180:	d0ef      	beq.n	25162 <pdn_interface_open+0x56>
   25182:	2274      	movs	r2, #116	; 0x74
   25184:	2100      	movs	r1, #0
   25186:	f00a fe53 	bl	2fe30 <memset>
   2518a:	2101      	movs	r1, #1
   2518c:	2003      	movs	r0, #3
   2518e:	f04f 37ff 	mov.w	r7, #4294967295
   25192:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   25196:	4a41      	ldr	r2, [pc, #260]	; (2529c <pdn_interface_open+0x190>)
   25198:	6099      	str	r1, [r3, #8]
   2519a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   2519e:	f44f 7180 	mov.w	r1, #256	; 0x100
   251a2:	6718      	str	r0, [r3, #112]	; 0x70
   251a4:	605f      	str	r7, [r3, #4]
   251a6:	483e      	ldr	r0, [pc, #248]	; (252a0 <pdn_interface_open+0x194>)
   251a8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 252ac <pdn_interface_open+0x1a0>
   251ac:	f008 fd54 	bl	2dc58 <sniprintf>
   251b0:	483b      	ldr	r0, [pc, #236]	; (252a0 <pdn_interface_open+0x194>)
   251b2:	f8d8 9000 	ldr.w	r9, [r8]
   251b6:	2600      	movs	r6, #0
   251b8:	f7f7 ff5e 	bl	1d078 <strlen>
   251bc:	4633      	mov	r3, r6
   251be:	4602      	mov	r2, r0
   251c0:	4937      	ldr	r1, [pc, #220]	; (252a0 <pdn_interface_open+0x194>)
   251c2:	4648      	mov	r0, r9
   251c4:	9601      	str	r6, [sp, #4]
   251c6:	9600      	str	r6, [sp, #0]
   251c8:	f7fc ff60 	bl	2208c <at_interface_write>
   251cc:	4681      	mov	r9, r0
   251ce:	4834      	ldr	r0, [pc, #208]	; (252a0 <pdn_interface_open+0x194>)
   251d0:	f7f7 ff52 	bl	1d078 <strlen>
   251d4:	4548      	cmp	r0, r9
   251d6:	d153      	bne.n	25280 <pdn_interface_open+0x174>
   251d8:	4633      	mov	r3, r6
   251da:	e9cd 6600 	strd	r6, r6, [sp]
   251de:	f44f 7280 	mov.w	r2, #256	; 0x100
   251e2:	492f      	ldr	r1, [pc, #188]	; (252a0 <pdn_interface_open+0x194>)
   251e4:	f8d8 0000 	ldr.w	r0, [r8]
   251e8:	f7fd f854 	bl	22294 <at_interface_read>
   251ec:	4606      	mov	r6, r0
   251ee:	482d      	ldr	r0, [pc, #180]	; (252a4 <pdn_interface_open+0x198>)
   251f0:	f7f7 ff42 	bl	1d078 <strlen>
   251f4:	4286      	cmp	r6, r0
   251f6:	db15      	blt.n	25224 <pdn_interface_open+0x118>
   251f8:	4602      	mov	r2, r0
   251fa:	4929      	ldr	r1, [pc, #164]	; (252a0 <pdn_interface_open+0x194>)
   251fc:	4829      	ldr	r0, [pc, #164]	; (252a4 <pdn_interface_open+0x198>)
   251fe:	f00a ff7f 	bl	30100 <strncmp>
   25202:	b978      	cbnz	r0, 25224 <pdn_interface_open+0x118>
   25204:	4926      	ldr	r1, [pc, #152]	; (252a0 <pdn_interface_open+0x194>)
   25206:	4628      	mov	r0, r5
   25208:	f7ff ff3a 	bl	25080 <context_create_parser>
   2520c:	b9b0      	cbnz	r0, 2523c <pdn_interface_open+0x130>
   2520e:	2202      	movs	r2, #2
   25210:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   25214:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   25218:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   2521c:	609a      	str	r2, [r3, #8]
   2521e:	b003      	add	sp, #12
   25220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25224:	4820      	ldr	r0, [pc, #128]	; (252a8 <pdn_interface_open+0x19c>)
   25226:	f7f7 ff27 	bl	1d078 <strlen>
   2522a:	491d      	ldr	r1, [pc, #116]	; (252a0 <pdn_interface_open+0x194>)
   2522c:	4602      	mov	r2, r0
   2522e:	481e      	ldr	r0, [pc, #120]	; (252a8 <pdn_interface_open+0x19c>)
   25230:	f00a ff66 	bl	30100 <strncmp>
   25234:	b960      	cbnz	r0, 25250 <pdn_interface_open+0x144>
   25236:	2008      	movs	r0, #8
   25238:	f7fb fbd8 	bl	209ec <bsd_os_errno_set>
   2523c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   25240:	f7fd fcde 	bl	22c00 <nrf_free>
   25244:	2300      	movs	r3, #0
   25246:	f04f 30ff 	mov.w	r0, #4294967295
   2524a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   2524e:	e78d      	b.n	2516c <pdn_interface_open+0x60>
   25250:	2005      	movs	r0, #5
   25252:	f7fb fbcb 	bl	209ec <bsd_os_errno_set>
   25256:	e7f1      	b.n	2523c <pdn_interface_open+0x130>
   25258:	2501      	movs	r5, #1
   2525a:	e78b      	b.n	25174 <pdn_interface_open+0x68>
   2525c:	2502      	movs	r5, #2
   2525e:	e789      	b.n	25174 <pdn_interface_open+0x68>
   25260:	2503      	movs	r5, #3
   25262:	e787      	b.n	25174 <pdn_interface_open+0x68>
   25264:	2504      	movs	r5, #4
   25266:	e785      	b.n	25174 <pdn_interface_open+0x68>
   25268:	2505      	movs	r5, #5
   2526a:	e783      	b.n	25174 <pdn_interface_open+0x68>
   2526c:	2506      	movs	r5, #6
   2526e:	e781      	b.n	25174 <pdn_interface_open+0x68>
   25270:	2507      	movs	r5, #7
   25272:	e77f      	b.n	25174 <pdn_interface_open+0x68>
   25274:	2029      	movs	r0, #41	; 0x29
   25276:	f7fb fbb9 	bl	209ec <bsd_os_errno_set>
   2527a:	f04f 30ff 	mov.w	r0, #4294967295
   2527e:	e775      	b.n	2516c <pdn_interface_open+0x60>
   25280:	2005      	movs	r0, #5
   25282:	f7fb fbb3 	bl	209ec <bsd_os_errno_set>
   25286:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   2528a:	f7fd fcb9 	bl	22c00 <nrf_free>
   2528e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   25292:	4638      	mov	r0, r7
   25294:	e76a      	b.n	2516c <pdn_interface_open+0x60>
   25296:	bf00      	nop
   25298:	20020810 	.word	0x20020810
   2529c:	000313a0 	.word	0x000313a0
   252a0:	20020710 	.word	0x20020710
   252a4:	000313b0 	.word	0x000313b0
   252a8:	000313bc 	.word	0x000313bc
   252ac:	2002070c 	.word	0x2002070c

000252b0 <pdn_interface_connect>:
   252b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252b4:	b083      	sub	sp, #12
   252b6:	2900      	cmp	r1, #0
   252b8:	f000 813d 	beq.w	25536 <pdn_interface_connect+0x286>
   252bc:	2a64      	cmp	r2, #100	; 0x64
   252be:	4691      	mov	r9, r2
   252c0:	f200 8139 	bhi.w	25536 <pdn_interface_connect+0x286>
   252c4:	4605      	mov	r5, r0
   252c6:	4608      	mov	r0, r1
   252c8:	4688      	mov	r8, r1
   252ca:	f7f7 fed5 	bl	1d078 <strlen>
   252ce:	2864      	cmp	r0, #100	; 0x64
   252d0:	f200 8131 	bhi.w	25536 <pdn_interface_connect+0x286>
   252d4:	0c2b      	lsrs	r3, r5, #16
   252d6:	4aa5      	ldr	r2, [pc, #660]	; (2556c <pdn_interface_connect+0x2bc>)
   252d8:	041b      	lsls	r3, r3, #16
   252da:	4293      	cmp	r3, r2
   252dc:	f040 8122 	bne.w	25524 <pdn_interface_connect+0x274>
   252e0:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   252e4:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   252e8:	2d09      	cmp	r5, #9
   252ea:	f300 811b 	bgt.w	25524 <pdn_interface_connect+0x274>
   252ee:	4fa0      	ldr	r7, [pc, #640]	; (25570 <pdn_interface_connect+0x2c0>)
   252f0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   252f4:	2b00      	cmp	r3, #0
   252f6:	f000 8115 	beq.w	25524 <pdn_interface_connect+0x274>
   252fa:	689a      	ldr	r2, [r3, #8]
   252fc:	2a00      	cmp	r2, #0
   252fe:	f000 8111 	beq.w	25524 <pdn_interface_connect+0x274>
   25302:	689b      	ldr	r3, [r3, #8]
   25304:	2b02      	cmp	r3, #2
   25306:	f040 810d 	bne.w	25524 <pdn_interface_connect+0x274>
   2530a:	4e9a      	ldr	r6, [pc, #616]	; (25574 <pdn_interface_connect+0x2c4>)
   2530c:	4a9a      	ldr	r2, [pc, #616]	; (25578 <pdn_interface_connect+0x2c8>)
   2530e:	f44f 7180 	mov.w	r1, #256	; 0x100
   25312:	4630      	mov	r0, r6
   25314:	f008 fca0 	bl	2dc58 <sniprintf>
   25318:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   2531c:	4604      	mov	r4, r0
   2531e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   25322:	681b      	ldr	r3, [r3, #0]
   25324:	4a95      	ldr	r2, [pc, #596]	; (2557c <pdn_interface_connect+0x2cc>)
   25326:	1830      	adds	r0, r6, r0
   25328:	f008 fc96 	bl	2dc58 <sniprintf>
   2532c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   25330:	4404      	add	r4, r0
   25332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25334:	f003 0203 	and.w	r2, r3, #3
   25338:	2a03      	cmp	r2, #3
   2533a:	f000 80ea 	beq.w	25512 <pdn_interface_connect+0x262>
   2533e:	079b      	lsls	r3, r3, #30
   25340:	eb06 0004 	add.w	r0, r6, r4
   25344:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   25348:	bf4c      	ite	mi
   2534a:	4b8d      	ldrmi	r3, [pc, #564]	; (25580 <pdn_interface_connect+0x2d0>)
   2534c:	4b8d      	ldrpl	r3, [pc, #564]	; (25584 <pdn_interface_connect+0x2d4>)
   2534e:	4a8e      	ldr	r2, [pc, #568]	; (25588 <pdn_interface_connect+0x2d8>)
   25350:	f008 fc82 	bl	2dc58 <sniprintf>
   25354:	4404      	add	r4, r0
   25356:	4643      	mov	r3, r8
   25358:	4a8c      	ldr	r2, [pc, #560]	; (2558c <pdn_interface_connect+0x2dc>)
   2535a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   2535e:	1930      	adds	r0, r6, r4
   25360:	f008 fc7a 	bl	2dc58 <sniprintf>
   25364:	4420      	add	r0, r4
   25366:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2536a:	f300 80f7 	bgt.w	2555c <pdn_interface_connect+0x2ac>
   2536e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 255ac <pdn_interface_connect+0x2fc>
   25372:	4880      	ldr	r0, [pc, #512]	; (25574 <pdn_interface_connect+0x2c4>)
   25374:	f8da b000 	ldr.w	fp, [sl]
   25378:	2400      	movs	r4, #0
   2537a:	f7f7 fe7d 	bl	1d078 <strlen>
   2537e:	4623      	mov	r3, r4
   25380:	4602      	mov	r2, r0
   25382:	497c      	ldr	r1, [pc, #496]	; (25574 <pdn_interface_connect+0x2c4>)
   25384:	4658      	mov	r0, fp
   25386:	9401      	str	r4, [sp, #4]
   25388:	9400      	str	r4, [sp, #0]
   2538a:	f7fc fe7f 	bl	2208c <at_interface_write>
   2538e:	4683      	mov	fp, r0
   25390:	4878      	ldr	r0, [pc, #480]	; (25574 <pdn_interface_connect+0x2c4>)
   25392:	f7f7 fe71 	bl	1d078 <strlen>
   25396:	4558      	cmp	r0, fp
   25398:	d008      	beq.n	253ac <pdn_interface_connect+0xfc>
   2539a:	2005      	movs	r0, #5
   2539c:	f7fb fb26 	bl	209ec <bsd_os_errno_set>
   253a0:	f04f 34ff 	mov.w	r4, #4294967295
   253a4:	4620      	mov	r0, r4
   253a6:	b003      	add	sp, #12
   253a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253ac:	4623      	mov	r3, r4
   253ae:	e9cd 4400 	strd	r4, r4, [sp]
   253b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   253b6:	496f      	ldr	r1, [pc, #444]	; (25574 <pdn_interface_connect+0x2c4>)
   253b8:	f8da 0000 	ldr.w	r0, [sl]
   253bc:	f7fc ff6a 	bl	22294 <at_interface_read>
   253c0:	4604      	mov	r4, r0
   253c2:	4873      	ldr	r0, [pc, #460]	; (25590 <pdn_interface_connect+0x2e0>)
   253c4:	f7f7 fe58 	bl	1d078 <strlen>
   253c8:	4284      	cmp	r4, r0
   253ca:	f2c0 8091 	blt.w	254f0 <pdn_interface_connect+0x240>
   253ce:	4602      	mov	r2, r0
   253d0:	4968      	ldr	r1, [pc, #416]	; (25574 <pdn_interface_connect+0x2c4>)
   253d2:	486f      	ldr	r0, [pc, #444]	; (25590 <pdn_interface_connect+0x2e0>)
   253d4:	f00a fe94 	bl	30100 <strncmp>
   253d8:	2800      	cmp	r0, #0
   253da:	f040 8089 	bne.w	254f0 <pdn_interface_connect+0x240>
   253de:	4965      	ldr	r1, [pc, #404]	; (25574 <pdn_interface_connect+0x2c4>)
   253e0:	4628      	mov	r0, r5
   253e2:	f7ff fde9 	bl	24fb8 <ok_rsp_parser>
   253e6:	4604      	mov	r4, r0
   253e8:	2800      	cmp	r0, #0
   253ea:	d1db      	bne.n	253a4 <pdn_interface_connect+0xf4>
   253ec:	4a69      	ldr	r2, [pc, #420]	; (25594 <pdn_interface_connect+0x2e4>)
   253ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   253f2:	4860      	ldr	r0, [pc, #384]	; (25574 <pdn_interface_connect+0x2c4>)
   253f4:	f008 fc30 	bl	2dc58 <sniprintf>
   253f8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   253fc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   25400:	681b      	ldr	r3, [r3, #0]
   25402:	4a65      	ldr	r2, [pc, #404]	; (25598 <pdn_interface_connect+0x2e8>)
   25404:	4430      	add	r0, r6
   25406:	f008 fc27 	bl	2dc58 <sniprintf>
   2540a:	485a      	ldr	r0, [pc, #360]	; (25574 <pdn_interface_connect+0x2c4>)
   2540c:	f8da b000 	ldr.w	fp, [sl]
   25410:	f7f7 fe32 	bl	1d078 <strlen>
   25414:	4623      	mov	r3, r4
   25416:	4602      	mov	r2, r0
   25418:	4956      	ldr	r1, [pc, #344]	; (25574 <pdn_interface_connect+0x2c4>)
   2541a:	4658      	mov	r0, fp
   2541c:	9401      	str	r4, [sp, #4]
   2541e:	9400      	str	r4, [sp, #0]
   25420:	f7fc fe34 	bl	2208c <at_interface_write>
   25424:	4683      	mov	fp, r0
   25426:	4853      	ldr	r0, [pc, #332]	; (25574 <pdn_interface_connect+0x2c4>)
   25428:	f7f7 fe26 	bl	1d078 <strlen>
   2542c:	4558      	cmp	r0, fp
   2542e:	d1b4      	bne.n	2539a <pdn_interface_connect+0xea>
   25430:	4623      	mov	r3, r4
   25432:	f44f 7280 	mov.w	r2, #256	; 0x100
   25436:	494f      	ldr	r1, [pc, #316]	; (25574 <pdn_interface_connect+0x2c4>)
   25438:	f8da 0000 	ldr.w	r0, [sl]
   2543c:	e9cd 4400 	strd	r4, r4, [sp]
   25440:	f7fc ff28 	bl	22294 <at_interface_read>
   25444:	4683      	mov	fp, r0
   25446:	4852      	ldr	r0, [pc, #328]	; (25590 <pdn_interface_connect+0x2e0>)
   25448:	f7f7 fe16 	bl	1d078 <strlen>
   2544c:	4583      	cmp	fp, r0
   2544e:	db4f      	blt.n	254f0 <pdn_interface_connect+0x240>
   25450:	4602      	mov	r2, r0
   25452:	4948      	ldr	r1, [pc, #288]	; (25574 <pdn_interface_connect+0x2c4>)
   25454:	484e      	ldr	r0, [pc, #312]	; (25590 <pdn_interface_connect+0x2e0>)
   25456:	f00a fe53 	bl	30100 <strncmp>
   2545a:	2800      	cmp	r0, #0
   2545c:	d148      	bne.n	254f0 <pdn_interface_connect+0x240>
   2545e:	2103      	movs	r1, #3
   25460:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   25464:	464a      	mov	r2, r9
   25466:	6099      	str	r1, [r3, #8]
   25468:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   2546c:	4641      	mov	r1, r8
   2546e:	300c      	adds	r0, #12
   25470:	f00a fcd1 	bl	2fe16 <memcpy>
   25474:	4a49      	ldr	r2, [pc, #292]	; (2559c <pdn_interface_connect+0x2ec>)
   25476:	f44f 7180 	mov.w	r1, #256	; 0x100
   2547a:	483e      	ldr	r0, [pc, #248]	; (25574 <pdn_interface_connect+0x2c4>)
   2547c:	f008 fbec 	bl	2dc58 <sniprintf>
   25480:	4601      	mov	r1, r0
   25482:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   25486:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   2548a:	681b      	ldr	r3, [r3, #0]
   2548c:	4a42      	ldr	r2, [pc, #264]	; (25598 <pdn_interface_connect+0x2e8>)
   2548e:	1830      	adds	r0, r6, r0
   25490:	f008 fbe2 	bl	2dc58 <sniprintf>
   25494:	4837      	ldr	r0, [pc, #220]	; (25574 <pdn_interface_connect+0x2c4>)
   25496:	f8da 6000 	ldr.w	r6, [sl]
   2549a:	f7f7 fded 	bl	1d078 <strlen>
   2549e:	4623      	mov	r3, r4
   254a0:	4602      	mov	r2, r0
   254a2:	4934      	ldr	r1, [pc, #208]	; (25574 <pdn_interface_connect+0x2c4>)
   254a4:	4630      	mov	r0, r6
   254a6:	9401      	str	r4, [sp, #4]
   254a8:	9400      	str	r4, [sp, #0]
   254aa:	f7fc fdef 	bl	2208c <at_interface_write>
   254ae:	4606      	mov	r6, r0
   254b0:	4830      	ldr	r0, [pc, #192]	; (25574 <pdn_interface_connect+0x2c4>)
   254b2:	f7f7 fde1 	bl	1d078 <strlen>
   254b6:	42b0      	cmp	r0, r6
   254b8:	d153      	bne.n	25562 <pdn_interface_connect+0x2b2>
   254ba:	4623      	mov	r3, r4
   254bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   254c0:	492c      	ldr	r1, [pc, #176]	; (25574 <pdn_interface_connect+0x2c4>)
   254c2:	f8da 0000 	ldr.w	r0, [sl]
   254c6:	e9cd 4400 	strd	r4, r4, [sp]
   254ca:	f7fc fee3 	bl	22294 <at_interface_read>
   254ce:	4606      	mov	r6, r0
   254d0:	4833      	ldr	r0, [pc, #204]	; (255a0 <pdn_interface_connect+0x2f0>)
   254d2:	f7f7 fdd1 	bl	1d078 <strlen>
   254d6:	4286      	cmp	r6, r0
   254d8:	db33      	blt.n	25542 <pdn_interface_connect+0x292>
   254da:	4602      	mov	r2, r0
   254dc:	4925      	ldr	r1, [pc, #148]	; (25574 <pdn_interface_connect+0x2c4>)
   254de:	4830      	ldr	r0, [pc, #192]	; (255a0 <pdn_interface_connect+0x2f0>)
   254e0:	f00a fe0e 	bl	30100 <strncmp>
   254e4:	bb68      	cbnz	r0, 25542 <pdn_interface_connect+0x292>
   254e6:	4628      	mov	r0, r5
   254e8:	4922      	ldr	r1, [pc, #136]	; (25574 <pdn_interface_connect+0x2c4>)
   254ea:	f7ff fd9d 	bl	25028 <pdn_id_get_parser>
   254ee:	e759      	b.n	253a4 <pdn_interface_connect+0xf4>
   254f0:	482c      	ldr	r0, [pc, #176]	; (255a4 <pdn_interface_connect+0x2f4>)
   254f2:	f7f7 fdc1 	bl	1d078 <strlen>
   254f6:	491f      	ldr	r1, [pc, #124]	; (25574 <pdn_interface_connect+0x2c4>)
   254f8:	4602      	mov	r2, r0
   254fa:	482a      	ldr	r0, [pc, #168]	; (255a4 <pdn_interface_connect+0x2f4>)
   254fc:	f00a fe00 	bl	30100 <strncmp>
   25500:	2800      	cmp	r0, #0
   25502:	f47f af4a 	bne.w	2539a <pdn_interface_connect+0xea>
   25506:	2008      	movs	r0, #8
   25508:	f7fb fa70 	bl	209ec <bsd_os_errno_set>
   2550c:	f04f 34ff 	mov.w	r4, #4294967295
   25510:	e748      	b.n	253a4 <pdn_interface_connect+0xf4>
   25512:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   25516:	1930      	adds	r0, r6, r4
   25518:	4b23      	ldr	r3, [pc, #140]	; (255a8 <pdn_interface_connect+0x2f8>)
   2551a:	4a1b      	ldr	r2, [pc, #108]	; (25588 <pdn_interface_connect+0x2d8>)
   2551c:	f008 fb9c 	bl	2dc58 <sniprintf>
   25520:	4404      	add	r4, r0
   25522:	e718      	b.n	25356 <pdn_interface_connect+0xa6>
   25524:	f04f 34ff 	mov.w	r4, #4294967295
   25528:	2009      	movs	r0, #9
   2552a:	f7fb fa5f 	bl	209ec <bsd_os_errno_set>
   2552e:	4620      	mov	r0, r4
   25530:	b003      	add	sp, #12
   25532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25536:	2016      	movs	r0, #22
   25538:	f7fb fa58 	bl	209ec <bsd_os_errno_set>
   2553c:	f04f 34ff 	mov.w	r4, #4294967295
   25540:	e730      	b.n	253a4 <pdn_interface_connect+0xf4>
   25542:	4818      	ldr	r0, [pc, #96]	; (255a4 <pdn_interface_connect+0x2f4>)
   25544:	f7f7 fd98 	bl	1d078 <strlen>
   25548:	490a      	ldr	r1, [pc, #40]	; (25574 <pdn_interface_connect+0x2c4>)
   2554a:	4602      	mov	r2, r0
   2554c:	4815      	ldr	r0, [pc, #84]	; (255a4 <pdn_interface_connect+0x2f4>)
   2554e:	f00a fdd7 	bl	30100 <strncmp>
   25552:	b930      	cbnz	r0, 25562 <pdn_interface_connect+0x2b2>
   25554:	2008      	movs	r0, #8
   25556:	f7fb fa49 	bl	209ec <bsd_os_errno_set>
   2555a:	e723      	b.n	253a4 <pdn_interface_connect+0xf4>
   2555c:	f04f 34ff 	mov.w	r4, #4294967295
   25560:	e720      	b.n	253a4 <pdn_interface_connect+0xf4>
   25562:	2005      	movs	r0, #5
   25564:	f7fb fa42 	bl	209ec <bsd_os_errno_set>
   25568:	e71c      	b.n	253a4 <pdn_interface_connect+0xf4>
   2556a:	bf00      	nop
   2556c:	789a0000 	.word	0x789a0000
   25570:	20020810 	.word	0x20020810
   25574:	20020710 	.word	0x20020710
   25578:	00031328 	.word	0x00031328
   2557c:	00031334 	.word	0x00031334
   25580:	00031348 	.word	0x00031348
   25584:	00031350 	.word	0x00031350
   25588:	00031340 	.word	0x00031340
   2558c:	00031384 	.word	0x00031384
   25590:	00031354 	.word	0x00031354
   25594:	00031358 	.word	0x00031358
   25598:	00031364 	.word	0x00031364
   2559c:	00031368 	.word	0x00031368
   255a0:	00031378 	.word	0x00031378
   255a4:	000313bc 	.word	0x000313bc
   255a8:	00031338 	.word	0x00031338
   255ac:	2002070c 	.word	0x2002070c

000255b0 <pdn_interface_close>:
   255b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   255b4:	4a64      	ldr	r2, [pc, #400]	; (25748 <pdn_interface_close+0x198>)
   255b6:	0c03      	lsrs	r3, r0, #16
   255b8:	041b      	lsls	r3, r3, #16
   255ba:	4293      	cmp	r3, r2
   255bc:	b083      	sub	sp, #12
   255be:	f040 809d 	bne.w	256fc <pdn_interface_close+0x14c>
   255c2:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   255c6:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   255ca:	2c09      	cmp	r4, #9
   255cc:	f300 8096 	bgt.w	256fc <pdn_interface_close+0x14c>
   255d0:	4d5e      	ldr	r5, [pc, #376]	; (2574c <pdn_interface_close+0x19c>)
   255d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   255d6:	2800      	cmp	r0, #0
   255d8:	f000 8090 	beq.w	256fc <pdn_interface_close+0x14c>
   255dc:	6883      	ldr	r3, [r0, #8]
   255de:	2b00      	cmp	r3, #0
   255e0:	f000 808c 	beq.w	256fc <pdn_interface_close+0x14c>
   255e4:	6883      	ldr	r3, [r0, #8]
   255e6:	2b03      	cmp	r3, #3
   255e8:	d008      	beq.n	255fc <pdn_interface_close+0x4c>
   255ea:	f7fd fb09 	bl	22c00 <nrf_free>
   255ee:	2300      	movs	r3, #0
   255f0:	4618      	mov	r0, r3
   255f2:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   255f6:	b003      	add	sp, #12
   255f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   255fc:	4e54      	ldr	r6, [pc, #336]	; (25750 <pdn_interface_close+0x1a0>)
   255fe:	4a55      	ldr	r2, [pc, #340]	; (25754 <pdn_interface_close+0x1a4>)
   25600:	f44f 7180 	mov.w	r1, #256	; 0x100
   25604:	4630      	mov	r0, r6
   25606:	f008 fb27 	bl	2dc58 <sniprintf>
   2560a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2560e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   25612:	681b      	ldr	r3, [r3, #0]
   25614:	4a50      	ldr	r2, [pc, #320]	; (25758 <pdn_interface_close+0x1a8>)
   25616:	4430      	add	r0, r6
   25618:	f8df 814c 	ldr.w	r8, [pc, #332]	; 25768 <pdn_interface_close+0x1b8>
   2561c:	f008 fb1c 	bl	2dc58 <sniprintf>
   25620:	4630      	mov	r0, r6
   25622:	f8d8 9000 	ldr.w	r9, [r8]
   25626:	2700      	movs	r7, #0
   25628:	f7f7 fd26 	bl	1d078 <strlen>
   2562c:	4631      	mov	r1, r6
   2562e:	4602      	mov	r2, r0
   25630:	463b      	mov	r3, r7
   25632:	4648      	mov	r0, r9
   25634:	9701      	str	r7, [sp, #4]
   25636:	9700      	str	r7, [sp, #0]
   25638:	f7fc fd28 	bl	2208c <at_interface_write>
   2563c:	4681      	mov	r9, r0
   2563e:	4630      	mov	r0, r6
   25640:	f7f7 fd1a 	bl	1d078 <strlen>
   25644:	4548      	cmp	r0, r9
   25646:	d176      	bne.n	25736 <pdn_interface_close+0x186>
   25648:	463b      	mov	r3, r7
   2564a:	e9cd 7700 	strd	r7, r7, [sp]
   2564e:	f44f 7280 	mov.w	r2, #256	; 0x100
   25652:	4631      	mov	r1, r6
   25654:	f8d8 0000 	ldr.w	r0, [r8]
   25658:	f7fc fe1c 	bl	22294 <at_interface_read>
   2565c:	4607      	mov	r7, r0
   2565e:	483f      	ldr	r0, [pc, #252]	; (2575c <pdn_interface_close+0x1ac>)
   25660:	f7f7 fd0a 	bl	1d078 <strlen>
   25664:	4287      	cmp	r7, r0
   25666:	da4f      	bge.n	25708 <pdn_interface_close+0x158>
   25668:	483d      	ldr	r0, [pc, #244]	; (25760 <pdn_interface_close+0x1b0>)
   2566a:	f7f7 fd05 	bl	1d078 <strlen>
   2566e:	4938      	ldr	r1, [pc, #224]	; (25750 <pdn_interface_close+0x1a0>)
   25670:	4602      	mov	r2, r0
   25672:	483b      	ldr	r0, [pc, #236]	; (25760 <pdn_interface_close+0x1b0>)
   25674:	f00a fd44 	bl	30100 <strncmp>
   25678:	2800      	cmp	r0, #0
   2567a:	d15c      	bne.n	25736 <pdn_interface_close+0x186>
   2567c:	2008      	movs	r0, #8
   2567e:	f7fb f9b5 	bl	209ec <bsd_os_errno_set>
   25682:	4a38      	ldr	r2, [pc, #224]	; (25764 <pdn_interface_close+0x1b4>)
   25684:	f44f 7180 	mov.w	r1, #256	; 0x100
   25688:	4831      	ldr	r0, [pc, #196]	; (25750 <pdn_interface_close+0x1a0>)
   2568a:	f008 fae5 	bl	2dc58 <sniprintf>
   2568e:	4601      	mov	r1, r0
   25690:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   25694:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   25698:	681b      	ldr	r3, [r3, #0]
   2569a:	4a2f      	ldr	r2, [pc, #188]	; (25758 <pdn_interface_close+0x1a8>)
   2569c:	1830      	adds	r0, r6, r0
   2569e:	f008 fadb 	bl	2dc58 <sniprintf>
   256a2:	482b      	ldr	r0, [pc, #172]	; (25750 <pdn_interface_close+0x1a0>)
   256a4:	f8d8 7000 	ldr.w	r7, [r8]
   256a8:	2600      	movs	r6, #0
   256aa:	f7f7 fce5 	bl	1d078 <strlen>
   256ae:	4633      	mov	r3, r6
   256b0:	4602      	mov	r2, r0
   256b2:	4927      	ldr	r1, [pc, #156]	; (25750 <pdn_interface_close+0x1a0>)
   256b4:	4638      	mov	r0, r7
   256b6:	9601      	str	r6, [sp, #4]
   256b8:	9600      	str	r6, [sp, #0]
   256ba:	f7fc fce7 	bl	2208c <at_interface_write>
   256be:	4607      	mov	r7, r0
   256c0:	4823      	ldr	r0, [pc, #140]	; (25750 <pdn_interface_close+0x1a0>)
   256c2:	f7f7 fcd9 	bl	1d078 <strlen>
   256c6:	42b8      	cmp	r0, r7
   256c8:	d139      	bne.n	2573e <pdn_interface_close+0x18e>
   256ca:	4633      	mov	r3, r6
   256cc:	e9cd 6600 	strd	r6, r6, [sp]
   256d0:	f44f 7280 	mov.w	r2, #256	; 0x100
   256d4:	491e      	ldr	r1, [pc, #120]	; (25750 <pdn_interface_close+0x1a0>)
   256d6:	f8d8 0000 	ldr.w	r0, [r8]
   256da:	f7fc fddb 	bl	22294 <at_interface_read>
   256de:	4606      	mov	r6, r0
   256e0:	481e      	ldr	r0, [pc, #120]	; (2575c <pdn_interface_close+0x1ac>)
   256e2:	f7f7 fcc9 	bl	1d078 <strlen>
   256e6:	4286      	cmp	r6, r0
   256e8:	db16      	blt.n	25718 <pdn_interface_close+0x168>
   256ea:	4602      	mov	r2, r0
   256ec:	4918      	ldr	r1, [pc, #96]	; (25750 <pdn_interface_close+0x1a0>)
   256ee:	481b      	ldr	r0, [pc, #108]	; (2575c <pdn_interface_close+0x1ac>)
   256f0:	f00a fd06 	bl	30100 <strncmp>
   256f4:	b980      	cbnz	r0, 25718 <pdn_interface_close+0x168>
   256f6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   256fa:	e776      	b.n	255ea <pdn_interface_close+0x3a>
   256fc:	2009      	movs	r0, #9
   256fe:	f7fb f975 	bl	209ec <bsd_os_errno_set>
   25702:	f04f 30ff 	mov.w	r0, #4294967295
   25706:	e776      	b.n	255f6 <pdn_interface_close+0x46>
   25708:	4602      	mov	r2, r0
   2570a:	4631      	mov	r1, r6
   2570c:	4813      	ldr	r0, [pc, #76]	; (2575c <pdn_interface_close+0x1ac>)
   2570e:	f00a fcf7 	bl	30100 <strncmp>
   25712:	2800      	cmp	r0, #0
   25714:	d0b5      	beq.n	25682 <pdn_interface_close+0xd2>
   25716:	e7a7      	b.n	25668 <pdn_interface_close+0xb8>
   25718:	4811      	ldr	r0, [pc, #68]	; (25760 <pdn_interface_close+0x1b0>)
   2571a:	f7f7 fcad 	bl	1d078 <strlen>
   2571e:	490c      	ldr	r1, [pc, #48]	; (25750 <pdn_interface_close+0x1a0>)
   25720:	4602      	mov	r2, r0
   25722:	480f      	ldr	r0, [pc, #60]	; (25760 <pdn_interface_close+0x1b0>)
   25724:	f00a fcec 	bl	30100 <strncmp>
   25728:	b948      	cbnz	r0, 2573e <pdn_interface_close+0x18e>
   2572a:	2008      	movs	r0, #8
   2572c:	f7fb f95e 	bl	209ec <bsd_os_errno_set>
   25730:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   25734:	e759      	b.n	255ea <pdn_interface_close+0x3a>
   25736:	2005      	movs	r0, #5
   25738:	f7fb f958 	bl	209ec <bsd_os_errno_set>
   2573c:	e7a1      	b.n	25682 <pdn_interface_close+0xd2>
   2573e:	2005      	movs	r0, #5
   25740:	f7fb f954 	bl	209ec <bsd_os_errno_set>
   25744:	e7d7      	b.n	256f6 <pdn_interface_close+0x146>
   25746:	bf00      	nop
   25748:	789a0000 	.word	0x789a0000
   2574c:	20020810 	.word	0x20020810
   25750:	20020710 	.word	0x20020710
   25754:	0003131c 	.word	0x0003131c
   25758:	00031364 	.word	0x00031364
   2575c:	00031354 	.word	0x00031354
   25760:	000313bc 	.word	0x000313bc
   25764:	00031328 	.word	0x00031328
   25768:	2002070c 	.word	0x2002070c

0002576c <pdn_interface_setopt>:
   2576c:	b510      	push	{r4, lr}
   2576e:	f240 2402 	movw	r4, #514	; 0x202
   25772:	42a1      	cmp	r1, r4
   25774:	d10d      	bne.n	25792 <pdn_interface_setopt+0x26>
   25776:	b163      	cbz	r3, 25792 <pdn_interface_setopt+0x26>
   25778:	9902      	ldr	r1, [sp, #8]
   2577a:	b151      	cbz	r1, 25792 <pdn_interface_setopt+0x26>
   2577c:	0c01      	lsrs	r1, r0, #16
   2577e:	4c25      	ldr	r4, [pc, #148]	; (25814 <pdn_interface_setopt+0xa8>)
   25780:	0409      	lsls	r1, r1, #16
   25782:	42a1      	cmp	r1, r4
   25784:	d00b      	beq.n	2579e <pdn_interface_setopt+0x32>
   25786:	2009      	movs	r0, #9
   25788:	f7fb f930 	bl	209ec <bsd_os_errno_set>
   2578c:	f04f 30ff 	mov.w	r0, #4294967295
   25790:	bd10      	pop	{r4, pc}
   25792:	2016      	movs	r0, #22
   25794:	f7fb f92a 	bl	209ec <bsd_os_errno_set>
   25798:	f04f 30ff 	mov.w	r0, #4294967295
   2579c:	bd10      	pop	{r4, pc}
   2579e:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   257a2:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   257a6:	2809      	cmp	r0, #9
   257a8:	dced      	bgt.n	25786 <pdn_interface_setopt+0x1a>
   257aa:	491b      	ldr	r1, [pc, #108]	; (25818 <pdn_interface_setopt+0xac>)
   257ac:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   257b0:	2900      	cmp	r1, #0
   257b2:	d0e8      	beq.n	25786 <pdn_interface_setopt+0x1a>
   257b4:	6888      	ldr	r0, [r1, #8]
   257b6:	2800      	cmp	r0, #0
   257b8:	d0e5      	beq.n	25786 <pdn_interface_setopt+0x1a>
   257ba:	2a01      	cmp	r2, #1
   257bc:	d001      	beq.n	257c2 <pdn_interface_setopt+0x56>
   257be:	202d      	movs	r0, #45	; 0x2d
   257c0:	e7e8      	b.n	25794 <pdn_interface_setopt+0x28>
   257c2:	688a      	ldr	r2, [r1, #8]
   257c4:	b1fa      	cbz	r2, 25806 <pdn_interface_setopt+0x9a>
   257c6:	688a      	ldr	r2, [r1, #8]
   257c8:	2a03      	cmp	r2, #3
   257ca:	d01c      	beq.n	25806 <pdn_interface_setopt+0x9a>
   257cc:	688a      	ldr	r2, [r1, #8]
   257ce:	2a04      	cmp	r2, #4
   257d0:	d019      	beq.n	25806 <pdn_interface_setopt+0x9a>
   257d2:	9a02      	ldr	r2, [sp, #8]
   257d4:	0890      	lsrs	r0, r2, #2
   257d6:	1e42      	subs	r2, r0, #1
   257d8:	2a01      	cmp	r2, #1
   257da:	d8da      	bhi.n	25792 <pdn_interface_setopt+0x26>
   257dc:	9a02      	ldr	r2, [sp, #8]
   257de:	0792      	lsls	r2, r2, #30
   257e0:	d1d7      	bne.n	25792 <pdn_interface_setopt+0x26>
   257e2:	681a      	ldr	r2, [r3, #0]
   257e4:	2a02      	cmp	r2, #2
   257e6:	d010      	beq.n	2580a <pdn_interface_setopt+0x9e>
   257e8:	2a0a      	cmp	r2, #10
   257ea:	d1d2      	bne.n	25792 <pdn_interface_setopt+0x26>
   257ec:	2202      	movs	r2, #2
   257ee:	2802      	cmp	r0, #2
   257f0:	d106      	bne.n	25800 <pdn_interface_setopt+0x94>
   257f2:	685b      	ldr	r3, [r3, #4]
   257f4:	2b02      	cmp	r3, #2
   257f6:	d00a      	beq.n	2580e <pdn_interface_setopt+0xa2>
   257f8:	2b0a      	cmp	r3, #10
   257fa:	d1ca      	bne.n	25792 <pdn_interface_setopt+0x26>
   257fc:	f042 0202 	orr.w	r2, r2, #2
   25800:	670a      	str	r2, [r1, #112]	; 0x70
   25802:	2000      	movs	r0, #0
   25804:	e7c6      	b.n	25794 <pdn_interface_setopt+0x28>
   25806:	200e      	movs	r0, #14
   25808:	e7c4      	b.n	25794 <pdn_interface_setopt+0x28>
   2580a:	2201      	movs	r2, #1
   2580c:	e7ef      	b.n	257ee <pdn_interface_setopt+0x82>
   2580e:	f042 0201 	orr.w	r2, r2, #1
   25812:	e7f5      	b.n	25800 <pdn_interface_setopt+0x94>
   25814:	789a0000 	.word	0x789a0000
   25818:	20020810 	.word	0x20020810

0002581c <pdn_interface_getopt>:
   2581c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25820:	f240 2402 	movw	r4, #514	; 0x202
   25824:	b083      	sub	sp, #12
   25826:	42a1      	cmp	r1, r4
   25828:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2582a:	f040 80a9 	bne.w	25980 <pdn_interface_getopt+0x164>
   2582e:	461e      	mov	r6, r3
   25830:	2b00      	cmp	r3, #0
   25832:	f000 80a5 	beq.w	25980 <pdn_interface_getopt+0x164>
   25836:	2d00      	cmp	r5, #0
   25838:	f000 80a2 	beq.w	25980 <pdn_interface_getopt+0x164>
   2583c:	0c03      	lsrs	r3, r0, #16
   2583e:	4956      	ldr	r1, [pc, #344]	; (25998 <pdn_interface_getopt+0x17c>)
   25840:	041b      	lsls	r3, r3, #16
   25842:	428b      	cmp	r3, r1
   25844:	f040 8082 	bne.w	2594c <pdn_interface_getopt+0x130>
   25848:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2584c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   25850:	2c09      	cmp	r4, #9
   25852:	dc7b      	bgt.n	2594c <pdn_interface_getopt+0x130>
   25854:	4b51      	ldr	r3, [pc, #324]	; (2599c <pdn_interface_getopt+0x180>)
   25856:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2585a:	2b00      	cmp	r3, #0
   2585c:	d076      	beq.n	2594c <pdn_interface_getopt+0x130>
   2585e:	6899      	ldr	r1, [r3, #8]
   25860:	2900      	cmp	r1, #0
   25862:	d073      	beq.n	2594c <pdn_interface_getopt+0x130>
   25864:	2a02      	cmp	r2, #2
   25866:	d00e      	beq.n	25886 <pdn_interface_getopt+0x6a>
   25868:	2a03      	cmp	r2, #3
   2586a:	d008      	beq.n	2587e <pdn_interface_getopt+0x62>
   2586c:	2a01      	cmp	r2, #1
   2586e:	d015      	beq.n	2589c <pdn_interface_getopt+0x80>
   25870:	202d      	movs	r0, #45	; 0x2d
   25872:	f7fb f8bb 	bl	209ec <bsd_os_errno_set>
   25876:	2000      	movs	r0, #0
   25878:	b003      	add	sp, #12
   2587a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2587e:	682b      	ldr	r3, [r5, #0]
   25880:	bb23      	cbnz	r3, 258cc <pdn_interface_getopt+0xb0>
   25882:	2016      	movs	r0, #22
   25884:	e7f5      	b.n	25872 <pdn_interface_getopt+0x56>
   25886:	682a      	ldr	r2, [r5, #0]
   25888:	2a00      	cmp	r2, #0
   2588a:	d0fa      	beq.n	25882 <pdn_interface_getopt+0x66>
   2588c:	2201      	movs	r2, #1
   2588e:	2000      	movs	r0, #0
   25890:	681b      	ldr	r3, [r3, #0]
   25892:	7033      	strb	r3, [r6, #0]
   25894:	602a      	str	r2, [r5, #0]
   25896:	b003      	add	sp, #12
   25898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2589c:	689a      	ldr	r2, [r3, #8]
   2589e:	2a00      	cmp	r2, #0
   258a0:	d052      	beq.n	25948 <pdn_interface_getopt+0x12c>
   258a2:	689a      	ldr	r2, [r3, #8]
   258a4:	2a04      	cmp	r2, #4
   258a6:	d04f      	beq.n	25948 <pdn_interface_getopt+0x12c>
   258a8:	682a      	ldr	r2, [r5, #0]
   258aa:	2a07      	cmp	r2, #7
   258ac:	d9e9      	bls.n	25882 <pdn_interface_getopt+0x66>
   258ae:	f012 0203 	ands.w	r2, r2, #3
   258b2:	d1e6      	bne.n	25882 <pdn_interface_getopt+0x66>
   258b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   258b6:	0799      	lsls	r1, r3, #30
   258b8:	d45d      	bmi.n	25976 <pdn_interface_getopt+0x15a>
   258ba:	2104      	movs	r1, #4
   258bc:	07db      	lsls	r3, r3, #31
   258be:	d502      	bpl.n	258c6 <pdn_interface_getopt+0xaa>
   258c0:	2302      	movs	r3, #2
   258c2:	50b3      	str	r3, [r6, r2]
   258c4:	460a      	mov	r2, r1
   258c6:	602a      	str	r2, [r5, #0]
   258c8:	2000      	movs	r0, #0
   258ca:	e7d5      	b.n	25878 <pdn_interface_getopt+0x5c>
   258cc:	4a34      	ldr	r2, [pc, #208]	; (259a0 <pdn_interface_getopt+0x184>)
   258ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   258d2:	4834      	ldr	r0, [pc, #208]	; (259a4 <pdn_interface_getopt+0x188>)
   258d4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 259b0 <pdn_interface_getopt+0x194>
   258d8:	f008 f9be 	bl	2dc58 <sniprintf>
   258dc:	4831      	ldr	r0, [pc, #196]	; (259a4 <pdn_interface_getopt+0x188>)
   258de:	f8d8 9000 	ldr.w	r9, [r8]
   258e2:	2700      	movs	r7, #0
   258e4:	f7f7 fbc8 	bl	1d078 <strlen>
   258e8:	463b      	mov	r3, r7
   258ea:	4602      	mov	r2, r0
   258ec:	492d      	ldr	r1, [pc, #180]	; (259a4 <pdn_interface_getopt+0x188>)
   258ee:	4648      	mov	r0, r9
   258f0:	9701      	str	r7, [sp, #4]
   258f2:	9700      	str	r7, [sp, #0]
   258f4:	f7fc fbca 	bl	2208c <at_interface_write>
   258f8:	4681      	mov	r9, r0
   258fa:	482a      	ldr	r0, [pc, #168]	; (259a4 <pdn_interface_getopt+0x188>)
   258fc:	f7f7 fbbc 	bl	1d078 <strlen>
   25900:	4548      	cmp	r0, r9
   25902:	d143      	bne.n	2598c <pdn_interface_getopt+0x170>
   25904:	463b      	mov	r3, r7
   25906:	e9cd 7700 	strd	r7, r7, [sp]
   2590a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2590e:	4925      	ldr	r1, [pc, #148]	; (259a4 <pdn_interface_getopt+0x188>)
   25910:	f8d8 0000 	ldr.w	r0, [r8]
   25914:	f7fc fcbe 	bl	22294 <at_interface_read>
   25918:	4607      	mov	r7, r0
   2591a:	4823      	ldr	r0, [pc, #140]	; (259a8 <pdn_interface_getopt+0x18c>)
   2591c:	f7f7 fbac 	bl	1d078 <strlen>
   25920:	4287      	cmp	r7, r0
   25922:	db19      	blt.n	25958 <pdn_interface_getopt+0x13c>
   25924:	4602      	mov	r2, r0
   25926:	491f      	ldr	r1, [pc, #124]	; (259a4 <pdn_interface_getopt+0x188>)
   25928:	481f      	ldr	r0, [pc, #124]	; (259a8 <pdn_interface_getopt+0x18c>)
   2592a:	f00a fbe9 	bl	30100 <strncmp>
   2592e:	4607      	mov	r7, r0
   25930:	b990      	cbnz	r0, 25958 <pdn_interface_getopt+0x13c>
   25932:	4620      	mov	r0, r4
   25934:	491b      	ldr	r1, [pc, #108]	; (259a4 <pdn_interface_getopt+0x188>)
   25936:	f7ff fb41 	bl	24fbc <pdn_state_get_parser>
   2593a:	2800      	cmp	r0, #0
   2593c:	db99      	blt.n	25872 <pdn_interface_getopt+0x56>
   2593e:	2301      	movs	r3, #1
   25940:	7030      	strb	r0, [r6, #0]
   25942:	4638      	mov	r0, r7
   25944:	602b      	str	r3, [r5, #0]
   25946:	e797      	b.n	25878 <pdn_interface_getopt+0x5c>
   25948:	200e      	movs	r0, #14
   2594a:	e792      	b.n	25872 <pdn_interface_getopt+0x56>
   2594c:	2009      	movs	r0, #9
   2594e:	f7fb f84d 	bl	209ec <bsd_os_errno_set>
   25952:	f04f 30ff 	mov.w	r0, #4294967295
   25956:	e78f      	b.n	25878 <pdn_interface_getopt+0x5c>
   25958:	4814      	ldr	r0, [pc, #80]	; (259ac <pdn_interface_getopt+0x190>)
   2595a:	f7f7 fb8d 	bl	1d078 <strlen>
   2595e:	4911      	ldr	r1, [pc, #68]	; (259a4 <pdn_interface_getopt+0x188>)
   25960:	4602      	mov	r2, r0
   25962:	4812      	ldr	r0, [pc, #72]	; (259ac <pdn_interface_getopt+0x190>)
   25964:	f00a fbcc 	bl	30100 <strncmp>
   25968:	b980      	cbnz	r0, 2598c <pdn_interface_getopt+0x170>
   2596a:	2008      	movs	r0, #8
   2596c:	f7fb f83e 	bl	209ec <bsd_os_errno_set>
   25970:	f04f 30ff 	mov.w	r0, #4294967295
   25974:	e77d      	b.n	25872 <pdn_interface_getopt+0x56>
   25976:	220a      	movs	r2, #10
   25978:	2108      	movs	r1, #8
   2597a:	6032      	str	r2, [r6, #0]
   2597c:	2204      	movs	r2, #4
   2597e:	e79d      	b.n	258bc <pdn_interface_getopt+0xa0>
   25980:	2016      	movs	r0, #22
   25982:	f7fb f833 	bl	209ec <bsd_os_errno_set>
   25986:	f04f 30ff 	mov.w	r0, #4294967295
   2598a:	e775      	b.n	25878 <pdn_interface_getopt+0x5c>
   2598c:	2005      	movs	r0, #5
   2598e:	f7fb f82d 	bl	209ec <bsd_os_errno_set>
   25992:	f04f 30ff 	mov.w	r0, #4294967295
   25996:	e76c      	b.n	25872 <pdn_interface_getopt+0x56>
   25998:	789a0000 	.word	0x789a0000
   2599c:	20020810 	.word	0x20020810
   259a0:	0003138c 	.word	0x0003138c
   259a4:	20020710 	.word	0x20020710
   259a8:	00031398 	.word	0x00031398
   259ac:	000313bc 	.word	0x000313bc
   259b0:	2002070c 	.word	0x2002070c

000259b4 <pdn_interface_pdn_id_get>:
   259b4:	2900      	cmp	r1, #0
   259b6:	f000 83b9 	beq.w	2612c <pdn_interface_pdn_id_get+0x778>
   259ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   259be:	4ca3      	ldr	r4, [pc, #652]	; (25c4c <pdn_interface_pdn_id_get+0x298>)
   259c0:	2802      	cmp	r0, #2
   259c2:	b083      	sub	sp, #12
   259c4:	460d      	mov	r5, r1
   259c6:	6823      	ldr	r3, [r4, #0]
   259c8:	f000 8094 	beq.w	25af4 <pdn_interface_pdn_id_get+0x140>
   259cc:	280a      	cmp	r0, #10
   259ce:	d03f      	beq.n	25a50 <pdn_interface_pdn_id_get+0x9c>
   259d0:	b11b      	cbz	r3, 259da <pdn_interface_pdn_id_get+0x26>
   259d2:	689b      	ldr	r3, [r3, #8]
   259d4:	2b03      	cmp	r3, #3
   259d6:	f000 8127 	beq.w	25c28 <pdn_interface_pdn_id_get+0x274>
   259da:	6863      	ldr	r3, [r4, #4]
   259dc:	b11b      	cbz	r3, 259e6 <pdn_interface_pdn_id_get+0x32>
   259de:	689b      	ldr	r3, [r3, #8]
   259e0:	2b03      	cmp	r3, #3
   259e2:	f000 8110 	beq.w	25c06 <pdn_interface_pdn_id_get+0x252>
   259e6:	68a3      	ldr	r3, [r4, #8]
   259e8:	b11b      	cbz	r3, 259f2 <pdn_interface_pdn_id_get+0x3e>
   259ea:	689b      	ldr	r3, [r3, #8]
   259ec:	2b03      	cmp	r3, #3
   259ee:	f000 80f9 	beq.w	25be4 <pdn_interface_pdn_id_get+0x230>
   259f2:	68e3      	ldr	r3, [r4, #12]
   259f4:	b11b      	cbz	r3, 259fe <pdn_interface_pdn_id_get+0x4a>
   259f6:	689b      	ldr	r3, [r3, #8]
   259f8:	2b03      	cmp	r3, #3
   259fa:	f000 80e2 	beq.w	25bc2 <pdn_interface_pdn_id_get+0x20e>
   259fe:	6923      	ldr	r3, [r4, #16]
   25a00:	b11b      	cbz	r3, 25a0a <pdn_interface_pdn_id_get+0x56>
   25a02:	689b      	ldr	r3, [r3, #8]
   25a04:	2b03      	cmp	r3, #3
   25a06:	f000 8123 	beq.w	25c50 <pdn_interface_pdn_id_get+0x29c>
   25a0a:	6963      	ldr	r3, [r4, #20]
   25a0c:	b11b      	cbz	r3, 25a16 <pdn_interface_pdn_id_get+0x62>
   25a0e:	689b      	ldr	r3, [r3, #8]
   25a10:	2b03      	cmp	r3, #3
   25a12:	f000 8161 	beq.w	25cd8 <pdn_interface_pdn_id_get+0x324>
   25a16:	69a3      	ldr	r3, [r4, #24]
   25a18:	b11b      	cbz	r3, 25a22 <pdn_interface_pdn_id_get+0x6e>
   25a1a:	689b      	ldr	r3, [r3, #8]
   25a1c:	2b03      	cmp	r3, #3
   25a1e:	f000 814a 	beq.w	25cb6 <pdn_interface_pdn_id_get+0x302>
   25a22:	69e3      	ldr	r3, [r4, #28]
   25a24:	b11b      	cbz	r3, 25a2e <pdn_interface_pdn_id_get+0x7a>
   25a26:	689b      	ldr	r3, [r3, #8]
   25a28:	2b03      	cmp	r3, #3
   25a2a:	f000 8133 	beq.w	25c94 <pdn_interface_pdn_id_get+0x2e0>
   25a2e:	6a23      	ldr	r3, [r4, #32]
   25a30:	b11b      	cbz	r3, 25a3a <pdn_interface_pdn_id_get+0x86>
   25a32:	689b      	ldr	r3, [r3, #8]
   25a34:	2b03      	cmp	r3, #3
   25a36:	f000 811c 	beq.w	25c72 <pdn_interface_pdn_id_get+0x2be>
   25a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25a3c:	b11b      	cbz	r3, 25a46 <pdn_interface_pdn_id_get+0x92>
   25a3e:	689b      	ldr	r3, [r3, #8]
   25a40:	2b03      	cmp	r3, #3
   25a42:	f000 80ad 	beq.w	25ba0 <pdn_interface_pdn_id_get+0x1ec>
   25a46:	f04f 30ff 	mov.w	r0, #4294967295
   25a4a:	b003      	add	sp, #12
   25a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25a50:	b11b      	cbz	r3, 25a5a <pdn_interface_pdn_id_get+0xa6>
   25a52:	689b      	ldr	r3, [r3, #8]
   25a54:	2b03      	cmp	r3, #3
   25a56:	f000 8335 	beq.w	260c4 <pdn_interface_pdn_id_get+0x710>
   25a5a:	6863      	ldr	r3, [r4, #4]
   25a5c:	b11b      	cbz	r3, 25a66 <pdn_interface_pdn_id_get+0xb2>
   25a5e:	689b      	ldr	r3, [r3, #8]
   25a60:	2b03      	cmp	r3, #3
   25a62:	f000 82fd 	beq.w	26060 <pdn_interface_pdn_id_get+0x6ac>
   25a66:	68a3      	ldr	r3, [r4, #8]
   25a68:	b11b      	cbz	r3, 25a72 <pdn_interface_pdn_id_get+0xbe>
   25a6a:	689b      	ldr	r3, [r3, #8]
   25a6c:	2b03      	cmp	r3, #3
   25a6e:	f000 82d5 	beq.w	2601c <pdn_interface_pdn_id_get+0x668>
   25a72:	68e3      	ldr	r3, [r4, #12]
   25a74:	b11b      	cbz	r3, 25a7e <pdn_interface_pdn_id_get+0xca>
   25a76:	689e      	ldr	r6, [r3, #8]
   25a78:	2e03      	cmp	r6, #3
   25a7a:	f000 81f0 	beq.w	25e5e <pdn_interface_pdn_id_get+0x4aa>
   25a7e:	6923      	ldr	r3, [r4, #16]
   25a80:	b11b      	cbz	r3, 25a8a <pdn_interface_pdn_id_get+0xd6>
   25a82:	689b      	ldr	r3, [r3, #8]
   25a84:	2b03      	cmp	r3, #3
   25a86:	f000 8203 	beq.w	25e90 <pdn_interface_pdn_id_get+0x4dc>
   25a8a:	6963      	ldr	r3, [r4, #20]
   25a8c:	b11b      	cbz	r3, 25a96 <pdn_interface_pdn_id_get+0xe2>
   25a8e:	689b      	ldr	r3, [r3, #8]
   25a90:	2b03      	cmp	r3, #3
   25a92:	f000 8215 	beq.w	25ec0 <pdn_interface_pdn_id_get+0x50c>
   25a96:	69a3      	ldr	r3, [r4, #24]
   25a98:	b11b      	cbz	r3, 25aa2 <pdn_interface_pdn_id_get+0xee>
   25a9a:	689b      	ldr	r3, [r3, #8]
   25a9c:	2b03      	cmp	r3, #3
   25a9e:	f000 8227 	beq.w	25ef0 <pdn_interface_pdn_id_get+0x53c>
   25aa2:	69e3      	ldr	r3, [r4, #28]
   25aa4:	b11b      	cbz	r3, 25aae <pdn_interface_pdn_id_get+0xfa>
   25aa6:	689b      	ldr	r3, [r3, #8]
   25aa8:	2b03      	cmp	r3, #3
   25aaa:	f000 8239 	beq.w	25f20 <pdn_interface_pdn_id_get+0x56c>
   25aae:	6a23      	ldr	r3, [r4, #32]
   25ab0:	b11b      	cbz	r3, 25aba <pdn_interface_pdn_id_get+0x106>
   25ab2:	689b      	ldr	r3, [r3, #8]
   25ab4:	2b03      	cmp	r3, #3
   25ab6:	f000 824d 	beq.w	25f54 <pdn_interface_pdn_id_get+0x5a0>
   25aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25abc:	2b00      	cmp	r3, #0
   25abe:	d0c2      	beq.n	25a46 <pdn_interface_pdn_id_get+0x92>
   25ac0:	689b      	ldr	r3, [r3, #8]
   25ac2:	2b03      	cmp	r3, #3
   25ac4:	d1bf      	bne.n	25a46 <pdn_interface_pdn_id_get+0x92>
   25ac6:	4628      	mov	r0, r5
   25ac8:	f7f7 fad6 	bl	1d078 <strlen>
   25acc:	4606      	mov	r6, r0
   25ace:	6a60      	ldr	r0, [r4, #36]	; 0x24
   25ad0:	300c      	adds	r0, #12
   25ad2:	f7f7 fad1 	bl	1d078 <strlen>
   25ad6:	42b0      	cmp	r0, r6
   25ad8:	d1b5      	bne.n	25a46 <pdn_interface_pdn_id_get+0x92>
   25ada:	6a61      	ldr	r1, [r4, #36]	; 0x24
   25adc:	4628      	mov	r0, r5
   25ade:	310c      	adds	r1, #12
   25ae0:	f7f7 fac0 	bl	1d064 <strcmp>
   25ae4:	2800      	cmp	r0, #0
   25ae6:	d1ae      	bne.n	25a46 <pdn_interface_pdn_id_get+0x92>
   25ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25aea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25aec:	0792      	lsls	r2, r2, #30
   25aee:	d5aa      	bpl.n	25a46 <pdn_interface_pdn_id_get+0x92>
   25af0:	2609      	movs	r6, #9
   25af2:	e11a      	b.n	25d2a <pdn_interface_pdn_id_get+0x376>
   25af4:	b11b      	cbz	r3, 25afe <pdn_interface_pdn_id_get+0x14a>
   25af6:	689b      	ldr	r3, [r3, #8]
   25af8:	2b03      	cmp	r3, #3
   25afa:	f000 82fd 	beq.w	260f8 <pdn_interface_pdn_id_get+0x744>
   25afe:	6863      	ldr	r3, [r4, #4]
   25b00:	b11b      	cbz	r3, 25b0a <pdn_interface_pdn_id_get+0x156>
   25b02:	689b      	ldr	r3, [r3, #8]
   25b04:	2b03      	cmp	r3, #3
   25b06:	f000 82c5 	beq.w	26094 <pdn_interface_pdn_id_get+0x6e0>
   25b0a:	68a3      	ldr	r3, [r4, #8]
   25b0c:	b11b      	cbz	r3, 25b16 <pdn_interface_pdn_id_get+0x162>
   25b0e:	689b      	ldr	r3, [r3, #8]
   25b10:	2b03      	cmp	r3, #3
   25b12:	f000 8269 	beq.w	25fe8 <pdn_interface_pdn_id_get+0x634>
   25b16:	68e3      	ldr	r3, [r4, #12]
   25b18:	b11b      	cbz	r3, 25b22 <pdn_interface_pdn_id_get+0x16e>
   25b1a:	689e      	ldr	r6, [r3, #8]
   25b1c:	2e03      	cmp	r6, #3
   25b1e:	f000 80ec 	beq.w	25cfa <pdn_interface_pdn_id_get+0x346>
   25b22:	6923      	ldr	r3, [r4, #16]
   25b24:	b11b      	cbz	r3, 25b2e <pdn_interface_pdn_id_get+0x17a>
   25b26:	689b      	ldr	r3, [r3, #8]
   25b28:	2b03      	cmp	r3, #3
   25b2a:	f000 814a 	beq.w	25dc2 <pdn_interface_pdn_id_get+0x40e>
   25b2e:	6963      	ldr	r3, [r4, #20]
   25b30:	b11b      	cbz	r3, 25b3a <pdn_interface_pdn_id_get+0x186>
   25b32:	689b      	ldr	r3, [r3, #8]
   25b34:	2b03      	cmp	r3, #3
   25b36:	f000 815e 	beq.w	25df6 <pdn_interface_pdn_id_get+0x442>
   25b3a:	69a3      	ldr	r3, [r4, #24]
   25b3c:	b11b      	cbz	r3, 25b46 <pdn_interface_pdn_id_get+0x192>
   25b3e:	689b      	ldr	r3, [r3, #8]
   25b40:	2b03      	cmp	r3, #3
   25b42:	f000 8172 	beq.w	25e2a <pdn_interface_pdn_id_get+0x476>
   25b46:	69e3      	ldr	r3, [r4, #28]
   25b48:	b11b      	cbz	r3, 25b52 <pdn_interface_pdn_id_get+0x19e>
   25b4a:	689b      	ldr	r3, [r3, #8]
   25b4c:	2b03      	cmp	r3, #3
   25b4e:	f000 821b 	beq.w	25f88 <pdn_interface_pdn_id_get+0x5d4>
   25b52:	6a23      	ldr	r3, [r4, #32]
   25b54:	b11b      	cbz	r3, 25b5e <pdn_interface_pdn_id_get+0x1aa>
   25b56:	689b      	ldr	r3, [r3, #8]
   25b58:	2b03      	cmp	r3, #3
   25b5a:	f000 822d 	beq.w	25fb8 <pdn_interface_pdn_id_get+0x604>
   25b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25b60:	2b00      	cmp	r3, #0
   25b62:	f43f af70 	beq.w	25a46 <pdn_interface_pdn_id_get+0x92>
   25b66:	689b      	ldr	r3, [r3, #8]
   25b68:	2b03      	cmp	r3, #3
   25b6a:	f47f af6c 	bne.w	25a46 <pdn_interface_pdn_id_get+0x92>
   25b6e:	4628      	mov	r0, r5
   25b70:	f7f7 fa82 	bl	1d078 <strlen>
   25b74:	4606      	mov	r6, r0
   25b76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   25b78:	300c      	adds	r0, #12
   25b7a:	f7f7 fa7d 	bl	1d078 <strlen>
   25b7e:	4286      	cmp	r6, r0
   25b80:	f47f af61 	bne.w	25a46 <pdn_interface_pdn_id_get+0x92>
   25b84:	6a61      	ldr	r1, [r4, #36]	; 0x24
   25b86:	4628      	mov	r0, r5
   25b88:	310c      	adds	r1, #12
   25b8a:	f7f7 fa6b 	bl	1d064 <strcmp>
   25b8e:	2800      	cmp	r0, #0
   25b90:	f47f af59 	bne.w	25a46 <pdn_interface_pdn_id_get+0x92>
   25b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25b98:	07d2      	lsls	r2, r2, #31
   25b9a:	f57f af54 	bpl.w	25a46 <pdn_interface_pdn_id_get+0x92>
   25b9e:	e7a7      	b.n	25af0 <pdn_interface_pdn_id_get+0x13c>
   25ba0:	4628      	mov	r0, r5
   25ba2:	f7f7 fa69 	bl	1d078 <strlen>
   25ba6:	4606      	mov	r6, r0
   25ba8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   25baa:	300c      	adds	r0, #12
   25bac:	f7f7 fa64 	bl	1d078 <strlen>
   25bb0:	42b0      	cmp	r0, r6
   25bb2:	f47f af48 	bne.w	25a46 <pdn_interface_pdn_id_get+0x92>
   25bb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   25bb8:	4628      	mov	r0, r5
   25bba:	310c      	adds	r1, #12
   25bbc:	f7f7 fa52 	bl	1d064 <strcmp>
   25bc0:	e741      	b.n	25a46 <pdn_interface_pdn_id_get+0x92>
   25bc2:	4628      	mov	r0, r5
   25bc4:	f7f7 fa58 	bl	1d078 <strlen>
   25bc8:	4606      	mov	r6, r0
   25bca:	68e0      	ldr	r0, [r4, #12]
   25bcc:	300c      	adds	r0, #12
   25bce:	f7f7 fa53 	bl	1d078 <strlen>
   25bd2:	4286      	cmp	r6, r0
   25bd4:	f47f af13 	bne.w	259fe <pdn_interface_pdn_id_get+0x4a>
   25bd8:	68e1      	ldr	r1, [r4, #12]
   25bda:	4628      	mov	r0, r5
   25bdc:	310c      	adds	r1, #12
   25bde:	f7f7 fa41 	bl	1d064 <strcmp>
   25be2:	e70c      	b.n	259fe <pdn_interface_pdn_id_get+0x4a>
   25be4:	4628      	mov	r0, r5
   25be6:	f7f7 fa47 	bl	1d078 <strlen>
   25bea:	4606      	mov	r6, r0
   25bec:	68a0      	ldr	r0, [r4, #8]
   25bee:	300c      	adds	r0, #12
   25bf0:	f7f7 fa42 	bl	1d078 <strlen>
   25bf4:	4286      	cmp	r6, r0
   25bf6:	f47f aefc 	bne.w	259f2 <pdn_interface_pdn_id_get+0x3e>
   25bfa:	68a1      	ldr	r1, [r4, #8]
   25bfc:	4628      	mov	r0, r5
   25bfe:	310c      	adds	r1, #12
   25c00:	f7f7 fa30 	bl	1d064 <strcmp>
   25c04:	e6f5      	b.n	259f2 <pdn_interface_pdn_id_get+0x3e>
   25c06:	4628      	mov	r0, r5
   25c08:	f7f7 fa36 	bl	1d078 <strlen>
   25c0c:	4606      	mov	r6, r0
   25c0e:	6860      	ldr	r0, [r4, #4]
   25c10:	300c      	adds	r0, #12
   25c12:	f7f7 fa31 	bl	1d078 <strlen>
   25c16:	4286      	cmp	r6, r0
   25c18:	f47f aee5 	bne.w	259e6 <pdn_interface_pdn_id_get+0x32>
   25c1c:	6861      	ldr	r1, [r4, #4]
   25c1e:	4628      	mov	r0, r5
   25c20:	310c      	adds	r1, #12
   25c22:	f7f7 fa1f 	bl	1d064 <strcmp>
   25c26:	e6de      	b.n	259e6 <pdn_interface_pdn_id_get+0x32>
   25c28:	4608      	mov	r0, r1
   25c2a:	f7f7 fa25 	bl	1d078 <strlen>
   25c2e:	4606      	mov	r6, r0
   25c30:	6820      	ldr	r0, [r4, #0]
   25c32:	300c      	adds	r0, #12
   25c34:	f7f7 fa20 	bl	1d078 <strlen>
   25c38:	4286      	cmp	r6, r0
   25c3a:	f47f aece 	bne.w	259da <pdn_interface_pdn_id_get+0x26>
   25c3e:	6821      	ldr	r1, [r4, #0]
   25c40:	4628      	mov	r0, r5
   25c42:	310c      	adds	r1, #12
   25c44:	f7f7 fa0e 	bl	1d064 <strcmp>
   25c48:	e6c7      	b.n	259da <pdn_interface_pdn_id_get+0x26>
   25c4a:	bf00      	nop
   25c4c:	20020810 	.word	0x20020810
   25c50:	4628      	mov	r0, r5
   25c52:	f7f7 fa11 	bl	1d078 <strlen>
   25c56:	4606      	mov	r6, r0
   25c58:	6920      	ldr	r0, [r4, #16]
   25c5a:	300c      	adds	r0, #12
   25c5c:	f7f7 fa0c 	bl	1d078 <strlen>
   25c60:	4286      	cmp	r6, r0
   25c62:	f47f aed2 	bne.w	25a0a <pdn_interface_pdn_id_get+0x56>
   25c66:	6921      	ldr	r1, [r4, #16]
   25c68:	4628      	mov	r0, r5
   25c6a:	310c      	adds	r1, #12
   25c6c:	f7f7 f9fa 	bl	1d064 <strcmp>
   25c70:	e6cb      	b.n	25a0a <pdn_interface_pdn_id_get+0x56>
   25c72:	4628      	mov	r0, r5
   25c74:	f7f7 fa00 	bl	1d078 <strlen>
   25c78:	4606      	mov	r6, r0
   25c7a:	6a20      	ldr	r0, [r4, #32]
   25c7c:	300c      	adds	r0, #12
   25c7e:	f7f7 f9fb 	bl	1d078 <strlen>
   25c82:	4286      	cmp	r6, r0
   25c84:	f47f aed9 	bne.w	25a3a <pdn_interface_pdn_id_get+0x86>
   25c88:	6a21      	ldr	r1, [r4, #32]
   25c8a:	4628      	mov	r0, r5
   25c8c:	310c      	adds	r1, #12
   25c8e:	f7f7 f9e9 	bl	1d064 <strcmp>
   25c92:	e6d2      	b.n	25a3a <pdn_interface_pdn_id_get+0x86>
   25c94:	4628      	mov	r0, r5
   25c96:	f7f7 f9ef 	bl	1d078 <strlen>
   25c9a:	4606      	mov	r6, r0
   25c9c:	69e0      	ldr	r0, [r4, #28]
   25c9e:	300c      	adds	r0, #12
   25ca0:	f7f7 f9ea 	bl	1d078 <strlen>
   25ca4:	4286      	cmp	r6, r0
   25ca6:	f47f aec2 	bne.w	25a2e <pdn_interface_pdn_id_get+0x7a>
   25caa:	69e1      	ldr	r1, [r4, #28]
   25cac:	4628      	mov	r0, r5
   25cae:	310c      	adds	r1, #12
   25cb0:	f7f7 f9d8 	bl	1d064 <strcmp>
   25cb4:	e6bb      	b.n	25a2e <pdn_interface_pdn_id_get+0x7a>
   25cb6:	4628      	mov	r0, r5
   25cb8:	f7f7 f9de 	bl	1d078 <strlen>
   25cbc:	4606      	mov	r6, r0
   25cbe:	69a0      	ldr	r0, [r4, #24]
   25cc0:	300c      	adds	r0, #12
   25cc2:	f7f7 f9d9 	bl	1d078 <strlen>
   25cc6:	4286      	cmp	r6, r0
   25cc8:	f47f aeab 	bne.w	25a22 <pdn_interface_pdn_id_get+0x6e>
   25ccc:	69a1      	ldr	r1, [r4, #24]
   25cce:	4628      	mov	r0, r5
   25cd0:	310c      	adds	r1, #12
   25cd2:	f7f7 f9c7 	bl	1d064 <strcmp>
   25cd6:	e6a4      	b.n	25a22 <pdn_interface_pdn_id_get+0x6e>
   25cd8:	4628      	mov	r0, r5
   25cda:	f7f7 f9cd 	bl	1d078 <strlen>
   25cde:	4606      	mov	r6, r0
   25ce0:	6960      	ldr	r0, [r4, #20]
   25ce2:	300c      	adds	r0, #12
   25ce4:	f7f7 f9c8 	bl	1d078 <strlen>
   25ce8:	4286      	cmp	r6, r0
   25cea:	f47f ae94 	bne.w	25a16 <pdn_interface_pdn_id_get+0x62>
   25cee:	6961      	ldr	r1, [r4, #20]
   25cf0:	4628      	mov	r0, r5
   25cf2:	310c      	adds	r1, #12
   25cf4:	f7f7 f9b6 	bl	1d064 <strcmp>
   25cf8:	e68d      	b.n	25a16 <pdn_interface_pdn_id_get+0x62>
   25cfa:	4628      	mov	r0, r5
   25cfc:	f7f7 f9bc 	bl	1d078 <strlen>
   25d00:	4607      	mov	r7, r0
   25d02:	68e0      	ldr	r0, [r4, #12]
   25d04:	300c      	adds	r0, #12
   25d06:	f7f7 f9b7 	bl	1d078 <strlen>
   25d0a:	4287      	cmp	r7, r0
   25d0c:	f47f af09 	bne.w	25b22 <pdn_interface_pdn_id_get+0x16e>
   25d10:	68e1      	ldr	r1, [r4, #12]
   25d12:	4628      	mov	r0, r5
   25d14:	310c      	adds	r1, #12
   25d16:	f7f7 f9a5 	bl	1d064 <strcmp>
   25d1a:	2800      	cmp	r0, #0
   25d1c:	f47f af01 	bne.w	25b22 <pdn_interface_pdn_id_get+0x16e>
   25d20:	68e3      	ldr	r3, [r4, #12]
   25d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25d24:	07d1      	lsls	r1, r2, #31
   25d26:	f57f aefc 	bpl.w	25b22 <pdn_interface_pdn_id_get+0x16e>
   25d2a:	6858      	ldr	r0, [r3, #4]
   25d2c:	1c43      	adds	r3, r0, #1
   25d2e:	f47f ae8c 	bne.w	25a4a <pdn_interface_pdn_id_get+0x96>
   25d32:	4dc6      	ldr	r5, [pc, #792]	; (2604c <pdn_interface_pdn_id_get+0x698>)
   25d34:	4ac6      	ldr	r2, [pc, #792]	; (26050 <pdn_interface_pdn_id_get+0x69c>)
   25d36:	f44f 7180 	mov.w	r1, #256	; 0x100
   25d3a:	4628      	mov	r0, r5
   25d3c:	f007 ff8c 	bl	2dc58 <sniprintf>
   25d40:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   25d44:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   25d48:	681b      	ldr	r3, [r3, #0]
   25d4a:	4ac2      	ldr	r2, [pc, #776]	; (26054 <pdn_interface_pdn_id_get+0x6a0>)
   25d4c:	4428      	add	r0, r5
   25d4e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 2605c <pdn_interface_pdn_id_get+0x6a8>
   25d52:	f007 ff81 	bl	2dc58 <sniprintf>
   25d56:	4628      	mov	r0, r5
   25d58:	f8d8 9000 	ldr.w	r9, [r8]
   25d5c:	2700      	movs	r7, #0
   25d5e:	f7f7 f98b 	bl	1d078 <strlen>
   25d62:	4629      	mov	r1, r5
   25d64:	4602      	mov	r2, r0
   25d66:	463b      	mov	r3, r7
   25d68:	4648      	mov	r0, r9
   25d6a:	9701      	str	r7, [sp, #4]
   25d6c:	9700      	str	r7, [sp, #0]
   25d6e:	f7fc f98d 	bl	2208c <at_interface_write>
   25d72:	4681      	mov	r9, r0
   25d74:	4628      	mov	r0, r5
   25d76:	f7f7 f97f 	bl	1d078 <strlen>
   25d7a:	4548      	cmp	r0, r9
   25d7c:	f040 81e9 	bne.w	26152 <pdn_interface_pdn_id_get+0x79e>
   25d80:	463b      	mov	r3, r7
   25d82:	f44f 7280 	mov.w	r2, #256	; 0x100
   25d86:	e9cd 7700 	strd	r7, r7, [sp]
   25d8a:	4629      	mov	r1, r5
   25d8c:	f8d8 0000 	ldr.w	r0, [r8]
   25d90:	f7fc fa80 	bl	22294 <at_interface_read>
   25d94:	4607      	mov	r7, r0
   25d96:	48b0      	ldr	r0, [pc, #704]	; (26058 <pdn_interface_pdn_id_get+0x6a4>)
   25d98:	f7f7 f96e 	bl	1d078 <strlen>
   25d9c:	4287      	cmp	r7, r0
   25d9e:	4602      	mov	r2, r0
   25da0:	f2c0 81c7 	blt.w	26132 <pdn_interface_pdn_id_get+0x77e>
   25da4:	4629      	mov	r1, r5
   25da6:	48ac      	ldr	r0, [pc, #688]	; (26058 <pdn_interface_pdn_id_get+0x6a4>)
   25da8:	f00a f9aa 	bl	30100 <strncmp>
   25dac:	2800      	cmp	r0, #0
   25dae:	f040 81c0 	bne.w	26132 <pdn_interface_pdn_id_get+0x77e>
   25db2:	4629      	mov	r1, r5
   25db4:	4630      	mov	r0, r6
   25db6:	f7ff f937 	bl	25028 <pdn_id_get_parser>
   25dba:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   25dbe:	6858      	ldr	r0, [r3, #4]
   25dc0:	e643      	b.n	25a4a <pdn_interface_pdn_id_get+0x96>
   25dc2:	4628      	mov	r0, r5
   25dc4:	f7f7 f958 	bl	1d078 <strlen>
   25dc8:	4606      	mov	r6, r0
   25dca:	6920      	ldr	r0, [r4, #16]
   25dcc:	300c      	adds	r0, #12
   25dce:	f7f7 f953 	bl	1d078 <strlen>
   25dd2:	4286      	cmp	r6, r0
   25dd4:	f47f aeab 	bne.w	25b2e <pdn_interface_pdn_id_get+0x17a>
   25dd8:	6921      	ldr	r1, [r4, #16]
   25dda:	4628      	mov	r0, r5
   25ddc:	310c      	adds	r1, #12
   25dde:	f7f7 f941 	bl	1d064 <strcmp>
   25de2:	2800      	cmp	r0, #0
   25de4:	f47f aea3 	bne.w	25b2e <pdn_interface_pdn_id_get+0x17a>
   25de8:	6923      	ldr	r3, [r4, #16]
   25dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25dec:	07d2      	lsls	r2, r2, #31
   25dee:	f57f ae9e 	bpl.w	25b2e <pdn_interface_pdn_id_get+0x17a>
   25df2:	2604      	movs	r6, #4
   25df4:	e799      	b.n	25d2a <pdn_interface_pdn_id_get+0x376>
   25df6:	4628      	mov	r0, r5
   25df8:	f7f7 f93e 	bl	1d078 <strlen>
   25dfc:	4606      	mov	r6, r0
   25dfe:	6960      	ldr	r0, [r4, #20]
   25e00:	300c      	adds	r0, #12
   25e02:	f7f7 f939 	bl	1d078 <strlen>
   25e06:	4286      	cmp	r6, r0
   25e08:	f47f ae97 	bne.w	25b3a <pdn_interface_pdn_id_get+0x186>
   25e0c:	6961      	ldr	r1, [r4, #20]
   25e0e:	4628      	mov	r0, r5
   25e10:	310c      	adds	r1, #12
   25e12:	f7f7 f927 	bl	1d064 <strcmp>
   25e16:	2800      	cmp	r0, #0
   25e18:	f47f ae8f 	bne.w	25b3a <pdn_interface_pdn_id_get+0x186>
   25e1c:	6963      	ldr	r3, [r4, #20]
   25e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25e20:	07d7      	lsls	r7, r2, #31
   25e22:	f57f ae8a 	bpl.w	25b3a <pdn_interface_pdn_id_get+0x186>
   25e26:	2605      	movs	r6, #5
   25e28:	e77f      	b.n	25d2a <pdn_interface_pdn_id_get+0x376>
   25e2a:	4628      	mov	r0, r5
   25e2c:	f7f7 f924 	bl	1d078 <strlen>
   25e30:	4606      	mov	r6, r0
   25e32:	69a0      	ldr	r0, [r4, #24]
   25e34:	300c      	adds	r0, #12
   25e36:	f7f7 f91f 	bl	1d078 <strlen>
   25e3a:	4286      	cmp	r6, r0
   25e3c:	f47f ae83 	bne.w	25b46 <pdn_interface_pdn_id_get+0x192>
   25e40:	69a1      	ldr	r1, [r4, #24]
   25e42:	4628      	mov	r0, r5
   25e44:	310c      	adds	r1, #12
   25e46:	f7f7 f90d 	bl	1d064 <strcmp>
   25e4a:	2800      	cmp	r0, #0
   25e4c:	f47f ae7b 	bne.w	25b46 <pdn_interface_pdn_id_get+0x192>
   25e50:	69a3      	ldr	r3, [r4, #24]
   25e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25e54:	07d6      	lsls	r6, r2, #31
   25e56:	f57f ae76 	bpl.w	25b46 <pdn_interface_pdn_id_get+0x192>
   25e5a:	2606      	movs	r6, #6
   25e5c:	e765      	b.n	25d2a <pdn_interface_pdn_id_get+0x376>
   25e5e:	4628      	mov	r0, r5
   25e60:	f7f7 f90a 	bl	1d078 <strlen>
   25e64:	4607      	mov	r7, r0
   25e66:	68e0      	ldr	r0, [r4, #12]
   25e68:	300c      	adds	r0, #12
   25e6a:	f7f7 f905 	bl	1d078 <strlen>
   25e6e:	4287      	cmp	r7, r0
   25e70:	f47f ae05 	bne.w	25a7e <pdn_interface_pdn_id_get+0xca>
   25e74:	68e1      	ldr	r1, [r4, #12]
   25e76:	4628      	mov	r0, r5
   25e78:	310c      	adds	r1, #12
   25e7a:	f7f7 f8f3 	bl	1d064 <strcmp>
   25e7e:	2800      	cmp	r0, #0
   25e80:	f47f adfd 	bne.w	25a7e <pdn_interface_pdn_id_get+0xca>
   25e84:	68e3      	ldr	r3, [r4, #12]
   25e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25e88:	0791      	lsls	r1, r2, #30
   25e8a:	f53f af4e 	bmi.w	25d2a <pdn_interface_pdn_id_get+0x376>
   25e8e:	e5f6      	b.n	25a7e <pdn_interface_pdn_id_get+0xca>
   25e90:	4628      	mov	r0, r5
   25e92:	f7f7 f8f1 	bl	1d078 <strlen>
   25e96:	4606      	mov	r6, r0
   25e98:	6920      	ldr	r0, [r4, #16]
   25e9a:	300c      	adds	r0, #12
   25e9c:	f7f7 f8ec 	bl	1d078 <strlen>
   25ea0:	4286      	cmp	r6, r0
   25ea2:	f47f adf2 	bne.w	25a8a <pdn_interface_pdn_id_get+0xd6>
   25ea6:	6921      	ldr	r1, [r4, #16]
   25ea8:	4628      	mov	r0, r5
   25eaa:	310c      	adds	r1, #12
   25eac:	f7f7 f8da 	bl	1d064 <strcmp>
   25eb0:	2800      	cmp	r0, #0
   25eb2:	f47f adea 	bne.w	25a8a <pdn_interface_pdn_id_get+0xd6>
   25eb6:	6923      	ldr	r3, [r4, #16]
   25eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25eba:	0792      	lsls	r2, r2, #30
   25ebc:	d499      	bmi.n	25df2 <pdn_interface_pdn_id_get+0x43e>
   25ebe:	e5e4      	b.n	25a8a <pdn_interface_pdn_id_get+0xd6>
   25ec0:	4628      	mov	r0, r5
   25ec2:	f7f7 f8d9 	bl	1d078 <strlen>
   25ec6:	4606      	mov	r6, r0
   25ec8:	6960      	ldr	r0, [r4, #20]
   25eca:	300c      	adds	r0, #12
   25ecc:	f7f7 f8d4 	bl	1d078 <strlen>
   25ed0:	4286      	cmp	r6, r0
   25ed2:	f47f ade0 	bne.w	25a96 <pdn_interface_pdn_id_get+0xe2>
   25ed6:	6961      	ldr	r1, [r4, #20]
   25ed8:	4628      	mov	r0, r5
   25eda:	310c      	adds	r1, #12
   25edc:	f7f7 f8c2 	bl	1d064 <strcmp>
   25ee0:	2800      	cmp	r0, #0
   25ee2:	f47f add8 	bne.w	25a96 <pdn_interface_pdn_id_get+0xe2>
   25ee6:	6963      	ldr	r3, [r4, #20]
   25ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25eea:	0797      	lsls	r7, r2, #30
   25eec:	d49b      	bmi.n	25e26 <pdn_interface_pdn_id_get+0x472>
   25eee:	e5d2      	b.n	25a96 <pdn_interface_pdn_id_get+0xe2>
   25ef0:	4628      	mov	r0, r5
   25ef2:	f7f7 f8c1 	bl	1d078 <strlen>
   25ef6:	4606      	mov	r6, r0
   25ef8:	69a0      	ldr	r0, [r4, #24]
   25efa:	300c      	adds	r0, #12
   25efc:	f7f7 f8bc 	bl	1d078 <strlen>
   25f00:	4286      	cmp	r6, r0
   25f02:	f47f adce 	bne.w	25aa2 <pdn_interface_pdn_id_get+0xee>
   25f06:	69a1      	ldr	r1, [r4, #24]
   25f08:	4628      	mov	r0, r5
   25f0a:	310c      	adds	r1, #12
   25f0c:	f7f7 f8aa 	bl	1d064 <strcmp>
   25f10:	2800      	cmp	r0, #0
   25f12:	f47f adc6 	bne.w	25aa2 <pdn_interface_pdn_id_get+0xee>
   25f16:	69a3      	ldr	r3, [r4, #24]
   25f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25f1a:	0796      	lsls	r6, r2, #30
   25f1c:	d49d      	bmi.n	25e5a <pdn_interface_pdn_id_get+0x4a6>
   25f1e:	e5c0      	b.n	25aa2 <pdn_interface_pdn_id_get+0xee>
   25f20:	4628      	mov	r0, r5
   25f22:	f7f7 f8a9 	bl	1d078 <strlen>
   25f26:	4606      	mov	r6, r0
   25f28:	69e0      	ldr	r0, [r4, #28]
   25f2a:	300c      	adds	r0, #12
   25f2c:	f7f7 f8a4 	bl	1d078 <strlen>
   25f30:	4286      	cmp	r6, r0
   25f32:	f47f adbc 	bne.w	25aae <pdn_interface_pdn_id_get+0xfa>
   25f36:	69e1      	ldr	r1, [r4, #28]
   25f38:	4628      	mov	r0, r5
   25f3a:	310c      	adds	r1, #12
   25f3c:	f7f7 f892 	bl	1d064 <strcmp>
   25f40:	2800      	cmp	r0, #0
   25f42:	f47f adb4 	bne.w	25aae <pdn_interface_pdn_id_get+0xfa>
   25f46:	69e3      	ldr	r3, [r4, #28]
   25f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25f4a:	0790      	lsls	r0, r2, #30
   25f4c:	f57f adaf 	bpl.w	25aae <pdn_interface_pdn_id_get+0xfa>
   25f50:	2607      	movs	r6, #7
   25f52:	e6ea      	b.n	25d2a <pdn_interface_pdn_id_get+0x376>
   25f54:	4628      	mov	r0, r5
   25f56:	f7f7 f88f 	bl	1d078 <strlen>
   25f5a:	4606      	mov	r6, r0
   25f5c:	6a20      	ldr	r0, [r4, #32]
   25f5e:	300c      	adds	r0, #12
   25f60:	f7f7 f88a 	bl	1d078 <strlen>
   25f64:	4286      	cmp	r6, r0
   25f66:	f47f ada8 	bne.w	25aba <pdn_interface_pdn_id_get+0x106>
   25f6a:	6a21      	ldr	r1, [r4, #32]
   25f6c:	4628      	mov	r0, r5
   25f6e:	310c      	adds	r1, #12
   25f70:	f7f7 f878 	bl	1d064 <strcmp>
   25f74:	2800      	cmp	r0, #0
   25f76:	f47f ada0 	bne.w	25aba <pdn_interface_pdn_id_get+0x106>
   25f7a:	6a23      	ldr	r3, [r4, #32]
   25f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25f7e:	0791      	lsls	r1, r2, #30
   25f80:	f57f ad9b 	bpl.w	25aba <pdn_interface_pdn_id_get+0x106>
   25f84:	2608      	movs	r6, #8
   25f86:	e6d0      	b.n	25d2a <pdn_interface_pdn_id_get+0x376>
   25f88:	4628      	mov	r0, r5
   25f8a:	f7f7 f875 	bl	1d078 <strlen>
   25f8e:	4606      	mov	r6, r0
   25f90:	69e0      	ldr	r0, [r4, #28]
   25f92:	300c      	adds	r0, #12
   25f94:	f7f7 f870 	bl	1d078 <strlen>
   25f98:	4286      	cmp	r6, r0
   25f9a:	f47f adda 	bne.w	25b52 <pdn_interface_pdn_id_get+0x19e>
   25f9e:	69e1      	ldr	r1, [r4, #28]
   25fa0:	4628      	mov	r0, r5
   25fa2:	310c      	adds	r1, #12
   25fa4:	f7f7 f85e 	bl	1d064 <strcmp>
   25fa8:	2800      	cmp	r0, #0
   25faa:	f47f add2 	bne.w	25b52 <pdn_interface_pdn_id_get+0x19e>
   25fae:	69e3      	ldr	r3, [r4, #28]
   25fb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25fb2:	07d0      	lsls	r0, r2, #31
   25fb4:	d4cc      	bmi.n	25f50 <pdn_interface_pdn_id_get+0x59c>
   25fb6:	e5cc      	b.n	25b52 <pdn_interface_pdn_id_get+0x19e>
   25fb8:	4628      	mov	r0, r5
   25fba:	f7f7 f85d 	bl	1d078 <strlen>
   25fbe:	4606      	mov	r6, r0
   25fc0:	6a20      	ldr	r0, [r4, #32]
   25fc2:	300c      	adds	r0, #12
   25fc4:	f7f7 f858 	bl	1d078 <strlen>
   25fc8:	4286      	cmp	r6, r0
   25fca:	f47f adc8 	bne.w	25b5e <pdn_interface_pdn_id_get+0x1aa>
   25fce:	6a21      	ldr	r1, [r4, #32]
   25fd0:	4628      	mov	r0, r5
   25fd2:	310c      	adds	r1, #12
   25fd4:	f7f7 f846 	bl	1d064 <strcmp>
   25fd8:	2800      	cmp	r0, #0
   25fda:	f47f adc0 	bne.w	25b5e <pdn_interface_pdn_id_get+0x1aa>
   25fde:	6a23      	ldr	r3, [r4, #32]
   25fe0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25fe2:	07d1      	lsls	r1, r2, #31
   25fe4:	d4ce      	bmi.n	25f84 <pdn_interface_pdn_id_get+0x5d0>
   25fe6:	e5ba      	b.n	25b5e <pdn_interface_pdn_id_get+0x1aa>
   25fe8:	4628      	mov	r0, r5
   25fea:	f7f7 f845 	bl	1d078 <strlen>
   25fee:	4606      	mov	r6, r0
   25ff0:	68a0      	ldr	r0, [r4, #8]
   25ff2:	300c      	adds	r0, #12
   25ff4:	f7f7 f840 	bl	1d078 <strlen>
   25ff8:	4286      	cmp	r6, r0
   25ffa:	f47f ad8c 	bne.w	25b16 <pdn_interface_pdn_id_get+0x162>
   25ffe:	68a1      	ldr	r1, [r4, #8]
   26000:	4628      	mov	r0, r5
   26002:	310c      	adds	r1, #12
   26004:	f7f7 f82e 	bl	1d064 <strcmp>
   26008:	2800      	cmp	r0, #0
   2600a:	f47f ad84 	bne.w	25b16 <pdn_interface_pdn_id_get+0x162>
   2600e:	68a3      	ldr	r3, [r4, #8]
   26010:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   26012:	07d0      	lsls	r0, r2, #31
   26014:	f57f ad7f 	bpl.w	25b16 <pdn_interface_pdn_id_get+0x162>
   26018:	2602      	movs	r6, #2
   2601a:	e686      	b.n	25d2a <pdn_interface_pdn_id_get+0x376>
   2601c:	4628      	mov	r0, r5
   2601e:	f7f7 f82b 	bl	1d078 <strlen>
   26022:	4606      	mov	r6, r0
   26024:	68a0      	ldr	r0, [r4, #8]
   26026:	300c      	adds	r0, #12
   26028:	f7f7 f826 	bl	1d078 <strlen>
   2602c:	4286      	cmp	r6, r0
   2602e:	f47f ad20 	bne.w	25a72 <pdn_interface_pdn_id_get+0xbe>
   26032:	68a1      	ldr	r1, [r4, #8]
   26034:	4628      	mov	r0, r5
   26036:	310c      	adds	r1, #12
   26038:	f7f7 f814 	bl	1d064 <strcmp>
   2603c:	2800      	cmp	r0, #0
   2603e:	f47f ad18 	bne.w	25a72 <pdn_interface_pdn_id_get+0xbe>
   26042:	68a3      	ldr	r3, [r4, #8]
   26044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   26046:	0790      	lsls	r0, r2, #30
   26048:	d4e6      	bmi.n	26018 <pdn_interface_pdn_id_get+0x664>
   2604a:	e512      	b.n	25a72 <pdn_interface_pdn_id_get+0xbe>
   2604c:	20020710 	.word	0x20020710
   26050:	00031368 	.word	0x00031368
   26054:	00031364 	.word	0x00031364
   26058:	00031378 	.word	0x00031378
   2605c:	2002070c 	.word	0x2002070c
   26060:	4628      	mov	r0, r5
   26062:	f7f7 f809 	bl	1d078 <strlen>
   26066:	4606      	mov	r6, r0
   26068:	6860      	ldr	r0, [r4, #4]
   2606a:	300c      	adds	r0, #12
   2606c:	f7f7 f804 	bl	1d078 <strlen>
   26070:	4286      	cmp	r6, r0
   26072:	f47f acf8 	bne.w	25a66 <pdn_interface_pdn_id_get+0xb2>
   26076:	6861      	ldr	r1, [r4, #4]
   26078:	4628      	mov	r0, r5
   2607a:	310c      	adds	r1, #12
   2607c:	f7f6 fff2 	bl	1d064 <strcmp>
   26080:	2800      	cmp	r0, #0
   26082:	f47f acf0 	bne.w	25a66 <pdn_interface_pdn_id_get+0xb2>
   26086:	6863      	ldr	r3, [r4, #4]
   26088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2608a:	0796      	lsls	r6, r2, #30
   2608c:	f57f aceb 	bpl.w	25a66 <pdn_interface_pdn_id_get+0xb2>
   26090:	2601      	movs	r6, #1
   26092:	e64a      	b.n	25d2a <pdn_interface_pdn_id_get+0x376>
   26094:	4628      	mov	r0, r5
   26096:	f7f6 ffef 	bl	1d078 <strlen>
   2609a:	4606      	mov	r6, r0
   2609c:	6860      	ldr	r0, [r4, #4]
   2609e:	300c      	adds	r0, #12
   260a0:	f7f6 ffea 	bl	1d078 <strlen>
   260a4:	4286      	cmp	r6, r0
   260a6:	f47f ad30 	bne.w	25b0a <pdn_interface_pdn_id_get+0x156>
   260aa:	6861      	ldr	r1, [r4, #4]
   260ac:	4628      	mov	r0, r5
   260ae:	310c      	adds	r1, #12
   260b0:	f7f6 ffd8 	bl	1d064 <strcmp>
   260b4:	2800      	cmp	r0, #0
   260b6:	f47f ad28 	bne.w	25b0a <pdn_interface_pdn_id_get+0x156>
   260ba:	6863      	ldr	r3, [r4, #4]
   260bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   260be:	07d6      	lsls	r6, r2, #31
   260c0:	d4e6      	bmi.n	26090 <pdn_interface_pdn_id_get+0x6dc>
   260c2:	e522      	b.n	25b0a <pdn_interface_pdn_id_get+0x156>
   260c4:	4608      	mov	r0, r1
   260c6:	f7f6 ffd7 	bl	1d078 <strlen>
   260ca:	4606      	mov	r6, r0
   260cc:	6820      	ldr	r0, [r4, #0]
   260ce:	300c      	adds	r0, #12
   260d0:	f7f6 ffd2 	bl	1d078 <strlen>
   260d4:	4286      	cmp	r6, r0
   260d6:	f47f acc0 	bne.w	25a5a <pdn_interface_pdn_id_get+0xa6>
   260da:	6821      	ldr	r1, [r4, #0]
   260dc:	4628      	mov	r0, r5
   260de:	310c      	adds	r1, #12
   260e0:	f7f6 ffc0 	bl	1d064 <strcmp>
   260e4:	4606      	mov	r6, r0
   260e6:	2800      	cmp	r0, #0
   260e8:	f47f acb7 	bne.w	25a5a <pdn_interface_pdn_id_get+0xa6>
   260ec:	6823      	ldr	r3, [r4, #0]
   260ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   260f0:	0797      	lsls	r7, r2, #30
   260f2:	f53f ae1a 	bmi.w	25d2a <pdn_interface_pdn_id_get+0x376>
   260f6:	e4b0      	b.n	25a5a <pdn_interface_pdn_id_get+0xa6>
   260f8:	4608      	mov	r0, r1
   260fa:	f7f6 ffbd 	bl	1d078 <strlen>
   260fe:	4606      	mov	r6, r0
   26100:	6820      	ldr	r0, [r4, #0]
   26102:	300c      	adds	r0, #12
   26104:	f7f6 ffb8 	bl	1d078 <strlen>
   26108:	4286      	cmp	r6, r0
   2610a:	f47f acf8 	bne.w	25afe <pdn_interface_pdn_id_get+0x14a>
   2610e:	6821      	ldr	r1, [r4, #0]
   26110:	4628      	mov	r0, r5
   26112:	310c      	adds	r1, #12
   26114:	f7f6 ffa6 	bl	1d064 <strcmp>
   26118:	4606      	mov	r6, r0
   2611a:	2800      	cmp	r0, #0
   2611c:	f47f acef 	bne.w	25afe <pdn_interface_pdn_id_get+0x14a>
   26120:	6823      	ldr	r3, [r4, #0]
   26122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   26124:	07d7      	lsls	r7, r2, #31
   26126:	f53f ae00 	bmi.w	25d2a <pdn_interface_pdn_id_get+0x376>
   2612a:	e4e8      	b.n	25afe <pdn_interface_pdn_id_get+0x14a>
   2612c:	f04f 30ff 	mov.w	r0, #4294967295
   26130:	4770      	bx	lr
   26132:	480b      	ldr	r0, [pc, #44]	; (26160 <pdn_interface_pdn_id_get+0x7ac>)
   26134:	f7f6 ffa0 	bl	1d078 <strlen>
   26138:	490a      	ldr	r1, [pc, #40]	; (26164 <pdn_interface_pdn_id_get+0x7b0>)
   2613a:	4602      	mov	r2, r0
   2613c:	4808      	ldr	r0, [pc, #32]	; (26160 <pdn_interface_pdn_id_get+0x7ac>)
   2613e:	f009 ffdf 	bl	30100 <strncmp>
   26142:	b930      	cbnz	r0, 26152 <pdn_interface_pdn_id_get+0x79e>
   26144:	2008      	movs	r0, #8
   26146:	f7fa fc51 	bl	209ec <bsd_os_errno_set>
   2614a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   2614e:	6858      	ldr	r0, [r3, #4]
   26150:	e47b      	b.n	25a4a <pdn_interface_pdn_id_get+0x96>
   26152:	2005      	movs	r0, #5
   26154:	f7fa fc4a 	bl	209ec <bsd_os_errno_set>
   26158:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   2615c:	6858      	ldr	r0, [r3, #4]
   2615e:	e474      	b.n	25a4a <pdn_interface_pdn_id_get+0x96>
   26160:	000313bc 	.word	0x000313bc
   26164:	20020710 	.word	0x20020710

00026168 <linked_list_init>:
   26168:	b128      	cbz	r0, 26176 <linked_list_init+0xe>
   2616a:	2300      	movs	r3, #0
   2616c:	6003      	str	r3, [r0, #0]
   2616e:	e9c0 3301 	strd	r3, r3, [r0, #4]
   26172:	4618      	mov	r0, r3
   26174:	4770      	bx	lr
   26176:	2007      	movs	r0, #7
   26178:	4770      	bx	lr
   2617a:	bf00      	nop

0002617c <linked_list_push>:
   2617c:	6802      	ldr	r2, [r0, #0]
   2617e:	4603      	mov	r3, r0
   26180:	3201      	adds	r2, #1
   26182:	d00e      	beq.n	261a2 <linked_list_push+0x26>
   26184:	2200      	movs	r2, #0
   26186:	600a      	str	r2, [r1, #0]
   26188:	6802      	ldr	r2, [r0, #0]
   2618a:	b13a      	cbz	r2, 2619c <linked_list_push+0x20>
   2618c:	6882      	ldr	r2, [r0, #8]
   2618e:	6011      	str	r1, [r2, #0]
   26190:	6081      	str	r1, [r0, #8]
   26192:	681a      	ldr	r2, [r3, #0]
   26194:	2000      	movs	r0, #0
   26196:	3201      	adds	r2, #1
   26198:	601a      	str	r2, [r3, #0]
   2619a:	4770      	bx	lr
   2619c:	e9c0 1101 	strd	r1, r1, [r0, #4]
   261a0:	e7f7      	b.n	26192 <linked_list_push+0x16>
   261a2:	2004      	movs	r0, #4
   261a4:	4770      	bx	lr
   261a6:	bf00      	nop

000261a8 <linked_list_pop>:
   261a8:	4603      	mov	r3, r0
   261aa:	6800      	ldr	r0, [r0, #0]
   261ac:	b128      	cbz	r0, 261ba <linked_list_pop+0x12>
   261ae:	6858      	ldr	r0, [r3, #4]
   261b0:	681a      	ldr	r2, [r3, #0]
   261b2:	6801      	ldr	r1, [r0, #0]
   261b4:	3a01      	subs	r2, #1
   261b6:	6059      	str	r1, [r3, #4]
   261b8:	601a      	str	r2, [r3, #0]
   261ba:	4770      	bx	lr

000261bc <linked_list_peek>:
   261bc:	6803      	ldr	r3, [r0, #0]
   261be:	b10b      	cbz	r3, 261c4 <linked_list_peek+0x8>
   261c0:	6840      	ldr	r0, [r0, #4]
   261c2:	4770      	bx	lr
   261c4:	4618      	mov	r0, r3
   261c6:	4770      	bx	lr

000261c8 <linked_list_size_get>:
   261c8:	6800      	ldr	r0, [r0, #0]
   261ca:	4770      	bx	lr

000261cc <linked_list_get_next>:
   261cc:	6800      	ldr	r0, [r0, #0]
   261ce:	4770      	bx	lr

000261d0 <nrf_socket>:
   261d0:	b570      	push	{r4, r5, r6, lr}
   261d2:	4604      	mov	r4, r0
   261d4:	460d      	mov	r5, r1
   261d6:	4616      	mov	r6, r2
   261d8:	f7fd fdb4 	bl	23d44 <bsd_platform_af_method_table_get>
   261dc:	b130      	cbz	r0, 261ec <nrf_socket+0x1c>
   261de:	6803      	ldr	r3, [r0, #0]
   261e0:	4632      	mov	r2, r6
   261e2:	4629      	mov	r1, r5
   261e4:	4620      	mov	r0, r4
   261e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   261ea:	4718      	bx	r3
   261ec:	f04f 30ff 	mov.w	r0, #4294967295
   261f0:	bd70      	pop	{r4, r5, r6, pc}
   261f2:	bf00      	nop

000261f4 <nrf_close>:
   261f4:	b510      	push	{r4, lr}
   261f6:	4604      	mov	r4, r0
   261f8:	f7fd fdfc 	bl	23df4 <bsd_platform_fd_method_table_get>
   261fc:	b120      	cbz	r0, 26208 <nrf_close+0x14>
   261fe:	6843      	ldr	r3, [r0, #4]
   26200:	4620      	mov	r0, r4
   26202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26206:	4718      	bx	r3
   26208:	f04f 30ff 	mov.w	r0, #4294967295
   2620c:	bd10      	pop	{r4, pc}
   2620e:	bf00      	nop

00026210 <nrf_sendto>:
   26210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26214:	460d      	mov	r5, r1
   26216:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2621a:	4616      	mov	r6, r2
   2621c:	461f      	mov	r7, r3
   2621e:	4604      	mov	r4, r0
   26220:	f7fd fde8 	bl	23df4 <bsd_platform_fd_method_table_get>
   26224:	b158      	cbz	r0, 2623e <nrf_sendto+0x2e>
   26226:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2622a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   2622e:	463b      	mov	r3, r7
   26230:	4632      	mov	r2, r6
   26232:	4629      	mov	r1, r5
   26234:	4620      	mov	r0, r4
   26236:	46f4      	mov	ip, lr
   26238:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2623c:	4760      	bx	ip
   2623e:	f04f 30ff 	mov.w	r0, #4294967295
   26242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26246:	bf00      	nop

00026248 <nrf_send>:
   26248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2624c:	b082      	sub	sp, #8
   2624e:	460e      	mov	r6, r1
   26250:	4617      	mov	r7, r2
   26252:	4698      	mov	r8, r3
   26254:	4605      	mov	r5, r0
   26256:	f7fd fdcd 	bl	23df4 <bsd_platform_fd_method_table_get>
   2625a:	b160      	cbz	r0, 26276 <nrf_send+0x2e>
   2625c:	4604      	mov	r4, r0
   2625e:	2000      	movs	r0, #0
   26260:	e9cd 0000 	strd	r0, r0, [sp]
   26264:	4643      	mov	r3, r8
   26266:	463a      	mov	r2, r7
   26268:	4631      	mov	r1, r6
   2626a:	4628      	mov	r0, r5
   2626c:	68a4      	ldr	r4, [r4, #8]
   2626e:	47a0      	blx	r4
   26270:	b002      	add	sp, #8
   26272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26276:	f04f 30ff 	mov.w	r0, #4294967295
   2627a:	e7f9      	b.n	26270 <nrf_send+0x28>

0002627c <nrf_recvfrom>:
   2627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26280:	460d      	mov	r5, r1
   26282:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   26286:	4616      	mov	r6, r2
   26288:	461f      	mov	r7, r3
   2628a:	4604      	mov	r4, r0
   2628c:	f7fd fdb2 	bl	23df4 <bsd_platform_fd_method_table_get>
   26290:	b158      	cbz	r0, 262aa <nrf_recvfrom+0x2e>
   26292:	e9cd 8908 	strd	r8, r9, [sp, #32]
   26296:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2629a:	463b      	mov	r3, r7
   2629c:	4632      	mov	r2, r6
   2629e:	4629      	mov	r1, r5
   262a0:	4620      	mov	r0, r4
   262a2:	46f4      	mov	ip, lr
   262a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   262a8:	4760      	bx	ip
   262aa:	f04f 30ff 	mov.w	r0, #4294967295
   262ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   262b2:	bf00      	nop

000262b4 <nrf_recv>:
   262b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   262b8:	b082      	sub	sp, #8
   262ba:	460e      	mov	r6, r1
   262bc:	4617      	mov	r7, r2
   262be:	4698      	mov	r8, r3
   262c0:	4605      	mov	r5, r0
   262c2:	f7fd fd97 	bl	23df4 <bsd_platform_fd_method_table_get>
   262c6:	b160      	cbz	r0, 262e2 <nrf_recv+0x2e>
   262c8:	4604      	mov	r4, r0
   262ca:	2000      	movs	r0, #0
   262cc:	e9cd 0000 	strd	r0, r0, [sp]
   262d0:	4643      	mov	r3, r8
   262d2:	463a      	mov	r2, r7
   262d4:	4631      	mov	r1, r6
   262d6:	4628      	mov	r0, r5
   262d8:	68e4      	ldr	r4, [r4, #12]
   262da:	47a0      	blx	r4
   262dc:	b002      	add	sp, #8
   262de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   262e2:	f04f 30ff 	mov.w	r0, #4294967295
   262e6:	e7f9      	b.n	262dc <nrf_recv+0x28>

000262e8 <nrf_connect>:
   262e8:	b570      	push	{r4, r5, r6, lr}
   262ea:	460d      	mov	r5, r1
   262ec:	4616      	mov	r6, r2
   262ee:	4604      	mov	r4, r0
   262f0:	f7fd fd80 	bl	23df4 <bsd_platform_fd_method_table_get>
   262f4:	b130      	cbz	r0, 26304 <nrf_connect+0x1c>
   262f6:	6943      	ldr	r3, [r0, #20]
   262f8:	4632      	mov	r2, r6
   262fa:	4629      	mov	r1, r5
   262fc:	4620      	mov	r0, r4
   262fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26302:	4718      	bx	r3
   26304:	f04f 30ff 	mov.w	r0, #4294967295
   26308:	bd70      	pop	{r4, r5, r6, pc}
   2630a:	bf00      	nop

0002630c <nrf_listen>:
   2630c:	b570      	push	{r4, r5, r6, lr}
   2630e:	460d      	mov	r5, r1
   26310:	4604      	mov	r4, r0
   26312:	f7fd fd6f 	bl	23df4 <bsd_platform_fd_method_table_get>
   26316:	b128      	cbz	r0, 26324 <nrf_listen+0x18>
   26318:	6983      	ldr	r3, [r0, #24]
   2631a:	4629      	mov	r1, r5
   2631c:	4620      	mov	r0, r4
   2631e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26322:	4718      	bx	r3
   26324:	f04f 30ff 	mov.w	r0, #4294967295
   26328:	bd70      	pop	{r4, r5, r6, pc}
   2632a:	bf00      	nop

0002632c <nrf_accept>:
   2632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26330:	460d      	mov	r5, r1
   26332:	4616      	mov	r6, r2
   26334:	4604      	mov	r4, r0
   26336:	f7fd fd5d 	bl	23df4 <bsd_platform_fd_method_table_get>
   2633a:	b140      	cbz	r0, 2634e <nrf_accept+0x22>
   2633c:	69c7      	ldr	r7, [r0, #28]
   2633e:	4632      	mov	r2, r6
   26340:	4629      	mov	r1, r5
   26342:	4620      	mov	r0, r4
   26344:	46bc      	mov	ip, r7
   26346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2634a:	2300      	movs	r3, #0
   2634c:	4760      	bx	ip
   2634e:	f04f 30ff 	mov.w	r0, #4294967295
   26352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26356:	bf00      	nop

00026358 <nrf_bind>:
   26358:	b570      	push	{r4, r5, r6, lr}
   2635a:	460d      	mov	r5, r1
   2635c:	4616      	mov	r6, r2
   2635e:	4604      	mov	r4, r0
   26360:	f7fd fd48 	bl	23df4 <bsd_platform_fd_method_table_get>
   26364:	b130      	cbz	r0, 26374 <nrf_bind+0x1c>
   26366:	6903      	ldr	r3, [r0, #16]
   26368:	4632      	mov	r2, r6
   2636a:	4629      	mov	r1, r5
   2636c:	4620      	mov	r0, r4
   2636e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26372:	4718      	bx	r3
   26374:	f04f 30ff 	mov.w	r0, #4294967295
   26378:	bd70      	pop	{r4, r5, r6, pc}
   2637a:	bf00      	nop

0002637c <nrf_setsockopt>:
   2637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26380:	f8dd 8018 	ldr.w	r8, [sp, #24]
   26384:	460d      	mov	r5, r1
   26386:	4616      	mov	r6, r2
   26388:	461f      	mov	r7, r3
   2638a:	4604      	mov	r4, r0
   2638c:	f7fd fd32 	bl	23df4 <bsd_platform_fd_method_table_get>
   26390:	b158      	cbz	r0, 263aa <nrf_setsockopt+0x2e>
   26392:	f8cd 8018 	str.w	r8, [sp, #24]
   26396:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2639a:	463b      	mov	r3, r7
   2639c:	4632      	mov	r2, r6
   2639e:	4629      	mov	r1, r5
   263a0:	4620      	mov	r0, r4
   263a2:	46f4      	mov	ip, lr
   263a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   263a8:	4760      	bx	ip
   263aa:	f04f 30ff 	mov.w	r0, #4294967295
   263ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   263b2:	bf00      	nop

000263b4 <nrf_getsockopt>:
   263b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   263bc:	460d      	mov	r5, r1
   263be:	4616      	mov	r6, r2
   263c0:	461f      	mov	r7, r3
   263c2:	4604      	mov	r4, r0
   263c4:	f7fd fd16 	bl	23df4 <bsd_platform_fd_method_table_get>
   263c8:	b158      	cbz	r0, 263e2 <nrf_getsockopt+0x2e>
   263ca:	f8cd 8018 	str.w	r8, [sp, #24]
   263ce:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   263d2:	463b      	mov	r3, r7
   263d4:	4632      	mov	r2, r6
   263d6:	4629      	mov	r1, r5
   263d8:	4620      	mov	r0, r4
   263da:	46f4      	mov	ip, lr
   263dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   263e0:	4760      	bx	ip
   263e2:	f04f 30ff 	mov.w	r0, #4294967295
   263e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   263ea:	bf00      	nop

000263ec <nrf_getaddrinfo>:
   263ec:	f7fd bd78 	b.w	23ee0 <bsd_platform_getaddrinfo>

000263f0 <nrf_freeaddrinfo>:
   263f0:	f7fd bd78 	b.w	23ee4 <bsd_platform_freeaddrinfo>

000263f4 <nrf_poll>:
   263f4:	f7fd bd78 	b.w	23ee8 <bsd_platform_poll>

000263f8 <nrf_fcntl>:
   263f8:	f7fd bdd0 	b.w	23f9c <bsd_platform_fcntl>

000263fc <at_client_evt_handler>:
   263fc:	b120      	cbz	r0, 26408 <at_client_evt_handler+0xc>
   263fe:	f850 1b08 	ldr.w	r1, [r0], #8
   26402:	0c09      	lsrs	r1, r1, #16
   26404:	f7fb bf9e 	b.w	22344 <rpc_at_event_handler>
   26408:	4770      	bx	lr
   2640a:	bf00      	nop

0002640c <rpc_at_client_init>:
   2640c:	4801      	ldr	r0, [pc, #4]	; (26414 <rpc_at_client_init+0x8>)
   2640e:	f001 be47 	b.w	280a0 <rpc_client_register>
   26412:	bf00      	nop
   26414:	000313d0 	.word	0x000313d0

00026418 <rpc_at_client_request_alloc>:
   26418:	b180      	cbz	r0, 2643c <rpc_at_client_request_alloc+0x24>
   2641a:	2300      	movs	r3, #0
   2641c:	b510      	push	{r4, lr}
   2641e:	b082      	sub	sp, #8
   26420:	aa02      	add	r2, sp, #8
   26422:	4604      	mov	r4, r0
   26424:	f842 3d04 	str.w	r3, [r2, #-4]!
   26428:	2003      	movs	r0, #3
   2642a:	f002 f871 	bl	28510 <rpc_message_alloc>
   2642e:	b918      	cbnz	r0, 26438 <rpc_at_client_request_alloc+0x20>
   26430:	9b01      	ldr	r3, [sp, #4]
   26432:	b10b      	cbz	r3, 26438 <rpc_at_client_request_alloc+0x20>
   26434:	3308      	adds	r3, #8
   26436:	6023      	str	r3, [r4, #0]
   26438:	b002      	add	sp, #8
   2643a:	bd10      	pop	{r4, pc}
   2643c:	200e      	movs	r0, #14
   2643e:	4770      	bx	lr

00026440 <rpc_at_client_request_send>:
   26440:	b150      	cbz	r0, 26458 <rpc_at_client_request_send+0x18>
   26442:	4603      	mov	r3, r0
   26444:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   26448:	2003      	movs	r0, #3
   2644a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2644e:	f843 1d08 	str.w	r1, [r3, #-8]!
   26452:	4619      	mov	r1, r3
   26454:	f002 b844 	b.w	284e0 <rpc_message_send>
   26458:	200e      	movs	r0, #14
   2645a:	4770      	bx	lr

0002645c <rpc_at_client_message_free>:
   2645c:	b120      	cbz	r0, 26468 <rpc_at_client_message_free+0xc>
   2645e:	f1a0 0108 	sub.w	r1, r0, #8
   26462:	2003      	movs	r0, #3
   26464:	f002 b886 	b.w	28574 <rpc_message_free>
   26468:	200e      	movs	r0, #14
   2646a:	4770      	bx	lr

0002646c <rpc_at_client_data_free>:
   2646c:	b118      	cbz	r0, 26476 <rpc_at_client_data_free+0xa>
   2646e:	4601      	mov	r1, r0
   26470:	2003      	movs	r0, #3
   26472:	f002 b991 	b.w	28798 <rpc_message_data_free>
   26476:	200e      	movs	r0, #14
   26478:	4770      	bx	lr
   2647a:	bf00      	nop

0002647c <ip_recvd_packet_free_cb>:
   2647c:	b510      	push	{r4, lr}
   2647e:	4604      	mov	r4, r0
   26480:	6800      	ldr	r0, [r0, #0]
   26482:	f7fc fc1d 	bl	22cc0 <rpc_ip_client_data_free>
   26486:	68a0      	ldr	r0, [r4, #8]
   26488:	b118      	cbz	r0, 26492 <ip_recvd_packet_free_cb+0x16>
   2648a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2648e:	f7fc bbb7 	b.w	22c00 <nrf_free>
   26492:	bd10      	pop	{r4, pc}

00026494 <rpc_error_to_nrf_bsd_error>:
   26494:	2810      	cmp	r0, #16
   26496:	bf9a      	itte	ls
   26498:	4b02      	ldrls	r3, [pc, #8]	; (264a4 <rpc_error_to_nrf_bsd_error+0x10>)
   2649a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2649e:	202d      	movhi	r0, #45	; 0x2d
   264a0:	4770      	bx	lr
   264a2:	bf00      	nop
   264a4:	000313e0 	.word	0x000313e0

000264a8 <ip_interface_request_create>:
   264a8:	b570      	push	{r4, r5, r6, lr}
   264aa:	2500      	movs	r5, #0
   264ac:	b082      	sub	sp, #8
   264ae:	ac02      	add	r4, sp, #8
   264b0:	f844 5d04 	str.w	r5, [r4, #-4]!
   264b4:	4606      	mov	r6, r0
   264b6:	460d      	mov	r5, r1
   264b8:	4620      	mov	r0, r4
   264ba:	4619      	mov	r1, r3
   264bc:	4614      	mov	r4, r2
   264be:	f7fc fbcd 	bl	22c5c <rpc_ip_client_request_alloc>
   264c2:	b960      	cbnz	r0, 264de <ip_interface_request_create+0x36>
   264c4:	9b01      	ldr	r3, [sp, #4]
   264c6:	2208      	movs	r2, #8
   264c8:	7258      	strb	r0, [r3, #9]
   264ca:	7298      	strb	r0, [r3, #10]
   264cc:	72d8      	strb	r0, [r3, #11]
   264ce:	4618      	mov	r0, r3
   264d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   264d4:	60dc      	str	r4, [r3, #12]
   264d6:	611d      	str	r5, [r3, #16]
   264d8:	721a      	strb	r2, [r3, #8]
   264da:	b002      	add	sp, #8
   264dc:	bd70      	pop	{r4, r5, r6, pc}
   264de:	9b01      	ldr	r3, [sp, #4]
   264e0:	4618      	mov	r0, r3
   264e2:	b002      	add	sp, #8
   264e4:	bd70      	pop	{r4, r5, r6, pc}
   264e6:	bf00      	nop

000264e8 <ip_interface_request_send>:
   264e8:	b570      	push	{r4, r5, r6, lr}
   264ea:	460c      	mov	r4, r1
   264ec:	4605      	mov	r5, r0
   264ee:	4611      	mov	r1, r2
   264f0:	4620      	mov	r0, r4
   264f2:	461e      	mov	r6, r3
   264f4:	f7fc fbc6 	bl	22c84 <rpc_ip_client_request_send>
   264f8:	b900      	cbnz	r0, 264fc <ip_interface_request_send+0x14>
   264fa:	bd70      	pop	{r4, r5, r6, pc}
   264fc:	6820      	ldr	r0, [r4, #0]
   264fe:	b108      	cbz	r0, 26504 <ip_interface_request_send+0x1c>
   26500:	f7fc fbde 	bl	22cc0 <rpc_ip_client_data_free>
   26504:	4620      	mov	r0, r4
   26506:	f7fc fbd3 	bl	22cb0 <rpc_ip_client_message_free>
   2650a:	602e      	str	r6, [r5, #0]
   2650c:	2023      	movs	r0, #35	; 0x23
   2650e:	bd70      	pop	{r4, r5, r6, pc}

00026510 <ip_interface_wait>:
   26510:	b538      	push	{r3, r4, r5, lr}
   26512:	4605      	mov	r5, r0
   26514:	f001 fc14 	bl	27d40 <interface_socket_wait>
   26518:	4604      	mov	r4, r0
   2651a:	b108      	cbz	r0, 26520 <ip_interface_wait+0x10>
   2651c:	4620      	mov	r0, r4
   2651e:	bd38      	pop	{r3, r4, r5, pc}
   26520:	4628      	mov	r0, r5
   26522:	f001 fc81 	bl	27e28 <interface_socket_from_handle_get>
   26526:	2800      	cmp	r0, #0
   26528:	d0f8      	beq.n	2651c <ip_interface_wait+0xc>
   2652a:	6844      	ldr	r4, [r0, #4]
   2652c:	2c00      	cmp	r4, #0
   2652e:	d0f5      	beq.n	2651c <ip_interface_wait+0xc>
   26530:	2300      	movs	r3, #0
   26532:	6043      	str	r3, [r0, #4]
   26534:	4620      	mov	r0, r4
   26536:	bd38      	pop	{r3, r4, r5, pc}

00026538 <ip_interface_init>:
   26538:	b538      	push	{r3, r4, r5, lr}
   2653a:	2300      	movs	r3, #0
   2653c:	4d07      	ldr	r5, [pc, #28]	; (2655c <ip_interface_init+0x24>)
   2653e:	4c08      	ldr	r4, [pc, #32]	; (26560 <ip_interface_init+0x28>)
   26540:	4619      	mov	r1, r3
   26542:	2224      	movs	r2, #36	; 0x24
   26544:	4807      	ldr	r0, [pc, #28]	; (26564 <ip_interface_init+0x2c>)
   26546:	602b      	str	r3, [r5, #0]
   26548:	6023      	str	r3, [r4, #0]
   2654a:	f009 fc71 	bl	2fe30 <memset>
   2654e:	f7fc fb7f 	bl	22c50 <rpc_ip_client_init>
   26552:	3000      	adds	r0, #0
   26554:	bf18      	it	ne
   26556:	2001      	movne	r0, #1
   26558:	4240      	negs	r0, r0
   2655a:	bd38      	pop	{r3, r4, r5, pc}
   2655c:	20020848 	.word	0x20020848
   26560:	20020844 	.word	0x20020844
   26564:	20020850 	.word	0x20020850

00026568 <ip_interface_open>:
   26568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2656c:	4606      	mov	r6, r0
   2656e:	2000      	movs	r0, #0
   26570:	f026 0308 	bic.w	r3, r6, #8
   26574:	b082      	sub	sp, #8
   26576:	2b02      	cmp	r3, #2
   26578:	460c      	mov	r4, r1
   2657a:	4617      	mov	r7, r2
   2657c:	9000      	str	r0, [sp, #0]
   2657e:	d002      	beq.n	26586 <ip_interface_open+0x1e>
   26580:	2e05      	cmp	r6, #5
   26582:	f040 8085 	bne.w	26690 <ip_interface_open+0x128>
   26586:	1e63      	subs	r3, r4, #1
   26588:	2b02      	cmp	r3, #2
   2658a:	f200 8097 	bhi.w	266bc <ip_interface_open+0x154>
   2658e:	2f00      	cmp	r7, #0
   26590:	d154      	bne.n	2663c <ip_interface_open+0xd4>
   26592:	2c01      	cmp	r4, #1
   26594:	d067      	beq.n	26666 <ip_interface_open+0xfe>
   26596:	2c03      	cmp	r4, #3
   26598:	bf18      	it	ne
   2659a:	2702      	movne	r7, #2
   2659c:	4a4a      	ldr	r2, [pc, #296]	; (266c8 <ip_interface_open+0x160>)
   2659e:	4621      	mov	r1, r4
   265a0:	4668      	mov	r0, sp
   265a2:	f001 fb1b 	bl	27bdc <interface_socket_allocate>
   265a6:	9b00      	ldr	r3, [sp, #0]
   265a8:	4680      	mov	r8, r0
   265aa:	2b00      	cmp	r3, #0
   265ac:	d059      	beq.n	26662 <ip_interface_open+0xfa>
   265ae:	2100      	movs	r1, #0
   265b0:	a802      	add	r0, sp, #8
   265b2:	f840 1d04 	str.w	r1, [r0, #-4]!
   265b6:	e9c3 6403 	strd	r6, r4, [r3, #12]
   265ba:	615f      	str	r7, [r3, #20]
   265bc:	f7fc fb4e 	bl	22c5c <rpc_ip_client_request_alloc>
   265c0:	2800      	cmp	r0, #0
   265c2:	d14b      	bne.n	2665c <ip_interface_open+0xf4>
   265c4:	f247 0201 	movw	r2, #28673	; 0x7001
   265c8:	f04f 33ff 	mov.w	r3, #4294967295
   265cc:	2108      	movs	r1, #8
   265ce:	9d01      	ldr	r5, [sp, #4]
   265d0:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   265d4:	60ea      	str	r2, [r5, #12]
   265d6:	7268      	strb	r0, [r5, #9]
   265d8:	72a8      	strb	r0, [r5, #10]
   265da:	72e8      	strb	r0, [r5, #11]
   265dc:	7229      	strb	r1, [r5, #8]
   265de:	742b      	strb	r3, [r5, #16]
   265e0:	746b      	strb	r3, [r5, #17]
   265e2:	74ab      	strb	r3, [r5, #18]
   265e4:	74eb      	strb	r3, [r5, #19]
   265e6:	68ab      	ldr	r3, [r5, #8]
   265e8:	2e05      	cmp	r6, #5
   265ea:	f103 030c 	add.w	r3, r3, #12
   265ee:	60ab      	str	r3, [r5, #8]
   265f0:	d003      	beq.n	265fa <ip_interface_open+0x92>
   265f2:	2e0a      	cmp	r6, #10
   265f4:	bf14      	ite	ne
   265f6:	2601      	movne	r6, #1
   265f8:	2602      	moveq	r6, #2
   265fa:	616e      	str	r6, [r5, #20]
   265fc:	61ef      	str	r7, [r5, #28]
   265fe:	61ac      	str	r4, [r5, #24]
   26600:	f247 0101 	movw	r1, #28673	; 0x7001
   26604:	4628      	mov	r0, r5
   26606:	9f00      	ldr	r7, [sp, #0]
   26608:	f7fc fb3c 	bl	22c84 <rpc_ip_client_request_send>
   2660c:	4606      	mov	r6, r0
   2660e:	b360      	cbz	r0, 2666a <ip_interface_open+0x102>
   26610:	6828      	ldr	r0, [r5, #0]
   26612:	b108      	cbz	r0, 26618 <ip_interface_open+0xb0>
   26614:	f7fc fb54 	bl	22cc0 <rpc_ip_client_data_free>
   26618:	4628      	mov	r0, r5
   2661a:	f7fc fb49 	bl	22cb0 <rpc_ip_client_message_free>
   2661e:	2301      	movs	r3, #1
   26620:	2523      	movs	r5, #35	; 0x23
   26622:	603b      	str	r3, [r7, #0]
   26624:	4640      	mov	r0, r8
   26626:	f001 fb3d 	bl	27ca4 <interface_socket_free>
   2662a:	4628      	mov	r0, r5
   2662c:	f7fa f9de 	bl	209ec <bsd_os_errno_set>
   26630:	f04f 38ff 	mov.w	r8, #4294967295
   26634:	4640      	mov	r0, r8
   26636:	b002      	add	sp, #8
   26638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2663c:	2c01      	cmp	r4, #1
   2663e:	d009      	beq.n	26654 <ip_interface_open+0xec>
   26640:	2c02      	cmp	r4, #2
   26642:	d109      	bne.n	26658 <ip_interface_open+0xf0>
   26644:	2f02      	cmp	r7, #2
   26646:	d0a9      	beq.n	2659c <ip_interface_open+0x34>
   26648:	2029      	movs	r0, #41	; 0x29
   2664a:	f7fa f9cf 	bl	209ec <bsd_os_errno_set>
   2664e:	f04f 38ff 	mov.w	r8, #4294967295
   26652:	e7ef      	b.n	26634 <ip_interface_open+0xcc>
   26654:	2f01      	cmp	r7, #1
   26656:	d1f7      	bne.n	26648 <ip_interface_open+0xe0>
   26658:	2702      	movs	r7, #2
   2665a:	e79f      	b.n	2659c <ip_interface_open+0x34>
   2665c:	9d01      	ldr	r5, [sp, #4]
   2665e:	2d00      	cmp	r5, #0
   26660:	d1c1      	bne.n	265e6 <ip_interface_open+0x7e>
   26662:	250c      	movs	r5, #12
   26664:	e7de      	b.n	26624 <ip_interface_open+0xbc>
   26666:	4627      	mov	r7, r4
   26668:	e798      	b.n	2659c <ip_interface_open+0x34>
   2666a:	f04f 33ff 	mov.w	r3, #4294967295
   2666e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26672:	2102      	movs	r1, #2
   26674:	4640      	mov	r0, r8
   26676:	f001 fb63 	bl	27d40 <interface_socket_wait>
   2667a:	4605      	mov	r5, r0
   2667c:	2800      	cmp	r0, #0
   2667e:	d1d1      	bne.n	26624 <ip_interface_open+0xbc>
   26680:	4640      	mov	r0, r8
   26682:	f001 fbd1 	bl	27e28 <interface_socket_from_handle_get>
   26686:	b148      	cbz	r0, 2669c <ip_interface_open+0x134>
   26688:	6845      	ldr	r5, [r0, #4]
   2668a:	b13d      	cbz	r5, 2669c <ip_interface_open+0x134>
   2668c:	6046      	str	r6, [r0, #4]
   2668e:	e7c9      	b.n	26624 <ip_interface_open+0xbc>
   26690:	202f      	movs	r0, #47	; 0x2f
   26692:	f7fa f9ab 	bl	209ec <bsd_os_errno_set>
   26696:	f04f 38ff 	mov.w	r8, #4294967295
   2669a:	e7cb      	b.n	26634 <ip_interface_open+0xcc>
   2669c:	3c02      	subs	r4, #2
   2669e:	2c01      	cmp	r4, #1
   266a0:	d8c8      	bhi.n	26634 <ip_interface_open+0xcc>
   266a2:	4640      	mov	r0, r8
   266a4:	9b00      	ldr	r3, [sp, #0]
   266a6:	681a      	ldr	r2, [r3, #0]
   266a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   266ac:	601a      	str	r2, [r3, #0]
   266ae:	681a      	ldr	r2, [r3, #0]
   266b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   266b4:	601a      	str	r2, [r3, #0]
   266b6:	b002      	add	sp, #8
   266b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   266bc:	2016      	movs	r0, #22
   266be:	f7fa f995 	bl	209ec <bsd_os_errno_set>
   266c2:	f04f 38ff 	mov.w	r8, #4294967295
   266c6:	e7b5      	b.n	26634 <ip_interface_open+0xcc>
   266c8:	0002647d 	.word	0x0002647d

000266cc <ip_interface_close>:
   266cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   266d0:	b082      	sub	sp, #8
   266d2:	4606      	mov	r6, r0
   266d4:	f001 fba8 	bl	27e28 <interface_socket_from_handle_get>
   266d8:	2800      	cmp	r0, #0
   266da:	d063      	beq.n	267a4 <ip_interface_close+0xd8>
   266dc:	4604      	mov	r4, r0
   266de:	2100      	movs	r1, #0
   266e0:	a802      	add	r0, sp, #8
   266e2:	6827      	ldr	r7, [r4, #0]
   266e4:	f840 1d04 	str.w	r1, [r0, #-4]!
   266e8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   266ec:	f7fc fab6 	bl	22c5c <rpc_ip_client_request_alloc>
   266f0:	2800      	cmp	r0, #0
   266f2:	d13a      	bne.n	2676a <ip_interface_close+0x9e>
   266f4:	f247 0309 	movw	r3, #28681	; 0x7009
   266f8:	2208      	movs	r2, #8
   266fa:	9d01      	ldr	r5, [sp, #4]
   266fc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   26700:	60eb      	str	r3, [r5, #12]
   26702:	f8c5 8010 	str.w	r8, [r5, #16]
   26706:	7268      	strb	r0, [r5, #9]
   26708:	72a8      	strb	r0, [r5, #10]
   2670a:	72e8      	strb	r0, [r5, #11]
   2670c:	722a      	strb	r2, [r5, #8]
   2670e:	6823      	ldr	r3, [r4, #0]
   26710:	f247 0109 	movw	r1, #28681	; 0x7009
   26714:	0c1b      	lsrs	r3, r3, #16
   26716:	041b      	lsls	r3, r3, #16
   26718:	f043 030d 	orr.w	r3, r3, #13
   2671c:	6023      	str	r3, [r4, #0]
   2671e:	6823      	ldr	r3, [r4, #0]
   26720:	4628      	mov	r0, r5
   26722:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   26726:	6023      	str	r3, [r4, #0]
   26728:	6823      	ldr	r3, [r4, #0]
   2672a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2672e:	6023      	str	r3, [r4, #0]
   26730:	f7fc faa8 	bl	22c84 <rpc_ip_client_request_send>
   26734:	bb40      	cbnz	r0, 26788 <ip_interface_close+0xbc>
   26736:	f04f 33ff 	mov.w	r3, #4294967295
   2673a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2673e:	210e      	movs	r1, #14
   26740:	4630      	mov	r0, r6
   26742:	f001 fafd 	bl	27d40 <interface_socket_wait>
   26746:	4604      	mov	r4, r0
   26748:	b1a0      	cbz	r0, 26774 <ip_interface_close+0xa8>
   2674a:	4c17      	ldr	r4, [pc, #92]	; (267a8 <ip_interface_close+0xdc>)
   2674c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   26750:	b120      	cbz	r0, 2675c <ip_interface_close+0x90>
   26752:	f7fc faad 	bl	22cb0 <rpc_ip_client_message_free>
   26756:	2300      	movs	r3, #0
   26758:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   2675c:	4630      	mov	r0, r6
   2675e:	f001 faa1 	bl	27ca4 <interface_socket_free>
   26762:	2000      	movs	r0, #0
   26764:	b002      	add	sp, #8
   26766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2676a:	9d01      	ldr	r5, [sp, #4]
   2676c:	200c      	movs	r0, #12
   2676e:	2d00      	cmp	r5, #0
   26770:	d1cd      	bne.n	2670e <ip_interface_close+0x42>
   26772:	e012      	b.n	2679a <ip_interface_close+0xce>
   26774:	4630      	mov	r0, r6
   26776:	f001 fb57 	bl	27e28 <interface_socket_from_handle_get>
   2677a:	2800      	cmp	r0, #0
   2677c:	d0e5      	beq.n	2674a <ip_interface_close+0x7e>
   2677e:	6843      	ldr	r3, [r0, #4]
   26780:	2b00      	cmp	r3, #0
   26782:	d0e2      	beq.n	2674a <ip_interface_close+0x7e>
   26784:	6044      	str	r4, [r0, #4]
   26786:	e7e0      	b.n	2674a <ip_interface_close+0x7e>
   26788:	6828      	ldr	r0, [r5, #0]
   2678a:	b108      	cbz	r0, 26790 <ip_interface_close+0xc4>
   2678c:	f7fc fa98 	bl	22cc0 <rpc_ip_client_data_free>
   26790:	4628      	mov	r0, r5
   26792:	f7fc fa8d 	bl	22cb0 <rpc_ip_client_message_free>
   26796:	2023      	movs	r0, #35	; 0x23
   26798:	6027      	str	r7, [r4, #0]
   2679a:	f7fa f927 	bl	209ec <bsd_os_errno_set>
   2679e:	f04f 30ff 	mov.w	r0, #4294967295
   267a2:	e7df      	b.n	26764 <ip_interface_close+0x98>
   267a4:	2009      	movs	r0, #9
   267a6:	e7f8      	b.n	2679a <ip_interface_close+0xce>
   267a8:	20020850 	.word	0x20020850

000267ac <ip_interface_sendto>:
   267ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267b0:	2400      	movs	r4, #0
   267b2:	b089      	sub	sp, #36	; 0x24
   267b4:	9102      	str	r1, [sp, #8]
   267b6:	4615      	mov	r5, r2
   267b8:	4699      	mov	r9, r3
   267ba:	9407      	str	r4, [sp, #28]
   267bc:	4607      	mov	r7, r0
   267be:	9e12      	ldr	r6, [sp, #72]	; 0x48
   267c0:	f001 fb32 	bl	27e28 <interface_socket_from_handle_get>
   267c4:	2800      	cmp	r0, #0
   267c6:	f000 815f 	beq.w	26a88 <ip_interface_sendto+0x2dc>
   267ca:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   267ce:	f300 814c 	bgt.w	26a6a <ip_interface_sendto+0x2be>
   267d2:	6903      	ldr	r3, [r0, #16]
   267d4:	4604      	mov	r4, r0
   267d6:	2b01      	cmp	r3, #1
   267d8:	f000 80fb 	beq.w	269d2 <ip_interface_sendto+0x226>
   267dc:	6822      	ldr	r2, [r4, #0]
   267de:	0390      	lsls	r0, r2, #14
   267e0:	d562      	bpl.n	268a8 <ip_interface_sendto+0xfc>
   267e2:	f1b9 0f00 	cmp.w	r9, #0
   267e6:	f000 80fc 	beq.w	269e2 <ip_interface_sendto+0x236>
   267ea:	f019 0f02 	tst.w	r9, #2
   267ee:	f000 8146 	beq.w	26a7e <ip_interface_sendto+0x2d2>
   267f2:	2300      	movs	r3, #0
   267f4:	9303      	str	r3, [sp, #12]
   267f6:	f247 0806 	movw	r8, #28678	; 0x7006
   267fa:	f04f 0b0c 	mov.w	fp, #12
   267fe:	4ba6      	ldr	r3, [pc, #664]	; (26a98 <ip_interface_sendto+0x2ec>)
   26800:	9300      	str	r3, [sp, #0]
   26802:	043b      	lsls	r3, r7, #16
   26804:	9304      	str	r3, [sp, #16]
   26806:	4629      	mov	r1, r5
   26808:	a807      	add	r0, sp, #28
   2680a:	f7fc fa27 	bl	22c5c <rpc_ip_client_request_alloc>
   2680e:	2804      	cmp	r0, #4
   26810:	d063      	beq.n	268da <ip_interface_sendto+0x12e>
   26812:	2800      	cmp	r0, #0
   26814:	f040 813d 	bne.w	26a92 <ip_interface_sendto+0x2e6>
   26818:	9b07      	ldr	r3, [sp, #28]
   2681a:	f883 b008 	strb.w	fp, [r3, #8]
   2681e:	7258      	strb	r0, [r3, #9]
   26820:	7298      	strb	r0, [r3, #10]
   26822:	72d8      	strb	r0, [r3, #11]
   26824:	2e00      	cmp	r6, #0
   26826:	d074      	beq.n	26912 <ip_interface_sendto+0x166>
   26828:	68e2      	ldr	r2, [r4, #12]
   2682a:	6871      	ldr	r1, [r6, #4]
   2682c:	428a      	cmp	r2, r1
   2682e:	f040 80a2 	bne.w	26976 <ip_interface_sendto+0x1ca>
   26832:	7831      	ldrb	r1, [r6, #0]
   26834:	9813      	ldr	r0, [sp, #76]	; 0x4c
   26836:	4288      	cmp	r0, r1
   26838:	d10a      	bne.n	26850 <ip_interface_sendto+0xa4>
   2683a:	2a02      	cmp	r2, #2
   2683c:	f103 001c 	add.w	r0, r3, #28
   26840:	f000 8101 	beq.w	26a46 <ip_interface_sendto+0x29a>
   26844:	2a0a      	cmp	r2, #10
   26846:	d103      	bne.n	26850 <ip_interface_sendto+0xa4>
   26848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2684a:	2a24      	cmp	r2, #36	; 0x24
   2684c:	f000 80e8 	beq.w	26a20 <ip_interface_sendto+0x274>
   26850:	f04f 0a16 	mov.w	sl, #22
   26854:	6818      	ldr	r0, [r3, #0]
   26856:	b110      	cbz	r0, 2685e <ip_interface_sendto+0xb2>
   26858:	f7fc fa32 	bl	22cc0 <rpc_ip_client_data_free>
   2685c:	9b07      	ldr	r3, [sp, #28]
   2685e:	4618      	mov	r0, r3
   26860:	f7fc fa26 	bl	22cb0 <rpc_ip_client_message_free>
   26864:	6823      	ldr	r3, [r4, #0]
   26866:	031a      	lsls	r2, r3, #12
   26868:	d43f      	bmi.n	268ea <ip_interface_sendto+0x13e>
   2686a:	6823      	ldr	r3, [r4, #0]
   2686c:	b29b      	uxth	r3, r3
   2686e:	2b0d      	cmp	r3, #13
   26870:	d007      	beq.n	26882 <ip_interface_sendto+0xd6>
   26872:	6823      	ldr	r3, [r4, #0]
   26874:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   26878:	6023      	str	r3, [r4, #0]
   2687a:	6823      	ldr	r3, [r4, #0]
   2687c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26880:	6023      	str	r3, [r4, #0]
   26882:	f1ba 0f00 	cmp.w	sl, #0
   26886:	d130      	bne.n	268ea <ip_interface_sendto+0x13e>
   26888:	6823      	ldr	r3, [r4, #0]
   2688a:	0118      	lsls	r0, r3, #4
   2688c:	d576      	bpl.n	2697c <ip_interface_sendto+0x1d0>
   2688e:	6823      	ldr	r3, [r4, #0]
   26890:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   26894:	6023      	str	r3, [r4, #0]
   26896:	9b00      	ldr	r3, [sp, #0]
   26898:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2689c:	2800      	cmp	r0, #0
   2689e:	d12e      	bne.n	268fe <ip_interface_sendto+0x152>
   268a0:	4628      	mov	r0, r5
   268a2:	b009      	add	sp, #36	; 0x24
   268a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   268a8:	6822      	ldr	r2, [r4, #0]
   268aa:	0091      	lsls	r1, r2, #2
   268ac:	d406      	bmi.n	268bc <ip_interface_sendto+0x110>
   268ae:	2b01      	cmp	r3, #1
   268b0:	f000 80b0 	beq.w	26a14 <ip_interface_sendto+0x268>
   268b4:	6823      	ldr	r3, [r4, #0]
   268b6:	031a      	lsls	r2, r3, #12
   268b8:	f140 80d2 	bpl.w	26a60 <ip_interface_sendto+0x2b4>
   268bc:	6823      	ldr	r3, [r4, #0]
   268be:	031b      	lsls	r3, r3, #12
   268c0:	f140 80d8 	bpl.w	26a74 <ip_interface_sendto+0x2c8>
   268c4:	4b74      	ldr	r3, [pc, #464]	; (26a98 <ip_interface_sendto+0x2ec>)
   268c6:	f8d4 a008 	ldr.w	sl, [r4, #8]
   268ca:	9300      	str	r3, [sp, #0]
   268cc:	e7d9      	b.n	26882 <ip_interface_sendto+0xd6>
   268ce:	9b00      	ldr	r3, [sp, #0]
   268d0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   268d4:	b108      	cbz	r0, 268da <ip_interface_sendto+0x12e>
   268d6:	f7fc f9eb 	bl	22cb0 <rpc_ip_client_message_free>
   268da:	9b03      	ldr	r3, [sp, #12]
   268dc:	2b00      	cmp	r3, #0
   268de:	d192      	bne.n	26806 <ip_interface_sendto+0x5a>
   268e0:	6823      	ldr	r3, [r4, #0]
   268e2:	f04f 0a23 	mov.w	sl, #35	; 0x23
   268e6:	031a      	lsls	r2, r3, #12
   268e8:	d5bf      	bpl.n	2686a <ip_interface_sendto+0xbe>
   268ea:	4650      	mov	r0, sl
   268ec:	f7fa f87e 	bl	209ec <bsd_os_errno_set>
   268f0:	9b00      	ldr	r3, [sp, #0]
   268f2:	f04f 35ff 	mov.w	r5, #4294967295
   268f6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   268fa:	2800      	cmp	r0, #0
   268fc:	d0d0      	beq.n	268a0 <ip_interface_sendto+0xf4>
   268fe:	f7fc f9d7 	bl	22cb0 <rpc_ip_client_message_free>
   26902:	2300      	movs	r3, #0
   26904:	9a00      	ldr	r2, [sp, #0]
   26906:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   2690a:	4628      	mov	r0, r5
   2690c:	b009      	add	sp, #36	; 0x24
   2690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26912:	4642      	mov	r2, r8
   26914:	f8c3 9014 	str.w	r9, [r3, #20]
   26918:	69a1      	ldr	r1, [r4, #24]
   2691a:	9804      	ldr	r0, [sp, #16]
   2691c:	6119      	str	r1, [r3, #16]
   2691e:	9902      	ldr	r1, [sp, #8]
   26920:	4302      	orrs	r2, r0
   26922:	60da      	str	r2, [r3, #12]
   26924:	605d      	str	r5, [r3, #4]
   26926:	b119      	cbz	r1, 26930 <ip_interface_sendto+0x184>
   26928:	6818      	ldr	r0, [r3, #0]
   2692a:	462a      	mov	r2, r5
   2692c:	f009 fa73 	bl	2fe16 <memcpy>
   26930:	6823      	ldr	r3, [r4, #0]
   26932:	4641      	mov	r1, r8
   26934:	9305      	str	r3, [sp, #20]
   26936:	6823      	ldr	r3, [r4, #0]
   26938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2693c:	6023      	str	r3, [r4, #0]
   2693e:	6823      	ldr	r3, [r4, #0]
   26940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   26944:	6023      	str	r3, [r4, #0]
   26946:	9b07      	ldr	r3, [sp, #28]
   26948:	4618      	mov	r0, r3
   2694a:	9301      	str	r3, [sp, #4]
   2694c:	f7fc f99a 	bl	22c84 <rpc_ip_client_request_send>
   26950:	9b01      	ldr	r3, [sp, #4]
   26952:	4682      	mov	sl, r0
   26954:	b9e8      	cbnz	r0, 26992 <ip_interface_sendto+0x1e6>
   26956:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2695a:	f04f 33ff 	mov.w	r3, #4294967295
   2695e:	4611      	mov	r1, r2
   26960:	4638      	mov	r0, r7
   26962:	f001 f9ed 	bl	27d40 <interface_socket_wait>
   26966:	b308      	cbz	r0, 269ac <ip_interface_sendto+0x200>
   26968:	6823      	ldr	r3, [r4, #0]
   2696a:	0319      	lsls	r1, r3, #12
   2696c:	d42a      	bmi.n	269c4 <ip_interface_sendto+0x218>
   2696e:	280c      	cmp	r0, #12
   26970:	d0ad      	beq.n	268ce <ip_interface_sendto+0x122>
   26972:	4682      	mov	sl, r0
   26974:	e776      	b.n	26864 <ip_interface_sendto+0xb8>
   26976:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   2697a:	e76b      	b.n	26854 <ip_interface_sendto+0xa8>
   2697c:	9b00      	ldr	r3, [sp, #0]
   2697e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   26982:	6985      	ldr	r5, [r0, #24]
   26984:	f7fc f994 	bl	22cb0 <rpc_ip_client_message_free>
   26988:	2300      	movs	r3, #0
   2698a:	9a00      	ldr	r2, [sp, #0]
   2698c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   26990:	e7bb      	b.n	2690a <ip_interface_sendto+0x15e>
   26992:	6818      	ldr	r0, [r3, #0]
   26994:	469a      	mov	sl, r3
   26996:	b108      	cbz	r0, 2699c <ip_interface_sendto+0x1f0>
   26998:	f7fc f992 	bl	22cc0 <rpc_ip_client_data_free>
   2699c:	4650      	mov	r0, sl
   2699e:	f7fc f987 	bl	22cb0 <rpc_ip_client_message_free>
   269a2:	9b05      	ldr	r3, [sp, #20]
   269a4:	f04f 0a23 	mov.w	sl, #35	; 0x23
   269a8:	6023      	str	r3, [r4, #0]
   269aa:	e75b      	b.n	26864 <ip_interface_sendto+0xb8>
   269ac:	4638      	mov	r0, r7
   269ae:	f001 fa3b 	bl	27e28 <interface_socket_from_handle_get>
   269b2:	4603      	mov	r3, r0
   269b4:	b1e0      	cbz	r0, 269f0 <ip_interface_sendto+0x244>
   269b6:	6840      	ldr	r0, [r0, #4]
   269b8:	b1d0      	cbz	r0, 269f0 <ip_interface_sendto+0x244>
   269ba:	f8c3 a004 	str.w	sl, [r3, #4]
   269be:	6823      	ldr	r3, [r4, #0]
   269c0:	0319      	lsls	r1, r3, #12
   269c2:	d5d4      	bpl.n	2696e <ip_interface_sendto+0x1c2>
   269c4:	f8d4 a008 	ldr.w	sl, [r4, #8]
   269c8:	6823      	ldr	r3, [r4, #0]
   269ca:	031e      	lsls	r6, r3, #12
   269cc:	f57f af4d 	bpl.w	2686a <ip_interface_sendto+0xbe>
   269d0:	e757      	b.n	26882 <ip_interface_sendto+0xd6>
   269d2:	2e00      	cmp	r6, #0
   269d4:	f43f af02 	beq.w	267dc <ip_interface_sendto+0x30>
   269d8:	4b2f      	ldr	r3, [pc, #188]	; (26a98 <ip_interface_sendto+0x2ec>)
   269da:	f04f 0a38 	mov.w	sl, #56	; 0x38
   269de:	9300      	str	r3, [sp, #0]
   269e0:	e783      	b.n	268ea <ip_interface_sendto+0x13e>
   269e2:	6823      	ldr	r3, [r4, #0]
   269e4:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   269e8:	f3c3 7300 	ubfx	r3, r3, #28, #1
   269ec:	9303      	str	r3, [sp, #12]
   269ee:	e702      	b.n	267f6 <ip_interface_sendto+0x4a>
   269f0:	6823      	ldr	r3, [r4, #0]
   269f2:	031b      	lsls	r3, r3, #12
   269f4:	f53f af48 	bmi.w	26888 <ip_interface_sendto+0xdc>
   269f8:	6823      	ldr	r3, [r4, #0]
   269fa:	b29b      	uxth	r3, r3
   269fc:	2b0d      	cmp	r3, #13
   269fe:	f43f af43 	beq.w	26888 <ip_interface_sendto+0xdc>
   26a02:	6823      	ldr	r3, [r4, #0]
   26a04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   26a08:	6023      	str	r3, [r4, #0]
   26a0a:	6823      	ldr	r3, [r4, #0]
   26a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26a10:	6023      	str	r3, [r4, #0]
   26a12:	e739      	b.n	26888 <ip_interface_sendto+0xdc>
   26a14:	6823      	ldr	r3, [r4, #0]
   26a16:	b29b      	uxth	r3, r3
   26a18:	2b05      	cmp	r3, #5
   26a1a:	f47f af4f 	bne.w	268bc <ip_interface_sendto+0x110>
   26a1e:	e749      	b.n	268b4 <ip_interface_sendto+0x108>
   26a20:	2210      	movs	r2, #16
   26a22:	8931      	ldrh	r1, [r6, #8]
   26a24:	835a      	strh	r2, [r3, #26]
   26a26:	8319      	strh	r1, [r3, #24]
   26a28:	18b1      	adds	r1, r6, r2
   26a2a:	f009 f9f4 	bl	2fe16 <memcpy>
   26a2e:	f247 0207 	movw	r2, #28679	; 0x7007
   26a32:	9b07      	ldr	r3, [sp, #28]
   26a34:	4690      	mov	r8, r2
   26a36:	6899      	ldr	r1, [r3, #8]
   26a38:	8b58      	ldrh	r0, [r3, #26]
   26a3a:	3104      	adds	r1, #4
   26a3c:	4401      	add	r1, r0
   26a3e:	f8c3 9014 	str.w	r9, [r3, #20]
   26a42:	6099      	str	r1, [r3, #8]
   26a44:	e768      	b.n	26918 <ip_interface_sendto+0x16c>
   26a46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   26a48:	2a10      	cmp	r2, #16
   26a4a:	f47f af01 	bne.w	26850 <ip_interface_sendto+0xa4>
   26a4e:	2204      	movs	r2, #4
   26a50:	8931      	ldrh	r1, [r6, #8]
   26a52:	835a      	strh	r2, [r3, #26]
   26a54:	8319      	strh	r1, [r3, #24]
   26a56:	f106 010c 	add.w	r1, r6, #12
   26a5a:	f009 f9dc 	bl	2fe16 <memcpy>
   26a5e:	e7e6      	b.n	26a2e <ip_interface_sendto+0x282>
   26a60:	4b0d      	ldr	r3, [pc, #52]	; (26a98 <ip_interface_sendto+0x2ec>)
   26a62:	f04f 0a23 	mov.w	sl, #35	; 0x23
   26a66:	9300      	str	r3, [sp, #0]
   26a68:	e73f      	b.n	268ea <ip_interface_sendto+0x13e>
   26a6a:	4b0b      	ldr	r3, [pc, #44]	; (26a98 <ip_interface_sendto+0x2ec>)
   26a6c:	f04f 0a28 	mov.w	sl, #40	; 0x28
   26a70:	9300      	str	r3, [sp, #0]
   26a72:	e73a      	b.n	268ea <ip_interface_sendto+0x13e>
   26a74:	4b08      	ldr	r3, [pc, #32]	; (26a98 <ip_interface_sendto+0x2ec>)
   26a76:	f04f 0a39 	mov.w	sl, #57	; 0x39
   26a7a:	9300      	str	r3, [sp, #0]
   26a7c:	e735      	b.n	268ea <ip_interface_sendto+0x13e>
   26a7e:	4b06      	ldr	r3, [pc, #24]	; (26a98 <ip_interface_sendto+0x2ec>)
   26a80:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   26a84:	9300      	str	r3, [sp, #0]
   26a86:	e730      	b.n	268ea <ip_interface_sendto+0x13e>
   26a88:	4b03      	ldr	r3, [pc, #12]	; (26a98 <ip_interface_sendto+0x2ec>)
   26a8a:	f04f 0a09 	mov.w	sl, #9
   26a8e:	9300      	str	r3, [sp, #0]
   26a90:	e72b      	b.n	268ea <ip_interface_sendto+0x13e>
   26a92:	f04f 0a0c 	mov.w	sl, #12
   26a96:	e6e5      	b.n	26864 <ip_interface_sendto+0xb8>
   26a98:	20020850 	.word	0x20020850

00026a9c <ip_interface_recvfrom>:
   26a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26aa0:	b085      	sub	sp, #20
   26aa2:	2a00      	cmp	r2, #0
   26aa4:	f000 811b 	beq.w	26cde <ip_interface_recvfrom+0x242>
   26aa8:	4605      	mov	r5, r0
   26aaa:	468a      	mov	sl, r1
   26aac:	4698      	mov	r8, r3
   26aae:	4617      	mov	r7, r2
   26ab0:	b11b      	cbz	r3, 26aba <ip_interface_recvfrom+0x1e>
   26ab2:	f013 0f1a 	tst.w	r3, #26
   26ab6:	f000 810f 	beq.w	26cd8 <ip_interface_recvfrom+0x23c>
   26aba:	4628      	mov	r0, r5
   26abc:	f001 f9b4 	bl	27e28 <interface_socket_from_handle_get>
   26ac0:	4604      	mov	r4, r0
   26ac2:	2800      	cmp	r0, #0
   26ac4:	f000 810e 	beq.w	26ce4 <ip_interface_recvfrom+0x248>
   26ac8:	6803      	ldr	r3, [r0, #0]
   26aca:	02d9      	lsls	r1, r3, #11
   26acc:	d564      	bpl.n	26b98 <ip_interface_recvfrom+0xfc>
   26ace:	f018 0f02 	tst.w	r8, #2
   26ad2:	bf18      	it	ne
   26ad4:	f04f 0900 	movne.w	r9, #0
   26ad8:	f04f 3bff 	mov.w	fp, #4294967295
   26adc:	bf08      	it	eq
   26ade:	6803      	ldreq	r3, [r0, #0]
   26ae0:	f008 0610 	and.w	r6, r8, #16
   26ae4:	bf04      	itt	eq
   26ae6:	f083 5980 	eoreq.w	r9, r3, #268435456	; 0x10000000
   26aea:	f3c9 7900 	ubfxeq	r9, r9, #28, #1
   26aee:	6823      	ldr	r3, [r4, #0]
   26af0:	03da      	lsls	r2, r3, #15
   26af2:	d56c      	bpl.n	26bce <ip_interface_recvfrom+0x132>
   26af4:	6823      	ldr	r3, [r4, #0]
   26af6:	69e0      	ldr	r0, [r4, #28]
   26af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   26afc:	6023      	str	r3, [r4, #0]
   26afe:	6803      	ldr	r3, [r0, #0]
   26b00:	68db      	ldr	r3, [r3, #12]
   26b02:	4798      	blx	r3
   26b04:	f1b0 3fff 	cmp.w	r0, #4294967295
   26b08:	4683      	mov	fp, r0
   26b0a:	d07f      	beq.n	26c0c <ip_interface_recvfrom+0x170>
   26b0c:	4287      	cmp	r7, r0
   26b0e:	dd03      	ble.n	26b18 <ip_interface_recvfrom+0x7c>
   26b10:	6923      	ldr	r3, [r4, #16]
   26b12:	2b01      	cmp	r3, #1
   26b14:	f000 80a6 	beq.w	26c64 <ip_interface_recvfrom+0x1c8>
   26b18:	2600      	movs	r6, #0
   26b1a:	69e0      	ldr	r0, [r4, #28]
   26b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26b1e:	b103      	cbz	r3, 26b22 <ip_interface_recvfrom+0x86>
   26b20:	681b      	ldr	r3, [r3, #0]
   26b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26b24:	e9cd a700 	strd	sl, r7, [sp]
   26b28:	e9cd 2302 	strd	r2, r3, [sp, #8]
   26b2c:	6803      	ldr	r3, [r0, #0]
   26b2e:	4642      	mov	r2, r8
   26b30:	689b      	ldr	r3, [r3, #8]
   26b32:	4669      	mov	r1, sp
   26b34:	4798      	blx	r3
   26b36:	4683      	mov	fp, r0
   26b38:	69e0      	ldr	r0, [r4, #28]
   26b3a:	f1bb 3fff 	cmp.w	fp, #4294967295
   26b3e:	6803      	ldr	r3, [r0, #0]
   26b40:	bf18      	it	ne
   26b42:	2501      	movne	r5, #1
   26b44:	68db      	ldr	r3, [r3, #12]
   26b46:	bf0a      	itet	eq
   26b48:	2500      	moveq	r5, #0
   26b4a:	f04f 0900 	movne.w	r9, #0
   26b4e:	f04f 0923 	moveq.w	r9, #35	; 0x23
   26b52:	4798      	blx	r3
   26b54:	3001      	adds	r0, #1
   26b56:	d135      	bne.n	26bc4 <ip_interface_recvfrom+0x128>
   26b58:	2e00      	cmp	r6, #0
   26b5a:	f000 80b5 	beq.w	26cc8 <ip_interface_recvfrom+0x22c>
   26b5e:	2d00      	cmp	r5, #0
   26b60:	f000 80a5 	beq.w	26cae <ip_interface_recvfrom+0x212>
   26b64:	6823      	ldr	r3, [r4, #0]
   26b66:	0319      	lsls	r1, r3, #12
   26b68:	d506      	bpl.n	26b78 <ip_interface_recvfrom+0xdc>
   26b6a:	6823      	ldr	r3, [r4, #0]
   26b6c:	b29b      	uxth	r3, r3
   26b6e:	2b0d      	cmp	r3, #13
   26b70:	d002      	beq.n	26b78 <ip_interface_recvfrom+0xdc>
   26b72:	6923      	ldr	r3, [r4, #16]
   26b74:	2b01      	cmp	r3, #1
   26b76:	d025      	beq.n	26bc4 <ip_interface_recvfrom+0x128>
   26b78:	6823      	ldr	r3, [r4, #0]
   26b7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   26b7e:	6823      	ldr	r3, [r4, #0]
   26b80:	f040 80b3 	bne.w	26cea <ip_interface_recvfrom+0x24e>
   26b84:	031a      	lsls	r2, r3, #12
   26b86:	d474      	bmi.n	26c72 <ip_interface_recvfrom+0x1d6>
   26b88:	f1b9 0f00 	cmp.w	r9, #0
   26b8c:	f040 8089 	bne.w	26ca2 <ip_interface_recvfrom+0x206>
   26b90:	4658      	mov	r0, fp
   26b92:	b005      	add	sp, #20
   26b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b98:	6803      	ldr	r3, [r0, #0]
   26b9a:	b29b      	uxth	r3, r3
   26b9c:	2b06      	cmp	r3, #6
   26b9e:	d072      	beq.n	26c86 <ip_interface_recvfrom+0x1ea>
   26ba0:	6803      	ldr	r3, [r0, #0]
   26ba2:	b29b      	uxth	r3, r3
   26ba4:	2b07      	cmp	r3, #7
   26ba6:	bf0c      	ite	eq
   26ba8:	f04f 0909 	moveq.w	r9, #9
   26bac:	f04f 0939 	movne.w	r9, #57	; 0x39
   26bb0:	69e0      	ldr	r0, [r4, #28]
   26bb2:	6803      	ldr	r3, [r0, #0]
   26bb4:	68db      	ldr	r3, [r3, #12]
   26bb6:	4798      	blx	r3
   26bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
   26bbc:	4683      	mov	fp, r0
   26bbe:	d0db      	beq.n	26b78 <ip_interface_recvfrom+0xdc>
   26bc0:	f04f 3bff 	mov.w	fp, #4294967295
   26bc4:	6823      	ldr	r3, [r4, #0]
   26bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   26bca:	6023      	str	r3, [r4, #0]
   26bcc:	e7dc      	b.n	26b88 <ip_interface_recvfrom+0xec>
   26bce:	f1b9 0f00 	cmp.w	r9, #0
   26bd2:	d07d      	beq.n	26cd0 <ip_interface_recvfrom+0x234>
   26bd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   26bd8:	6a23      	ldr	r3, [r4, #32]
   26bda:	4611      	mov	r1, r2
   26bdc:	2b00      	cmp	r3, #0
   26bde:	bf08      	it	eq
   26be0:	f04f 33ff 	moveq.w	r3, #4294967295
   26be4:	4628      	mov	r0, r5
   26be6:	f001 f8ab 	bl	27d40 <interface_socket_wait>
   26bea:	4681      	mov	r9, r0
   26bec:	b358      	cbz	r0, 26c46 <ip_interface_recvfrom+0x1aa>
   26bee:	6823      	ldr	r3, [r4, #0]
   26bf0:	69e0      	ldr	r0, [r4, #28]
   26bf2:	031b      	lsls	r3, r3, #12
   26bf4:	d521      	bpl.n	26c3a <ip_interface_recvfrom+0x19e>
   26bf6:	6823      	ldr	r3, [r4, #0]
   26bf8:	b29b      	uxth	r3, r3
   26bfa:	2b0d      	cmp	r3, #13
   26bfc:	d01d      	beq.n	26c3a <ip_interface_recvfrom+0x19e>
   26bfe:	6926      	ldr	r6, [r4, #16]
   26c00:	f1a6 0601 	sub.w	r6, r6, #1
   26c04:	fab6 f686 	clz	r6, r6
   26c08:	0976      	lsrs	r6, r6, #5
   26c0a:	e787      	b.n	26b1c <ip_interface_recvfrom+0x80>
   26c0c:	6823      	ldr	r3, [r4, #0]
   26c0e:	0318      	lsls	r0, r3, #12
   26c10:	d5dd      	bpl.n	26bce <ip_interface_recvfrom+0x132>
   26c12:	6823      	ldr	r3, [r4, #0]
   26c14:	b29b      	uxth	r3, r3
   26c16:	2b0d      	cmp	r3, #13
   26c18:	d0d9      	beq.n	26bce <ip_interface_recvfrom+0x132>
   26c1a:	6923      	ldr	r3, [r4, #16]
   26c1c:	69e0      	ldr	r0, [r4, #28]
   26c1e:	2b01      	cmp	r3, #1
   26c20:	d034      	beq.n	26c8c <ip_interface_recvfrom+0x1f0>
   26c22:	f04f 0939 	mov.w	r9, #57	; 0x39
   26c26:	6823      	ldr	r3, [r4, #0]
   26c28:	0c1b      	lsrs	r3, r3, #16
   26c2a:	041b      	lsls	r3, r3, #16
   26c2c:	f043 030d 	orr.w	r3, r3, #13
   26c30:	6023      	str	r3, [r4, #0]
   26c32:	6823      	ldr	r3, [r4, #0]
   26c34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   26c38:	6023      	str	r3, [r4, #0]
   26c3a:	6803      	ldr	r3, [r0, #0]
   26c3c:	68db      	ldr	r3, [r3, #12]
   26c3e:	4798      	blx	r3
   26c40:	3001      	adds	r0, #1
   26c42:	d1bf      	bne.n	26bc4 <ip_interface_recvfrom+0x128>
   26c44:	e798      	b.n	26b78 <ip_interface_recvfrom+0xdc>
   26c46:	4628      	mov	r0, r5
   26c48:	f001 f8ee 	bl	27e28 <interface_socket_from_handle_get>
   26c4c:	b138      	cbz	r0, 26c5e <ip_interface_recvfrom+0x1c2>
   26c4e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   26c52:	f1b9 0f00 	cmp.w	r9, #0
   26c56:	d002      	beq.n	26c5e <ip_interface_recvfrom+0x1c2>
   26c58:	2300      	movs	r3, #0
   26c5a:	6043      	str	r3, [r0, #4]
   26c5c:	e7c7      	b.n	26bee <ip_interface_recvfrom+0x152>
   26c5e:	f04f 0901 	mov.w	r9, #1
   26c62:	e744      	b.n	26aee <ip_interface_recvfrom+0x52>
   26c64:	b11e      	cbz	r6, 26c6e <ip_interface_recvfrom+0x1d2>
   26c66:	6823      	ldr	r3, [r4, #0]
   26c68:	00db      	lsls	r3, r3, #3
   26c6a:	d5b3      	bpl.n	26bd4 <ip_interface_recvfrom+0x138>
   26c6c:	e754      	b.n	26b18 <ip_interface_recvfrom+0x7c>
   26c6e:	69e0      	ldr	r0, [r4, #28]
   26c70:	e754      	b.n	26b1c <ip_interface_recvfrom+0x80>
   26c72:	6823      	ldr	r3, [r4, #0]
   26c74:	b29b      	uxth	r3, r3
   26c76:	2b0d      	cmp	r3, #13
   26c78:	d186      	bne.n	26b88 <ip_interface_recvfrom+0xec>
   26c7a:	68a3      	ldr	r3, [r4, #8]
   26c7c:	2b00      	cmp	r3, #0
   26c7e:	d083      	beq.n	26b88 <ip_interface_recvfrom+0xec>
   26c80:	f8d4 9008 	ldr.w	r9, [r4, #8]
   26c84:	e780      	b.n	26b88 <ip_interface_recvfrom+0xec>
   26c86:	f04f 0909 	mov.w	r9, #9
   26c8a:	e791      	b.n	26bb0 <ip_interface_recvfrom+0x114>
   26c8c:	6803      	ldr	r3, [r0, #0]
   26c8e:	68db      	ldr	r3, [r3, #12]
   26c90:	4798      	blx	r3
   26c92:	3001      	adds	r0, #1
   26c94:	d00b      	beq.n	26cae <ip_interface_recvfrom+0x212>
   26c96:	f04f 0923 	mov.w	r9, #35	; 0x23
   26c9a:	6823      	ldr	r3, [r4, #0]
   26c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   26ca0:	6023      	str	r3, [r4, #0]
   26ca2:	4648      	mov	r0, r9
   26ca4:	f7f9 fea2 	bl	209ec <bsd_os_errno_set>
   26ca8:	f04f 3bff 	mov.w	fp, #4294967295
   26cac:	e770      	b.n	26b90 <ip_interface_recvfrom+0xf4>
   26cae:	6823      	ldr	r3, [r4, #0]
   26cb0:	f04f 0b00 	mov.w	fp, #0
   26cb4:	0c1b      	lsrs	r3, r3, #16
   26cb6:	041b      	lsls	r3, r3, #16
   26cb8:	f043 030d 	orr.w	r3, r3, #13
   26cbc:	6023      	str	r3, [r4, #0]
   26cbe:	6823      	ldr	r3, [r4, #0]
   26cc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   26cc4:	6023      	str	r3, [r4, #0]
   26cc6:	e763      	b.n	26b90 <ip_interface_recvfrom+0xf4>
   26cc8:	2d00      	cmp	r5, #0
   26cca:	f47f af4b 	bne.w	26b64 <ip_interface_recvfrom+0xc8>
   26cce:	e753      	b.n	26b78 <ip_interface_recvfrom+0xdc>
   26cd0:	f04f 0923 	mov.w	r9, #35	; 0x23
   26cd4:	69e0      	ldr	r0, [r4, #28]
   26cd6:	e7b0      	b.n	26c3a <ip_interface_recvfrom+0x19e>
   26cd8:	f04f 092d 	mov.w	r9, #45	; 0x2d
   26cdc:	e7e1      	b.n	26ca2 <ip_interface_recvfrom+0x206>
   26cde:	f04f 0916 	mov.w	r9, #22
   26ce2:	e7de      	b.n	26ca2 <ip_interface_recvfrom+0x206>
   26ce4:	f04f 0909 	mov.w	r9, #9
   26ce8:	e7db      	b.n	26ca2 <ip_interface_recvfrom+0x206>
   26cea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   26cee:	6023      	str	r3, [r4, #0]
   26cf0:	6823      	ldr	r3, [r4, #0]
   26cf2:	f04f 0969 	mov.w	r9, #105	; 0x69
   26cf6:	0c1b      	lsrs	r3, r3, #16
   26cf8:	041b      	lsls	r3, r3, #16
   26cfa:	f043 030d 	orr.w	r3, r3, #13
   26cfe:	6023      	str	r3, [r4, #0]
   26d00:	e7cf      	b.n	26ca2 <ip_interface_recvfrom+0x206>
   26d02:	bf00      	nop

00026d04 <ip_interface_connect>:
   26d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26d08:	b083      	sub	sp, #12
   26d0a:	2900      	cmp	r1, #0
   26d0c:	d049      	beq.n	26da2 <ip_interface_connect+0x9e>
   26d0e:	4616      	mov	r6, r2
   26d10:	2a00      	cmp	r2, #0
   26d12:	d046      	beq.n	26da2 <ip_interface_connect+0x9e>
   26d14:	4607      	mov	r7, r0
   26d16:	4688      	mov	r8, r1
   26d18:	f001 f886 	bl	27e28 <interface_socket_from_handle_get>
   26d1c:	4605      	mov	r5, r0
   26d1e:	2800      	cmp	r0, #0
   26d20:	f000 80a8 	beq.w	26e74 <ip_interface_connect+0x170>
   26d24:	6803      	ldr	r3, [r0, #0]
   26d26:	b29b      	uxth	r3, r3
   26d28:	2b02      	cmp	r3, #2
   26d2a:	d004      	beq.n	26d36 <ip_interface_connect+0x32>
   26d2c:	6803      	ldr	r3, [r0, #0]
   26d2e:	b29b      	uxth	r3, r3
   26d30:	2b04      	cmp	r3, #4
   26d32:	f040 808b 	bne.w	26e4c <ip_interface_connect+0x148>
   26d36:	6829      	ldr	r1, [r5, #0]
   26d38:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   26d3c:	f040 8082 	bne.w	26e44 <ip_interface_connect+0x140>
   26d40:	a802      	add	r0, sp, #8
   26d42:	f840 1d04 	str.w	r1, [r0, #-4]!
   26d46:	f8d5 9018 	ldr.w	r9, [r5, #24]
   26d4a:	f7fb ff87 	bl	22c5c <rpc_ip_client_request_alloc>
   26d4e:	bb90      	cbnz	r0, 26db6 <ip_interface_connect+0xb2>
   26d50:	2108      	movs	r1, #8
   26d52:	043b      	lsls	r3, r7, #16
   26d54:	9c01      	ldr	r4, [sp, #4]
   26d56:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   26d5a:	f042 0202 	orr.w	r2, r2, #2
   26d5e:	60e2      	str	r2, [r4, #12]
   26d60:	f8c4 9010 	str.w	r9, [r4, #16]
   26d64:	7260      	strb	r0, [r4, #9]
   26d66:	72a0      	strb	r0, [r4, #10]
   26d68:	72e0      	strb	r0, [r4, #11]
   26d6a:	7221      	strb	r1, [r4, #8]
   26d6c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   26d70:	f043 0302 	orr.w	r3, r3, #2
   26d74:	60e3      	str	r3, [r4, #12]
   26d76:	68a3      	ldr	r3, [r4, #8]
   26d78:	69aa      	ldr	r2, [r5, #24]
   26d7a:	3304      	adds	r3, #4
   26d7c:	6122      	str	r2, [r4, #16]
   26d7e:	60a3      	str	r3, [r4, #8]
   26d80:	68eb      	ldr	r3, [r5, #12]
   26d82:	f8d8 2004 	ldr.w	r2, [r8, #4]
   26d86:	4293      	cmp	r3, r2
   26d88:	d11a      	bne.n	26dc0 <ip_interface_connect+0xbc>
   26d8a:	f898 2000 	ldrb.w	r2, [r8]
   26d8e:	4296      	cmp	r6, r2
   26d90:	d107      	bne.n	26da2 <ip_interface_connect+0x9e>
   26d92:	2b02      	cmp	r3, #2
   26d94:	f104 0018 	add.w	r0, r4, #24
   26d98:	d014      	beq.n	26dc4 <ip_interface_connect+0xc0>
   26d9a:	2b0a      	cmp	r3, #10
   26d9c:	d101      	bne.n	26da2 <ip_interface_connect+0x9e>
   26d9e:	2e24      	cmp	r6, #36	; 0x24
   26da0:	d01c      	beq.n	26ddc <ip_interface_connect+0xd8>
   26da2:	2416      	movs	r4, #22
   26da4:	4620      	mov	r0, r4
   26da6:	f7f9 fe21 	bl	209ec <bsd_os_errno_set>
   26daa:	f04f 34ff 	mov.w	r4, #4294967295
   26dae:	4620      	mov	r0, r4
   26db0:	b003      	add	sp, #12
   26db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26db6:	9c01      	ldr	r4, [sp, #4]
   26db8:	2c00      	cmp	r4, #0
   26dba:	d059      	beq.n	26e70 <ip_interface_connect+0x16c>
   26dbc:	043b      	lsls	r3, r7, #16
   26dbe:	e7d5      	b.n	26d6c <ip_interface_connect+0x68>
   26dc0:	242f      	movs	r4, #47	; 0x2f
   26dc2:	e7ef      	b.n	26da4 <ip_interface_connect+0xa0>
   26dc4:	2e10      	cmp	r6, #16
   26dc6:	d1ec      	bne.n	26da2 <ip_interface_connect+0x9e>
   26dc8:	2204      	movs	r2, #4
   26dca:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   26dce:	f108 010c 	add.w	r1, r8, #12
   26dd2:	82e2      	strh	r2, [r4, #22]
   26dd4:	82a3      	strh	r3, [r4, #20]
   26dd6:	f009 f81e 	bl	2fe16 <memcpy>
   26dda:	e008      	b.n	26dee <ip_interface_connect+0xea>
   26ddc:	2210      	movs	r2, #16
   26dde:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   26de2:	eb08 0102 	add.w	r1, r8, r2
   26de6:	82e2      	strh	r2, [r4, #22]
   26de8:	82a3      	strh	r3, [r4, #20]
   26dea:	f009 f814 	bl	2fe16 <memcpy>
   26dee:	68a3      	ldr	r3, [r4, #8]
   26df0:	8ae2      	ldrh	r2, [r4, #22]
   26df2:	f247 0102 	movw	r1, #28674	; 0x7002
   26df6:	4413      	add	r3, r2
   26df8:	60a3      	str	r3, [r4, #8]
   26dfa:	682e      	ldr	r6, [r5, #0]
   26dfc:	682b      	ldr	r3, [r5, #0]
   26dfe:	4620      	mov	r0, r4
   26e00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   26e04:	602b      	str	r3, [r5, #0]
   26e06:	f7fb ff3d 	bl	22c84 <rpc_ip_client_request_send>
   26e0a:	b988      	cbnz	r0, 26e30 <ip_interface_connect+0x12c>
   26e0c:	682b      	ldr	r3, [r5, #0]
   26e0e:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   26e12:	d119      	bne.n	26e48 <ip_interface_connect+0x144>
   26e14:	f04f 33ff 	mov.w	r3, #4294967295
   26e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26e1c:	2105      	movs	r1, #5
   26e1e:	4638      	mov	r0, r7
   26e20:	f000 ff8e 	bl	27d40 <interface_socket_wait>
   26e24:	4604      	mov	r4, r0
   26e26:	b1c0      	cbz	r0, 26e5a <ip_interface_connect+0x156>
   26e28:	2c73      	cmp	r4, #115	; 0x73
   26e2a:	d0bb      	beq.n	26da4 <ip_interface_connect+0xa0>
   26e2c:	602e      	str	r6, [r5, #0]
   26e2e:	e7b9      	b.n	26da4 <ip_interface_connect+0xa0>
   26e30:	6820      	ldr	r0, [r4, #0]
   26e32:	b108      	cbz	r0, 26e38 <ip_interface_connect+0x134>
   26e34:	f7fb ff44 	bl	22cc0 <rpc_ip_client_data_free>
   26e38:	4620      	mov	r0, r4
   26e3a:	f7fb ff39 	bl	22cb0 <rpc_ip_client_message_free>
   26e3e:	2423      	movs	r4, #35	; 0x23
   26e40:	602e      	str	r6, [r5, #0]
   26e42:	e7af      	b.n	26da4 <ip_interface_connect+0xa0>
   26e44:	2472      	movs	r4, #114	; 0x72
   26e46:	e7ad      	b.n	26da4 <ip_interface_connect+0xa0>
   26e48:	2473      	movs	r4, #115	; 0x73
   26e4a:	e7ab      	b.n	26da4 <ip_interface_connect+0xa0>
   26e4c:	6803      	ldr	r3, [r0, #0]
   26e4e:	b29b      	uxth	r3, r3
   26e50:	2b05      	cmp	r3, #5
   26e52:	bf14      	ite	ne
   26e54:	2409      	movne	r4, #9
   26e56:	2438      	moveq	r4, #56	; 0x38
   26e58:	e7a4      	b.n	26da4 <ip_interface_connect+0xa0>
   26e5a:	4638      	mov	r0, r7
   26e5c:	f000 ffe4 	bl	27e28 <interface_socket_from_handle_get>
   26e60:	2800      	cmp	r0, #0
   26e62:	d0a4      	beq.n	26dae <ip_interface_connect+0xaa>
   26e64:	6844      	ldr	r4, [r0, #4]
   26e66:	2c00      	cmp	r4, #0
   26e68:	d0a1      	beq.n	26dae <ip_interface_connect+0xaa>
   26e6a:	f8c0 8004 	str.w	r8, [r0, #4]
   26e6e:	e7db      	b.n	26e28 <ip_interface_connect+0x124>
   26e70:	240c      	movs	r4, #12
   26e72:	e797      	b.n	26da4 <ip_interface_connect+0xa0>
   26e74:	2409      	movs	r4, #9
   26e76:	e795      	b.n	26da4 <ip_interface_connect+0xa0>

00026e78 <ip_interface_bind>:
   26e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26e7c:	b083      	sub	sp, #12
   26e7e:	b3b1      	cbz	r1, 26eee <ip_interface_bind+0x76>
   26e80:	4616      	mov	r6, r2
   26e82:	b3a2      	cbz	r2, 26eee <ip_interface_bind+0x76>
   26e84:	4607      	mov	r7, r0
   26e86:	4688      	mov	r8, r1
   26e88:	f000 ffce 	bl	27e28 <interface_socket_from_handle_get>
   26e8c:	4605      	mov	r5, r0
   26e8e:	2800      	cmp	r0, #0
   26e90:	d04a      	beq.n	26f28 <ip_interface_bind+0xb0>
   26e92:	6803      	ldr	r3, [r0, #0]
   26e94:	b29b      	uxth	r3, r3
   26e96:	2b02      	cmp	r3, #2
   26e98:	d146      	bne.n	26f28 <ip_interface_bind+0xb0>
   26e9a:	2100      	movs	r1, #0
   26e9c:	a802      	add	r0, sp, #8
   26e9e:	f840 1d04 	str.w	r1, [r0, #-4]!
   26ea2:	f8d5 9018 	ldr.w	r9, [r5, #24]
   26ea6:	f7fb fed9 	bl	22c5c <rpc_ip_client_request_alloc>
   26eaa:	bb50      	cbnz	r0, 26f02 <ip_interface_bind+0x8a>
   26eac:	f247 0305 	movw	r3, #28677	; 0x7005
   26eb0:	2208      	movs	r2, #8
   26eb2:	9c01      	ldr	r4, [sp, #4]
   26eb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   26eb8:	60e3      	str	r3, [r4, #12]
   26eba:	f8c4 9010 	str.w	r9, [r4, #16]
   26ebe:	7260      	strb	r0, [r4, #9]
   26ec0:	72a0      	strb	r0, [r4, #10]
   26ec2:	72e0      	strb	r0, [r4, #11]
   26ec4:	7222      	strb	r2, [r4, #8]
   26ec6:	68a3      	ldr	r3, [r4, #8]
   26ec8:	3304      	adds	r3, #4
   26eca:	60a3      	str	r3, [r4, #8]
   26ecc:	68eb      	ldr	r3, [r5, #12]
   26ece:	f8d8 2004 	ldr.w	r2, [r8, #4]
   26ed2:	4293      	cmp	r3, r2
   26ed4:	d11a      	bne.n	26f0c <ip_interface_bind+0x94>
   26ed6:	f898 2000 	ldrb.w	r2, [r8]
   26eda:	4296      	cmp	r6, r2
   26edc:	d107      	bne.n	26eee <ip_interface_bind+0x76>
   26ede:	2b02      	cmp	r3, #2
   26ee0:	f104 0018 	add.w	r0, r4, #24
   26ee4:	d014      	beq.n	26f10 <ip_interface_bind+0x98>
   26ee6:	2b0a      	cmp	r3, #10
   26ee8:	d101      	bne.n	26eee <ip_interface_bind+0x76>
   26eea:	2e24      	cmp	r6, #36	; 0x24
   26eec:	d01e      	beq.n	26f2c <ip_interface_bind+0xb4>
   26eee:	2416      	movs	r4, #22
   26ef0:	4620      	mov	r0, r4
   26ef2:	f7f9 fd7b 	bl	209ec <bsd_os_errno_set>
   26ef6:	f04f 34ff 	mov.w	r4, #4294967295
   26efa:	4620      	mov	r0, r4
   26efc:	b003      	add	sp, #12
   26efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26f02:	9c01      	ldr	r4, [sp, #4]
   26f04:	2c00      	cmp	r4, #0
   26f06:	d1de      	bne.n	26ec6 <ip_interface_bind+0x4e>
   26f08:	240c      	movs	r4, #12
   26f0a:	e7f1      	b.n	26ef0 <ip_interface_bind+0x78>
   26f0c:	242f      	movs	r4, #47	; 0x2f
   26f0e:	e7ef      	b.n	26ef0 <ip_interface_bind+0x78>
   26f10:	2e10      	cmp	r6, #16
   26f12:	d1ec      	bne.n	26eee <ip_interface_bind+0x76>
   26f14:	2204      	movs	r2, #4
   26f16:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   26f1a:	f108 010c 	add.w	r1, r8, #12
   26f1e:	82e2      	strh	r2, [r4, #22]
   26f20:	82a3      	strh	r3, [r4, #20]
   26f22:	f008 ff78 	bl	2fe16 <memcpy>
   26f26:	e00a      	b.n	26f3e <ip_interface_bind+0xc6>
   26f28:	2409      	movs	r4, #9
   26f2a:	e7e1      	b.n	26ef0 <ip_interface_bind+0x78>
   26f2c:	2210      	movs	r2, #16
   26f2e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   26f32:	eb08 0102 	add.w	r1, r8, r2
   26f36:	82e2      	strh	r2, [r4, #22]
   26f38:	82a3      	strh	r3, [r4, #20]
   26f3a:	f008 ff6c 	bl	2fe16 <memcpy>
   26f3e:	68a3      	ldr	r3, [r4, #8]
   26f40:	8ae2      	ldrh	r2, [r4, #22]
   26f42:	f247 0105 	movw	r1, #28677	; 0x7005
   26f46:	4413      	add	r3, r2
   26f48:	60a3      	str	r3, [r4, #8]
   26f4a:	682b      	ldr	r3, [r5, #0]
   26f4c:	4620      	mov	r0, r4
   26f4e:	0c1b      	lsrs	r3, r3, #16
   26f50:	041b      	lsls	r3, r3, #16
   26f52:	f043 0303 	orr.w	r3, r3, #3
   26f56:	602b      	str	r3, [r5, #0]
   26f58:	682e      	ldr	r6, [r5, #0]
   26f5a:	f7fb fe93 	bl	22c84 <rpc_ip_client_request_send>
   26f5e:	4680      	mov	r8, r0
   26f60:	b980      	cbnz	r0, 26f84 <ip_interface_bind+0x10c>
   26f62:	f04f 33ff 	mov.w	r3, #4294967295
   26f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26f6a:	2104      	movs	r1, #4
   26f6c:	4638      	mov	r0, r7
   26f6e:	f000 fee7 	bl	27d40 <interface_socket_wait>
   26f72:	4604      	mov	r4, r0
   26f74:	b1a0      	cbz	r0, 26fa0 <ip_interface_bind+0x128>
   26f76:	682b      	ldr	r3, [r5, #0]
   26f78:	0c1b      	lsrs	r3, r3, #16
   26f7a:	041b      	lsls	r3, r3, #16
   26f7c:	f043 0302 	orr.w	r3, r3, #2
   26f80:	602b      	str	r3, [r5, #0]
   26f82:	e7b5      	b.n	26ef0 <ip_interface_bind+0x78>
   26f84:	6820      	ldr	r0, [r4, #0]
   26f86:	b108      	cbz	r0, 26f8c <ip_interface_bind+0x114>
   26f88:	f7fb fe9a 	bl	22cc0 <rpc_ip_client_data_free>
   26f8c:	0c36      	lsrs	r6, r6, #16
   26f8e:	0436      	lsls	r6, r6, #16
   26f90:	4620      	mov	r0, r4
   26f92:	f046 0602 	orr.w	r6, r6, #2
   26f96:	f7fb fe8b 	bl	22cb0 <rpc_ip_client_message_free>
   26f9a:	2423      	movs	r4, #35	; 0x23
   26f9c:	602e      	str	r6, [r5, #0]
   26f9e:	e7a7      	b.n	26ef0 <ip_interface_bind+0x78>
   26fa0:	4638      	mov	r0, r7
   26fa2:	f000 ff41 	bl	27e28 <interface_socket_from_handle_get>
   26fa6:	2800      	cmp	r0, #0
   26fa8:	d0a7      	beq.n	26efa <ip_interface_bind+0x82>
   26faa:	6844      	ldr	r4, [r0, #4]
   26fac:	2c00      	cmp	r4, #0
   26fae:	d0a4      	beq.n	26efa <ip_interface_bind+0x82>
   26fb0:	f8c0 8004 	str.w	r8, [r0, #4]
   26fb4:	e7df      	b.n	26f76 <ip_interface_bind+0xfe>
   26fb6:	bf00      	nop

00026fb8 <ip_interface_listen>:
   26fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26fbc:	b082      	sub	sp, #8
   26fbe:	4606      	mov	r6, r0
   26fc0:	f000 ff32 	bl	27e28 <interface_socket_from_handle_get>
   26fc4:	2800      	cmp	r0, #0
   26fc6:	d067      	beq.n	27098 <ip_interface_listen+0xe0>
   26fc8:	6803      	ldr	r3, [r0, #0]
   26fca:	4605      	mov	r5, r0
   26fcc:	b29b      	uxth	r3, r3
   26fce:	2b04      	cmp	r3, #4
   26fd0:	d162      	bne.n	27098 <ip_interface_listen+0xe0>
   26fd2:	2100      	movs	r1, #0
   26fd4:	4a32      	ldr	r2, [pc, #200]	; (270a0 <ip_interface_listen+0xe8>)
   26fd6:	4630      	mov	r0, r6
   26fd8:	f000 fe7a 	bl	27cd0 <interface_socket_packet_handler_update>
   26fdc:	4601      	mov	r1, r0
   26fde:	2800      	cmp	r0, #0
   26fe0:	d15c      	bne.n	2709c <ip_interface_listen+0xe4>
   26fe2:	a802      	add	r0, sp, #8
   26fe4:	f840 1d04 	str.w	r1, [r0, #-4]!
   26fe8:	69af      	ldr	r7, [r5, #24]
   26fea:	f7fb fe37 	bl	22c5c <rpc_ip_client_request_alloc>
   26fee:	bba8      	cbnz	r0, 2705c <ip_interface_listen+0xa4>
   26ff0:	f247 0308 	movw	r3, #28680	; 0x7008
   26ff4:	2208      	movs	r2, #8
   26ff6:	9c01      	ldr	r4, [sp, #4]
   26ff8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   26ffc:	60e3      	str	r3, [r4, #12]
   26ffe:	6127      	str	r7, [r4, #16]
   27000:	7260      	strb	r0, [r4, #9]
   27002:	72a0      	strb	r0, [r4, #10]
   27004:	72e0      	strb	r0, [r4, #11]
   27006:	7222      	strb	r2, [r4, #8]
   27008:	68a3      	ldr	r3, [r4, #8]
   2700a:	f247 0108 	movw	r1, #28680	; 0x7008
   2700e:	3304      	adds	r3, #4
   27010:	60a3      	str	r3, [r4, #8]
   27012:	682b      	ldr	r3, [r5, #0]
   27014:	4620      	mov	r0, r4
   27016:	0c1b      	lsrs	r3, r3, #16
   27018:	041b      	lsls	r3, r3, #16
   2701a:	f043 0306 	orr.w	r3, r3, #6
   2701e:	602b      	str	r3, [r5, #0]
   27020:	682f      	ldr	r7, [r5, #0]
   27022:	f7fb fe2f 	bl	22c84 <rpc_ip_client_request_send>
   27026:	4680      	mov	r8, r0
   27028:	b9e8      	cbnz	r0, 27066 <ip_interface_listen+0xae>
   2702a:	f04f 33ff 	mov.w	r3, #4294967295
   2702e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27032:	2107      	movs	r1, #7
   27034:	4630      	mov	r0, r6
   27036:	f000 fe83 	bl	27d40 <interface_socket_wait>
   2703a:	4604      	mov	r4, r0
   2703c:	b308      	cbz	r0, 27082 <ip_interface_listen+0xca>
   2703e:	682b      	ldr	r3, [r5, #0]
   27040:	0c1b      	lsrs	r3, r3, #16
   27042:	041b      	lsls	r3, r3, #16
   27044:	f043 0304 	orr.w	r3, r3, #4
   27048:	602b      	str	r3, [r5, #0]
   2704a:	4620      	mov	r0, r4
   2704c:	f7f9 fcce 	bl	209ec <bsd_os_errno_set>
   27050:	f04f 34ff 	mov.w	r4, #4294967295
   27054:	4620      	mov	r0, r4
   27056:	b002      	add	sp, #8
   27058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2705c:	9c01      	ldr	r4, [sp, #4]
   2705e:	2c00      	cmp	r4, #0
   27060:	d1d2      	bne.n	27008 <ip_interface_listen+0x50>
   27062:	240c      	movs	r4, #12
   27064:	e7f1      	b.n	2704a <ip_interface_listen+0x92>
   27066:	6820      	ldr	r0, [r4, #0]
   27068:	b108      	cbz	r0, 2706e <ip_interface_listen+0xb6>
   2706a:	f7fb fe29 	bl	22cc0 <rpc_ip_client_data_free>
   2706e:	0c3f      	lsrs	r7, r7, #16
   27070:	043f      	lsls	r7, r7, #16
   27072:	4620      	mov	r0, r4
   27074:	f047 0704 	orr.w	r7, r7, #4
   27078:	f7fb fe1a 	bl	22cb0 <rpc_ip_client_message_free>
   2707c:	2423      	movs	r4, #35	; 0x23
   2707e:	602f      	str	r7, [r5, #0]
   27080:	e7e3      	b.n	2704a <ip_interface_listen+0x92>
   27082:	4630      	mov	r0, r6
   27084:	f000 fed0 	bl	27e28 <interface_socket_from_handle_get>
   27088:	2800      	cmp	r0, #0
   2708a:	d0e3      	beq.n	27054 <ip_interface_listen+0x9c>
   2708c:	6844      	ldr	r4, [r0, #4]
   2708e:	2c00      	cmp	r4, #0
   27090:	d0e0      	beq.n	27054 <ip_interface_listen+0x9c>
   27092:	f8c0 8004 	str.w	r8, [r0, #4]
   27096:	e7d2      	b.n	2703e <ip_interface_listen+0x86>
   27098:	2409      	movs	r4, #9
   2709a:	e7d6      	b.n	2704a <ip_interface_listen+0x92>
   2709c:	2423      	movs	r4, #35	; 0x23
   2709e:	e7d4      	b.n	2704a <ip_interface_listen+0x92>
   270a0:	0002647d 	.word	0x0002647d

000270a4 <ip_interface_accept>:
   270a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   270a8:	2500      	movs	r5, #0
   270aa:	b085      	sub	sp, #20
   270ac:	460f      	mov	r7, r1
   270ae:	4690      	mov	r8, r2
   270b0:	9502      	str	r5, [sp, #8]
   270b2:	4606      	mov	r6, r0
   270b4:	f000 feb8 	bl	27e28 <interface_socket_from_handle_get>
   270b8:	4604      	mov	r4, r0
   270ba:	2800      	cmp	r0, #0
   270bc:	f000 811c 	beq.w	272f8 <ip_interface_accept+0x254>
   270c0:	6803      	ldr	r3, [r0, #0]
   270c2:	b29b      	uxth	r3, r3
   270c4:	2b07      	cmp	r3, #7
   270c6:	d10a      	bne.n	270de <ip_interface_accept+0x3a>
   270c8:	6803      	ldr	r3, [r0, #0]
   270ca:	6805      	ldr	r5, [r0, #0]
   270cc:	00db      	lsls	r3, r3, #3
   270ce:	d416      	bmi.n	270fe <ip_interface_accept+0x5a>
   270d0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   270d4:	d019      	beq.n	2710a <ip_interface_accept+0x66>
   270d6:	6805      	ldr	r5, [r0, #0]
   270d8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   270dc:	d124      	bne.n	27128 <ip_interface_accept+0x84>
   270de:	f04f 0909 	mov.w	r9, #9
   270e2:	9b02      	ldr	r3, [sp, #8]
   270e4:	b113      	cbz	r3, 270ec <ip_interface_accept+0x48>
   270e6:	4628      	mov	r0, r5
   270e8:	f000 fddc 	bl	27ca4 <interface_socket_free>
   270ec:	4648      	mov	r0, r9
   270ee:	f04f 39ff 	mov.w	r9, #4294967295
   270f2:	f7f9 fc7b 	bl	209ec <bsd_os_errno_set>
   270f6:	4648      	mov	r0, r9
   270f8:	b005      	add	sp, #20
   270fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   270fe:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   27102:	d16d      	bne.n	271e0 <ip_interface_accept+0x13c>
   27104:	f04f 0923 	mov.w	r9, #35	; 0x23
   27108:	e7eb      	b.n	270e2 <ip_interface_accept+0x3e>
   2710a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2710e:	f04f 33ff 	mov.w	r3, #4294967295
   27112:	4611      	mov	r1, r2
   27114:	4630      	mov	r0, r6
   27116:	f000 fe13 	bl	27d40 <interface_socket_wait>
   2711a:	4681      	mov	r9, r0
   2711c:	2800      	cmp	r0, #0
   2711e:	d07e      	beq.n	2721e <ip_interface_accept+0x17a>
   27120:	6825      	ldr	r5, [r4, #0]
   27122:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   27126:	d0dc      	beq.n	270e2 <ip_interface_accept+0x3e>
   27128:	f04f 30ff 	mov.w	r0, #4294967295
   2712c:	2300      	movs	r3, #0
   2712e:	e9cd 0300 	strd	r0, r3, [sp]
   27132:	4a75      	ldr	r2, [pc, #468]	; (27308 <ip_interface_accept+0x264>)
   27134:	6921      	ldr	r1, [r4, #16]
   27136:	a802      	add	r0, sp, #8
   27138:	f000 fd50 	bl	27bdc <interface_socket_allocate>
   2713c:	9b02      	ldr	r3, [sp, #8]
   2713e:	4605      	mov	r5, r0
   27140:	2b00      	cmp	r3, #0
   27142:	f000 80dd 	beq.w	27300 <ip_interface_accept+0x25c>
   27146:	2100      	movs	r1, #0
   27148:	6962      	ldr	r2, [r4, #20]
   2714a:	a804      	add	r0, sp, #16
   2714c:	615a      	str	r2, [r3, #20]
   2714e:	68e2      	ldr	r2, [r4, #12]
   27150:	f840 1d04 	str.w	r1, [r0, #-4]!
   27154:	60da      	str	r2, [r3, #12]
   27156:	6922      	ldr	r2, [r4, #16]
   27158:	611a      	str	r2, [r3, #16]
   2715a:	f8d4 9018 	ldr.w	r9, [r4, #24]
   2715e:	f7fb fd7d 	bl	22c5c <rpc_ip_client_request_alloc>
   27162:	2800      	cmp	r0, #0
   27164:	d143      	bne.n	271ee <ip_interface_accept+0x14a>
   27166:	f247 030c 	movw	r3, #28684	; 0x700c
   2716a:	2108      	movs	r1, #8
   2716c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   27170:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   27174:	f8cb 300c 	str.w	r3, [fp, #12]
   27178:	f8cb 9010 	str.w	r9, [fp, #16]
   2717c:	f88b 0009 	strb.w	r0, [fp, #9]
   27180:	f88b 000a 	strb.w	r0, [fp, #10]
   27184:	f88b 000b 	strb.w	r0, [fp, #11]
   27188:	f88b 1008 	strb.w	r1, [fp, #8]
   2718c:	6823      	ldr	r3, [r4, #0]
   2718e:	f247 010c 	movw	r1, #28684	; 0x700c
   27192:	0c1b      	lsrs	r3, r3, #16
   27194:	041b      	lsls	r3, r3, #16
   27196:	f043 0308 	orr.w	r3, r3, #8
   2719a:	6023      	str	r3, [r4, #0]
   2719c:	4658      	mov	r0, fp
   2719e:	f8d4 9000 	ldr.w	r9, [r4]
   271a2:	f7fb fd6f 	bl	22c84 <rpc_ip_client_request_send>
   271a6:	4682      	mov	sl, r0
   271a8:	bb48      	cbnz	r0, 271fe <ip_interface_accept+0x15a>
   271aa:	6822      	ldr	r2, [r4, #0]
   271ac:	9900      	ldr	r1, [sp, #0]
   271ae:	f04f 33ff 	mov.w	r3, #4294967295
   271b2:	400a      	ands	r2, r1
   271b4:	6022      	str	r2, [r4, #0]
   271b6:	2109      	movs	r1, #9
   271b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   271bc:	4630      	mov	r0, r6
   271be:	f000 fdbf 	bl	27d40 <interface_socket_wait>
   271c2:	4681      	mov	r9, r0
   271c4:	2800      	cmp	r0, #0
   271c6:	f000 8085 	beq.w	272d4 <ip_interface_accept+0x230>
   271ca:	6823      	ldr	r3, [r4, #0]
   271cc:	9a01      	ldr	r2, [sp, #4]
   271ce:	431a      	orrs	r2, r3
   271d0:	6022      	str	r2, [r4, #0]
   271d2:	6823      	ldr	r3, [r4, #0]
   271d4:	0c1b      	lsrs	r3, r3, #16
   271d6:	041b      	lsls	r3, r3, #16
   271d8:	f043 0307 	orr.w	r3, r3, #7
   271dc:	6023      	str	r3, [r4, #0]
   271de:	e780      	b.n	270e2 <ip_interface_accept+0x3e>
   271e0:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   271e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   271e8:	e9cd 2300 	strd	r2, r3, [sp]
   271ec:	e7a1      	b.n	27132 <ip_interface_accept+0x8e>
   271ee:	f8dd b00c 	ldr.w	fp, [sp, #12]
   271f2:	f04f 090c 	mov.w	r9, #12
   271f6:	f1bb 0f00 	cmp.w	fp, #0
   271fa:	d1c7      	bne.n	2718c <ip_interface_accept+0xe8>
   271fc:	e771      	b.n	270e2 <ip_interface_accept+0x3e>
   271fe:	f8db 0000 	ldr.w	r0, [fp]
   27202:	b108      	cbz	r0, 27208 <ip_interface_accept+0x164>
   27204:	f7fb fd5c 	bl	22cc0 <rpc_ip_client_data_free>
   27208:	ea4f 4919 	mov.w	r9, r9, lsr #16
   2720c:	4658      	mov	r0, fp
   2720e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   27212:	f7fb fd4d 	bl	22cb0 <rpc_ip_client_message_free>
   27216:	f049 0307 	orr.w	r3, r9, #7
   2721a:	6023      	str	r3, [r4, #0]
   2721c:	e772      	b.n	27104 <ip_interface_accept+0x60>
   2721e:	4630      	mov	r0, r6
   27220:	f000 fe02 	bl	27e28 <interface_socket_from_handle_get>
   27224:	b130      	cbz	r0, 27234 <ip_interface_accept+0x190>
   27226:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2722a:	f1b9 0f00 	cmp.w	r9, #0
   2722e:	d001      	beq.n	27234 <ip_interface_accept+0x190>
   27230:	6045      	str	r5, [r0, #4]
   27232:	e775      	b.n	27120 <ip_interface_accept+0x7c>
   27234:	6823      	ldr	r3, [r4, #0]
   27236:	03d9      	lsls	r1, r3, #15
   27238:	f53f af76 	bmi.w	27128 <ip_interface_accept+0x84>
   2723c:	4d33      	ldr	r5, [pc, #204]	; (2730c <ip_interface_accept+0x268>)
   2723e:	9902      	ldr	r1, [sp, #8]
   27240:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   27244:	699b      	ldr	r3, [r3, #24]
   27246:	618b      	str	r3, [r1, #24]
   27248:	b147      	cbz	r7, 2725c <ip_interface_accept+0x1b8>
   2724a:	68cb      	ldr	r3, [r1, #12]
   2724c:	2b0a      	cmp	r3, #10
   2724e:	d024      	beq.n	2729a <ip_interface_accept+0x1f6>
   27250:	2b02      	cmp	r3, #2
   27252:	d103      	bne.n	2725c <ip_interface_accept+0x1b8>
   27254:	f8d8 2000 	ldr.w	r2, [r8]
   27258:	2a10      	cmp	r2, #16
   2725a:	d032      	beq.n	272c2 <ip_interface_accept+0x21e>
   2725c:	680a      	ldr	r2, [r1, #0]
   2725e:	482c      	ldr	r0, [pc, #176]	; (27310 <ip_interface_accept+0x26c>)
   27260:	4002      	ands	r2, r0
   27262:	f042 0205 	orr.w	r2, r2, #5
   27266:	600a      	str	r2, [r1, #0]
   27268:	9a02      	ldr	r2, [sp, #8]
   2726a:	6811      	ldr	r1, [r2, #0]
   2726c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   27270:	6011      	str	r1, [r2, #0]
   27272:	6811      	ldr	r1, [r2, #0]
   27274:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   27278:	6011      	str	r1, [r2, #0]
   2727a:	6823      	ldr	r3, [r4, #0]
   2727c:	4003      	ands	r3, r0
   2727e:	f043 0307 	orr.w	r3, r3, #7
   27282:	6023      	str	r3, [r4, #0]
   27284:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   27288:	f7fb fd12 	bl	22cb0 <rpc_ip_client_message_free>
   2728c:	2300      	movs	r3, #0
   2728e:	4648      	mov	r0, r9
   27290:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   27294:	b005      	add	sp, #20
   27296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2729a:	f8d8 2000 	ldr.w	r2, [r8]
   2729e:	2a24      	cmp	r2, #36	; 0x24
   272a0:	d1dc      	bne.n	2725c <ip_interface_accept+0x1b8>
   272a2:	703a      	strb	r2, [r7, #0]
   272a4:	2210      	movs	r2, #16
   272a6:	607b      	str	r3, [r7, #4]
   272a8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   272ac:	f107 0010 	add.w	r0, r7, #16
   272b0:	8b9b      	ldrh	r3, [r3, #28]
   272b2:	813b      	strh	r3, [r7, #8]
   272b4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   272b8:	3120      	adds	r1, #32
   272ba:	f008 fdac 	bl	2fe16 <memcpy>
   272be:	9902      	ldr	r1, [sp, #8]
   272c0:	e7cc      	b.n	2725c <ip_interface_accept+0x1b8>
   272c2:	703a      	strb	r2, [r7, #0]
   272c4:	607b      	str	r3, [r7, #4]
   272c6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   272ca:	f107 000c 	add.w	r0, r7, #12
   272ce:	8b9b      	ldrh	r3, [r3, #28]
   272d0:	2204      	movs	r2, #4
   272d2:	e7ee      	b.n	272b2 <ip_interface_accept+0x20e>
   272d4:	4630      	mov	r0, r6
   272d6:	f000 fda7 	bl	27e28 <interface_socket_from_handle_get>
   272da:	b138      	cbz	r0, 272ec <ip_interface_accept+0x248>
   272dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
   272e0:	f1b9 0f00 	cmp.w	r9, #0
   272e4:	d002      	beq.n	272ec <ip_interface_accept+0x248>
   272e6:	f8c0 a004 	str.w	sl, [r0, #4]
   272ea:	e76e      	b.n	271ca <ip_interface_accept+0x126>
   272ec:	6823      	ldr	r3, [r4, #0]
   272ee:	9a01      	ldr	r2, [sp, #4]
   272f0:	46a9      	mov	r9, r5
   272f2:	4313      	orrs	r3, r2
   272f4:	6023      	str	r3, [r4, #0]
   272f6:	e7a1      	b.n	2723c <ip_interface_accept+0x198>
   272f8:	4605      	mov	r5, r0
   272fa:	f04f 0909 	mov.w	r9, #9
   272fe:	e6f0      	b.n	270e2 <ip_interface_accept+0x3e>
   27300:	f04f 090c 	mov.w	r9, #12
   27304:	e6f2      	b.n	270ec <ip_interface_accept+0x48>
   27306:	bf00      	nop
   27308:	0002647d 	.word	0x0002647d
   2730c:	20020850 	.word	0x20020850
   27310:	ffff0000 	.word	0xffff0000

00027314 <ip_interface_setopt>:
   27314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27318:	2901      	cmp	r1, #1
   2731a:	b084      	sub	sp, #16
   2731c:	f040 809c 	bne.w	27458 <ip_interface_setopt+0x144>
   27320:	460e      	mov	r6, r1
   27322:	4690      	mov	r8, r2
   27324:	461d      	mov	r5, r3
   27326:	4607      	mov	r7, r0
   27328:	f000 fd7e 	bl	27e28 <interface_socket_from_handle_get>
   2732c:	4604      	mov	r4, r0
   2732e:	2800      	cmp	r0, #0
   27330:	f000 80a5 	beq.w	2747e <ip_interface_setopt+0x16a>
   27334:	f1b8 0f19 	cmp.w	r8, #25
   27338:	d16e      	bne.n	27418 <ip_interface_setopt+0x104>
   2733a:	2d00      	cmp	r5, #0
   2733c:	f000 8092 	beq.w	27464 <ip_interface_setopt+0x150>
   27340:	4628      	mov	r0, r5
   27342:	f7f5 fe99 	bl	1d078 <strlen>
   27346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27348:	4298      	cmp	r0, r3
   2734a:	f040 808b 	bne.w	27464 <ip_interface_setopt+0x150>
   2734e:	6823      	ldr	r3, [r4, #0]
   27350:	b29b      	uxth	r3, r3
   27352:	2b02      	cmp	r3, #2
   27354:	d173      	bne.n	2743e <ip_interface_setopt+0x12a>
   27356:	4629      	mov	r1, r5
   27358:	68e0      	ldr	r0, [r4, #12]
   2735a:	f7fe fb2b 	bl	259b4 <pdn_interface_pdn_id_get>
   2735e:	9002      	str	r0, [sp, #8]
   27360:	3001      	adds	r0, #1
   27362:	bf08      	it	eq
   27364:	2516      	moveq	r5, #22
   27366:	d04e      	beq.n	27406 <ip_interface_setopt+0xf2>
   27368:	6823      	ldr	r3, [r4, #0]
   2736a:	025b      	lsls	r3, r3, #9
   2736c:	d44a      	bmi.n	27404 <ip_interface_setopt+0xf0>
   2736e:	6823      	ldr	r3, [r4, #0]
   27370:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   27374:	d146      	bne.n	27404 <ip_interface_setopt+0xf0>
   27376:	6826      	ldr	r6, [r4, #0]
   27378:	6822      	ldr	r2, [r4, #0]
   2737a:	a804      	add	r0, sp, #16
   2737c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   27380:	6022      	str	r2, [r4, #0]
   27382:	2104      	movs	r1, #4
   27384:	f840 3d04 	str.w	r3, [r0, #-4]!
   27388:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2738c:	f7fb fc66 	bl	22c5c <rpc_ip_client_request_alloc>
   27390:	2800      	cmp	r0, #0
   27392:	d14e      	bne.n	27432 <ip_interface_setopt+0x11e>
   27394:	f247 0203 	movw	r2, #28675	; 0x7003
   27398:	2300      	movs	r3, #0
   2739a:	2108      	movs	r1, #8
   2739c:	9d03      	ldr	r5, [sp, #12]
   2739e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   273a2:	60ea      	str	r2, [r5, #12]
   273a4:	f8c5 8010 	str.w	r8, [r5, #16]
   273a8:	7229      	strb	r1, [r5, #8]
   273aa:	726b      	strb	r3, [r5, #9]
   273ac:	72ab      	strb	r3, [r5, #10]
   273ae:	72eb      	strb	r3, [r5, #11]
   273b0:	f04f 0c08 	mov.w	ip, #8
   273b4:	2300      	movs	r3, #0
   273b6:	2010      	movs	r0, #16
   273b8:	2130      	movs	r1, #48	; 0x30
   273ba:	68aa      	ldr	r2, [r5, #8]
   273bc:	756b      	strb	r3, [r5, #21]
   273be:	4462      	add	r2, ip
   273c0:	60aa      	str	r2, [r5, #8]
   273c2:	75ab      	strb	r3, [r5, #22]
   273c4:	75eb      	strb	r3, [r5, #23]
   273c6:	76ab      	strb	r3, [r5, #26]
   273c8:	76eb      	strb	r3, [r5, #27]
   273ca:	f885 c014 	strb.w	ip, [r5, #20]
   273ce:	7628      	strb	r0, [r5, #24]
   273d0:	7669      	strb	r1, [r5, #25]
   273d2:	2204      	movs	r2, #4
   273d4:	eb0d 010c 	add.w	r1, sp, ip
   273d8:	6828      	ldr	r0, [r5, #0]
   273da:	f008 fd1c 	bl	2fe16 <memcpy>
   273de:	f247 0103 	movw	r1, #28675	; 0x7003
   273e2:	4628      	mov	r0, r5
   273e4:	f7fb fc4e 	bl	22c84 <rpc_ip_client_request_send>
   273e8:	4680      	mov	r8, r0
   273ea:	bb50      	cbnz	r0, 27442 <ip_interface_setopt+0x12e>
   273ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   273f0:	f04f 33ff 	mov.w	r3, #4294967295
   273f4:	4611      	mov	r1, r2
   273f6:	4638      	mov	r0, r7
   273f8:	f000 fca2 	bl	27d40 <interface_socket_wait>
   273fc:	4605      	mov	r5, r0
   273fe:	b398      	cbz	r0, 27468 <ip_interface_setopt+0x154>
   27400:	6026      	str	r6, [r4, #0]
   27402:	e000      	b.n	27406 <ip_interface_setopt+0xf2>
   27404:	2523      	movs	r5, #35	; 0x23
   27406:	4628      	mov	r0, r5
   27408:	f7f9 faf0 	bl	209ec <bsd_os_errno_set>
   2740c:	f04f 35ff 	mov.w	r5, #4294967295
   27410:	4628      	mov	r0, r5
   27412:	b004      	add	sp, #16
   27414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2741a:	4642      	mov	r2, r8
   2741c:	9300      	str	r3, [sp, #0]
   2741e:	4631      	mov	r1, r6
   27420:	462b      	mov	r3, r5
   27422:	4638      	mov	r0, r7
   27424:	f000 fd28 	bl	27e78 <interface_socket_setopt>
   27428:	4605      	mov	r5, r0
   2742a:	4628      	mov	r0, r5
   2742c:	b004      	add	sp, #16
   2742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27432:	9d03      	ldr	r5, [sp, #12]
   27434:	2d00      	cmp	r5, #0
   27436:	d1bb      	bne.n	273b0 <ip_interface_setopt+0x9c>
   27438:	6026      	str	r6, [r4, #0]
   2743a:	250c      	movs	r5, #12
   2743c:	e7e3      	b.n	27406 <ip_interface_setopt+0xf2>
   2743e:	2509      	movs	r5, #9
   27440:	e7e1      	b.n	27406 <ip_interface_setopt+0xf2>
   27442:	6828      	ldr	r0, [r5, #0]
   27444:	b108      	cbz	r0, 2744a <ip_interface_setopt+0x136>
   27446:	f7fb fc3b 	bl	22cc0 <rpc_ip_client_data_free>
   2744a:	4628      	mov	r0, r5
   2744c:	f7fb fc30 	bl	22cb0 <rpc_ip_client_message_free>
   27450:	2523      	movs	r5, #35	; 0x23
   27452:	6026      	str	r6, [r4, #0]
   27454:	6026      	str	r6, [r4, #0]
   27456:	e7d6      	b.n	27406 <ip_interface_setopt+0xf2>
   27458:	202a      	movs	r0, #42	; 0x2a
   2745a:	f7f9 fac7 	bl	209ec <bsd_os_errno_set>
   2745e:	f04f 35ff 	mov.w	r5, #4294967295
   27462:	e7d5      	b.n	27410 <ip_interface_setopt+0xfc>
   27464:	250e      	movs	r5, #14
   27466:	e7ce      	b.n	27406 <ip_interface_setopt+0xf2>
   27468:	4638      	mov	r0, r7
   2746a:	f000 fcdd 	bl	27e28 <interface_socket_from_handle_get>
   2746e:	b120      	cbz	r0, 2747a <ip_interface_setopt+0x166>
   27470:	6845      	ldr	r5, [r0, #4]
   27472:	b115      	cbz	r5, 2747a <ip_interface_setopt+0x166>
   27474:	f8c0 8004 	str.w	r8, [r0, #4]
   27478:	e7c2      	b.n	27400 <ip_interface_setopt+0xec>
   2747a:	6026      	str	r6, [r4, #0]
   2747c:	e7c8      	b.n	27410 <ip_interface_setopt+0xfc>
   2747e:	2009      	movs	r0, #9
   27480:	f7f9 fab4 	bl	209ec <bsd_os_errno_set>
   27484:	f04f 35ff 	mov.w	r5, #4294967295
   27488:	e7c2      	b.n	27410 <ip_interface_setopt+0xfc>
   2748a:	bf00      	nop

0002748c <ip_interface_getopt>:
   2748c:	f000 bd36 	b.w	27efc <interface_socket_getopt>

00027490 <ip_interface_getaddrinfo>:
   27490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27494:	f04f 0c00 	mov.w	ip, #0
   27498:	2401      	movs	r4, #1
   2749a:	4e72      	ldr	r6, [pc, #456]	; (27664 <ip_interface_getaddrinfo+0x1d4>)
   2749c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 27670 <ip_interface_getaddrinfo+0x1e0>
   274a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 27674 <ip_interface_getaddrinfo+0x1e4>
   274a4:	b085      	sub	sp, #20
   274a6:	4607      	mov	r7, r0
   274a8:	4615      	mov	r5, r2
   274aa:	9301      	str	r3, [sp, #4]
   274ac:	f8a6 c000 	strh.w	ip, [r6]
   274b0:	f8ca 4000 	str.w	r4, [sl]
   274b4:	f8c9 4000 	str.w	r4, [r9]
   274b8:	b171      	cbz	r1, 274d8 <ip_interface_getaddrinfo+0x48>
   274ba:	4608      	mov	r0, r1
   274bc:	220a      	movs	r2, #10
   274be:	4661      	mov	r1, ip
   274c0:	f006 fc76 	bl	2ddb0 <strtol>
   274c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   274c8:	1e42      	subs	r2, r0, #1
   274ca:	429a      	cmp	r2, r3
   274cc:	f200 8083 	bhi.w	275d6 <ip_interface_getaddrinfo+0x146>
   274d0:	0203      	lsls	r3, r0, #8
   274d2:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   274d6:	8030      	strh	r0, [r6, #0]
   274d8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 27678 <ip_interface_getaddrinfo+0x1e8>
   274dc:	f8d8 3000 	ldr.w	r3, [r8]
   274e0:	2b00      	cmp	r3, #0
   274e2:	d174      	bne.n	275ce <ip_interface_getaddrinfo+0x13e>
   274e4:	4a60      	ldr	r2, [pc, #384]	; (27668 <ip_interface_getaddrinfo+0x1d8>)
   274e6:	6013      	str	r3, [r2, #0]
   274e8:	4a60      	ldr	r2, [pc, #384]	; (2766c <ip_interface_getaddrinfo+0x1dc>)
   274ea:	6013      	str	r3, [r2, #0]
   274ec:	2f00      	cmp	r7, #0
   274ee:	d062      	beq.n	275b6 <ip_interface_getaddrinfo+0x126>
   274f0:	4638      	mov	r0, r7
   274f2:	f7f5 fdc1 	bl	1d078 <strlen>
   274f6:	4683      	mov	fp, r0
   274f8:	b125      	cbz	r5, 27504 <ip_interface_getaddrinfo+0x74>
   274fa:	69ea      	ldr	r2, [r5, #28]
   274fc:	b112      	cbz	r2, 27504 <ip_interface_getaddrinfo+0x74>
   274fe:	6851      	ldr	r1, [r2, #4]
   27500:	2966      	cmp	r1, #102	; 0x66
   27502:	d06c      	beq.n	275de <ip_interface_getaddrinfo+0x14e>
   27504:	f04f 32ff 	mov.w	r2, #4294967295
   27508:	2100      	movs	r1, #0
   2750a:	ae04      	add	r6, sp, #16
   2750c:	f846 1d04 	str.w	r1, [r6, #-4]!
   27510:	4630      	mov	r0, r6
   27512:	4659      	mov	r1, fp
   27514:	9200      	str	r2, [sp, #0]
   27516:	f7fb fba1 	bl	22c5c <rpc_ip_client_request_alloc>
   2751a:	9a00      	ldr	r2, [sp, #0]
   2751c:	2800      	cmp	r0, #0
   2751e:	d14c      	bne.n	275ba <ip_interface_getaddrinfo+0x12a>
   27520:	f247 010d 	movw	r1, #28685	; 0x700d
   27524:	f04f 0c08 	mov.w	ip, #8
   27528:	9c03      	ldr	r4, [sp, #12]
   2752a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2752e:	60e1      	str	r1, [r4, #12]
   27530:	6122      	str	r2, [r4, #16]
   27532:	7260      	strb	r0, [r4, #9]
   27534:	72a0      	strb	r0, [r4, #10]
   27536:	72e0      	strb	r0, [r4, #11]
   27538:	f884 c008 	strb.w	ip, [r4, #8]
   2753c:	2d00      	cmp	r5, #0
   2753e:	d076      	beq.n	2762e <ip_interface_getaddrinfo+0x19e>
   27540:	686a      	ldr	r2, [r5, #4]
   27542:	f022 0108 	bic.w	r1, r2, #8
   27546:	2902      	cmp	r1, #2
   27548:	d05c      	beq.n	27604 <ip_interface_getaddrinfo+0x174>
   2754a:	2a05      	cmp	r2, #5
   2754c:	d178      	bne.n	27640 <ip_interface_getaddrinfo+0x1b0>
   2754e:	68a9      	ldr	r1, [r5, #8]
   27550:	2902      	cmp	r1, #2
   27552:	f8c9 1000 	str.w	r1, [r9]
   27556:	d061      	beq.n	2761c <ip_interface_getaddrinfo+0x18c>
   27558:	61a2      	str	r2, [r4, #24]
   2755a:	68ea      	ldr	r2, [r5, #12]
   2755c:	6222      	str	r2, [r4, #32]
   2755e:	68aa      	ldr	r2, [r5, #8]
   27560:	61e2      	str	r2, [r4, #28]
   27562:	682a      	ldr	r2, [r5, #0]
   27564:	6162      	str	r2, [r4, #20]
   27566:	68a2      	ldr	r2, [r4, #8]
   27568:	3210      	adds	r2, #16
   2756a:	60a2      	str	r2, [r4, #8]
   2756c:	b12f      	cbz	r7, 2757a <ip_interface_getaddrinfo+0xea>
   2756e:	6820      	ldr	r0, [r4, #0]
   27570:	b118      	cbz	r0, 2757a <ip_interface_getaddrinfo+0xea>
   27572:	465a      	mov	r2, fp
   27574:	4639      	mov	r1, r7
   27576:	f008 fc4e 	bl	2fe16 <memcpy>
   2757a:	2301      	movs	r3, #1
   2757c:	f247 010d 	movw	r1, #28685	; 0x700d
   27580:	4620      	mov	r0, r4
   27582:	f8c8 3000 	str.w	r3, [r8]
   27586:	f7fb fb7d 	bl	22c84 <rpc_ip_client_request_send>
   2758a:	2800      	cmp	r0, #0
   2758c:	d156      	bne.n	2763c <ip_interface_getaddrinfo+0x1ac>
   2758e:	f04f 33ff 	mov.w	r3, #4294967295
   27592:	9303      	str	r3, [sp, #12]
   27594:	4631      	mov	r1, r6
   27596:	4620      	mov	r0, r4
   27598:	f7f9 f994 	bl	208c4 <bsd_os_timedwait>
   2759c:	f8d8 3000 	ldr.w	r3, [r8]
   275a0:	2b01      	cmp	r3, #1
   275a2:	d0f7      	beq.n	27594 <ip_interface_getaddrinfo+0x104>
   275a4:	4b31      	ldr	r3, [pc, #196]	; (2766c <ip_interface_getaddrinfo+0x1dc>)
   275a6:	6818      	ldr	r0, [r3, #0]
   275a8:	2800      	cmp	r0, #0
   275aa:	d13b      	bne.n	27624 <ip_interface_getaddrinfo+0x194>
   275ac:	4b2e      	ldr	r3, [pc, #184]	; (27668 <ip_interface_getaddrinfo+0x1d8>)
   275ae:	9a01      	ldr	r2, [sp, #4]
   275b0:	681b      	ldr	r3, [r3, #0]
   275b2:	6013      	str	r3, [r2, #0]
   275b4:	e00c      	b.n	275d0 <ip_interface_getaddrinfo+0x140>
   275b6:	46bb      	mov	fp, r7
   275b8:	e79e      	b.n	274f8 <ip_interface_getaddrinfo+0x68>
   275ba:	9c03      	ldr	r4, [sp, #12]
   275bc:	2c00      	cmp	r4, #0
   275be:	d1bd      	bne.n	2753c <ip_interface_getaddrinfo+0xac>
   275c0:	200c      	movs	r0, #12
   275c2:	2300      	movs	r3, #0
   275c4:	f8c8 3000 	str.w	r3, [r8]
   275c8:	b005      	add	sp, #20
   275ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275ce:	2073      	movs	r0, #115	; 0x73
   275d0:	b005      	add	sp, #20
   275d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275d6:	2016      	movs	r0, #22
   275d8:	b005      	add	sp, #20
   275da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275de:	6891      	ldr	r1, [r2, #8]
   275e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   275e4:	d18e      	bne.n	27504 <ip_interface_getaddrinfo+0x74>
   275e6:	f240 2102 	movw	r1, #514	; 0x202
   275ea:	68d0      	ldr	r0, [r2, #12]
   275ec:	4288      	cmp	r0, r1
   275ee:	d189      	bne.n	27504 <ip_interface_getaddrinfo+0x74>
   275f0:	6991      	ldr	r1, [r2, #24]
   275f2:	2900      	cmp	r1, #0
   275f4:	d086      	beq.n	27504 <ip_interface_getaddrinfo+0x74>
   275f6:	6868      	ldr	r0, [r5, #4]
   275f8:	f7fe f9dc 	bl	259b4 <pdn_interface_pdn_id_get>
   275fc:	1c43      	adds	r3, r0, #1
   275fe:	d081      	beq.n	27504 <ip_interface_getaddrinfo+0x74>
   27600:	4602      	mov	r2, r0
   27602:	e781      	b.n	27508 <ip_interface_getaddrinfo+0x78>
   27604:	68a9      	ldr	r1, [r5, #8]
   27606:	2902      	cmp	r1, #2
   27608:	f8c9 1000 	str.w	r1, [r9]
   2760c:	d006      	beq.n	2761c <ip_interface_getaddrinfo+0x18c>
   2760e:	2a05      	cmp	r2, #5
   27610:	d0a2      	beq.n	27558 <ip_interface_getaddrinfo+0xc8>
   27612:	2a0a      	cmp	r2, #10
   27614:	bf14      	ite	ne
   27616:	2201      	movne	r2, #1
   27618:	2202      	moveq	r2, #2
   2761a:	e79d      	b.n	27558 <ip_interface_getaddrinfo+0xc8>
   2761c:	2102      	movs	r1, #2
   2761e:	f8ca 1000 	str.w	r1, [sl]
   27622:	e7f4      	b.n	2760e <ip_interface_getaddrinfo+0x17e>
   27624:	4b11      	ldr	r3, [pc, #68]	; (2766c <ip_interface_getaddrinfo+0x1dc>)
   27626:	6818      	ldr	r0, [r3, #0]
   27628:	2800      	cmp	r0, #0
   2762a:	d0d1      	beq.n	275d0 <ip_interface_getaddrinfo+0x140>
   2762c:	e7c9      	b.n	275c2 <ip_interface_getaddrinfo+0x132>
   2762e:	4629      	mov	r1, r5
   27630:	2210      	movs	r2, #16
   27632:	f104 0014 	add.w	r0, r4, #20
   27636:	f008 fbfb 	bl	2fe30 <memset>
   2763a:	e794      	b.n	27566 <ip_interface_getaddrinfo+0xd6>
   2763c:	2023      	movs	r0, #35	; 0x23
   2763e:	e7c0      	b.n	275c2 <ip_interface_getaddrinfo+0x132>
   27640:	202f      	movs	r0, #47	; 0x2f
   27642:	f7f9 f9d3 	bl	209ec <bsd_os_errno_set>
   27646:	68a2      	ldr	r2, [r4, #8]
   27648:	3210      	adds	r2, #16
   2764a:	60a2      	str	r2, [r4, #8]
   2764c:	b917      	cbnz	r7, 27654 <ip_interface_getaddrinfo+0x1c4>
   2764e:	f04f 30ff 	mov.w	r0, #4294967295
   27652:	e7b6      	b.n	275c2 <ip_interface_getaddrinfo+0x132>
   27654:	6820      	ldr	r0, [r4, #0]
   27656:	2800      	cmp	r0, #0
   27658:	d0f9      	beq.n	2764e <ip_interface_getaddrinfo+0x1be>
   2765a:	465a      	mov	r2, fp
   2765c:	4639      	mov	r1, r7
   2765e:	f008 fbda 	bl	2fe16 <memcpy>
   27662:	e7f4      	b.n	2764e <ip_interface_getaddrinfo+0x1be>
   27664:	200214f8 	.word	0x200214f8
   27668:	20020848 	.word	0x20020848
   2766c:	20020840 	.word	0x20020840
   27670:	20020838 	.word	0x20020838
   27674:	2002083c 	.word	0x2002083c
   27678:	20020844 	.word	0x20020844

0002767c <ip_interface_freeaddrinfo>:
   2767c:	b538      	push	{r3, r4, r5, lr}
   2767e:	4c0b      	ldr	r4, [pc, #44]	; (276ac <ip_interface_freeaddrinfo+0x30>)
   27680:	6823      	ldr	r3, [r4, #0]
   27682:	2b02      	cmp	r3, #2
   27684:	d000      	beq.n	27688 <ip_interface_freeaddrinfo+0xc>
   27686:	bd38      	pop	{r3, r4, r5, pc}
   27688:	b130      	cbz	r0, 27698 <ip_interface_freeaddrinfo+0x1c>
   2768a:	4605      	mov	r5, r0
   2768c:	6940      	ldr	r0, [r0, #20]
   2768e:	f7fb fab7 	bl	22c00 <nrf_free>
   27692:	4628      	mov	r0, r5
   27694:	f7fb fab4 	bl	22c00 <nrf_free>
   27698:	2300      	movs	r3, #0
   2769a:	4a05      	ldr	r2, [pc, #20]	; (276b0 <ip_interface_freeaddrinfo+0x34>)
   2769c:	4905      	ldr	r1, [pc, #20]	; (276b4 <ip_interface_freeaddrinfo+0x38>)
   2769e:	6023      	str	r3, [r4, #0]
   276a0:	6013      	str	r3, [r2, #0]
   276a2:	6808      	ldr	r0, [r1, #0]
   276a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   276a8:	f7fb bb0a 	b.w	22cc0 <rpc_ip_client_data_free>
   276ac:	20020844 	.word	0x20020844
   276b0:	20020840 	.word	0x20020840
   276b4:	2002084c 	.word	0x2002084c

000276b8 <rpc_ip_event_handler>:
   276b8:	f248 030d 	movw	r3, #32781	; 0x800d
   276bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276c0:	4299      	cmp	r1, r3
   276c2:	b089      	sub	sp, #36	; 0x24
   276c4:	4605      	mov	r5, r0
   276c6:	d062      	beq.n	2778e <rpc_ip_event_handler+0xd6>
   276c8:	f248 030f 	movw	r3, #32783	; 0x800f
   276cc:	4299      	cmp	r1, r3
   276ce:	460c      	mov	r4, r1
   276d0:	d04b      	beq.n	2776a <rpc_ip_event_handler+0xb2>
   276d2:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   276d6:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   276da:	68c0      	ldr	r0, [r0, #12]
   276dc:	d07b      	beq.n	277d6 <rpc_ip_event_handler+0x11e>
   276de:	0c07      	lsrs	r7, r0, #16
   276e0:	4638      	mov	r0, r7
   276e2:	f000 fba1 	bl	27e28 <interface_socket_from_handle_get>
   276e6:	4606      	mov	r6, r0
   276e8:	2800      	cmp	r0, #0
   276ea:	d05f      	beq.n	277ac <rpc_ip_event_handler+0xf4>
   276ec:	4601      	mov	r1, r0
   276ee:	4623      	mov	r3, r4
   276f0:	462a      	mov	r2, r5
   276f2:	4638      	mov	r0, r7
   276f4:	f7fb ff1c 	bl	23530 <tls_rpc_ip_event_handler>
   276f8:	2800      	cmp	r0, #0
   276fa:	d053      	beq.n	277a4 <rpc_ip_event_handler+0xec>
   276fc:	f248 0307 	movw	r3, #32775	; 0x8007
   27700:	429c      	cmp	r4, r3
   27702:	d97d      	bls.n	27800 <rpc_ip_event_handler+0x148>
   27704:	f248 030c 	movw	r3, #32780	; 0x800c
   27708:	429c      	cmp	r4, r3
   2770a:	d068      	beq.n	277de <rpc_ip_event_handler+0x126>
   2770c:	f240 8119 	bls.w	27942 <rpc_ip_event_handler+0x28a>
   27710:	f249 0302 	movw	r3, #36866	; 0x9002
   27714:	429c      	cmp	r4, r3
   27716:	f000 8195 	beq.w	27a44 <rpc_ip_event_handler+0x38c>
   2771a:	f249 0303 	movw	r3, #36867	; 0x9003
   2771e:	429c      	cmp	r4, r3
   27720:	f000 81aa 	beq.w	27a78 <rpc_ip_event_handler+0x3c0>
   27724:	f249 0301 	movw	r3, #36865	; 0x9001
   27728:	429c      	cmp	r4, r3
   2772a:	d13f      	bne.n	277ac <rpc_ip_event_handler+0xf4>
   2772c:	6834      	ldr	r4, [r6, #0]
   2772e:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   27732:	f000 81c2 	beq.w	27aba <rpc_ip_event_handler+0x402>
   27736:	68ab      	ldr	r3, [r5, #8]
   27738:	2b04      	cmp	r3, #4
   2773a:	f200 81ff 	bhi.w	27b3c <rpc_ip_event_handler+0x484>
   2773e:	2400      	movs	r4, #0
   27740:	4627      	mov	r7, r4
   27742:	6829      	ldr	r1, [r5, #0]
   27744:	686a      	ldr	r2, [r5, #4]
   27746:	e9cd 7406 	strd	r7, r4, [sp, #24]
   2774a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   2774e:	69f0      	ldr	r0, [r6, #28]
   27750:	a904      	add	r1, sp, #16
   27752:	6803      	ldr	r3, [r0, #0]
   27754:	685b      	ldr	r3, [r3, #4]
   27756:	4798      	blx	r3
   27758:	3001      	adds	r0, #1
   2775a:	f000 81db 	beq.w	27b14 <rpc_ip_event_handler+0x45c>
   2775e:	6833      	ldr	r3, [r6, #0]
   27760:	2000      	movs	r0, #0
   27762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   27766:	6033      	str	r3, [r6, #0]
   27768:	e00e      	b.n	27788 <rpc_ip_event_handler+0xd0>
   2776a:	6943      	ldr	r3, [r0, #20]
   2776c:	2001      	movs	r0, #1
   2776e:	2b10      	cmp	r3, #16
   27770:	49b7      	ldr	r1, [pc, #732]	; (27a50 <rpc_ip_event_handler+0x398>)
   27772:	bf88      	it	hi
   27774:	222d      	movhi	r2, #45	; 0x2d
   27776:	7008      	strb	r0, [r1, #0]
   27778:	f04f 0000 	mov.w	r0, #0
   2777c:	bf9c      	itt	ls
   2777e:	4ab5      	ldrls	r2, [pc, #724]	; (27a54 <rpc_ip_event_handler+0x39c>)
   27780:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   27784:	4bb4      	ldr	r3, [pc, #720]	; (27a58 <rpc_ip_event_handler+0x3a0>)
   27786:	601a      	str	r2, [r3, #0]
   27788:	b009      	add	sp, #36	; 0x24
   2778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2778e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 27a6c <rpc_ip_event_handler+0x3b4>
   27792:	6807      	ldr	r7, [r0, #0]
   27794:	f8d9 3000 	ldr.w	r3, [r9]
   27798:	2b01      	cmp	r3, #1
   2779a:	d00b      	beq.n	277b4 <rpc_ip_event_handler+0xfc>
   2779c:	b117      	cbz	r7, 277a4 <rpc_ip_event_handler+0xec>
   2779e:	4638      	mov	r0, r7
   277a0:	f7fb fa8e 	bl	22cc0 <rpc_ip_client_data_free>
   277a4:	2000      	movs	r0, #0
   277a6:	b009      	add	sp, #36	; 0x24
   277a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   277ac:	6828      	ldr	r0, [r5, #0]
   277ae:	2800      	cmp	r0, #0
   277b0:	d1f6      	bne.n	277a0 <rpc_ip_event_handler+0xe8>
   277b2:	e7f7      	b.n	277a4 <rpc_ip_event_handler+0xec>
   277b4:	6943      	ldr	r3, [r0, #20]
   277b6:	2b00      	cmp	r3, #0
   277b8:	d046      	beq.n	27848 <rpc_ip_event_handler+0x190>
   277ba:	2b10      	cmp	r3, #16
   277bc:	bf96      	itet	ls
   277be:	4aa5      	ldrls	r2, [pc, #660]	; (27a54 <rpc_ip_event_handler+0x39c>)
   277c0:	232d      	movhi	r3, #45	; 0x2d
   277c2:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   277c6:	2202      	movs	r2, #2
   277c8:	49a4      	ldr	r1, [pc, #656]	; (27a5c <rpc_ip_event_handler+0x3a4>)
   277ca:	600b      	str	r3, [r1, #0]
   277cc:	f8c9 2000 	str.w	r2, [r9]
   277d0:	2f00      	cmp	r7, #0
   277d2:	d1e4      	bne.n	2779e <rpc_ip_event_handler+0xe6>
   277d4:	e7e6      	b.n	277a4 <rpc_ip_event_handler+0xec>
   277d6:	f000 fad5 	bl	27d84 <interface_from_internal_id_search>
   277da:	4607      	mov	r7, r0
   277dc:	e780      	b.n	276e0 <rpc_ip_event_handler+0x28>
   277de:	6833      	ldr	r3, [r6, #0]
   277e0:	b29b      	uxth	r3, r3
   277e2:	2b08      	cmp	r3, #8
   277e4:	d1de      	bne.n	277a4 <rpc_ip_event_handler+0xec>
   277e6:	696b      	ldr	r3, [r5, #20]
   277e8:	2b00      	cmp	r3, #0
   277ea:	f000 819c 	beq.w	27b26 <rpc_ip_event_handler+0x46e>
   277ee:	2b10      	cmp	r3, #16
   277f0:	f200 8161 	bhi.w	27ab6 <rpc_ip_event_handler+0x3fe>
   277f4:	4a97      	ldr	r2, [pc, #604]	; (27a54 <rpc_ip_event_handler+0x39c>)
   277f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   277fa:	6073      	str	r3, [r6, #4]
   277fc:	2000      	movs	r0, #0
   277fe:	e7c3      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27800:	f248 0306 	movw	r3, #32774	; 0x8006
   27804:	429c      	cmp	r4, r3
   27806:	f080 810d 	bcs.w	27a24 <rpc_ip_event_handler+0x36c>
   2780a:	f248 0302 	movw	r3, #32770	; 0x8002
   2780e:	429c      	cmp	r4, r3
   27810:	f000 80f0 	beq.w	279f4 <rpc_ip_event_handler+0x33c>
   27814:	f240 80be 	bls.w	27994 <rpc_ip_event_handler+0x2dc>
   27818:	f248 0303 	movw	r3, #32771	; 0x8003
   2781c:	429c      	cmp	r4, r3
   2781e:	f000 80ca 	beq.w	279b6 <rpc_ip_event_handler+0x2fe>
   27822:	f248 0305 	movw	r3, #32773	; 0x8005
   27826:	429c      	cmp	r4, r3
   27828:	d1c0      	bne.n	277ac <rpc_ip_event_handler+0xf4>
   2782a:	6833      	ldr	r3, [r6, #0]
   2782c:	b29b      	uxth	r3, r3
   2782e:	2b03      	cmp	r3, #3
   27830:	d1b8      	bne.n	277a4 <rpc_ip_event_handler+0xec>
   27832:	696b      	ldr	r3, [r5, #20]
   27834:	2b00      	cmp	r3, #0
   27836:	d1da      	bne.n	277ee <rpc_ip_event_handler+0x136>
   27838:	6833      	ldr	r3, [r6, #0]
   2783a:	2000      	movs	r0, #0
   2783c:	0c1b      	lsrs	r3, r3, #16
   2783e:	041b      	lsls	r3, r3, #16
   27840:	f043 0304 	orr.w	r3, r3, #4
   27844:	6033      	str	r3, [r6, #0]
   27846:	e79f      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27848:	4b85      	ldr	r3, [pc, #532]	; (27a60 <rpc_ip_event_handler+0x3a8>)
   2784a:	601f      	str	r7, [r3, #0]
   2784c:	6984      	ldr	r4, [r0, #24]
   2784e:	0163      	lsls	r3, r4, #5
   27850:	4618      	mov	r0, r3
   27852:	9303      	str	r3, [sp, #12]
   27854:	f7fb f9ca 	bl	22bec <nrf_malloc>
   27858:	9002      	str	r0, [sp, #8]
   2785a:	2800      	cmp	r0, #0
   2785c:	f000 808a 	beq.w	27974 <rpc_ip_event_handler+0x2bc>
   27860:	00e5      	lsls	r5, r4, #3
   27862:	1928      	adds	r0, r5, r4
   27864:	0080      	lsls	r0, r0, #2
   27866:	f7fb f9c1 	bl	22bec <nrf_malloc>
   2786a:	2800      	cmp	r0, #0
   2786c:	f000 811f 	beq.w	27aae <rpc_ip_event_handler+0x3f6>
   27870:	2c00      	cmp	r4, #0
   27872:	d05e      	beq.n	27932 <rpc_ip_event_handler+0x27a>
   27874:	3510      	adds	r5, #16
   27876:	1943      	adds	r3, r0, r5
   27878:	9301      	str	r3, [sp, #4]
   2787a:	9b02      	ldr	r3, [sp, #8]
   2787c:	2404      	movs	r4, #4
   2787e:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 27a70 <rpc_ip_event_handler+0x3b8>
   27882:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 27a74 <rpc_ip_event_handler+0x3bc>
   27886:	f100 0810 	add.w	r8, r0, #16
   2788a:	f103 0620 	add.w	r6, r3, #32
   2788e:	e01d      	b.n	278cc <rpc_ip_event_handler+0x214>
   27890:	220a      	movs	r2, #10
   27892:	f848 2c0c 	str.w	r2, [r8, #-12]
   27896:	f04f 0224 	mov.w	r2, #36	; 0x24
   2789a:	4640      	mov	r0, r8
   2789c:	f808 2c10 	strb.w	r2, [r8, #-16]
   278a0:	f828 3c08 	strh.w	r3, [r8, #-8]
   278a4:	f856 2c10 	ldr.w	r2, [r6, #-16]
   278a8:	f008 fab5 	bl	2fe16 <memcpy>
   278ac:	f856 3c10 	ldr.w	r3, [r6, #-16]
   278b0:	f108 0808 	add.w	r8, r8, #8
   278b4:	441c      	add	r4, r3
   278b6:	193b      	adds	r3, r7, r4
   278b8:	f846 3c08 	str.w	r3, [r6, #-8]
   278bc:	9b01      	ldr	r3, [sp, #4]
   278be:	f846 6c04 	str.w	r6, [r6, #-4]
   278c2:	4598      	cmp	r8, r3
   278c4:	442c      	add	r4, r5
   278c6:	f106 0620 	add.w	r6, r6, #32
   278ca:	d02c      	beq.n	27926 <rpc_ip_event_handler+0x26e>
   278cc:	593b      	ldr	r3, [r7, r4]
   278ce:	193a      	adds	r2, r7, r4
   278d0:	f846 3c20 	str.w	r3, [r6, #-32]
   278d4:	6853      	ldr	r3, [r2, #4]
   278d6:	f8da 1000 	ldr.w	r1, [sl]
   278da:	2b02      	cmp	r3, #2
   278dc:	bf14      	ite	ne
   278de:	2002      	movne	r0, #2
   278e0:	200a      	moveq	r0, #10
   278e2:	f8db 3000 	ldr.w	r3, [fp]
   278e6:	e946 0107 	strd	r0, r1, [r6, #-28]
   278ea:	f846 3c14 	str.w	r3, [r6, #-20]
   278ee:	8a10      	ldrh	r0, [r2, #16]
   278f0:	f1a8 0310 	sub.w	r3, r8, #16
   278f4:	f846 0c10 	str.w	r0, [r6, #-16]
   278f8:	8a55      	ldrh	r5, [r2, #18]
   278fa:	f846 3c0c 	str.w	r3, [r6, #-12]
   278fe:	4b59      	ldr	r3, [pc, #356]	; (27a64 <rpc_ip_event_handler+0x3ac>)
   27900:	3414      	adds	r4, #20
   27902:	2804      	cmp	r0, #4
   27904:	eb07 0104 	add.w	r1, r7, r4
   27908:	881b      	ldrh	r3, [r3, #0]
   2790a:	d1c1      	bne.n	27890 <rpc_ip_event_handler+0x1d8>
   2790c:	2210      	movs	r2, #16
   2790e:	2002      	movs	r0, #2
   27910:	f828 3c08 	strh.w	r3, [r8, #-8]
   27914:	f848 0c0c 	str.w	r0, [r8, #-12]
   27918:	f808 2c10 	strb.w	r2, [r8, #-16]
   2791c:	f856 2c10 	ldr.w	r2, [r6, #-16]
   27920:	f1a8 0004 	sub.w	r0, r8, #4
   27924:	e7c0      	b.n	278a8 <rpc_ip_event_handler+0x1f0>
   27926:	2200      	movs	r2, #0
   27928:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   2792c:	440b      	add	r3, r1
   2792e:	f843 2c04 	str.w	r2, [r3, #-4]
   27932:	2202      	movs	r2, #2
   27934:	4b4c      	ldr	r3, [pc, #304]	; (27a68 <rpc_ip_event_handler+0x3b0>)
   27936:	f8c9 2000 	str.w	r2, [r9]
   2793a:	9a02      	ldr	r2, [sp, #8]
   2793c:	2000      	movs	r0, #0
   2793e:	601a      	str	r2, [r3, #0]
   27940:	e722      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27942:	f248 0308 	movw	r3, #32776	; 0x8008
   27946:	429c      	cmp	r4, r3
   27948:	d045      	beq.n	279d6 <rpc_ip_event_handler+0x31e>
   2794a:	f248 0309 	movw	r3, #32777	; 0x8009
   2794e:	429c      	cmp	r4, r3
   27950:	f47f af2c 	bne.w	277ac <rpc_ip_event_handler+0xf4>
   27954:	6833      	ldr	r3, [r6, #0]
   27956:	b29b      	uxth	r3, r3
   27958:	2b0d      	cmp	r3, #13
   2795a:	f47f af23 	bne.w	277a4 <rpc_ip_event_handler+0xec>
   2795e:	6968      	ldr	r0, [r5, #20]
   27960:	2800      	cmp	r0, #0
   27962:	f000 80d9 	beq.w	27b18 <rpc_ip_event_handler+0x460>
   27966:	2810      	cmp	r0, #16
   27968:	f200 80a5 	bhi.w	27ab6 <rpc_ip_event_handler+0x3fe>
   2796c:	4b39      	ldr	r3, [pc, #228]	; (27a54 <rpc_ip_event_handler+0x39c>)
   2796e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   27972:	e742      	b.n	277fa <rpc_ip_event_handler+0x142>
   27974:	f7fb f944 	bl	22c00 <nrf_free>
   27978:	200c      	movs	r0, #12
   2797a:	2302      	movs	r3, #2
   2797c:	4937      	ldr	r1, [pc, #220]	; (27a5c <rpc_ip_event_handler+0x3a4>)
   2797e:	4a3a      	ldr	r2, [pc, #232]	; (27a68 <rpc_ip_event_handler+0x3b0>)
   27980:	6008      	str	r0, [r1, #0]
   27982:	682f      	ldr	r7, [r5, #0]
   27984:	9902      	ldr	r1, [sp, #8]
   27986:	f8c9 3000 	str.w	r3, [r9]
   2798a:	6011      	str	r1, [r2, #0]
   2798c:	2f00      	cmp	r7, #0
   2798e:	f47f af06 	bne.w	2779e <rpc_ip_event_handler+0xe6>
   27992:	e707      	b.n	277a4 <rpc_ip_event_handler+0xec>
   27994:	f248 0301 	movw	r3, #32769	; 0x8001
   27998:	429c      	cmp	r4, r3
   2799a:	f47f af07 	bne.w	277ac <rpc_ip_event_handler+0xf4>
   2799e:	6833      	ldr	r3, [r6, #0]
   279a0:	2b01      	cmp	r3, #1
   279a2:	f47f aeff 	bne.w	277a4 <rpc_ip_event_handler+0xec>
   279a6:	6968      	ldr	r0, [r5, #20]
   279a8:	2800      	cmp	r0, #0
   279aa:	d1dc      	bne.n	27966 <rpc_ip_event_handler+0x2ae>
   279ac:	2302      	movs	r3, #2
   279ae:	6033      	str	r3, [r6, #0]
   279b0:	69ab      	ldr	r3, [r5, #24]
   279b2:	61b3      	str	r3, [r6, #24]
   279b4:	e6e8      	b.n	27788 <rpc_ip_event_handler+0xd0>
   279b6:	6833      	ldr	r3, [r6, #0]
   279b8:	025b      	lsls	r3, r3, #9
   279ba:	f57f aef3 	bpl.w	277a4 <rpc_ip_event_handler+0xec>
   279be:	6968      	ldr	r0, [r5, #20]
   279c0:	2800      	cmp	r0, #0
   279c2:	f000 80a0 	beq.w	27b06 <rpc_ip_event_handler+0x44e>
   279c6:	2810      	cmp	r0, #16
   279c8:	bf8e      	itee	hi
   279ca:	232d      	movhi	r3, #45	; 0x2d
   279cc:	4b21      	ldrls	r3, [pc, #132]	; (27a54 <rpc_ip_event_handler+0x39c>)
   279ce:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   279d2:	6073      	str	r3, [r6, #4]
   279d4:	e6e6      	b.n	277a4 <rpc_ip_event_handler+0xec>
   279d6:	6833      	ldr	r3, [r6, #0]
   279d8:	b29b      	uxth	r3, r3
   279da:	2b06      	cmp	r3, #6
   279dc:	f47f aee2 	bne.w	277a4 <rpc_ip_event_handler+0xec>
   279e0:	6968      	ldr	r0, [r5, #20]
   279e2:	2800      	cmp	r0, #0
   279e4:	d1bf      	bne.n	27966 <rpc_ip_event_handler+0x2ae>
   279e6:	6833      	ldr	r3, [r6, #0]
   279e8:	0c1b      	lsrs	r3, r3, #16
   279ea:	041b      	lsls	r3, r3, #16
   279ec:	f043 0307 	orr.w	r3, r3, #7
   279f0:	6033      	str	r3, [r6, #0]
   279f2:	e6c9      	b.n	27788 <rpc_ip_event_handler+0xd0>
   279f4:	6833      	ldr	r3, [r6, #0]
   279f6:	0099      	lsls	r1, r3, #2
   279f8:	f57f aed4 	bpl.w	277a4 <rpc_ip_event_handler+0xec>
   279fc:	6833      	ldr	r3, [r6, #0]
   279fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   27a02:	6033      	str	r3, [r6, #0]
   27a04:	6968      	ldr	r0, [r5, #20]
   27a06:	2800      	cmp	r0, #0
   27a08:	d06e      	beq.n	27ae8 <rpc_ip_event_handler+0x430>
   27a0a:	2810      	cmp	r0, #16
   27a0c:	f200 8080 	bhi.w	27b10 <rpc_ip_event_handler+0x458>
   27a10:	4b10      	ldr	r3, [pc, #64]	; (27a54 <rpc_ip_event_handler+0x39c>)
   27a12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   27a16:	6073      	str	r3, [r6, #4]
   27a18:	6833      	ldr	r3, [r6, #0]
   27a1a:	2000      	movs	r0, #0
   27a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   27a20:	6033      	str	r3, [r6, #0]
   27a22:	e6b1      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27a24:	6833      	ldr	r3, [r6, #0]
   27a26:	029a      	lsls	r2, r3, #10
   27a28:	f57f aebc 	bpl.w	277a4 <rpc_ip_event_handler+0xec>
   27a2c:	696b      	ldr	r3, [r5, #20]
   27a2e:	2b00      	cmp	r3, #0
   27a30:	d051      	beq.n	27ad6 <rpc_ip_event_handler+0x41e>
   27a32:	2b6b      	cmp	r3, #107	; 0x6b
   27a34:	f000 8086 	beq.w	27b44 <rpc_ip_event_handler+0x48c>
   27a38:	2b10      	cmp	r3, #16
   27a3a:	d869      	bhi.n	27b10 <rpc_ip_event_handler+0x458>
   27a3c:	4a05      	ldr	r2, [pc, #20]	; (27a54 <rpc_ip_event_handler+0x39c>)
   27a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   27a42:	e7e8      	b.n	27a16 <rpc_ip_event_handler+0x35e>
   27a44:	6833      	ldr	r3, [r6, #0]
   27a46:	b29b      	uxth	r3, r3
   27a48:	2b07      	cmp	r3, #7
   27a4a:	f47f aeab 	bne.w	277a4 <rpc_ip_event_handler+0xec>
   27a4e:	e686      	b.n	2775e <rpc_ip_event_handler+0xa6>
   27a50:	2002293d 	.word	0x2002293d
   27a54:	000313e0 	.word	0x000313e0
   27a58:	20020874 	.word	0x20020874
   27a5c:	20020840 	.word	0x20020840
   27a60:	2002084c 	.word	0x2002084c
   27a64:	200214f8 	.word	0x200214f8
   27a68:	20020848 	.word	0x20020848
   27a6c:	20020844 	.word	0x20020844
   27a70:	2002083c 	.word	0x2002083c
   27a74:	20020838 	.word	0x20020838
   27a78:	6833      	ldr	r3, [r6, #0]
   27a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   27a7e:	6033      	str	r3, [r6, #0]
   27a80:	6833      	ldr	r3, [r6, #0]
   27a82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   27a86:	6033      	str	r3, [r6, #0]
   27a88:	6833      	ldr	r3, [r6, #0]
   27a8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   27a8e:	6033      	str	r3, [r6, #0]
   27a90:	692b      	ldr	r3, [r5, #16]
   27a92:	2b6c      	cmp	r3, #108	; 0x6c
   27a94:	d016      	beq.n	27ac4 <rpc_ip_event_handler+0x40c>
   27a96:	2b10      	cmp	r3, #16
   27a98:	bf8c      	ite	hi
   27a9a:	232d      	movhi	r3, #45	; 0x2d
   27a9c:	4a46      	ldrls	r2, [pc, #280]	; (27bb8 <rpc_ip_event_handler+0x500>)
   27a9e:	f04f 0000 	mov.w	r0, #0
   27aa2:	bf98      	it	ls
   27aa4:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   27aa8:	6073      	str	r3, [r6, #4]
   27aaa:	60b3      	str	r3, [r6, #8]
   27aac:	e66c      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27aae:	220c      	movs	r2, #12
   27ab0:	4b42      	ldr	r3, [pc, #264]	; (27bbc <rpc_ip_event_handler+0x504>)
   27ab2:	601a      	str	r2, [r3, #0]
   27ab4:	e73d      	b.n	27932 <rpc_ip_event_handler+0x27a>
   27ab6:	232d      	movs	r3, #45	; 0x2d
   27ab8:	e69f      	b.n	277fa <rpc_ip_event_handler+0x142>
   27aba:	6828      	ldr	r0, [r5, #0]
   27abc:	f7fb f900 	bl	22cc0 <rpc_ip_client_data_free>
   27ac0:	4620      	mov	r0, r4
   27ac2:	e661      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27ac4:	2239      	movs	r2, #57	; 0x39
   27ac6:	6833      	ldr	r3, [r6, #0]
   27ac8:	2000      	movs	r0, #0
   27aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   27ace:	6033      	str	r3, [r6, #0]
   27ad0:	6072      	str	r2, [r6, #4]
   27ad2:	60b2      	str	r2, [r6, #8]
   27ad4:	e658      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27ad6:	6833      	ldr	r3, [r6, #0]
   27ad8:	4a39      	ldr	r2, [pc, #228]	; (27bc0 <rpc_ip_event_handler+0x508>)
   27ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   27ade:	6033      	str	r3, [r6, #0]
   27ae0:	2001      	movs	r0, #1
   27ae2:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   27ae6:	e64f      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27ae8:	6833      	ldr	r3, [r6, #0]
   27aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   27aee:	6033      	str	r3, [r6, #0]
   27af0:	6833      	ldr	r3, [r6, #0]
   27af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   27af6:	6033      	str	r3, [r6, #0]
   27af8:	6833      	ldr	r3, [r6, #0]
   27afa:	0c1b      	lsrs	r3, r3, #16
   27afc:	041b      	lsls	r3, r3, #16
   27afe:	f043 0305 	orr.w	r3, r3, #5
   27b02:	6033      	str	r3, [r6, #0]
   27b04:	e640      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27b06:	6833      	ldr	r3, [r6, #0]
   27b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   27b0c:	6033      	str	r3, [r6, #0]
   27b0e:	e63b      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27b10:	232d      	movs	r3, #45	; 0x2d
   27b12:	e780      	b.n	27a16 <rpc_ip_event_handler+0x35e>
   27b14:	2002      	movs	r0, #2
   27b16:	e637      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27b18:	6833      	ldr	r3, [r6, #0]
   27b1a:	0c1b      	lsrs	r3, r3, #16
   27b1c:	041b      	lsls	r3, r3, #16
   27b1e:	f043 030e 	orr.w	r3, r3, #14
   27b22:	6033      	str	r3, [r6, #0]
   27b24:	e630      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27b26:	4b26      	ldr	r3, [pc, #152]	; (27bc0 <rpc_ip_event_handler+0x508>)
   27b28:	2001      	movs	r0, #1
   27b2a:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   27b2e:	6833      	ldr	r3, [r6, #0]
   27b30:	0c1b      	lsrs	r3, r3, #16
   27b32:	041b      	lsls	r3, r3, #16
   27b34:	f043 0309 	orr.w	r3, r3, #9
   27b38:	6033      	str	r3, [r6, #0]
   27b3a:	e625      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27b3c:	8a6c      	ldrh	r4, [r5, #18]
   27b3e:	b934      	cbnz	r4, 27b4e <rpc_ip_event_handler+0x496>
   27b40:	4627      	mov	r7, r4
   27b42:	e5fe      	b.n	27742 <rpc_ip_event_handler+0x8a>
   27b44:	6933      	ldr	r3, [r6, #16]
   27b46:	2b01      	cmp	r3, #1
   27b48:	d012      	beq.n	27b70 <rpc_ip_event_handler+0x4b8>
   27b4a:	230c      	movs	r3, #12
   27b4c:	e763      	b.n	27a16 <rpc_ip_event_handler+0x35e>
   27b4e:	2024      	movs	r0, #36	; 0x24
   27b50:	f7fb f84c 	bl	22bec <nrf_malloc>
   27b54:	4607      	mov	r7, r0
   27b56:	b358      	cbz	r0, 27bb0 <rpc_ip_event_handler+0x4f8>
   27b58:	8a6a      	ldrh	r2, [r5, #18]
   27b5a:	2a10      	cmp	r2, #16
   27b5c:	d01c      	beq.n	27b98 <rpc_ip_event_handler+0x4e0>
   27b5e:	2a04      	cmp	r2, #4
   27b60:	d00e      	beq.n	27b80 <rpc_ip_event_handler+0x4c8>
   27b62:	6828      	ldr	r0, [r5, #0]
   27b64:	f7fb f8ac 	bl	22cc0 <rpc_ip_client_data_free>
   27b68:	4638      	mov	r0, r7
   27b6a:	f7fb f849 	bl	22c00 <nrf_free>
   27b6e:	e619      	b.n	277a4 <rpc_ip_event_handler+0xec>
   27b70:	220c      	movs	r2, #12
   27b72:	6833      	ldr	r3, [r6, #0]
   27b74:	2000      	movs	r0, #0
   27b76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   27b7a:	6033      	str	r3, [r6, #0]
   27b7c:	6072      	str	r2, [r6, #4]
   27b7e:	e603      	b.n	27788 <rpc_ip_event_handler+0xd0>
   27b80:	2302      	movs	r3, #2
   27b82:	2410      	movs	r4, #16
   27b84:	6043      	str	r3, [r0, #4]
   27b86:	7004      	strb	r4, [r0, #0]
   27b88:	8a2b      	ldrh	r3, [r5, #16]
   27b8a:	f105 0114 	add.w	r1, r5, #20
   27b8e:	8103      	strh	r3, [r0, #8]
   27b90:	300c      	adds	r0, #12
   27b92:	f008 f940 	bl	2fe16 <memcpy>
   27b96:	e5d4      	b.n	27742 <rpc_ip_event_handler+0x8a>
   27b98:	230a      	movs	r3, #10
   27b9a:	2424      	movs	r4, #36	; 0x24
   27b9c:	6043      	str	r3, [r0, #4]
   27b9e:	7004      	strb	r4, [r0, #0]
   27ba0:	8a2b      	ldrh	r3, [r5, #16]
   27ba2:	f105 0114 	add.w	r1, r5, #20
   27ba6:	8103      	strh	r3, [r0, #8]
   27ba8:	3010      	adds	r0, #16
   27baa:	f008 f934 	bl	2fe16 <memcpy>
   27bae:	e5c8      	b.n	27742 <rpc_ip_event_handler+0x8a>
   27bb0:	6828      	ldr	r0, [r5, #0]
   27bb2:	f7fb f885 	bl	22cc0 <rpc_ip_client_data_free>
   27bb6:	e5f5      	b.n	277a4 <rpc_ip_event_handler+0xec>
   27bb8:	000313e0 	.word	0x000313e0
   27bbc:	20020840 	.word	0x20020840
   27bc0:	20020850 	.word	0x20020850

00027bc4 <interface_init>:
   27bc4:	b508      	push	{r3, lr}
   27bc6:	f44f 72a2 	mov.w	r2, #324	; 0x144
   27bca:	2100      	movs	r1, #0
   27bcc:	4802      	ldr	r0, [pc, #8]	; (27bd8 <interface_init+0x14>)
   27bce:	f008 f92f 	bl	2fe30 <memset>
   27bd2:	2000      	movs	r0, #0
   27bd4:	bd08      	pop	{r3, pc}
   27bd6:	bf00      	nop
   27bd8:	20022940 	.word	0x20022940

00027bdc <interface_socket_allocate>:
   27bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27bde:	4b30      	ldr	r3, [pc, #192]	; (27ca0 <interface_socket_allocate+0xc4>)
   27be0:	4606      	mov	r6, r0
   27be2:	681d      	ldr	r5, [r3, #0]
   27be4:	4608      	mov	r0, r1
   27be6:	b31d      	cbz	r5, 27c30 <interface_socket_allocate+0x54>
   27be8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   27bea:	2c00      	cmp	r4, #0
   27bec:	d04a      	beq.n	27c84 <interface_socket_allocate+0xa8>
   27bee:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   27bf0:	2c00      	cmp	r4, #0
   27bf2:	d049      	beq.n	27c88 <interface_socket_allocate+0xac>
   27bf4:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   27bf6:	2c00      	cmp	r4, #0
   27bf8:	d048      	beq.n	27c8c <interface_socket_allocate+0xb0>
   27bfa:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   27bfe:	2900      	cmp	r1, #0
   27c00:	d046      	beq.n	27c90 <interface_socket_allocate+0xb4>
   27c02:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   27c06:	b191      	cbz	r1, 27c2e <interface_socket_allocate+0x52>
   27c08:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   27c0c:	2900      	cmp	r1, #0
   27c0e:	d043      	beq.n	27c98 <interface_socket_allocate+0xbc>
   27c10:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   27c14:	2900      	cmp	r1, #0
   27c16:	d041      	beq.n	27c9c <interface_socket_allocate+0xc0>
   27c18:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   27c1c:	2900      	cmp	r1, #0
   27c1e:	d039      	beq.n	27c94 <interface_socket_allocate+0xb8>
   27c20:	f04f 35ff 	mov.w	r5, #4294967295
   27c24:	2069      	movs	r0, #105	; 0x69
   27c26:	f7f8 fee1 	bl	209ec <bsd_os_errno_set>
   27c2a:	4628      	mov	r0, r5
   27c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c2e:	2505      	movs	r5, #5
   27c30:	f04f 0c01 	mov.w	ip, #1
   27c34:	f04f 37ff 	mov.w	r7, #4294967295
   27c38:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   27c3c:	00a4      	lsls	r4, r4, #2
   27c3e:	f843 c004 	str.w	ip, [r3, r4]
   27c42:	441c      	add	r4, r3
   27c44:	4611      	mov	r1, r2
   27c46:	61a7      	str	r7, [r4, #24]
   27c48:	4622      	mov	r2, r4
   27c4a:	f001 ffd1 	bl	29bf0 <packet_handler_create>
   27c4e:	4603      	mov	r3, r0
   27c50:	61e0      	str	r0, [r4, #28]
   27c52:	b158      	cbz	r0, 27c6c <interface_socket_allocate+0x90>
   27c54:	681b      	ldr	r3, [r3, #0]
   27c56:	681b      	ldr	r3, [r3, #0]
   27c58:	4798      	blx	r3
   27c5a:	b910      	cbnz	r0, 27c62 <interface_socket_allocate+0x86>
   27c5c:	6034      	str	r4, [r6, #0]
   27c5e:	4628      	mov	r0, r5
   27c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c62:	69e0      	ldr	r0, [r4, #28]
   27c64:	f001 ffe4 	bl	29c30 <packet_handler_delete>
   27c68:	2300      	movs	r3, #0
   27c6a:	61e3      	str	r3, [r4, #28]
   27c6c:	f04f 35ff 	mov.w	r5, #4294967295
   27c70:	2224      	movs	r2, #36	; 0x24
   27c72:	2100      	movs	r1, #0
   27c74:	4620      	mov	r0, r4
   27c76:	f008 f8db 	bl	2fe30 <memset>
   27c7a:	200c      	movs	r0, #12
   27c7c:	f7f8 feb6 	bl	209ec <bsd_os_errno_set>
   27c80:	4628      	mov	r0, r5
   27c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c84:	2501      	movs	r5, #1
   27c86:	e7d3      	b.n	27c30 <interface_socket_allocate+0x54>
   27c88:	2502      	movs	r5, #2
   27c8a:	e7d1      	b.n	27c30 <interface_socket_allocate+0x54>
   27c8c:	2503      	movs	r5, #3
   27c8e:	e7cf      	b.n	27c30 <interface_socket_allocate+0x54>
   27c90:	2504      	movs	r5, #4
   27c92:	e7cd      	b.n	27c30 <interface_socket_allocate+0x54>
   27c94:	2508      	movs	r5, #8
   27c96:	e7cb      	b.n	27c30 <interface_socket_allocate+0x54>
   27c98:	2506      	movs	r5, #6
   27c9a:	e7c9      	b.n	27c30 <interface_socket_allocate+0x54>
   27c9c:	2507      	movs	r5, #7
   27c9e:	e7c7      	b.n	27c30 <interface_socket_allocate+0x54>
   27ca0:	20022940 	.word	0x20022940

00027ca4 <interface_socket_free>:
   27ca4:	2808      	cmp	r0, #8
   27ca6:	d900      	bls.n	27caa <interface_socket_free+0x6>
   27ca8:	4770      	bx	lr
   27caa:	b510      	push	{r4, lr}
   27cac:	4c07      	ldr	r4, [pc, #28]	; (27ccc <interface_socket_free+0x28>)
   27cae:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   27cb2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   27cb6:	69e0      	ldr	r0, [r4, #28]
   27cb8:	b108      	cbz	r0, 27cbe <interface_socket_free+0x1a>
   27cba:	f001 ffb9 	bl	29c30 <packet_handler_delete>
   27cbe:	4620      	mov	r0, r4
   27cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27cc4:	2224      	movs	r2, #36	; 0x24
   27cc6:	2100      	movs	r1, #0
   27cc8:	f008 b8b2 	b.w	2fe30 <memset>
   27ccc:	20022940 	.word	0x20022940

00027cd0 <interface_socket_packet_handler_update>:
   27cd0:	2808      	cmp	r0, #8
   27cd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27cd6:	d81e      	bhi.n	27d16 <interface_socket_packet_handler_update+0x46>
   27cd8:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   27cdc:	4e17      	ldr	r6, [pc, #92]	; (27d3c <interface_socket_packet_handler_update+0x6c>)
   27cde:	eb08 0300 	add.w	r3, r8, r0
   27ce2:	009b      	lsls	r3, r3, #2
   27ce4:	58f4      	ldr	r4, [r6, r3]
   27ce6:	18f5      	adds	r5, r6, r3
   27ce8:	b1ac      	cbz	r4, 27d16 <interface_socket_packet_handler_update+0x46>
   27cea:	460b      	mov	r3, r1
   27cec:	4604      	mov	r4, r0
   27cee:	4611      	mov	r1, r2
   27cf0:	4618      	mov	r0, r3
   27cf2:	462a      	mov	r2, r5
   27cf4:	f8d5 901c 	ldr.w	r9, [r5, #28]
   27cf8:	f001 ff7a 	bl	29bf0 <packet_handler_create>
   27cfc:	61e8      	str	r0, [r5, #28]
   27cfe:	b1d0      	cbz	r0, 27d36 <interface_socket_packet_handler_update+0x66>
   27d00:	6803      	ldr	r3, [r0, #0]
   27d02:	681b      	ldr	r3, [r3, #0]
   27d04:	4798      	blx	r3
   27d06:	4607      	mov	r7, r0
   27d08:	b948      	cbnz	r0, 27d1e <interface_socket_packet_handler_update+0x4e>
   27d0a:	4648      	mov	r0, r9
   27d0c:	f001 ff90 	bl	29c30 <packet_handler_delete>
   27d10:	4638      	mov	r0, r7
   27d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27d16:	2705      	movs	r7, #5
   27d18:	4638      	mov	r0, r7
   27d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27d1e:	69e8      	ldr	r0, [r5, #28]
   27d20:	f001 ff86 	bl	29c30 <packet_handler_delete>
   27d24:	eb08 0004 	add.w	r0, r8, r4
   27d28:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   27d2c:	f8c6 901c 	str.w	r9, [r6, #28]
   27d30:	4638      	mov	r0, r7
   27d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27d36:	2704      	movs	r7, #4
   27d38:	e7f4      	b.n	27d24 <interface_socket_packet_handler_update+0x54>
   27d3a:	bf00      	nop
   27d3c:	20022940 	.word	0x20022940

00027d40 <interface_socket_wait>:
   27d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d42:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   27d46:	4c0e      	ldr	r4, [pc, #56]	; (27d80 <interface_socket_wait+0x40>)
   27d48:	0080      	lsls	r0, r0, #2
   27d4a:	5825      	ldr	r5, [r4, r0]
   27d4c:	b083      	sub	sp, #12
   27d4e:	4015      	ands	r5, r2
   27d50:	428d      	cmp	r5, r1
   27d52:	9301      	str	r3, [sp, #4]
   27d54:	4404      	add	r4, r0
   27d56:	d010      	beq.n	27d7a <interface_socket_wait+0x3a>
   27d58:	6863      	ldr	r3, [r4, #4]
   27d5a:	b973      	cbnz	r3, 27d7a <interface_socket_wait+0x3a>
   27d5c:	460f      	mov	r7, r1
   27d5e:	4616      	mov	r6, r2
   27d60:	4625      	mov	r5, r4
   27d62:	e006      	b.n	27d72 <interface_socket_wait+0x32>
   27d64:	686b      	ldr	r3, [r5, #4]
   27d66:	b943      	cbnz	r3, 27d7a <interface_socket_wait+0x3a>
   27d68:	a901      	add	r1, sp, #4
   27d6a:	4620      	mov	r0, r4
   27d6c:	f7f8 fdaa 	bl	208c4 <bsd_os_timedwait>
   27d70:	b920      	cbnz	r0, 27d7c <interface_socket_wait+0x3c>
   27d72:	682b      	ldr	r3, [r5, #0]
   27d74:	4033      	ands	r3, r6
   27d76:	42bb      	cmp	r3, r7
   27d78:	d1f4      	bne.n	27d64 <interface_socket_wait+0x24>
   27d7a:	2000      	movs	r0, #0
   27d7c:	b003      	add	sp, #12
   27d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27d80:	20022940 	.word	0x20022940

00027d84 <interface_from_internal_id_search>:
   27d84:	4b27      	ldr	r3, [pc, #156]	; (27e24 <interface_from_internal_id_search+0xa0>)
   27d86:	681a      	ldr	r2, [r3, #0]
   27d88:	b112      	cbz	r2, 27d90 <interface_from_internal_id_search+0xc>
   27d8a:	699a      	ldr	r2, [r3, #24]
   27d8c:	4282      	cmp	r2, r0
   27d8e:	d039      	beq.n	27e04 <interface_from_internal_id_search+0x80>
   27d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   27d92:	b112      	cbz	r2, 27d9a <interface_from_internal_id_search+0x16>
   27d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   27d96:	4282      	cmp	r2, r0
   27d98:	d036      	beq.n	27e08 <interface_from_internal_id_search+0x84>
   27d9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   27d9c:	b112      	cbz	r2, 27da4 <interface_from_internal_id_search+0x20>
   27d9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   27da0:	4282      	cmp	r2, r0
   27da2:	d033      	beq.n	27e0c <interface_from_internal_id_search+0x88>
   27da4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   27da6:	b11a      	cbz	r2, 27db0 <interface_from_internal_id_search+0x2c>
   27da8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   27dac:	4282      	cmp	r2, r0
   27dae:	d02f      	beq.n	27e10 <interface_from_internal_id_search+0x8c>
   27db0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   27db4:	b11a      	cbz	r2, 27dbe <interface_from_internal_id_search+0x3a>
   27db6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   27dba:	4282      	cmp	r2, r0
   27dbc:	d02a      	beq.n	27e14 <interface_from_internal_id_search+0x90>
   27dbe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   27dc2:	b11a      	cbz	r2, 27dcc <interface_from_internal_id_search+0x48>
   27dc4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   27dc8:	4282      	cmp	r2, r0
   27dca:	d025      	beq.n	27e18 <interface_from_internal_id_search+0x94>
   27dcc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   27dd0:	b11a      	cbz	r2, 27dda <interface_from_internal_id_search+0x56>
   27dd2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   27dd6:	4282      	cmp	r2, r0
   27dd8:	d020      	beq.n	27e1c <interface_from_internal_id_search+0x98>
   27dda:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   27dde:	b11a      	cbz	r2, 27de8 <interface_from_internal_id_search+0x64>
   27de0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   27de4:	4282      	cmp	r2, r0
   27de6:	d01b      	beq.n	27e20 <interface_from_internal_id_search+0x9c>
   27de8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   27dec:	b13a      	cbz	r2, 27dfe <interface_from_internal_id_search+0x7a>
   27dee:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   27df2:	4283      	cmp	r3, r0
   27df4:	bf14      	ite	ne
   27df6:	f04f 30ff 	movne.w	r0, #4294967295
   27dfa:	2008      	moveq	r0, #8
   27dfc:	4770      	bx	lr
   27dfe:	f04f 30ff 	mov.w	r0, #4294967295
   27e02:	4770      	bx	lr
   27e04:	2000      	movs	r0, #0
   27e06:	4770      	bx	lr
   27e08:	2001      	movs	r0, #1
   27e0a:	4770      	bx	lr
   27e0c:	2002      	movs	r0, #2
   27e0e:	4770      	bx	lr
   27e10:	2003      	movs	r0, #3
   27e12:	4770      	bx	lr
   27e14:	2004      	movs	r0, #4
   27e16:	4770      	bx	lr
   27e18:	2005      	movs	r0, #5
   27e1a:	4770      	bx	lr
   27e1c:	2006      	movs	r0, #6
   27e1e:	4770      	bx	lr
   27e20:	2007      	movs	r0, #7
   27e22:	4770      	bx	lr
   27e24:	20022940 	.word	0x20022940

00027e28 <interface_socket_from_handle_get>:
   27e28:	2808      	cmp	r0, #8
   27e2a:	d807      	bhi.n	27e3c <interface_socket_from_handle_get+0x14>
   27e2c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   27e30:	4b03      	ldr	r3, [pc, #12]	; (27e40 <interface_socket_from_handle_get+0x18>)
   27e32:	0080      	lsls	r0, r0, #2
   27e34:	581a      	ldr	r2, [r3, r0]
   27e36:	b10a      	cbz	r2, 27e3c <interface_socket_from_handle_get+0x14>
   27e38:	4418      	add	r0, r3
   27e3a:	4770      	bx	lr
   27e3c:	2000      	movs	r0, #0
   27e3e:	4770      	bx	lr
   27e40:	20022940 	.word	0x20022940

00027e44 <interface_socket_event_get>:
   27e44:	b119      	cbz	r1, 27e4e <interface_socket_event_get+0xa>
   27e46:	2808      	cmp	r0, #8
   27e48:	d902      	bls.n	27e50 <interface_socket_event_get+0xc>
   27e4a:	2310      	movs	r3, #16
   27e4c:	600b      	str	r3, [r1, #0]
   27e4e:	4770      	bx	lr
   27e50:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   27e54:	4b07      	ldr	r3, [pc, #28]	; (27e74 <interface_socket_event_get+0x30>)
   27e56:	0080      	lsls	r0, r0, #2
   27e58:	581a      	ldr	r2, [r3, r0]
   27e5a:	2a00      	cmp	r2, #0
   27e5c:	d0f5      	beq.n	27e4a <interface_socket_event_get+0x6>
   27e5e:	581b      	ldr	r3, [r3, r0]
   27e60:	0c1b      	lsrs	r3, r3, #16
   27e62:	f003 020a 	and.w	r2, r3, #10
   27e66:	2a0a      	cmp	r2, #10
   27e68:	bf14      	ite	ne
   27e6a:	f003 030f 	andne.w	r3, r3, #15
   27e6e:	f003 030d 	andeq.w	r3, r3, #13
   27e72:	e7eb      	b.n	27e4c <interface_socket_event_get+0x8>
   27e74:	20022940 	.word	0x20022940

00027e78 <interface_socket_setopt>:
   27e78:	2808      	cmp	r0, #8
   27e7a:	b538      	push	{r3, r4, r5, lr}
   27e7c:	d82d      	bhi.n	27eda <interface_socket_setopt+0x62>
   27e7e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   27e82:	4c1c      	ldr	r4, [pc, #112]	; (27ef4 <interface_socket_setopt+0x7c>)
   27e84:	0080      	lsls	r0, r0, #2
   27e86:	461d      	mov	r5, r3
   27e88:	5823      	ldr	r3, [r4, r0]
   27e8a:	b333      	cbz	r3, 27eda <interface_socket_setopt+0x62>
   27e8c:	2901      	cmp	r1, #1
   27e8e:	d11e      	bne.n	27ece <interface_socket_setopt+0x56>
   27e90:	2a14      	cmp	r2, #20
   27e92:	d11c      	bne.n	27ece <interface_socket_setopt+0x56>
   27e94:	b1ad      	cbz	r5, 27ec2 <interface_socket_setopt+0x4a>
   27e96:	9b04      	ldr	r3, [sp, #16]
   27e98:	2b08      	cmp	r3, #8
   27e9a:	d112      	bne.n	27ec2 <interface_socket_setopt+0x4a>
   27e9c:	686a      	ldr	r2, [r5, #4]
   27e9e:	4b16      	ldr	r3, [pc, #88]	; (27ef8 <interface_socket_setopt+0x80>)
   27ea0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   27ea4:	fba3 3202 	umull	r3, r2, r3, r2
   27ea8:	2300      	movs	r3, #0
   27eaa:	682d      	ldr	r5, [r5, #0]
   27eac:	0992      	lsrs	r2, r2, #6
   27eae:	fbe1 2305 	umlal	r2, r3, r1, r5
   27eb2:	2b01      	cmp	r3, #1
   27eb4:	bf08      	it	eq
   27eb6:	2a00      	cmpeq	r2, #0
   27eb8:	d215      	bcs.n	27ee6 <interface_socket_setopt+0x6e>
   27eba:	4420      	add	r0, r4
   27ebc:	6202      	str	r2, [r0, #32]
   27ebe:	2000      	movs	r0, #0
   27ec0:	bd38      	pop	{r3, r4, r5, pc}
   27ec2:	2016      	movs	r0, #22
   27ec4:	f7f8 fd92 	bl	209ec <bsd_os_errno_set>
   27ec8:	f04f 30ff 	mov.w	r0, #4294967295
   27ecc:	bd38      	pop	{r3, r4, r5, pc}
   27ece:	202a      	movs	r0, #42	; 0x2a
   27ed0:	f7f8 fd8c 	bl	209ec <bsd_os_errno_set>
   27ed4:	f04f 30ff 	mov.w	r0, #4294967295
   27ed8:	bd38      	pop	{r3, r4, r5, pc}
   27eda:	2009      	movs	r0, #9
   27edc:	f7f8 fd86 	bl	209ec <bsd_os_errno_set>
   27ee0:	f04f 30ff 	mov.w	r0, #4294967295
   27ee4:	bd38      	pop	{r3, r4, r5, pc}
   27ee6:	2025      	movs	r0, #37	; 0x25
   27ee8:	f7f8 fd80 	bl	209ec <bsd_os_errno_set>
   27eec:	f04f 30ff 	mov.w	r0, #4294967295
   27ef0:	bd38      	pop	{r3, r4, r5, pc}
   27ef2:	bf00      	nop
   27ef4:	20022940 	.word	0x20022940
   27ef8:	10624dd3 	.word	0x10624dd3

00027efc <interface_socket_getopt>:
   27efc:	b570      	push	{r4, r5, r6, lr}
   27efe:	2808      	cmp	r0, #8
   27f00:	9d04      	ldr	r5, [sp, #16]
   27f02:	d821      	bhi.n	27f48 <interface_socket_getopt+0x4c>
   27f04:	4c13      	ldr	r4, [pc, #76]	; (27f54 <interface_socket_getopt+0x58>)
   27f06:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   27f0a:	0080      	lsls	r0, r0, #2
   27f0c:	5826      	ldr	r6, [r4, r0]
   27f0e:	4404      	add	r4, r0
   27f10:	b1d6      	cbz	r6, 27f48 <interface_socket_getopt+0x4c>
   27f12:	2901      	cmp	r1, #1
   27f14:	d112      	bne.n	27f3c <interface_socket_getopt+0x40>
   27f16:	2a04      	cmp	r2, #4
   27f18:	d110      	bne.n	27f3c <interface_socket_getopt+0x40>
   27f1a:	b14b      	cbz	r3, 27f30 <interface_socket_getopt+0x34>
   27f1c:	b145      	cbz	r5, 27f30 <interface_socket_getopt+0x34>
   27f1e:	682a      	ldr	r2, [r5, #0]
   27f20:	2a04      	cmp	r2, #4
   27f22:	d105      	bne.n	27f30 <interface_socket_getopt+0x34>
   27f24:	2200      	movs	r2, #0
   27f26:	6861      	ldr	r1, [r4, #4]
   27f28:	4610      	mov	r0, r2
   27f2a:	6019      	str	r1, [r3, #0]
   27f2c:	6062      	str	r2, [r4, #4]
   27f2e:	bd70      	pop	{r4, r5, r6, pc}
   27f30:	2016      	movs	r0, #22
   27f32:	f7f8 fd5b 	bl	209ec <bsd_os_errno_set>
   27f36:	f04f 30ff 	mov.w	r0, #4294967295
   27f3a:	bd70      	pop	{r4, r5, r6, pc}
   27f3c:	202a      	movs	r0, #42	; 0x2a
   27f3e:	f7f8 fd55 	bl	209ec <bsd_os_errno_set>
   27f42:	f04f 30ff 	mov.w	r0, #4294967295
   27f46:	bd70      	pop	{r4, r5, r6, pc}
   27f48:	2009      	movs	r0, #9
   27f4a:	f7f8 fd4f 	bl	209ec <bsd_os_errno_set>
   27f4e:	f04f 30ff 	mov.w	r0, #4294967295
   27f52:	bd70      	pop	{r4, r5, r6, pc}
   27f54:	20022940 	.word	0x20022940

00027f58 <interface_socket_fcntl>:
   27f58:	2808      	cmp	r0, #8
   27f5a:	b510      	push	{r4, lr}
   27f5c:	d818      	bhi.n	27f90 <interface_socket_fcntl+0x38>
   27f5e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   27f62:	4c11      	ldr	r4, [pc, #68]	; (27fa8 <interface_socket_fcntl+0x50>)
   27f64:	0083      	lsls	r3, r0, #2
   27f66:	58e0      	ldr	r0, [r4, r3]
   27f68:	b190      	cbz	r0, 27f90 <interface_socket_fcntl+0x38>
   27f6a:	2901      	cmp	r1, #1
   27f6c:	d005      	beq.n	27f7a <interface_socket_fcntl+0x22>
   27f6e:	2902      	cmp	r1, #2
   27f70:	d114      	bne.n	27f9c <interface_socket_fcntl+0x44>
   27f72:	58e0      	ldr	r0, [r4, r3]
   27f74:	f3c0 7000 	ubfx	r0, r0, #28, #1
   27f78:	bd10      	pop	{r4, pc}
   27f7a:	f012 0001 	ands.w	r0, r2, #1
   27f7e:	58e2      	ldr	r2, [r4, r3]
   27f80:	bf1a      	itte	ne
   27f82:	2000      	movne	r0, #0
   27f84:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   27f88:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   27f8c:	50e2      	str	r2, [r4, r3]
   27f8e:	bd10      	pop	{r4, pc}
   27f90:	2009      	movs	r0, #9
   27f92:	f7f8 fd2b 	bl	209ec <bsd_os_errno_set>
   27f96:	f04f 30ff 	mov.w	r0, #4294967295
   27f9a:	bd10      	pop	{r4, pc}
   27f9c:	2016      	movs	r0, #22
   27f9e:	f7f8 fd25 	bl	209ec <bsd_os_errno_set>
   27fa2:	f04f 30ff 	mov.w	r0, #4294967295
   27fa6:	bd10      	pop	{r4, pc}
   27fa8:	20022940 	.word	0x20022940

00027fac <bsd_os_application_irq_handler>:
   27fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27fb0:	4c33      	ldr	r4, [pc, #204]	; (28080 <bsd_os_application_irq_handler+0xd4>)
   27fb2:	f7f8 fe1b 	bl	20bec <bsd_os_application_irq_clear>
   27fb6:	f04f 0803 	mov.w	r8, #3
   27fba:	4d32      	ldr	r5, [pc, #200]	; (28084 <bsd_os_application_irq_handler+0xd8>)
   27fbc:	4f32      	ldr	r7, [pc, #200]	; (28088 <bsd_os_application_irq_handler+0xdc>)
   27fbe:	f104 0680 	add.w	r6, r4, #128	; 0x80
   27fc2:	e004      	b.n	27fce <bsd_os_application_irq_handler+0x22>
   27fc4:	2b04      	cmp	r3, #4
   27fc6:	d006      	beq.n	27fd6 <bsd_os_application_irq_handler+0x2a>
   27fc8:	3408      	adds	r4, #8
   27fca:	42b4      	cmp	r4, r6
   27fcc:	d03b      	beq.n	28046 <bsd_os_application_irq_handler+0x9a>
   27fce:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   27fd2:	2b02      	cmp	r3, #2
   27fd4:	d1f6      	bne.n	27fc4 <bsd_os_application_irq_handler+0x18>
   27fd6:	6820      	ldr	r0, [r4, #0]
   27fd8:	882a      	ldrh	r2, [r5, #0]
   27fda:	6803      	ldr	r3, [r0, #0]
   27fdc:	b29b      	uxth	r3, r3
   27fde:	429a      	cmp	r2, r3
   27fe0:	d033      	beq.n	2804a <bsd_os_application_irq_handler+0x9e>
   27fe2:	8a2a      	ldrh	r2, [r5, #16]
   27fe4:	429a      	cmp	r2, r3
   27fe6:	d032      	beq.n	2804e <bsd_os_application_irq_handler+0xa2>
   27fe8:	8c2a      	ldrh	r2, [r5, #32]
   27fea:	429a      	cmp	r2, r3
   27fec:	d031      	beq.n	28052 <bsd_os_application_irq_handler+0xa6>
   27fee:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   27ff0:	429a      	cmp	r2, r3
   27ff2:	d030      	beq.n	28056 <bsd_os_application_irq_handler+0xaa>
   27ff4:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   27ff8:	429a      	cmp	r2, r3
   27ffa:	d036      	beq.n	2806a <bsd_os_application_irq_handler+0xbe>
   27ffc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   28000:	429a      	cmp	r2, r3
   28002:	d034      	beq.n	2806e <bsd_os_application_irq_handler+0xc2>
   28004:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   28008:	429a      	cmp	r2, r3
   2800a:	d032      	beq.n	28072 <bsd_os_application_irq_handler+0xc6>
   2800c:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   28010:	429a      	cmp	r2, r3
   28012:	d030      	beq.n	28076 <bsd_os_application_irq_handler+0xca>
   28014:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   28018:	429a      	cmp	r2, r3
   2801a:	d02e      	beq.n	2807a <bsd_os_application_irq_handler+0xce>
   2801c:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   28020:	429a      	cmp	r2, r3
   28022:	bf08      	it	eq
   28024:	2309      	moveq	r3, #9
   28026:	d1cf      	bne.n	27fc8 <bsd_os_application_irq_handler+0x1c>
   28028:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   2802c:	685a      	ldr	r2, [r3, #4]
   2802e:	68d9      	ldr	r1, [r3, #12]
   28030:	4790      	blx	r2
   28032:	b990      	cbnz	r0, 2805a <bsd_os_application_irq_handler+0xae>
   28034:	2201      	movs	r2, #1
   28036:	6820      	ldr	r0, [r4, #0]
   28038:	f804 2c04 	strb.w	r2, [r4, #-4]
   2803c:	68fb      	ldr	r3, [r7, #12]
   2803e:	3408      	adds	r4, #8
   28040:	4798      	blx	r3
   28042:	42b4      	cmp	r4, r6
   28044:	d1c3      	bne.n	27fce <bsd_os_application_irq_handler+0x22>
   28046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2804a:	2300      	movs	r3, #0
   2804c:	e7ec      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   2804e:	2301      	movs	r3, #1
   28050:	e7ea      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   28052:	2302      	movs	r3, #2
   28054:	e7e8      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   28056:	2303      	movs	r3, #3
   28058:	e7e6      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   2805a:	2802      	cmp	r0, #2
   2805c:	bf0a      	itet	eq
   2805e:	2304      	moveq	r3, #4
   28060:	f804 8c04 	strbne.w	r8, [r4, #-4]
   28064:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   28068:	e7ae      	b.n	27fc8 <bsd_os_application_irq_handler+0x1c>
   2806a:	2304      	movs	r3, #4
   2806c:	e7dc      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   2806e:	2305      	movs	r3, #5
   28070:	e7da      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   28072:	2306      	movs	r3, #6
   28074:	e7d8      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   28076:	2307      	movs	r3, #7
   28078:	e7d6      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   2807a:	2308      	movs	r3, #8
   2807c:	e7d4      	b.n	28028 <bsd_os_application_irq_handler+0x7c>
   2807e:	bf00      	nop
   28080:	200209b4 	.word	0x200209b4
   28084:	20020878 	.word	0x20020878
   28088:	20020918 	.word	0x20020918

0002808c <rpc_framework_init>:
   2808c:	b508      	push	{r3, lr}
   2808e:	22a0      	movs	r2, #160	; 0xa0
   28090:	2100      	movs	r1, #0
   28092:	4802      	ldr	r0, [pc, #8]	; (2809c <rpc_framework_init+0x10>)
   28094:	f007 fecc 	bl	2fe30 <memset>
   28098:	2000      	movs	r0, #0
   2809a:	bd08      	pop	{r3, pc}
   2809c:	20020878 	.word	0x20020878

000280a0 <rpc_client_register>:
   280a0:	8803      	ldrh	r3, [r0, #0]
   280a2:	2b00      	cmp	r3, #0
   280a4:	d045      	beq.n	28132 <rpc_client_register+0x92>
   280a6:	6842      	ldr	r2, [r0, #4]
   280a8:	4601      	mov	r1, r0
   280aa:	2a00      	cmp	r2, #0
   280ac:	d050      	beq.n	28150 <rpc_client_register+0xb0>
   280ae:	4a30      	ldr	r2, [pc, #192]	; (28170 <rpc_client_register+0xd0>)
   280b0:	8810      	ldrh	r0, [r2, #0]
   280b2:	4283      	cmp	r3, r0
   280b4:	d03d      	beq.n	28132 <rpc_client_register+0x92>
   280b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   280ba:	8a14      	ldrh	r4, [r2, #16]
   280bc:	42a3      	cmp	r3, r4
   280be:	d035      	beq.n	2812c <rpc_client_register+0x8c>
   280c0:	8c15      	ldrh	r5, [r2, #32]
   280c2:	42ab      	cmp	r3, r5
   280c4:	d032      	beq.n	2812c <rpc_client_register+0x8c>
   280c6:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   280c8:	42b3      	cmp	r3, r6
   280ca:	d02f      	beq.n	2812c <rpc_client_register+0x8c>
   280cc:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   280d0:	42bb      	cmp	r3, r7
   280d2:	d02b      	beq.n	2812c <rpc_client_register+0x8c>
   280d4:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   280d8:	4563      	cmp	r3, ip
   280da:	d027      	beq.n	2812c <rpc_client_register+0x8c>
   280dc:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   280e0:	4573      	cmp	r3, lr
   280e2:	d023      	beq.n	2812c <rpc_client_register+0x8c>
   280e4:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   280e8:	4543      	cmp	r3, r8
   280ea:	d01f      	beq.n	2812c <rpc_client_register+0x8c>
   280ec:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   280f0:	454b      	cmp	r3, r9
   280f2:	d01b      	beq.n	2812c <rpc_client_register+0x8c>
   280f4:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   280f8:	4553      	cmp	r3, sl
   280fa:	d017      	beq.n	2812c <rpc_client_register+0x8c>
   280fc:	b1e0      	cbz	r0, 28138 <rpc_client_register+0x98>
   280fe:	b35c      	cbz	r4, 28158 <rpc_client_register+0xb8>
   28100:	b365      	cbz	r5, 2815c <rpc_client_register+0xbc>
   28102:	b36e      	cbz	r6, 28160 <rpc_client_register+0xc0>
   28104:	b377      	cbz	r7, 28164 <rpc_client_register+0xc4>
   28106:	f1bc 0f00 	cmp.w	ip, #0
   2810a:	d02d      	beq.n	28168 <rpc_client_register+0xc8>
   2810c:	f1be 0f00 	cmp.w	lr, #0
   28110:	d020      	beq.n	28154 <rpc_client_register+0xb4>
   28112:	f1b8 0f00 	cmp.w	r8, #0
   28116:	d029      	beq.n	2816c <rpc_client_register+0xcc>
   28118:	f1b9 0f00 	cmp.w	r9, #0
   2811c:	d00b      	beq.n	28136 <rpc_client_register+0x96>
   2811e:	2009      	movs	r0, #9
   28120:	f1ba 0f00 	cmp.w	sl, #0
   28124:	d008      	beq.n	28138 <rpc_client_register+0x98>
   28126:	2004      	movs	r0, #4
   28128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2812c:	2007      	movs	r0, #7
   2812e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28132:	2007      	movs	r0, #7
   28134:	4770      	bx	lr
   28136:	2008      	movs	r0, #8
   28138:	0100      	lsls	r0, r0, #4
   2813a:	5213      	strh	r3, [r2, r0]
   2813c:	684b      	ldr	r3, [r1, #4]
   2813e:	4402      	add	r2, r0
   28140:	6053      	str	r3, [r2, #4]
   28142:	688b      	ldr	r3, [r1, #8]
   28144:	2000      	movs	r0, #0
   28146:	6093      	str	r3, [r2, #8]
   28148:	68cb      	ldr	r3, [r1, #12]
   2814a:	60d3      	str	r3, [r2, #12]
   2814c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28150:	200e      	movs	r0, #14
   28152:	4770      	bx	lr
   28154:	2006      	movs	r0, #6
   28156:	e7ef      	b.n	28138 <rpc_client_register+0x98>
   28158:	2001      	movs	r0, #1
   2815a:	e7ed      	b.n	28138 <rpc_client_register+0x98>
   2815c:	2002      	movs	r0, #2
   2815e:	e7eb      	b.n	28138 <rpc_client_register+0x98>
   28160:	2003      	movs	r0, #3
   28162:	e7e9      	b.n	28138 <rpc_client_register+0x98>
   28164:	2004      	movs	r0, #4
   28166:	e7e7      	b.n	28138 <rpc_client_register+0x98>
   28168:	2005      	movs	r0, #5
   2816a:	e7e5      	b.n	28138 <rpc_client_register+0x98>
   2816c:	2007      	movs	r0, #7
   2816e:	e7e3      	b.n	28138 <rpc_client_register+0x98>
   28170:	20020878 	.word	0x20020878

00028174 <rpc_transport_input>:
   28174:	b538      	push	{r3, r4, r5, lr}
   28176:	4a82      	ldr	r2, [pc, #520]	; (28380 <rpc_transport_input+0x20c>)
   28178:	680b      	ldr	r3, [r1, #0]
   2817a:	8810      	ldrh	r0, [r2, #0]
   2817c:	b29b      	uxth	r3, r3
   2817e:	4298      	cmp	r0, r3
   28180:	d027      	beq.n	281d2 <rpc_transport_input+0x5e>
   28182:	8a10      	ldrh	r0, [r2, #16]
   28184:	4298      	cmp	r0, r3
   28186:	d024      	beq.n	281d2 <rpc_transport_input+0x5e>
   28188:	8c10      	ldrh	r0, [r2, #32]
   2818a:	4298      	cmp	r0, r3
   2818c:	d021      	beq.n	281d2 <rpc_transport_input+0x5e>
   2818e:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   28190:	4298      	cmp	r0, r3
   28192:	d01e      	beq.n	281d2 <rpc_transport_input+0x5e>
   28194:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   28198:	4298      	cmp	r0, r3
   2819a:	d01a      	beq.n	281d2 <rpc_transport_input+0x5e>
   2819c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   281a0:	4298      	cmp	r0, r3
   281a2:	d016      	beq.n	281d2 <rpc_transport_input+0x5e>
   281a4:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   281a8:	4298      	cmp	r0, r3
   281aa:	d012      	beq.n	281d2 <rpc_transport_input+0x5e>
   281ac:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   281b0:	4298      	cmp	r0, r3
   281b2:	d00e      	beq.n	281d2 <rpc_transport_input+0x5e>
   281b4:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   281b8:	4298      	cmp	r0, r3
   281ba:	d00a      	beq.n	281d2 <rpc_transport_input+0x5e>
   281bc:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   281c0:	429a      	cmp	r2, r3
   281c2:	d006      	beq.n	281d2 <rpc_transport_input+0x5e>
   281c4:	6888      	ldr	r0, [r1, #8]
   281c6:	b118      	cbz	r0, 281d0 <rpc_transport_input+0x5c>
   281c8:	4b6e      	ldr	r3, [pc, #440]	; (28384 <rpc_transport_input+0x210>)
   281ca:	691b      	ldr	r3, [r3, #16]
   281cc:	4798      	blx	r3
   281ce:	2000      	movs	r0, #0
   281d0:	bd38      	pop	{r3, r4, r5, pc}
   281d2:	6888      	ldr	r0, [r1, #8]
   281d4:	2800      	cmp	r0, #0
   281d6:	f000 8098 	beq.w	2830a <rpc_transport_input+0x196>
   281da:	4a6b      	ldr	r2, [pc, #428]	; (28388 <rpc_transport_input+0x214>)
   281dc:	6814      	ldr	r4, [r2, #0]
   281de:	2c00      	cmp	r4, #0
   281e0:	d03c      	beq.n	2825c <rpc_transport_input+0xe8>
   281e2:	6894      	ldr	r4, [r2, #8]
   281e4:	2c00      	cmp	r4, #0
   281e6:	f000 809a 	beq.w	2831e <rpc_transport_input+0x1aa>
   281ea:	6914      	ldr	r4, [r2, #16]
   281ec:	2c00      	cmp	r4, #0
   281ee:	f000 809a 	beq.w	28326 <rpc_transport_input+0x1b2>
   281f2:	6994      	ldr	r4, [r2, #24]
   281f4:	2c00      	cmp	r4, #0
   281f6:	f000 809a 	beq.w	2832e <rpc_transport_input+0x1ba>
   281fa:	6a14      	ldr	r4, [r2, #32]
   281fc:	2c00      	cmp	r4, #0
   281fe:	f000 809a 	beq.w	28336 <rpc_transport_input+0x1c2>
   28202:	6a94      	ldr	r4, [r2, #40]	; 0x28
   28204:	2c00      	cmp	r4, #0
   28206:	f000 8084 	beq.w	28312 <rpc_transport_input+0x19e>
   2820a:	6b14      	ldr	r4, [r2, #48]	; 0x30
   2820c:	2c00      	cmp	r4, #0
   2820e:	f000 8098 	beq.w	28342 <rpc_transport_input+0x1ce>
   28212:	6b94      	ldr	r4, [r2, #56]	; 0x38
   28214:	2c00      	cmp	r4, #0
   28216:	f000 8096 	beq.w	28346 <rpc_transport_input+0x1d2>
   2821a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   2821c:	2c00      	cmp	r4, #0
   2821e:	f000 8096 	beq.w	2834e <rpc_transport_input+0x1da>
   28222:	6c94      	ldr	r4, [r2, #72]	; 0x48
   28224:	2c00      	cmp	r4, #0
   28226:	f000 8096 	beq.w	28356 <rpc_transport_input+0x1e2>
   2822a:	6d14      	ldr	r4, [r2, #80]	; 0x50
   2822c:	2c00      	cmp	r4, #0
   2822e:	f000 8096 	beq.w	2835e <rpc_transport_input+0x1ea>
   28232:	6d94      	ldr	r4, [r2, #88]	; 0x58
   28234:	2c00      	cmp	r4, #0
   28236:	f000 8098 	beq.w	2836a <rpc_transport_input+0x1f6>
   2823a:	6e14      	ldr	r4, [r2, #96]	; 0x60
   2823c:	2c00      	cmp	r4, #0
   2823e:	f000 8098 	beq.w	28372 <rpc_transport_input+0x1fe>
   28242:	6e94      	ldr	r4, [r2, #104]	; 0x68
   28244:	2c00      	cmp	r4, #0
   28246:	f000 8096 	beq.w	28376 <rpc_transport_input+0x202>
   2824a:	6f14      	ldr	r4, [r2, #112]	; 0x70
   2824c:	2c00      	cmp	r4, #0
   2824e:	f000 8094 	beq.w	2837a <rpc_transport_input+0x206>
   28252:	6f94      	ldr	r4, [r2, #120]	; 0x78
   28254:	b10c      	cbz	r4, 2825a <rpc_transport_input+0xe6>
   28256:	2001      	movs	r0, #1
   28258:	bd38      	pop	{r3, r4, r5, pc}
   2825a:	240f      	movs	r4, #15
   2825c:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   28260:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   28264:	80ab      	strh	r3, [r5, #4]
   28266:	4b49      	ldr	r3, [pc, #292]	; (2838c <rpc_transport_input+0x218>)
   28268:	781a      	ldrb	r2, [r3, #0]
   2826a:	2a01      	cmp	r2, #1
   2826c:	d053      	beq.n	28316 <rpc_transport_input+0x1a2>
   2826e:	7a1a      	ldrb	r2, [r3, #8]
   28270:	2a01      	cmp	r2, #1
   28272:	d041      	beq.n	282f8 <rpc_transport_input+0x184>
   28274:	7c1a      	ldrb	r2, [r3, #16]
   28276:	2a01      	cmp	r2, #1
   28278:	d04f      	beq.n	2831a <rpc_transport_input+0x1a6>
   2827a:	7e1a      	ldrb	r2, [r3, #24]
   2827c:	2a01      	cmp	r2, #1
   2827e:	d050      	beq.n	28322 <rpc_transport_input+0x1ae>
   28280:	f893 2020 	ldrb.w	r2, [r3, #32]
   28284:	2a01      	cmp	r2, #1
   28286:	d050      	beq.n	2832a <rpc_transport_input+0x1b6>
   28288:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2828c:	2a01      	cmp	r2, #1
   2828e:	d050      	beq.n	28332 <rpc_transport_input+0x1be>
   28290:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   28294:	2a01      	cmp	r2, #1
   28296:	d03a      	beq.n	2830e <rpc_transport_input+0x19a>
   28298:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2829c:	2a01      	cmp	r2, #1
   2829e:	d04c      	beq.n	2833a <rpc_transport_input+0x1c6>
   282a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   282a4:	2a01      	cmp	r2, #1
   282a6:	d04a      	beq.n	2833e <rpc_transport_input+0x1ca>
   282a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   282ac:	2a01      	cmp	r2, #1
   282ae:	d04c      	beq.n	2834a <rpc_transport_input+0x1d6>
   282b0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   282b4:	2a01      	cmp	r2, #1
   282b6:	d04c      	beq.n	28352 <rpc_transport_input+0x1de>
   282b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   282bc:	2a01      	cmp	r2, #1
   282be:	d04c      	beq.n	2835a <rpc_transport_input+0x1e6>
   282c0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   282c4:	2a01      	cmp	r2, #1
   282c6:	d04c      	beq.n	28362 <rpc_transport_input+0x1ee>
   282c8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   282cc:	2a01      	cmp	r2, #1
   282ce:	d04a      	beq.n	28366 <rpc_transport_input+0x1f2>
   282d0:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   282d4:	2a01      	cmp	r2, #1
   282d6:	d04a      	beq.n	2836e <rpc_transport_input+0x1fa>
   282d8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   282dc:	2a01      	cmp	r2, #1
   282de:	d00a      	beq.n	282f6 <rpc_transport_input+0x182>
   282e0:	2c10      	cmp	r4, #16
   282e2:	d0b8      	beq.n	28256 <rpc_transport_input+0xe2>
   282e4:	2200      	movs	r2, #0
   282e6:	4b28      	ldr	r3, [pc, #160]	; (28388 <rpc_transport_input+0x214>)
   282e8:	2001      	movs	r0, #1
   282ea:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   282ee:	808a      	strh	r2, [r1, #4]
   282f0:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   282f4:	bd38      	pop	{r3, r4, r5, pc}
   282f6:	220f      	movs	r2, #15
   282f8:	2402      	movs	r4, #2
   282fa:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   282fe:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   28302:	6041      	str	r1, [r0, #4]
   28304:	f7f8 fc6a 	bl	20bdc <bsd_os_application_irq_set>
   28308:	e7a5      	b.n	28256 <rpc_transport_input+0xe2>
   2830a:	2410      	movs	r4, #16
   2830c:	e7ab      	b.n	28266 <rpc_transport_input+0xf2>
   2830e:	2206      	movs	r2, #6
   28310:	e7f2      	b.n	282f8 <rpc_transport_input+0x184>
   28312:	2405      	movs	r4, #5
   28314:	e7a2      	b.n	2825c <rpc_transport_input+0xe8>
   28316:	2200      	movs	r2, #0
   28318:	e7ee      	b.n	282f8 <rpc_transport_input+0x184>
   2831a:	2202      	movs	r2, #2
   2831c:	e7ec      	b.n	282f8 <rpc_transport_input+0x184>
   2831e:	2401      	movs	r4, #1
   28320:	e79c      	b.n	2825c <rpc_transport_input+0xe8>
   28322:	2203      	movs	r2, #3
   28324:	e7e8      	b.n	282f8 <rpc_transport_input+0x184>
   28326:	2402      	movs	r4, #2
   28328:	e798      	b.n	2825c <rpc_transport_input+0xe8>
   2832a:	2204      	movs	r2, #4
   2832c:	e7e4      	b.n	282f8 <rpc_transport_input+0x184>
   2832e:	2403      	movs	r4, #3
   28330:	e794      	b.n	2825c <rpc_transport_input+0xe8>
   28332:	2205      	movs	r2, #5
   28334:	e7e0      	b.n	282f8 <rpc_transport_input+0x184>
   28336:	2404      	movs	r4, #4
   28338:	e790      	b.n	2825c <rpc_transport_input+0xe8>
   2833a:	2207      	movs	r2, #7
   2833c:	e7dc      	b.n	282f8 <rpc_transport_input+0x184>
   2833e:	2208      	movs	r2, #8
   28340:	e7da      	b.n	282f8 <rpc_transport_input+0x184>
   28342:	2406      	movs	r4, #6
   28344:	e78a      	b.n	2825c <rpc_transport_input+0xe8>
   28346:	2407      	movs	r4, #7
   28348:	e788      	b.n	2825c <rpc_transport_input+0xe8>
   2834a:	2209      	movs	r2, #9
   2834c:	e7d4      	b.n	282f8 <rpc_transport_input+0x184>
   2834e:	2408      	movs	r4, #8
   28350:	e784      	b.n	2825c <rpc_transport_input+0xe8>
   28352:	220a      	movs	r2, #10
   28354:	e7d0      	b.n	282f8 <rpc_transport_input+0x184>
   28356:	2409      	movs	r4, #9
   28358:	e780      	b.n	2825c <rpc_transport_input+0xe8>
   2835a:	220b      	movs	r2, #11
   2835c:	e7cc      	b.n	282f8 <rpc_transport_input+0x184>
   2835e:	240a      	movs	r4, #10
   28360:	e77c      	b.n	2825c <rpc_transport_input+0xe8>
   28362:	220c      	movs	r2, #12
   28364:	e7c8      	b.n	282f8 <rpc_transport_input+0x184>
   28366:	220d      	movs	r2, #13
   28368:	e7c6      	b.n	282f8 <rpc_transport_input+0x184>
   2836a:	240b      	movs	r4, #11
   2836c:	e776      	b.n	2825c <rpc_transport_input+0xe8>
   2836e:	220e      	movs	r2, #14
   28370:	e7c2      	b.n	282f8 <rpc_transport_input+0x184>
   28372:	240c      	movs	r4, #12
   28374:	e772      	b.n	2825c <rpc_transport_input+0xe8>
   28376:	240d      	movs	r4, #13
   28378:	e770      	b.n	2825c <rpc_transport_input+0xe8>
   2837a:	240e      	movs	r4, #14
   2837c:	e76e      	b.n	2825c <rpc_transport_input+0xe8>
   2837e:	bf00      	nop
   28380:	20020878 	.word	0x20020878
   28384:	20020918 	.word	0x20020918
   28388:	20020930 	.word	0x20020930
   2838c:	200209b0 	.word	0x200209b0

00028390 <rpc_transport_register>:
   28390:	b4f0      	push	{r4, r5, r6, r7}
   28392:	2900      	cmp	r1, #0
   28394:	d052      	beq.n	2843c <rpc_transport_register+0xac>
   28396:	2800      	cmp	r0, #0
   28398:	d050      	beq.n	2843c <rpc_transport_register+0xac>
   2839a:	6883      	ldr	r3, [r0, #8]
   2839c:	2b00      	cmp	r3, #0
   2839e:	d04d      	beq.n	2843c <rpc_transport_register+0xac>
   283a0:	6903      	ldr	r3, [r0, #16]
   283a2:	2b00      	cmp	r3, #0
   283a4:	d04a      	beq.n	2843c <rpc_transport_register+0xac>
   283a6:	6843      	ldr	r3, [r0, #4]
   283a8:	2b00      	cmp	r3, #0
   283aa:	d047      	beq.n	2843c <rpc_transport_register+0xac>
   283ac:	68c3      	ldr	r3, [r0, #12]
   283ae:	2b00      	cmp	r3, #0
   283b0:	d044      	beq.n	2843c <rpc_transport_register+0xac>
   283b2:	6803      	ldr	r3, [r0, #0]
   283b4:	2b00      	cmp	r3, #0
   283b6:	d041      	beq.n	2843c <rpc_transport_register+0xac>
   283b8:	6943      	ldr	r3, [r0, #20]
   283ba:	2b00      	cmp	r3, #0
   283bc:	d03e      	beq.n	2843c <rpc_transport_register+0xac>
   283be:	2601      	movs	r6, #1
   283c0:	2500      	movs	r5, #0
   283c2:	4604      	mov	r4, r0
   283c4:	460f      	mov	r7, r1
   283c6:	4a1f      	ldr	r2, [pc, #124]	; (28444 <rpc_transport_register+0xb4>)
   283c8:	4b1f      	ldr	r3, [pc, #124]	; (28448 <rpc_transport_register+0xb8>)
   283ca:	f8df c080 	ldr.w	ip, [pc, #128]	; 2844c <rpc_transport_register+0xbc>
   283ce:	7416      	strb	r6, [r2, #16]
   283d0:	7616      	strb	r6, [r2, #24]
   283d2:	f882 6020 	strb.w	r6, [r2, #32]
   283d6:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   283da:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   283de:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   283e2:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   283e6:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   283ea:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   283ee:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   283f2:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   283f6:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   283fa:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   283fe:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   28402:	611d      	str	r5, [r3, #16]
   28404:	619d      	str	r5, [r3, #24]
   28406:	621d      	str	r5, [r3, #32]
   28408:	629d      	str	r5, [r3, #40]	; 0x28
   2840a:	631d      	str	r5, [r3, #48]	; 0x30
   2840c:	639d      	str	r5, [r3, #56]	; 0x38
   2840e:	641d      	str	r5, [r3, #64]	; 0x40
   28410:	649d      	str	r5, [r3, #72]	; 0x48
   28412:	651d      	str	r5, [r3, #80]	; 0x50
   28414:	659d      	str	r5, [r3, #88]	; 0x58
   28416:	661d      	str	r5, [r3, #96]	; 0x60
   28418:	669d      	str	r5, [r3, #104]	; 0x68
   2841a:	671d      	str	r5, [r3, #112]	; 0x70
   2841c:	679d      	str	r5, [r3, #120]	; 0x78
   2841e:	7016      	strb	r6, [r2, #0]
   28420:	7216      	strb	r6, [r2, #8]
   28422:	601d      	str	r5, [r3, #0]
   28424:	609d      	str	r5, [r3, #8]
   28426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   28428:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2842c:	e894 0003 	ldmia.w	r4, {r0, r1}
   28430:	e88c 0003 	stmia.w	ip, {r0, r1}
   28434:	603e      	str	r6, [r7, #0]
   28436:	4628      	mov	r0, r5
   28438:	bcf0      	pop	{r4, r5, r6, r7}
   2843a:	4770      	bx	lr
   2843c:	250e      	movs	r5, #14
   2843e:	4628      	mov	r0, r5
   28440:	bcf0      	pop	{r4, r5, r6, r7}
   28442:	4770      	bx	lr
   28444:	200209b0 	.word	0x200209b0
   28448:	20020930 	.word	0x20020930
   2844c:	20020918 	.word	0x20020918

00028450 <rpc_transport_unregister>:
   28450:	2800      	cmp	r0, #0
   28452:	d03a      	beq.n	284ca <rpc_transport_unregister+0x7a>
   28454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28458:	4680      	mov	r8, r0
   2845a:	4c1d      	ldr	r4, [pc, #116]	; (284d0 <rpc_transport_unregister+0x80>)
   2845c:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   28460:	68a3      	ldr	r3, [r4, #8]
   28462:	3410      	adds	r4, #16
   28464:	b103      	cbz	r3, 28468 <rpc_transport_unregister+0x18>
   28466:	4798      	blx	r3
   28468:	42ac      	cmp	r4, r5
   2846a:	d1f9      	bne.n	28460 <rpc_transport_unregister+0x10>
   2846c:	f04f 0901 	mov.w	r9, #1
   28470:	2600      	movs	r6, #0
   28472:	4c18      	ldr	r4, [pc, #96]	; (284d4 <rpc_transport_unregister+0x84>)
   28474:	4d18      	ldr	r5, [pc, #96]	; (284d8 <rpc_transport_unregister+0x88>)
   28476:	f8df a064 	ldr.w	sl, [pc, #100]	; 284dc <rpc_transport_unregister+0x8c>
   2847a:	f104 0780 	add.w	r7, r4, #128	; 0x80
   2847e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   28482:	2b01      	cmp	r3, #1
   28484:	d005      	beq.n	28492 <rpc_transport_unregister+0x42>
   28486:	f8da 300c 	ldr.w	r3, [sl, #12]
   2848a:	6820      	ldr	r0, [r4, #0]
   2848c:	4798      	blx	r3
   2848e:	f804 9c04 	strb.w	r9, [r4, #-4]
   28492:	f855 0c04 	ldr.w	r0, [r5, #-4]
   28496:	3408      	adds	r4, #8
   28498:	b128      	cbz	r0, 284a6 <rpc_transport_unregister+0x56>
   2849a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2849e:	4798      	blx	r3
   284a0:	802e      	strh	r6, [r5, #0]
   284a2:	f845 6c04 	str.w	r6, [r5, #-4]
   284a6:	42bc      	cmp	r4, r7
   284a8:	f105 0508 	add.w	r5, r5, #8
   284ac:	d1e7      	bne.n	2847e <rpc_transport_unregister+0x2e>
   284ae:	f8d8 0000 	ldr.w	r0, [r8]
   284b2:	2218      	movs	r2, #24
   284b4:	3801      	subs	r0, #1
   284b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   284ba:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   284be:	2100      	movs	r1, #0
   284c0:	f007 fcb6 	bl	2fe30 <memset>
   284c4:	2000      	movs	r0, #0
   284c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   284ca:	200e      	movs	r0, #14
   284cc:	4770      	bx	lr
   284ce:	bf00      	nop
   284d0:	20020878 	.word	0x20020878
   284d4:	200209b4 	.word	0x200209b4
   284d8:	20020934 	.word	0x20020934
   284dc:	20020918 	.word	0x20020918

000284e0 <rpc_message_send>:
   284e0:	b168      	cbz	r0, 284fe <rpc_message_send+0x1e>
   284e2:	b171      	cbz	r1, 28502 <rpc_message_send+0x22>
   284e4:	4a09      	ldr	r2, [pc, #36]	; (2850c <rpc_message_send+0x2c>)
   284e6:	6853      	ldr	r3, [r2, #4]
   284e8:	b16b      	cbz	r3, 28506 <rpc_message_send+0x26>
   284ea:	684b      	ldr	r3, [r1, #4]
   284ec:	8008      	strh	r0, [r1, #0]
   284ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   284f2:	f043 0302 	orr.w	r3, r3, #2
   284f6:	6812      	ldr	r2, [r2, #0]
   284f8:	604b      	str	r3, [r1, #4]
   284fa:	4608      	mov	r0, r1
   284fc:	4710      	bx	r2
   284fe:	2007      	movs	r0, #7
   28500:	4770      	bx	lr
   28502:	200e      	movs	r0, #14
   28504:	4770      	bx	lr
   28506:	2008      	movs	r0, #8
   28508:	4770      	bx	lr
   2850a:	bf00      	nop
   2850c:	20020918 	.word	0x20020918

00028510 <rpc_message_alloc>:
   28510:	b35a      	cbz	r2, 2856a <rpc_message_alloc+0x5a>
   28512:	b330      	cbz	r0, 28562 <rpc_message_alloc+0x52>
   28514:	2300      	movs	r3, #0
   28516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2851a:	4f15      	ldr	r7, [pc, #84]	; (28570 <rpc_message_alloc+0x60>)
   2851c:	6013      	str	r3, [r2, #0]
   2851e:	687b      	ldr	r3, [r7, #4]
   28520:	b30b      	cbz	r3, 28566 <rpc_message_alloc+0x56>
   28522:	4615      	mov	r5, r2
   28524:	460c      	mov	r4, r1
   28526:	4606      	mov	r6, r0
   28528:	b959      	cbnz	r1, 28542 <rpc_message_alloc+0x32>
   2852a:	4798      	blx	r3
   2852c:	4603      	mov	r3, r0
   2852e:	b1a8      	cbz	r0, 2855c <rpc_message_alloc+0x4c>
   28530:	46a0      	mov	r8, r4
   28532:	60dc      	str	r4, [r3, #12]
   28534:	f8c3 8008 	str.w	r8, [r3, #8]
   28538:	801e      	strh	r6, [r3, #0]
   2853a:	602b      	str	r3, [r5, #0]
   2853c:	2000      	movs	r0, #0
   2853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28542:	68bb      	ldr	r3, [r7, #8]
   28544:	4608      	mov	r0, r1
   28546:	4798      	blx	r3
   28548:	4680      	mov	r8, r0
   2854a:	b138      	cbz	r0, 2855c <rpc_message_alloc+0x4c>
   2854c:	687b      	ldr	r3, [r7, #4]
   2854e:	4798      	blx	r3
   28550:	4603      	mov	r3, r0
   28552:	2800      	cmp	r0, #0
   28554:	d1ed      	bne.n	28532 <rpc_message_alloc+0x22>
   28556:	693b      	ldr	r3, [r7, #16]
   28558:	4640      	mov	r0, r8
   2855a:	4798      	blx	r3
   2855c:	2004      	movs	r0, #4
   2855e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28562:	2007      	movs	r0, #7
   28564:	4770      	bx	lr
   28566:	2008      	movs	r0, #8
   28568:	e7f9      	b.n	2855e <rpc_message_alloc+0x4e>
   2856a:	200e      	movs	r0, #14
   2856c:	4770      	bx	lr
   2856e:	bf00      	nop
   28570:	20020918 	.word	0x20020918

00028574 <rpc_message_free>:
   28574:	2800      	cmp	r0, #0
   28576:	f000 808c 	beq.w	28692 <rpc_message_free+0x11e>
   2857a:	2900      	cmp	r1, #0
   2857c:	f000 80e9 	beq.w	28752 <rpc_message_free+0x1de>
   28580:	b538      	push	{r3, r4, r5, lr}
   28582:	4a83      	ldr	r2, [pc, #524]	; (28790 <rpc_message_free+0x21c>)
   28584:	6853      	ldr	r3, [r2, #4]
   28586:	2b00      	cmp	r3, #0
   28588:	f000 8085 	beq.w	28696 <rpc_message_free+0x122>
   2858c:	4c81      	ldr	r4, [pc, #516]	; (28794 <rpc_message_free+0x220>)
   2858e:	4608      	mov	r0, r1
   28590:	6863      	ldr	r3, [r4, #4]
   28592:	4299      	cmp	r1, r3
   28594:	f000 8085 	beq.w	286a2 <rpc_message_free+0x12e>
   28598:	68e3      	ldr	r3, [r4, #12]
   2859a:	4298      	cmp	r0, r3
   2859c:	f000 808e 	beq.w	286bc <rpc_message_free+0x148>
   285a0:	6963      	ldr	r3, [r4, #20]
   285a2:	4298      	cmp	r0, r3
   285a4:	f000 8090 	beq.w	286c8 <rpc_message_free+0x154>
   285a8:	69e3      	ldr	r3, [r4, #28]
   285aa:	4298      	cmp	r0, r3
   285ac:	f000 8092 	beq.w	286d4 <rpc_message_free+0x160>
   285b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   285b2:	4298      	cmp	r0, r3
   285b4:	f000 8095 	beq.w	286e2 <rpc_message_free+0x16e>
   285b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   285ba:	4298      	cmp	r0, r3
   285bc:	f000 8098 	beq.w	286f0 <rpc_message_free+0x17c>
   285c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   285c2:	4298      	cmp	r0, r3
   285c4:	f000 809b 	beq.w	286fe <rpc_message_free+0x18a>
   285c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   285ca:	4298      	cmp	r0, r3
   285cc:	f000 809e 	beq.w	2870c <rpc_message_free+0x198>
   285d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   285d2:	4298      	cmp	r0, r3
   285d4:	f000 80a1 	beq.w	2871a <rpc_message_free+0x1a6>
   285d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   285da:	4298      	cmp	r0, r3
   285dc:	f000 80a4 	beq.w	28728 <rpc_message_free+0x1b4>
   285e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   285e2:	4298      	cmp	r0, r3
   285e4:	f000 80a7 	beq.w	28736 <rpc_message_free+0x1c2>
   285e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   285ea:	4298      	cmp	r0, r3
   285ec:	f000 80aa 	beq.w	28744 <rpc_message_free+0x1d0>
   285f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   285f2:	4298      	cmp	r0, r3
   285f4:	f000 80af 	beq.w	28756 <rpc_message_free+0x1e2>
   285f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   285fa:	4298      	cmp	r0, r3
   285fc:	f000 80b2 	beq.w	28764 <rpc_message_free+0x1f0>
   28600:	6f63      	ldr	r3, [r4, #116]	; 0x74
   28602:	4298      	cmp	r0, r3
   28604:	f000 80b5 	beq.w	28772 <rpc_message_free+0x1fe>
   28608:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2860a:	4283      	cmp	r3, r0
   2860c:	f000 80b8 	beq.w	28780 <rpc_message_free+0x20c>
   28610:	68d3      	ldr	r3, [r2, #12]
   28612:	4798      	blx	r3
   28614:	7823      	ldrb	r3, [r4, #0]
   28616:	2b04      	cmp	r3, #4
   28618:	d03f      	beq.n	2869a <rpc_message_free+0x126>
   2861a:	7a23      	ldrb	r3, [r4, #8]
   2861c:	2b04      	cmp	r3, #4
   2861e:	d03c      	beq.n	2869a <rpc_message_free+0x126>
   28620:	7c23      	ldrb	r3, [r4, #16]
   28622:	2b04      	cmp	r3, #4
   28624:	d039      	beq.n	2869a <rpc_message_free+0x126>
   28626:	7e23      	ldrb	r3, [r4, #24]
   28628:	2b04      	cmp	r3, #4
   2862a:	d036      	beq.n	2869a <rpc_message_free+0x126>
   2862c:	f894 3020 	ldrb.w	r3, [r4, #32]
   28630:	2b04      	cmp	r3, #4
   28632:	d032      	beq.n	2869a <rpc_message_free+0x126>
   28634:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   28638:	2b04      	cmp	r3, #4
   2863a:	d02e      	beq.n	2869a <rpc_message_free+0x126>
   2863c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   28640:	2b04      	cmp	r3, #4
   28642:	d02a      	beq.n	2869a <rpc_message_free+0x126>
   28644:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   28648:	2b04      	cmp	r3, #4
   2864a:	d026      	beq.n	2869a <rpc_message_free+0x126>
   2864c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   28650:	2b04      	cmp	r3, #4
   28652:	d022      	beq.n	2869a <rpc_message_free+0x126>
   28654:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   28658:	2b04      	cmp	r3, #4
   2865a:	d01e      	beq.n	2869a <rpc_message_free+0x126>
   2865c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   28660:	2b04      	cmp	r3, #4
   28662:	d01a      	beq.n	2869a <rpc_message_free+0x126>
   28664:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   28668:	2b04      	cmp	r3, #4
   2866a:	d016      	beq.n	2869a <rpc_message_free+0x126>
   2866c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   28670:	2b04      	cmp	r3, #4
   28672:	d012      	beq.n	2869a <rpc_message_free+0x126>
   28674:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   28678:	2b04      	cmp	r3, #4
   2867a:	d00e      	beq.n	2869a <rpc_message_free+0x126>
   2867c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   28680:	2b04      	cmp	r3, #4
   28682:	d00a      	beq.n	2869a <rpc_message_free+0x126>
   28684:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   28688:	2b04      	cmp	r3, #4
   2868a:	bf18      	it	ne
   2868c:	2000      	movne	r0, #0
   2868e:	d004      	beq.n	2869a <rpc_message_free+0x126>
   28690:	bd38      	pop	{r3, r4, r5, pc}
   28692:	2007      	movs	r0, #7
   28694:	4770      	bx	lr
   28696:	2008      	movs	r0, #8
   28698:	bd38      	pop	{r3, r4, r5, pc}
   2869a:	f7f8 fa9f 	bl	20bdc <bsd_os_application_irq_set>
   2869e:	2000      	movs	r0, #0
   286a0:	bd38      	pop	{r3, r4, r5, pc}
   286a2:	7821      	ldrb	r1, [r4, #0]
   286a4:	2903      	cmp	r1, #3
   286a6:	f47f af77 	bne.w	28598 <rpc_message_free+0x24>
   286aa:	2100      	movs	r1, #0
   286ac:	2501      	movs	r5, #1
   286ae:	4618      	mov	r0, r3
   286b0:	68d2      	ldr	r2, [r2, #12]
   286b2:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   286b6:	4790      	blx	r2
   286b8:	2000      	movs	r0, #0
   286ba:	bd38      	pop	{r3, r4, r5, pc}
   286bc:	7a21      	ldrb	r1, [r4, #8]
   286be:	2903      	cmp	r1, #3
   286c0:	f47f af6e 	bne.w	285a0 <rpc_message_free+0x2c>
   286c4:	2101      	movs	r1, #1
   286c6:	e7f1      	b.n	286ac <rpc_message_free+0x138>
   286c8:	7c21      	ldrb	r1, [r4, #16]
   286ca:	2903      	cmp	r1, #3
   286cc:	f47f af6c 	bne.w	285a8 <rpc_message_free+0x34>
   286d0:	2102      	movs	r1, #2
   286d2:	e7eb      	b.n	286ac <rpc_message_free+0x138>
   286d4:	7e21      	ldrb	r1, [r4, #24]
   286d6:	2903      	cmp	r1, #3
   286d8:	d0e8      	beq.n	286ac <rpc_message_free+0x138>
   286da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   286dc:	4298      	cmp	r0, r3
   286de:	f47f af6b 	bne.w	285b8 <rpc_message_free+0x44>
   286e2:	f894 1020 	ldrb.w	r1, [r4, #32]
   286e6:	2903      	cmp	r1, #3
   286e8:	f47f af66 	bne.w	285b8 <rpc_message_free+0x44>
   286ec:	2104      	movs	r1, #4
   286ee:	e7dd      	b.n	286ac <rpc_message_free+0x138>
   286f0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   286f4:	2903      	cmp	r1, #3
   286f6:	f47f af63 	bne.w	285c0 <rpc_message_free+0x4c>
   286fa:	2105      	movs	r1, #5
   286fc:	e7d6      	b.n	286ac <rpc_message_free+0x138>
   286fe:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   28702:	2903      	cmp	r1, #3
   28704:	f47f af60 	bne.w	285c8 <rpc_message_free+0x54>
   28708:	2106      	movs	r1, #6
   2870a:	e7cf      	b.n	286ac <rpc_message_free+0x138>
   2870c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   28710:	2903      	cmp	r1, #3
   28712:	f47f af5d 	bne.w	285d0 <rpc_message_free+0x5c>
   28716:	2107      	movs	r1, #7
   28718:	e7c8      	b.n	286ac <rpc_message_free+0x138>
   2871a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   2871e:	2903      	cmp	r1, #3
   28720:	f47f af5a 	bne.w	285d8 <rpc_message_free+0x64>
   28724:	2108      	movs	r1, #8
   28726:	e7c1      	b.n	286ac <rpc_message_free+0x138>
   28728:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   2872c:	2903      	cmp	r1, #3
   2872e:	f47f af57 	bne.w	285e0 <rpc_message_free+0x6c>
   28732:	2109      	movs	r1, #9
   28734:	e7ba      	b.n	286ac <rpc_message_free+0x138>
   28736:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   2873a:	2903      	cmp	r1, #3
   2873c:	f47f af54 	bne.w	285e8 <rpc_message_free+0x74>
   28740:	210a      	movs	r1, #10
   28742:	e7b3      	b.n	286ac <rpc_message_free+0x138>
   28744:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   28748:	2903      	cmp	r1, #3
   2874a:	f47f af51 	bne.w	285f0 <rpc_message_free+0x7c>
   2874e:	210b      	movs	r1, #11
   28750:	e7ac      	b.n	286ac <rpc_message_free+0x138>
   28752:	200e      	movs	r0, #14
   28754:	4770      	bx	lr
   28756:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   2875a:	2903      	cmp	r1, #3
   2875c:	f47f af4c 	bne.w	285f8 <rpc_message_free+0x84>
   28760:	210c      	movs	r1, #12
   28762:	e7a3      	b.n	286ac <rpc_message_free+0x138>
   28764:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   28768:	2903      	cmp	r1, #3
   2876a:	f47f af49 	bne.w	28600 <rpc_message_free+0x8c>
   2876e:	210d      	movs	r1, #13
   28770:	e79c      	b.n	286ac <rpc_message_free+0x138>
   28772:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   28776:	2903      	cmp	r1, #3
   28778:	f47f af46 	bne.w	28608 <rpc_message_free+0x94>
   2877c:	210e      	movs	r1, #14
   2877e:	e795      	b.n	286ac <rpc_message_free+0x138>
   28780:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   28784:	2b03      	cmp	r3, #3
   28786:	f47f af43 	bne.w	28610 <rpc_message_free+0x9c>
   2878a:	4603      	mov	r3, r0
   2878c:	210f      	movs	r1, #15
   2878e:	e78d      	b.n	286ac <rpc_message_free+0x138>
   28790:	20020918 	.word	0x20020918
   28794:	200209b0 	.word	0x200209b0

00028798 <rpc_message_data_free>:
   28798:	2800      	cmp	r0, #0
   2879a:	f000 8091 	beq.w	288c0 <rpc_message_data_free+0x128>
   2879e:	2900      	cmp	r1, #0
   287a0:	f000 80e4 	beq.w	2896c <rpc_message_data_free+0x1d4>
   287a4:	b538      	push	{r3, r4, r5, lr}
   287a6:	4a81      	ldr	r2, [pc, #516]	; (289ac <rpc_message_data_free+0x214>)
   287a8:	6853      	ldr	r3, [r2, #4]
   287aa:	2b00      	cmp	r3, #0
   287ac:	f000 808a 	beq.w	288c4 <rpc_message_data_free+0x12c>
   287b0:	4b7f      	ldr	r3, [pc, #508]	; (289b0 <rpc_message_data_free+0x218>)
   287b2:	681c      	ldr	r4, [r3, #0]
   287b4:	42a1      	cmp	r1, r4
   287b6:	f000 8087 	beq.w	288c8 <rpc_message_data_free+0x130>
   287ba:	689c      	ldr	r4, [r3, #8]
   287bc:	42a1      	cmp	r1, r4
   287be:	f000 808f 	beq.w	288e0 <rpc_message_data_free+0x148>
   287c2:	691c      	ldr	r4, [r3, #16]
   287c4:	42a1      	cmp	r1, r4
   287c6:	f000 8091 	beq.w	288ec <rpc_message_data_free+0x154>
   287ca:	699c      	ldr	r4, [r3, #24]
   287cc:	42a1      	cmp	r1, r4
   287ce:	f000 8093 	beq.w	288f8 <rpc_message_data_free+0x160>
   287d2:	6a1c      	ldr	r4, [r3, #32]
   287d4:	42a1      	cmp	r1, r4
   287d6:	f000 8095 	beq.w	28904 <rpc_message_data_free+0x16c>
   287da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   287dc:	42a1      	cmp	r1, r4
   287de:	f000 8097 	beq.w	28910 <rpc_message_data_free+0x178>
   287e2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   287e4:	42a1      	cmp	r1, r4
   287e6:	f000 8099 	beq.w	2891c <rpc_message_data_free+0x184>
   287ea:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   287ec:	42a1      	cmp	r1, r4
   287ee:	f000 809b 	beq.w	28928 <rpc_message_data_free+0x190>
   287f2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   287f4:	42a1      	cmp	r1, r4
   287f6:	f000 809d 	beq.w	28934 <rpc_message_data_free+0x19c>
   287fa:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   287fc:	42a1      	cmp	r1, r4
   287fe:	f000 80a0 	beq.w	28942 <rpc_message_data_free+0x1aa>
   28802:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   28804:	42a1      	cmp	r1, r4
   28806:	f000 80a3 	beq.w	28950 <rpc_message_data_free+0x1b8>
   2880a:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   2880c:	42a1      	cmp	r1, r4
   2880e:	f000 80a6 	beq.w	2895e <rpc_message_data_free+0x1c6>
   28812:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   28814:	42a1      	cmp	r1, r4
   28816:	f000 80ab 	beq.w	28970 <rpc_message_data_free+0x1d8>
   2881a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   2881c:	42a1      	cmp	r1, r4
   2881e:	f000 80ae 	beq.w	2897e <rpc_message_data_free+0x1e6>
   28822:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   28824:	42a1      	cmp	r1, r4
   28826:	f000 80b1 	beq.w	2898c <rpc_message_data_free+0x1f4>
   2882a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   2882c:	428c      	cmp	r4, r1
   2882e:	f000 80b4 	beq.w	2899a <rpc_message_data_free+0x202>
   28832:	6913      	ldr	r3, [r2, #16]
   28834:	4608      	mov	r0, r1
   28836:	4798      	blx	r3
   28838:	4b5e      	ldr	r3, [pc, #376]	; (289b4 <rpc_message_data_free+0x21c>)
   2883a:	781a      	ldrb	r2, [r3, #0]
   2883c:	2a04      	cmp	r2, #4
   2883e:	d03b      	beq.n	288b8 <rpc_message_data_free+0x120>
   28840:	7a1a      	ldrb	r2, [r3, #8]
   28842:	2a04      	cmp	r2, #4
   28844:	d038      	beq.n	288b8 <rpc_message_data_free+0x120>
   28846:	7c1a      	ldrb	r2, [r3, #16]
   28848:	2a04      	cmp	r2, #4
   2884a:	d035      	beq.n	288b8 <rpc_message_data_free+0x120>
   2884c:	7e1a      	ldrb	r2, [r3, #24]
   2884e:	2a04      	cmp	r2, #4
   28850:	d032      	beq.n	288b8 <rpc_message_data_free+0x120>
   28852:	f893 2020 	ldrb.w	r2, [r3, #32]
   28856:	2a04      	cmp	r2, #4
   28858:	d02e      	beq.n	288b8 <rpc_message_data_free+0x120>
   2885a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2885e:	2a04      	cmp	r2, #4
   28860:	d02a      	beq.n	288b8 <rpc_message_data_free+0x120>
   28862:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   28866:	2a04      	cmp	r2, #4
   28868:	d026      	beq.n	288b8 <rpc_message_data_free+0x120>
   2886a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2886e:	2a04      	cmp	r2, #4
   28870:	d022      	beq.n	288b8 <rpc_message_data_free+0x120>
   28872:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   28876:	2a04      	cmp	r2, #4
   28878:	d01e      	beq.n	288b8 <rpc_message_data_free+0x120>
   2887a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2887e:	2a04      	cmp	r2, #4
   28880:	d01a      	beq.n	288b8 <rpc_message_data_free+0x120>
   28882:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   28886:	2a04      	cmp	r2, #4
   28888:	d016      	beq.n	288b8 <rpc_message_data_free+0x120>
   2888a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   2888e:	2a04      	cmp	r2, #4
   28890:	d012      	beq.n	288b8 <rpc_message_data_free+0x120>
   28892:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   28896:	2a04      	cmp	r2, #4
   28898:	d00e      	beq.n	288b8 <rpc_message_data_free+0x120>
   2889a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   2889e:	2a04      	cmp	r2, #4
   288a0:	d00a      	beq.n	288b8 <rpc_message_data_free+0x120>
   288a2:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   288a6:	2a04      	cmp	r2, #4
   288a8:	d006      	beq.n	288b8 <rpc_message_data_free+0x120>
   288aa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   288ae:	2b04      	cmp	r3, #4
   288b0:	bf18      	it	ne
   288b2:	2000      	movne	r0, #0
   288b4:	d000      	beq.n	288b8 <rpc_message_data_free+0x120>
   288b6:	bd38      	pop	{r3, r4, r5, pc}
   288b8:	f7f8 f990 	bl	20bdc <bsd_os_application_irq_set>
   288bc:	2000      	movs	r0, #0
   288be:	bd38      	pop	{r3, r4, r5, pc}
   288c0:	2007      	movs	r0, #7
   288c2:	4770      	bx	lr
   288c4:	2008      	movs	r0, #8
   288c6:	bd38      	pop	{r3, r4, r5, pc}
   288c8:	889c      	ldrh	r4, [r3, #4]
   288ca:	4284      	cmp	r4, r0
   288cc:	f47f af75 	bne.w	287ba <rpc_message_data_free+0x22>
   288d0:	2400      	movs	r4, #0
   288d2:	2000      	movs	r0, #0
   288d4:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   288d8:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   288dc:	80a8      	strh	r0, [r5, #4]
   288de:	e7a8      	b.n	28832 <rpc_message_data_free+0x9a>
   288e0:	899c      	ldrh	r4, [r3, #12]
   288e2:	4284      	cmp	r4, r0
   288e4:	f47f af6d 	bne.w	287c2 <rpc_message_data_free+0x2a>
   288e8:	2401      	movs	r4, #1
   288ea:	e7f2      	b.n	288d2 <rpc_message_data_free+0x13a>
   288ec:	8a9c      	ldrh	r4, [r3, #20]
   288ee:	4284      	cmp	r4, r0
   288f0:	f47f af6b 	bne.w	287ca <rpc_message_data_free+0x32>
   288f4:	2402      	movs	r4, #2
   288f6:	e7ec      	b.n	288d2 <rpc_message_data_free+0x13a>
   288f8:	8b9c      	ldrh	r4, [r3, #28]
   288fa:	4284      	cmp	r4, r0
   288fc:	f47f af69 	bne.w	287d2 <rpc_message_data_free+0x3a>
   28900:	2403      	movs	r4, #3
   28902:	e7e6      	b.n	288d2 <rpc_message_data_free+0x13a>
   28904:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   28906:	4284      	cmp	r4, r0
   28908:	f47f af67 	bne.w	287da <rpc_message_data_free+0x42>
   2890c:	2404      	movs	r4, #4
   2890e:	e7e0      	b.n	288d2 <rpc_message_data_free+0x13a>
   28910:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   28912:	4284      	cmp	r4, r0
   28914:	f47f af65 	bne.w	287e2 <rpc_message_data_free+0x4a>
   28918:	2405      	movs	r4, #5
   2891a:	e7da      	b.n	288d2 <rpc_message_data_free+0x13a>
   2891c:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   2891e:	4284      	cmp	r4, r0
   28920:	f47f af63 	bne.w	287ea <rpc_message_data_free+0x52>
   28924:	2406      	movs	r4, #6
   28926:	e7d4      	b.n	288d2 <rpc_message_data_free+0x13a>
   28928:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   2892a:	4284      	cmp	r4, r0
   2892c:	f47f af61 	bne.w	287f2 <rpc_message_data_free+0x5a>
   28930:	2407      	movs	r4, #7
   28932:	e7ce      	b.n	288d2 <rpc_message_data_free+0x13a>
   28934:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   28938:	4284      	cmp	r4, r0
   2893a:	f47f af5e 	bne.w	287fa <rpc_message_data_free+0x62>
   2893e:	2408      	movs	r4, #8
   28940:	e7c7      	b.n	288d2 <rpc_message_data_free+0x13a>
   28942:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   28946:	4284      	cmp	r4, r0
   28948:	f47f af5b 	bne.w	28802 <rpc_message_data_free+0x6a>
   2894c:	2409      	movs	r4, #9
   2894e:	e7c0      	b.n	288d2 <rpc_message_data_free+0x13a>
   28950:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   28954:	4284      	cmp	r4, r0
   28956:	f47f af58 	bne.w	2880a <rpc_message_data_free+0x72>
   2895a:	240a      	movs	r4, #10
   2895c:	e7b9      	b.n	288d2 <rpc_message_data_free+0x13a>
   2895e:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   28962:	4284      	cmp	r4, r0
   28964:	f47f af55 	bne.w	28812 <rpc_message_data_free+0x7a>
   28968:	240b      	movs	r4, #11
   2896a:	e7b2      	b.n	288d2 <rpc_message_data_free+0x13a>
   2896c:	200e      	movs	r0, #14
   2896e:	4770      	bx	lr
   28970:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   28974:	4284      	cmp	r4, r0
   28976:	f47f af50 	bne.w	2881a <rpc_message_data_free+0x82>
   2897a:	240c      	movs	r4, #12
   2897c:	e7a9      	b.n	288d2 <rpc_message_data_free+0x13a>
   2897e:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   28982:	4284      	cmp	r4, r0
   28984:	f47f af4d 	bne.w	28822 <rpc_message_data_free+0x8a>
   28988:	240d      	movs	r4, #13
   2898a:	e7a2      	b.n	288d2 <rpc_message_data_free+0x13a>
   2898c:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   28990:	4284      	cmp	r4, r0
   28992:	f47f af4a 	bne.w	2882a <rpc_message_data_free+0x92>
   28996:	240e      	movs	r4, #14
   28998:	e79b      	b.n	288d2 <rpc_message_data_free+0x13a>
   2899a:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   2899e:	4284      	cmp	r4, r0
   289a0:	bf08      	it	eq
   289a2:	240f      	moveq	r4, #15
   289a4:	f47f af45 	bne.w	28832 <rpc_message_data_free+0x9a>
   289a8:	e793      	b.n	288d2 <rpc_message_data_free+0x13a>
   289aa:	bf00      	nop
   289ac:	20020918 	.word	0x20020918
   289b0:	20020930 	.word	0x20020930
   289b4:	200209b0 	.word	0x200209b0

000289b8 <packet_free_cb>:
   289b8:	b510      	push	{r4, lr}
   289ba:	4604      	mov	r4, r0
   289bc:	b118      	cbz	r0, 289c6 <packet_free_cb+0xe>
   289be:	6800      	ldr	r0, [r0, #0]
   289c0:	b108      	cbz	r0, 289c6 <packet_free_cb+0xe>
   289c2:	f001 f82f 	bl	29a24 <rpc_gnss_client_data_free>
   289c6:	68a0      	ldr	r0, [r4, #8]
   289c8:	b118      	cbz	r0, 289d2 <packet_free_cb+0x1a>
   289ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   289ce:	f7fa b917 	b.w	22c00 <nrf_free>
   289d2:	bd10      	pop	{r4, pc}

000289d4 <rpc_gnss_event_handler>:
   289d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   289d8:	4b64      	ldr	r3, [pc, #400]	; (28b6c <rpc_gnss_event_handler+0x198>)
   289da:	4606      	mov	r6, r0
   289dc:	6800      	ldr	r0, [r0, #0]
   289de:	881b      	ldrh	r3, [r3, #0]
   289e0:	6802      	ldr	r2, [r0, #0]
   289e2:	4f63      	ldr	r7, [pc, #396]	; (28b70 <rpc_gnss_event_handler+0x19c>)
   289e4:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   289e8:	b084      	sub	sp, #16
   289ea:	460d      	mov	r5, r1
   289ec:	6038      	str	r0, [r7, #0]
   289ee:	d038      	beq.n	28a62 <rpc_gnss_event_handler+0x8e>
   289f0:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   289f4:	33ff      	adds	r3, #255	; 0xff
   289f6:	b29b      	uxth	r3, r3
   289f8:	2b02      	cmp	r3, #2
   289fa:	d810      	bhi.n	28a1e <rpc_gnss_event_handler+0x4a>
   289fc:	4c5d      	ldr	r4, [pc, #372]	; (28b74 <rpc_gnss_event_handler+0x1a0>)
   289fe:	6823      	ldr	r3, [r4, #0]
   28a00:	075a      	lsls	r2, r3, #29
   28a02:	d410      	bmi.n	28a26 <rpc_gnss_event_handler+0x52>
   28a04:	6823      	ldr	r3, [r4, #0]
   28a06:	079b      	lsls	r3, r3, #30
   28a08:	d503      	bpl.n	28a12 <rpc_gnss_event_handler+0x3e>
   28a0a:	f244 0303 	movw	r3, #16387	; 0x4003
   28a0e:	429d      	cmp	r5, r3
   28a10:	d009      	beq.n	28a26 <rpc_gnss_event_handler+0x52>
   28a12:	6830      	ldr	r0, [r6, #0]
   28a14:	b118      	cbz	r0, 28a1e <rpc_gnss_event_handler+0x4a>
   28a16:	f001 f805 	bl	29a24 <rpc_gnss_client_data_free>
   28a1a:	2300      	movs	r3, #0
   28a1c:	603b      	str	r3, [r7, #0]
   28a1e:	2000      	movs	r0, #0
   28a20:	b004      	add	sp, #16
   28a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28a26:	2002      	movs	r0, #2
   28a28:	f7fa f8e0 	bl	22bec <nrf_malloc>
   28a2c:	4680      	mov	r8, r0
   28a2e:	2800      	cmp	r0, #0
   28a30:	f000 8093 	beq.w	28b5a <rpc_gnss_event_handler+0x186>
   28a34:	2302      	movs	r3, #2
   28a36:	8005      	strh	r5, [r0, #0]
   28a38:	6831      	ldr	r1, [r6, #0]
   28a3a:	6872      	ldr	r2, [r6, #4]
   28a3c:	484e      	ldr	r0, [pc, #312]	; (28b78 <rpc_gnss_event_handler+0x1a4>)
   28a3e:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   28a42:	6800      	ldr	r0, [r0, #0]
   28a44:	9303      	str	r3, [sp, #12]
   28a46:	6803      	ldr	r3, [r0, #0]
   28a48:	4669      	mov	r1, sp
   28a4a:	685b      	ldr	r3, [r3, #4]
   28a4c:	4798      	blx	r3
   28a4e:	3001      	adds	r0, #1
   28a50:	d070      	beq.n	28b34 <rpc_gnss_event_handler+0x160>
   28a52:	2000      	movs	r0, #0
   28a54:	6823      	ldr	r3, [r4, #0]
   28a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   28a5a:	6023      	str	r3, [r4, #0]
   28a5c:	b004      	add	sp, #16
   28a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28a62:	4c44      	ldr	r4, [pc, #272]	; (28b74 <rpc_gnss_event_handler+0x1a0>)
   28a64:	6823      	ldr	r3, [r4, #0]
   28a66:	01d9      	lsls	r1, r3, #7
   28a68:	d523      	bpl.n	28ab2 <rpc_gnss_event_handler+0xde>
   28a6a:	f242 1302 	movw	r3, #8450	; 0x2102
   28a6e:	429d      	cmp	r5, r3
   28a70:	d11f      	bne.n	28ab2 <rpc_gnss_event_handler+0xde>
   28a72:	6843      	ldr	r3, [r0, #4]
   28a74:	b91b      	cbnz	r3, 28a7e <rpc_gnss_event_handler+0xaa>
   28a76:	6823      	ldr	r3, [r4, #0]
   28a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   28a7c:	6023      	str	r3, [r4, #0]
   28a7e:	6823      	ldr	r3, [r4, #0]
   28a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   28a84:	6023      	str	r3, [r4, #0]
   28a86:	6823      	ldr	r3, [r4, #0]
   28a88:	025a      	lsls	r2, r3, #9
   28a8a:	d430      	bmi.n	28aee <rpc_gnss_event_handler+0x11a>
   28a8c:	f242 0305 	movw	r3, #8197	; 0x2005
   28a90:	429d      	cmp	r5, r3
   28a92:	d12c      	bne.n	28aee <rpc_gnss_event_handler+0x11a>
   28a94:	6823      	ldr	r3, [r4, #0]
   28a96:	0299      	lsls	r1, r3, #10
   28a98:	d529      	bpl.n	28aee <rpc_gnss_event_handler+0x11a>
   28a9a:	6843      	ldr	r3, [r0, #4]
   28a9c:	2b00      	cmp	r3, #0
   28a9e:	d157      	bne.n	28b50 <rpc_gnss_event_handler+0x17c>
   28aa0:	6823      	ldr	r3, [r4, #0]
   28aa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   28aa6:	6023      	str	r3, [r4, #0]
   28aa8:	6823      	ldr	r3, [r4, #0]
   28aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28aae:	6023      	str	r3, [r4, #0]
   28ab0:	e01d      	b.n	28aee <rpc_gnss_event_handler+0x11a>
   28ab2:	6823      	ldr	r3, [r4, #0]
   28ab4:	025b      	lsls	r3, r3, #9
   28ab6:	d50e      	bpl.n	28ad6 <rpc_gnss_event_handler+0x102>
   28ab8:	f242 1303 	movw	r3, #8451	; 0x2103
   28abc:	429d      	cmp	r5, r3
   28abe:	d10a      	bne.n	28ad6 <rpc_gnss_event_handler+0x102>
   28ac0:	6843      	ldr	r3, [r0, #4]
   28ac2:	b91b      	cbnz	r3, 28acc <rpc_gnss_event_handler+0xf8>
   28ac4:	6823      	ldr	r3, [r4, #0]
   28ac6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   28aca:	6023      	str	r3, [r4, #0]
   28acc:	6823      	ldr	r3, [r4, #0]
   28ace:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   28ad2:	6023      	str	r3, [r4, #0]
   28ad4:	e00b      	b.n	28aee <rpc_gnss_event_handler+0x11a>
   28ad6:	f242 0301 	movw	r3, #8193	; 0x2001
   28ada:	429d      	cmp	r5, r3
   28adc:	d10c      	bne.n	28af8 <rpc_gnss_event_handler+0x124>
   28ade:	6843      	ldr	r3, [r0, #4]
   28ae0:	b92b      	cbnz	r3, 28aee <rpc_gnss_event_handler+0x11a>
   28ae2:	6823      	ldr	r3, [r4, #0]
   28ae4:	0c1b      	lsrs	r3, r3, #16
   28ae6:	041b      	lsls	r3, r3, #16
   28ae8:	f043 0302 	orr.w	r3, r3, #2
   28aec:	6023      	str	r3, [r4, #0]
   28aee:	f000 ff99 	bl	29a24 <rpc_gnss_client_data_free>
   28af2:	2300      	movs	r3, #0
   28af4:	603b      	str	r3, [r7, #0]
   28af6:	e77b      	b.n	289f0 <rpc_gnss_event_handler+0x1c>
   28af8:	f242 0304 	movw	r3, #8196	; 0x2004
   28afc:	429d      	cmp	r5, r3
   28afe:	d1c5      	bne.n	28a8c <rpc_gnss_event_handler+0xb8>
   28b00:	6843      	ldr	r3, [r0, #4]
   28b02:	b993      	cbnz	r3, 28b2a <rpc_gnss_event_handler+0x156>
   28b04:	6823      	ldr	r3, [r4, #0]
   28b06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   28b0a:	6023      	str	r3, [r4, #0]
   28b0c:	6823      	ldr	r3, [r4, #0]
   28b0e:	b29b      	uxth	r3, r3
   28b10:	2b03      	cmp	r3, #3
   28b12:	6823      	ldr	r3, [r4, #0]
   28b14:	d016      	beq.n	28b44 <rpc_gnss_event_handler+0x170>
   28b16:	b29b      	uxth	r3, r3
   28b18:	2b04      	cmp	r3, #4
   28b1a:	d1d7      	bne.n	28acc <rpc_gnss_event_handler+0xf8>
   28b1c:	6823      	ldr	r3, [r4, #0]
   28b1e:	0c1b      	lsrs	r3, r3, #16
   28b20:	041b      	lsls	r3, r3, #16
   28b22:	f043 0302 	orr.w	r3, r3, #2
   28b26:	6023      	str	r3, [r4, #0]
   28b28:	e7d0      	b.n	28acc <rpc_gnss_event_handler+0xf8>
   28b2a:	6823      	ldr	r3, [r4, #0]
   28b2c:	b29b      	uxth	r3, r3
   28b2e:	2b03      	cmp	r3, #3
   28b30:	d1cc      	bne.n	28acc <rpc_gnss_event_handler+0xf8>
   28b32:	e7f3      	b.n	28b1c <rpc_gnss_event_handler+0x148>
   28b34:	4640      	mov	r0, r8
   28b36:	f7fa f863 	bl	22c00 <nrf_free>
   28b3a:	6830      	ldr	r0, [r6, #0]
   28b3c:	2800      	cmp	r0, #0
   28b3e:	f47f af6a 	bne.w	28a16 <rpc_gnss_event_handler+0x42>
   28b42:	e76c      	b.n	28a1e <rpc_gnss_event_handler+0x4a>
   28b44:	0c1b      	lsrs	r3, r3, #16
   28b46:	041b      	lsls	r3, r3, #16
   28b48:	f043 0304 	orr.w	r3, r3, #4
   28b4c:	6023      	str	r3, [r4, #0]
   28b4e:	e7bd      	b.n	28acc <rpc_gnss_event_handler+0xf8>
   28b50:	6823      	ldr	r3, [r4, #0]
   28b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   28b56:	6023      	str	r3, [r4, #0]
   28b58:	e7c9      	b.n	28aee <rpc_gnss_event_handler+0x11a>
   28b5a:	6830      	ldr	r0, [r6, #0]
   28b5c:	2800      	cmp	r0, #0
   28b5e:	f43f af5e 	beq.w	28a1e <rpc_gnss_event_handler+0x4a>
   28b62:	f000 ff5f 	bl	29a24 <rpc_gnss_client_data_free>
   28b66:	f8c7 8000 	str.w	r8, [r7]
   28b6a:	e758      	b.n	28a1e <rpc_gnss_event_handler+0x4a>
   28b6c:	200214fa 	.word	0x200214fa
   28b70:	20020a34 	.word	0x20020a34
   28b74:	20020a30 	.word	0x20020a30
   28b78:	20020a38 	.word	0x20020a38

00028b7c <gnss_interface_write>:
   28b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28b80:	4a74      	ldr	r2, [pc, #464]	; (28d54 <gnss_interface_write+0x1d8>)
   28b82:	b09f      	sub	sp, #124	; 0x7c
   28b84:	4290      	cmp	r0, r2
   28b86:	9d26      	ldr	r5, [sp, #152]	; 0x98
   28b88:	f040 80d7 	bne.w	28d3a <gnss_interface_write+0x1be>
   28b8c:	2900      	cmp	r1, #0
   28b8e:	f000 80c6 	beq.w	28d1e <gnss_interface_write+0x1a2>
   28b92:	2d00      	cmp	r5, #0
   28b94:	f000 80c3 	beq.w	28d1e <gnss_interface_write+0x1a2>
   28b98:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   28b9a:	2a02      	cmp	r2, #2
   28b9c:	f040 80bf 	bne.w	28d1e <gnss_interface_write+0x1a2>
   28ba0:	4c6d      	ldr	r4, [pc, #436]	; (28d58 <gnss_interface_write+0x1dc>)
   28ba2:	6822      	ldr	r2, [r4, #0]
   28ba4:	b292      	uxth	r2, r2
   28ba6:	2a02      	cmp	r2, #2
   28ba8:	d004      	beq.n	28bb4 <gnss_interface_write+0x38>
   28baa:	6822      	ldr	r2, [r4, #0]
   28bac:	b292      	uxth	r2, r2
   28bae:	2a04      	cmp	r2, #4
   28bb0:	f040 80bd 	bne.w	28d2e <gnss_interface_write+0x1b2>
   28bb4:	2b00      	cmp	r3, #0
   28bb6:	f040 80c6 	bne.w	28d46 <gnss_interface_write+0x1ca>
   28bba:	6822      	ldr	r2, [r4, #0]
   28bbc:	0390      	lsls	r0, r2, #14
   28bbe:	d512      	bpl.n	28be6 <gnss_interface_write+0x6a>
   28bc0:	6822      	ldr	r2, [r4, #0]
   28bc2:	882b      	ldrh	r3, [r5, #0]
   28bc4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   28bc8:	6022      	str	r2, [r4, #0]
   28bca:	6822      	ldr	r2, [r4, #0]
   28bcc:	3b01      	subs	r3, #1
   28bce:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   28bd2:	6022      	str	r2, [r4, #0]
   28bd4:	2b07      	cmp	r3, #7
   28bd6:	f200 80a2 	bhi.w	28d1e <gnss_interface_write+0x1a2>
   28bda:	e8df f003 	tbb	[pc, r3]
   28bde:	7d82      	.short	0x7d82
   28be0:	646e7378 	.word	0x646e7378
   28be4:	0869      	.short	0x0869
   28be6:	2000      	movs	r0, #0
   28be8:	b01f      	add	sp, #124	; 0x7c
   28bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28bee:	4608      	mov	r0, r1
   28bf0:	a902      	add	r1, sp, #8
   28bf2:	f000 fecb 	bl	2998c <rpc_gnss_serialize_integrity>
   28bf6:	2172      	movs	r1, #114	; 0x72
   28bf8:	4668      	mov	r0, sp
   28bfa:	f000 fee1 	bl	299c0 <rpc_gnss_client_request_alloc>
   28bfe:	4605      	mov	r5, r0
   28c00:	9800      	ldr	r0, [sp, #0]
   28c02:	2d00      	cmp	r5, #0
   28c04:	d172      	bne.n	28cec <gnss_interface_write+0x170>
   28c06:	2800      	cmp	r0, #0
   28c08:	d077      	beq.n	28cfa <gnss_interface_write+0x17e>
   28c0a:	f241 0605 	movw	r6, #4101	; 0x1005
   28c0e:	f04f 0c49 	mov.w	ip, #73	; 0x49
   28c12:	2272      	movs	r2, #114	; 0x72
   28c14:	f04f 0e76 	mov.w	lr, #118	; 0x76
   28c18:	f04f 0943 	mov.w	r9, #67	; 0x43
   28c1c:	f04f 0854 	mov.w	r8, #84	; 0x54
   28c20:	4f4e      	ldr	r7, [pc, #312]	; (28d5c <gnss_interface_write+0x1e0>)
   28c22:	a91e      	add	r1, sp, #120	; 0x78
   28c24:	883b      	ldrh	r3, [r7, #0]
   28c26:	f880 c00f 	strb.w	ip, [r0, #15]
   28c2a:	3301      	adds	r3, #1
   28c2c:	b29b      	uxth	r3, r3
   28c2e:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   28c32:	f841 cd74 	str.w	ip, [r1, #-116]!
   28c36:	7145      	strb	r5, [r0, #5]
   28c38:	7185      	strb	r5, [r0, #6]
   28c3a:	71c5      	strb	r5, [r0, #7]
   28c3c:	7205      	strb	r5, [r0, #8]
   28c3e:	7245      	strb	r5, [r0, #9]
   28c40:	7285      	strb	r5, [r0, #10]
   28c42:	72c5      	strb	r5, [r0, #11]
   28c44:	7102      	strb	r2, [r0, #4]
   28c46:	f880 900c 	strb.w	r9, [r0, #12]
   28c4a:	f880 800d 	strb.w	r8, [r0, #13]
   28c4e:	f880 e00e 	strb.w	lr, [r0, #14]
   28c52:	6800      	ldr	r0, [r0, #0]
   28c54:	803b      	strh	r3, [r7, #0]
   28c56:	f007 f8de 	bl	2fe16 <memcpy>
   28c5a:	4b41      	ldr	r3, [pc, #260]	; (28d60 <gnss_interface_write+0x1e4>)
   28c5c:	4631      	mov	r1, r6
   28c5e:	9800      	ldr	r0, [sp, #0]
   28c60:	601d      	str	r5, [r3, #0]
   28c62:	f000 fec1 	bl	299e8 <rpc_gnss_client_request_send>
   28c66:	2800      	cmp	r0, #0
   28c68:	d14e      	bne.n	28d08 <gnss_interface_write+0x18c>
   28c6a:	6823      	ldr	r3, [r4, #0]
   28c6c:	0299      	lsls	r1, r3, #10
   28c6e:	d50b      	bpl.n	28c88 <gnss_interface_write+0x10c>
   28c70:	4e3c      	ldr	r6, [pc, #240]	; (28d64 <gnss_interface_write+0x1e8>)
   28c72:	4d38      	ldr	r5, [pc, #224]	; (28d54 <gnss_interface_write+0x1d8>)
   28c74:	e000      	b.n	28c78 <gnss_interface_write+0xfc>
   28c76:	b978      	cbnz	r0, 28c98 <gnss_interface_write+0x11c>
   28c78:	4631      	mov	r1, r6
   28c7a:	4628      	mov	r0, r5
   28c7c:	f7f7 fe22 	bl	208c4 <bsd_os_timedwait>
   28c80:	6823      	ldr	r3, [r4, #0]
   28c82:	029a      	lsls	r2, r3, #10
   28c84:	d4f7      	bmi.n	28c76 <gnss_interface_write+0xfa>
   28c86:	b938      	cbnz	r0, 28c98 <gnss_interface_write+0x11c>
   28c88:	6823      	ldr	r3, [r4, #0]
   28c8a:	039b      	lsls	r3, r3, #14
   28c8c:	d4ab      	bmi.n	28be6 <gnss_interface_write+0x6a>
   28c8e:	2005      	movs	r0, #5
   28c90:	6823      	ldr	r3, [r4, #0]
   28c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28c96:	6023      	str	r3, [r4, #0]
   28c98:	f7f7 fea8 	bl	209ec <bsd_os_errno_set>
   28c9c:	f04f 30ff 	mov.w	r0, #4294967295
   28ca0:	b01f      	add	sp, #124	; 0x7c
   28ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28ca6:	4608      	mov	r0, r1
   28ca8:	a902      	add	r1, sp, #8
   28caa:	f000 fe27 	bl	298fc <rpc_gnss_serialize_time_and_sv_tow>
   28cae:	e7a2      	b.n	28bf6 <gnss_interface_write+0x7a>
   28cb0:	4608      	mov	r0, r1
   28cb2:	a902      	add	r1, sp, #8
   28cb4:	f000 fe4a 	bl	2994c <rpc_gnss_serialize_location>
   28cb8:	e79d      	b.n	28bf6 <gnss_interface_write+0x7a>
   28cba:	4608      	mov	r0, r1
   28cbc:	a902      	add	r1, sp, #8
   28cbe:	f000 fe03 	bl	298c8 <rpc_gnss_serialize_nequick>
   28cc2:	e798      	b.n	28bf6 <gnss_interface_write+0x7a>
   28cc4:	4608      	mov	r0, r1
   28cc6:	a902      	add	r1, sp, #8
   28cc8:	f000 fdda 	bl	29880 <rpc_gnss_serialize_klob>
   28ccc:	e793      	b.n	28bf6 <gnss_interface_write+0x7a>
   28cce:	4608      	mov	r0, r1
   28cd0:	a902      	add	r1, sp, #8
   28cd2:	f000 fda3 	bl	2981c <rpc_gnss_serialize_alm>
   28cd6:	e78e      	b.n	28bf6 <gnss_interface_write+0x7a>
   28cd8:	4608      	mov	r0, r1
   28cda:	a902      	add	r1, sp, #8
   28cdc:	f000 fd4c 	bl	29778 <rpc_gnss_serialize_ephe>
   28ce0:	e789      	b.n	28bf6 <gnss_interface_write+0x7a>
   28ce2:	4608      	mov	r0, r1
   28ce4:	a902      	add	r1, sp, #8
   28ce6:	f000 fd25 	bl	29734 <rpc_gnss_serialize_utc>
   28cea:	e784      	b.n	28bf6 <gnss_interface_write+0x7a>
   28cec:	b128      	cbz	r0, 28cfa <gnss_interface_write+0x17e>
   28cee:	6803      	ldr	r3, [r0, #0]
   28cf0:	b11b      	cbz	r3, 28cfa <gnss_interface_write+0x17e>
   28cf2:	4618      	mov	r0, r3
   28cf4:	f000 fe96 	bl	29a24 <rpc_gnss_client_data_free>
   28cf8:	9800      	ldr	r0, [sp, #0]
   28cfa:	f000 fe8b 	bl	29a14 <rpc_gnss_client_message_free>
   28cfe:	2023      	movs	r0, #35	; 0x23
   28d00:	f7f7 fe74 	bl	209ec <bsd_os_errno_set>
   28d04:	f04f 30ff 	mov.w	r0, #4294967295
   28d08:	6823      	ldr	r3, [r4, #0]
   28d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   28d0e:	6023      	str	r3, [r4, #0]
   28d10:	6823      	ldr	r3, [r4, #0]
   28d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   28d16:	6023      	str	r3, [r4, #0]
   28d18:	b01f      	add	sp, #124	; 0x7c
   28d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28d1e:	2016      	movs	r0, #22
   28d20:	f7f7 fe64 	bl	209ec <bsd_os_errno_set>
   28d24:	f04f 30ff 	mov.w	r0, #4294967295
   28d28:	b01f      	add	sp, #124	; 0x7c
   28d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28d2e:	2039      	movs	r0, #57	; 0x39
   28d30:	f7f7 fe5c 	bl	209ec <bsd_os_errno_set>
   28d34:	f04f 30ff 	mov.w	r0, #4294967295
   28d38:	e756      	b.n	28be8 <gnss_interface_write+0x6c>
   28d3a:	2009      	movs	r0, #9
   28d3c:	f7f7 fe56 	bl	209ec <bsd_os_errno_set>
   28d40:	f04f 30ff 	mov.w	r0, #4294967295
   28d44:	e750      	b.n	28be8 <gnss_interface_write+0x6c>
   28d46:	202d      	movs	r0, #45	; 0x2d
   28d48:	f7f7 fe50 	bl	209ec <bsd_os_errno_set>
   28d4c:	f04f 30ff 	mov.w	r0, #4294967295
   28d50:	e74a      	b.n	28be8 <gnss_interface_write+0x6c>
   28d52:	bf00      	nop
   28d54:	49765443 	.word	0x49765443
   28d58:	20020a30 	.word	0x20020a30
   28d5c:	200214fa 	.word	0x200214fa
   28d60:	20020a34 	.word	0x20020a34
   28d64:	2002674c 	.word	0x2002674c

00028d68 <gnss_interface_read>:
   28d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d6c:	4c50      	ldr	r4, [pc, #320]	; (28eb0 <gnss_interface_read+0x148>)
   28d6e:	b0b7      	sub	sp, #220	; 0xdc
   28d70:	42a0      	cmp	r0, r4
   28d72:	f040 81fe 	bne.w	29172 <gnss_interface_read+0x40a>
   28d76:	4688      	mov	r8, r1
   28d78:	2900      	cmp	r1, #0
   28d7a:	f000 81f4 	beq.w	29166 <gnss_interface_read+0x3fe>
   28d7e:	2ad7      	cmp	r2, #215	; 0xd7
   28d80:	f240 81f1 	bls.w	29166 <gnss_interface_read+0x3fe>
   28d84:	4d4b      	ldr	r5, [pc, #300]	; (28eb4 <gnss_interface_read+0x14c>)
   28d86:	4699      	mov	r9, r3
   28d88:	682b      	ldr	r3, [r5, #0]
   28d8a:	b29b      	uxth	r3, r3
   28d8c:	2b04      	cmp	r3, #4
   28d8e:	d004      	beq.n	28d9a <gnss_interface_read+0x32>
   28d90:	682b      	ldr	r3, [r5, #0]
   28d92:	b29b      	uxth	r3, r3
   28d94:	2b02      	cmp	r3, #2
   28d96:	f040 81e0 	bne.w	2915a <gnss_interface_read+0x3f2>
   28d9a:	f1b9 0f00 	cmp.w	r9, #0
   28d9e:	d158      	bne.n	28e52 <gnss_interface_read+0xea>
   28da0:	2102      	movs	r1, #2
   28da2:	20b6      	movs	r0, #182	; 0xb6
   28da4:	2400      	movs	r4, #0
   28da6:	682b      	ldr	r3, [r5, #0]
   28da8:	f10d 020e 	add.w	r2, sp, #14
   28dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   28db0:	602b      	str	r3, [r5, #0]
   28db2:	f8df a108 	ldr.w	sl, [pc, #264]	; 28ebc <gnss_interface_read+0x154>
   28db6:	ab08      	add	r3, sp, #32
   28db8:	4f3f      	ldr	r7, [pc, #252]	; (28eb8 <gnss_interface_read+0x150>)
   28dba:	4e3d      	ldr	r6, [pc, #244]	; (28eb0 <gnss_interface_read+0x148>)
   28dbc:	9005      	str	r0, [sp, #20]
   28dbe:	9107      	str	r1, [sp, #28]
   28dc0:	9304      	str	r3, [sp, #16]
   28dc2:	9206      	str	r2, [sp, #24]
   28dc4:	ea09 0b01 	and.w	fp, r9, r1
   28dc8:	f8da 0000 	ldr.w	r0, [sl]
   28dcc:	464a      	mov	r2, r9
   28dce:	6803      	ldr	r3, [r0, #0]
   28dd0:	a904      	add	r1, sp, #16
   28dd2:	689b      	ldr	r3, [r3, #8]
   28dd4:	4798      	blx	r3
   28dd6:	2800      	cmp	r0, #0
   28dd8:	da11      	bge.n	28dfe <gnss_interface_read+0x96>
   28dda:	f1bb 0f00 	cmp.w	fp, #0
   28dde:	d141      	bne.n	28e64 <gnss_interface_read+0xfc>
   28de0:	682b      	ldr	r3, [r5, #0]
   28de2:	03d8      	lsls	r0, r3, #15
   28de4:	d4f0      	bmi.n	28dc8 <gnss_interface_read+0x60>
   28de6:	b10c      	cbz	r4, 28dec <gnss_interface_read+0x84>
   28de8:	e7ee      	b.n	28dc8 <gnss_interface_read+0x60>
   28dea:	b930      	cbnz	r0, 28dfa <gnss_interface_read+0x92>
   28dec:	4639      	mov	r1, r7
   28dee:	4630      	mov	r0, r6
   28df0:	f7f7 fd68 	bl	208c4 <bsd_os_timedwait>
   28df4:	682b      	ldr	r3, [r5, #0]
   28df6:	03d9      	lsls	r1, r3, #15
   28df8:	d5f7      	bpl.n	28dea <gnss_interface_read+0x82>
   28dfa:	4604      	mov	r4, r0
   28dfc:	e7e4      	b.n	28dc8 <gnss_interface_read+0x60>
   28dfe:	f244 0202 	movw	r2, #16386	; 0x4002
   28e02:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   28e06:	4293      	cmp	r3, r2
   28e08:	d042      	beq.n	28e90 <gnss_interface_read+0x128>
   28e0a:	f244 0201 	movw	r2, #16385	; 0x4001
   28e0e:	4293      	cmp	r3, r2
   28e10:	d056      	beq.n	28ec0 <gnss_interface_read+0x158>
   28e12:	f244 0203 	movw	r2, #16387	; 0x4003
   28e16:	4293      	cmp	r3, r2
   28e18:	f040 81a5 	bne.w	29166 <gnss_interface_read+0x3fe>
   28e1c:	2203      	movs	r2, #3
   28e1e:	2414      	movs	r4, #20
   28e20:	9b08      	ldr	r3, [sp, #32]
   28e22:	f888 2000 	strb.w	r2, [r8]
   28e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28e28:	f8c8 3008 	str.w	r3, [r8, #8]
   28e2c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   28e30:	e9c8 2303 	strd	r2, r3, [r8, #12]
   28e34:	f8da 0000 	ldr.w	r0, [sl]
   28e38:	6803      	ldr	r3, [r0, #0]
   28e3a:	68db      	ldr	r3, [r3, #12]
   28e3c:	4798      	blx	r3
   28e3e:	2800      	cmp	r0, #0
   28e40:	dd03      	ble.n	28e4a <gnss_interface_read+0xe2>
   28e42:	682b      	ldr	r3, [r5, #0]
   28e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   28e48:	602b      	str	r3, [r5, #0]
   28e4a:	4620      	mov	r0, r4
   28e4c:	b037      	add	sp, #220	; 0xdc
   28e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e52:	f019 0f0a 	tst.w	r9, #10
   28e56:	d1a3      	bne.n	28da0 <gnss_interface_read+0x38>
   28e58:	202d      	movs	r0, #45	; 0x2d
   28e5a:	f7f7 fdc7 	bl	209ec <bsd_os_errno_set>
   28e5e:	f04f 34ff 	mov.w	r4, #4294967295
   28e62:	e7f2      	b.n	28e4a <gnss_interface_read+0xe2>
   28e64:	1c42      	adds	r2, r0, #1
   28e66:	4603      	mov	r3, r0
   28e68:	d1c9      	bne.n	28dfe <gnss_interface_read+0x96>
   28e6a:	b93c      	cbnz	r4, 28e7c <gnss_interface_read+0x114>
   28e6c:	461c      	mov	r4, r3
   28e6e:	2023      	movs	r0, #35	; 0x23
   28e70:	f7f7 fdbc 	bl	209ec <bsd_os_errno_set>
   28e74:	4620      	mov	r0, r4
   28e76:	b037      	add	sp, #220	; 0xdc
   28e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e7c:	9001      	str	r0, [sp, #4]
   28e7e:	4620      	mov	r0, r4
   28e80:	f7f7 fdb4 	bl	209ec <bsd_os_errno_set>
   28e84:	9b01      	ldr	r3, [sp, #4]
   28e86:	461c      	mov	r4, r3
   28e88:	4620      	mov	r0, r4
   28e8a:	b037      	add	sp, #220	; 0xdc
   28e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e90:	a808      	add	r0, sp, #32
   28e92:	f7f4 f8f1 	bl	1d078 <strlen>
   28e96:	2302      	movs	r3, #2
   28e98:	1c44      	adds	r4, r0, #1
   28e9a:	b2a4      	uxth	r4, r4
   28e9c:	f808 3b08 	strb.w	r3, [r8], #8
   28ea0:	4622      	mov	r2, r4
   28ea2:	a908      	add	r1, sp, #32
   28ea4:	4640      	mov	r0, r8
   28ea6:	f006 ffb6 	bl	2fe16 <memcpy>
   28eaa:	3408      	adds	r4, #8
   28eac:	e7c2      	b.n	28e34 <gnss_interface_read+0xcc>
   28eae:	bf00      	nop
   28eb0:	49765443 	.word	0x49765443
   28eb4:	20020a30 	.word	0x20020a30
   28eb8:	2002674c 	.word	0x2002674c
   28ebc:	20020a38 	.word	0x20020a38
   28ec0:	2401      	movs	r4, #1
   28ec2:	a809      	add	r0, sp, #36	; 0x24
   28ec4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   28ec6:	e9c8 0102 	strd	r0, r1, [r8, #8]
   28eca:	e9c8 2304 	strd	r2, r3, [r8, #16]
   28ece:	990d      	ldr	r1, [sp, #52]	; 0x34
   28ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28ed2:	f888 4000 	strb.w	r4, [r8]
   28ed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   28ed8:	f8c8 1018 	str.w	r1, [r8, #24]
   28edc:	9910      	ldr	r1, [sp, #64]	; 0x40
   28ede:	f8c8 201c 	str.w	r2, [r8, #28]
   28ee2:	f8c8 3020 	str.w	r3, [r8, #32]
   28ee6:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   28eea:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   28eee:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   28ef2:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   28ef6:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   28efa:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   28efe:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   28f02:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   28f06:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   28f0a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   28f0e:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   28f12:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   28f16:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   28f1a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   28f1e:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   28f22:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   28f26:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   28f2a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   28f2e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   28f32:	9b18      	ldr	r3, [sp, #96]	; 0x60
   28f34:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   28f38:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   28f3c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   28f40:	f3c3 210f 	ubfx	r1, r3, #8, #16
   28f44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   28f46:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   28f4a:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   28f4e:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   28f52:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   28f56:	f3c3 230f 	ubfx	r3, r3, #8, #16
   28f5a:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   28f5e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   28f62:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   28f66:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   28f6a:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   28f6e:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   28f72:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   28f76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   28f7a:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   28f7e:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   28f82:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   28f86:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   28f8a:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   28f8e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   28f92:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   28f96:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   28f9a:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   28f9e:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   28fa2:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   28fa6:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   28faa:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   28fae:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   28fb2:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   28fb6:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   28fba:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   28fbe:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   28fc2:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   28fc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   28fc8:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   28fcc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   28fd0:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   28fd4:	f3c2 220f 	ubfx	r2, r2, #8, #16
   28fd8:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   28fdc:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   28fe0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   28fe4:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   28fe8:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   28fec:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   28ff0:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   28ff4:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   28ff8:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   28ffc:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   29000:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   29004:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   29008:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   2900c:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   29010:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   29014:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   29018:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   2901c:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   29020:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   29024:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   29028:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   2902c:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   29030:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   29034:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   29038:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   2903c:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   29040:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   29044:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   29048:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   2904c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2904e:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   29052:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   29056:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2905a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   2905c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   29060:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   29064:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   29068:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   2906c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   29070:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   29074:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   29078:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   2907c:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   29080:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   29084:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   29088:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   2908c:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   29090:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   29094:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   29098:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   2909c:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   290a0:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   290a4:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   290a8:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   290ac:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   290b0:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   290b4:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   290b8:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   290bc:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   290c0:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   290c4:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   290c8:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   290cc:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   290d0:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   290d4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   290d8:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   290dc:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   290e0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   290e2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   290e6:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   290ea:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   290ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   290f2:	f3c2 220f 	ubfx	r2, r2, #8, #16
   290f6:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   290fa:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   290fe:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   29102:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   29106:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   2910a:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   2910e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   29112:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   29116:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   2911a:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   2911e:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   29122:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   29126:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   2912a:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   2912e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   29132:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   29136:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   2913a:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   2913e:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   29142:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   29146:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   2914a:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   2914e:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   29152:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   29156:	24d8      	movs	r4, #216	; 0xd8
   29158:	e66c      	b.n	28e34 <gnss_interface_read+0xcc>
   2915a:	2039      	movs	r0, #57	; 0x39
   2915c:	f7f7 fc46 	bl	209ec <bsd_os_errno_set>
   29160:	f04f 34ff 	mov.w	r4, #4294967295
   29164:	e671      	b.n	28e4a <gnss_interface_read+0xe2>
   29166:	2016      	movs	r0, #22
   29168:	f7f7 fc40 	bl	209ec <bsd_os_errno_set>
   2916c:	f04f 34ff 	mov.w	r4, #4294967295
   29170:	e66b      	b.n	28e4a <gnss_interface_read+0xe2>
   29172:	2009      	movs	r0, #9
   29174:	f7f7 fc3a 	bl	209ec <bsd_os_errno_set>
   29178:	f04f 34ff 	mov.w	r4, #4294967295
   2917c:	e665      	b.n	28e4a <gnss_interface_read+0xe2>
   2917e:	bf00      	nop

00029180 <gnss_interface_setopt>:
   29180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29184:	f241 1402 	movw	r4, #4354	; 0x1102
   29188:	4222      	tst	r2, r4
   2918a:	b086      	sub	sp, #24
   2918c:	4d9c      	ldr	r5, [pc, #624]	; (29400 <gnss_interface_setopt+0x280>)
   2918e:	d004      	beq.n	2919a <gnss_interface_setopt+0x1a>
   29190:	682c      	ldr	r4, [r5, #0]
   29192:	b2a4      	uxth	r4, r4
   29194:	2c02      	cmp	r4, #2
   29196:	f040 8104 	bne.w	293a2 <gnss_interface_setopt+0x222>
   2919a:	682c      	ldr	r4, [r5, #0]
   2919c:	0264      	lsls	r4, r4, #9
   2919e:	f100 8128 	bmi.w	293f2 <gnss_interface_setopt+0x272>
   291a2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   291a6:	f040 811e 	bne.w	293e6 <gnss_interface_setopt+0x266>
   291aa:	4996      	ldr	r1, [pc, #600]	; (29404 <gnss_interface_setopt+0x284>)
   291ac:	4288      	cmp	r0, r1
   291ae:	f040 8114 	bne.w	293da <gnss_interface_setopt+0x25a>
   291b2:	3a01      	subs	r2, #1
   291b4:	2a08      	cmp	r2, #8
   291b6:	f200 80ec 	bhi.w	29392 <gnss_interface_setopt+0x212>
   291ba:	e8df f012 	tbh	[pc, r2, lsl #1]
   291be:	0075      	.short	0x0075
   291c0:	00c200d8 	.word	0x00c200d8
   291c4:	008100cc 	.word	0x008100cc
   291c8:	0098008c 	.word	0x0098008c
   291cc:	000900af 	.word	0x000900af
   291d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   291d2:	2a01      	cmp	r2, #1
   291d4:	f040 80dd 	bne.w	29392 <gnss_interface_setopt+0x212>
   291d8:	f241 1603 	movw	r6, #4355	; 0x1103
   291dc:	2240      	movs	r2, #64	; 0x40
   291de:	4637      	mov	r7, r6
   291e0:	781b      	ldrb	r3, [r3, #0]
   291e2:	9202      	str	r2, [sp, #8]
   291e4:	f88d 3015 	strb.w	r3, [sp, #21]
   291e8:	682b      	ldr	r3, [r5, #0]
   291ea:	2112      	movs	r1, #18
   291ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   291f0:	4668      	mov	r0, sp
   291f2:	602b      	str	r3, [r5, #0]
   291f4:	f000 fbe4 	bl	299c0 <rpc_gnss_client_request_alloc>
   291f8:	4604      	mov	r4, r0
   291fa:	9800      	ldr	r0, [sp, #0]
   291fc:	2c00      	cmp	r4, #0
   291fe:	f040 80d6 	bne.w	293ae <gnss_interface_setopt+0x22e>
   29202:	2800      	cmp	r0, #0
   29204:	f000 80da 	beq.w	293bc <gnss_interface_setopt+0x23c>
   29208:	2212      	movs	r2, #18
   2920a:	f04f 0876 	mov.w	r8, #118	; 0x76
   2920e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   29212:	f04f 0a43 	mov.w	sl, #67	; 0x43
   29216:	f04f 0954 	mov.w	r9, #84	; 0x54
   2921a:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 2940c <gnss_interface_setopt+0x28c>
   2921e:	a906      	add	r1, sp, #24
   29220:	f8bc 3000 	ldrh.w	r3, [ip]
   29224:	f880 800e 	strb.w	r8, [r0, #14]
   29228:	3301      	adds	r3, #1
   2922a:	b29b      	uxth	r3, r3
   2922c:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   29230:	f841 6d14 	str.w	r6, [r1, #-20]!
   29234:	7144      	strb	r4, [r0, #5]
   29236:	7184      	strb	r4, [r0, #6]
   29238:	71c4      	strb	r4, [r0, #7]
   2923a:	7204      	strb	r4, [r0, #8]
   2923c:	7244      	strb	r4, [r0, #9]
   2923e:	7284      	strb	r4, [r0, #10]
   29240:	72c4      	strb	r4, [r0, #11]
   29242:	7102      	strb	r2, [r0, #4]
   29244:	f880 a00c 	strb.w	sl, [r0, #12]
   29248:	f880 900d 	strb.w	r9, [r0, #13]
   2924c:	f880 e00f 	strb.w	lr, [r0, #15]
   29250:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 29410 <gnss_interface_setopt+0x290>
   29254:	6800      	ldr	r0, [r0, #0]
   29256:	f8ac 3000 	strh.w	r3, [ip]
   2925a:	f006 fddc 	bl	2fe16 <memcpy>
   2925e:	4639      	mov	r1, r7
   29260:	9800      	ldr	r0, [sp, #0]
   29262:	f8c8 4000 	str.w	r4, [r8]
   29266:	f000 fbbf 	bl	299e8 <rpc_gnss_client_request_send>
   2926a:	2800      	cmp	r0, #0
   2926c:	f040 80ab 	bne.w	293c6 <gnss_interface_setopt+0x246>
   29270:	4f65      	ldr	r7, [pc, #404]	; (29408 <gnss_interface_setopt+0x288>)
   29272:	4e64      	ldr	r6, [pc, #400]	; (29404 <gnss_interface_setopt+0x284>)
   29274:	4639      	mov	r1, r7
   29276:	4630      	mov	r0, r6
   29278:	f7f7 fb24 	bl	208c4 <bsd_os_timedwait>
   2927c:	682c      	ldr	r4, [r5, #0]
   2927e:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   29282:	d1f7      	bne.n	29274 <gnss_interface_setopt+0xf4>
   29284:	f8d8 0000 	ldr.w	r0, [r8]
   29288:	b118      	cbz	r0, 29292 <gnss_interface_setopt+0x112>
   2928a:	f000 fbcb 	bl	29a24 <rpc_gnss_client_data_free>
   2928e:	f8c8 4000 	str.w	r4, [r8]
   29292:	682b      	ldr	r3, [r5, #0]
   29294:	021b      	lsls	r3, r3, #8
   29296:	d576      	bpl.n	29386 <gnss_interface_setopt+0x206>
   29298:	2000      	movs	r0, #0
   2929a:	682b      	ldr	r3, [r5, #0]
   2929c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   292a0:	602b      	str	r3, [r5, #0]
   292a2:	b006      	add	sp, #24
   292a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   292a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   292aa:	2a02      	cmp	r2, #2
   292ac:	d171      	bne.n	29392 <gnss_interface_setopt+0x212>
   292ae:	2208      	movs	r2, #8
   292b0:	f241 1603 	movw	r6, #4355	; 0x1103
   292b4:	881b      	ldrh	r3, [r3, #0]
   292b6:	9202      	str	r2, [sp, #8]
   292b8:	f8ad 300f 	strh.w	r3, [sp, #15]
   292bc:	4637      	mov	r7, r6
   292be:	e793      	b.n	291e8 <gnss_interface_setopt+0x68>
   292c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   292c2:	2a01      	cmp	r2, #1
   292c4:	d165      	bne.n	29392 <gnss_interface_setopt+0x212>
   292c6:	f241 1603 	movw	r6, #4355	; 0x1103
   292ca:	781b      	ldrb	r3, [r3, #0]
   292cc:	9202      	str	r2, [sp, #8]
   292ce:	f88d 300c 	strb.w	r3, [sp, #12]
   292d2:	4637      	mov	r7, r6
   292d4:	e788      	b.n	291e8 <gnss_interface_setopt+0x68>
   292d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   292d8:	2a01      	cmp	r2, #1
   292da:	d15a      	bne.n	29392 <gnss_interface_setopt+0x212>
   292dc:	2202      	movs	r2, #2
   292de:	f241 1603 	movw	r6, #4355	; 0x1103
   292e2:	781b      	ldrb	r3, [r3, #0]
   292e4:	9202      	str	r2, [sp, #8]
   292e6:	f88d 300d 	strb.w	r3, [sp, #13]
   292ea:	4637      	mov	r7, r6
   292ec:	e77c      	b.n	291e8 <gnss_interface_setopt+0x68>
   292ee:	682a      	ldr	r2, [r5, #0]
   292f0:	b292      	uxth	r2, r2
   292f2:	2a02      	cmp	r2, #2
   292f4:	d155      	bne.n	293a2 <gnss_interface_setopt+0x222>
   292f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   292f8:	2a04      	cmp	r2, #4
   292fa:	d14a      	bne.n	29392 <gnss_interface_setopt+0x212>
   292fc:	2101      	movs	r1, #1
   292fe:	f241 0604 	movw	r6, #4100	; 0x1004
   29302:	682a      	ldr	r2, [r5, #0]
   29304:	6818      	ldr	r0, [r3, #0]
   29306:	0c13      	lsrs	r3, r2, #16
   29308:	041b      	lsls	r3, r3, #16
   2930a:	f043 0303 	orr.w	r3, r3, #3
   2930e:	f8cd 0009 	str.w	r0, [sp, #9]
   29312:	602b      	str	r3, [r5, #0]
   29314:	f88d 1008 	strb.w	r1, [sp, #8]
   29318:	4637      	mov	r7, r6
   2931a:	e765      	b.n	291e8 <gnss_interface_setopt+0x68>
   2931c:	682b      	ldr	r3, [r5, #0]
   2931e:	b29b      	uxth	r3, r3
   29320:	2b04      	cmp	r3, #4
   29322:	d13e      	bne.n	293a2 <gnss_interface_setopt+0x222>
   29324:	2300      	movs	r3, #0
   29326:	f241 0604 	movw	r6, #4100	; 0x1004
   2932a:	f88d 3008 	strb.w	r3, [sp, #8]
   2932e:	f88d 3009 	strb.w	r3, [sp, #9]
   29332:	f88d 300a 	strb.w	r3, [sp, #10]
   29336:	f88d 300b 	strb.w	r3, [sp, #11]
   2933a:	f88d 300c 	strb.w	r3, [sp, #12]
   2933e:	4637      	mov	r7, r6
   29340:	e752      	b.n	291e8 <gnss_interface_setopt+0x68>
   29342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   29344:	2a01      	cmp	r2, #1
   29346:	d124      	bne.n	29392 <gnss_interface_setopt+0x212>
   29348:	781b      	ldrb	r3, [r3, #0]
   2934a:	2b01      	cmp	r3, #1
   2934c:	d121      	bne.n	29392 <gnss_interface_setopt+0x212>
   2934e:	f241 1603 	movw	r6, #4355	; 0x1103
   29352:	4637      	mov	r7, r6
   29354:	e748      	b.n	291e8 <gnss_interface_setopt+0x68>
   29356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   29358:	2a02      	cmp	r2, #2
   2935a:	d11a      	bne.n	29392 <gnss_interface_setopt+0x212>
   2935c:	2220      	movs	r2, #32
   2935e:	f241 1603 	movw	r6, #4355	; 0x1103
   29362:	881b      	ldrh	r3, [r3, #0]
   29364:	9202      	str	r2, [sp, #8]
   29366:	f8ad 3013 	strh.w	r3, [sp, #19]
   2936a:	4637      	mov	r7, r6
   2936c:	e73c      	b.n	291e8 <gnss_interface_setopt+0x68>
   2936e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   29370:	2a02      	cmp	r2, #2
   29372:	d10e      	bne.n	29392 <gnss_interface_setopt+0x212>
   29374:	2210      	movs	r2, #16
   29376:	f241 1603 	movw	r6, #4355	; 0x1103
   2937a:	881b      	ldrh	r3, [r3, #0]
   2937c:	9202      	str	r2, [sp, #8]
   2937e:	f8ad 3011 	strh.w	r3, [sp, #17]
   29382:	4637      	mov	r7, r6
   29384:	e730      	b.n	291e8 <gnss_interface_setopt+0x68>
   29386:	200e      	movs	r0, #14
   29388:	f7f7 fb30 	bl	209ec <bsd_os_errno_set>
   2938c:	f04f 30ff 	mov.w	r0, #4294967295
   29390:	e783      	b.n	2929a <gnss_interface_setopt+0x11a>
   29392:	2016      	movs	r0, #22
   29394:	f7f7 fb2a 	bl	209ec <bsd_os_errno_set>
   29398:	f04f 30ff 	mov.w	r0, #4294967295
   2939c:	b006      	add	sp, #24
   2939e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   293a2:	200e      	movs	r0, #14
   293a4:	f7f7 fb22 	bl	209ec <bsd_os_errno_set>
   293a8:	f04f 30ff 	mov.w	r0, #4294967295
   293ac:	e779      	b.n	292a2 <gnss_interface_setopt+0x122>
   293ae:	b128      	cbz	r0, 293bc <gnss_interface_setopt+0x23c>
   293b0:	6803      	ldr	r3, [r0, #0]
   293b2:	b11b      	cbz	r3, 293bc <gnss_interface_setopt+0x23c>
   293b4:	4618      	mov	r0, r3
   293b6:	f000 fb35 	bl	29a24 <rpc_gnss_client_data_free>
   293ba:	9800      	ldr	r0, [sp, #0]
   293bc:	f000 fb2a 	bl	29a14 <rpc_gnss_client_message_free>
   293c0:	2023      	movs	r0, #35	; 0x23
   293c2:	f7f7 fb13 	bl	209ec <bsd_os_errno_set>
   293c6:	682b      	ldr	r3, [r5, #0]
   293c8:	200e      	movs	r0, #14
   293ca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   293ce:	602b      	str	r3, [r5, #0]
   293d0:	f7f7 fb0c 	bl	209ec <bsd_os_errno_set>
   293d4:	f04f 30ff 	mov.w	r0, #4294967295
   293d8:	e763      	b.n	292a2 <gnss_interface_setopt+0x122>
   293da:	2009      	movs	r0, #9
   293dc:	f7f7 fb06 	bl	209ec <bsd_os_errno_set>
   293e0:	f04f 30ff 	mov.w	r0, #4294967295
   293e4:	e75d      	b.n	292a2 <gnss_interface_setopt+0x122>
   293e6:	202a      	movs	r0, #42	; 0x2a
   293e8:	f7f7 fb00 	bl	209ec <bsd_os_errno_set>
   293ec:	f04f 30ff 	mov.w	r0, #4294967295
   293f0:	e757      	b.n	292a2 <gnss_interface_setopt+0x122>
   293f2:	2073      	movs	r0, #115	; 0x73
   293f4:	f7f7 fafa 	bl	209ec <bsd_os_errno_set>
   293f8:	f04f 30ff 	mov.w	r0, #4294967295
   293fc:	e751      	b.n	292a2 <gnss_interface_setopt+0x122>
   293fe:	bf00      	nop
   29400:	20020a30 	.word	0x20020a30
   29404:	49765443 	.word	0x49765443
   29408:	2002674c 	.word	0x2002674c
   2940c:	200214fa 	.word	0x200214fa
   29410:	20020a34 	.word	0x20020a34

00029414 <gnss_interface_getopt>:
   29414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29418:	4c81      	ldr	r4, [pc, #516]	; (29620 <gnss_interface_getopt+0x20c>)
   2941a:	b087      	sub	sp, #28
   2941c:	6825      	ldr	r5, [r4, #0]
   2941e:	4698      	mov	r8, r3
   29420:	b2ad      	uxth	r5, r5
   29422:	2d02      	cmp	r5, #2
   29424:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29426:	f040 80dd 	bne.w	295e4 <gnss_interface_getopt+0x1d0>
   2942a:	6825      	ldr	r5, [r4, #0]
   2942c:	03ee      	lsls	r6, r5, #15
   2942e:	f100 80eb 	bmi.w	29608 <gnss_interface_getopt+0x1f4>
   29432:	6825      	ldr	r5, [r4, #0]
   29434:	01ed      	lsls	r5, r5, #7
   29436:	f100 80ed 	bmi.w	29614 <gnss_interface_getopt+0x200>
   2943a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2943e:	f040 80d7 	bne.w	295f0 <gnss_interface_getopt+0x1dc>
   29442:	4978      	ldr	r1, [pc, #480]	; (29624 <gnss_interface_getopt+0x210>)
   29444:	4288      	cmp	r0, r1
   29446:	f040 80d9 	bne.w	295fc <gnss_interface_getopt+0x1e8>
   2944a:	f1b8 0f00 	cmp.w	r8, #0
   2944e:	d00b      	beq.n	29468 <gnss_interface_getopt+0x54>
   29450:	b153      	cbz	r3, 29468 <gnss_interface_getopt+0x54>
   29452:	1e57      	subs	r7, r2, #1
   29454:	2f05      	cmp	r7, #5
   29456:	d807      	bhi.n	29468 <gnss_interface_getopt+0x54>
   29458:	e8df f007 	tbb	[pc, r7]
   2945c:	0f030f0f 	.word	0x0f030f0f
   29460:	0303      	.short	0x0303
   29462:	681b      	ldr	r3, [r3, #0]
   29464:	2b01      	cmp	r3, #1
   29466:	d00b      	beq.n	29480 <gnss_interface_getopt+0x6c>
   29468:	2016      	movs	r0, #22
   2946a:	f7f7 fabf 	bl	209ec <bsd_os_errno_set>
   2946e:	f04f 35ff 	mov.w	r5, #4294967295
   29472:	4628      	mov	r0, r5
   29474:	b007      	add	sp, #28
   29476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2947a:	681b      	ldr	r3, [r3, #0]
   2947c:	2b02      	cmp	r3, #2
   2947e:	d1f3      	bne.n	29468 <gnss_interface_getopt+0x54>
   29480:	6823      	ldr	r3, [r4, #0]
   29482:	2212      	movs	r2, #18
   29484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   29488:	2100      	movs	r1, #0
   2948a:	a801      	add	r0, sp, #4
   2948c:	6023      	str	r3, [r4, #0]
   2948e:	f006 fccf 	bl	2fe30 <memset>
   29492:	2112      	movs	r1, #18
   29494:	4668      	mov	r0, sp
   29496:	f000 fa93 	bl	299c0 <rpc_gnss_client_request_alloc>
   2949a:	4605      	mov	r5, r0
   2949c:	9800      	ldr	r0, [sp, #0]
   2949e:	2d00      	cmp	r5, #0
   294a0:	f040 808a 	bne.w	295b8 <gnss_interface_getopt+0x1a4>
   294a4:	2800      	cmp	r0, #0
   294a6:	f000 808e 	beq.w	295c6 <gnss_interface_getopt+0x1b2>
   294aa:	f241 1602 	movw	r6, #4354	; 0x1102
   294ae:	f04f 0e49 	mov.w	lr, #73	; 0x49
   294b2:	2212      	movs	r2, #18
   294b4:	f04f 0976 	mov.w	r9, #118	; 0x76
   294b8:	f04f 0b43 	mov.w	fp, #67	; 0x43
   294bc:	f04f 0a54 	mov.w	sl, #84	; 0x54
   294c0:	f8df c168 	ldr.w	ip, [pc, #360]	; 2962c <gnss_interface_getopt+0x218>
   294c4:	f880 e00f 	strb.w	lr, [r0, #15]
   294c8:	f8bc 3000 	ldrh.w	r3, [ip]
   294cc:	f880 900e 	strb.w	r9, [r0, #14]
   294d0:	3301      	adds	r3, #1
   294d2:	b29b      	uxth	r3, r3
   294d4:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   294d8:	f8cd e004 	str.w	lr, [sp, #4]
   294dc:	7145      	strb	r5, [r0, #5]
   294de:	7185      	strb	r5, [r0, #6]
   294e0:	71c5      	strb	r5, [r0, #7]
   294e2:	7205      	strb	r5, [r0, #8]
   294e4:	7245      	strb	r5, [r0, #9]
   294e6:	7285      	strb	r5, [r0, #10]
   294e8:	72c5      	strb	r5, [r0, #11]
   294ea:	a901      	add	r1, sp, #4
   294ec:	7102      	strb	r2, [r0, #4]
   294ee:	f880 b00c 	strb.w	fp, [r0, #12]
   294f2:	f880 a00d 	strb.w	sl, [r0, #13]
   294f6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 29630 <gnss_interface_getopt+0x21c>
   294fa:	6800      	ldr	r0, [r0, #0]
   294fc:	f8ac 3000 	strh.w	r3, [ip]
   29500:	f006 fc89 	bl	2fe16 <memcpy>
   29504:	4631      	mov	r1, r6
   29506:	9800      	ldr	r0, [sp, #0]
   29508:	f8c9 5000 	str.w	r5, [r9]
   2950c:	f000 fa6c 	bl	299e8 <rpc_gnss_client_request_send>
   29510:	2800      	cmp	r0, #0
   29512:	d15d      	bne.n	295d0 <gnss_interface_getopt+0x1bc>
   29514:	4e44      	ldr	r6, [pc, #272]	; (29628 <gnss_interface_getopt+0x214>)
   29516:	4d43      	ldr	r5, [pc, #268]	; (29624 <gnss_interface_getopt+0x210>)
   29518:	4631      	mov	r1, r6
   2951a:	4628      	mov	r0, r5
   2951c:	f7f7 f9d2 	bl	208c4 <bsd_os_timedwait>
   29520:	6823      	ldr	r3, [r4, #0]
   29522:	01db      	lsls	r3, r3, #7
   29524:	d4f8      	bmi.n	29518 <gnss_interface_getopt+0x104>
   29526:	f8d9 0000 	ldr.w	r0, [r9]
   2952a:	b1d8      	cbz	r0, 29564 <gnss_interface_getopt+0x150>
   2952c:	6825      	ldr	r5, [r4, #0]
   2952e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   29532:	d00f      	beq.n	29554 <gnss_interface_getopt+0x140>
   29534:	2f05      	cmp	r7, #5
   29536:	d837      	bhi.n	295a8 <gnss_interface_getopt+0x194>
   29538:	e8df f007 	tbb	[pc, r7]
   2953c:	2b26201a 	.word	0x2b26201a
   29540:	0331      	.short	0x0331
   29542:	2500      	movs	r5, #0
   29544:	7b43      	ldrb	r3, [r0, #13]
   29546:	f888 3000 	strb.w	r3, [r8]
   2954a:	f000 fa6b 	bl	29a24 <rpc_gnss_client_data_free>
   2954e:	2300      	movs	r3, #0
   29550:	f8c9 3000 	str.w	r3, [r9]
   29554:	6823      	ldr	r3, [r4, #0]
   29556:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2955a:	6023      	str	r3, [r4, #0]
   2955c:	4628      	mov	r0, r5
   2955e:	b007      	add	sp, #28
   29560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29564:	6823      	ldr	r3, [r4, #0]
   29566:	4605      	mov	r5, r0
   29568:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2956c:	6023      	str	r3, [r4, #0]
   2956e:	e7f5      	b.n	2955c <gnss_interface_getopt+0x148>
   29570:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   29574:	2500      	movs	r5, #0
   29576:	f8a8 3000 	strh.w	r3, [r8]
   2957a:	e7e6      	b.n	2954a <gnss_interface_getopt+0x136>
   2957c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   29580:	2500      	movs	r5, #0
   29582:	f8a8 3000 	strh.w	r3, [r8]
   29586:	e7e0      	b.n	2954a <gnss_interface_getopt+0x136>
   29588:	7b83      	ldrb	r3, [r0, #14]
   2958a:	2500      	movs	r5, #0
   2958c:	f888 3000 	strb.w	r3, [r8]
   29590:	e7db      	b.n	2954a <gnss_interface_getopt+0x136>
   29592:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   29596:	2500      	movs	r5, #0
   29598:	f8a8 3000 	strh.w	r3, [r8]
   2959c:	e7d5      	b.n	2954a <gnss_interface_getopt+0x136>
   2959e:	7b03      	ldrb	r3, [r0, #12]
   295a0:	2500      	movs	r5, #0
   295a2:	f888 3000 	strb.w	r3, [r8]
   295a6:	e7d0      	b.n	2954a <gnss_interface_getopt+0x136>
   295a8:	2016      	movs	r0, #22
   295aa:	f7f7 fa1f 	bl	209ec <bsd_os_errno_set>
   295ae:	f04f 35ff 	mov.w	r5, #4294967295
   295b2:	f8d9 0000 	ldr.w	r0, [r9]
   295b6:	e7c8      	b.n	2954a <gnss_interface_getopt+0x136>
   295b8:	b128      	cbz	r0, 295c6 <gnss_interface_getopt+0x1b2>
   295ba:	6803      	ldr	r3, [r0, #0]
   295bc:	b11b      	cbz	r3, 295c6 <gnss_interface_getopt+0x1b2>
   295be:	4618      	mov	r0, r3
   295c0:	f000 fa30 	bl	29a24 <rpc_gnss_client_data_free>
   295c4:	9800      	ldr	r0, [sp, #0]
   295c6:	f000 fa25 	bl	29a14 <rpc_gnss_client_message_free>
   295ca:	2023      	movs	r0, #35	; 0x23
   295cc:	f7f7 fa0e 	bl	209ec <bsd_os_errno_set>
   295d0:	6823      	ldr	r3, [r4, #0]
   295d2:	200e      	movs	r0, #14
   295d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   295d8:	6023      	str	r3, [r4, #0]
   295da:	f04f 35ff 	mov.w	r5, #4294967295
   295de:	f7f7 fa05 	bl	209ec <bsd_os_errno_set>
   295e2:	e746      	b.n	29472 <gnss_interface_getopt+0x5e>
   295e4:	200e      	movs	r0, #14
   295e6:	f7f7 fa01 	bl	209ec <bsd_os_errno_set>
   295ea:	f04f 35ff 	mov.w	r5, #4294967295
   295ee:	e740      	b.n	29472 <gnss_interface_getopt+0x5e>
   295f0:	202a      	movs	r0, #42	; 0x2a
   295f2:	f7f7 f9fb 	bl	209ec <bsd_os_errno_set>
   295f6:	f04f 35ff 	mov.w	r5, #4294967295
   295fa:	e73a      	b.n	29472 <gnss_interface_getopt+0x5e>
   295fc:	2009      	movs	r0, #9
   295fe:	f7f7 f9f5 	bl	209ec <bsd_os_errno_set>
   29602:	f04f 35ff 	mov.w	r5, #4294967295
   29606:	e734      	b.n	29472 <gnss_interface_getopt+0x5e>
   29608:	2005      	movs	r0, #5
   2960a:	f7f7 f9ef 	bl	209ec <bsd_os_errno_set>
   2960e:	f04f 35ff 	mov.w	r5, #4294967295
   29612:	e72e      	b.n	29472 <gnss_interface_getopt+0x5e>
   29614:	2073      	movs	r0, #115	; 0x73
   29616:	f7f7 f9e9 	bl	209ec <bsd_os_errno_set>
   2961a:	f04f 35ff 	mov.w	r5, #4294967295
   2961e:	e728      	b.n	29472 <gnss_interface_getopt+0x5e>
   29620:	20020a30 	.word	0x20020a30
   29624:	49765443 	.word	0x49765443
   29628:	2002674c 	.word	0x2002674c
   2962c:	200214fa 	.word	0x200214fa
   29630:	20020a34 	.word	0x20020a34

00029634 <gnss_interface_init>:
   29634:	2100      	movs	r1, #0
   29636:	b538      	push	{r3, r4, r5, lr}
   29638:	4c09      	ldr	r4, [pc, #36]	; (29660 <gnss_interface_init+0x2c>)
   2963a:	4d0a      	ldr	r5, [pc, #40]	; (29664 <gnss_interface_init+0x30>)
   2963c:	6822      	ldr	r2, [r4, #0]
   2963e:	480a      	ldr	r0, [pc, #40]	; (29668 <gnss_interface_init+0x34>)
   29640:	4b0a      	ldr	r3, [pc, #40]	; (2966c <gnss_interface_init+0x38>)
   29642:	402a      	ands	r2, r5
   29644:	6022      	str	r2, [r4, #0]
   29646:	8001      	strh	r1, [r0, #0]
   29648:	6019      	str	r1, [r3, #0]
   2964a:	f000 f9b3 	bl	299b4 <rpc_gnss_client_init>
   2964e:	b928      	cbnz	r0, 2965c <gnss_interface_init+0x28>
   29650:	6823      	ldr	r3, [r4, #0]
   29652:	402b      	ands	r3, r5
   29654:	f043 0301 	orr.w	r3, r3, #1
   29658:	6023      	str	r3, [r4, #0]
   2965a:	bd38      	pop	{r3, r4, r5, pc}
   2965c:	2003      	movs	r0, #3
   2965e:	bd38      	pop	{r3, r4, r5, pc}
   29660:	20020a30 	.word	0x20020a30
   29664:	ffff0000 	.word	0xffff0000
   29668:	200214fa 	.word	0x200214fa
   2966c:	20020a34 	.word	0x20020a34

00029670 <gnss_interface_open>:
   29670:	2902      	cmp	r1, #2
   29672:	b510      	push	{r4, lr}
   29674:	d121      	bne.n	296ba <gnss_interface_open+0x4a>
   29676:	4c14      	ldr	r4, [pc, #80]	; (296c8 <gnss_interface_open+0x58>)
   29678:	6823      	ldr	r3, [r4, #0]
   2967a:	b29b      	uxth	r3, r3
   2967c:	2b01      	cmp	r3, #1
   2967e:	d116      	bne.n	296ae <gnss_interface_open+0x3e>
   29680:	6823      	ldr	r3, [r4, #0]
   29682:	4608      	mov	r0, r1
   29684:	0c1b      	lsrs	r3, r3, #16
   29686:	041b      	lsls	r3, r3, #16
   29688:	f043 0302 	orr.w	r3, r3, #2
   2968c:	2200      	movs	r2, #0
   2968e:	490f      	ldr	r1, [pc, #60]	; (296cc <gnss_interface_open+0x5c>)
   29690:	6023      	str	r3, [r4, #0]
   29692:	f000 faad 	bl	29bf0 <packet_handler_create>
   29696:	4a0e      	ldr	r2, [pc, #56]	; (296d0 <gnss_interface_open+0x60>)
   29698:	6010      	str	r0, [r2, #0]
   2969a:	b140      	cbz	r0, 296ae <gnss_interface_open+0x3e>
   2969c:	6823      	ldr	r3, [r4, #0]
   2969e:	6802      	ldr	r2, [r0, #0]
   296a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   296a4:	6812      	ldr	r2, [r2, #0]
   296a6:	6023      	str	r3, [r4, #0]
   296a8:	4790      	blx	r2
   296aa:	480a      	ldr	r0, [pc, #40]	; (296d4 <gnss_interface_open+0x64>)
   296ac:	bd10      	pop	{r4, pc}
   296ae:	200e      	movs	r0, #14
   296b0:	f7f7 f99c 	bl	209ec <bsd_os_errno_set>
   296b4:	f04f 30ff 	mov.w	r0, #4294967295
   296b8:	bd10      	pop	{r4, pc}
   296ba:	2029      	movs	r0, #41	; 0x29
   296bc:	f7f7 f996 	bl	209ec <bsd_os_errno_set>
   296c0:	f04f 30ff 	mov.w	r0, #4294967295
   296c4:	bd10      	pop	{r4, pc}
   296c6:	bf00      	nop
   296c8:	20020a30 	.word	0x20020a30
   296cc:	000289b9 	.word	0x000289b9
   296d0:	20020a38 	.word	0x20020a38
   296d4:	49765443 	.word	0x49765443

000296d8 <gnss_interface_close>:
   296d8:	b530      	push	{r4, r5, lr}
   296da:	4b13      	ldr	r3, [pc, #76]	; (29728 <gnss_interface_close+0x50>)
   296dc:	b083      	sub	sp, #12
   296de:	4298      	cmp	r0, r3
   296e0:	d11c      	bne.n	2971c <gnss_interface_close+0x44>
   296e2:	4c12      	ldr	r4, [pc, #72]	; (2972c <gnss_interface_close+0x54>)
   296e4:	6823      	ldr	r3, [r4, #0]
   296e6:	b29b      	uxth	r3, r3
   296e8:	2b04      	cmp	r3, #4
   296ea:	d00f      	beq.n	2970c <gnss_interface_close+0x34>
   296ec:	4d10      	ldr	r5, [pc, #64]	; (29730 <gnss_interface_close+0x58>)
   296ee:	6828      	ldr	r0, [r5, #0]
   296f0:	b118      	cbz	r0, 296fa <gnss_interface_close+0x22>
   296f2:	f000 fa9d 	bl	29c30 <packet_handler_delete>
   296f6:	2300      	movs	r3, #0
   296f8:	602b      	str	r3, [r5, #0]
   296fa:	2000      	movs	r0, #0
   296fc:	6823      	ldr	r3, [r4, #0]
   296fe:	0c1b      	lsrs	r3, r3, #16
   29700:	041b      	lsls	r3, r3, #16
   29702:	f043 0301 	orr.w	r3, r3, #1
   29706:	6023      	str	r3, [r4, #0]
   29708:	b003      	add	sp, #12
   2970a:	bd30      	pop	{r4, r5, pc}
   2970c:	2300      	movs	r3, #0
   2970e:	2208      	movs	r2, #8
   29710:	9300      	str	r3, [sp, #0]
   29712:	f44f 7101 	mov.w	r1, #516	; 0x204
   29716:	f7fc fe31 	bl	2637c <nrf_setsockopt>
   2971a:	e7e7      	b.n	296ec <gnss_interface_close+0x14>
   2971c:	2009      	movs	r0, #9
   2971e:	f7f7 f965 	bl	209ec <bsd_os_errno_set>
   29722:	f04f 30ff 	mov.w	r0, #4294967295
   29726:	e7ef      	b.n	29708 <gnss_interface_close+0x30>
   29728:	49765443 	.word	0x49765443
   2972c:	20020a30 	.word	0x20020a30
   29730:	20020a38 	.word	0x20020a38

00029734 <rpc_gnss_serialize_utc>:
   29734:	4603      	mov	r3, r0
   29736:	b1d8      	cbz	r0, 29770 <rpc_gnss_serialize_utc+0x3c>
   29738:	b1d1      	cbz	r1, 29770 <rpc_gnss_serialize_utc+0x3c>
   2973a:	2000      	movs	r0, #0
   2973c:	2201      	movs	r2, #1
   2973e:	7048      	strb	r0, [r1, #1]
   29740:	700a      	strb	r2, [r1, #0]
   29742:	685a      	ldr	r2, [r3, #4]
   29744:	2010      	movs	r0, #16
   29746:	f8c1 2006 	str.w	r2, [r1, #6]
   2974a:	681a      	ldr	r2, [r3, #0]
   2974c:	f8c1 2002 	str.w	r2, [r1, #2]
   29750:	f993 200a 	ldrsb.w	r2, [r3, #10]
   29754:	730a      	strb	r2, [r1, #12]
   29756:	f993 200d 	ldrsb.w	r2, [r3, #13]
   2975a:	73ca      	strb	r2, [r1, #15]
   2975c:	f993 200c 	ldrsb.w	r2, [r3, #12]
   29760:	738a      	strb	r2, [r1, #14]
   29762:	7a1a      	ldrb	r2, [r3, #8]
   29764:	728a      	strb	r2, [r1, #10]
   29766:	7ada      	ldrb	r2, [r3, #11]
   29768:	734a      	strb	r2, [r1, #13]
   2976a:	7a5b      	ldrb	r3, [r3, #9]
   2976c:	72cb      	strb	r3, [r1, #11]
   2976e:	4770      	bx	lr
   29770:	f04f 30ff 	mov.w	r0, #4294967295
   29774:	4770      	bx	lr
   29776:	bf00      	nop

00029778 <rpc_gnss_serialize_ephe>:
   29778:	4603      	mov	r3, r0
   2977a:	2800      	cmp	r0, #0
   2977c:	d04b      	beq.n	29816 <rpc_gnss_serialize_ephe+0x9e>
   2977e:	2900      	cmp	r1, #0
   29780:	d049      	beq.n	29816 <rpc_gnss_serialize_ephe+0x9e>
   29782:	2000      	movs	r0, #0
   29784:	2202      	movs	r2, #2
   29786:	7048      	strb	r0, [r1, #1]
   29788:	700a      	strb	r2, [r1, #0]
   2978a:	68da      	ldr	r2, [r3, #12]
   2978c:	2040      	movs	r0, #64	; 0x40
   2978e:	f8c1 200b 	str.w	r2, [r1, #11]
   29792:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   29796:	f8a1 2009 	strh.w	r2, [r1, #9]
   2979a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2979e:	720a      	strb	r2, [r1, #8]
   297a0:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   297a4:	878a      	strh	r2, [r1, #60]	; 0x3c
   297a6:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   297aa:	86ca      	strh	r2, [r1, #54]	; 0x36
   297ac:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   297b0:	874a      	strh	r2, [r1, #58]	; 0x3a
   297b2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   297b6:	868a      	strh	r2, [r1, #52]	; 0x34
   297b8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   297bc:	87ca      	strh	r2, [r1, #62]	; 0x3e
   297be:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   297c2:	870a      	strh	r2, [r1, #56]	; 0x38
   297c4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   297c8:	830a      	strh	r2, [r1, #24]
   297ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   297cc:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   297d0:	7c9a      	ldrb	r2, [r3, #18]
   297d2:	744a      	strb	r2, [r1, #17]
   297d4:	785a      	ldrb	r2, [r3, #1]
   297d6:	70ca      	strb	r2, [r1, #3]
   297d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   297da:	62ca      	str	r2, [r1, #44]	; 0x2c
   297dc:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   297e0:	84ca      	strh	r2, [r1, #38]	; 0x26
   297e2:	885a      	ldrh	r2, [r3, #2]
   297e4:	808a      	strh	r2, [r1, #4]
   297e6:	6a1a      	ldr	r2, [r3, #32]
   297e8:	f8c1 201a 	str.w	r2, [r1, #26]
   297ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   297ee:	630a      	str	r2, [r1, #48]	; 0x30
   297f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   297f2:	f8c1 201e 	str.w	r2, [r1, #30]
   297f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   297f8:	628a      	str	r2, [r1, #40]	; 0x28
   297fa:	781a      	ldrb	r2, [r3, #0]
   297fc:	708a      	strb	r2, [r1, #2]
   297fe:	f993 2010 	ldrsb.w	r2, [r3, #16]
   29802:	73ca      	strb	r2, [r1, #15]
   29804:	889a      	ldrh	r2, [r3, #4]
   29806:	80ca      	strh	r2, [r1, #6]
   29808:	8a9a      	ldrh	r2, [r3, #20]
   2980a:	824a      	strh	r2, [r1, #18]
   2980c:	7c5a      	ldrb	r2, [r3, #17]
   2980e:	740a      	strb	r2, [r1, #16]
   29810:	699b      	ldr	r3, [r3, #24]
   29812:	614b      	str	r3, [r1, #20]
   29814:	4770      	bx	lr
   29816:	f04f 30ff 	mov.w	r0, #4294967295
   2981a:	4770      	bx	lr

0002981c <rpc_gnss_serialize_alm>:
   2981c:	4603      	mov	r3, r0
   2981e:	b360      	cbz	r0, 2987a <rpc_gnss_serialize_alm+0x5e>
   29820:	b359      	cbz	r1, 2987a <rpc_gnss_serialize_alm+0x5e>
   29822:	2000      	movs	r0, #0
   29824:	2203      	movs	r2, #3
   29826:	7048      	strb	r0, [r1, #1]
   29828:	700a      	strb	r2, [r1, #0]
   2982a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2982e:	2021      	movs	r0, #33	; 0x21
   29830:	f8a1 201d 	strh.w	r2, [r1, #29]
   29834:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   29838:	f8a1 201f 	strh.w	r2, [r1, #31]
   2983c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   29840:	810a      	strh	r2, [r1, #8]
   29842:	889a      	ldrh	r2, [r3, #4]
   29844:	80ca      	strh	r2, [r1, #6]
   29846:	78da      	ldrb	r2, [r3, #3]
   29848:	714a      	strb	r2, [r1, #5]
   2984a:	699a      	ldr	r2, [r3, #24]
   2984c:	f8c1 2019 	str.w	r2, [r1, #25]
   29850:	691a      	ldr	r2, [r3, #16]
   29852:	f8c1 2011 	str.w	r2, [r1, #17]
   29856:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2985a:	814a      	strh	r2, [r1, #10]
   2985c:	68da      	ldr	r2, [r3, #12]
   2985e:	f8c1 200d 	str.w	r2, [r1, #13]
   29862:	7a9a      	ldrb	r2, [r3, #10]
   29864:	730a      	strb	r2, [r1, #12]
   29866:	781a      	ldrb	r2, [r3, #0]
   29868:	708a      	strb	r2, [r1, #2]
   2986a:	789a      	ldrb	r2, [r3, #2]
   2986c:	710a      	strb	r2, [r1, #4]
   2986e:	695a      	ldr	r2, [r3, #20]
   29870:	f8c1 2015 	str.w	r2, [r1, #21]
   29874:	785b      	ldrb	r3, [r3, #1]
   29876:	70cb      	strb	r3, [r1, #3]
   29878:	4770      	bx	lr
   2987a:	f04f 30ff 	mov.w	r0, #4294967295
   2987e:	4770      	bx	lr

00029880 <rpc_gnss_serialize_klob>:
   29880:	4603      	mov	r3, r0
   29882:	b1f0      	cbz	r0, 298c2 <rpc_gnss_serialize_klob+0x42>
   29884:	b1e9      	cbz	r1, 298c2 <rpc_gnss_serialize_klob+0x42>
   29886:	2000      	movs	r0, #0
   29888:	2204      	movs	r2, #4
   2988a:	7048      	strb	r0, [r1, #1]
   2988c:	700a      	strb	r2, [r1, #0]
   2988e:	f993 2000 	ldrsb.w	r2, [r3]
   29892:	200a      	movs	r0, #10
   29894:	708a      	strb	r2, [r1, #2]
   29896:	f993 2001 	ldrsb.w	r2, [r3, #1]
   2989a:	70ca      	strb	r2, [r1, #3]
   2989c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   298a0:	710a      	strb	r2, [r1, #4]
   298a2:	f993 2003 	ldrsb.w	r2, [r3, #3]
   298a6:	714a      	strb	r2, [r1, #5]
   298a8:	f993 2004 	ldrsb.w	r2, [r3, #4]
   298ac:	718a      	strb	r2, [r1, #6]
   298ae:	f993 2005 	ldrsb.w	r2, [r3, #5]
   298b2:	71ca      	strb	r2, [r1, #7]
   298b4:	f993 2006 	ldrsb.w	r2, [r3, #6]
   298b8:	720a      	strb	r2, [r1, #8]
   298ba:	f993 3007 	ldrsb.w	r3, [r3, #7]
   298be:	724b      	strb	r3, [r1, #9]
   298c0:	4770      	bx	lr
   298c2:	f04f 30ff 	mov.w	r0, #4294967295
   298c6:	4770      	bx	lr

000298c8 <rpc_gnss_serialize_nequick>:
   298c8:	4603      	mov	r3, r0
   298ca:	b198      	cbz	r0, 298f4 <rpc_gnss_serialize_nequick+0x2c>
   298cc:	b191      	cbz	r1, 298f4 <rpc_gnss_serialize_nequick+0x2c>
   298ce:	2000      	movs	r0, #0
   298d0:	2205      	movs	r2, #5
   298d2:	7048      	strb	r0, [r1, #1]
   298d4:	700a      	strb	r2, [r1, #0]
   298d6:	f9b3 2000 	ldrsh.w	r2, [r3]
   298da:	200a      	movs	r0, #10
   298dc:	804a      	strh	r2, [r1, #2]
   298de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   298e2:	808a      	strh	r2, [r1, #4]
   298e4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   298e8:	80ca      	strh	r2, [r1, #6]
   298ea:	799a      	ldrb	r2, [r3, #6]
   298ec:	720a      	strb	r2, [r1, #8]
   298ee:	79db      	ldrb	r3, [r3, #7]
   298f0:	724b      	strb	r3, [r1, #9]
   298f2:	4770      	bx	lr
   298f4:	f04f 30ff 	mov.w	r0, #4294967295
   298f8:	4770      	bx	lr
   298fa:	bf00      	nop

000298fc <rpc_gnss_serialize_time_and_sv_tow>:
   298fc:	b310      	cbz	r0, 29944 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   298fe:	b309      	cbz	r1, 29944 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   29900:	b470      	push	{r4, r5, r6}
   29902:	2500      	movs	r5, #0
   29904:	2606      	movs	r6, #6
   29906:	460c      	mov	r4, r1
   29908:	704d      	strb	r5, [r1, #1]
   2990a:	700e      	strb	r6, [r1, #0]
   2990c:	462b      	mov	r3, r5
   2990e:	8805      	ldrh	r5, [r0, #0]
   29910:	4602      	mov	r2, r0
   29912:	804d      	strh	r5, [r1, #2]
   29914:	68c5      	ldr	r5, [r0, #12]
   29916:	f8c1 500a 	str.w	r5, [r1, #10]
   2991a:	8905      	ldrh	r5, [r0, #8]
   2991c:	810d      	strh	r5, [r1, #8]
   2991e:	6840      	ldr	r0, [r0, #4]
   29920:	6048      	str	r0, [r1, #4]
   29922:	8a15      	ldrh	r5, [r2, #16]
   29924:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   29928:	4408      	add	r0, r1
   2992a:	81c5      	strh	r5, [r0, #14]
   2992c:	7c90      	ldrb	r0, [r2, #18]
   2992e:	3301      	adds	r3, #1
   29930:	2b20      	cmp	r3, #32
   29932:	7420      	strb	r0, [r4, #16]
   29934:	f102 0204 	add.w	r2, r2, #4
   29938:	f104 0403 	add.w	r4, r4, #3
   2993c:	d1f1      	bne.n	29922 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   2993e:	206e      	movs	r0, #110	; 0x6e
   29940:	bc70      	pop	{r4, r5, r6}
   29942:	4770      	bx	lr
   29944:	f04f 30ff 	mov.w	r0, #4294967295
   29948:	4770      	bx	lr
   2994a:	bf00      	nop

0002994c <rpc_gnss_serialize_location>:
   2994c:	4603      	mov	r3, r0
   2994e:	b1c8      	cbz	r0, 29984 <rpc_gnss_serialize_location+0x38>
   29950:	b1c1      	cbz	r1, 29984 <rpc_gnss_serialize_location+0x38>
   29952:	2000      	movs	r0, #0
   29954:	2207      	movs	r2, #7
   29956:	7048      	strb	r0, [r1, #1]
   29958:	700a      	strb	r2, [r1, #0]
   2995a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2995e:	2011      	movs	r0, #17
   29960:	814a      	strh	r2, [r1, #10]
   29962:	7b9a      	ldrb	r2, [r3, #14]
   29964:	740a      	strb	r2, [r1, #16]
   29966:	681a      	ldr	r2, [r3, #0]
   29968:	f8c1 2002 	str.w	r2, [r1, #2]
   2996c:	685a      	ldr	r2, [r3, #4]
   2996e:	f8c1 2006 	str.w	r2, [r1, #6]
   29972:	7b1a      	ldrb	r2, [r3, #12]
   29974:	738a      	strb	r2, [r1, #14]
   29976:	7b5a      	ldrb	r2, [r3, #13]
   29978:	73ca      	strb	r2, [r1, #15]
   2997a:	7a9a      	ldrb	r2, [r3, #10]
   2997c:	730a      	strb	r2, [r1, #12]
   2997e:	7adb      	ldrb	r3, [r3, #11]
   29980:	734b      	strb	r3, [r1, #13]
   29982:	4770      	bx	lr
   29984:	f04f 30ff 	mov.w	r0, #4294967295
   29988:	4770      	bx	lr
   2998a:	bf00      	nop

0002998c <rpc_gnss_serialize_integrity>:
   2998c:	b148      	cbz	r0, 299a2 <rpc_gnss_serialize_integrity+0x16>
   2998e:	b141      	cbz	r1, 299a2 <rpc_gnss_serialize_integrity+0x16>
   29990:	2200      	movs	r2, #0
   29992:	2308      	movs	r3, #8
   29994:	704a      	strb	r2, [r1, #1]
   29996:	700b      	strb	r3, [r1, #0]
   29998:	6803      	ldr	r3, [r0, #0]
   2999a:	2006      	movs	r0, #6
   2999c:	f8c1 3002 	str.w	r3, [r1, #2]
   299a0:	4770      	bx	lr
   299a2:	f04f 30ff 	mov.w	r0, #4294967295
   299a6:	4770      	bx	lr

000299a8 <gnss_client_event_handler>:
   299a8:	f850 1b08 	ldr.w	r1, [r0], #8
   299ac:	0c09      	lsrs	r1, r1, #16
   299ae:	f7ff b811 	b.w	289d4 <rpc_gnss_event_handler>
   299b2:	bf00      	nop

000299b4 <rpc_gnss_client_init>:
   299b4:	4801      	ldr	r0, [pc, #4]	; (299bc <rpc_gnss_client_init+0x8>)
   299b6:	f7fe bb73 	b.w	280a0 <rpc_client_register>
   299ba:	bf00      	nop
   299bc:	00031424 	.word	0x00031424

000299c0 <rpc_gnss_client_request_alloc>:
   299c0:	2300      	movs	r3, #0
   299c2:	b510      	push	{r4, lr}
   299c4:	b082      	sub	sp, #8
   299c6:	9301      	str	r3, [sp, #4]
   299c8:	b158      	cbz	r0, 299e2 <rpc_gnss_client_request_alloc+0x22>
   299ca:	4604      	mov	r4, r0
   299cc:	aa01      	add	r2, sp, #4
   299ce:	2007      	movs	r0, #7
   299d0:	f7fe fd9e 	bl	28510 <rpc_message_alloc>
   299d4:	b918      	cbnz	r0, 299de <rpc_gnss_client_request_alloc+0x1e>
   299d6:	9b01      	ldr	r3, [sp, #4]
   299d8:	b10b      	cbz	r3, 299de <rpc_gnss_client_request_alloc+0x1e>
   299da:	3308      	adds	r3, #8
   299dc:	6023      	str	r3, [r4, #0]
   299de:	b002      	add	sp, #8
   299e0:	bd10      	pop	{r4, pc}
   299e2:	2007      	movs	r0, #7
   299e4:	b002      	add	sp, #8
   299e6:	bd10      	pop	{r4, pc}

000299e8 <rpc_gnss_client_request_send>:
   299e8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   299ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   299f0:	d10b      	bne.n	29a0a <rpc_gnss_client_request_send+0x22>
   299f2:	b160      	cbz	r0, 29a0e <rpc_gnss_client_request_send+0x26>
   299f4:	4603      	mov	r3, r0
   299f6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   299fa:	2007      	movs	r0, #7
   299fc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   29a00:	f843 1d08 	str.w	r1, [r3, #-8]!
   29a04:	4619      	mov	r1, r3
   29a06:	f7fe bd6b 	b.w	284e0 <rpc_message_send>
   29a0a:	200f      	movs	r0, #15
   29a0c:	4770      	bx	lr
   29a0e:	2007      	movs	r0, #7
   29a10:	4770      	bx	lr
   29a12:	bf00      	nop

00029a14 <rpc_gnss_client_message_free>:
   29a14:	b120      	cbz	r0, 29a20 <rpc_gnss_client_message_free+0xc>
   29a16:	f1a0 0108 	sub.w	r1, r0, #8
   29a1a:	2007      	movs	r0, #7
   29a1c:	f7fe bdaa 	b.w	28574 <rpc_message_free>
   29a20:	2007      	movs	r0, #7
   29a22:	4770      	bx	lr

00029a24 <rpc_gnss_client_data_free>:
   29a24:	b118      	cbz	r0, 29a2e <rpc_gnss_client_data_free+0xa>
   29a26:	4601      	mov	r1, r0
   29a28:	2007      	movs	r0, #7
   29a2a:	f7fe beb5 	b.w	28798 <rpc_message_data_free>
   29a2e:	2007      	movs	r0, #7
   29a30:	4770      	bx	lr
   29a32:	bf00      	nop

00029a34 <datagram_handler_init>:
   29a34:	b510      	push	{r4, lr}
   29a36:	4604      	mov	r4, r0
   29a38:	200c      	movs	r0, #12
   29a3a:	f7f9 f8d7 	bl	22bec <nrf_malloc>
   29a3e:	60e0      	str	r0, [r4, #12]
   29a40:	b118      	cbz	r0, 29a4a <datagram_handler_init+0x16>
   29a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29a46:	f7fc bb8f 	b.w	26168 <linked_list_init>
   29a4a:	2004      	movs	r0, #4
   29a4c:	bd10      	pop	{r4, pc}
   29a4e:	bf00      	nop

00029a50 <datagram_handler_put>:
   29a50:	b570      	push	{r4, r5, r6, lr}
   29a52:	4606      	mov	r6, r0
   29a54:	2014      	movs	r0, #20
   29a56:	460d      	mov	r5, r1
   29a58:	f7f9 f8c8 	bl	22bec <nrf_malloc>
   29a5c:	b178      	cbz	r0, 29a7e <datagram_handler_put+0x2e>
   29a5e:	682b      	ldr	r3, [r5, #0]
   29a60:	4604      	mov	r4, r0
   29a62:	6043      	str	r3, [r0, #4]
   29a64:	686b      	ldr	r3, [r5, #4]
   29a66:	4601      	mov	r1, r0
   29a68:	6083      	str	r3, [r0, #8]
   29a6a:	68eb      	ldr	r3, [r5, #12]
   29a6c:	60c3      	str	r3, [r0, #12]
   29a6e:	68ab      	ldr	r3, [r5, #8]
   29a70:	6103      	str	r3, [r0, #16]
   29a72:	68f0      	ldr	r0, [r6, #12]
   29a74:	f7fc fb82 	bl	2617c <linked_list_push>
   29a78:	b920      	cbnz	r0, 29a84 <datagram_handler_put+0x34>
   29a7a:	6868      	ldr	r0, [r5, #4]
   29a7c:	bd70      	pop	{r4, r5, r6, pc}
   29a7e:	f04f 30ff 	mov.w	r0, #4294967295
   29a82:	bd70      	pop	{r4, r5, r6, pc}
   29a84:	4620      	mov	r0, r4
   29a86:	f7f9 f8bb 	bl	22c00 <nrf_free>
   29a8a:	f04f 30ff 	mov.w	r0, #4294967295
   29a8e:	bd70      	pop	{r4, r5, r6, pc}

00029a90 <datagram_handler_get>:
   29a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   29a92:	4606      	mov	r6, r0
   29a94:	b085      	sub	sp, #20
   29a96:	68c0      	ldr	r0, [r0, #12]
   29a98:	460c      	mov	r4, r1
   29a9a:	4617      	mov	r7, r2
   29a9c:	f7fc fb8e 	bl	261bc <linked_list_peek>
   29aa0:	2800      	cmp	r0, #0
   29aa2:	d037      	beq.n	29b14 <datagram_handler_get+0x84>
   29aa4:	6882      	ldr	r2, [r0, #8]
   29aa6:	4605      	mov	r5, r0
   29aa8:	e9d4 0300 	ldrd	r0, r3, [r4]
   29aac:	429a      	cmp	r2, r3
   29aae:	bf28      	it	cs
   29ab0:	461a      	movcs	r2, r3
   29ab2:	6062      	str	r2, [r4, #4]
   29ab4:	b110      	cbz	r0, 29abc <datagram_handler_get+0x2c>
   29ab6:	6869      	ldr	r1, [r5, #4]
   29ab8:	f006 f9ad 	bl	2fe16 <memcpy>
   29abc:	68a0      	ldr	r0, [r4, #8]
   29abe:	b118      	cbz	r0, 29ac8 <datagram_handler_get+0x38>
   29ac0:	692b      	ldr	r3, [r5, #16]
   29ac2:	b10b      	cbz	r3, 29ac8 <datagram_handler_get+0x38>
   29ac4:	68ea      	ldr	r2, [r5, #12]
   29ac6:	b9e2      	cbnz	r2, 29b02 <datagram_handler_get+0x72>
   29ac8:	2300      	movs	r3, #0
   29aca:	60e3      	str	r3, [r4, #12]
   29acc:	073b      	lsls	r3, r7, #28
   29ace:	d502      	bpl.n	29ad6 <datagram_handler_get+0x46>
   29ad0:	6860      	ldr	r0, [r4, #4]
   29ad2:	b005      	add	sp, #20
   29ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29ad6:	68f0      	ldr	r0, [r6, #12]
   29ad8:	f7fc fb66 	bl	261a8 <linked_list_pop>
   29adc:	4605      	mov	r5, r0
   29ade:	2800      	cmp	r0, #0
   29ae0:	d0f6      	beq.n	29ad0 <datagram_handler_get+0x40>
   29ae2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   29ae6:	6902      	ldr	r2, [r0, #16]
   29ae8:	9300      	str	r3, [sp, #0]
   29aea:	68c3      	ldr	r3, [r0, #12]
   29aec:	e9cd 1201 	strd	r1, r2, [sp, #4]
   29af0:	9303      	str	r3, [sp, #12]
   29af2:	4668      	mov	r0, sp
   29af4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   29af8:	4798      	blx	r3
   29afa:	4628      	mov	r0, r5
   29afc:	f7f9 f880 	bl	22c00 <nrf_free>
   29b00:	e7e6      	b.n	29ad0 <datagram_handler_get+0x40>
   29b02:	68e3      	ldr	r3, [r4, #12]
   29b04:	429a      	cmp	r2, r3
   29b06:	bf28      	it	cs
   29b08:	461a      	movcs	r2, r3
   29b0a:	60e2      	str	r2, [r4, #12]
   29b0c:	6929      	ldr	r1, [r5, #16]
   29b0e:	f006 f982 	bl	2fe16 <memcpy>
   29b12:	e7db      	b.n	29acc <datagram_handler_get+0x3c>
   29b14:	f04f 30ff 	mov.w	r0, #4294967295
   29b18:	e7db      	b.n	29ad2 <datagram_handler_get+0x42>
   29b1a:	bf00      	nop

00029b1c <datagram_handler_available>:
   29b1c:	b508      	push	{r3, lr}
   29b1e:	68c0      	ldr	r0, [r0, #12]
   29b20:	f7fc fb4c 	bl	261bc <linked_list_peek>
   29b24:	b108      	cbz	r0, 29b2a <datagram_handler_available+0xe>
   29b26:	6880      	ldr	r0, [r0, #8]
   29b28:	bd08      	pop	{r3, pc}
   29b2a:	f04f 30ff 	mov.w	r0, #4294967295
   29b2e:	bd08      	pop	{r3, pc}

00029b30 <datagram_handler_flush>:
   29b30:	b530      	push	{r4, r5, lr}
   29b32:	4605      	mov	r5, r0
   29b34:	68c0      	ldr	r0, [r0, #12]
   29b36:	b085      	sub	sp, #20
   29b38:	b9a8      	cbnz	r0, 29b66 <datagram_handler_flush+0x36>
   29b3a:	e01a      	b.n	29b72 <datagram_handler_flush+0x42>
   29b3c:	68e8      	ldr	r0, [r5, #12]
   29b3e:	f7fc fb33 	bl	261a8 <linked_list_pop>
   29b42:	4604      	mov	r4, r0
   29b44:	b170      	cbz	r0, 29b64 <datagram_handler_flush+0x34>
   29b46:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   29b4a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   29b4e:	e9cd 0100 	strd	r0, r1, [sp]
   29b52:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29b56:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   29b5a:	4668      	mov	r0, sp
   29b5c:	4798      	blx	r3
   29b5e:	4620      	mov	r0, r4
   29b60:	f7f9 f84e 	bl	22c00 <nrf_free>
   29b64:	68e8      	ldr	r0, [r5, #12]
   29b66:	f7fc fb2f 	bl	261c8 <linked_list_size_get>
   29b6a:	2800      	cmp	r0, #0
   29b6c:	d1e6      	bne.n	29b3c <datagram_handler_flush+0xc>
   29b6e:	b005      	add	sp, #20
   29b70:	bd30      	pop	{r4, r5, pc}
   29b72:	2008      	movs	r0, #8
   29b74:	b005      	add	sp, #20
   29b76:	bd30      	pop	{r4, r5, pc}

00029b78 <datagram_handler_free>:
   29b78:	b530      	push	{r4, r5, lr}
   29b7a:	4605      	mov	r5, r0
   29b7c:	68c0      	ldr	r0, [r0, #12]
   29b7e:	b085      	sub	sp, #20
   29b80:	b9a0      	cbnz	r0, 29bac <datagram_handler_free+0x34>
   29b82:	e01c      	b.n	29bbe <datagram_handler_free+0x46>
   29b84:	f7fc fb10 	bl	261a8 <linked_list_pop>
   29b88:	4604      	mov	r4, r0
   29b8a:	b170      	cbz	r0, 29baa <datagram_handler_free+0x32>
   29b8c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   29b90:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   29b94:	e9cd 0100 	strd	r0, r1, [sp]
   29b98:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29b9c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   29ba0:	4668      	mov	r0, sp
   29ba2:	4798      	blx	r3
   29ba4:	4620      	mov	r0, r4
   29ba6:	f7f9 f82b 	bl	22c00 <nrf_free>
   29baa:	68e8      	ldr	r0, [r5, #12]
   29bac:	f7fc fb0c 	bl	261c8 <linked_list_size_get>
   29bb0:	4604      	mov	r4, r0
   29bb2:	68e8      	ldr	r0, [r5, #12]
   29bb4:	2c00      	cmp	r4, #0
   29bb6:	d1e5      	bne.n	29b84 <datagram_handler_free+0xc>
   29bb8:	f7f9 f822 	bl	22c00 <nrf_free>
   29bbc:	60ec      	str	r4, [r5, #12]
   29bbe:	b005      	add	sp, #20
   29bc0:	bd30      	pop	{r4, r5, pc}
   29bc2:	bf00      	nop

00029bc4 <null_handler_init>:
   29bc4:	2000      	movs	r0, #0
   29bc6:	4770      	bx	lr

00029bc8 <null_handler_put>:
   29bc8:	b510      	push	{r4, lr}
   29bca:	460c      	mov	r4, r1
   29bcc:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   29bd0:	4620      	mov	r0, r4
   29bd2:	4798      	blx	r3
   29bd4:	6860      	ldr	r0, [r4, #4]
   29bd6:	bd10      	pop	{r4, pc}

00029bd8 <null_handler_get>:
   29bd8:	f04f 30ff 	mov.w	r0, #4294967295
   29bdc:	4770      	bx	lr
   29bde:	bf00      	nop

00029be0 <null_handler_available>:
   29be0:	f04f 30ff 	mov.w	r0, #4294967295
   29be4:	4770      	bx	lr
   29be6:	bf00      	nop

00029be8 <null_handler_flush>:
   29be8:	2000      	movs	r0, #0
   29bea:	4770      	bx	lr

00029bec <null_handler_free>:
   29bec:	4770      	bx	lr
   29bee:	bf00      	nop

00029bf0 <packet_handler_create>:
   29bf0:	2801      	cmp	r0, #1
   29bf2:	b538      	push	{r3, r4, r5, lr}
   29bf4:	460d      	mov	r5, r1
   29bf6:	4614      	mov	r4, r2
   29bf8:	d00d      	beq.n	29c16 <packet_handler_create+0x26>
   29bfa:	db11      	blt.n	29c20 <packet_handler_create+0x30>
   29bfc:	2803      	cmp	r0, #3
   29bfe:	dc0f      	bgt.n	29c20 <packet_handler_create+0x30>
   29c00:	2010      	movs	r0, #16
   29c02:	f7f8 fff3 	bl	22bec <nrf_malloc>
   29c06:	2218      	movs	r2, #24
   29c08:	b120      	cbz	r0, 29c14 <packet_handler_create+0x24>
   29c0a:	4b08      	ldr	r3, [pc, #32]	; (29c2c <packet_handler_create+0x3c>)
   29c0c:	6045      	str	r5, [r0, #4]
   29c0e:	4413      	add	r3, r2
   29c10:	6084      	str	r4, [r0, #8]
   29c12:	6003      	str	r3, [r0, #0]
   29c14:	bd38      	pop	{r3, r4, r5, pc}
   29c16:	2014      	movs	r0, #20
   29c18:	f7f8 ffe8 	bl	22bec <nrf_malloc>
   29c1c:	2230      	movs	r2, #48	; 0x30
   29c1e:	e7f3      	b.n	29c08 <packet_handler_create+0x18>
   29c20:	200c      	movs	r0, #12
   29c22:	f7f8 ffe3 	bl	22bec <nrf_malloc>
   29c26:	2200      	movs	r2, #0
   29c28:	e7ee      	b.n	29c08 <packet_handler_create+0x18>
   29c2a:	bf00      	nop
   29c2c:	00031434 	.word	0x00031434

00029c30 <packet_handler_delete>:
   29c30:	b510      	push	{r4, lr}
   29c32:	4604      	mov	r4, r0
   29c34:	6803      	ldr	r3, [r0, #0]
   29c36:	691b      	ldr	r3, [r3, #16]
   29c38:	4798      	blx	r3
   29c3a:	6823      	ldr	r3, [r4, #0]
   29c3c:	4620      	mov	r0, r4
   29c3e:	695b      	ldr	r3, [r3, #20]
   29c40:	4798      	blx	r3
   29c42:	4620      	mov	r0, r4
   29c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29c48:	f7f8 bfda 	b.w	22c00 <nrf_free>

00029c4c <stream_handler_init>:
   29c4c:	b510      	push	{r4, lr}
   29c4e:	4604      	mov	r4, r0
   29c50:	200c      	movs	r0, #12
   29c52:	f7f8 ffcb 	bl	22bec <nrf_malloc>
   29c56:	60e0      	str	r0, [r4, #12]
   29c58:	b128      	cbz	r0, 29c66 <stream_handler_init+0x1a>
   29c5a:	2300      	movs	r3, #0
   29c5c:	6123      	str	r3, [r4, #16]
   29c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29c62:	f7fc ba81 	b.w	26168 <linked_list_init>
   29c66:	2004      	movs	r0, #4
   29c68:	bd10      	pop	{r4, pc}
   29c6a:	bf00      	nop

00029c6c <stream_handler_put>:
   29c6c:	b570      	push	{r4, r5, r6, lr}
   29c6e:	4606      	mov	r6, r0
   29c70:	2014      	movs	r0, #20
   29c72:	460d      	mov	r5, r1
   29c74:	f7f8 ffba 	bl	22bec <nrf_malloc>
   29c78:	b178      	cbz	r0, 29c9a <stream_handler_put+0x2e>
   29c7a:	682b      	ldr	r3, [r5, #0]
   29c7c:	4604      	mov	r4, r0
   29c7e:	6043      	str	r3, [r0, #4]
   29c80:	686b      	ldr	r3, [r5, #4]
   29c82:	4601      	mov	r1, r0
   29c84:	6083      	str	r3, [r0, #8]
   29c86:	68eb      	ldr	r3, [r5, #12]
   29c88:	60c3      	str	r3, [r0, #12]
   29c8a:	68ab      	ldr	r3, [r5, #8]
   29c8c:	6103      	str	r3, [r0, #16]
   29c8e:	68f0      	ldr	r0, [r6, #12]
   29c90:	f7fc fa74 	bl	2617c <linked_list_push>
   29c94:	b920      	cbnz	r0, 29ca0 <stream_handler_put+0x34>
   29c96:	6868      	ldr	r0, [r5, #4]
   29c98:	bd70      	pop	{r4, r5, r6, pc}
   29c9a:	f04f 30ff 	mov.w	r0, #4294967295
   29c9e:	bd70      	pop	{r4, r5, r6, pc}
   29ca0:	4620      	mov	r0, r4
   29ca2:	f7f8 ffad 	bl	22c00 <nrf_free>
   29ca6:	f04f 30ff 	mov.w	r0, #4294967295
   29caa:	bd70      	pop	{r4, r5, r6, pc}

00029cac <stream_handler_get>:
   29cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29cb0:	4682      	mov	sl, r0
   29cb2:	b087      	sub	sp, #28
   29cb4:	68c0      	ldr	r0, [r0, #12]
   29cb6:	4689      	mov	r9, r1
   29cb8:	4693      	mov	fp, r2
   29cba:	f7fc fa7f 	bl	261bc <linked_list_peek>
   29cbe:	2800      	cmp	r0, #0
   29cc0:	d072      	beq.n	29da8 <stream_handler_get+0xfc>
   29cc2:	4605      	mov	r5, r0
   29cc4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   29cc8:	b120      	cbz	r0, 29cd4 <stream_handler_get+0x28>
   29cca:	692b      	ldr	r3, [r5, #16]
   29ccc:	b113      	cbz	r3, 29cd4 <stream_handler_get+0x28>
   29cce:	68ea      	ldr	r2, [r5, #12]
   29cd0:	2a00      	cmp	r2, #0
   29cd2:	d15c      	bne.n	29d8e <stream_handler_get+0xe2>
   29cd4:	2300      	movs	r3, #0
   29cd6:	f8c9 300c 	str.w	r3, [r9, #12]
   29cda:	f8d9 2000 	ldr.w	r2, [r9]
   29cde:	f8d9 8004 	ldr.w	r8, [r9, #4]
   29ce2:	f8da 1010 	ldr.w	r1, [sl, #16]
   29ce6:	9201      	str	r2, [sp, #4]
   29ce8:	f1b8 0f00 	cmp.w	r8, #0
   29cec:	d05a      	beq.n	29da4 <stream_handler_get+0xf8>
   29cee:	f00b 0308 	and.w	r3, fp, #8
   29cf2:	2400      	movs	r4, #0
   29cf4:	9300      	str	r3, [sp, #0]
   29cf6:	e010      	b.n	29d1a <stream_handler_get+0x6e>
   29cf8:	f8da 3010 	ldr.w	r3, [sl, #16]
   29cfc:	443b      	add	r3, r7
   29cfe:	f8ca 3010 	str.w	r3, [sl, #16]
   29d02:	4628      	mov	r0, r5
   29d04:	f7fc fa62 	bl	261cc <linked_list_get_next>
   29d08:	443c      	add	r4, r7
   29d0a:	4605      	mov	r5, r0
   29d0c:	2800      	cmp	r0, #0
   29d0e:	d038      	beq.n	29d82 <stream_handler_get+0xd6>
   29d10:	45a0      	cmp	r8, r4
   29d12:	d936      	bls.n	29d82 <stream_handler_get+0xd6>
   29d14:	2100      	movs	r1, #0
   29d16:	f8d9 2000 	ldr.w	r2, [r9]
   29d1a:	68ae      	ldr	r6, [r5, #8]
   29d1c:	eba8 0b04 	sub.w	fp, r8, r4
   29d20:	1a76      	subs	r6, r6, r1
   29d22:	455e      	cmp	r6, fp
   29d24:	4637      	mov	r7, r6
   29d26:	bf28      	it	cs
   29d28:	465f      	movcs	r7, fp
   29d2a:	b132      	cbz	r2, 29d3a <stream_handler_get+0x8e>
   29d2c:	6868      	ldr	r0, [r5, #4]
   29d2e:	9b01      	ldr	r3, [sp, #4]
   29d30:	4401      	add	r1, r0
   29d32:	463a      	mov	r2, r7
   29d34:	1918      	adds	r0, r3, r4
   29d36:	f006 f86e 	bl	2fe16 <memcpy>
   29d3a:	9b00      	ldr	r3, [sp, #0]
   29d3c:	2b00      	cmp	r3, #0
   29d3e:	d1e0      	bne.n	29d02 <stream_handler_get+0x56>
   29d40:	455e      	cmp	r6, fp
   29d42:	d8d9      	bhi.n	29cf8 <stream_handler_get+0x4c>
   29d44:	f8da 000c 	ldr.w	r0, [sl, #12]
   29d48:	f7fc fa2e 	bl	261a8 <linked_list_pop>
   29d4c:	4606      	mov	r6, r0
   29d4e:	b170      	cbz	r0, 29d6e <stream_handler_get+0xc2>
   29d50:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   29d54:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   29d58:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29d5c:	e9cd 1004 	strd	r1, r0, [sp, #16]
   29d60:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   29d64:	a802      	add	r0, sp, #8
   29d66:	4798      	blx	r3
   29d68:	4630      	mov	r0, r6
   29d6a:	f7f8 ff49 	bl	22c00 <nrf_free>
   29d6e:	2300      	movs	r3, #0
   29d70:	4628      	mov	r0, r5
   29d72:	f8ca 3010 	str.w	r3, [sl, #16]
   29d76:	f7fc fa29 	bl	261cc <linked_list_get_next>
   29d7a:	443c      	add	r4, r7
   29d7c:	4605      	mov	r5, r0
   29d7e:	2800      	cmp	r0, #0
   29d80:	d1c6      	bne.n	29d10 <stream_handler_get+0x64>
   29d82:	4620      	mov	r0, r4
   29d84:	f8c9 4004 	str.w	r4, [r9, #4]
   29d88:	b007      	add	sp, #28
   29d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d8e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   29d92:	429a      	cmp	r2, r3
   29d94:	bf28      	it	cs
   29d96:	461a      	movcs	r2, r3
   29d98:	f8c9 200c 	str.w	r2, [r9, #12]
   29d9c:	6929      	ldr	r1, [r5, #16]
   29d9e:	f006 f83a 	bl	2fe16 <memcpy>
   29da2:	e79a      	b.n	29cda <stream_handler_get+0x2e>
   29da4:	4644      	mov	r4, r8
   29da6:	e7ec      	b.n	29d82 <stream_handler_get+0xd6>
   29da8:	f04f 30ff 	mov.w	r0, #4294967295
   29dac:	e7ec      	b.n	29d88 <stream_handler_get+0xdc>
   29dae:	bf00      	nop

00029db0 <stream_handler_available>:
   29db0:	b510      	push	{r4, lr}
   29db2:	4604      	mov	r4, r0
   29db4:	68c0      	ldr	r0, [r0, #12]
   29db6:	f7fc fa01 	bl	261bc <linked_list_peek>
   29dba:	b150      	cbz	r0, 29dd2 <stream_handler_available+0x22>
   29dbc:	6924      	ldr	r4, [r4, #16]
   29dbe:	4264      	negs	r4, r4
   29dc0:	6883      	ldr	r3, [r0, #8]
   29dc2:	441c      	add	r4, r3
   29dc4:	f7fc fa02 	bl	261cc <linked_list_get_next>
   29dc8:	2800      	cmp	r0, #0
   29dca:	d1f9      	bne.n	29dc0 <stream_handler_available+0x10>
   29dcc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   29dd0:	bd10      	pop	{r4, pc}
   29dd2:	f04f 30ff 	mov.w	r0, #4294967295
   29dd6:	bd10      	pop	{r4, pc}

00029dd8 <stream_handler_flush>:
   29dd8:	b530      	push	{r4, r5, lr}
   29dda:	4605      	mov	r5, r0
   29ddc:	68c0      	ldr	r0, [r0, #12]
   29dde:	b085      	sub	sp, #20
   29de0:	b9a8      	cbnz	r0, 29e0e <stream_handler_flush+0x36>
   29de2:	e01a      	b.n	29e1a <stream_handler_flush+0x42>
   29de4:	68e8      	ldr	r0, [r5, #12]
   29de6:	f7fc f9df 	bl	261a8 <linked_list_pop>
   29dea:	4604      	mov	r4, r0
   29dec:	b170      	cbz	r0, 29e0c <stream_handler_flush+0x34>
   29dee:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   29df2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   29df6:	e9cd 0100 	strd	r0, r1, [sp]
   29dfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29dfe:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   29e02:	4668      	mov	r0, sp
   29e04:	4798      	blx	r3
   29e06:	4620      	mov	r0, r4
   29e08:	f7f8 fefa 	bl	22c00 <nrf_free>
   29e0c:	68e8      	ldr	r0, [r5, #12]
   29e0e:	f7fc f9db 	bl	261c8 <linked_list_size_get>
   29e12:	2800      	cmp	r0, #0
   29e14:	d1e6      	bne.n	29de4 <stream_handler_flush+0xc>
   29e16:	b005      	add	sp, #20
   29e18:	bd30      	pop	{r4, r5, pc}
   29e1a:	2008      	movs	r0, #8
   29e1c:	b005      	add	sp, #20
   29e1e:	bd30      	pop	{r4, r5, pc}

00029e20 <stream_handler_free>:
   29e20:	b530      	push	{r4, r5, lr}
   29e22:	4605      	mov	r5, r0
   29e24:	68c0      	ldr	r0, [r0, #12]
   29e26:	b085      	sub	sp, #20
   29e28:	b9a0      	cbnz	r0, 29e54 <stream_handler_free+0x34>
   29e2a:	e01c      	b.n	29e66 <stream_handler_free+0x46>
   29e2c:	f7fc f9bc 	bl	261a8 <linked_list_pop>
   29e30:	4604      	mov	r4, r0
   29e32:	b170      	cbz	r0, 29e52 <stream_handler_free+0x32>
   29e34:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   29e38:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   29e3c:	e9cd 0100 	strd	r0, r1, [sp]
   29e40:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29e44:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   29e48:	4668      	mov	r0, sp
   29e4a:	4798      	blx	r3
   29e4c:	4620      	mov	r0, r4
   29e4e:	f7f8 fed7 	bl	22c00 <nrf_free>
   29e52:	68e8      	ldr	r0, [r5, #12]
   29e54:	f7fc f9b8 	bl	261c8 <linked_list_size_get>
   29e58:	4604      	mov	r4, r0
   29e5a:	68e8      	ldr	r0, [r5, #12]
   29e5c:	2c00      	cmp	r4, #0
   29e5e:	d1e5      	bne.n	29e2c <stream_handler_free+0xc>
   29e60:	f7f8 fece 	bl	22c00 <nrf_free>
   29e64:	60ec      	str	r4, [r5, #12]
   29e66:	b005      	add	sp, #20
   29e68:	bd30      	pop	{r4, r5, pc}
   29e6a:	bf00      	nop

00029e6c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   29e6c:	4a07      	ldr	r2, [pc, #28]	; (29e8c <SystemInit+0x20>)
   29e6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   29e72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   29e76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   29e7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   29e7e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   29e82:	4b03      	ldr	r3, [pc, #12]	; (29e90 <SystemInit+0x24>)
   29e84:	4a03      	ldr	r2, [pc, #12]	; (29e94 <SystemInit+0x28>)
   29e86:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   29e88:	4770      	bx	lr
   29e8a:	bf00      	nop
   29e8c:	e000ed00 	.word	0xe000ed00
   29e90:	20026750 	.word	0x20026750
   29e94:	03d09000 	.word	0x03d09000

00029e98 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   29e98:	4a04      	ldr	r2, [pc, #16]	; (29eac <nvmc_word_write+0x14>)
   29e9a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   29e9e:	07db      	lsls	r3, r3, #31
   29ea0:	d5fb      	bpl.n	29e9a <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   29ea2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   29ea4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   29ea8:	4770      	bx	lr
   29eaa:	bf00      	nop
   29eac:	40039000 	.word	0x40039000

00029eb0 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   29eb0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   29eb4:	b508      	push	{r3, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   29eb6:	d305      	bcc.n	29ec4 <nrfx_nvmc_page_erase+0x14>
   29eb8:	4b0d      	ldr	r3, [pc, #52]	; (29ef0 <nrfx_nvmc_page_erase+0x40>)
   29eba:	4a0e      	ldr	r2, [pc, #56]	; (29ef4 <nrfx_nvmc_page_erase+0x44>)
   29ebc:	21dd      	movs	r1, #221	; 0xdd
   29ebe:	480e      	ldr	r0, [pc, #56]	; (29ef8 <nrfx_nvmc_page_erase+0x48>)
   29ec0:	f003 fa34 	bl	2d32c <__assert_func>
    return !(addr % flash_page_size_get());
   29ec4:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   29ec8:	b97b      	cbnz	r3, 29eea <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   29eca:	2202      	movs	r2, #2
   29ecc:	4b0b      	ldr	r3, [pc, #44]	; (29efc <nrfx_nvmc_page_erase+0x4c>)
   29ece:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   29ed2:	f04f 32ff 	mov.w	r2, #4294967295
   29ed6:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   29ed8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   29edc:	07d2      	lsls	r2, r2, #31
   29ede:	d5fb      	bpl.n	29ed8 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   29ee0:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   29ee2:	4807      	ldr	r0, [pc, #28]	; (29f00 <nrfx_nvmc_page_erase+0x50>)
   29ee4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   29ee8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   29eea:	4806      	ldr	r0, [pc, #24]	; (29f04 <nrfx_nvmc_page_erase+0x54>)
   29eec:	e7fc      	b.n	29ee8 <nrfx_nvmc_page_erase+0x38>
   29eee:	bf00      	nop
   29ef0:	00032c73 	.word	0x00032c73
   29ef4:	00032c49 	.word	0x00032c49
   29ef8:	00032ce0 	.word	0x00032ce0
   29efc:	40039000 	.word	0x40039000
   29f00:	0bad0000 	.word	0x0bad0000
   29f04:	0bad000a 	.word	0x0bad000a

00029f08 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   29f08:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   29f0c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   29f0e:	d306      	bcc.n	29f1e <nrfx_nvmc_word_write+0x16>
   29f10:	f240 114d 	movw	r1, #333	; 0x14d
   29f14:	4b0a      	ldr	r3, [pc, #40]	; (29f40 <nrfx_nvmc_word_write+0x38>)
   29f16:	4a0b      	ldr	r2, [pc, #44]	; (29f44 <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   29f18:	480b      	ldr	r0, [pc, #44]	; (29f48 <nrfx_nvmc_word_write+0x40>)
   29f1a:	f003 fa07 	bl	2d32c <__assert_func>
   29f1e:	f010 0403 	ands.w	r4, r0, #3
   29f22:	d004      	beq.n	29f2e <nrfx_nvmc_word_write+0x26>
   29f24:	4b09      	ldr	r3, [pc, #36]	; (29f4c <nrfx_nvmc_word_write+0x44>)
   29f26:	4a07      	ldr	r2, [pc, #28]	; (29f44 <nrfx_nvmc_word_write+0x3c>)
   29f28:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   29f2c:	e7f4      	b.n	29f18 <nrfx_nvmc_word_write+0x10>
   29f2e:	2301      	movs	r3, #1
   29f30:	4d07      	ldr	r5, [pc, #28]	; (29f50 <nrfx_nvmc_word_write+0x48>)
   29f32:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   29f36:	f7ff ffaf 	bl	29e98 <nvmc_word_write>
   29f3a:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   29f3e:	bd38      	pop	{r3, r4, r5, pc}
   29f40:	00032c73 	.word	0x00032c73
   29f44:	00032c5e 	.word	0x00032c5e
   29f48:	00032ce0 	.word	0x00032ce0
   29f4c:	00032c97 	.word	0x00032c97
   29f50:	40039000 	.word	0x40039000

00029f54 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   29f54:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   29f56:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   29f58:	4b08      	ldr	r3, [pc, #32]	; (29f7c <z_sys_device_do_config_level+0x28>)
   29f5a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   29f5e:	3001      	adds	r0, #1
   29f60:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   29f64:	42a5      	cmp	r5, r4
   29f66:	d800      	bhi.n	29f6a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   29f68:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   29f6a:	6823      	ldr	r3, [r4, #0]
   29f6c:	4620      	mov	r0, r4
   29f6e:	685b      	ldr	r3, [r3, #4]
   29f70:	4798      	blx	r3
		if (retval != 0) {
   29f72:	b100      	cbz	r0, 29f76 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   29f74:	6066      	str	r6, [r4, #4]
								info++) {
   29f76:	340c      	adds	r4, #12
   29f78:	e7f4      	b.n	29f64 <z_sys_device_do_config_level+0x10>
   29f7a:	bf00      	nop
   29f7c:	0003147c 	.word	0x0003147c

00029f80 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   29f80:	4b10      	ldr	r3, [pc, #64]	; (29fc4 <z_impl_device_get_binding+0x44>)
{
   29f82:	b570      	push	{r4, r5, r6, lr}
   29f84:	4605      	mov	r5, r0
   29f86:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   29f88:	4c0f      	ldr	r4, [pc, #60]	; (29fc8 <z_impl_device_get_binding+0x48>)
   29f8a:	429c      	cmp	r4, r3
   29f8c:	d104      	bne.n	29f98 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   29f8e:	4c0e      	ldr	r4, [pc, #56]	; (29fc8 <z_impl_device_get_binding+0x48>)
   29f90:	42b4      	cmp	r4, r6
   29f92:	d109      	bne.n	29fa8 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   29f94:	2400      	movs	r4, #0
   29f96:	e012      	b.n	29fbe <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   29f98:	6862      	ldr	r2, [r4, #4]
   29f9a:	b11a      	cbz	r2, 29fa4 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   29f9c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   29f9e:	6812      	ldr	r2, [r2, #0]
   29fa0:	42aa      	cmp	r2, r5
   29fa2:	d00c      	beq.n	29fbe <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   29fa4:	340c      	adds	r4, #12
   29fa6:	e7f0      	b.n	29f8a <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   29fa8:	6863      	ldr	r3, [r4, #4]
   29faa:	b90b      	cbnz	r3, 29fb0 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   29fac:	340c      	adds	r4, #12
   29fae:	e7ef      	b.n	29f90 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   29fb0:	6823      	ldr	r3, [r4, #0]
   29fb2:	4628      	mov	r0, r5
   29fb4:	6819      	ldr	r1, [r3, #0]
   29fb6:	f7f3 f855 	bl	1d064 <strcmp>
   29fba:	2800      	cmp	r0, #0
   29fbc:	d1f6      	bne.n	29fac <z_impl_device_get_binding+0x2c>
}
   29fbe:	4620      	mov	r0, r4
   29fc0:	bd70      	pop	{r4, r5, r6, pc}
   29fc2:	bf00      	nop
   29fc4:	20026a1c 	.word	0x20026a1c
   29fc8:	2002692c 	.word	0x2002692c

00029fcc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   29fcc:	4b01      	ldr	r3, [pc, #4]	; (29fd4 <z_impl_z_errno+0x8>)
   29fce:	6898      	ldr	r0, [r3, #8]
}
   29fd0:	3054      	adds	r0, #84	; 0x54
   29fd2:	4770      	bx	lr
   29fd4:	200213cc 	.word	0x200213cc

00029fd8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   29fd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29fdc:	4605      	mov	r5, r0
   29fde:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   29fe0:	f002 f8be 	bl	2c160 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   29fe4:	2301      	movs	r3, #1
   29fe6:	4606      	mov	r6, r0
   29fe8:	f04f 0000 	mov.w	r0, #0
   29fec:	2200      	movs	r2, #0
   29fee:	f363 0007 	bfi	r0, r3, #0, #8
   29ff2:	4c2b      	ldr	r4, [pc, #172]	; (2a0a0 <z_fatal_error+0xc8>)
   29ff4:	4b2b      	ldr	r3, [pc, #172]	; (2a0a4 <z_fatal_error+0xcc>)
   29ff6:	2d04      	cmp	r5, #4
   29ff8:	eba4 0403 	sub.w	r4, r4, r3
   29ffc:	bf98      	it	ls
   29ffe:	4b2a      	ldrls	r3, [pc, #168]	; (2a0a8 <z_fatal_error+0xd0>)
   2a000:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2a004:	bf94      	ite	ls
   2a006:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   2a00a:	4b28      	ldrhi	r3, [pc, #160]	; (2a0ac <z_fatal_error+0xd4>)
   2a00c:	9200      	str	r2, [sp, #0]
   2a00e:	f364 108f 	bfi	r0, r4, #6, #10
   2a012:	462a      	mov	r2, r5
   2a014:	4926      	ldr	r1, [pc, #152]	; (2a0b0 <z_fatal_error+0xd8>)
   2a016:	f004 ff35 	bl	2ee84 <log_string_sync>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2a01a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   2a01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   2a022:	b14b      	cbz	r3, 2a038 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   2a024:	f04f 0000 	mov.w	r0, #0
   2a028:	2301      	movs	r3, #1
   2a02a:	f363 0007 	bfi	r0, r3, #0, #8
   2a02e:	f364 108f 	bfi	r0, r4, #6, #10
   2a032:	4920      	ldr	r1, [pc, #128]	; (2a0b4 <z_fatal_error+0xdc>)
   2a034:	f004 ff26 	bl	2ee84 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2a038:	f04f 0700 	mov.w	r7, #0
   2a03c:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   2a03e:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   2a040:	f363 0707 	bfi	r7, r3, #0, #8
   2a044:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   2a048:	f005 fe4a 	bl	2fce0 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   2a04c:	b328      	cbz	r0, 2a09a <z_fatal_error+0xc2>
   2a04e:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   2a050:	4b19      	ldr	r3, [pc, #100]	; (2a0b8 <z_fatal_error+0xe0>)
   2a052:	2a00      	cmp	r2, #0
   2a054:	bf08      	it	eq
   2a056:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   2a058:	f004 ff26 	bl	2eea8 <log_strdup>
   2a05c:	4632      	mov	r2, r6
   2a05e:	4603      	mov	r3, r0
   2a060:	4916      	ldr	r1, [pc, #88]	; (2a0bc <z_fatal_error+0xe4>)
   2a062:	4638      	mov	r0, r7
   2a064:	f004 ff0e 	bl	2ee84 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   2a068:	4641      	mov	r1, r8
   2a06a:	4628      	mov	r0, r5
   2a06c:	f7f7 fbd4 	bl	21818 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2a070:	2d04      	cmp	r5, #4
   2a072:	d10c      	bne.n	2a08e <z_fatal_error+0xb6>
   2a074:	4912      	ldr	r1, [pc, #72]	; (2a0c0 <z_fatal_error+0xe8>)
   2a076:	2387      	movs	r3, #135	; 0x87
   2a078:	4a12      	ldr	r2, [pc, #72]	; (2a0c4 <z_fatal_error+0xec>)
   2a07a:	4813      	ldr	r0, [pc, #76]	; (2a0c8 <z_fatal_error+0xf0>)
   2a07c:	f004 feab 	bl	2edd6 <printk>
   2a080:	4812      	ldr	r0, [pc, #72]	; (2a0cc <z_fatal_error+0xf4>)
   2a082:	f004 fea8 	bl	2edd6 <printk>
   2a086:	2187      	movs	r1, #135	; 0x87
   2a088:	480e      	ldr	r0, [pc, #56]	; (2a0c4 <z_fatal_error+0xec>)
   2a08a:	f004 feea 	bl	2ee62 <assert_post_action>
	z_impl_k_thread_abort(thread);
   2a08e:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   2a090:	b002      	add	sp, #8
   2a092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a096:	f7f5 bbff 	b.w	1f898 <z_impl_k_thread_abort>
		thread_name = "unknown";
   2a09a:	4807      	ldr	r0, [pc, #28]	; (2a0b8 <z_fatal_error+0xe0>)
   2a09c:	e7dc      	b.n	2a058 <z_fatal_error+0x80>
   2a09e:	bf00      	nop
   2a0a0:	00030e84 	.word	0x00030e84
   2a0a4:	00030e1c 	.word	0x00030e1c
   2a0a8:	00031494 	.word	0x00031494
   2a0ac:	00032d66 	.word	0x00032d66
   2a0b0:	00032d7c 	.word	0x00032d7c
   2a0b4:	00032da4 	.word	0x00032da4
   2a0b8:	00032d74 	.word	0x00032d74
   2a0bc:	00032dc5 	.word	0x00032dc5
   2a0c0:	00032dff 	.word	0x00032dff
   2a0c4:	00032ddd 	.word	0x00032ddd
   2a0c8:	000316d1 	.word	0x000316d1
   2a0cc:	00032e1c 	.word	0x00032e1c

0002a0d0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2a0d0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2a0d2:	4d0b      	ldr	r5, [pc, #44]	; (2a100 <idle+0x30>)
	__asm__ volatile(
   2a0d4:	f04f 0220 	mov.w	r2, #32
   2a0d8:	f3ef 8311 	mrs	r3, BASEPRI
   2a0dc:	f382 8811 	msr	BASEPRI, r2
   2a0e0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   2a0e4:	f002 fc42 	bl	2c96c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2a0e8:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   2a0ea:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2a0ec:	2802      	cmp	r0, #2
   2a0ee:	bfd8      	it	le
   2a0f0:	4608      	movle	r0, r1
   2a0f2:	f002 fc83 	bl	2c9fc <z_set_timeout_expiry>
	_kernel.idle = ticks;
   2a0f6:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   2a0f8:	f7f4 fee0 	bl	1eebc <arch_cpu_idle>
   2a0fc:	e7ea      	b.n	2a0d4 <idle+0x4>
   2a0fe:	bf00      	nop
   2a100:	200213cc 	.word	0x200213cc

0002a104 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2a104:	4802      	ldr	r0, [pc, #8]	; (2a110 <z_bss_zero+0xc>)
   2a106:	4a03      	ldr	r2, [pc, #12]	; (2a114 <z_bss_zero+0x10>)
   2a108:	2100      	movs	r1, #0
   2a10a:	1a12      	subs	r2, r2, r0
   2a10c:	f005 be90 	b.w	2fe30 <memset>
   2a110:	20020000 	.word	0x20020000
   2a114:	20022a94 	.word	0x20022a94

0002a118 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   2a118:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a11a:	4806      	ldr	r0, [pc, #24]	; (2a134 <z_data_copy+0x1c>)
   2a11c:	4a06      	ldr	r2, [pc, #24]	; (2a138 <z_data_copy+0x20>)
   2a11e:	4907      	ldr	r1, [pc, #28]	; (2a13c <z_data_copy+0x24>)
   2a120:	1a12      	subs	r2, r2, r0
   2a122:	f005 fe78 	bl	2fe16 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2a126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2a12a:	4a05      	ldr	r2, [pc, #20]	; (2a140 <z_data_copy+0x28>)
   2a12c:	4905      	ldr	r1, [pc, #20]	; (2a144 <z_data_copy+0x2c>)
   2a12e:	4806      	ldr	r0, [pc, #24]	; (2a148 <z_data_copy+0x30>)
   2a130:	f005 be71 	b.w	2fe16 <memcpy>
   2a134:	20026718 	.word	0x20026718
   2a138:	20026b5c 	.word	0x20026b5c
   2a13c:	000335fc 	.word	0x000335fc
   2a140:	00000000 	.word	0x00000000
   2a144:	000335fc 	.word	0x000335fc
   2a148:	20020000 	.word	0x20020000

0002a14c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   2a14c:	2201      	movs	r2, #1
{
   2a14e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2a150:	4b08      	ldr	r3, [pc, #32]	; (2a174 <bg_thread_main+0x28>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2a152:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2a154:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2a156:	f7ff fefd 	bl	29f54 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   2a15a:	2003      	movs	r0, #3
   2a15c:	f7ff fefa 	bl	29f54 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   2a160:	f002 f9d4 	bl	2c50c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2a164:	f7f3 fd40 	bl	1dbe8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2a168:	4a03      	ldr	r2, [pc, #12]	; (2a178 <bg_thread_main+0x2c>)
   2a16a:	7b13      	ldrb	r3, [r2, #12]
   2a16c:	f023 0301 	bic.w	r3, r3, #1
   2a170:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2a172:	bd08      	pop	{r3, pc}
   2a174:	2002293e 	.word	0x2002293e
   2a178:	20020aec 	.word	0x20020aec

0002a17c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   2a17c:	b580      	push	{r7, lr}
   2a17e:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2a180:	f7f3 ff74 	bl	1e06c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   2a184:	4b35      	ldr	r3, [pc, #212]	; (2a25c <z_cstart+0xe0>)
   2a186:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2a18a:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   2a18e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a192:	2400      	movs	r4, #0
   2a194:	23e0      	movs	r3, #224	; 0xe0
   2a196:	4d32      	ldr	r5, [pc, #200]	; (2a260 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   2a198:	2701      	movs	r7, #1
   2a19a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2a19e:	77ec      	strb	r4, [r5, #31]
   2a1a0:	762c      	strb	r4, [r5, #24]
   2a1a2:	766c      	strb	r4, [r5, #25]
   2a1a4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2a1a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   2a1a8:	4e2e      	ldr	r6, [pc, #184]	; (2a264 <z_cstart+0xe8>)
   2a1aa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2a1ae:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2a1b0:	f7f5 fb48 	bl	1f844 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2a1b4:	f7f4 fe7c 	bl	1eeb0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2a1b8:	f04f 33ff 	mov.w	r3, #4294967295
   2a1bc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2a1be:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   2a1c0:	ab06      	add	r3, sp, #24
   2a1c2:	22b0      	movs	r2, #176	; 0xb0
   2a1c4:	4621      	mov	r1, r4
   2a1c6:	4618      	mov	r0, r3
   2a1c8:	f005 fe32 	bl	2fe30 <memset>
	_current = &dummy_thread;
   2a1cc:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2a1ce:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   2a1d0:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2a1d4:	f7ff febe 	bl	29f54 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2a1d8:	4638      	mov	r0, r7
   2a1da:	f7ff febb 	bl	29f54 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   2a1de:	4d22      	ldr	r5, [pc, #136]	; (2a268 <z_cstart+0xec>)
	z_sched_init();
   2a1e0:	f001 fe34 	bl	2be4c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2a1e4:	4b21      	ldr	r3, [pc, #132]	; (2a26c <z_cstart+0xf0>)
   2a1e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2a1ea:	e9cd 7304 	strd	r7, r3, [sp, #16]
   2a1ee:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2a1f2:	4b1f      	ldr	r3, [pc, #124]	; (2a270 <z_cstart+0xf4>)
   2a1f4:	e9cd 4400 	strd	r4, r4, [sp]
   2a1f8:	491e      	ldr	r1, [pc, #120]	; (2a274 <z_cstart+0xf8>)
   2a1fa:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   2a1fc:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2a1fe:	f002 f89b 	bl	2c338 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a202:	7b6b      	ldrb	r3, [r5, #13]
   2a204:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a208:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a20c:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a20e:	d104      	bne.n	2a21a <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   2a210:	69ab      	ldr	r3, [r5, #24]
   2a212:	b913      	cbnz	r3, 2a21a <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
   2a214:	4628      	mov	r0, r5
   2a216:	f001 f913 	bl	2b440 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   2a21a:	4b17      	ldr	r3, [pc, #92]	; (2a278 <z_cstart+0xfc>)
   2a21c:	2201      	movs	r2, #1
   2a21e:	9305      	str	r3, [sp, #20]
   2a220:	230f      	movs	r3, #15
   2a222:	e9cd 3203 	strd	r3, r2, [sp, #12]
   2a226:	2300      	movs	r3, #0
   2a228:	4d14      	ldr	r5, [pc, #80]	; (2a27c <z_cstart+0x100>)
   2a22a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2a22e:	9300      	str	r3, [sp, #0]
   2a230:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2a234:	4b12      	ldr	r3, [pc, #72]	; (2a280 <z_cstart+0x104>)
   2a236:	4913      	ldr	r1, [pc, #76]	; (2a284 <z_cstart+0x108>)
   2a238:	4628      	mov	r0, r5
   2a23a:	f002 f87d 	bl	2c338 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a23e:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   2a240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2a244:	f023 0304 	bic.w	r3, r3, #4
   2a248:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   2a24a:	4b0f      	ldr	r3, [pc, #60]	; (2a288 <z_cstart+0x10c>)
   2a24c:	4909      	ldr	r1, [pc, #36]	; (2a274 <z_cstart+0xf8>)
	list->tail = (sys_dnode_t *)list;
   2a24e:	e9c6 3306 	strd	r3, r3, [r6, #24]
   2a252:	4805      	ldr	r0, [pc, #20]	; (2a268 <z_cstart+0xec>)
   2a254:	4b06      	ldr	r3, [pc, #24]	; (2a270 <z_cstart+0xf4>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   2a256:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   2a258:	f7f4 ff20 	bl	1f09c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2a25c:	200241d8 	.word	0x200241d8
   2a260:	e000ed00 	.word	0xe000ed00
   2a264:	200213cc 	.word	0x200213cc
   2a268:	20020aec 	.word	0x20020aec
   2a26c:	00032e54 	.word	0x00032e54
   2a270:	0002a14d 	.word	0x0002a14d
   2a274:	20023098 	.word	0x20023098
   2a278:	00032e59 	.word	0x00032e59
   2a27c:	20020a3c 	.word	0x20020a3c
   2a280:	0002a0d1 	.word	0x0002a0d1
   2a284:	20024098 	.word	0x20024098
   2a288:	200213e4 	.word	0x200213e4

0002a28c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2a290:	4d16      	ldr	r5, [pc, #88]	; (2a2ec <init_mem_slab_module+0x60>)
   2a292:	4c17      	ldr	r4, [pc, #92]	; (2a2f0 <init_mem_slab_module+0x64>)
   2a294:	46a8      	mov	r8, r5
   2a296:	4e17      	ldr	r6, [pc, #92]	; (2a2f4 <init_mem_slab_module+0x68>)
   2a298:	42ac      	cmp	r4, r5
   2a29a:	d90c      	bls.n	2a2b6 <init_mem_slab_module+0x2a>
   2a29c:	4916      	ldr	r1, [pc, #88]	; (2a2f8 <init_mem_slab_module+0x6c>)
   2a29e:	2342      	movs	r3, #66	; 0x42
   2a2a0:	4632      	mov	r2, r6
   2a2a2:	4816      	ldr	r0, [pc, #88]	; (2a2fc <init_mem_slab_module+0x70>)
   2a2a4:	f004 fd97 	bl	2edd6 <printk>
   2a2a8:	4815      	ldr	r0, [pc, #84]	; (2a300 <init_mem_slab_module+0x74>)
   2a2aa:	f004 fd94 	bl	2edd6 <printk>
   2a2ae:	2142      	movs	r1, #66	; 0x42
   2a2b0:	4630      	mov	r0, r6
   2a2b2:	f004 fdd6 	bl	2ee62 <assert_post_action>
   2a2b6:	4544      	cmp	r4, r8
   2a2b8:	d302      	bcc.n	2a2c0 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   2a2ba:	2000      	movs	r0, #0
	return rc;
}
   2a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a2c0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   2a2c4:	ea42 0301 	orr.w	r3, r2, r1
   2a2c8:	f013 0303 	ands.w	r3, r3, #3
   2a2cc:	d10b      	bne.n	2a2e6 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   2a2ce:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   2a2d0:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a2d2:	4283      	cmp	r3, r0
   2a2d4:	d101      	bne.n	2a2da <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2a2d6:	341c      	adds	r4, #28
   2a2d8:	e7de      	b.n	2a298 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2a2da:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a2dc:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2a2de:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   2a2e0:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   2a2e2:	440a      	add	r2, r1
   2a2e4:	e7f5      	b.n	2a2d2 <init_mem_slab_module+0x46>
		return -EINVAL;
   2a2e6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2a2ea:	e7e7      	b.n	2a2bc <init_mem_slab_module+0x30>
   2a2ec:	20026a38 	.word	0x20026a38
   2a2f0:	20026a1c 	.word	0x20026a1c
   2a2f4:	00032e5e 	.word	0x00032e5e
   2a2f8:	00032e83 	.word	0x00032e83
   2a2fc:	000316d1 	.word	0x000316d1
   2a300:	00032ea0 	.word	0x00032ea0

0002a304 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   2a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a306:	4604      	mov	r4, r0
   2a308:	460d      	mov	r5, r1
   2a30a:	4616      	mov	r6, r2
   2a30c:	f04f 0320 	mov.w	r3, #32
   2a310:	f3ef 8711 	mrs	r7, BASEPRI
   2a314:	f383 8811 	msr	BASEPRI, r3
   2a318:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a31c:	4823      	ldr	r0, [pc, #140]	; (2a3ac <k_mem_slab_alloc+0xa8>)
   2a31e:	f002 f823 	bl	2c368 <z_spin_lock_valid>
   2a322:	b968      	cbnz	r0, 2a340 <k_mem_slab_alloc+0x3c>
   2a324:	234a      	movs	r3, #74	; 0x4a
   2a326:	4a22      	ldr	r2, [pc, #136]	; (2a3b0 <k_mem_slab_alloc+0xac>)
   2a328:	4922      	ldr	r1, [pc, #136]	; (2a3b4 <k_mem_slab_alloc+0xb0>)
   2a32a:	4823      	ldr	r0, [pc, #140]	; (2a3b8 <k_mem_slab_alloc+0xb4>)
   2a32c:	f004 fd53 	bl	2edd6 <printk>
   2a330:	491e      	ldr	r1, [pc, #120]	; (2a3ac <k_mem_slab_alloc+0xa8>)
   2a332:	4822      	ldr	r0, [pc, #136]	; (2a3bc <k_mem_slab_alloc+0xb8>)
   2a334:	f004 fd4f 	bl	2edd6 <printk>
   2a338:	214a      	movs	r1, #74	; 0x4a
   2a33a:	481d      	ldr	r0, [pc, #116]	; (2a3b0 <k_mem_slab_alloc+0xac>)
   2a33c:	f004 fd91 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a340:	481a      	ldr	r0, [pc, #104]	; (2a3ac <k_mem_slab_alloc+0xa8>)
   2a342:	f002 f82f 	bl	2c3a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   2a346:	6963      	ldr	r3, [r4, #20]
   2a348:	b1eb      	cbz	r3, 2a386 <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   2a34a:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2a34c:	681b      	ldr	r3, [r3, #0]
   2a34e:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   2a350:	69a3      	ldr	r3, [r4, #24]
   2a352:	3301      	adds	r3, #1
   2a354:	61a3      	str	r3, [r4, #24]
		result = 0;
   2a356:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a358:	4814      	ldr	r0, [pc, #80]	; (2a3ac <k_mem_slab_alloc+0xa8>)
   2a35a:	f002 f813 	bl	2c384 <z_spin_unlock_valid>
   2a35e:	b968      	cbnz	r0, 2a37c <k_mem_slab_alloc+0x78>
   2a360:	235d      	movs	r3, #93	; 0x5d
   2a362:	4a13      	ldr	r2, [pc, #76]	; (2a3b0 <k_mem_slab_alloc+0xac>)
   2a364:	4916      	ldr	r1, [pc, #88]	; (2a3c0 <k_mem_slab_alloc+0xbc>)
   2a366:	4814      	ldr	r0, [pc, #80]	; (2a3b8 <k_mem_slab_alloc+0xb4>)
   2a368:	f004 fd35 	bl	2edd6 <printk>
   2a36c:	490f      	ldr	r1, [pc, #60]	; (2a3ac <k_mem_slab_alloc+0xa8>)
   2a36e:	4815      	ldr	r0, [pc, #84]	; (2a3c4 <k_mem_slab_alloc+0xc0>)
   2a370:	f004 fd31 	bl	2edd6 <printk>
   2a374:	215d      	movs	r1, #93	; 0x5d
   2a376:	480e      	ldr	r0, [pc, #56]	; (2a3b0 <k_mem_slab_alloc+0xac>)
   2a378:	f004 fd73 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2a37c:	f387 8811 	msr	BASEPRI, r7
   2a380:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   2a384:	e010      	b.n	2a3a8 <k_mem_slab_alloc+0xa4>
	} else if (timeout == K_NO_WAIT) {
   2a386:	b91e      	cbnz	r6, 2a390 <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   2a388:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   2a38a:	f06f 040b 	mvn.w	r4, #11
   2a38e:	e7e3      	b.n	2a358 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   2a390:	4622      	mov	r2, r4
   2a392:	4633      	mov	r3, r6
   2a394:	4639      	mov	r1, r7
   2a396:	4805      	ldr	r0, [pc, #20]	; (2a3ac <k_mem_slab_alloc+0xa8>)
   2a398:	f001 fc0c 	bl	2bbb4 <z_pend_curr>
		if (result == 0) {
   2a39c:	4604      	mov	r4, r0
   2a39e:	b918      	cbnz	r0, 2a3a8 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   2a3a0:	4b09      	ldr	r3, [pc, #36]	; (2a3c8 <k_mem_slab_alloc+0xc4>)
   2a3a2:	689b      	ldr	r3, [r3, #8]
   2a3a4:	695b      	ldr	r3, [r3, #20]
   2a3a6:	602b      	str	r3, [r5, #0]
}
   2a3a8:	4620      	mov	r0, r4
   2a3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a3ac:	20020b9c 	.word	0x20020b9c
   2a3b0:	00031a38 	.word	0x00031a38
   2a3b4:	00031a5e 	.word	0x00031a5e
   2a3b8:	000316d1 	.word	0x000316d1
   2a3bc:	00031a73 	.word	0x00031a73
   2a3c0:	00031a8b 	.word	0x00031a8b
   2a3c4:	00031aa2 	.word	0x00031aa2
   2a3c8:	200213cc 	.word	0x200213cc

0002a3cc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2a3cc:	b570      	push	{r4, r5, r6, lr}
   2a3ce:	4604      	mov	r4, r0
   2a3d0:	460d      	mov	r5, r1
	__asm__ volatile(
   2a3d2:	f04f 0320 	mov.w	r3, #32
   2a3d6:	f3ef 8611 	mrs	r6, BASEPRI
   2a3da:	f383 8811 	msr	BASEPRI, r3
   2a3de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a3e2:	4824      	ldr	r0, [pc, #144]	; (2a474 <k_mem_slab_free+0xa8>)
   2a3e4:	f001 ffc0 	bl	2c368 <z_spin_lock_valid>
   2a3e8:	b968      	cbnz	r0, 2a406 <k_mem_slab_free+0x3a>
   2a3ea:	234a      	movs	r3, #74	; 0x4a
   2a3ec:	4a22      	ldr	r2, [pc, #136]	; (2a478 <k_mem_slab_free+0xac>)
   2a3ee:	4923      	ldr	r1, [pc, #140]	; (2a47c <k_mem_slab_free+0xb0>)
   2a3f0:	4823      	ldr	r0, [pc, #140]	; (2a480 <k_mem_slab_free+0xb4>)
   2a3f2:	f004 fcf0 	bl	2edd6 <printk>
   2a3f6:	491f      	ldr	r1, [pc, #124]	; (2a474 <k_mem_slab_free+0xa8>)
   2a3f8:	4822      	ldr	r0, [pc, #136]	; (2a484 <k_mem_slab_free+0xb8>)
   2a3fa:	f004 fcec 	bl	2edd6 <printk>
   2a3fe:	214a      	movs	r1, #74	; 0x4a
   2a400:	481d      	ldr	r0, [pc, #116]	; (2a478 <k_mem_slab_free+0xac>)
   2a402:	f004 fd2e 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a406:	481b      	ldr	r0, [pc, #108]	; (2a474 <k_mem_slab_free+0xa8>)
   2a408:	f001 ffcc 	bl	2c3a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2a40c:	4620      	mov	r0, r4
   2a40e:	f001 fc8d 	bl	2bd2c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   2a412:	b180      	cbz	r0, 2a436 <k_mem_slab_free+0x6a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2a414:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2a416:	682a      	ldr	r2, [r5, #0]
   2a418:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2a41a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a41c:	7b42      	ldrb	r2, [r0, #13]
   2a41e:	06d2      	lsls	r2, r2, #27
   2a420:	d103      	bne.n	2a42a <k_mem_slab_free+0x5e>
	if (z_is_thread_ready(thread)) {
   2a422:	6983      	ldr	r3, [r0, #24]
   2a424:	b90b      	cbnz	r3, 2a42a <k_mem_slab_free+0x5e>
		z_add_thread_to_ready_q(thread);
   2a426:	f001 f80b 	bl	2b440 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   2a42a:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   2a42c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2a430:	4810      	ldr	r0, [pc, #64]	; (2a474 <k_mem_slab_free+0xa8>)
   2a432:	f000 be1b 	b.w	2b06c <z_reschedule>
		**(char ***)mem = slab->free_list;
   2a436:	682b      	ldr	r3, [r5, #0]
   2a438:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a43a:	480e      	ldr	r0, [pc, #56]	; (2a474 <k_mem_slab_free+0xa8>)
   2a43c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2a43e:	682b      	ldr	r3, [r5, #0]
   2a440:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   2a442:	69a3      	ldr	r3, [r4, #24]
   2a444:	3b01      	subs	r3, #1
   2a446:	61a3      	str	r3, [r4, #24]
   2a448:	f001 ff9c 	bl	2c384 <z_spin_unlock_valid>
   2a44c:	b968      	cbnz	r0, 2a46a <k_mem_slab_free+0x9e>
   2a44e:	235d      	movs	r3, #93	; 0x5d
   2a450:	4a09      	ldr	r2, [pc, #36]	; (2a478 <k_mem_slab_free+0xac>)
   2a452:	490d      	ldr	r1, [pc, #52]	; (2a488 <k_mem_slab_free+0xbc>)
   2a454:	480a      	ldr	r0, [pc, #40]	; (2a480 <k_mem_slab_free+0xb4>)
   2a456:	f004 fcbe 	bl	2edd6 <printk>
   2a45a:	4906      	ldr	r1, [pc, #24]	; (2a474 <k_mem_slab_free+0xa8>)
   2a45c:	480b      	ldr	r0, [pc, #44]	; (2a48c <k_mem_slab_free+0xc0>)
   2a45e:	f004 fcba 	bl	2edd6 <printk>
   2a462:	215d      	movs	r1, #93	; 0x5d
   2a464:	4804      	ldr	r0, [pc, #16]	; (2a478 <k_mem_slab_free+0xac>)
   2a466:	f004 fcfc 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2a46a:	f386 8811 	msr	BASEPRI, r6
   2a46e:	f3bf 8f6f 	isb	sy
}
   2a472:	bd70      	pop	{r4, r5, r6, pc}
   2a474:	20020b9c 	.word	0x20020b9c
   2a478:	00031a38 	.word	0x00031a38
   2a47c:	00031a5e 	.word	0x00031a5e
   2a480:	000316d1 	.word	0x000316d1
   2a484:	00031a73 	.word	0x00031a73
   2a488:	00031a8b 	.word	0x00031a8b
   2a48c:	00031aa2 	.word	0x00031aa2

0002a490 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   2a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2a492:	4d10      	ldr	r5, [pc, #64]	; (2a4d4 <init_static_pools+0x44>)
   2a494:	4c10      	ldr	r4, [pc, #64]	; (2a4d8 <init_static_pools+0x48>)
   2a496:	462f      	mov	r7, r5
   2a498:	4e10      	ldr	r6, [pc, #64]	; (2a4dc <init_static_pools+0x4c>)
   2a49a:	42ac      	cmp	r4, r5
   2a49c:	d90c      	bls.n	2a4b8 <init_static_pools+0x28>
   2a49e:	4910      	ldr	r1, [pc, #64]	; (2a4e0 <init_static_pools+0x50>)
   2a4a0:	2328      	movs	r3, #40	; 0x28
   2a4a2:	4632      	mov	r2, r6
   2a4a4:	480f      	ldr	r0, [pc, #60]	; (2a4e4 <init_static_pools+0x54>)
   2a4a6:	f004 fc96 	bl	2edd6 <printk>
   2a4aa:	480f      	ldr	r0, [pc, #60]	; (2a4e8 <init_static_pools+0x58>)
   2a4ac:	f004 fc93 	bl	2edd6 <printk>
   2a4b0:	2128      	movs	r1, #40	; 0x28
   2a4b2:	4630      	mov	r0, r6
   2a4b4:	f004 fcd5 	bl	2ee62 <assert_post_action>
   2a4b8:	42bc      	cmp	r4, r7
   2a4ba:	d301      	bcc.n	2a4c0 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   2a4bc:	2000      	movs	r0, #0
   2a4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2a4c0:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   2a4c4:	4620      	mov	r0, r4
   2a4c6:	e9c4 3305 	strd	r3, r3, [r4, #20]
   2a4ca:	f004 fa0c 	bl	2e8e6 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2a4ce:	341c      	adds	r4, #28
   2a4d0:	e7e3      	b.n	2a49a <init_static_pools+0xa>
   2a4d2:	bf00      	nop
   2a4d4:	20026a54 	.word	0x20026a54
   2a4d8:	20026a38 	.word	0x20026a38
   2a4dc:	00032ebf 	.word	0x00032ebf
   2a4e0:	00032ee3 	.word	0x00032ee3
   2a4e4:	000316d1 	.word	0x000316d1
   2a4e8:	00032ea0 	.word	0x00032ea0

0002a4ec <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   2a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a4f0:	4607      	mov	r7, r0
   2a4f2:	b085      	sub	sp, #20
   2a4f4:	460d      	mov	r5, r1
   2a4f6:	4692      	mov	sl, r2
   2a4f8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a4fa:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   2a4fe:	2b00      	cmp	r3, #0
   2a500:	d048      	beq.n	2a594 <k_mem_pool_alloc+0xa8>
   2a502:	2c00      	cmp	r4, #0
   2a504:	d139      	bne.n	2a57a <k_mem_pool_alloc+0x8e>
	s64_t end = 0;
   2a506:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   2a50a:	4b26      	ldr	r3, [pc, #152]	; (2a5a4 <k_mem_pool_alloc+0xb8>)
   2a50c:	4e26      	ldr	r6, [pc, #152]	; (2a5a8 <k_mem_pool_alloc+0xbc>)
   2a50e:	1afb      	subs	r3, r7, r3
   2a510:	109b      	asrs	r3, r3, #2
   2a512:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   2a514:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   2a518:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   2a51a:	ab03      	add	r3, sp, #12
   2a51c:	aa02      	add	r2, sp, #8
   2a51e:	9500      	str	r5, [sp, #0]
   2a520:	4651      	mov	r1, sl
   2a522:	4638      	mov	r0, r7
   2a524:	f004 fa25 	bl	2e972 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   2a528:	796b      	ldrb	r3, [r5, #5]
   2a52a:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   2a52c:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   2a52e:	f362 0303 	bfi	r3, r2, #0, #4
   2a532:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   2a534:	686b      	ldr	r3, [r5, #4]
   2a536:	9a03      	ldr	r2, [sp, #12]
   2a538:	f362 331f 	bfi	r3, r2, #12, #20
   2a53c:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   2a53e:	b1c8      	cbz	r0, 2a574 <k_mem_pool_alloc+0x88>
   2a540:	b1c4      	cbz	r4, 2a574 <k_mem_pool_alloc+0x88>
   2a542:	f110 0f0c 	cmn.w	r0, #12
   2a546:	d115      	bne.n	2a574 <k_mem_pool_alloc+0x88>
	__asm__ volatile(
   2a548:	f04f 0320 	mov.w	r3, #32
   2a54c:	f3ef 8011 	mrs	r0, BASEPRI
   2a550:	f383 8811 	msr	BASEPRI, r3
   2a554:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   2a558:	4622      	mov	r2, r4
   2a55a:	4659      	mov	r1, fp
   2a55c:	f001 fad0 	bl	2bb00 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   2a560:	1c63      	adds	r3, r4, #1
   2a562:	d0da      	beq.n	2a51a <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   2a564:	f005 fbd1 	bl	2fd0a <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   2a568:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   2a56c:	2c00      	cmp	r4, #0
   2a56e:	dcd4      	bgt.n	2a51a <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   2a570:	f06f 000a 	mvn.w	r0, #10
}
   2a574:	b005      	add	sp, #20
   2a576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   2a57a:	490c      	ldr	r1, [pc, #48]	; (2a5ac <k_mem_pool_alloc+0xc0>)
   2a57c:	2337      	movs	r3, #55	; 0x37
   2a57e:	4a0c      	ldr	r2, [pc, #48]	; (2a5b0 <k_mem_pool_alloc+0xc4>)
   2a580:	480c      	ldr	r0, [pc, #48]	; (2a5b4 <k_mem_pool_alloc+0xc8>)
   2a582:	f004 fc28 	bl	2edd6 <printk>
   2a586:	480c      	ldr	r0, [pc, #48]	; (2a5b8 <k_mem_pool_alloc+0xcc>)
   2a588:	f004 fc25 	bl	2edd6 <printk>
   2a58c:	2137      	movs	r1, #55	; 0x37
   2a58e:	4808      	ldr	r0, [pc, #32]	; (2a5b0 <k_mem_pool_alloc+0xc4>)
   2a590:	f004 fc67 	bl	2ee62 <assert_post_action>
	if (timeout > 0) {
   2a594:	2c00      	cmp	r4, #0
   2a596:	ddb6      	ble.n	2a506 <k_mem_pool_alloc+0x1a>
   2a598:	f005 fbb7 	bl	2fd0a <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   2a59c:	eb10 0804 	adds.w	r8, r0, r4
   2a5a0:	e7b3      	b.n	2a50a <k_mem_pool_alloc+0x1e>
   2a5a2:	bf00      	nop
   2a5a4:	20026a38 	.word	0x20026a38
   2a5a8:	b6db6db7 	.word	0xb6db6db7
   2a5ac:	00032efd 	.word	0x00032efd
   2a5b0:	00032ebf 	.word	0x00032ebf
   2a5b4:	000316d1 	.word	0x000316d1
   2a5b8:	000323ee 	.word	0x000323ee

0002a5bc <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   2a5bc:	b570      	push	{r4, r5, r6, lr}
   2a5be:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   2a5c0:	6802      	ldr	r2, [r0, #0]
   2a5c2:	7841      	ldrb	r1, [r0, #1]
   2a5c4:	4d24      	ldr	r5, [pc, #144]	; (2a658 <k_mem_pool_free_id+0x9c>)
   2a5c6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2a5ca:	00a4      	lsls	r4, r4, #2
   2a5cc:	0b12      	lsrs	r2, r2, #12
   2a5ce:	f001 010f 	and.w	r1, r1, #15
   2a5d2:	1928      	adds	r0, r5, r4
   2a5d4:	f7f3 fbce 	bl	1dd74 <z_sys_mem_pool_block_free>
   2a5d8:	f04f 0320 	mov.w	r3, #32
   2a5dc:	f3ef 8611 	mrs	r6, BASEPRI
   2a5e0:	f383 8811 	msr	BASEPRI, r3
   2a5e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a5e8:	481c      	ldr	r0, [pc, #112]	; (2a65c <k_mem_pool_free_id+0xa0>)
   2a5ea:	f001 febd 	bl	2c368 <z_spin_lock_valid>
   2a5ee:	b968      	cbnz	r0, 2a60c <k_mem_pool_free_id+0x50>
   2a5f0:	234a      	movs	r3, #74	; 0x4a
   2a5f2:	4a1b      	ldr	r2, [pc, #108]	; (2a660 <k_mem_pool_free_id+0xa4>)
   2a5f4:	491b      	ldr	r1, [pc, #108]	; (2a664 <k_mem_pool_free_id+0xa8>)
   2a5f6:	481c      	ldr	r0, [pc, #112]	; (2a668 <k_mem_pool_free_id+0xac>)
   2a5f8:	f004 fbed 	bl	2edd6 <printk>
   2a5fc:	4917      	ldr	r1, [pc, #92]	; (2a65c <k_mem_pool_free_id+0xa0>)
   2a5fe:	481b      	ldr	r0, [pc, #108]	; (2a66c <k_mem_pool_free_id+0xb0>)
   2a600:	f004 fbe9 	bl	2edd6 <printk>
   2a604:	214a      	movs	r1, #74	; 0x4a
   2a606:	4816      	ldr	r0, [pc, #88]	; (2a660 <k_mem_pool_free_id+0xa4>)
   2a608:	f004 fc2b 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a60c:	4813      	ldr	r0, [pc, #76]	; (2a65c <k_mem_pool_free_id+0xa0>)
   2a60e:	f001 fec9 	bl	2c3a4 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   2a612:	f104 0014 	add.w	r0, r4, #20
   2a616:	4428      	add	r0, r5
   2a618:	f005 fb31 	bl	2fc7e <z_unpend_all>

	if (need_sched != 0) {
   2a61c:	b128      	cbz	r0, 2a62a <k_mem_pool_free_id+0x6e>
		z_reschedule(&lock, key);
   2a61e:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   2a620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2a624:	480d      	ldr	r0, [pc, #52]	; (2a65c <k_mem_pool_free_id+0xa0>)
   2a626:	f000 bd21 	b.w	2b06c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a62a:	480c      	ldr	r0, [pc, #48]	; (2a65c <k_mem_pool_free_id+0xa0>)
   2a62c:	f001 feaa 	bl	2c384 <z_spin_unlock_valid>
   2a630:	b968      	cbnz	r0, 2a64e <k_mem_pool_free_id+0x92>
   2a632:	235d      	movs	r3, #93	; 0x5d
   2a634:	4a0a      	ldr	r2, [pc, #40]	; (2a660 <k_mem_pool_free_id+0xa4>)
   2a636:	490e      	ldr	r1, [pc, #56]	; (2a670 <k_mem_pool_free_id+0xb4>)
   2a638:	480b      	ldr	r0, [pc, #44]	; (2a668 <k_mem_pool_free_id+0xac>)
   2a63a:	f004 fbcc 	bl	2edd6 <printk>
   2a63e:	4907      	ldr	r1, [pc, #28]	; (2a65c <k_mem_pool_free_id+0xa0>)
   2a640:	480c      	ldr	r0, [pc, #48]	; (2a674 <k_mem_pool_free_id+0xb8>)
   2a642:	f004 fbc8 	bl	2edd6 <printk>
   2a646:	215d      	movs	r1, #93	; 0x5d
   2a648:	4805      	ldr	r0, [pc, #20]	; (2a660 <k_mem_pool_free_id+0xa4>)
   2a64a:	f004 fc0a 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2a64e:	f386 8811 	msr	BASEPRI, r6
   2a652:	f3bf 8f6f 	isb	sy
}
   2a656:	bd70      	pop	{r4, r5, r6, pc}
   2a658:	20026a38 	.word	0x20026a38
   2a65c:	200213c4 	.word	0x200213c4
   2a660:	00031a38 	.word	0x00031a38
   2a664:	00031a5e 	.word	0x00031a5e
   2a668:	000316d1 	.word	0x000316d1
   2a66c:	00031a73 	.word	0x00031a73
   2a670:	00031a8b 	.word	0x00031a8b
   2a674:	00031aa2 	.word	0x00031aa2

0002a678 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   2a678:	4601      	mov	r1, r0
   2a67a:	4801      	ldr	r0, [pc, #4]	; (2a680 <k_malloc+0x8>)
   2a67c:	f005 ba9f 	b.w	2fbbe <k_mem_pool_malloc>
   2a680:	20026a38 	.word	0x20026a38

0002a684 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   2a684:	b510      	push	{r4, lr}
   2a686:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   2a688:	f005 fb1f 	bl	2fcca <k_is_in_isr>
   2a68c:	b948      	cbnz	r0, 2a6a2 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   2a68e:	4b06      	ldr	r3, [pc, #24]	; (2a6a8 <z_thread_malloc+0x24>)
   2a690:	689b      	ldr	r3, [r3, #8]
   2a692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   2a694:	b13b      	cbz	r3, 2a6a6 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   2a696:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   2a698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   2a69c:	4618      	mov	r0, r3
   2a69e:	f005 ba8e 	b.w	2fbbe <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   2a6a2:	4b02      	ldr	r3, [pc, #8]	; (2a6ac <z_thread_malloc+0x28>)
   2a6a4:	e7f7      	b.n	2a696 <z_thread_malloc+0x12>
}
   2a6a6:	bd10      	pop	{r4, pc}
   2a6a8:	200213cc 	.word	0x200213cc
   2a6ac:	20026a38 	.word	0x20026a38

0002a6b0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   2a6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a6b4:	4604      	mov	r4, r0
   2a6b6:	4688      	mov	r8, r1
   2a6b8:	4616      	mov	r6, r2
   2a6ba:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   2a6be:	b16b      	cbz	r3, 2a6dc <z_impl_k_msgq_put+0x2c>
   2a6c0:	b162      	cbz	r2, 2a6dc <z_impl_k_msgq_put+0x2c>
   2a6c2:	4941      	ldr	r1, [pc, #260]	; (2a7c8 <z_impl_k_msgq_put+0x118>)
   2a6c4:	2376      	movs	r3, #118	; 0x76
   2a6c6:	4a41      	ldr	r2, [pc, #260]	; (2a7cc <z_impl_k_msgq_put+0x11c>)
   2a6c8:	4841      	ldr	r0, [pc, #260]	; (2a7d0 <z_impl_k_msgq_put+0x120>)
   2a6ca:	f004 fb84 	bl	2edd6 <printk>
   2a6ce:	4841      	ldr	r0, [pc, #260]	; (2a7d4 <z_impl_k_msgq_put+0x124>)
   2a6d0:	f004 fb81 	bl	2edd6 <printk>
   2a6d4:	2176      	movs	r1, #118	; 0x76
   2a6d6:	483d      	ldr	r0, [pc, #244]	; (2a7cc <z_impl_k_msgq_put+0x11c>)
   2a6d8:	f004 fbc3 	bl	2ee62 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2a6dc:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   2a6e0:	f04f 0320 	mov.w	r3, #32
   2a6e4:	f3ef 8711 	mrs	r7, BASEPRI
   2a6e8:	f383 8811 	msr	BASEPRI, r3
   2a6ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a6f0:	4628      	mov	r0, r5
   2a6f2:	f001 fe39 	bl	2c368 <z_spin_lock_valid>
   2a6f6:	b968      	cbnz	r0, 2a714 <z_impl_k_msgq_put+0x64>
   2a6f8:	234a      	movs	r3, #74	; 0x4a
   2a6fa:	4a37      	ldr	r2, [pc, #220]	; (2a7d8 <z_impl_k_msgq_put+0x128>)
   2a6fc:	4937      	ldr	r1, [pc, #220]	; (2a7dc <z_impl_k_msgq_put+0x12c>)
   2a6fe:	4834      	ldr	r0, [pc, #208]	; (2a7d0 <z_impl_k_msgq_put+0x120>)
   2a700:	f004 fb69 	bl	2edd6 <printk>
   2a704:	4629      	mov	r1, r5
   2a706:	4836      	ldr	r0, [pc, #216]	; (2a7e0 <z_impl_k_msgq_put+0x130>)
   2a708:	f004 fb65 	bl	2edd6 <printk>
   2a70c:	214a      	movs	r1, #74	; 0x4a
   2a70e:	4832      	ldr	r0, [pc, #200]	; (2a7d8 <z_impl_k_msgq_put+0x128>)
   2a710:	f004 fba7 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a714:	4628      	mov	r0, r5
   2a716:	f001 fe45 	bl	2c3a4 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   2a71a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2a71c:	6923      	ldr	r3, [r4, #16]
   2a71e:	429a      	cmp	r2, r3
   2a720:	d242      	bcs.n	2a7a8 <z_impl_k_msgq_put+0xf8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2a722:	4620      	mov	r0, r4
   2a724:	f001 fb02 	bl	2bd2c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2a728:	68e2      	ldr	r2, [r4, #12]
   2a72a:	4606      	mov	r6, r0
   2a72c:	4641      	mov	r1, r8
   2a72e:	b1a0      	cbz	r0, 2a75a <z_impl_k_msgq_put+0xaa>
   2a730:	6940      	ldr	r0, [r0, #20]
   2a732:	f005 fb70 	bl	2fe16 <memcpy>
   2a736:	2300      	movs	r3, #0
   2a738:	66b3      	str	r3, [r6, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a73a:	7b73      	ldrb	r3, [r6, #13]
   2a73c:	06db      	lsls	r3, r3, #27
   2a73e:	d104      	bne.n	2a74a <z_impl_k_msgq_put+0x9a>
	if (z_is_thread_ready(thread)) {
   2a740:	69b3      	ldr	r3, [r6, #24]
   2a742:	b913      	cbnz	r3, 2a74a <z_impl_k_msgq_put+0x9a>
		z_add_thread_to_ready_q(thread);
   2a744:	4630      	mov	r0, r6
   2a746:	f000 fe7b 	bl	2b440 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   2a74a:	4639      	mov	r1, r7
   2a74c:	4628      	mov	r0, r5
   2a74e:	f000 fc8d 	bl	2b06c <z_reschedule>
			return 0;
   2a752:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2a754:	4620      	mov	r0, r4
   2a756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a75a:	6a20      	ldr	r0, [r4, #32]
   2a75c:	f005 fb5b 	bl	2fe16 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   2a760:	6a23      	ldr	r3, [r4, #32]
   2a762:	68e2      	ldr	r2, [r4, #12]
   2a764:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2a766:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2a768:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   2a76a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2a76c:	bf04      	itt	eq
   2a76e:	6963      	ldreq	r3, [r4, #20]
   2a770:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   2a772:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a774:	3301      	adds	r3, #1
   2a776:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   2a778:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a77a:	4628      	mov	r0, r5
   2a77c:	f001 fe02 	bl	2c384 <z_spin_unlock_valid>
   2a780:	b968      	cbnz	r0, 2a79e <z_impl_k_msgq_put+0xee>
   2a782:	235d      	movs	r3, #93	; 0x5d
   2a784:	4a14      	ldr	r2, [pc, #80]	; (2a7d8 <z_impl_k_msgq_put+0x128>)
   2a786:	4917      	ldr	r1, [pc, #92]	; (2a7e4 <z_impl_k_msgq_put+0x134>)
   2a788:	4811      	ldr	r0, [pc, #68]	; (2a7d0 <z_impl_k_msgq_put+0x120>)
   2a78a:	f004 fb24 	bl	2edd6 <printk>
   2a78e:	4629      	mov	r1, r5
   2a790:	4815      	ldr	r0, [pc, #84]	; (2a7e8 <z_impl_k_msgq_put+0x138>)
   2a792:	f004 fb20 	bl	2edd6 <printk>
   2a796:	215d      	movs	r1, #93	; 0x5d
   2a798:	480f      	ldr	r0, [pc, #60]	; (2a7d8 <z_impl_k_msgq_put+0x128>)
   2a79a:	f004 fb62 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2a79e:	f387 8811 	msr	BASEPRI, r7
   2a7a2:	f3bf 8f6f 	isb	sy
	return result;
   2a7a6:	e7d5      	b.n	2a754 <z_impl_k_msgq_put+0xa4>
	} else if (timeout == K_NO_WAIT) {
   2a7a8:	b15e      	cbz	r6, 2a7c2 <z_impl_k_msgq_put+0x112>
		_current->base.swap_data = data;
   2a7aa:	4b10      	ldr	r3, [pc, #64]	; (2a7ec <z_impl_k_msgq_put+0x13c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a7ac:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   2a7ae:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a7b0:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   2a7b2:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a7b6:	4628      	mov	r0, r5
   2a7b8:	4633      	mov	r3, r6
}
   2a7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a7be:	f001 b9f9 	b.w	2bbb4 <z_pend_curr>
		result = -ENOMSG;
   2a7c2:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2a7c6:	e7d8      	b.n	2a77a <z_impl_k_msgq_put+0xca>
   2a7c8:	00032f43 	.word	0x00032f43
   2a7cc:	00032f21 	.word	0x00032f21
   2a7d0:	000316d1 	.word	0x000316d1
   2a7d4:	000323ee 	.word	0x000323ee
   2a7d8:	00031a38 	.word	0x00031a38
   2a7dc:	00031a5e 	.word	0x00031a5e
   2a7e0:	00031a73 	.word	0x00031a73
   2a7e4:	00031a8b 	.word	0x00031a8b
   2a7e8:	00031aa2 	.word	0x00031aa2
   2a7ec:	200213cc 	.word	0x200213cc

0002a7f0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   2a7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a7f4:	4604      	mov	r4, r0
   2a7f6:	4688      	mov	r8, r1
   2a7f8:	4615      	mov	r5, r2
   2a7fa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   2a7fe:	b16b      	cbz	r3, 2a81c <z_impl_k_msgq_get+0x2c>
   2a800:	b162      	cbz	r2, 2a81c <z_impl_k_msgq_get+0x2c>
   2a802:	4947      	ldr	r1, [pc, #284]	; (2a920 <z_impl_k_msgq_get+0x130>)
   2a804:	23c1      	movs	r3, #193	; 0xc1
   2a806:	4a47      	ldr	r2, [pc, #284]	; (2a924 <z_impl_k_msgq_get+0x134>)
   2a808:	4847      	ldr	r0, [pc, #284]	; (2a928 <z_impl_k_msgq_get+0x138>)
   2a80a:	f004 fae4 	bl	2edd6 <printk>
   2a80e:	4847      	ldr	r0, [pc, #284]	; (2a92c <z_impl_k_msgq_get+0x13c>)
   2a810:	f004 fae1 	bl	2edd6 <printk>
   2a814:	21c1      	movs	r1, #193	; 0xc1
   2a816:	4843      	ldr	r0, [pc, #268]	; (2a924 <z_impl_k_msgq_get+0x134>)
   2a818:	f004 fb23 	bl	2ee62 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   2a81c:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   2a820:	f04f 0320 	mov.w	r3, #32
   2a824:	f3ef 8711 	mrs	r7, BASEPRI
   2a828:	f383 8811 	msr	BASEPRI, r3
   2a82c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a830:	4630      	mov	r0, r6
   2a832:	f001 fd99 	bl	2c368 <z_spin_lock_valid>
   2a836:	b968      	cbnz	r0, 2a854 <z_impl_k_msgq_get+0x64>
   2a838:	234a      	movs	r3, #74	; 0x4a
   2a83a:	4a3d      	ldr	r2, [pc, #244]	; (2a930 <z_impl_k_msgq_get+0x140>)
   2a83c:	493d      	ldr	r1, [pc, #244]	; (2a934 <z_impl_k_msgq_get+0x144>)
   2a83e:	483a      	ldr	r0, [pc, #232]	; (2a928 <z_impl_k_msgq_get+0x138>)
   2a840:	f004 fac9 	bl	2edd6 <printk>
   2a844:	4631      	mov	r1, r6
   2a846:	483c      	ldr	r0, [pc, #240]	; (2a938 <z_impl_k_msgq_get+0x148>)
   2a848:	f004 fac5 	bl	2edd6 <printk>
   2a84c:	214a      	movs	r1, #74	; 0x4a
   2a84e:	4838      	ldr	r0, [pc, #224]	; (2a930 <z_impl_k_msgq_get+0x140>)
   2a850:	f004 fb07 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a854:	4630      	mov	r0, r6
   2a856:	f001 fda5 	bl	2c3a4 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   2a85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a85c:	2b00      	cmp	r3, #0
   2a85e:	d039      	beq.n	2a8d4 <z_impl_k_msgq_get+0xe4>
   2a860:	68e2      	ldr	r2, [r4, #12]
   2a862:	69e1      	ldr	r1, [r4, #28]
   2a864:	4640      	mov	r0, r8
   2a866:	f005 fad6 	bl	2fe16 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   2a86a:	69e3      	ldr	r3, [r4, #28]
   2a86c:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2a86e:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   2a870:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   2a872:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   2a874:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   2a876:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2a878:	bf04      	itt	eq
   2a87a:	6963      	ldreq	r3, [r4, #20]
   2a87c:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   2a87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a880:	3b01      	subs	r3, #1
   2a882:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2a884:	f001 fa52 	bl	2bd2c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2a888:	4605      	mov	r5, r0
   2a88a:	2800      	cmp	r0, #0
   2a88c:	d031      	beq.n	2a8f2 <z_impl_k_msgq_get+0x102>
   2a88e:	68e2      	ldr	r2, [r4, #12]
   2a890:	6941      	ldr	r1, [r0, #20]
   2a892:	6a20      	ldr	r0, [r4, #32]
   2a894:	f005 fabf 	bl	2fe16 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2a898:	6a23      	ldr	r3, [r4, #32]
   2a89a:	68e2      	ldr	r2, [r4, #12]
   2a89c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2a89e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2a8a0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   2a8a2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2a8a4:	bf04      	itt	eq
   2a8a6:	6963      	ldreq	r3, [r4, #20]
   2a8a8:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   2a8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a8ac:	3301      	adds	r3, #1
   2a8ae:	6263      	str	r3, [r4, #36]	; 0x24
   2a8b0:	2300      	movs	r3, #0
   2a8b2:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a8b4:	7b6b      	ldrb	r3, [r5, #13]
   2a8b6:	06db      	lsls	r3, r3, #27
   2a8b8:	d104      	bne.n	2a8c4 <z_impl_k_msgq_get+0xd4>
	if (z_is_thread_ready(thread)) {
   2a8ba:	69ab      	ldr	r3, [r5, #24]
   2a8bc:	b913      	cbnz	r3, 2a8c4 <z_impl_k_msgq_get+0xd4>
		z_add_thread_to_ready_q(thread);
   2a8be:	4628      	mov	r0, r5
   2a8c0:	f000 fdbe 	bl	2b440 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   2a8c4:	4639      	mov	r1, r7
   2a8c6:	4630      	mov	r0, r6
   2a8c8:	f000 fbd0 	bl	2b06c <z_reschedule>
			return 0;
   2a8cc:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2a8ce:	4628      	mov	r0, r5
   2a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   2a8d4:	b15d      	cbz	r5, 2a8ee <z_impl_k_msgq_get+0xfe>
		_current->base.swap_data = data;
   2a8d6:	4b19      	ldr	r3, [pc, #100]	; (2a93c <z_impl_k_msgq_get+0x14c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a8d8:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   2a8da:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a8dc:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   2a8de:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a8e2:	4630      	mov	r0, r6
   2a8e4:	462b      	mov	r3, r5
}
   2a8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2a8ea:	f001 b963 	b.w	2bbb4 <z_pend_curr>
		result = -ENOMSG;
   2a8ee:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a8f2:	4630      	mov	r0, r6
   2a8f4:	f001 fd46 	bl	2c384 <z_spin_unlock_valid>
   2a8f8:	b968      	cbnz	r0, 2a916 <z_impl_k_msgq_get+0x126>
   2a8fa:	235d      	movs	r3, #93	; 0x5d
   2a8fc:	4a0c      	ldr	r2, [pc, #48]	; (2a930 <z_impl_k_msgq_get+0x140>)
   2a8fe:	4910      	ldr	r1, [pc, #64]	; (2a940 <z_impl_k_msgq_get+0x150>)
   2a900:	4809      	ldr	r0, [pc, #36]	; (2a928 <z_impl_k_msgq_get+0x138>)
   2a902:	f004 fa68 	bl	2edd6 <printk>
   2a906:	4631      	mov	r1, r6
   2a908:	480e      	ldr	r0, [pc, #56]	; (2a944 <z_impl_k_msgq_get+0x154>)
   2a90a:	f004 fa64 	bl	2edd6 <printk>
   2a90e:	215d      	movs	r1, #93	; 0x5d
   2a910:	4807      	ldr	r0, [pc, #28]	; (2a930 <z_impl_k_msgq_get+0x140>)
   2a912:	f004 faa6 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2a916:	f387 8811 	msr	BASEPRI, r7
   2a91a:	f3bf 8f6f 	isb	sy
	return result;
   2a91e:	e7d6      	b.n	2a8ce <z_impl_k_msgq_get+0xde>
   2a920:	00032f43 	.word	0x00032f43
   2a924:	00032f21 	.word	0x00032f21
   2a928:	000316d1 	.word	0x000316d1
   2a92c:	000323ee 	.word	0x000323ee
   2a930:	00031a38 	.word	0x00031a38
   2a934:	00031a5e 	.word	0x00031a5e
   2a938:	00031a73 	.word	0x00031a73
   2a93c:	200213cc 	.word	0x200213cc
   2a940:	00031a8b 	.word	0x00031a8b
   2a944:	00031aa2 	.word	0x00031aa2

0002a948 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   2a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a94a:	4604      	mov	r4, r0
   2a94c:	460e      	mov	r6, r1
	__asm__ volatile(
   2a94e:	f04f 0320 	mov.w	r3, #32
   2a952:	f3ef 8511 	mrs	r5, BASEPRI
   2a956:	f383 8811 	msr	BASEPRI, r3
   2a95a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a95e:	4861      	ldr	r0, [pc, #388]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2a960:	f001 fd02 	bl	2c368 <z_spin_lock_valid>
   2a964:	b968      	cbnz	r0, 2a982 <z_impl_k_mutex_lock+0x3a>
   2a966:	234a      	movs	r3, #74	; 0x4a
   2a968:	4a5f      	ldr	r2, [pc, #380]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2a96a:	4960      	ldr	r1, [pc, #384]	; (2aaec <z_impl_k_mutex_lock+0x1a4>)
   2a96c:	4860      	ldr	r0, [pc, #384]	; (2aaf0 <z_impl_k_mutex_lock+0x1a8>)
   2a96e:	f004 fa32 	bl	2edd6 <printk>
   2a972:	495c      	ldr	r1, [pc, #368]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2a974:	485f      	ldr	r0, [pc, #380]	; (2aaf4 <z_impl_k_mutex_lock+0x1ac>)
   2a976:	f004 fa2e 	bl	2edd6 <printk>
   2a97a:	214a      	movs	r1, #74	; 0x4a
   2a97c:	485a      	ldr	r0, [pc, #360]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2a97e:	f004 fa70 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a982:	4858      	ldr	r0, [pc, #352]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2a984:	f001 fd0e 	bl	2c3a4 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2a988:	68e3      	ldr	r3, [r4, #12]
   2a98a:	4a5b      	ldr	r2, [pc, #364]	; (2aaf8 <z_impl_k_mutex_lock+0x1b0>)
   2a98c:	b1f3      	cbz	r3, 2a9cc <z_impl_k_mutex_lock+0x84>
   2a98e:	68a0      	ldr	r0, [r4, #8]
   2a990:	6891      	ldr	r1, [r2, #8]
   2a992:	4288      	cmp	r0, r1
   2a994:	d03a      	beq.n	2aa0c <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   2a996:	2e00      	cmp	r6, #0
   2a998:	d13a      	bne.n	2aa10 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a99a:	4852      	ldr	r0, [pc, #328]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2a99c:	f001 fcf2 	bl	2c384 <z_spin_unlock_valid>
   2a9a0:	b968      	cbnz	r0, 2a9be <z_impl_k_mutex_lock+0x76>
   2a9a2:	235d      	movs	r3, #93	; 0x5d
   2a9a4:	4a50      	ldr	r2, [pc, #320]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2a9a6:	4955      	ldr	r1, [pc, #340]	; (2aafc <z_impl_k_mutex_lock+0x1b4>)
   2a9a8:	4851      	ldr	r0, [pc, #324]	; (2aaf0 <z_impl_k_mutex_lock+0x1a8>)
   2a9aa:	f004 fa14 	bl	2edd6 <printk>
   2a9ae:	494d      	ldr	r1, [pc, #308]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2a9b0:	4853      	ldr	r0, [pc, #332]	; (2ab00 <z_impl_k_mutex_lock+0x1b8>)
   2a9b2:	f004 fa10 	bl	2edd6 <printk>
   2a9b6:	215d      	movs	r1, #93	; 0x5d
   2a9b8:	484b      	ldr	r0, [pc, #300]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2a9ba:	f004 fa52 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2a9be:	f385 8811 	msr	BASEPRI, r5
   2a9c2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   2a9c6:	f06f 000f 	mvn.w	r0, #15
   2a9ca:	e01e      	b.n	2aa0a <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   2a9cc:	6891      	ldr	r1, [r2, #8]
   2a9ce:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2a9d2:	3301      	adds	r3, #1
   2a9d4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2a9d6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2a9d8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2a9da:	60a3      	str	r3, [r4, #8]
   2a9dc:	4841      	ldr	r0, [pc, #260]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2a9de:	f001 fcd1 	bl	2c384 <z_spin_unlock_valid>
   2a9e2:	b968      	cbnz	r0, 2aa00 <z_impl_k_mutex_lock+0xb8>
   2a9e4:	235d      	movs	r3, #93	; 0x5d
   2a9e6:	4a40      	ldr	r2, [pc, #256]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2a9e8:	4944      	ldr	r1, [pc, #272]	; (2aafc <z_impl_k_mutex_lock+0x1b4>)
   2a9ea:	4841      	ldr	r0, [pc, #260]	; (2aaf0 <z_impl_k_mutex_lock+0x1a8>)
   2a9ec:	f004 f9f3 	bl	2edd6 <printk>
   2a9f0:	493c      	ldr	r1, [pc, #240]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2a9f2:	4843      	ldr	r0, [pc, #268]	; (2ab00 <z_impl_k_mutex_lock+0x1b8>)
   2a9f4:	f004 f9ef 	bl	2edd6 <printk>
   2a9f8:	215d      	movs	r1, #93	; 0x5d
   2a9fa:	483b      	ldr	r0, [pc, #236]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2a9fc:	f004 fa31 	bl	2ee62 <assert_post_action>
   2aa00:	f385 8811 	msr	BASEPRI, r5
   2aa04:	f3bf 8f6f 	isb	sy
		return 0;
   2aa08:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2aa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   2aa0c:	6921      	ldr	r1, [r4, #16]
   2aa0e:	e7e0      	b.n	2a9d2 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2aa10:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2aa14:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2aa18:	4299      	cmp	r1, r3
   2aa1a:	bfa8      	it	ge
   2aa1c:	4619      	movge	r1, r3
   2aa1e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2aa22:	4299      	cmp	r1, r3
   2aa24:	da40      	bge.n	2aaa8 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   2aa26:	f001 f8f3 	bl	2bc10 <z_set_prio>
   2aa2a:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2aa2c:	4633      	mov	r3, r6
   2aa2e:	4622      	mov	r2, r4
   2aa30:	4629      	mov	r1, r5
   2aa32:	482c      	ldr	r0, [pc, #176]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2aa34:	f001 f8be 	bl	2bbb4 <z_pend_curr>
	if (got_mutex == 0) {
   2aa38:	2800      	cmp	r0, #0
   2aa3a:	d0e6      	beq.n	2aa0a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   2aa3c:	f04f 0320 	mov.w	r3, #32
   2aa40:	f3ef 8511 	mrs	r5, BASEPRI
   2aa44:	f383 8811 	msr	BASEPRI, r3
   2aa48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aa4c:	4825      	ldr	r0, [pc, #148]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2aa4e:	f001 fc8b 	bl	2c368 <z_spin_lock_valid>
   2aa52:	b968      	cbnz	r0, 2aa70 <z_impl_k_mutex_lock+0x128>
   2aa54:	234a      	movs	r3, #74	; 0x4a
   2aa56:	4a24      	ldr	r2, [pc, #144]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2aa58:	4924      	ldr	r1, [pc, #144]	; (2aaec <z_impl_k_mutex_lock+0x1a4>)
   2aa5a:	4825      	ldr	r0, [pc, #148]	; (2aaf0 <z_impl_k_mutex_lock+0x1a8>)
   2aa5c:	f004 f9bb 	bl	2edd6 <printk>
   2aa60:	4920      	ldr	r1, [pc, #128]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2aa62:	4824      	ldr	r0, [pc, #144]	; (2aaf4 <z_impl_k_mutex_lock+0x1ac>)
   2aa64:	f004 f9b7 	bl	2edd6 <printk>
   2aa68:	214a      	movs	r1, #74	; 0x4a
   2aa6a:	481f      	ldr	r0, [pc, #124]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2aa6c:	f004 f9f9 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2aa70:	481c      	ldr	r0, [pc, #112]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2aa72:	f001 fc97 	bl	2c3a4 <z_spin_lock_set_owner>
	return list->head == list;
   2aa76:	6823      	ldr	r3, [r4, #0]
   2aa78:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aa7a:	429c      	cmp	r4, r3
   2aa7c:	d007      	beq.n	2aa8e <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2aa7e:	b133      	cbz	r3, 2aa8e <z_impl_k_mutex_lock+0x146>
   2aa80:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2aa84:	4299      	cmp	r1, r3
   2aa86:	bfa8      	it	ge
   2aa88:	4619      	movge	r1, r3
   2aa8a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2aa8e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2aa90:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2aa94:	4299      	cmp	r1, r3
   2aa96:	d109      	bne.n	2aaac <z_impl_k_mutex_lock+0x164>
	if (resched) {
   2aa98:	b16f      	cbz	r7, 2aab6 <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   2aa9a:	4629      	mov	r1, r5
   2aa9c:	4811      	ldr	r0, [pc, #68]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2aa9e:	f000 fae5 	bl	2b06c <z_reschedule>
	return -EAGAIN;
   2aaa2:	f06f 000a 	mvn.w	r0, #10
   2aaa6:	e7b0      	b.n	2aa0a <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   2aaa8:	2700      	movs	r7, #0
   2aaaa:	e7bf      	b.n	2aa2c <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   2aaac:	f001 f8b0 	bl	2bc10 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2aab0:	2800      	cmp	r0, #0
   2aab2:	d1f2      	bne.n	2aa9a <z_impl_k_mutex_lock+0x152>
   2aab4:	e7f0      	b.n	2aa98 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aab6:	480b      	ldr	r0, [pc, #44]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2aab8:	f001 fc64 	bl	2c384 <z_spin_unlock_valid>
   2aabc:	b968      	cbnz	r0, 2aada <z_impl_k_mutex_lock+0x192>
   2aabe:	235d      	movs	r3, #93	; 0x5d
   2aac0:	4a09      	ldr	r2, [pc, #36]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2aac2:	490e      	ldr	r1, [pc, #56]	; (2aafc <z_impl_k_mutex_lock+0x1b4>)
   2aac4:	480a      	ldr	r0, [pc, #40]	; (2aaf0 <z_impl_k_mutex_lock+0x1a8>)
   2aac6:	f004 f986 	bl	2edd6 <printk>
   2aaca:	4906      	ldr	r1, [pc, #24]	; (2aae4 <z_impl_k_mutex_lock+0x19c>)
   2aacc:	480c      	ldr	r0, [pc, #48]	; (2ab00 <z_impl_k_mutex_lock+0x1b8>)
   2aace:	f004 f982 	bl	2edd6 <printk>
   2aad2:	215d      	movs	r1, #93	; 0x5d
   2aad4:	4804      	ldr	r0, [pc, #16]	; (2aae8 <z_impl_k_mutex_lock+0x1a0>)
   2aad6:	f004 f9c4 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2aada:	f385 8811 	msr	BASEPRI, r5
   2aade:	f3bf 8f6f 	isb	sy
   2aae2:	e7de      	b.n	2aaa2 <z_impl_k_mutex_lock+0x15a>
   2aae4:	200213c8 	.word	0x200213c8
   2aae8:	00031a38 	.word	0x00031a38
   2aaec:	00031a5e 	.word	0x00031a5e
   2aaf0:	000316d1 	.word	0x000316d1
   2aaf4:	00031a73 	.word	0x00031a73
   2aaf8:	200213cc 	.word	0x200213cc
   2aafc:	00031a8b 	.word	0x00031a8b
   2ab00:	00031aa2 	.word	0x00031aa2

0002ab04 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2ab04:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   2ab06:	6883      	ldr	r3, [r0, #8]
{
   2ab08:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2ab0a:	2b00      	cmp	r3, #0
   2ab0c:	f000 8096 	beq.w	2ac3c <z_impl_k_mutex_unlock+0x138>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2ab10:	4d4d      	ldr	r5, [pc, #308]	; (2ac48 <z_impl_k_mutex_unlock+0x144>)
   2ab12:	68aa      	ldr	r2, [r5, #8]
   2ab14:	4293      	cmp	r3, r2
   2ab16:	f040 8094 	bne.w	2ac42 <z_impl_k_mutex_unlock+0x13e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2ab1a:	68c3      	ldr	r3, [r0, #12]
   2ab1c:	b94b      	cbnz	r3, 2ab32 <z_impl_k_mutex_unlock+0x2e>
   2ab1e:	494b      	ldr	r1, [pc, #300]	; (2ac4c <z_impl_k_mutex_unlock+0x148>)
   2ab20:	484b      	ldr	r0, [pc, #300]	; (2ac50 <z_impl_k_mutex_unlock+0x14c>)
   2ab22:	23e5      	movs	r3, #229	; 0xe5
   2ab24:	4a4b      	ldr	r2, [pc, #300]	; (2ac54 <z_impl_k_mutex_unlock+0x150>)
   2ab26:	f004 f956 	bl	2edd6 <printk>
   2ab2a:	21e5      	movs	r1, #229	; 0xe5
   2ab2c:	4849      	ldr	r0, [pc, #292]	; (2ac54 <z_impl_k_mutex_unlock+0x150>)
   2ab2e:	f004 f998 	bl	2ee62 <assert_post_action>
   2ab32:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   2ab36:	b173      	cbz	r3, 2ab56 <z_impl_k_mutex_unlock+0x52>
   2ab38:	4947      	ldr	r1, [pc, #284]	; (2ac58 <z_impl_k_mutex_unlock+0x154>)
   2ab3a:	f240 130d 	movw	r3, #269	; 0x10d
   2ab3e:	4a47      	ldr	r2, [pc, #284]	; (2ac5c <z_impl_k_mutex_unlock+0x158>)
   2ab40:	4843      	ldr	r0, [pc, #268]	; (2ac50 <z_impl_k_mutex_unlock+0x14c>)
   2ab42:	f004 f948 	bl	2edd6 <printk>
   2ab46:	4846      	ldr	r0, [pc, #280]	; (2ac60 <z_impl_k_mutex_unlock+0x15c>)
   2ab48:	f004 f945 	bl	2edd6 <printk>
   2ab4c:	f240 110d 	movw	r1, #269	; 0x10d
   2ab50:	4842      	ldr	r0, [pc, #264]	; (2ac5c <z_impl_k_mutex_unlock+0x158>)
   2ab52:	f004 f986 	bl	2ee62 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2ab56:	68ab      	ldr	r3, [r5, #8]
   2ab58:	7bdb      	ldrb	r3, [r3, #15]
   2ab5a:	2b01      	cmp	r3, #1
   2ab5c:	d10e      	bne.n	2ab7c <z_impl_k_mutex_unlock+0x78>
   2ab5e:	4941      	ldr	r1, [pc, #260]	; (2ac64 <z_impl_k_mutex_unlock+0x160>)
   2ab60:	f44f 7387 	mov.w	r3, #270	; 0x10e
   2ab64:	4a3d      	ldr	r2, [pc, #244]	; (2ac5c <z_impl_k_mutex_unlock+0x158>)
   2ab66:	483a      	ldr	r0, [pc, #232]	; (2ac50 <z_impl_k_mutex_unlock+0x14c>)
   2ab68:	f004 f935 	bl	2edd6 <printk>
   2ab6c:	483c      	ldr	r0, [pc, #240]	; (2ac60 <z_impl_k_mutex_unlock+0x15c>)
   2ab6e:	f004 f932 	bl	2edd6 <printk>
   2ab72:	f44f 7187 	mov.w	r1, #270	; 0x10e
   2ab76:	4839      	ldr	r0, [pc, #228]	; (2ac5c <z_impl_k_mutex_unlock+0x158>)
   2ab78:	f004 f973 	bl	2ee62 <assert_post_action>

	--_current->base.sched_locked;
   2ab7c:	68aa      	ldr	r2, [r5, #8]
   2ab7e:	7bd3      	ldrb	r3, [r2, #15]
   2ab80:	3b01      	subs	r3, #1
   2ab82:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   2ab84:	68e3      	ldr	r3, [r4, #12]
   2ab86:	2b01      	cmp	r3, #1
   2ab88:	d005      	beq.n	2ab96 <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   2ab8a:	3b01      	subs	r3, #1
   2ab8c:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   2ab8e:	f000 fbdb 	bl	2b348 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   2ab92:	2000      	movs	r0, #0
}
   2ab94:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2ab96:	f04f 0320 	mov.w	r3, #32
   2ab9a:	f3ef 8511 	mrs	r5, BASEPRI
   2ab9e:	f383 8811 	msr	BASEPRI, r3
   2aba2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aba6:	4830      	ldr	r0, [pc, #192]	; (2ac68 <z_impl_k_mutex_unlock+0x164>)
   2aba8:	f001 fbde 	bl	2c368 <z_spin_lock_valid>
   2abac:	b968      	cbnz	r0, 2abca <z_impl_k_mutex_unlock+0xc6>
   2abae:	234a      	movs	r3, #74	; 0x4a
   2abb0:	4a2e      	ldr	r2, [pc, #184]	; (2ac6c <z_impl_k_mutex_unlock+0x168>)
   2abb2:	492f      	ldr	r1, [pc, #188]	; (2ac70 <z_impl_k_mutex_unlock+0x16c>)
   2abb4:	4826      	ldr	r0, [pc, #152]	; (2ac50 <z_impl_k_mutex_unlock+0x14c>)
   2abb6:	f004 f90e 	bl	2edd6 <printk>
   2abba:	492b      	ldr	r1, [pc, #172]	; (2ac68 <z_impl_k_mutex_unlock+0x164>)
   2abbc:	482d      	ldr	r0, [pc, #180]	; (2ac74 <z_impl_k_mutex_unlock+0x170>)
   2abbe:	f004 f90a 	bl	2edd6 <printk>
   2abc2:	214a      	movs	r1, #74	; 0x4a
   2abc4:	4829      	ldr	r0, [pc, #164]	; (2ac6c <z_impl_k_mutex_unlock+0x168>)
   2abc6:	f004 f94c 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2abca:	4827      	ldr	r0, [pc, #156]	; (2ac68 <z_impl_k_mutex_unlock+0x164>)
   2abcc:	f001 fbea 	bl	2c3a4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2abd0:	68a0      	ldr	r0, [r4, #8]
   2abd2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   2abd4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2abd8:	4299      	cmp	r1, r3
   2abda:	d001      	beq.n	2abe0 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   2abdc:	f001 f818 	bl	2bc10 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2abe0:	4620      	mov	r0, r4
   2abe2:	f001 f8a3 	bl	2bd2c <z_unpend_first_thread>
	mutex->owner = new_owner;
   2abe6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2abe8:	b180      	cbz	r0, 2ac0c <z_impl_k_mutex_unlock+0x108>
		mutex->owner_orig_prio = new_owner->base.prio;
   2abea:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2abee:	6122      	str	r2, [r4, #16]
   2abf0:	2200      	movs	r2, #0
   2abf2:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2abf4:	7b42      	ldrb	r2, [r0, #13]
   2abf6:	06d2      	lsls	r2, r2, #27
   2abf8:	d103      	bne.n	2ac02 <z_impl_k_mutex_unlock+0xfe>
	if (z_is_thread_ready(thread)) {
   2abfa:	6983      	ldr	r3, [r0, #24]
   2abfc:	b90b      	cbnz	r3, 2ac02 <z_impl_k_mutex_unlock+0xfe>
		z_add_thread_to_ready_q(thread);
   2abfe:	f000 fc1f 	bl	2b440 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   2ac02:	4629      	mov	r1, r5
   2ac04:	4818      	ldr	r0, [pc, #96]	; (2ac68 <z_impl_k_mutex_unlock+0x164>)
   2ac06:	f000 fa31 	bl	2b06c <z_reschedule>
   2ac0a:	e7c0      	b.n	2ab8e <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   2ac0c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ac0e:	4816      	ldr	r0, [pc, #88]	; (2ac68 <z_impl_k_mutex_unlock+0x164>)
   2ac10:	f001 fbb8 	bl	2c384 <z_spin_unlock_valid>
   2ac14:	b968      	cbnz	r0, 2ac32 <z_impl_k_mutex_unlock+0x12e>
   2ac16:	235d      	movs	r3, #93	; 0x5d
   2ac18:	4a14      	ldr	r2, [pc, #80]	; (2ac6c <z_impl_k_mutex_unlock+0x168>)
   2ac1a:	4917      	ldr	r1, [pc, #92]	; (2ac78 <z_impl_k_mutex_unlock+0x174>)
   2ac1c:	480c      	ldr	r0, [pc, #48]	; (2ac50 <z_impl_k_mutex_unlock+0x14c>)
   2ac1e:	f004 f8da 	bl	2edd6 <printk>
   2ac22:	4911      	ldr	r1, [pc, #68]	; (2ac68 <z_impl_k_mutex_unlock+0x164>)
   2ac24:	4815      	ldr	r0, [pc, #84]	; (2ac7c <z_impl_k_mutex_unlock+0x178>)
   2ac26:	f004 f8d6 	bl	2edd6 <printk>
   2ac2a:	215d      	movs	r1, #93	; 0x5d
   2ac2c:	480f      	ldr	r0, [pc, #60]	; (2ac6c <z_impl_k_mutex_unlock+0x168>)
   2ac2e:	f004 f918 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2ac32:	f385 8811 	msr	BASEPRI, r5
   2ac36:	f3bf 8f6f 	isb	sy
   2ac3a:	e7a8      	b.n	2ab8e <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   2ac3c:	f06f 0015 	mvn.w	r0, #21
   2ac40:	e7a8      	b.n	2ab94 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   2ac42:	f04f 30ff 	mov.w	r0, #4294967295
   2ac46:	e7a5      	b.n	2ab94 <z_impl_k_mutex_unlock+0x90>
   2ac48:	200213cc 	.word	0x200213cc
   2ac4c:	00032f87 	.word	0x00032f87
   2ac50:	000316d1 	.word	0x000316d1
   2ac54:	00032f65 	.word	0x00032f65
   2ac58:	00032fc9 	.word	0x00032fc9
   2ac5c:	00032f9e 	.word	0x00032f9e
   2ac60:	000323ee 	.word	0x000323ee
   2ac64:	00032fdb 	.word	0x00032fdb
   2ac68:	200213c8 	.word	0x200213c8
   2ac6c:	00031a38 	.word	0x00031a38
   2ac70:	00031a5e 	.word	0x00031a5e
   2ac74:	00031a73 	.word	0x00031a73
   2ac78:	00031a8b 	.word	0x00031a8b
   2ac7c:	00031aa2 	.word	0x00031aa2

0002ac80 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ac84:	4604      	mov	r4, r0
   2ac86:	460e      	mov	r6, r1
   2ac88:	4690      	mov	r8, r2
   2ac8a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2ac8c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2ac90:	f04f 0320 	mov.w	r3, #32
   2ac94:	f3ef 8711 	mrs	r7, BASEPRI
   2ac98:	f383 8811 	msr	BASEPRI, r3
   2ac9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aca0:	4628      	mov	r0, r5
   2aca2:	f001 fb61 	bl	2c368 <z_spin_lock_valid>
   2aca6:	b968      	cbnz	r0, 2acc4 <queue_insert+0x44>
   2aca8:	234a      	movs	r3, #74	; 0x4a
   2acaa:	4a33      	ldr	r2, [pc, #204]	; (2ad78 <queue_insert+0xf8>)
   2acac:	4933      	ldr	r1, [pc, #204]	; (2ad7c <queue_insert+0xfc>)
   2acae:	4834      	ldr	r0, [pc, #208]	; (2ad80 <queue_insert+0x100>)
   2acb0:	f004 f891 	bl	2edd6 <printk>
   2acb4:	4629      	mov	r1, r5
   2acb6:	4833      	ldr	r0, [pc, #204]	; (2ad84 <queue_insert+0x104>)
   2acb8:	f004 f88d 	bl	2edd6 <printk>
   2acbc:	214a      	movs	r1, #74	; 0x4a
   2acbe:	482e      	ldr	r0, [pc, #184]	; (2ad78 <queue_insert+0xf8>)
   2acc0:	f004 f8cf 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2acc4:	4628      	mov	r0, r5
   2acc6:	f001 fb6d 	bl	2c3a4 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   2acca:	f1b9 0f00 	cmp.w	r9, #0
   2acce:	d02d      	beq.n	2ad2c <queue_insert+0xac>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   2acd0:	2008      	movs	r0, #8
   2acd2:	f7ff fcd7 	bl	2a684 <z_thread_malloc>
		if (anode == NULL) {
   2acd6:	b9c8      	cbnz	r0, 2ad0c <queue_insert+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2acd8:	4628      	mov	r0, r5
   2acda:	f001 fb53 	bl	2c384 <z_spin_unlock_valid>
   2acde:	b968      	cbnz	r0, 2acfc <queue_insert+0x7c>
   2ace0:	235d      	movs	r3, #93	; 0x5d
   2ace2:	4a25      	ldr	r2, [pc, #148]	; (2ad78 <queue_insert+0xf8>)
   2ace4:	4928      	ldr	r1, [pc, #160]	; (2ad88 <queue_insert+0x108>)
   2ace6:	4826      	ldr	r0, [pc, #152]	; (2ad80 <queue_insert+0x100>)
   2ace8:	f004 f875 	bl	2edd6 <printk>
   2acec:	4629      	mov	r1, r5
   2acee:	4827      	ldr	r0, [pc, #156]	; (2ad8c <queue_insert+0x10c>)
   2acf0:	f004 f871 	bl	2edd6 <printk>
   2acf4:	215d      	movs	r1, #93	; 0x5d
   2acf6:	4820      	ldr	r0, [pc, #128]	; (2ad78 <queue_insert+0xf8>)
   2acf8:	f004 f8b3 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2acfc:	f387 8811 	msr	BASEPRI, r7
   2ad00:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   2ad04:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   2ad08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2ad0c:	2301      	movs	r3, #1
		anode->data = data;
   2ad0e:	f8c0 8004 	str.w	r8, [r0, #4]
   2ad12:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2ad14:	6803      	ldr	r3, [r0, #0]
   2ad16:	f003 0203 	and.w	r2, r3, #3
   2ad1a:	b95e      	cbnz	r6, 2ad34 <queue_insert+0xb4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ad1c:	6823      	ldr	r3, [r4, #0]
   2ad1e:	4313      	orrs	r3, r2
   2ad20:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ad22:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2ad24:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ad26:	b973      	cbnz	r3, 2ad46 <queue_insert+0xc6>
	list->tail = node;
   2ad28:	6060      	str	r0, [r4, #4]
   2ad2a:	e00c      	b.n	2ad46 <queue_insert+0xc6>
	node->next_and_flags = flags;
   2ad2c:	f8c8 9000 	str.w	r9, [r8]
   2ad30:	4640      	mov	r0, r8
   2ad32:	e7ef      	b.n	2ad14 <queue_insert+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ad34:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2ad36:	f033 0303 	bics.w	r3, r3, #3
   2ad3a:	d115      	bne.n	2ad68 <queue_insert+0xe8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ad3c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2ad3e:	6862      	ldr	r2, [r4, #4]
   2ad40:	b962      	cbnz	r2, 2ad5c <queue_insert+0xdc>
	list->head = node;
   2ad42:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2ad46:	2104      	movs	r1, #4
   2ad48:	f104 000c 	add.w	r0, r4, #12
   2ad4c:	f005 f834 	bl	2fdb8 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2ad50:	4628      	mov	r0, r5
   2ad52:	4639      	mov	r1, r7
   2ad54:	f000 f98a 	bl	2b06c <z_reschedule>
	return 0;
   2ad58:	2000      	movs	r0, #0
   2ad5a:	e7d5      	b.n	2ad08 <queue_insert+0x88>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ad5c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ad5e:	f003 0303 	and.w	r3, r3, #3
   2ad62:	4303      	orrs	r3, r0
   2ad64:	6013      	str	r3, [r2, #0]
   2ad66:	e7df      	b.n	2ad28 <queue_insert+0xa8>
   2ad68:	4313      	orrs	r3, r2
   2ad6a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ad6c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ad6e:	f003 0303 	and.w	r3, r3, #3
   2ad72:	4318      	orrs	r0, r3
   2ad74:	6030      	str	r0, [r6, #0]
   2ad76:	e7e6      	b.n	2ad46 <queue_insert+0xc6>
   2ad78:	00031a38 	.word	0x00031a38
   2ad7c:	00031a5e 	.word	0x00031a5e
   2ad80:	000316d1 	.word	0x000316d1
   2ad84:	00031a73 	.word	0x00031a73
   2ad88:	00031a8b 	.word	0x00031a8b
   2ad8c:	00031aa2 	.word	0x00031aa2

0002ad90 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad94:	4606      	mov	r6, r0
   2ad96:	b089      	sub	sp, #36	; 0x24
   2ad98:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2ad9a:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   2ad9e:	f04f 0320 	mov.w	r3, #32
   2ada2:	f3ef 8811 	mrs	r8, BASEPRI
   2ada6:	f383 8811 	msr	BASEPRI, r3
   2adaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2adae:	4620      	mov	r0, r4
   2adb0:	f001 fada 	bl	2c368 <z_spin_lock_valid>
   2adb4:	b968      	cbnz	r0, 2add2 <z_impl_k_queue_get+0x42>
   2adb6:	234a      	movs	r3, #74	; 0x4a
   2adb8:	4a5f      	ldr	r2, [pc, #380]	; (2af38 <z_impl_k_queue_get+0x1a8>)
   2adba:	4960      	ldr	r1, [pc, #384]	; (2af3c <z_impl_k_queue_get+0x1ac>)
   2adbc:	4860      	ldr	r0, [pc, #384]	; (2af40 <z_impl_k_queue_get+0x1b0>)
   2adbe:	f004 f80a 	bl	2edd6 <printk>
   2adc2:	4621      	mov	r1, r4
   2adc4:	485f      	ldr	r0, [pc, #380]	; (2af44 <z_impl_k_queue_get+0x1b4>)
   2adc6:	f004 f806 	bl	2edd6 <printk>
   2adca:	214a      	movs	r1, #74	; 0x4a
   2adcc:	485a      	ldr	r0, [pc, #360]	; (2af38 <z_impl_k_queue_get+0x1a8>)
   2adce:	f004 f848 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2add2:	4620      	mov	r0, r4
   2add4:	f001 fae6 	bl	2c3a4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2add8:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2adda:	b335      	cbz	r5, 2ae2a <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2addc:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2adde:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ade0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2ade4:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2ade6:	4628      	mov	r0, r5
	list->head = node;
   2ade8:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2adea:	bf08      	it	eq
   2adec:	6073      	streq	r3, [r6, #4]
   2adee:	2101      	movs	r1, #1
   2adf0:	f004 fefd 	bl	2fbee <z_queue_node_peek>
   2adf4:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2adf6:	4620      	mov	r0, r4
   2adf8:	f001 fac4 	bl	2c384 <z_spin_unlock_valid>
   2adfc:	b968      	cbnz	r0, 2ae1a <z_impl_k_queue_get+0x8a>
   2adfe:	235d      	movs	r3, #93	; 0x5d
   2ae00:	4a4d      	ldr	r2, [pc, #308]	; (2af38 <z_impl_k_queue_get+0x1a8>)
   2ae02:	4951      	ldr	r1, [pc, #324]	; (2af48 <z_impl_k_queue_get+0x1b8>)
   2ae04:	484e      	ldr	r0, [pc, #312]	; (2af40 <z_impl_k_queue_get+0x1b0>)
   2ae06:	f003 ffe6 	bl	2edd6 <printk>
   2ae0a:	4621      	mov	r1, r4
   2ae0c:	484f      	ldr	r0, [pc, #316]	; (2af4c <z_impl_k_queue_get+0x1bc>)
   2ae0e:	f003 ffe2 	bl	2edd6 <printk>
   2ae12:	215d      	movs	r1, #93	; 0x5d
   2ae14:	4848      	ldr	r0, [pc, #288]	; (2af38 <z_impl_k_queue_get+0x1a8>)
   2ae16:	f004 f824 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2ae1a:	f388 8811 	msr	BASEPRI, r8
   2ae1e:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2ae22:	4628      	mov	r0, r5
   2ae24:	b009      	add	sp, #36	; 0x24
   2ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae2a:	4620      	mov	r0, r4
	if (timeout == K_NO_WAIT) {
   2ae2c:	2f00      	cmp	r7, #0
   2ae2e:	d0e3      	beq.n	2adf8 <z_impl_k_queue_get+0x68>
   2ae30:	f001 faa8 	bl	2c384 <z_spin_unlock_valid>
   2ae34:	b968      	cbnz	r0, 2ae52 <z_impl_k_queue_get+0xc2>
   2ae36:	235d      	movs	r3, #93	; 0x5d
   2ae38:	4a3f      	ldr	r2, [pc, #252]	; (2af38 <z_impl_k_queue_get+0x1a8>)
   2ae3a:	4943      	ldr	r1, [pc, #268]	; (2af48 <z_impl_k_queue_get+0x1b8>)
   2ae3c:	4840      	ldr	r0, [pc, #256]	; (2af40 <z_impl_k_queue_get+0x1b0>)
   2ae3e:	f003 ffca 	bl	2edd6 <printk>
   2ae42:	4621      	mov	r1, r4
   2ae44:	4841      	ldr	r0, [pc, #260]	; (2af4c <z_impl_k_queue_get+0x1bc>)
   2ae46:	f003 ffc6 	bl	2edd6 <printk>
   2ae4a:	215d      	movs	r1, #93	; 0x5d
   2ae4c:	483a      	ldr	r0, [pc, #232]	; (2af38 <z_impl_k_queue_get+0x1a8>)
   2ae4e:	f004 f808 	bl	2ee62 <assert_post_action>
   2ae52:	f388 8811 	msr	BASEPRI, r8
   2ae56:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2ae5a:	2200      	movs	r2, #0
   2ae5c:	4633      	mov	r3, r6
   2ae5e:	2104      	movs	r1, #4
   2ae60:	a803      	add	r0, sp, #12
   2ae62:	f002 f90b 	bl	2d07c <k_poll_event_init>
	if (timeout != K_FOREVER) {
   2ae66:	1c7a      	adds	r2, r7, #1
   2ae68:	d002      	beq.n	2ae70 <z_impl_k_queue_get+0xe0>
   2ae6a:	f004 ff4e 	bl	2fd0a <z_impl_k_uptime_get>
   2ae6e:	4683      	mov	fp, r0
{
   2ae70:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ae74:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2af38 <z_impl_k_queue_get+0x1a8>
   2ae78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 2af40 <z_impl_k_queue_get+0x1b0>
		event.state = K_POLL_STATE_NOT_READY;
   2ae7c:	9b06      	ldr	r3, [sp, #24]
   2ae7e:	f36f 3310 	bfc	r3, #12, #5
   2ae82:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2ae84:	2101      	movs	r1, #1
   2ae86:	eba7 0209 	sub.w	r2, r7, r9
   2ae8a:	a803      	add	r0, sp, #12
   2ae8c:	f002 f948 	bl	2d120 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   2ae90:	b118      	cbz	r0, 2ae9a <z_impl_k_queue_get+0x10a>
   2ae92:	300b      	adds	r0, #11
   2ae94:	d001      	beq.n	2ae9a <z_impl_k_queue_get+0x10a>
			return NULL;
   2ae96:	2500      	movs	r5, #0
   2ae98:	e7c3      	b.n	2ae22 <z_impl_k_queue_get+0x92>
	__asm__ volatile(
   2ae9a:	f04f 0320 	mov.w	r3, #32
   2ae9e:	f3ef 8211 	mrs	r2, BASEPRI
   2aea2:	f383 8811 	msr	BASEPRI, r3
   2aea6:	f3bf 8f6f 	isb	sy
   2aeaa:	4620      	mov	r0, r4
   2aeac:	9201      	str	r2, [sp, #4]
   2aeae:	f001 fa5b 	bl	2c368 <z_spin_lock_valid>
   2aeb2:	b968      	cbnz	r0, 2aed0 <z_impl_k_queue_get+0x140>
   2aeb4:	234a      	movs	r3, #74	; 0x4a
   2aeb6:	4642      	mov	r2, r8
   2aeb8:	4920      	ldr	r1, [pc, #128]	; (2af3c <z_impl_k_queue_get+0x1ac>)
   2aeba:	4650      	mov	r0, sl
   2aebc:	f003 ff8b 	bl	2edd6 <printk>
   2aec0:	4621      	mov	r1, r4
   2aec2:	4820      	ldr	r0, [pc, #128]	; (2af44 <z_impl_k_queue_get+0x1b4>)
   2aec4:	f003 ff87 	bl	2edd6 <printk>
   2aec8:	214a      	movs	r1, #74	; 0x4a
   2aeca:	4640      	mov	r0, r8
   2aecc:	f003 ffc9 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2aed0:	4620      	mov	r0, r4
   2aed2:	f001 fa67 	bl	2c3a4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2aed6:	6830      	ldr	r0, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2aed8:	b138      	cbz	r0, 2aeea <z_impl_k_queue_get+0x15a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2aeda:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2aedc:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2aede:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2aee2:	4290      	cmp	r0, r2
	list->head = node;
   2aee4:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2aee6:	bf08      	it	eq
   2aee8:	6073      	streq	r3, [r6, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2aeea:	2101      	movs	r1, #1
   2aeec:	f004 fe7f 	bl	2fbee <z_queue_node_peek>
   2aef0:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aef2:	4620      	mov	r0, r4
   2aef4:	f001 fa46 	bl	2c384 <z_spin_unlock_valid>
   2aef8:	b968      	cbnz	r0, 2af16 <z_impl_k_queue_get+0x186>
   2aefa:	235d      	movs	r3, #93	; 0x5d
   2aefc:	4642      	mov	r2, r8
   2aefe:	4912      	ldr	r1, [pc, #72]	; (2af48 <z_impl_k_queue_get+0x1b8>)
   2af00:	4650      	mov	r0, sl
   2af02:	f003 ff68 	bl	2edd6 <printk>
   2af06:	4621      	mov	r1, r4
   2af08:	4810      	ldr	r0, [pc, #64]	; (2af4c <z_impl_k_queue_get+0x1bc>)
   2af0a:	f003 ff64 	bl	2edd6 <printk>
   2af0e:	215d      	movs	r1, #93	; 0x5d
   2af10:	4640      	mov	r0, r8
   2af12:	f003 ffa6 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2af16:	9b01      	ldr	r3, [sp, #4]
   2af18:	f383 8811 	msr	BASEPRI, r3
   2af1c:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   2af20:	2d00      	cmp	r5, #0
   2af22:	f47f af7e 	bne.w	2ae22 <z_impl_k_queue_get+0x92>
   2af26:	1c7b      	adds	r3, r7, #1
   2af28:	d0a8      	beq.n	2ae7c <z_impl_k_queue_get+0xec>
	return z_impl_k_uptime_get();
   2af2a:	f004 feee 	bl	2fd0a <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   2af2e:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   2af32:	454f      	cmp	r7, r9
   2af34:	daa2      	bge.n	2ae7c <z_impl_k_queue_get+0xec>
   2af36:	e7ae      	b.n	2ae96 <z_impl_k_queue_get+0x106>
   2af38:	00031a38 	.word	0x00031a38
   2af3c:	00031a5e 	.word	0x00031a5e
   2af40:	000316d1 	.word	0x000316d1
   2af44:	00031a73 	.word	0x00031a73
   2af48:	00031a8b 	.word	0x00031a8b
   2af4c:	00031aa2 	.word	0x00031aa2

0002af50 <pended_on.isra.17>:
	}
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   2af50:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   2af52:	b510      	push	{r4, lr}
   2af54:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2af56:	b95b      	cbnz	r3, 2af70 <pended_on.isra.17+0x20>
   2af58:	4906      	ldr	r1, [pc, #24]	; (2af74 <pended_on.isra.17+0x24>)
   2af5a:	4807      	ldr	r0, [pc, #28]	; (2af78 <pended_on.isra.17+0x28>)
   2af5c:	f240 139d 	movw	r3, #413	; 0x19d
   2af60:	4a06      	ldr	r2, [pc, #24]	; (2af7c <pended_on.isra.17+0x2c>)
   2af62:	f003 ff38 	bl	2edd6 <printk>
   2af66:	f240 119d 	movw	r1, #413	; 0x19d
   2af6a:	4804      	ldr	r0, [pc, #16]	; (2af7c <pended_on.isra.17+0x2c>)
   2af6c:	f003 ff79 	bl	2ee62 <assert_post_action>

	return thread->base.pended_on;
}
   2af70:	6820      	ldr	r0, [r4, #0]
   2af72:	bd10      	pop	{r4, pc}
   2af74:	00033083 	.word	0x00033083
   2af78:	000316d1 	.word	0x000316d1
   2af7c:	00033061 	.word	0x00033061

0002af80 <z_reset_time_slice>:
{
   2af80:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   2af82:	4c08      	ldr	r4, [pc, #32]	; (2afa4 <z_reset_time_slice+0x24>)
   2af84:	6823      	ldr	r3, [r4, #0]
   2af86:	b15b      	cbz	r3, 2afa0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2af88:	f7f3 fdea 	bl	1eb60 <z_clock_elapsed>
   2af8c:	6823      	ldr	r3, [r4, #0]
   2af8e:	4a06      	ldr	r2, [pc, #24]	; (2afa8 <z_reset_time_slice+0x28>)
   2af90:	4418      	add	r0, r3
   2af92:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2af94:	2100      	movs	r1, #0
}
   2af96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   2af9a:	4618      	mov	r0, r3
   2af9c:	f001 bd2e 	b.w	2c9fc <z_set_timeout_expiry>
}
   2afa0:	bd10      	pop	{r4, pc}
   2afa2:	bf00      	nop
   2afa4:	2002140c 	.word	0x2002140c
   2afa8:	200213cc 	.word	0x200213cc

0002afac <k_sched_time_slice_set>:
{
   2afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2afae:	4607      	mov	r7, r0
   2afb0:	460d      	mov	r5, r1
	__asm__ volatile(
   2afb2:	f04f 0320 	mov.w	r3, #32
   2afb6:	f3ef 8411 	mrs	r4, BASEPRI
   2afba:	f383 8811 	msr	BASEPRI, r3
   2afbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2afc2:	4820      	ldr	r0, [pc, #128]	; (2b044 <k_sched_time_slice_set+0x98>)
   2afc4:	f001 f9d0 	bl	2c368 <z_spin_lock_valid>
   2afc8:	b968      	cbnz	r0, 2afe6 <k_sched_time_slice_set+0x3a>
   2afca:	234a      	movs	r3, #74	; 0x4a
   2afcc:	4a1e      	ldr	r2, [pc, #120]	; (2b048 <k_sched_time_slice_set+0x9c>)
   2afce:	491f      	ldr	r1, [pc, #124]	; (2b04c <k_sched_time_slice_set+0xa0>)
   2afd0:	481f      	ldr	r0, [pc, #124]	; (2b050 <k_sched_time_slice_set+0xa4>)
   2afd2:	f003 ff00 	bl	2edd6 <printk>
   2afd6:	491b      	ldr	r1, [pc, #108]	; (2b044 <k_sched_time_slice_set+0x98>)
   2afd8:	481e      	ldr	r0, [pc, #120]	; (2b054 <k_sched_time_slice_set+0xa8>)
   2afda:	f003 fefc 	bl	2edd6 <printk>
   2afde:	214a      	movs	r1, #74	; 0x4a
   2afe0:	4819      	ldr	r0, [pc, #100]	; (2b048 <k_sched_time_slice_set+0x9c>)
   2afe2:	f003 ff3e 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2afe6:	4817      	ldr	r0, [pc, #92]	; (2b044 <k_sched_time_slice_set+0x98>)
   2afe8:	f001 f9dc 	bl	2c3a4 <z_spin_lock_set_owner>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   2afec:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   2aff0:	2200      	movs	r2, #0
   2aff2:	f240 30e7 	movw	r0, #999	; 0x3e7
   2aff6:	2100      	movs	r1, #0
   2aff8:	4b17      	ldr	r3, [pc, #92]	; (2b058 <k_sched_time_slice_set+0xac>)
   2affa:	fbe6 0107 	umlal	r0, r1, r6, r7
   2affe:	611a      	str	r2, [r3, #16]
   2b000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b004:	2300      	movs	r3, #0
   2b006:	f7f1 fbd7 	bl	1c7b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2b00a:	4b14      	ldr	r3, [pc, #80]	; (2b05c <k_sched_time_slice_set+0xb0>)
   2b00c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2b00e:	4b14      	ldr	r3, [pc, #80]	; (2b060 <k_sched_time_slice_set+0xb4>)
   2b010:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2b012:	f7ff ffb5 	bl	2af80 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b016:	480b      	ldr	r0, [pc, #44]	; (2b044 <k_sched_time_slice_set+0x98>)
   2b018:	f001 f9b4 	bl	2c384 <z_spin_unlock_valid>
   2b01c:	b968      	cbnz	r0, 2b03a <k_sched_time_slice_set+0x8e>
   2b01e:	235d      	movs	r3, #93	; 0x5d
   2b020:	4a09      	ldr	r2, [pc, #36]	; (2b048 <k_sched_time_slice_set+0x9c>)
   2b022:	4910      	ldr	r1, [pc, #64]	; (2b064 <k_sched_time_slice_set+0xb8>)
   2b024:	480a      	ldr	r0, [pc, #40]	; (2b050 <k_sched_time_slice_set+0xa4>)
   2b026:	f003 fed6 	bl	2edd6 <printk>
   2b02a:	4906      	ldr	r1, [pc, #24]	; (2b044 <k_sched_time_slice_set+0x98>)
   2b02c:	480e      	ldr	r0, [pc, #56]	; (2b068 <k_sched_time_slice_set+0xbc>)
   2b02e:	f003 fed2 	bl	2edd6 <printk>
   2b032:	215d      	movs	r1, #93	; 0x5d
   2b034:	4804      	ldr	r0, [pc, #16]	; (2b048 <k_sched_time_slice_set+0x9c>)
   2b036:	f003 ff14 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b03a:	f384 8811 	msr	BASEPRI, r4
   2b03e:	f3bf 8f6f 	isb	sy
}
   2b042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b044:	20021404 	.word	0x20021404
   2b048:	00031a38 	.word	0x00031a38
   2b04c:	00031a5e 	.word	0x00031a5e
   2b050:	000316d1 	.word	0x000316d1
   2b054:	00031a73 	.word	0x00031a73
   2b058:	200213cc 	.word	0x200213cc
   2b05c:	2002140c 	.word	0x2002140c
   2b060:	20021408 	.word	0x20021408
   2b064:	00031a8b 	.word	0x00031a8b
   2b068:	00031aa2 	.word	0x00031aa2

0002b06c <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2b06c:	b538      	push	{r3, r4, r5, lr}
   2b06e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2b070:	460d      	mov	r5, r1
   2b072:	b9c1      	cbnz	r1, 2b0a6 <z_reschedule+0x3a>
   2b074:	f3ef 8305 	mrs	r3, IPSR
   2b078:	b9ab      	cbnz	r3, 2b0a6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b07a:	f001 f983 	bl	2c384 <z_spin_unlock_valid>
   2b07e:	b968      	cbnz	r0, 2b09c <z_reschedule+0x30>
   2b080:	2374      	movs	r3, #116	; 0x74
   2b082:	4a14      	ldr	r2, [pc, #80]	; (2b0d4 <z_reschedule+0x68>)
   2b084:	4914      	ldr	r1, [pc, #80]	; (2b0d8 <z_reschedule+0x6c>)
   2b086:	4815      	ldr	r0, [pc, #84]	; (2b0dc <z_reschedule+0x70>)
   2b088:	f003 fea5 	bl	2edd6 <printk>
   2b08c:	4621      	mov	r1, r4
   2b08e:	4814      	ldr	r0, [pc, #80]	; (2b0e0 <z_reschedule+0x74>)
   2b090:	f003 fea1 	bl	2edd6 <printk>
   2b094:	2174      	movs	r1, #116	; 0x74
   2b096:	480f      	ldr	r0, [pc, #60]	; (2b0d4 <z_reschedule+0x68>)
   2b098:	f003 fee3 	bl	2ee62 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2b09c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b0a0:	2000      	movs	r0, #0
   2b0a2:	f7f3 bf3f 	b.w	1ef24 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b0a6:	4620      	mov	r0, r4
   2b0a8:	f001 f96c 	bl	2c384 <z_spin_unlock_valid>
   2b0ac:	b968      	cbnz	r0, 2b0ca <z_reschedule+0x5e>
   2b0ae:	235d      	movs	r3, #93	; 0x5d
   2b0b0:	4a08      	ldr	r2, [pc, #32]	; (2b0d4 <z_reschedule+0x68>)
   2b0b2:	4909      	ldr	r1, [pc, #36]	; (2b0d8 <z_reschedule+0x6c>)
   2b0b4:	4809      	ldr	r0, [pc, #36]	; (2b0dc <z_reschedule+0x70>)
   2b0b6:	f003 fe8e 	bl	2edd6 <printk>
   2b0ba:	4621      	mov	r1, r4
   2b0bc:	4808      	ldr	r0, [pc, #32]	; (2b0e0 <z_reschedule+0x74>)
   2b0be:	f003 fe8a 	bl	2edd6 <printk>
   2b0c2:	215d      	movs	r1, #93	; 0x5d
   2b0c4:	4803      	ldr	r0, [pc, #12]	; (2b0d4 <z_reschedule+0x68>)
   2b0c6:	f003 fecc 	bl	2ee62 <assert_post_action>
   2b0ca:	f385 8811 	msr	BASEPRI, r5
   2b0ce:	f3bf 8f6f 	isb	sy
   2b0d2:	bd38      	pop	{r3, r4, r5, pc}
   2b0d4:	00031a38 	.word	0x00031a38
   2b0d8:	00031a8b 	.word	0x00031a8b
   2b0dc:	000316d1 	.word	0x000316d1
   2b0e0:	00031aa2 	.word	0x00031aa2

0002b0e4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   2b0e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b0e6:	f04f 0320 	mov.w	r3, #32
   2b0ea:	f3ef 8511 	mrs	r5, BASEPRI
   2b0ee:	f383 8811 	msr	BASEPRI, r3
   2b0f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b0f6:	482b      	ldr	r0, [pc, #172]	; (2b1a4 <k_sched_lock+0xc0>)
   2b0f8:	f001 f936 	bl	2c368 <z_spin_lock_valid>
   2b0fc:	b968      	cbnz	r0, 2b11a <k_sched_lock+0x36>
   2b0fe:	234a      	movs	r3, #74	; 0x4a
   2b100:	4a29      	ldr	r2, [pc, #164]	; (2b1a8 <k_sched_lock+0xc4>)
   2b102:	492a      	ldr	r1, [pc, #168]	; (2b1ac <k_sched_lock+0xc8>)
   2b104:	482a      	ldr	r0, [pc, #168]	; (2b1b0 <k_sched_lock+0xcc>)
   2b106:	f003 fe66 	bl	2edd6 <printk>
   2b10a:	4926      	ldr	r1, [pc, #152]	; (2b1a4 <k_sched_lock+0xc0>)
   2b10c:	4829      	ldr	r0, [pc, #164]	; (2b1b4 <k_sched_lock+0xd0>)
   2b10e:	f003 fe62 	bl	2edd6 <printk>
   2b112:	214a      	movs	r1, #74	; 0x4a
   2b114:	4824      	ldr	r0, [pc, #144]	; (2b1a8 <k_sched_lock+0xc4>)
   2b116:	f003 fea4 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b11a:	4822      	ldr	r0, [pc, #136]	; (2b1a4 <k_sched_lock+0xc0>)
   2b11c:	f001 f942 	bl	2c3a4 <z_spin_lock_set_owner>
   2b120:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2b124:	b173      	cbz	r3, 2b144 <k_sched_lock+0x60>
   2b126:	4924      	ldr	r1, [pc, #144]	; (2b1b8 <k_sched_lock+0xd4>)
   2b128:	f240 130d 	movw	r3, #269	; 0x10d
   2b12c:	4a23      	ldr	r2, [pc, #140]	; (2b1bc <k_sched_lock+0xd8>)
   2b12e:	4820      	ldr	r0, [pc, #128]	; (2b1b0 <k_sched_lock+0xcc>)
   2b130:	f003 fe51 	bl	2edd6 <printk>
   2b134:	4822      	ldr	r0, [pc, #136]	; (2b1c0 <k_sched_lock+0xdc>)
   2b136:	f003 fe4e 	bl	2edd6 <printk>
   2b13a:	f240 110d 	movw	r1, #269	; 0x10d
   2b13e:	481f      	ldr	r0, [pc, #124]	; (2b1bc <k_sched_lock+0xd8>)
   2b140:	f003 fe8f 	bl	2ee62 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2b144:	4c1f      	ldr	r4, [pc, #124]	; (2b1c4 <k_sched_lock+0xe0>)
   2b146:	68a2      	ldr	r2, [r4, #8]
   2b148:	7bd2      	ldrb	r2, [r2, #15]
   2b14a:	2a01      	cmp	r2, #1
   2b14c:	d10e      	bne.n	2b16c <k_sched_lock+0x88>
   2b14e:	491e      	ldr	r1, [pc, #120]	; (2b1c8 <k_sched_lock+0xe4>)
   2b150:	f44f 7387 	mov.w	r3, #270	; 0x10e
   2b154:	4a19      	ldr	r2, [pc, #100]	; (2b1bc <k_sched_lock+0xd8>)
   2b156:	4816      	ldr	r0, [pc, #88]	; (2b1b0 <k_sched_lock+0xcc>)
   2b158:	f003 fe3d 	bl	2edd6 <printk>
   2b15c:	4818      	ldr	r0, [pc, #96]	; (2b1c0 <k_sched_lock+0xdc>)
   2b15e:	f003 fe3a 	bl	2edd6 <printk>
   2b162:	f44f 7187 	mov.w	r1, #270	; 0x10e
   2b166:	4815      	ldr	r0, [pc, #84]	; (2b1bc <k_sched_lock+0xd8>)
   2b168:	f003 fe7b 	bl	2ee62 <assert_post_action>
	--_current->base.sched_locked;
   2b16c:	68a2      	ldr	r2, [r4, #8]
   2b16e:	7bd3      	ldrb	r3, [r2, #15]
   2b170:	3b01      	subs	r3, #1
   2b172:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b174:	480b      	ldr	r0, [pc, #44]	; (2b1a4 <k_sched_lock+0xc0>)
   2b176:	f001 f905 	bl	2c384 <z_spin_unlock_valid>
   2b17a:	b968      	cbnz	r0, 2b198 <k_sched_lock+0xb4>
   2b17c:	235d      	movs	r3, #93	; 0x5d
   2b17e:	4a0a      	ldr	r2, [pc, #40]	; (2b1a8 <k_sched_lock+0xc4>)
   2b180:	4912      	ldr	r1, [pc, #72]	; (2b1cc <k_sched_lock+0xe8>)
   2b182:	480b      	ldr	r0, [pc, #44]	; (2b1b0 <k_sched_lock+0xcc>)
   2b184:	f003 fe27 	bl	2edd6 <printk>
   2b188:	4906      	ldr	r1, [pc, #24]	; (2b1a4 <k_sched_lock+0xc0>)
   2b18a:	4811      	ldr	r0, [pc, #68]	; (2b1d0 <k_sched_lock+0xec>)
   2b18c:	f003 fe23 	bl	2edd6 <printk>
   2b190:	215d      	movs	r1, #93	; 0x5d
   2b192:	4805      	ldr	r0, [pc, #20]	; (2b1a8 <k_sched_lock+0xc4>)
   2b194:	f003 fe65 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b198:	f385 8811 	msr	BASEPRI, r5
   2b19c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2b1a0:	bd38      	pop	{r3, r4, r5, pc}
   2b1a2:	bf00      	nop
   2b1a4:	20021404 	.word	0x20021404
   2b1a8:	00031a38 	.word	0x00031a38
   2b1ac:	00031a5e 	.word	0x00031a5e
   2b1b0:	000316d1 	.word	0x000316d1
   2b1b4:	00031a73 	.word	0x00031a73
   2b1b8:	00032fc9 	.word	0x00032fc9
   2b1bc:	00032f9e 	.word	0x00032f9e
   2b1c0:	000323ee 	.word	0x000323ee
   2b1c4:	200213cc 	.word	0x200213cc
   2b1c8:	00032fdb 	.word	0x00032fdb
   2b1cc:	00031a8b 	.word	0x00031a8b
   2b1d0:	00031aa2 	.word	0x00031aa2

0002b1d4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2b1d4:	4b11      	ldr	r3, [pc, #68]	; (2b21c <z_priq_dumb_remove+0x48>)
{
   2b1d6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2b1d8:	f103 0228 	add.w	r2, r3, #40	; 0x28
   2b1dc:	4282      	cmp	r2, r0
{
   2b1de:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2b1e0:	d105      	bne.n	2b1ee <z_priq_dumb_remove+0x1a>
   2b1e2:	689b      	ldr	r3, [r3, #8]
   2b1e4:	428b      	cmp	r3, r1
   2b1e6:	d102      	bne.n	2b1ee <z_priq_dumb_remove+0x1a>
   2b1e8:	7b4b      	ldrb	r3, [r1, #13]
   2b1ea:	06db      	lsls	r3, r3, #27
   2b1ec:	d115      	bne.n	2b21a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2b1ee:	4b0c      	ldr	r3, [pc, #48]	; (2b220 <z_priq_dumb_remove+0x4c>)
   2b1f0:	429c      	cmp	r4, r3
   2b1f2:	d10b      	bne.n	2b20c <z_priq_dumb_remove+0x38>
   2b1f4:	490b      	ldr	r1, [pc, #44]	; (2b224 <z_priq_dumb_remove+0x50>)
   2b1f6:	480c      	ldr	r0, [pc, #48]	; (2b228 <z_priq_dumb_remove+0x54>)
   2b1f8:	f44f 7346 	mov.w	r3, #792	; 0x318
   2b1fc:	4a0b      	ldr	r2, [pc, #44]	; (2b22c <z_priq_dumb_remove+0x58>)
   2b1fe:	f003 fdea 	bl	2edd6 <printk>
   2b202:	f44f 7146 	mov.w	r1, #792	; 0x318
   2b206:	4809      	ldr	r0, [pc, #36]	; (2b22c <z_priq_dumb_remove+0x58>)
   2b208:	f003 fe2b 	bl	2ee62 <assert_post_action>
	node->prev->next = node->next;
   2b20c:	e9d4 3200 	ldrd	r3, r2, [r4]
   2b210:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2b212:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b214:	2300      	movs	r3, #0
	node->prev = NULL;
   2b216:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2b21a:	bd10      	pop	{r4, pc}
   2b21c:	200213cc 	.word	0x200213cc
   2b220:	20020a3c 	.word	0x20020a3c
   2b224:	000330b9 	.word	0x000330b9
   2b228:	000316d1 	.word	0x000316d1
   2b22c:	00033061 	.word	0x00033061

0002b230 <z_unpend_thread>:
{
   2b230:	b538      	push	{r3, r4, r5, lr}
   2b232:	4604      	mov	r4, r0
	__asm__ volatile(
   2b234:	f04f 0320 	mov.w	r3, #32
   2b238:	f3ef 8511 	mrs	r5, BASEPRI
   2b23c:	f383 8811 	msr	BASEPRI, r3
   2b240:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b244:	481e      	ldr	r0, [pc, #120]	; (2b2c0 <z_unpend_thread+0x90>)
   2b246:	f001 f88f 	bl	2c368 <z_spin_lock_valid>
   2b24a:	b968      	cbnz	r0, 2b268 <z_unpend_thread+0x38>
   2b24c:	234a      	movs	r3, #74	; 0x4a
   2b24e:	4a1d      	ldr	r2, [pc, #116]	; (2b2c4 <z_unpend_thread+0x94>)
   2b250:	491d      	ldr	r1, [pc, #116]	; (2b2c8 <z_unpend_thread+0x98>)
   2b252:	481e      	ldr	r0, [pc, #120]	; (2b2cc <z_unpend_thread+0x9c>)
   2b254:	f003 fdbf 	bl	2edd6 <printk>
   2b258:	4919      	ldr	r1, [pc, #100]	; (2b2c0 <z_unpend_thread+0x90>)
   2b25a:	481d      	ldr	r0, [pc, #116]	; (2b2d0 <z_unpend_thread+0xa0>)
   2b25c:	f003 fdbb 	bl	2edd6 <printk>
   2b260:	214a      	movs	r1, #74	; 0x4a
   2b262:	4818      	ldr	r0, [pc, #96]	; (2b2c4 <z_unpend_thread+0x94>)
   2b264:	f003 fdfd 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b268:	4815      	ldr	r0, [pc, #84]	; (2b2c0 <z_unpend_thread+0x90>)
   2b26a:	f001 f89b 	bl	2c3a4 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2b26e:	f104 0008 	add.w	r0, r4, #8
   2b272:	f7ff fe6d 	bl	2af50 <pended_on.isra.17>
   2b276:	4621      	mov	r1, r4
   2b278:	f7ff ffac 	bl	2b1d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b27c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b27e:	4810      	ldr	r0, [pc, #64]	; (2b2c0 <z_unpend_thread+0x90>)
   2b280:	f023 0302 	bic.w	r3, r3, #2
   2b284:	7363      	strb	r3, [r4, #13]
   2b286:	f001 f87d 	bl	2c384 <z_spin_unlock_valid>
   2b28a:	b968      	cbnz	r0, 2b2a8 <z_unpend_thread+0x78>
   2b28c:	235d      	movs	r3, #93	; 0x5d
   2b28e:	4a0d      	ldr	r2, [pc, #52]	; (2b2c4 <z_unpend_thread+0x94>)
   2b290:	4910      	ldr	r1, [pc, #64]	; (2b2d4 <z_unpend_thread+0xa4>)
   2b292:	480e      	ldr	r0, [pc, #56]	; (2b2cc <z_unpend_thread+0x9c>)
   2b294:	f003 fd9f 	bl	2edd6 <printk>
   2b298:	4909      	ldr	r1, [pc, #36]	; (2b2c0 <z_unpend_thread+0x90>)
   2b29a:	480f      	ldr	r0, [pc, #60]	; (2b2d8 <z_unpend_thread+0xa8>)
   2b29c:	f003 fd9b 	bl	2edd6 <printk>
   2b2a0:	215d      	movs	r1, #93	; 0x5d
   2b2a2:	4808      	ldr	r0, [pc, #32]	; (2b2c4 <z_unpend_thread+0x94>)
   2b2a4:	f003 fddd 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b2a8:	f385 8811 	msr	BASEPRI, r5
   2b2ac:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2b2b0:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2b2b2:	f104 0018 	add.w	r0, r4, #24
   2b2b6:	60a3      	str	r3, [r4, #8]
}
   2b2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b2bc:	f001 bb08 	b.w	2c8d0 <z_abort_timeout>
   2b2c0:	20021404 	.word	0x20021404
   2b2c4:	00031a38 	.word	0x00031a38
   2b2c8:	00031a5e 	.word	0x00031a5e
   2b2cc:	000316d1 	.word	0x000316d1
   2b2d0:	00031a73 	.word	0x00031a73
   2b2d4:	00031a8b 	.word	0x00031a8b
   2b2d8:	00031aa2 	.word	0x00031aa2

0002b2dc <update_cache>:
{
   2b2dc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2b2de:	4c15      	ldr	r4, [pc, #84]	; (2b334 <update_cache+0x58>)
{
   2b2e0:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2b2e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2b2e6:	f004 fcc4 	bl	2fc72 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   2b2ea:	4605      	mov	r5, r0
   2b2ec:	b900      	cbnz	r0, 2b2f0 <update_cache+0x14>
   2b2ee:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2b2f0:	b9ca      	cbnz	r2, 2b326 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   2b2f2:	68a3      	ldr	r3, [r4, #8]
   2b2f4:	b963      	cbnz	r3, 2b310 <update_cache+0x34>
   2b2f6:	4910      	ldr	r1, [pc, #64]	; (2b338 <update_cache+0x5c>)
   2b2f8:	237e      	movs	r3, #126	; 0x7e
   2b2fa:	4a10      	ldr	r2, [pc, #64]	; (2b33c <update_cache+0x60>)
   2b2fc:	4810      	ldr	r0, [pc, #64]	; (2b340 <update_cache+0x64>)
   2b2fe:	f003 fd6a 	bl	2edd6 <printk>
   2b302:	4810      	ldr	r0, [pc, #64]	; (2b344 <update_cache+0x68>)
   2b304:	f003 fd67 	bl	2edd6 <printk>
   2b308:	217e      	movs	r1, #126	; 0x7e
   2b30a:	480c      	ldr	r0, [pc, #48]	; (2b33c <update_cache+0x60>)
   2b30c:	f003 fda9 	bl	2ee62 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2b310:	68a3      	ldr	r3, [r4, #8]
   2b312:	7b5a      	ldrb	r2, [r3, #13]
   2b314:	06d2      	lsls	r2, r2, #27
   2b316:	d106      	bne.n	2b326 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2b318:	69aa      	ldr	r2, [r5, #24]
   2b31a:	b922      	cbnz	r2, 2b326 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
   2b31c:	89da      	ldrh	r2, [r3, #14]
   2b31e:	2a7f      	cmp	r2, #127	; 0x7f
   2b320:	d901      	bls.n	2b326 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   2b322:	6263      	str	r3, [r4, #36]	; 0x24
}
   2b324:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2b326:	68a3      	ldr	r3, [r4, #8]
   2b328:	42ab      	cmp	r3, r5
   2b32a:	d001      	beq.n	2b330 <update_cache+0x54>
			z_reset_time_slice();
   2b32c:	f7ff fe28 	bl	2af80 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2b330:	6265      	str	r5, [r4, #36]	; 0x24
}
   2b332:	e7f7      	b.n	2b324 <update_cache+0x48>
   2b334:	200213cc 	.word	0x200213cc
   2b338:	0003309a 	.word	0x0003309a
   2b33c:	00033061 	.word	0x00033061
   2b340:	000316d1 	.word	0x000316d1
   2b344:	000323ee 	.word	0x000323ee

0002b348 <k_sched_unlock>:
{
   2b348:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   2b34a:	4c31      	ldr	r4, [pc, #196]	; (2b410 <k_sched_unlock+0xc8>)
   2b34c:	68a2      	ldr	r2, [r4, #8]
   2b34e:	7bd2      	ldrb	r2, [r2, #15]
   2b350:	b972      	cbnz	r2, 2b370 <k_sched_unlock+0x28>
   2b352:	4930      	ldr	r1, [pc, #192]	; (2b414 <k_sched_unlock+0xcc>)
   2b354:	f240 23ad 	movw	r3, #685	; 0x2ad
   2b358:	4a2f      	ldr	r2, [pc, #188]	; (2b418 <k_sched_unlock+0xd0>)
   2b35a:	4830      	ldr	r0, [pc, #192]	; (2b41c <k_sched_unlock+0xd4>)
   2b35c:	f003 fd3b 	bl	2edd6 <printk>
   2b360:	482f      	ldr	r0, [pc, #188]	; (2b420 <k_sched_unlock+0xd8>)
   2b362:	f003 fd38 	bl	2edd6 <printk>
   2b366:	f240 21ad 	movw	r1, #685	; 0x2ad
   2b36a:	482b      	ldr	r0, [pc, #172]	; (2b418 <k_sched_unlock+0xd0>)
   2b36c:	f003 fd79 	bl	2ee62 <assert_post_action>
   2b370:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2b374:	b173      	cbz	r3, 2b394 <k_sched_unlock+0x4c>
   2b376:	492b      	ldr	r1, [pc, #172]	; (2b424 <k_sched_unlock+0xdc>)
   2b378:	f240 23ae 	movw	r3, #686	; 0x2ae
   2b37c:	4a26      	ldr	r2, [pc, #152]	; (2b418 <k_sched_unlock+0xd0>)
   2b37e:	4827      	ldr	r0, [pc, #156]	; (2b41c <k_sched_unlock+0xd4>)
   2b380:	f003 fd29 	bl	2edd6 <printk>
   2b384:	4826      	ldr	r0, [pc, #152]	; (2b420 <k_sched_unlock+0xd8>)
   2b386:	f003 fd26 	bl	2edd6 <printk>
   2b38a:	f240 21ae 	movw	r1, #686	; 0x2ae
   2b38e:	4822      	ldr	r0, [pc, #136]	; (2b418 <k_sched_unlock+0xd0>)
   2b390:	f003 fd67 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b394:	f04f 0320 	mov.w	r3, #32
   2b398:	f3ef 8511 	mrs	r5, BASEPRI
   2b39c:	f383 8811 	msr	BASEPRI, r3
   2b3a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b3a4:	4820      	ldr	r0, [pc, #128]	; (2b428 <k_sched_unlock+0xe0>)
   2b3a6:	f000 ffdf 	bl	2c368 <z_spin_lock_valid>
   2b3aa:	b968      	cbnz	r0, 2b3c8 <k_sched_unlock+0x80>
   2b3ac:	234a      	movs	r3, #74	; 0x4a
   2b3ae:	4a1f      	ldr	r2, [pc, #124]	; (2b42c <k_sched_unlock+0xe4>)
   2b3b0:	491f      	ldr	r1, [pc, #124]	; (2b430 <k_sched_unlock+0xe8>)
   2b3b2:	481a      	ldr	r0, [pc, #104]	; (2b41c <k_sched_unlock+0xd4>)
   2b3b4:	f003 fd0f 	bl	2edd6 <printk>
   2b3b8:	491b      	ldr	r1, [pc, #108]	; (2b428 <k_sched_unlock+0xe0>)
   2b3ba:	481e      	ldr	r0, [pc, #120]	; (2b434 <k_sched_unlock+0xec>)
   2b3bc:	f003 fd0b 	bl	2edd6 <printk>
   2b3c0:	214a      	movs	r1, #74	; 0x4a
   2b3c2:	481a      	ldr	r0, [pc, #104]	; (2b42c <k_sched_unlock+0xe4>)
   2b3c4:	f003 fd4d 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b3c8:	4817      	ldr	r0, [pc, #92]	; (2b428 <k_sched_unlock+0xe0>)
   2b3ca:	f000 ffeb 	bl	2c3a4 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   2b3ce:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   2b3d0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2b3d2:	7bd3      	ldrb	r3, [r2, #15]
   2b3d4:	3301      	adds	r3, #1
   2b3d6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2b3d8:	f7ff ff80 	bl	2b2dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b3dc:	4812      	ldr	r0, [pc, #72]	; (2b428 <k_sched_unlock+0xe0>)
   2b3de:	f000 ffd1 	bl	2c384 <z_spin_unlock_valid>
   2b3e2:	b968      	cbnz	r0, 2b400 <k_sched_unlock+0xb8>
   2b3e4:	235d      	movs	r3, #93	; 0x5d
   2b3e6:	4a11      	ldr	r2, [pc, #68]	; (2b42c <k_sched_unlock+0xe4>)
   2b3e8:	4913      	ldr	r1, [pc, #76]	; (2b438 <k_sched_unlock+0xf0>)
   2b3ea:	480c      	ldr	r0, [pc, #48]	; (2b41c <k_sched_unlock+0xd4>)
   2b3ec:	f003 fcf3 	bl	2edd6 <printk>
   2b3f0:	490d      	ldr	r1, [pc, #52]	; (2b428 <k_sched_unlock+0xe0>)
   2b3f2:	4812      	ldr	r0, [pc, #72]	; (2b43c <k_sched_unlock+0xf4>)
   2b3f4:	f003 fcef 	bl	2edd6 <printk>
   2b3f8:	215d      	movs	r1, #93	; 0x5d
   2b3fa:	480c      	ldr	r0, [pc, #48]	; (2b42c <k_sched_unlock+0xe4>)
   2b3fc:	f003 fd31 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b400:	f385 8811 	msr	BASEPRI, r5
   2b404:	f3bf 8f6f 	isb	sy
}
   2b408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2b40c:	f004 bc27 	b.w	2fc5e <z_reschedule_unlocked>
   2b410:	200213cc 	.word	0x200213cc
   2b414:	00033003 	.word	0x00033003
   2b418:	00033061 	.word	0x00033061
   2b41c:	000316d1 	.word	0x000316d1
   2b420:	000323ee 	.word	0x000323ee
   2b424:	00032fc9 	.word	0x00032fc9
   2b428:	20021404 	.word	0x20021404
   2b42c:	00031a38 	.word	0x00031a38
   2b430:	00031a5e 	.word	0x00031a5e
   2b434:	00031a73 	.word	0x00031a73
   2b438:	00031a8b 	.word	0x00031a8b
   2b43c:	00031aa2 	.word	0x00031aa2

0002b440 <z_add_thread_to_ready_q>:
{
   2b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b442:	4604      	mov	r4, r0
	__asm__ volatile(
   2b444:	f04f 0320 	mov.w	r3, #32
   2b448:	f3ef 8511 	mrs	r5, BASEPRI
   2b44c:	f383 8811 	msr	BASEPRI, r3
   2b450:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b454:	482f      	ldr	r0, [pc, #188]	; (2b514 <z_add_thread_to_ready_q+0xd4>)
   2b456:	f000 ff87 	bl	2c368 <z_spin_lock_valid>
   2b45a:	b968      	cbnz	r0, 2b478 <z_add_thread_to_ready_q+0x38>
   2b45c:	234a      	movs	r3, #74	; 0x4a
   2b45e:	4a2e      	ldr	r2, [pc, #184]	; (2b518 <z_add_thread_to_ready_q+0xd8>)
   2b460:	492e      	ldr	r1, [pc, #184]	; (2b51c <z_add_thread_to_ready_q+0xdc>)
   2b462:	482f      	ldr	r0, [pc, #188]	; (2b520 <z_add_thread_to_ready_q+0xe0>)
   2b464:	f003 fcb7 	bl	2edd6 <printk>
   2b468:	492a      	ldr	r1, [pc, #168]	; (2b514 <z_add_thread_to_ready_q+0xd4>)
   2b46a:	482e      	ldr	r0, [pc, #184]	; (2b524 <z_add_thread_to_ready_q+0xe4>)
   2b46c:	f003 fcb3 	bl	2edd6 <printk>
   2b470:	214a      	movs	r1, #74	; 0x4a
   2b472:	4829      	ldr	r0, [pc, #164]	; (2b518 <z_add_thread_to_ready_q+0xd8>)
   2b474:	f003 fcf5 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b478:	4826      	ldr	r0, [pc, #152]	; (2b514 <z_add_thread_to_ready_q+0xd4>)
   2b47a:	f000 ff93 	bl	2c3a4 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2b47e:	4b2a      	ldr	r3, [pc, #168]	; (2b528 <z_add_thread_to_ready_q+0xe8>)
   2b480:	429c      	cmp	r4, r3
   2b482:	d10b      	bne.n	2b49c <z_add_thread_to_ready_q+0x5c>
   2b484:	4929      	ldr	r1, [pc, #164]	; (2b52c <z_add_thread_to_ready_q+0xec>)
   2b486:	4826      	ldr	r0, [pc, #152]	; (2b520 <z_add_thread_to_ready_q+0xe0>)
   2b488:	f240 3302 	movw	r3, #770	; 0x302
   2b48c:	4a28      	ldr	r2, [pc, #160]	; (2b530 <z_add_thread_to_ready_q+0xf0>)
   2b48e:	f003 fca2 	bl	2edd6 <printk>
   2b492:	f240 3102 	movw	r1, #770	; 0x302
   2b496:	4826      	ldr	r0, [pc, #152]	; (2b530 <z_add_thread_to_ready_q+0xf0>)
   2b498:	f003 fce3 	bl	2ee62 <assert_post_action>
	return list->head == list;
   2b49c:	4a25      	ldr	r2, [pc, #148]	; (2b534 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b49e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2b4a2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2b4a6:	428b      	cmp	r3, r1
   2b4a8:	d02e      	beq.n	2b508 <z_add_thread_to_ready_q+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b4aa:	b36b      	cbz	r3, 2b508 <z_add_thread_to_ready_q+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   2b4ac:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2b4b0:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2b4b4:	42b7      	cmp	r7, r6
   2b4b6:	dd22      	ble.n	2b4fe <z_add_thread_to_ready_q+0xbe>
	node->prev = successor->prev;
   2b4b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2b4ba:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2b4be:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2b4c0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2b4c2:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   2b4c4:	2000      	movs	r0, #0
   2b4c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2b4ca:	7363      	strb	r3, [r4, #13]
   2b4cc:	f7ff ff06 	bl	2b2dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b4d0:	4810      	ldr	r0, [pc, #64]	; (2b514 <z_add_thread_to_ready_q+0xd4>)
   2b4d2:	f000 ff57 	bl	2c384 <z_spin_unlock_valid>
   2b4d6:	b968      	cbnz	r0, 2b4f4 <z_add_thread_to_ready_q+0xb4>
   2b4d8:	235d      	movs	r3, #93	; 0x5d
   2b4da:	4a0f      	ldr	r2, [pc, #60]	; (2b518 <z_add_thread_to_ready_q+0xd8>)
   2b4dc:	4916      	ldr	r1, [pc, #88]	; (2b538 <z_add_thread_to_ready_q+0xf8>)
   2b4de:	4810      	ldr	r0, [pc, #64]	; (2b520 <z_add_thread_to_ready_q+0xe0>)
   2b4e0:	f003 fc79 	bl	2edd6 <printk>
   2b4e4:	490b      	ldr	r1, [pc, #44]	; (2b514 <z_add_thread_to_ready_q+0xd4>)
   2b4e6:	4815      	ldr	r0, [pc, #84]	; (2b53c <z_add_thread_to_ready_q+0xfc>)
   2b4e8:	f003 fc75 	bl	2edd6 <printk>
   2b4ec:	215d      	movs	r1, #93	; 0x5d
   2b4ee:	480a      	ldr	r0, [pc, #40]	; (2b518 <z_add_thread_to_ready_q+0xd8>)
   2b4f0:	f003 fcb7 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b4f4:	f385 8811 	msr	BASEPRI, r5
   2b4f8:	f3bf 8f6f 	isb	sy
}
   2b4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2b4fe:	4298      	cmp	r0, r3
   2b500:	d002      	beq.n	2b508 <z_add_thread_to_ready_q+0xc8>
   2b502:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b504:	2b00      	cmp	r3, #0
   2b506:	d1d3      	bne.n	2b4b0 <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   2b508:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2b50c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2b50e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b510:	62d4      	str	r4, [r2, #44]	; 0x2c
   2b512:	e7d6      	b.n	2b4c2 <z_add_thread_to_ready_q+0x82>
   2b514:	20021404 	.word	0x20021404
   2b518:	00031a38 	.word	0x00031a38
   2b51c:	00031a5e 	.word	0x00031a5e
   2b520:	000316d1 	.word	0x000316d1
   2b524:	00031a73 	.word	0x00031a73
   2b528:	20020a3c 	.word	0x20020a3c
   2b52c:	000330b9 	.word	0x000330b9
   2b530:	00033061 	.word	0x00033061
   2b534:	200213cc 	.word	0x200213cc
   2b538:	00031a8b 	.word	0x00031a8b
   2b53c:	00031aa2 	.word	0x00031aa2

0002b540 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   2b540:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   2b544:	b570      	push	{r4, r5, r6, lr}
   2b546:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2b548:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   2b54c:	2b00      	cmp	r3, #0
   2b54e:	d042      	beq.n	2b5d6 <z_thread_timeout+0x96>
	__asm__ volatile(
   2b550:	f04f 0320 	mov.w	r3, #32
   2b554:	f3ef 8611 	mrs	r6, BASEPRI
   2b558:	f383 8811 	msr	BASEPRI, r3
   2b55c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b560:	4825      	ldr	r0, [pc, #148]	; (2b5f8 <z_thread_timeout+0xb8>)
   2b562:	f000 ff01 	bl	2c368 <z_spin_lock_valid>
   2b566:	b968      	cbnz	r0, 2b584 <z_thread_timeout+0x44>
   2b568:	234a      	movs	r3, #74	; 0x4a
   2b56a:	4a24      	ldr	r2, [pc, #144]	; (2b5fc <z_thread_timeout+0xbc>)
   2b56c:	4924      	ldr	r1, [pc, #144]	; (2b600 <z_thread_timeout+0xc0>)
   2b56e:	4825      	ldr	r0, [pc, #148]	; (2b604 <z_thread_timeout+0xc4>)
   2b570:	f003 fc31 	bl	2edd6 <printk>
   2b574:	4920      	ldr	r1, [pc, #128]	; (2b5f8 <z_thread_timeout+0xb8>)
   2b576:	4824      	ldr	r0, [pc, #144]	; (2b608 <z_thread_timeout+0xc8>)
   2b578:	f003 fc2d 	bl	2edd6 <printk>
   2b57c:	214a      	movs	r1, #74	; 0x4a
   2b57e:	481f      	ldr	r0, [pc, #124]	; (2b5fc <z_thread_timeout+0xbc>)
   2b580:	f003 fc6f 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b584:	481c      	ldr	r0, [pc, #112]	; (2b5f8 <z_thread_timeout+0xb8>)
   2b586:	f000 ff0d 	bl	2c3a4 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2b58a:	f1a4 0010 	sub.w	r0, r4, #16
   2b58e:	f7ff fcdf 	bl	2af50 <pended_on.isra.17>
   2b592:	4629      	mov	r1, r5
   2b594:	f7ff fe1e 	bl	2b1d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b598:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b59c:	4816      	ldr	r0, [pc, #88]	; (2b5f8 <z_thread_timeout+0xb8>)
   2b59e:	f023 0302 	bic.w	r3, r3, #2
   2b5a2:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2b5a6:	f000 feed 	bl	2c384 <z_spin_unlock_valid>
   2b5aa:	b968      	cbnz	r0, 2b5c8 <z_thread_timeout+0x88>
   2b5ac:	235d      	movs	r3, #93	; 0x5d
   2b5ae:	4a13      	ldr	r2, [pc, #76]	; (2b5fc <z_thread_timeout+0xbc>)
   2b5b0:	4916      	ldr	r1, [pc, #88]	; (2b60c <z_thread_timeout+0xcc>)
   2b5b2:	4814      	ldr	r0, [pc, #80]	; (2b604 <z_thread_timeout+0xc4>)
   2b5b4:	f003 fc0f 	bl	2edd6 <printk>
   2b5b8:	490f      	ldr	r1, [pc, #60]	; (2b5f8 <z_thread_timeout+0xb8>)
   2b5ba:	4815      	ldr	r0, [pc, #84]	; (2b610 <z_thread_timeout+0xd0>)
   2b5bc:	f003 fc0b 	bl	2edd6 <printk>
   2b5c0:	215d      	movs	r1, #93	; 0x5d
   2b5c2:	480e      	ldr	r0, [pc, #56]	; (2b5fc <z_thread_timeout+0xbc>)
   2b5c4:	f003 fc4d 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b5c8:	f386 8811 	msr	BASEPRI, r6
   2b5cc:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2b5d0:	2300      	movs	r3, #0
   2b5d2:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2b5d6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   2b5da:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2b5dc:	f023 0314 	bic.w	r3, r3, #20
   2b5e0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   2b5e4:	f004 fb1d 	bl	2fc22 <z_is_thread_ready>
   2b5e8:	b120      	cbz	r0, 2b5f4 <z_thread_timeout+0xb4>
		z_add_thread_to_ready_q(thread);
   2b5ea:	4628      	mov	r0, r5
}
   2b5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b5f0:	f7ff bf26 	b.w	2b440 <z_add_thread_to_ready_q>
   2b5f4:	bd70      	pop	{r4, r5, r6, pc}
   2b5f6:	bf00      	nop
   2b5f8:	20021404 	.word	0x20021404
   2b5fc:	00031a38 	.word	0x00031a38
   2b600:	00031a5e 	.word	0x00031a5e
   2b604:	000316d1 	.word	0x000316d1
   2b608:	00031a73 	.word	0x00031a73
   2b60c:	00031a8b 	.word	0x00031a8b
   2b610:	00031aa2 	.word	0x00031aa2

0002b614 <z_move_thread_to_end_of_prio_q>:
{
   2b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b616:	4604      	mov	r4, r0
	__asm__ volatile(
   2b618:	f04f 0320 	mov.w	r3, #32
   2b61c:	f3ef 8511 	mrs	r5, BASEPRI
   2b620:	f383 8811 	msr	BASEPRI, r3
   2b624:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b628:	4835      	ldr	r0, [pc, #212]	; (2b700 <z_move_thread_to_end_of_prio_q+0xec>)
   2b62a:	f000 fe9d 	bl	2c368 <z_spin_lock_valid>
   2b62e:	b968      	cbnz	r0, 2b64c <z_move_thread_to_end_of_prio_q+0x38>
   2b630:	234a      	movs	r3, #74	; 0x4a
   2b632:	4a34      	ldr	r2, [pc, #208]	; (2b704 <z_move_thread_to_end_of_prio_q+0xf0>)
   2b634:	4934      	ldr	r1, [pc, #208]	; (2b708 <z_move_thread_to_end_of_prio_q+0xf4>)
   2b636:	4835      	ldr	r0, [pc, #212]	; (2b70c <z_move_thread_to_end_of_prio_q+0xf8>)
   2b638:	f003 fbcd 	bl	2edd6 <printk>
   2b63c:	4930      	ldr	r1, [pc, #192]	; (2b700 <z_move_thread_to_end_of_prio_q+0xec>)
   2b63e:	4834      	ldr	r0, [pc, #208]	; (2b710 <z_move_thread_to_end_of_prio_q+0xfc>)
   2b640:	f003 fbc9 	bl	2edd6 <printk>
   2b644:	214a      	movs	r1, #74	; 0x4a
   2b646:	482f      	ldr	r0, [pc, #188]	; (2b704 <z_move_thread_to_end_of_prio_q+0xf0>)
   2b648:	f003 fc0b 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b64c:	482c      	ldr	r0, [pc, #176]	; (2b700 <z_move_thread_to_end_of_prio_q+0xec>)
   2b64e:	f000 fea9 	bl	2c3a4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2b652:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2b656:	2b00      	cmp	r3, #0
   2b658:	da03      	bge.n	2b662 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2b65a:	4621      	mov	r1, r4
   2b65c:	482d      	ldr	r0, [pc, #180]	; (2b714 <z_move_thread_to_end_of_prio_q+0x100>)
   2b65e:	f7ff fdb9 	bl	2b1d4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2b662:	4b2d      	ldr	r3, [pc, #180]	; (2b718 <z_move_thread_to_end_of_prio_q+0x104>)
   2b664:	429c      	cmp	r4, r3
   2b666:	d10b      	bne.n	2b680 <z_move_thread_to_end_of_prio_q+0x6c>
   2b668:	492c      	ldr	r1, [pc, #176]	; (2b71c <z_move_thread_to_end_of_prio_q+0x108>)
   2b66a:	4828      	ldr	r0, [pc, #160]	; (2b70c <z_move_thread_to_end_of_prio_q+0xf8>)
   2b66c:	f240 3302 	movw	r3, #770	; 0x302
   2b670:	4a2b      	ldr	r2, [pc, #172]	; (2b720 <z_move_thread_to_end_of_prio_q+0x10c>)
   2b672:	f003 fbb0 	bl	2edd6 <printk>
   2b676:	f240 3102 	movw	r1, #770	; 0x302
   2b67a:	4829      	ldr	r0, [pc, #164]	; (2b720 <z_move_thread_to_end_of_prio_q+0x10c>)
   2b67c:	f003 fbf1 	bl	2ee62 <assert_post_action>
	return list->head == list;
   2b680:	4a28      	ldr	r2, [pc, #160]	; (2b724 <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b682:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2b686:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2b68a:	428b      	cmp	r3, r1
   2b68c:	d032      	beq.n	2b6f4 <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b68e:	2b00      	cmp	r3, #0
   2b690:	d030      	beq.n	2b6f4 <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   2b692:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2b696:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2b69a:	42b7      	cmp	r7, r6
   2b69c:	dd25      	ble.n	2b6ea <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   2b69e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2b6a0:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2b6a4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2b6a6:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2b6a8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   2b6aa:	6890      	ldr	r0, [r2, #8]
   2b6ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2b6b0:	7363      	strb	r3, [r4, #13]
   2b6b2:	1b03      	subs	r3, r0, r4
   2b6b4:	4258      	negs	r0, r3
   2b6b6:	4158      	adcs	r0, r3
   2b6b8:	f7ff fe10 	bl	2b2dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b6bc:	4810      	ldr	r0, [pc, #64]	; (2b700 <z_move_thread_to_end_of_prio_q+0xec>)
   2b6be:	f000 fe61 	bl	2c384 <z_spin_unlock_valid>
   2b6c2:	b968      	cbnz	r0, 2b6e0 <z_move_thread_to_end_of_prio_q+0xcc>
   2b6c4:	235d      	movs	r3, #93	; 0x5d
   2b6c6:	4a0f      	ldr	r2, [pc, #60]	; (2b704 <z_move_thread_to_end_of_prio_q+0xf0>)
   2b6c8:	4917      	ldr	r1, [pc, #92]	; (2b728 <z_move_thread_to_end_of_prio_q+0x114>)
   2b6ca:	4810      	ldr	r0, [pc, #64]	; (2b70c <z_move_thread_to_end_of_prio_q+0xf8>)
   2b6cc:	f003 fb83 	bl	2edd6 <printk>
   2b6d0:	490b      	ldr	r1, [pc, #44]	; (2b700 <z_move_thread_to_end_of_prio_q+0xec>)
   2b6d2:	4816      	ldr	r0, [pc, #88]	; (2b72c <z_move_thread_to_end_of_prio_q+0x118>)
   2b6d4:	f003 fb7f 	bl	2edd6 <printk>
   2b6d8:	215d      	movs	r1, #93	; 0x5d
   2b6da:	480a      	ldr	r0, [pc, #40]	; (2b704 <z_move_thread_to_end_of_prio_q+0xf0>)
   2b6dc:	f003 fbc1 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b6e0:	f385 8811 	msr	BASEPRI, r5
   2b6e4:	f3bf 8f6f 	isb	sy
}
   2b6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2b6ea:	4298      	cmp	r0, r3
   2b6ec:	d002      	beq.n	2b6f4 <z_move_thread_to_end_of_prio_q+0xe0>
   2b6ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b6f0:	2b00      	cmp	r3, #0
   2b6f2:	d1d0      	bne.n	2b696 <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   2b6f4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2b6f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2b6fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b6fc:	62d4      	str	r4, [r2, #44]	; 0x2c
   2b6fe:	e7d3      	b.n	2b6a8 <z_move_thread_to_end_of_prio_q+0x94>
   2b700:	20021404 	.word	0x20021404
   2b704:	00031a38 	.word	0x00031a38
   2b708:	00031a5e 	.word	0x00031a5e
   2b70c:	000316d1 	.word	0x000316d1
   2b710:	00031a73 	.word	0x00031a73
   2b714:	200213f4 	.word	0x200213f4
   2b718:	20020a3c 	.word	0x20020a3c
   2b71c:	000330b9 	.word	0x000330b9
   2b720:	00033061 	.word	0x00033061
   2b724:	200213cc 	.word	0x200213cc
   2b728:	00031a8b 	.word	0x00031a8b
   2b72c:	00031aa2 	.word	0x00031aa2

0002b730 <z_time_slice>:
	if (pending_current == _current) {
   2b730:	4a15      	ldr	r2, [pc, #84]	; (2b788 <z_time_slice+0x58>)
   2b732:	4916      	ldr	r1, [pc, #88]	; (2b78c <z_time_slice+0x5c>)
{
   2b734:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   2b736:	680c      	ldr	r4, [r1, #0]
   2b738:	6893      	ldr	r3, [r2, #8]
   2b73a:	42a3      	cmp	r3, r4
   2b73c:	4614      	mov	r4, r2
   2b73e:	d103      	bne.n	2b748 <z_time_slice+0x18>
}
   2b740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   2b744:	f7ff bc1c 	b.w	2af80 <z_reset_time_slice>
	pending_current = NULL;
   2b748:	2500      	movs	r5, #0
   2b74a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   2b74c:	4910      	ldr	r1, [pc, #64]	; (2b790 <z_time_slice+0x60>)
   2b74e:	6809      	ldr	r1, [r1, #0]
   2b750:	b1b9      	cbz	r1, 2b782 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   2b752:	89d9      	ldrh	r1, [r3, #14]
   2b754:	297f      	cmp	r1, #127	; 0x7f
   2b756:	d814      	bhi.n	2b782 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2b758:	490e      	ldr	r1, [pc, #56]	; (2b794 <z_time_slice+0x64>)
   2b75a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   2b75e:	6809      	ldr	r1, [r1, #0]
   2b760:	428d      	cmp	r5, r1
   2b762:	db0e      	blt.n	2b782 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   2b764:	490c      	ldr	r1, [pc, #48]	; (2b798 <z_time_slice+0x68>)
   2b766:	428b      	cmp	r3, r1
   2b768:	d00b      	beq.n	2b782 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   2b76a:	6999      	ldr	r1, [r3, #24]
   2b76c:	b949      	cbnz	r1, 2b782 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   2b76e:	6911      	ldr	r1, [r2, #16]
   2b770:	4281      	cmp	r1, r0
   2b772:	dc03      	bgt.n	2b77c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   2b774:	4618      	mov	r0, r3
   2b776:	f7ff ff4d 	bl	2b614 <z_move_thread_to_end_of_prio_q>
   2b77a:	e7e1      	b.n	2b740 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   2b77c:	1a09      	subs	r1, r1, r0
   2b77e:	6111      	str	r1, [r2, #16]
}
   2b780:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   2b782:	2300      	movs	r3, #0
   2b784:	6123      	str	r3, [r4, #16]
   2b786:	e7fb      	b.n	2b780 <z_time_slice+0x50>
   2b788:	200213cc 	.word	0x200213cc
   2b78c:	20021400 	.word	0x20021400
   2b790:	2002140c 	.word	0x2002140c
   2b794:	20021408 	.word	0x20021408
   2b798:	20020a3c 	.word	0x20020a3c

0002b79c <z_thread_single_suspend>:
{
   2b79c:	b570      	push	{r4, r5, r6, lr}
   2b79e:	4604      	mov	r4, r0
   2b7a0:	3018      	adds	r0, #24
   2b7a2:	f001 f895 	bl	2c8d0 <z_abort_timeout>
	__asm__ volatile(
   2b7a6:	f04f 0320 	mov.w	r3, #32
   2b7aa:	f3ef 8611 	mrs	r6, BASEPRI
   2b7ae:	f383 8811 	msr	BASEPRI, r3
   2b7b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b7b6:	4825      	ldr	r0, [pc, #148]	; (2b84c <z_thread_single_suspend+0xb0>)
   2b7b8:	f000 fdd6 	bl	2c368 <z_spin_lock_valid>
   2b7bc:	b968      	cbnz	r0, 2b7da <z_thread_single_suspend+0x3e>
   2b7be:	234a      	movs	r3, #74	; 0x4a
   2b7c0:	4a23      	ldr	r2, [pc, #140]	; (2b850 <z_thread_single_suspend+0xb4>)
   2b7c2:	4924      	ldr	r1, [pc, #144]	; (2b854 <z_thread_single_suspend+0xb8>)
   2b7c4:	4824      	ldr	r0, [pc, #144]	; (2b858 <z_thread_single_suspend+0xbc>)
   2b7c6:	f003 fb06 	bl	2edd6 <printk>
   2b7ca:	4920      	ldr	r1, [pc, #128]	; (2b84c <z_thread_single_suspend+0xb0>)
   2b7cc:	4823      	ldr	r0, [pc, #140]	; (2b85c <z_thread_single_suspend+0xc0>)
   2b7ce:	f003 fb02 	bl	2edd6 <printk>
   2b7d2:	214a      	movs	r1, #74	; 0x4a
   2b7d4:	481e      	ldr	r0, [pc, #120]	; (2b850 <z_thread_single_suspend+0xb4>)
   2b7d6:	f003 fb44 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b7da:	481c      	ldr	r0, [pc, #112]	; (2b84c <z_thread_single_suspend+0xb0>)
   2b7dc:	f000 fde2 	bl	2c3a4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2b7e0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2b7e4:	2b00      	cmp	r3, #0
   2b7e6:	da07      	bge.n	2b7f8 <z_thread_single_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2b7e8:	4621      	mov	r1, r4
   2b7ea:	481d      	ldr	r0, [pc, #116]	; (2b860 <z_thread_single_suspend+0xc4>)
   2b7ec:	f7ff fcf2 	bl	2b1d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2b7f0:	7b63      	ldrb	r3, [r4, #13]
   2b7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2b7f6:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2b7f8:	4d1a      	ldr	r5, [pc, #104]	; (2b864 <z_thread_single_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2b7fa:	7b63      	ldrb	r3, [r4, #13]
   2b7fc:	68a8      	ldr	r0, [r5, #8]
   2b7fe:	f043 0310 	orr.w	r3, r3, #16
   2b802:	7363      	strb	r3, [r4, #13]
   2b804:	1b03      	subs	r3, r0, r4
   2b806:	4258      	negs	r0, r3
   2b808:	4158      	adcs	r0, r3
   2b80a:	f7ff fd67 	bl	2b2dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b80e:	480f      	ldr	r0, [pc, #60]	; (2b84c <z_thread_single_suspend+0xb0>)
   2b810:	f000 fdb8 	bl	2c384 <z_spin_unlock_valid>
   2b814:	b968      	cbnz	r0, 2b832 <z_thread_single_suspend+0x96>
   2b816:	235d      	movs	r3, #93	; 0x5d
   2b818:	4a0d      	ldr	r2, [pc, #52]	; (2b850 <z_thread_single_suspend+0xb4>)
   2b81a:	4913      	ldr	r1, [pc, #76]	; (2b868 <z_thread_single_suspend+0xcc>)
   2b81c:	480e      	ldr	r0, [pc, #56]	; (2b858 <z_thread_single_suspend+0xbc>)
   2b81e:	f003 fada 	bl	2edd6 <printk>
   2b822:	490a      	ldr	r1, [pc, #40]	; (2b84c <z_thread_single_suspend+0xb0>)
   2b824:	4811      	ldr	r0, [pc, #68]	; (2b86c <z_thread_single_suspend+0xd0>)
   2b826:	f003 fad6 	bl	2edd6 <printk>
   2b82a:	215d      	movs	r1, #93	; 0x5d
   2b82c:	4808      	ldr	r0, [pc, #32]	; (2b850 <z_thread_single_suspend+0xb4>)
   2b82e:	f003 fb18 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b832:	f386 8811 	msr	BASEPRI, r6
   2b836:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2b83a:	68ab      	ldr	r3, [r5, #8]
   2b83c:	42a3      	cmp	r3, r4
   2b83e:	d103      	bne.n	2b848 <z_thread_single_suspend+0xac>
}
   2b840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2b844:	f004 ba0b 	b.w	2fc5e <z_reschedule_unlocked>
}
   2b848:	bd70      	pop	{r4, r5, r6, pc}
   2b84a:	bf00      	nop
   2b84c:	20021404 	.word	0x20021404
   2b850:	00031a38 	.word	0x00031a38
   2b854:	00031a5e 	.word	0x00031a5e
   2b858:	000316d1 	.word	0x000316d1
   2b85c:	00031a73 	.word	0x00031a73
   2b860:	200213f4 	.word	0x200213f4
   2b864:	200213cc 	.word	0x200213cc
   2b868:	00031a8b 	.word	0x00031a8b
   2b86c:	00031aa2 	.word	0x00031aa2

0002b870 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   2b870:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2b872:	b570      	push	{r4, r5, r6, lr}
   2b874:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2b876:	b103      	cbz	r3, 2b87a <z_thread_single_abort+0xa>
		thread->fn_abort();
   2b878:	4798      	blx	r3
   2b87a:	f104 0018 	add.w	r0, r4, #24
   2b87e:	f001 f827 	bl	2c8d0 <z_abort_timeout>
	__asm__ volatile(
   2b882:	f04f 0320 	mov.w	r3, #32
   2b886:	f3ef 8511 	mrs	r5, BASEPRI
   2b88a:	f383 8811 	msr	BASEPRI, r3
   2b88e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b892:	482c      	ldr	r0, [pc, #176]	; (2b944 <z_thread_single_abort+0xd4>)
   2b894:	f000 fd68 	bl	2c368 <z_spin_lock_valid>
   2b898:	b968      	cbnz	r0, 2b8b6 <z_thread_single_abort+0x46>
   2b89a:	234a      	movs	r3, #74	; 0x4a
   2b89c:	4a2a      	ldr	r2, [pc, #168]	; (2b948 <z_thread_single_abort+0xd8>)
   2b89e:	492b      	ldr	r1, [pc, #172]	; (2b94c <z_thread_single_abort+0xdc>)
   2b8a0:	482b      	ldr	r0, [pc, #172]	; (2b950 <z_thread_single_abort+0xe0>)
   2b8a2:	f003 fa98 	bl	2edd6 <printk>
   2b8a6:	4927      	ldr	r1, [pc, #156]	; (2b944 <z_thread_single_abort+0xd4>)
   2b8a8:	482a      	ldr	r0, [pc, #168]	; (2b954 <z_thread_single_abort+0xe4>)
   2b8aa:	f003 fa94 	bl	2edd6 <printk>
   2b8ae:	214a      	movs	r1, #74	; 0x4a
   2b8b0:	4825      	ldr	r0, [pc, #148]	; (2b948 <z_thread_single_abort+0xd8>)
   2b8b2:	f003 fad6 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b8b6:	4823      	ldr	r0, [pc, #140]	; (2b944 <z_thread_single_abort+0xd4>)
   2b8b8:	f000 fd74 	bl	2c3a4 <z_spin_lock_set_owner>
		if (z_is_thread_ready(thread)) {
   2b8bc:	4620      	mov	r0, r4
   2b8be:	f004 f9b0 	bl	2fc22 <z_is_thread_ready>
   2b8c2:	4606      	mov	r6, r0
   2b8c4:	b368      	cbz	r0, 2b922 <z_thread_single_abort+0xb2>
			if (z_is_thread_queued(thread)) {
   2b8c6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2b8ca:	2b00      	cmp	r3, #0
   2b8cc:	da07      	bge.n	2b8de <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   2b8ce:	4621      	mov	r1, r4
   2b8d0:	4821      	ldr	r0, [pc, #132]	; (2b958 <z_thread_single_abort+0xe8>)
   2b8d2:	f7ff fc7f 	bl	2b1d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2b8d6:	7b63      	ldrb	r3, [r4, #13]
   2b8d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2b8dc:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2b8de:	4b1f      	ldr	r3, [pc, #124]	; (2b95c <z_thread_single_abort+0xec>)
   2b8e0:	6898      	ldr	r0, [r3, #8]
   2b8e2:	1b02      	subs	r2, r0, r4
   2b8e4:	4250      	negs	r0, r2
   2b8e6:	4150      	adcs	r0, r2
   2b8e8:	f7ff fcf8 	bl	2b2dc <update_cache>
		thread->base.thread_state |= mask;
   2b8ec:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b8ee:	4815      	ldr	r0, [pc, #84]	; (2b944 <z_thread_single_abort+0xd4>)
   2b8f0:	f043 0308 	orr.w	r3, r3, #8
   2b8f4:	7363      	strb	r3, [r4, #13]
   2b8f6:	f000 fd45 	bl	2c384 <z_spin_unlock_valid>
   2b8fa:	b968      	cbnz	r0, 2b918 <z_thread_single_abort+0xa8>
   2b8fc:	235d      	movs	r3, #93	; 0x5d
   2b8fe:	4a12      	ldr	r2, [pc, #72]	; (2b948 <z_thread_single_abort+0xd8>)
   2b900:	4917      	ldr	r1, [pc, #92]	; (2b960 <z_thread_single_abort+0xf0>)
   2b902:	4813      	ldr	r0, [pc, #76]	; (2b950 <z_thread_single_abort+0xe0>)
   2b904:	f003 fa67 	bl	2edd6 <printk>
   2b908:	490e      	ldr	r1, [pc, #56]	; (2b944 <z_thread_single_abort+0xd4>)
   2b90a:	4816      	ldr	r0, [pc, #88]	; (2b964 <z_thread_single_abort+0xf4>)
   2b90c:	f003 fa63 	bl	2edd6 <printk>
   2b910:	215d      	movs	r1, #93	; 0x5d
   2b912:	480d      	ldr	r0, [pc, #52]	; (2b948 <z_thread_single_abort+0xd8>)
   2b914:	f003 faa5 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b918:	f385 8811 	msr	BASEPRI, r5
   2b91c:	f3bf 8f6f 	isb	sy
}
   2b920:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   2b922:	7b63      	ldrb	r3, [r4, #13]
   2b924:	079b      	lsls	r3, r3, #30
   2b926:	d5e1      	bpl.n	2b8ec <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   2b928:	f104 0008 	add.w	r0, r4, #8
   2b92c:	f7ff fb10 	bl	2af50 <pended_on.isra.17>
   2b930:	4621      	mov	r1, r4
   2b932:	f7ff fc4f 	bl	2b1d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b936:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   2b938:	60a6      	str	r6, [r4, #8]
   2b93a:	f023 0302 	bic.w	r3, r3, #2
   2b93e:	7363      	strb	r3, [r4, #13]
   2b940:	e7d4      	b.n	2b8ec <z_thread_single_abort+0x7c>
   2b942:	bf00      	nop
   2b944:	20021404 	.word	0x20021404
   2b948:	00031a38 	.word	0x00031a38
   2b94c:	00031a5e 	.word	0x00031a5e
   2b950:	000316d1 	.word	0x000316d1
   2b954:	00031a73 	.word	0x00031a73
   2b958:	200213f4 	.word	0x200213f4
   2b95c:	200213cc 	.word	0x200213cc
   2b960:	00031a8b 	.word	0x00031a8b
   2b964:	00031aa2 	.word	0x00031aa2

0002b968 <z_remove_thread_from_ready_q>:
{
   2b968:	b538      	push	{r3, r4, r5, lr}
   2b96a:	4604      	mov	r4, r0
	__asm__ volatile(
   2b96c:	f04f 0320 	mov.w	r3, #32
   2b970:	f3ef 8511 	mrs	r5, BASEPRI
   2b974:	f383 8811 	msr	BASEPRI, r3
   2b978:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b97c:	481f      	ldr	r0, [pc, #124]	; (2b9fc <z_remove_thread_from_ready_q+0x94>)
   2b97e:	f000 fcf3 	bl	2c368 <z_spin_lock_valid>
   2b982:	b968      	cbnz	r0, 2b9a0 <z_remove_thread_from_ready_q+0x38>
   2b984:	234a      	movs	r3, #74	; 0x4a
   2b986:	4a1e      	ldr	r2, [pc, #120]	; (2ba00 <z_remove_thread_from_ready_q+0x98>)
   2b988:	491e      	ldr	r1, [pc, #120]	; (2ba04 <z_remove_thread_from_ready_q+0x9c>)
   2b98a:	481f      	ldr	r0, [pc, #124]	; (2ba08 <z_remove_thread_from_ready_q+0xa0>)
   2b98c:	f003 fa23 	bl	2edd6 <printk>
   2b990:	491a      	ldr	r1, [pc, #104]	; (2b9fc <z_remove_thread_from_ready_q+0x94>)
   2b992:	481e      	ldr	r0, [pc, #120]	; (2ba0c <z_remove_thread_from_ready_q+0xa4>)
   2b994:	f003 fa1f 	bl	2edd6 <printk>
   2b998:	214a      	movs	r1, #74	; 0x4a
   2b99a:	4819      	ldr	r0, [pc, #100]	; (2ba00 <z_remove_thread_from_ready_q+0x98>)
   2b99c:	f003 fa61 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b9a0:	4816      	ldr	r0, [pc, #88]	; (2b9fc <z_remove_thread_from_ready_q+0x94>)
   2b9a2:	f000 fcff 	bl	2c3a4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2b9a6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2b9aa:	2b00      	cmp	r3, #0
   2b9ac:	da07      	bge.n	2b9be <z_remove_thread_from_ready_q+0x56>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2b9ae:	4621      	mov	r1, r4
   2b9b0:	4817      	ldr	r0, [pc, #92]	; (2ba10 <z_remove_thread_from_ready_q+0xa8>)
   2b9b2:	f7ff fc0f 	bl	2b1d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2b9b6:	7b63      	ldrb	r3, [r4, #13]
   2b9b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2b9bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2b9be:	4b15      	ldr	r3, [pc, #84]	; (2ba14 <z_remove_thread_from_ready_q+0xac>)
   2b9c0:	6898      	ldr	r0, [r3, #8]
   2b9c2:	1b03      	subs	r3, r0, r4
   2b9c4:	4258      	negs	r0, r3
   2b9c6:	4158      	adcs	r0, r3
   2b9c8:	f7ff fc88 	bl	2b2dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b9cc:	480b      	ldr	r0, [pc, #44]	; (2b9fc <z_remove_thread_from_ready_q+0x94>)
   2b9ce:	f000 fcd9 	bl	2c384 <z_spin_unlock_valid>
   2b9d2:	b968      	cbnz	r0, 2b9f0 <z_remove_thread_from_ready_q+0x88>
   2b9d4:	235d      	movs	r3, #93	; 0x5d
   2b9d6:	4a0a      	ldr	r2, [pc, #40]	; (2ba00 <z_remove_thread_from_ready_q+0x98>)
   2b9d8:	490f      	ldr	r1, [pc, #60]	; (2ba18 <z_remove_thread_from_ready_q+0xb0>)
   2b9da:	480b      	ldr	r0, [pc, #44]	; (2ba08 <z_remove_thread_from_ready_q+0xa0>)
   2b9dc:	f003 f9fb 	bl	2edd6 <printk>
   2b9e0:	4906      	ldr	r1, [pc, #24]	; (2b9fc <z_remove_thread_from_ready_q+0x94>)
   2b9e2:	480e      	ldr	r0, [pc, #56]	; (2ba1c <z_remove_thread_from_ready_q+0xb4>)
   2b9e4:	f003 f9f7 	bl	2edd6 <printk>
   2b9e8:	215d      	movs	r1, #93	; 0x5d
   2b9ea:	4805      	ldr	r0, [pc, #20]	; (2ba00 <z_remove_thread_from_ready_q+0x98>)
   2b9ec:	f003 fa39 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2b9f0:	f385 8811 	msr	BASEPRI, r5
   2b9f4:	f3bf 8f6f 	isb	sy
}
   2b9f8:	bd38      	pop	{r3, r4, r5, pc}
   2b9fa:	bf00      	nop
   2b9fc:	20021404 	.word	0x20021404
   2ba00:	00031a38 	.word	0x00031a38
   2ba04:	00031a5e 	.word	0x00031a5e
   2ba08:	000316d1 	.word	0x000316d1
   2ba0c:	00031a73 	.word	0x00031a73
   2ba10:	200213f4 	.word	0x200213f4
   2ba14:	200213cc 	.word	0x200213cc
   2ba18:	00031a8b 	.word	0x00031a8b
   2ba1c:	00031aa2 	.word	0x00031aa2

0002ba20 <pend>:
{
   2ba20:	b570      	push	{r4, r5, r6, lr}
   2ba22:	4604      	mov	r4, r0
   2ba24:	460d      	mov	r5, r1
   2ba26:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   2ba28:	f7ff ff9e 	bl	2b968 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   2ba2c:	7b63      	ldrb	r3, [r4, #13]
   2ba2e:	f043 0302 	orr.w	r3, r3, #2
   2ba32:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2ba34:	b1fd      	cbz	r5, 2ba76 <pend+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2ba36:	4b2b      	ldr	r3, [pc, #172]	; (2bae4 <pend+0xc4>)
		thread->base.pended_on = wait_q;
   2ba38:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2ba3a:	429c      	cmp	r4, r3
   2ba3c:	d10b      	bne.n	2ba56 <pend+0x36>
   2ba3e:	492a      	ldr	r1, [pc, #168]	; (2bae8 <pend+0xc8>)
   2ba40:	482a      	ldr	r0, [pc, #168]	; (2baec <pend+0xcc>)
   2ba42:	f240 3302 	movw	r3, #770	; 0x302
   2ba46:	4a2a      	ldr	r2, [pc, #168]	; (2baf0 <pend+0xd0>)
   2ba48:	f003 f9c5 	bl	2edd6 <printk>
   2ba4c:	f240 3102 	movw	r1, #770	; 0x302
   2ba50:	4827      	ldr	r0, [pc, #156]	; (2baf0 <pend+0xd0>)
   2ba52:	f003 fa06 	bl	2ee62 <assert_post_action>
	return list->head == list;
   2ba56:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ba58:	429d      	cmp	r5, r3
   2ba5a:	d03b      	beq.n	2bad4 <pend+0xb4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ba5c:	2b00      	cmp	r3, #0
   2ba5e:	d039      	beq.n	2bad4 <pend+0xb4>
	if (thread_1->base.prio < thread_2->base.prio) {
   2ba60:	f994 200e 	ldrsb.w	r2, [r4, #14]
   2ba64:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2ba68:	4291      	cmp	r1, r2
   2ba6a:	dd2d      	ble.n	2bac8 <pend+0xa8>
	node->prev = successor->prev;
   2ba6c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2ba6e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2ba72:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2ba74:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   2ba76:	1c73      	adds	r3, r6, #1
   2ba78:	d033      	beq.n	2bae2 <pend+0xc2>
		__ASSERT(timeout >= 0,
   2ba7a:	2e00      	cmp	r6, #0
   2ba7c:	da0e      	bge.n	2ba9c <pend+0x7c>
   2ba7e:	491d      	ldr	r1, [pc, #116]	; (2baf4 <pend+0xd4>)
   2ba80:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   2ba84:	4a1a      	ldr	r2, [pc, #104]	; (2baf0 <pend+0xd0>)
   2ba86:	4819      	ldr	r0, [pc, #100]	; (2baec <pend+0xcc>)
   2ba88:	f003 f9a5 	bl	2edd6 <printk>
   2ba8c:	481a      	ldr	r0, [pc, #104]	; (2baf8 <pend+0xd8>)
   2ba8e:	f003 f9a2 	bl	2edd6 <printk>
   2ba92:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   2ba96:	4816      	ldr	r0, [pc, #88]	; (2baf0 <pend+0xd0>)
   2ba98:	f003 f9e3 	bl	2ee62 <assert_post_action>
   2ba9c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2baa0:	f240 30e7 	movw	r0, #999	; 0x3e7
   2baa4:	2100      	movs	r1, #0
   2baa6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   2baaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2baae:	fbc5 0106 	smlal	r0, r1, r5, r6
   2bab2:	2300      	movs	r3, #0
   2bab4:	f7f0 fe80 	bl	1c7b8 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2bab8:	4910      	ldr	r1, [pc, #64]	; (2bafc <pend+0xdc>)
   2baba:	1c42      	adds	r2, r0, #1
   2babc:	f104 0018 	add.w	r0, r4, #24
}
   2bac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2bac4:	f000 be5e 	b.w	2c784 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   2bac8:	6869      	ldr	r1, [r5, #4]
   2baca:	428b      	cmp	r3, r1
   2bacc:	d002      	beq.n	2bad4 <pend+0xb4>
   2bace:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2bad0:	2b00      	cmp	r3, #0
   2bad2:	d1c7      	bne.n	2ba64 <pend+0x44>
	node->prev = list->tail;
   2bad4:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2bad6:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2bad8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2bada:	686b      	ldr	r3, [r5, #4]
   2badc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2bade:	606c      	str	r4, [r5, #4]
   2bae0:	e7c9      	b.n	2ba76 <pend+0x56>
}
   2bae2:	bd70      	pop	{r4, r5, r6, pc}
   2bae4:	20020a3c 	.word	0x20020a3c
   2bae8:	000330b9 	.word	0x000330b9
   2baec:	000316d1 	.word	0x000316d1
   2baf0:	00033061 	.word	0x00033061
   2baf4:	0003302b 	.word	0x0003302b
   2baf8:	00033038 	.word	0x00033038
   2bafc:	0002b541 	.word	0x0002b541

0002bb00 <z_pend_curr_irqlock>:
{
   2bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bb02:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   2bb04:	4d22      	ldr	r5, [pc, #136]	; (2bb90 <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   2bb06:	4c23      	ldr	r4, [pc, #140]	; (2bb94 <z_pend_curr_irqlock+0x94>)
	pend(_current, wait_q, timeout);
   2bb08:	68a8      	ldr	r0, [r5, #8]
   2bb0a:	f7ff ff89 	bl	2ba20 <pend>
	pending_current = _current;
   2bb0e:	68ab      	ldr	r3, [r5, #8]
   2bb10:	4630      	mov	r0, r6
   2bb12:	6023      	str	r3, [r4, #0]
   2bb14:	f7f3 fa06 	bl	1ef24 <arch_swap>
   2bb18:	4606      	mov	r6, r0
	__asm__ volatile(
   2bb1a:	f04f 0320 	mov.w	r3, #32
   2bb1e:	f3ef 8711 	mrs	r7, BASEPRI
   2bb22:	f383 8811 	msr	BASEPRI, r3
   2bb26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bb2a:	481b      	ldr	r0, [pc, #108]	; (2bb98 <z_pend_curr_irqlock+0x98>)
   2bb2c:	f000 fc1c 	bl	2c368 <z_spin_lock_valid>
   2bb30:	b968      	cbnz	r0, 2bb4e <z_pend_curr_irqlock+0x4e>
   2bb32:	234a      	movs	r3, #74	; 0x4a
   2bb34:	4a19      	ldr	r2, [pc, #100]	; (2bb9c <z_pend_curr_irqlock+0x9c>)
   2bb36:	491a      	ldr	r1, [pc, #104]	; (2bba0 <z_pend_curr_irqlock+0xa0>)
   2bb38:	481a      	ldr	r0, [pc, #104]	; (2bba4 <z_pend_curr_irqlock+0xa4>)
   2bb3a:	f003 f94c 	bl	2edd6 <printk>
   2bb3e:	4916      	ldr	r1, [pc, #88]	; (2bb98 <z_pend_curr_irqlock+0x98>)
   2bb40:	4819      	ldr	r0, [pc, #100]	; (2bba8 <z_pend_curr_irqlock+0xa8>)
   2bb42:	f003 f948 	bl	2edd6 <printk>
   2bb46:	214a      	movs	r1, #74	; 0x4a
   2bb48:	4814      	ldr	r0, [pc, #80]	; (2bb9c <z_pend_curr_irqlock+0x9c>)
   2bb4a:	f003 f98a 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bb4e:	4812      	ldr	r0, [pc, #72]	; (2bb98 <z_pend_curr_irqlock+0x98>)
   2bb50:	f000 fc28 	bl	2c3a4 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   2bb54:	6823      	ldr	r3, [r4, #0]
   2bb56:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bb58:	480f      	ldr	r0, [pc, #60]	; (2bb98 <z_pend_curr_irqlock+0x98>)
   2bb5a:	429a      	cmp	r2, r3
			pending_current = NULL;
   2bb5c:	bf04      	itt	eq
   2bb5e:	2300      	moveq	r3, #0
   2bb60:	6023      	streq	r3, [r4, #0]
   2bb62:	f000 fc0f 	bl	2c384 <z_spin_unlock_valid>
   2bb66:	b968      	cbnz	r0, 2bb84 <z_pend_curr_irqlock+0x84>
   2bb68:	235d      	movs	r3, #93	; 0x5d
   2bb6a:	4a0c      	ldr	r2, [pc, #48]	; (2bb9c <z_pend_curr_irqlock+0x9c>)
   2bb6c:	490f      	ldr	r1, [pc, #60]	; (2bbac <z_pend_curr_irqlock+0xac>)
   2bb6e:	480d      	ldr	r0, [pc, #52]	; (2bba4 <z_pend_curr_irqlock+0xa4>)
   2bb70:	f003 f931 	bl	2edd6 <printk>
   2bb74:	4908      	ldr	r1, [pc, #32]	; (2bb98 <z_pend_curr_irqlock+0x98>)
   2bb76:	480e      	ldr	r0, [pc, #56]	; (2bbb0 <z_pend_curr_irqlock+0xb0>)
   2bb78:	f003 f92d 	bl	2edd6 <printk>
   2bb7c:	215d      	movs	r1, #93	; 0x5d
   2bb7e:	4807      	ldr	r0, [pc, #28]	; (2bb9c <z_pend_curr_irqlock+0x9c>)
   2bb80:	f003 f96f 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2bb84:	f387 8811 	msr	BASEPRI, r7
   2bb88:	f3bf 8f6f 	isb	sy
}
   2bb8c:	4630      	mov	r0, r6
   2bb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bb90:	200213cc 	.word	0x200213cc
   2bb94:	20021400 	.word	0x20021400
   2bb98:	20021404 	.word	0x20021404
   2bb9c:	00031a38 	.word	0x00031a38
   2bba0:	00031a5e 	.word	0x00031a5e
   2bba4:	000316d1 	.word	0x000316d1
   2bba8:	00031a73 	.word	0x00031a73
   2bbac:	00031a8b 	.word	0x00031a8b
   2bbb0:	00031aa2 	.word	0x00031aa2

0002bbb4 <z_pend_curr>:
{
   2bbb4:	b538      	push	{r3, r4, r5, lr}
   2bbb6:	4604      	mov	r4, r0
   2bbb8:	460d      	mov	r5, r1
   2bbba:	4611      	mov	r1, r2
	pending_current = _current;
   2bbbc:	4a0e      	ldr	r2, [pc, #56]	; (2bbf8 <z_pend_curr+0x44>)
   2bbbe:	6890      	ldr	r0, [r2, #8]
   2bbc0:	4a0e      	ldr	r2, [pc, #56]	; (2bbfc <z_pend_curr+0x48>)
   2bbc2:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   2bbc4:	461a      	mov	r2, r3
   2bbc6:	f7ff ff2b 	bl	2ba20 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bbca:	4620      	mov	r0, r4
   2bbcc:	f000 fbda 	bl	2c384 <z_spin_unlock_valid>
   2bbd0:	b968      	cbnz	r0, 2bbee <z_pend_curr+0x3a>
   2bbd2:	2374      	movs	r3, #116	; 0x74
   2bbd4:	4a0a      	ldr	r2, [pc, #40]	; (2bc00 <z_pend_curr+0x4c>)
   2bbd6:	490b      	ldr	r1, [pc, #44]	; (2bc04 <z_pend_curr+0x50>)
   2bbd8:	480b      	ldr	r0, [pc, #44]	; (2bc08 <z_pend_curr+0x54>)
   2bbda:	f003 f8fc 	bl	2edd6 <printk>
   2bbde:	4621      	mov	r1, r4
   2bbe0:	480a      	ldr	r0, [pc, #40]	; (2bc0c <z_pend_curr+0x58>)
   2bbe2:	f003 f8f8 	bl	2edd6 <printk>
   2bbe6:	2174      	movs	r1, #116	; 0x74
   2bbe8:	4805      	ldr	r0, [pc, #20]	; (2bc00 <z_pend_curr+0x4c>)
   2bbea:	f003 f93a 	bl	2ee62 <assert_post_action>
   2bbee:	4628      	mov	r0, r5
}
   2bbf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bbf4:	f7f3 b996 	b.w	1ef24 <arch_swap>
   2bbf8:	200213cc 	.word	0x200213cc
   2bbfc:	20021400 	.word	0x20021400
   2bc00:	00031a38 	.word	0x00031a38
   2bc04:	00031a8b 	.word	0x00031a8b
   2bc08:	000316d1 	.word	0x000316d1
   2bc0c:	00031aa2 	.word	0x00031aa2

0002bc10 <z_set_prio>:
{
   2bc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc12:	4604      	mov	r4, r0
   2bc14:	460d      	mov	r5, r1
	__asm__ volatile(
   2bc16:	f04f 0320 	mov.w	r3, #32
   2bc1a:	f3ef 8611 	mrs	r6, BASEPRI
   2bc1e:	f383 8811 	msr	BASEPRI, r3
   2bc22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bc26:	4835      	ldr	r0, [pc, #212]	; (2bcfc <z_set_prio+0xec>)
   2bc28:	f000 fb9e 	bl	2c368 <z_spin_lock_valid>
   2bc2c:	b968      	cbnz	r0, 2bc4a <z_set_prio+0x3a>
   2bc2e:	234a      	movs	r3, #74	; 0x4a
   2bc30:	4a33      	ldr	r2, [pc, #204]	; (2bd00 <z_set_prio+0xf0>)
   2bc32:	4934      	ldr	r1, [pc, #208]	; (2bd04 <z_set_prio+0xf4>)
   2bc34:	4834      	ldr	r0, [pc, #208]	; (2bd08 <z_set_prio+0xf8>)
   2bc36:	f003 f8ce 	bl	2edd6 <printk>
   2bc3a:	4930      	ldr	r1, [pc, #192]	; (2bcfc <z_set_prio+0xec>)
   2bc3c:	4833      	ldr	r0, [pc, #204]	; (2bd0c <z_set_prio+0xfc>)
   2bc3e:	f003 f8ca 	bl	2edd6 <printk>
   2bc42:	214a      	movs	r1, #74	; 0x4a
   2bc44:	482e      	ldr	r0, [pc, #184]	; (2bd00 <z_set_prio+0xf0>)
   2bc46:	f003 f90c 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bc4a:	482c      	ldr	r0, [pc, #176]	; (2bcfc <z_set_prio+0xec>)
   2bc4c:	f000 fbaa 	bl	2c3a4 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   2bc50:	4620      	mov	r0, r4
   2bc52:	f003 ffe6 	bl	2fc22 <z_is_thread_ready>
		if (need_sched) {
   2bc56:	b26d      	sxtb	r5, r5
   2bc58:	4607      	mov	r7, r0
   2bc5a:	2800      	cmp	r0, #0
   2bc5c:	d04c      	beq.n	2bcf8 <z_set_prio+0xe8>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   2bc5e:	4621      	mov	r1, r4
   2bc60:	482b      	ldr	r0, [pc, #172]	; (2bd10 <z_set_prio+0x100>)
   2bc62:	f7ff fab7 	bl	2b1d4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2bc66:	4b2b      	ldr	r3, [pc, #172]	; (2bd14 <z_set_prio+0x104>)
				thread->base.prio = prio;
   2bc68:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2bc6a:	429c      	cmp	r4, r3
   2bc6c:	d10b      	bne.n	2bc86 <z_set_prio+0x76>
   2bc6e:	492a      	ldr	r1, [pc, #168]	; (2bd18 <z_set_prio+0x108>)
   2bc70:	4825      	ldr	r0, [pc, #148]	; (2bd08 <z_set_prio+0xf8>)
   2bc72:	f240 3302 	movw	r3, #770	; 0x302
   2bc76:	4a29      	ldr	r2, [pc, #164]	; (2bd1c <z_set_prio+0x10c>)
   2bc78:	f003 f8ad 	bl	2edd6 <printk>
   2bc7c:	f240 3102 	movw	r1, #770	; 0x302
   2bc80:	4826      	ldr	r0, [pc, #152]	; (2bd1c <z_set_prio+0x10c>)
   2bc82:	f003 f8ee 	bl	2ee62 <assert_post_action>
	return list->head == list;
   2bc86:	4a26      	ldr	r2, [pc, #152]	; (2bd20 <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bc88:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2bc8c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2bc90:	428b      	cmp	r3, r1
   2bc92:	d02b      	beq.n	2bcec <z_set_prio+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2bc94:	b353      	cbz	r3, 2bcec <z_set_prio+0xdc>
	if (thread_1->base.prio < thread_2->base.prio) {
   2bc96:	f994 500e 	ldrsb.w	r5, [r4, #14]
   2bc9a:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   2bc9e:	45ac      	cmp	ip, r5
   2bca0:	dd1f      	ble.n	2bce2 <z_set_prio+0xd2>
	node->prev = successor->prev;
   2bca2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2bca4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2bca8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2bcaa:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2bcac:	2001      	movs	r0, #1
   2bcae:	f7ff fb15 	bl	2b2dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bcb2:	4812      	ldr	r0, [pc, #72]	; (2bcfc <z_set_prio+0xec>)
   2bcb4:	f000 fb66 	bl	2c384 <z_spin_unlock_valid>
   2bcb8:	b968      	cbnz	r0, 2bcd6 <z_set_prio+0xc6>
   2bcba:	235d      	movs	r3, #93	; 0x5d
   2bcbc:	4a10      	ldr	r2, [pc, #64]	; (2bd00 <z_set_prio+0xf0>)
   2bcbe:	4919      	ldr	r1, [pc, #100]	; (2bd24 <z_set_prio+0x114>)
   2bcc0:	4811      	ldr	r0, [pc, #68]	; (2bd08 <z_set_prio+0xf8>)
   2bcc2:	f003 f888 	bl	2edd6 <printk>
   2bcc6:	490d      	ldr	r1, [pc, #52]	; (2bcfc <z_set_prio+0xec>)
   2bcc8:	4817      	ldr	r0, [pc, #92]	; (2bd28 <z_set_prio+0x118>)
   2bcca:	f003 f884 	bl	2edd6 <printk>
   2bcce:	215d      	movs	r1, #93	; 0x5d
   2bcd0:	480b      	ldr	r0, [pc, #44]	; (2bd00 <z_set_prio+0xf0>)
   2bcd2:	f003 f8c6 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2bcd6:	f386 8811 	msr	BASEPRI, r6
   2bcda:	f3bf 8f6f 	isb	sy
}
   2bcde:	4638      	mov	r0, r7
   2bce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2bce2:	4298      	cmp	r0, r3
   2bce4:	d002      	beq.n	2bcec <z_set_prio+0xdc>
   2bce6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2bce8:	2b00      	cmp	r3, #0
   2bcea:	d1d6      	bne.n	2bc9a <z_set_prio+0x8a>
	node->prev = list->tail;
   2bcec:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2bcf0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2bcf2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2bcf4:	62d4      	str	r4, [r2, #44]	; 0x2c
   2bcf6:	e7d9      	b.n	2bcac <z_set_prio+0x9c>
			thread->base.prio = prio;
   2bcf8:	73a5      	strb	r5, [r4, #14]
   2bcfa:	e7da      	b.n	2bcb2 <z_set_prio+0xa2>
   2bcfc:	20021404 	.word	0x20021404
   2bd00:	00031a38 	.word	0x00031a38
   2bd04:	00031a5e 	.word	0x00031a5e
   2bd08:	000316d1 	.word	0x000316d1
   2bd0c:	00031a73 	.word	0x00031a73
   2bd10:	200213f4 	.word	0x200213f4
   2bd14:	20020a3c 	.word	0x20020a3c
   2bd18:	000330b9 	.word	0x000330b9
   2bd1c:	00033061 	.word	0x00033061
   2bd20:	200213cc 	.word	0x200213cc
   2bd24:	00031a8b 	.word	0x00031a8b
   2bd28:	00031aa2 	.word	0x00031aa2

0002bd2c <z_unpend_first_thread>:
{
   2bd2c:	b538      	push	{r3, r4, r5, lr}
   2bd2e:	4604      	mov	r4, r0
	__asm__ volatile(
   2bd30:	f04f 0320 	mov.w	r3, #32
   2bd34:	f3ef 8511 	mrs	r5, BASEPRI
   2bd38:	f383 8811 	msr	BASEPRI, r3
   2bd3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bd40:	483b      	ldr	r0, [pc, #236]	; (2be30 <z_unpend_first_thread+0x104>)
   2bd42:	f000 fb11 	bl	2c368 <z_spin_lock_valid>
   2bd46:	b968      	cbnz	r0, 2bd64 <z_unpend_first_thread+0x38>
   2bd48:	234a      	movs	r3, #74	; 0x4a
   2bd4a:	4a3a      	ldr	r2, [pc, #232]	; (2be34 <z_unpend_first_thread+0x108>)
   2bd4c:	493a      	ldr	r1, [pc, #232]	; (2be38 <z_unpend_first_thread+0x10c>)
   2bd4e:	483b      	ldr	r0, [pc, #236]	; (2be3c <z_unpend_first_thread+0x110>)
   2bd50:	f003 f841 	bl	2edd6 <printk>
   2bd54:	4936      	ldr	r1, [pc, #216]	; (2be30 <z_unpend_first_thread+0x104>)
   2bd56:	483a      	ldr	r0, [pc, #232]	; (2be40 <z_unpend_first_thread+0x114>)
   2bd58:	f003 f83d 	bl	2edd6 <printk>
   2bd5c:	214a      	movs	r1, #74	; 0x4a
   2bd5e:	4835      	ldr	r0, [pc, #212]	; (2be34 <z_unpend_first_thread+0x108>)
   2bd60:	f003 f87f 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bd64:	4832      	ldr	r0, [pc, #200]	; (2be30 <z_unpend_first_thread+0x104>)
   2bd66:	f000 fb1d 	bl	2c3a4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   2bd6a:	4620      	mov	r0, r4
   2bd6c:	f003 ff81 	bl	2fc72 <z_priq_dumb_best>
   2bd70:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bd72:	482f      	ldr	r0, [pc, #188]	; (2be30 <z_unpend_first_thread+0x104>)
   2bd74:	f000 fb06 	bl	2c384 <z_spin_unlock_valid>
   2bd78:	b968      	cbnz	r0, 2bd96 <z_unpend_first_thread+0x6a>
   2bd7a:	235d      	movs	r3, #93	; 0x5d
   2bd7c:	4a2d      	ldr	r2, [pc, #180]	; (2be34 <z_unpend_first_thread+0x108>)
   2bd7e:	4931      	ldr	r1, [pc, #196]	; (2be44 <z_unpend_first_thread+0x118>)
   2bd80:	482e      	ldr	r0, [pc, #184]	; (2be3c <z_unpend_first_thread+0x110>)
   2bd82:	f003 f828 	bl	2edd6 <printk>
   2bd86:	492a      	ldr	r1, [pc, #168]	; (2be30 <z_unpend_first_thread+0x104>)
   2bd88:	482f      	ldr	r0, [pc, #188]	; (2be48 <z_unpend_first_thread+0x11c>)
   2bd8a:	f003 f824 	bl	2edd6 <printk>
   2bd8e:	215d      	movs	r1, #93	; 0x5d
   2bd90:	4828      	ldr	r0, [pc, #160]	; (2be34 <z_unpend_first_thread+0x108>)
   2bd92:	f003 f866 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2bd96:	f385 8811 	msr	BASEPRI, r5
   2bd9a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2bd9e:	2c00      	cmp	r4, #0
   2bda0:	d043      	beq.n	2be2a <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   2bda2:	f04f 0320 	mov.w	r3, #32
   2bda6:	f3ef 8511 	mrs	r5, BASEPRI
   2bdaa:	f383 8811 	msr	BASEPRI, r3
   2bdae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bdb2:	481f      	ldr	r0, [pc, #124]	; (2be30 <z_unpend_first_thread+0x104>)
   2bdb4:	f000 fad8 	bl	2c368 <z_spin_lock_valid>
   2bdb8:	b968      	cbnz	r0, 2bdd6 <z_unpend_first_thread+0xaa>
   2bdba:	234a      	movs	r3, #74	; 0x4a
   2bdbc:	4a1d      	ldr	r2, [pc, #116]	; (2be34 <z_unpend_first_thread+0x108>)
   2bdbe:	491e      	ldr	r1, [pc, #120]	; (2be38 <z_unpend_first_thread+0x10c>)
   2bdc0:	481e      	ldr	r0, [pc, #120]	; (2be3c <z_unpend_first_thread+0x110>)
   2bdc2:	f003 f808 	bl	2edd6 <printk>
   2bdc6:	491a      	ldr	r1, [pc, #104]	; (2be30 <z_unpend_first_thread+0x104>)
   2bdc8:	481d      	ldr	r0, [pc, #116]	; (2be40 <z_unpend_first_thread+0x114>)
   2bdca:	f003 f804 	bl	2edd6 <printk>
   2bdce:	214a      	movs	r1, #74	; 0x4a
   2bdd0:	4818      	ldr	r0, [pc, #96]	; (2be34 <z_unpend_first_thread+0x108>)
   2bdd2:	f003 f846 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bdd6:	4816      	ldr	r0, [pc, #88]	; (2be30 <z_unpend_first_thread+0x104>)
   2bdd8:	f000 fae4 	bl	2c3a4 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2bddc:	f104 0008 	add.w	r0, r4, #8
   2bde0:	f7ff f8b6 	bl	2af50 <pended_on.isra.17>
   2bde4:	4621      	mov	r1, r4
   2bde6:	f7ff f9f5 	bl	2b1d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2bdea:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bdec:	4810      	ldr	r0, [pc, #64]	; (2be30 <z_unpend_first_thread+0x104>)
   2bdee:	f023 0302 	bic.w	r3, r3, #2
   2bdf2:	7363      	strb	r3, [r4, #13]
   2bdf4:	f000 fac6 	bl	2c384 <z_spin_unlock_valid>
   2bdf8:	b968      	cbnz	r0, 2be16 <z_unpend_first_thread+0xea>
   2bdfa:	235d      	movs	r3, #93	; 0x5d
   2bdfc:	4a0d      	ldr	r2, [pc, #52]	; (2be34 <z_unpend_first_thread+0x108>)
   2bdfe:	4911      	ldr	r1, [pc, #68]	; (2be44 <z_unpend_first_thread+0x118>)
   2be00:	480e      	ldr	r0, [pc, #56]	; (2be3c <z_unpend_first_thread+0x110>)
   2be02:	f002 ffe8 	bl	2edd6 <printk>
   2be06:	490a      	ldr	r1, [pc, #40]	; (2be30 <z_unpend_first_thread+0x104>)
   2be08:	480f      	ldr	r0, [pc, #60]	; (2be48 <z_unpend_first_thread+0x11c>)
   2be0a:	f002 ffe4 	bl	2edd6 <printk>
   2be0e:	215d      	movs	r1, #93	; 0x5d
   2be10:	4808      	ldr	r0, [pc, #32]	; (2be34 <z_unpend_first_thread+0x108>)
   2be12:	f003 f826 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2be16:	f385 8811 	msr	BASEPRI, r5
   2be1a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2be1e:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   2be20:	f104 0018 	add.w	r0, r4, #24
   2be24:	60a3      	str	r3, [r4, #8]
   2be26:	f000 fd53 	bl	2c8d0 <z_abort_timeout>
}
   2be2a:	4620      	mov	r0, r4
   2be2c:	bd38      	pop	{r3, r4, r5, pc}
   2be2e:	bf00      	nop
   2be30:	20021404 	.word	0x20021404
   2be34:	00031a38 	.word	0x00031a38
   2be38:	00031a5e 	.word	0x00031a5e
   2be3c:	000316d1 	.word	0x000316d1
   2be40:	00031a73 	.word	0x00031a73
   2be44:	00031a8b 	.word	0x00031a8b
   2be48:	00031aa2 	.word	0x00031aa2

0002be4c <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2be4c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2be4e:	4b04      	ldr	r3, [pc, #16]	; (2be60 <z_sched_init+0x14>)
   2be50:	4608      	mov	r0, r1
   2be52:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2be56:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2be5a:	f7ff b8a7 	b.w	2afac <k_sched_time_slice_set>
   2be5e:	bf00      	nop
   2be60:	200213cc 	.word	0x200213cc

0002be64 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2be66:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2be6a:	b173      	cbz	r3, 2be8a <z_impl_k_yield+0x26>
   2be6c:	4945      	ldr	r1, [pc, #276]	; (2bf84 <z_impl_k_yield+0x120>)
   2be6e:	f240 430d 	movw	r3, #1037	; 0x40d
   2be72:	4a45      	ldr	r2, [pc, #276]	; (2bf88 <z_impl_k_yield+0x124>)
   2be74:	4845      	ldr	r0, [pc, #276]	; (2bf8c <z_impl_k_yield+0x128>)
   2be76:	f002 ffae 	bl	2edd6 <printk>
   2be7a:	4845      	ldr	r0, [pc, #276]	; (2bf90 <z_impl_k_yield+0x12c>)
   2be7c:	f002 ffab 	bl	2edd6 <printk>
   2be80:	f240 410d 	movw	r1, #1037	; 0x40d
   2be84:	4840      	ldr	r0, [pc, #256]	; (2bf88 <z_impl_k_yield+0x124>)
   2be86:	f002 ffec 	bl	2ee62 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   2be8a:	4c42      	ldr	r4, [pc, #264]	; (2bf94 <z_impl_k_yield+0x130>)
   2be8c:	4e42      	ldr	r6, [pc, #264]	; (2bf98 <z_impl_k_yield+0x134>)
   2be8e:	68a2      	ldr	r2, [r4, #8]
   2be90:	42b2      	cmp	r2, r6
   2be92:	d05f      	beq.n	2bf54 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   2be94:	f04f 0320 	mov.w	r3, #32
   2be98:	f3ef 8711 	mrs	r7, BASEPRI
   2be9c:	f383 8811 	msr	BASEPRI, r3
   2bea0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bea4:	483d      	ldr	r0, [pc, #244]	; (2bf9c <z_impl_k_yield+0x138>)
   2bea6:	f000 fa5f 	bl	2c368 <z_spin_lock_valid>
   2beaa:	b968      	cbnz	r0, 2bec8 <z_impl_k_yield+0x64>
   2beac:	234a      	movs	r3, #74	; 0x4a
   2beae:	4a3c      	ldr	r2, [pc, #240]	; (2bfa0 <z_impl_k_yield+0x13c>)
   2beb0:	493c      	ldr	r1, [pc, #240]	; (2bfa4 <z_impl_k_yield+0x140>)
   2beb2:	4836      	ldr	r0, [pc, #216]	; (2bf8c <z_impl_k_yield+0x128>)
   2beb4:	f002 ff8f 	bl	2edd6 <printk>
   2beb8:	4938      	ldr	r1, [pc, #224]	; (2bf9c <z_impl_k_yield+0x138>)
   2beba:	483b      	ldr	r0, [pc, #236]	; (2bfa8 <z_impl_k_yield+0x144>)
   2bebc:	f002 ff8b 	bl	2edd6 <printk>
   2bec0:	214a      	movs	r1, #74	; 0x4a
   2bec2:	4837      	ldr	r0, [pc, #220]	; (2bfa0 <z_impl_k_yield+0x13c>)
   2bec4:	f002 ffcd 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bec8:	4834      	ldr	r0, [pc, #208]	; (2bf9c <z_impl_k_yield+0x138>)
   2beca:	f000 fa6b 	bl	2c3a4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   2bece:	68a1      	ldr	r1, [r4, #8]
   2bed0:	4836      	ldr	r0, [pc, #216]	; (2bfac <z_impl_k_yield+0x148>)
   2bed2:	f7ff f97f 	bl	2b1d4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2bed6:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2bed8:	42b5      	cmp	r5, r6
   2beda:	d10b      	bne.n	2bef4 <z_impl_k_yield+0x90>
   2bedc:	4934      	ldr	r1, [pc, #208]	; (2bfb0 <z_impl_k_yield+0x14c>)
   2bede:	482b      	ldr	r0, [pc, #172]	; (2bf8c <z_impl_k_yield+0x128>)
   2bee0:	f240 3302 	movw	r3, #770	; 0x302
   2bee4:	4a28      	ldr	r2, [pc, #160]	; (2bf88 <z_impl_k_yield+0x124>)
   2bee6:	f002 ff76 	bl	2edd6 <printk>
   2beea:	f240 3102 	movw	r1, #770	; 0x302
   2beee:	4826      	ldr	r0, [pc, #152]	; (2bf88 <z_impl_k_yield+0x124>)
   2bef0:	f002 ffb7 	bl	2ee62 <assert_post_action>
	return list->head == list;
   2bef4:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bef8:	4a2c      	ldr	r2, [pc, #176]	; (2bfac <z_impl_k_yield+0x148>)
   2befa:	4293      	cmp	r3, r2
   2befc:	d03b      	beq.n	2bf76 <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2befe:	2b00      	cmp	r3, #0
   2bf00:	d039      	beq.n	2bf76 <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   2bf02:	f995 000e 	ldrsb.w	r0, [r5, #14]
   2bf06:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2bf0a:	4286      	cmp	r6, r0
   2bf0c:	dd2e      	ble.n	2bf6c <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   2bf0e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2bf10:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   2bf14:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2bf16:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   2bf18:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   2bf1a:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   2bf1c:	7b53      	ldrb	r3, [r2, #13]
   2bf1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2bf22:	7353      	strb	r3, [r2, #13]
   2bf24:	f7ff f9da 	bl	2b2dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bf28:	481c      	ldr	r0, [pc, #112]	; (2bf9c <z_impl_k_yield+0x138>)
   2bf2a:	f000 fa2b 	bl	2c384 <z_spin_unlock_valid>
   2bf2e:	b968      	cbnz	r0, 2bf4c <z_impl_k_yield+0xe8>
   2bf30:	235d      	movs	r3, #93	; 0x5d
   2bf32:	4a1b      	ldr	r2, [pc, #108]	; (2bfa0 <z_impl_k_yield+0x13c>)
   2bf34:	491f      	ldr	r1, [pc, #124]	; (2bfb4 <z_impl_k_yield+0x150>)
   2bf36:	4815      	ldr	r0, [pc, #84]	; (2bf8c <z_impl_k_yield+0x128>)
   2bf38:	f002 ff4d 	bl	2edd6 <printk>
   2bf3c:	4917      	ldr	r1, [pc, #92]	; (2bf9c <z_impl_k_yield+0x138>)
   2bf3e:	481e      	ldr	r0, [pc, #120]	; (2bfb8 <z_impl_k_yield+0x154>)
   2bf40:	f002 ff49 	bl	2edd6 <printk>
   2bf44:	215d      	movs	r1, #93	; 0x5d
   2bf46:	4816      	ldr	r0, [pc, #88]	; (2bfa0 <z_impl_k_yield+0x13c>)
   2bf48:	f002 ff8b 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2bf4c:	f387 8811 	msr	BASEPRI, r7
   2bf50:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2bf54:	f04f 0320 	mov.w	r3, #32
   2bf58:	f3ef 8011 	mrs	r0, BASEPRI
   2bf5c:	f383 8811 	msr	BASEPRI, r3
   2bf60:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   2bf64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2bf68:	f7f2 bfdc 	b.w	1ef24 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2bf6c:	4299      	cmp	r1, r3
   2bf6e:	d002      	beq.n	2bf76 <z_impl_k_yield+0x112>
   2bf70:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2bf72:	2b00      	cmp	r3, #0
   2bf74:	d1c7      	bne.n	2bf06 <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   2bf76:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   2bf7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2bf7c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2bf7e:	62e5      	str	r5, [r4, #44]	; 0x2c
   2bf80:	e7ca      	b.n	2bf18 <z_impl_k_yield+0xb4>
   2bf82:	bf00      	nop
   2bf84:	00032fc9 	.word	0x00032fc9
   2bf88:	00033061 	.word	0x00033061
   2bf8c:	000316d1 	.word	0x000316d1
   2bf90:	000323ee 	.word	0x000323ee
   2bf94:	200213cc 	.word	0x200213cc
   2bf98:	20020a3c 	.word	0x20020a3c
   2bf9c:	20021404 	.word	0x20021404
   2bfa0:	00031a38 	.word	0x00031a38
   2bfa4:	00031a5e 	.word	0x00031a5e
   2bfa8:	00031a73 	.word	0x00031a73
   2bfac:	200213f4 	.word	0x200213f4
   2bfb0:	000330b9 	.word	0x000330b9
   2bfb4:	00031a8b 	.word	0x00031a8b
   2bfb8:	00031aa2 	.word	0x00031aa2

0002bfbc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   2bfbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bfbe:	4604      	mov	r4, r0
   2bfc0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   2bfc4:	b173      	cbz	r3, 2bfe4 <z_tick_sleep+0x28>
   2bfc6:	493b      	ldr	r1, [pc, #236]	; (2c0b4 <z_tick_sleep+0xf8>)
   2bfc8:	f240 432b 	movw	r3, #1067	; 0x42b
   2bfcc:	4a3a      	ldr	r2, [pc, #232]	; (2c0b8 <z_tick_sleep+0xfc>)
   2bfce:	483b      	ldr	r0, [pc, #236]	; (2c0bc <z_tick_sleep+0x100>)
   2bfd0:	f002 ff01 	bl	2edd6 <printk>
   2bfd4:	483a      	ldr	r0, [pc, #232]	; (2c0c0 <z_tick_sleep+0x104>)
   2bfd6:	f002 fefe 	bl	2edd6 <printk>
   2bfda:	f240 412b 	movw	r1, #1067	; 0x42b
   2bfde:	4836      	ldr	r0, [pc, #216]	; (2c0b8 <z_tick_sleep+0xfc>)
   2bfe0:	f002 ff3f 	bl	2ee62 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2bfe4:	b924      	cbnz	r4, 2bff0 <z_tick_sleep+0x34>
	z_impl_k_yield();
   2bfe6:	f7ff ff3d 	bl	2be64 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   2bfea:	4620      	mov	r0, r4
   2bfec:	b003      	add	sp, #12
   2bfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   2bff0:	f003 fe87 	bl	2fd02 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   2bff4:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   2bff6:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   2bff8:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   2bffa:	9301      	str	r3, [sp, #4]
   2bffc:	f04f 0320 	mov.w	r3, #32
   2c000:	f3ef 8711 	mrs	r7, BASEPRI
   2c004:	f383 8811 	msr	BASEPRI, r3
   2c008:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c00c:	a801      	add	r0, sp, #4
   2c00e:	f000 f9ab 	bl	2c368 <z_spin_lock_valid>
   2c012:	b968      	cbnz	r0, 2c030 <z_tick_sleep+0x74>
   2c014:	234a      	movs	r3, #74	; 0x4a
   2c016:	4a2b      	ldr	r2, [pc, #172]	; (2c0c4 <z_tick_sleep+0x108>)
   2c018:	492b      	ldr	r1, [pc, #172]	; (2c0c8 <z_tick_sleep+0x10c>)
   2c01a:	4828      	ldr	r0, [pc, #160]	; (2c0bc <z_tick_sleep+0x100>)
   2c01c:	f002 fedb 	bl	2edd6 <printk>
   2c020:	a901      	add	r1, sp, #4
   2c022:	482a      	ldr	r0, [pc, #168]	; (2c0cc <z_tick_sleep+0x110>)
   2c024:	f002 fed7 	bl	2edd6 <printk>
   2c028:	214a      	movs	r1, #74	; 0x4a
   2c02a:	4826      	ldr	r0, [pc, #152]	; (2c0c4 <z_tick_sleep+0x108>)
   2c02c:	f002 ff19 	bl	2ee62 <assert_post_action>
	pending_current = _current;
   2c030:	4d27      	ldr	r5, [pc, #156]	; (2c0d0 <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   2c032:	a801      	add	r0, sp, #4
   2c034:	f000 f9b6 	bl	2c3a4 <z_spin_lock_set_owner>
   2c038:	4b26      	ldr	r3, [pc, #152]	; (2c0d4 <z_tick_sleep+0x118>)
   2c03a:	68a8      	ldr	r0, [r5, #8]
   2c03c:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   2c03e:	f7ff fc93 	bl	2b968 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2c042:	68a8      	ldr	r0, [r5, #8]
   2c044:	4632      	mov	r2, r6
   2c046:	3018      	adds	r0, #24
   2c048:	4923      	ldr	r1, [pc, #140]	; (2c0d8 <z_tick_sleep+0x11c>)
   2c04a:	f000 fb9b 	bl	2c784 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2c04e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c050:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2c052:	7b53      	ldrb	r3, [r2, #13]
   2c054:	f043 0310 	orr.w	r3, r3, #16
   2c058:	7353      	strb	r3, [r2, #13]
   2c05a:	f000 f993 	bl	2c384 <z_spin_unlock_valid>
   2c05e:	b968      	cbnz	r0, 2c07c <z_tick_sleep+0xc0>
   2c060:	2374      	movs	r3, #116	; 0x74
   2c062:	4a18      	ldr	r2, [pc, #96]	; (2c0c4 <z_tick_sleep+0x108>)
   2c064:	491d      	ldr	r1, [pc, #116]	; (2c0dc <z_tick_sleep+0x120>)
   2c066:	4815      	ldr	r0, [pc, #84]	; (2c0bc <z_tick_sleep+0x100>)
   2c068:	f002 feb5 	bl	2edd6 <printk>
   2c06c:	a901      	add	r1, sp, #4
   2c06e:	481c      	ldr	r0, [pc, #112]	; (2c0e0 <z_tick_sleep+0x124>)
   2c070:	f002 feb1 	bl	2edd6 <printk>
   2c074:	2174      	movs	r1, #116	; 0x74
   2c076:	4813      	ldr	r0, [pc, #76]	; (2c0c4 <z_tick_sleep+0x108>)
   2c078:	f002 fef3 	bl	2ee62 <assert_post_action>
   2c07c:	4638      	mov	r0, r7
   2c07e:	f7f2 ff51 	bl	1ef24 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2c082:	68ab      	ldr	r3, [r5, #8]
   2c084:	7b5b      	ldrb	r3, [r3, #13]
   2c086:	06db      	lsls	r3, r3, #27
   2c088:	d50e      	bpl.n	2c0a8 <z_tick_sleep+0xec>
   2c08a:	4916      	ldr	r1, [pc, #88]	; (2c0e4 <z_tick_sleep+0x128>)
   2c08c:	f44f 6389 	mov.w	r3, #1096	; 0x448
   2c090:	4a09      	ldr	r2, [pc, #36]	; (2c0b8 <z_tick_sleep+0xfc>)
   2c092:	480a      	ldr	r0, [pc, #40]	; (2c0bc <z_tick_sleep+0x100>)
   2c094:	f002 fe9f 	bl	2edd6 <printk>
   2c098:	4809      	ldr	r0, [pc, #36]	; (2c0c0 <z_tick_sleep+0x104>)
   2c09a:	f002 fe9c 	bl	2edd6 <printk>
   2c09e:	f44f 6189 	mov.w	r1, #1096	; 0x448
   2c0a2:	4805      	ldr	r0, [pc, #20]	; (2c0b8 <z_tick_sleep+0xfc>)
   2c0a4:	f002 fedd 	bl	2ee62 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   2c0a8:	f003 fe2b 	bl	2fd02 <z_tick_get_32>
   2c0ac:	1a24      	subs	r4, r4, r0
   2c0ae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2c0b2:	e79a      	b.n	2bfea <z_tick_sleep+0x2e>
   2c0b4:	00032fc9 	.word	0x00032fc9
   2c0b8:	00033061 	.word	0x00033061
   2c0bc:	000316d1 	.word	0x000316d1
   2c0c0:	000323ee 	.word	0x000323ee
   2c0c4:	00031a38 	.word	0x00031a38
   2c0c8:	00031a5e 	.word	0x00031a5e
   2c0cc:	00031a73 	.word	0x00031a73
   2c0d0:	200213cc 	.word	0x200213cc
   2c0d4:	20021400 	.word	0x20021400
   2c0d8:	0002b541 	.word	0x0002b541
   2c0dc:	00031a8b 	.word	0x00031a8b
   2c0e0:	00031aa2 	.word	0x00031aa2
   2c0e4:	000330da 	.word	0x000330da

0002c0e8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   2c0e8:	b538      	push	{r3, r4, r5, lr}
   2c0ea:	4604      	mov	r4, r0
   2c0ec:	f3ef 8305 	mrs	r3, IPSR
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2c0f0:	b173      	cbz	r3, 2c110 <z_impl_k_sleep+0x28>
   2c0f2:	4916      	ldr	r1, [pc, #88]	; (2c14c <z_impl_k_sleep+0x64>)
   2c0f4:	f240 4357 	movw	r3, #1111	; 0x457
   2c0f8:	4a15      	ldr	r2, [pc, #84]	; (2c150 <z_impl_k_sleep+0x68>)
   2c0fa:	4816      	ldr	r0, [pc, #88]	; (2c154 <z_impl_k_sleep+0x6c>)
   2c0fc:	f002 fe6b 	bl	2edd6 <printk>
   2c100:	4815      	ldr	r0, [pc, #84]	; (2c158 <z_impl_k_sleep+0x70>)
   2c102:	f002 fe68 	bl	2edd6 <printk>
   2c106:	f240 4157 	movw	r1, #1111	; 0x457
   2c10a:	4811      	ldr	r0, [pc, #68]	; (2c150 <z_impl_k_sleep+0x68>)
   2c10c:	f002 fea9 	bl	2ee62 <assert_post_action>

	if (ms == K_FOREVER) {
   2c110:	1c63      	adds	r3, r4, #1
   2c112:	d105      	bne.n	2c120 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   2c114:	4b11      	ldr	r3, [pc, #68]	; (2c15c <z_impl_k_sleep+0x74>)
   2c116:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2c118:	f000 fa82 	bl	2c620 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   2c11c:	4620      	mov	r0, r4
   2c11e:	bd38      	pop	{r3, r4, r5, pc}
   2c120:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2c124:	f240 30e7 	movw	r0, #999	; 0x3e7
   2c128:	2100      	movs	r1, #0
   2c12a:	2300      	movs	r3, #0
   2c12c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c130:	fbe5 0104 	umlal	r0, r1, r5, r4
   2c134:	f7f0 fb40 	bl	1c7b8 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   2c138:	f7ff ff40 	bl	2bfbc <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
   2c13c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2c140:	fb80 0103 	smull	r0, r1, r0, r3
   2c144:	0bc4      	lsrs	r4, r0, #15
   2c146:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   2c14a:	e7e7      	b.n	2c11c <z_impl_k_sleep+0x34>
   2c14c:	00032fc9 	.word	0x00032fc9
   2c150:	00033061 	.word	0x00033061
   2c154:	000316d1 	.word	0x000316d1
   2c158:	000323ee 	.word	0x000323ee
   2c15c:	200213cc 	.word	0x200213cc

0002c160 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   2c160:	4b01      	ldr	r3, [pc, #4]	; (2c168 <z_impl_k_current_get+0x8>)
   2c162:	6898      	ldr	r0, [r3, #8]
   2c164:	4770      	bx	lr
   2c166:	bf00      	nop
   2c168:	200213cc 	.word	0x200213cc

0002c16c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2c16c:	b570      	push	{r4, r5, r6, lr}
   2c16e:	4604      	mov	r4, r0
   2c170:	f04f 0320 	mov.w	r3, #32
   2c174:	f3ef 8611 	mrs	r6, BASEPRI
   2c178:	f383 8811 	msr	BASEPRI, r3
   2c17c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c180:	481a      	ldr	r0, [pc, #104]	; (2c1ec <z_impl_k_sem_give+0x80>)
   2c182:	f000 f8f1 	bl	2c368 <z_spin_lock_valid>
   2c186:	b968      	cbnz	r0, 2c1a4 <z_impl_k_sem_give+0x38>
   2c188:	234a      	movs	r3, #74	; 0x4a
   2c18a:	4a19      	ldr	r2, [pc, #100]	; (2c1f0 <z_impl_k_sem_give+0x84>)
   2c18c:	4919      	ldr	r1, [pc, #100]	; (2c1f4 <z_impl_k_sem_give+0x88>)
   2c18e:	481a      	ldr	r0, [pc, #104]	; (2c1f8 <z_impl_k_sem_give+0x8c>)
   2c190:	f002 fe21 	bl	2edd6 <printk>
   2c194:	4915      	ldr	r1, [pc, #84]	; (2c1ec <z_impl_k_sem_give+0x80>)
   2c196:	4819      	ldr	r0, [pc, #100]	; (2c1fc <z_impl_k_sem_give+0x90>)
   2c198:	f002 fe1d 	bl	2edd6 <printk>
   2c19c:	214a      	movs	r1, #74	; 0x4a
   2c19e:	4814      	ldr	r0, [pc, #80]	; (2c1f0 <z_impl_k_sem_give+0x84>)
   2c1a0:	f002 fe5f 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c1a4:	4811      	ldr	r0, [pc, #68]	; (2c1ec <z_impl_k_sem_give+0x80>)
   2c1a6:	f000 f8fd 	bl	2c3a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   2c1aa:	4620      	mov	r0, r4
   2c1ac:	f7ff fdbe 	bl	2bd2c <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   2c1b0:	4605      	mov	r5, r0
   2c1b2:	b170      	cbz	r0, 2c1d2 <z_impl_k_sem_give+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2c1b4:	7b43      	ldrb	r3, [r0, #13]
   2c1b6:	06db      	lsls	r3, r3, #27
   2c1b8:	d103      	bne.n	2c1c2 <z_impl_k_sem_give+0x56>
	if (z_is_thread_ready(thread)) {
   2c1ba:	6983      	ldr	r3, [r0, #24]
   2c1bc:	b90b      	cbnz	r3, 2c1c2 <z_impl_k_sem_give+0x56>
		z_add_thread_to_ready_q(thread);
   2c1be:	f7ff f93f 	bl	2b440 <z_add_thread_to_ready_q>
   2c1c2:	2300      	movs	r3, #0
   2c1c4:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   2c1c6:	4631      	mov	r1, r6
}
   2c1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   2c1cc:	4807      	ldr	r0, [pc, #28]	; (2c1ec <z_impl_k_sem_give+0x80>)
   2c1ce:	f7fe bf4d 	b.w	2b06c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2c1d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2c1d6:	429a      	cmp	r2, r3
   2c1d8:	bf18      	it	ne
   2c1da:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2c1dc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2c1de:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2c1e0:	f104 0010 	add.w	r0, r4, #16
   2c1e4:	f003 fde8 	bl	2fdb8 <z_handle_obj_poll_events>
   2c1e8:	e7ed      	b.n	2c1c6 <z_impl_k_sem_give+0x5a>
   2c1ea:	bf00      	nop
   2c1ec:	20021410 	.word	0x20021410
   2c1f0:	00031a38 	.word	0x00031a38
   2c1f4:	00031a5e 	.word	0x00031a5e
   2c1f8:	000316d1 	.word	0x000316d1
   2c1fc:	00031a73 	.word	0x00031a73

0002c200 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   2c200:	b570      	push	{r4, r5, r6, lr}
   2c202:	4605      	mov	r5, r0
   2c204:	460e      	mov	r6, r1
   2c206:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   2c20a:	b16b      	cbz	r3, 2c228 <z_impl_k_sem_take+0x28>
   2c20c:	b161      	cbz	r1, 2c228 <z_impl_k_sem_take+0x28>
   2c20e:	4934      	ldr	r1, [pc, #208]	; (2c2e0 <z_impl_k_sem_take+0xe0>)
   2c210:	238c      	movs	r3, #140	; 0x8c
   2c212:	4a34      	ldr	r2, [pc, #208]	; (2c2e4 <z_impl_k_sem_take+0xe4>)
   2c214:	4834      	ldr	r0, [pc, #208]	; (2c2e8 <z_impl_k_sem_take+0xe8>)
   2c216:	f002 fdde 	bl	2edd6 <printk>
   2c21a:	4834      	ldr	r0, [pc, #208]	; (2c2ec <z_impl_k_sem_take+0xec>)
   2c21c:	f002 fddb 	bl	2edd6 <printk>
   2c220:	218c      	movs	r1, #140	; 0x8c
   2c222:	4830      	ldr	r0, [pc, #192]	; (2c2e4 <z_impl_k_sem_take+0xe4>)
   2c224:	f002 fe1d 	bl	2ee62 <assert_post_action>
   2c228:	f04f 0320 	mov.w	r3, #32
   2c22c:	f3ef 8411 	mrs	r4, BASEPRI
   2c230:	f383 8811 	msr	BASEPRI, r3
   2c234:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c238:	482d      	ldr	r0, [pc, #180]	; (2c2f0 <z_impl_k_sem_take+0xf0>)
   2c23a:	f000 f895 	bl	2c368 <z_spin_lock_valid>
   2c23e:	b968      	cbnz	r0, 2c25c <z_impl_k_sem_take+0x5c>
   2c240:	234a      	movs	r3, #74	; 0x4a
   2c242:	4a2c      	ldr	r2, [pc, #176]	; (2c2f4 <z_impl_k_sem_take+0xf4>)
   2c244:	492c      	ldr	r1, [pc, #176]	; (2c2f8 <z_impl_k_sem_take+0xf8>)
   2c246:	4828      	ldr	r0, [pc, #160]	; (2c2e8 <z_impl_k_sem_take+0xe8>)
   2c248:	f002 fdc5 	bl	2edd6 <printk>
   2c24c:	4928      	ldr	r1, [pc, #160]	; (2c2f0 <z_impl_k_sem_take+0xf0>)
   2c24e:	482b      	ldr	r0, [pc, #172]	; (2c2fc <z_impl_k_sem_take+0xfc>)
   2c250:	f002 fdc1 	bl	2edd6 <printk>
   2c254:	214a      	movs	r1, #74	; 0x4a
   2c256:	4827      	ldr	r0, [pc, #156]	; (2c2f4 <z_impl_k_sem_take+0xf4>)
   2c258:	f002 fe03 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c25c:	4824      	ldr	r0, [pc, #144]	; (2c2f0 <z_impl_k_sem_take+0xf0>)
   2c25e:	f000 f8a1 	bl	2c3a4 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   2c262:	68ab      	ldr	r3, [r5, #8]
   2c264:	b1cb      	cbz	r3, 2c29a <z_impl_k_sem_take+0x9a>
		sem->count--;
   2c266:	3b01      	subs	r3, #1
   2c268:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c26a:	4821      	ldr	r0, [pc, #132]	; (2c2f0 <z_impl_k_sem_take+0xf0>)
   2c26c:	f000 f88a 	bl	2c384 <z_spin_unlock_valid>
   2c270:	b968      	cbnz	r0, 2c28e <z_impl_k_sem_take+0x8e>
   2c272:	235d      	movs	r3, #93	; 0x5d
   2c274:	4a1f      	ldr	r2, [pc, #124]	; (2c2f4 <z_impl_k_sem_take+0xf4>)
   2c276:	4922      	ldr	r1, [pc, #136]	; (2c300 <z_impl_k_sem_take+0x100>)
   2c278:	481b      	ldr	r0, [pc, #108]	; (2c2e8 <z_impl_k_sem_take+0xe8>)
   2c27a:	f002 fdac 	bl	2edd6 <printk>
   2c27e:	491c      	ldr	r1, [pc, #112]	; (2c2f0 <z_impl_k_sem_take+0xf0>)
   2c280:	4820      	ldr	r0, [pc, #128]	; (2c304 <z_impl_k_sem_take+0x104>)
   2c282:	f002 fda8 	bl	2edd6 <printk>
   2c286:	215d      	movs	r1, #93	; 0x5d
   2c288:	481a      	ldr	r0, [pc, #104]	; (2c2f4 <z_impl_k_sem_take+0xf4>)
   2c28a:	f002 fdea 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2c28e:	f384 8811 	msr	BASEPRI, r4
   2c292:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2c296:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   2c298:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   2c29a:	b9c6      	cbnz	r6, 2c2ce <z_impl_k_sem_take+0xce>
   2c29c:	4814      	ldr	r0, [pc, #80]	; (2c2f0 <z_impl_k_sem_take+0xf0>)
   2c29e:	f000 f871 	bl	2c384 <z_spin_unlock_valid>
   2c2a2:	b968      	cbnz	r0, 2c2c0 <z_impl_k_sem_take+0xc0>
   2c2a4:	235d      	movs	r3, #93	; 0x5d
   2c2a6:	4a13      	ldr	r2, [pc, #76]	; (2c2f4 <z_impl_k_sem_take+0xf4>)
   2c2a8:	4915      	ldr	r1, [pc, #84]	; (2c300 <z_impl_k_sem_take+0x100>)
   2c2aa:	480f      	ldr	r0, [pc, #60]	; (2c2e8 <z_impl_k_sem_take+0xe8>)
   2c2ac:	f002 fd93 	bl	2edd6 <printk>
   2c2b0:	490f      	ldr	r1, [pc, #60]	; (2c2f0 <z_impl_k_sem_take+0xf0>)
   2c2b2:	4814      	ldr	r0, [pc, #80]	; (2c304 <z_impl_k_sem_take+0x104>)
   2c2b4:	f002 fd8f 	bl	2edd6 <printk>
   2c2b8:	215d      	movs	r1, #93	; 0x5d
   2c2ba:	480e      	ldr	r0, [pc, #56]	; (2c2f4 <z_impl_k_sem_take+0xf4>)
   2c2bc:	f002 fdd1 	bl	2ee62 <assert_post_action>
   2c2c0:	f384 8811 	msr	BASEPRI, r4
   2c2c4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2c2c8:	f06f 000f 	mvn.w	r0, #15
		goto out;
   2c2cc:	e7e4      	b.n	2c298 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2c2ce:	4633      	mov	r3, r6
   2c2d0:	462a      	mov	r2, r5
   2c2d2:	4621      	mov	r1, r4
}
   2c2d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2c2d8:	4805      	ldr	r0, [pc, #20]	; (2c2f0 <z_impl_k_sem_take+0xf0>)
   2c2da:	f7ff bc6b 	b.w	2bbb4 <z_pend_curr>
   2c2de:	bf00      	nop
   2c2e0:	00033132 	.word	0x00033132
   2c2e4:	00033112 	.word	0x00033112
   2c2e8:	000316d1 	.word	0x000316d1
   2c2ec:	000323ee 	.word	0x000323ee
   2c2f0:	20021410 	.word	0x20021410
   2c2f4:	00031a38 	.word	0x00031a38
   2c2f8:	00031a5e 	.word	0x00031a5e
   2c2fc:	00031a73 	.word	0x00031a73
   2c300:	00031a8b 	.word	0x00031a8b
   2c304:	00031aa2 	.word	0x00031aa2

0002c308 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2c308:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2c30a:	4c08      	ldr	r4, [pc, #32]	; (2c32c <k_sys_work_q_init+0x24>)
   2c30c:	f04f 33ff 	mov.w	r3, #4294967295
   2c310:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2c314:	4906      	ldr	r1, [pc, #24]	; (2c330 <k_sys_work_q_init+0x28>)
   2c316:	4620      	mov	r0, r4
   2c318:	f000 f9d6 	bl	2c6c8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   2c31c:	4905      	ldr	r1, [pc, #20]	; (2c334 <k_sys_work_q_init+0x2c>)
   2c31e:	f104 0014 	add.w	r0, r4, #20
   2c322:	f003 fcda 	bl	2fcda <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2c326:	2000      	movs	r0, #0
   2c328:	bd10      	pop	{r4, pc}
   2c32a:	bf00      	nop
   2c32c:	20021414 	.word	0x20021414
   2c330:	200249d8 	.word	0x200249d8
   2c334:	0003315e 	.word	0x0003315e

0002c338 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   2c338:	b530      	push	{r4, r5, lr}
   2c33a:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c33c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   2c33e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c340:	9504      	str	r5, [sp, #16]
   2c342:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2c344:	9503      	str	r5, [sp, #12]
   2c346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2c348:	9502      	str	r5, [sp, #8]
   2c34a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c34c:	9501      	str	r5, [sp, #4]
   2c34e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2c350:	9500      	str	r5, [sp, #0]
   2c352:	f7f2 fe51 	bl	1eff8 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2c356:	4b03      	ldr	r3, [pc, #12]	; (2c364 <z_setup_new_thread+0x2c>)
   2c358:	689b      	ldr	r3, [r3, #8]
   2c35a:	b103      	cbz	r3, 2c35e <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   2c35c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2c35e:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   2c360:	b007      	add	sp, #28
   2c362:	bd30      	pop	{r4, r5, pc}
   2c364:	200213cc 	.word	0x200213cc

0002c368 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2c368:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   2c36a:	b138      	cbz	r0, 2c37c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   2c36c:	4b04      	ldr	r3, [pc, #16]	; (2c380 <z_spin_lock_valid+0x18>)
   2c36e:	f000 0003 	and.w	r0, r0, #3
   2c372:	7d1b      	ldrb	r3, [r3, #20]
   2c374:	1ac0      	subs	r0, r0, r3
   2c376:	bf18      	it	ne
   2c378:	2001      	movne	r0, #1
   2c37a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2c37c:	2001      	movs	r0, #1
}
   2c37e:	4770      	bx	lr
   2c380:	200213cc 	.word	0x200213cc

0002c384 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2c384:	4a06      	ldr	r2, [pc, #24]	; (2c3a0 <z_spin_unlock_valid+0x1c>)
   2c386:	7d11      	ldrb	r1, [r2, #20]
   2c388:	6893      	ldr	r3, [r2, #8]
   2c38a:	6802      	ldr	r2, [r0, #0]
   2c38c:	430b      	orrs	r3, r1
   2c38e:	429a      	cmp	r2, r3
   2c390:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   2c394:	bf06      	itte	eq
   2c396:	6003      	streq	r3, [r0, #0]
	return true;
   2c398:	2001      	moveq	r0, #1
		return false;
   2c39a:	4618      	movne	r0, r3
}
   2c39c:	4770      	bx	lr
   2c39e:	bf00      	nop
   2c3a0:	200213cc 	.word	0x200213cc

0002c3a4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2c3a4:	4a02      	ldr	r2, [pc, #8]	; (2c3b0 <z_spin_lock_set_owner+0xc>)
   2c3a6:	7d11      	ldrb	r1, [r2, #20]
   2c3a8:	6893      	ldr	r3, [r2, #8]
   2c3aa:	430b      	orrs	r3, r1
   2c3ac:	6003      	str	r3, [r0, #0]
}
   2c3ae:	4770      	bx	lr
   2c3b0:	200213cc 	.word	0x200213cc

0002c3b4 <z_impl_k_thread_start>:
{
   2c3b4:	b538      	push	{r3, r4, r5, lr}
   2c3b6:	4604      	mov	r4, r0
	__asm__ volatile(
   2c3b8:	f04f 0320 	mov.w	r3, #32
   2c3bc:	f3ef 8511 	mrs	r5, BASEPRI
   2c3c0:	f383 8811 	msr	BASEPRI, r3
   2c3c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c3c8:	481f      	ldr	r0, [pc, #124]	; (2c448 <z_impl_k_thread_start+0x94>)
   2c3ca:	f7ff ffcd 	bl	2c368 <z_spin_lock_valid>
   2c3ce:	b968      	cbnz	r0, 2c3ec <z_impl_k_thread_start+0x38>
   2c3d0:	234a      	movs	r3, #74	; 0x4a
   2c3d2:	4a1e      	ldr	r2, [pc, #120]	; (2c44c <z_impl_k_thread_start+0x98>)
   2c3d4:	491e      	ldr	r1, [pc, #120]	; (2c450 <z_impl_k_thread_start+0x9c>)
   2c3d6:	481f      	ldr	r0, [pc, #124]	; (2c454 <z_impl_k_thread_start+0xa0>)
   2c3d8:	f002 fcfd 	bl	2edd6 <printk>
   2c3dc:	491a      	ldr	r1, [pc, #104]	; (2c448 <z_impl_k_thread_start+0x94>)
   2c3de:	481e      	ldr	r0, [pc, #120]	; (2c458 <z_impl_k_thread_start+0xa4>)
   2c3e0:	f002 fcf9 	bl	2edd6 <printk>
   2c3e4:	214a      	movs	r1, #74	; 0x4a
   2c3e6:	4819      	ldr	r0, [pc, #100]	; (2c44c <z_impl_k_thread_start+0x98>)
   2c3e8:	f002 fd3b 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c3ec:	4816      	ldr	r0, [pc, #88]	; (2c448 <z_impl_k_thread_start+0x94>)
   2c3ee:	f7ff ffd9 	bl	2c3a4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2c3f2:	7b63      	ldrb	r3, [r4, #13]
   2c3f4:	075a      	lsls	r2, r3, #29
   2c3f6:	d416      	bmi.n	2c426 <z_impl_k_thread_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c3f8:	4813      	ldr	r0, [pc, #76]	; (2c448 <z_impl_k_thread_start+0x94>)
   2c3fa:	f7ff ffc3 	bl	2c384 <z_spin_unlock_valid>
   2c3fe:	b968      	cbnz	r0, 2c41c <z_impl_k_thread_start+0x68>
   2c400:	235d      	movs	r3, #93	; 0x5d
   2c402:	4a12      	ldr	r2, [pc, #72]	; (2c44c <z_impl_k_thread_start+0x98>)
   2c404:	4915      	ldr	r1, [pc, #84]	; (2c45c <z_impl_k_thread_start+0xa8>)
   2c406:	4813      	ldr	r0, [pc, #76]	; (2c454 <z_impl_k_thread_start+0xa0>)
   2c408:	f002 fce5 	bl	2edd6 <printk>
   2c40c:	490e      	ldr	r1, [pc, #56]	; (2c448 <z_impl_k_thread_start+0x94>)
   2c40e:	4814      	ldr	r0, [pc, #80]	; (2c460 <z_impl_k_thread_start+0xac>)
   2c410:	f002 fce1 	bl	2edd6 <printk>
   2c414:	215d      	movs	r1, #93	; 0x5d
   2c416:	480d      	ldr	r0, [pc, #52]	; (2c44c <z_impl_k_thread_start+0x98>)
   2c418:	f002 fd23 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2c41c:	f385 8811 	msr	BASEPRI, r5
   2c420:	f3bf 8f6f 	isb	sy
}
   2c424:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2c426:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2c42a:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2c42e:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2c430:	d104      	bne.n	2c43c <z_impl_k_thread_start+0x88>
	if (z_is_thread_ready(thread)) {
   2c432:	69a3      	ldr	r3, [r4, #24]
   2c434:	b913      	cbnz	r3, 2c43c <z_impl_k_thread_start+0x88>
		z_add_thread_to_ready_q(thread);
   2c436:	4620      	mov	r0, r4
   2c438:	f7ff f802 	bl	2b440 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   2c43c:	4629      	mov	r1, r5
}
   2c43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2c442:	4801      	ldr	r0, [pc, #4]	; (2c448 <z_impl_k_thread_start+0x94>)
   2c444:	f7fe be12 	b.w	2b06c <z_reschedule>
   2c448:	200214d8 	.word	0x200214d8
   2c44c:	00031a38 	.word	0x00031a38
   2c450:	00031a5e 	.word	0x00031a5e
   2c454:	000316d1 	.word	0x000316d1
   2c458:	00031a73 	.word	0x00031a73
   2c45c:	00031a8b 	.word	0x00031a8b
   2c460:	00031aa2 	.word	0x00031aa2

0002c464 <z_impl_k_thread_create>:
{
   2c464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c468:	b086      	sub	sp, #24
   2c46a:	4604      	mov	r4, r0
   2c46c:	460e      	mov	r6, r1
   2c46e:	4617      	mov	r7, r2
   2c470:	4698      	mov	r8, r3
   2c472:	9d11      	ldr	r5, [sp, #68]	; 0x44
   2c474:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2c478:	b173      	cbz	r3, 2c498 <z_impl_k_thread_create+0x34>
   2c47a:	491f      	ldr	r1, [pc, #124]	; (2c4f8 <z_impl_k_thread_create+0x94>)
   2c47c:	f240 2357 	movw	r3, #599	; 0x257
   2c480:	4a1e      	ldr	r2, [pc, #120]	; (2c4fc <z_impl_k_thread_create+0x98>)
   2c482:	481f      	ldr	r0, [pc, #124]	; (2c500 <z_impl_k_thread_create+0x9c>)
   2c484:	f002 fca7 	bl	2edd6 <printk>
   2c488:	481e      	ldr	r0, [pc, #120]	; (2c504 <z_impl_k_thread_create+0xa0>)
   2c48a:	f002 fca4 	bl	2edd6 <printk>
   2c48e:	f240 2157 	movw	r1, #599	; 0x257
   2c492:	481a      	ldr	r0, [pc, #104]	; (2c4fc <z_impl_k_thread_create+0x98>)
   2c494:	f002 fce5 	bl	2ee62 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c498:	2300      	movs	r3, #0
   2c49a:	9305      	str	r3, [sp, #20]
   2c49c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2c49e:	463a      	mov	r2, r7
   2c4a0:	9304      	str	r3, [sp, #16]
   2c4a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c4a4:	4631      	mov	r1, r6
   2c4a6:	9303      	str	r3, [sp, #12]
   2c4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c4aa:	4620      	mov	r0, r4
   2c4ac:	9302      	str	r3, [sp, #8]
   2c4ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c4b0:	9301      	str	r3, [sp, #4]
   2c4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c4b4:	9300      	str	r3, [sp, #0]
   2c4b6:	4643      	mov	r3, r8
   2c4b8:	f7ff ff3e 	bl	2c338 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   2c4bc:	1c6b      	adds	r3, r5, #1
   2c4be:	d003      	beq.n	2c4c8 <z_impl_k_thread_create+0x64>
	if (delay == 0) {
   2c4c0:	b935      	cbnz	r5, 2c4d0 <z_impl_k_thread_create+0x6c>
	z_impl_k_thread_start(thread);
   2c4c2:	4620      	mov	r0, r4
   2c4c4:	f7ff ff76 	bl	2c3b4 <z_impl_k_thread_start>
}
   2c4c8:	4620      	mov	r0, r4
   2c4ca:	b006      	add	sp, #24
   2c4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   2c4d0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2c4d4:	f240 30e7 	movw	r0, #999	; 0x3e7
   2c4d8:	2100      	movs	r1, #0
   2c4da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c4de:	2300      	movs	r3, #0
   2c4e0:	fbe6 0105 	umlal	r0, r1, r6, r5
   2c4e4:	f7f0 f968 	bl	1c7b8 <__aeabi_uldivmod>
   2c4e8:	4907      	ldr	r1, [pc, #28]	; (2c508 <z_impl_k_thread_create+0xa4>)
   2c4ea:	1c42      	adds	r2, r0, #1
   2c4ec:	f104 0018 	add.w	r0, r4, #24
   2c4f0:	f000 f948 	bl	2c784 <z_add_timeout>
   2c4f4:	e7e8      	b.n	2c4c8 <z_impl_k_thread_create+0x64>
   2c4f6:	bf00      	nop
   2c4f8:	00032fc9 	.word	0x00032fc9
   2c4fc:	00033167 	.word	0x00033167
   2c500:	000316d1 	.word	0x000316d1
   2c504:	0003318a 	.word	0x0003318a
   2c508:	0002b541 	.word	0x0002b541

0002c50c <z_init_static_threads>:
{
   2c50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2c510:	4f3c      	ldr	r7, [pc, #240]	; (2c604 <z_init_static_threads+0xf8>)
   2c512:	4d3d      	ldr	r5, [pc, #244]	; (2c608 <z_init_static_threads+0xfc>)
   2c514:	463e      	mov	r6, r7
   2c516:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2c618 <z_init_static_threads+0x10c>
{
   2c51a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2c51c:	42bd      	cmp	r5, r7
   2c51e:	d90e      	bls.n	2c53e <z_init_static_threads+0x32>
   2c520:	493a      	ldr	r1, [pc, #232]	; (2c60c <z_init_static_threads+0x100>)
   2c522:	f240 23e7 	movw	r3, #743	; 0x2e7
   2c526:	4642      	mov	r2, r8
   2c528:	4839      	ldr	r0, [pc, #228]	; (2c610 <z_init_static_threads+0x104>)
   2c52a:	f002 fc54 	bl	2edd6 <printk>
   2c52e:	4839      	ldr	r0, [pc, #228]	; (2c614 <z_init_static_threads+0x108>)
   2c530:	f002 fc51 	bl	2edd6 <printk>
   2c534:	f240 21e7 	movw	r1, #743	; 0x2e7
   2c538:	4640      	mov	r0, r8
   2c53a:	f002 fc92 	bl	2ee62 <assert_post_action>
   2c53e:	42b5      	cmp	r5, r6
   2c540:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2c544:	d31f      	bcc.n	2c586 <z_init_static_threads+0x7a>
	k_sched_lock();
   2c546:	f7fe fdcd 	bl	2b0e4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2c54a:	4c2f      	ldr	r4, [pc, #188]	; (2c608 <z_init_static_threads+0xfc>)
   2c54c:	4d32      	ldr	r5, [pc, #200]	; (2c618 <z_init_static_threads+0x10c>)
   2c54e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2c60c <z_init_static_threads+0x100>
   2c552:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2c610 <z_init_static_threads+0x104>
   2c556:	42b4      	cmp	r4, r6
   2c558:	d90e      	bls.n	2c578 <z_init_static_threads+0x6c>
   2c55a:	4641      	mov	r1, r8
   2c55c:	f240 3306 	movw	r3, #774	; 0x306
   2c560:	462a      	mov	r2, r5
   2c562:	4648      	mov	r0, r9
   2c564:	f002 fc37 	bl	2edd6 <printk>
   2c568:	482a      	ldr	r0, [pc, #168]	; (2c614 <z_init_static_threads+0x108>)
   2c56a:	f002 fc34 	bl	2edd6 <printk>
   2c56e:	f240 3106 	movw	r1, #774	; 0x306
   2c572:	4628      	mov	r0, r5
   2c574:	f002 fc75 	bl	2ee62 <assert_post_action>
   2c578:	42b4      	cmp	r4, r6
   2c57a:	d321      	bcc.n	2c5c0 <z_init_static_threads+0xb4>
}
   2c57c:	b007      	add	sp, #28
   2c57e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2c582:	f7fe bee1 	b.w	2b348 <k_sched_unlock>
		z_setup_new_thread(
   2c586:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c58a:	9305      	str	r3, [sp, #20]
   2c58c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2c590:	9304      	str	r3, [sp, #16]
   2c592:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2c596:	9303      	str	r3, [sp, #12]
   2c598:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2c59c:	9302      	str	r3, [sp, #8]
   2c59e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2c5a2:	9301      	str	r3, [sp, #4]
   2c5a4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2c5a8:	9300      	str	r3, [sp, #0]
   2c5aa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2c5ae:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2c5b2:	f7ff fec1 	bl	2c338 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2c5b6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c5ba:	64dd      	str	r5, [r3, #76]	; 0x4c
   2c5bc:	4625      	mov	r5, r4
   2c5be:	e7ad      	b.n	2c51c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   2c5c0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   2c5c4:	f1bc 3fff 	cmp.w	ip, #4294967295
   2c5c8:	d006      	beq.n	2c5d8 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   2c5ca:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   2c5cc:	f1bc 0f00 	cmp.w	ip, #0
   2c5d0:	d104      	bne.n	2c5dc <z_init_static_threads+0xd0>
   2c5d2:	4638      	mov	r0, r7
   2c5d4:	f7ff feee 	bl	2c3b4 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2c5d8:	3430      	adds	r4, #48	; 0x30
   2c5da:	e7bc      	b.n	2c556 <z_init_static_threads+0x4a>
   2c5dc:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   2c5e0:	f240 30e7 	movw	r0, #999	; 0x3e7
   2c5e4:	2100      	movs	r1, #0
   2c5e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c5ea:	2300      	movs	r3, #0
   2c5ec:	fbee 010c 	umlal	r0, r1, lr, ip
   2c5f0:	f7f0 f8e2 	bl	1c7b8 <__aeabi_uldivmod>
   2c5f4:	4909      	ldr	r1, [pc, #36]	; (2c61c <z_init_static_threads+0x110>)
   2c5f6:	1c42      	adds	r2, r0, #1
   2c5f8:	f107 0018 	add.w	r0, r7, #24
   2c5fc:	f000 f8c2 	bl	2c784 <z_add_timeout>
   2c600:	e7ea      	b.n	2c5d8 <z_init_static_threads+0xcc>
   2c602:	bf00      	nop
   2c604:	20026a1c 	.word	0x20026a1c
   2c608:	20026a1c 	.word	0x20026a1c
   2c60c:	000331af 	.word	0x000331af
   2c610:	000316d1 	.word	0x000316d1
   2c614:	00032ea0 	.word	0x00032ea0
   2c618:	00033167 	.word	0x00033167
   2c61c:	0002b541 	.word	0x0002b541

0002c620 <z_impl_k_thread_suspend>:
{
   2c620:	b538      	push	{r3, r4, r5, lr}
   2c622:	4605      	mov	r5, r0
	__asm__ volatile(
   2c624:	f04f 0320 	mov.w	r3, #32
   2c628:	f3ef 8411 	mrs	r4, BASEPRI
   2c62c:	f383 8811 	msr	BASEPRI, r3
   2c630:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c634:	481c      	ldr	r0, [pc, #112]	; (2c6a8 <z_impl_k_thread_suspend+0x88>)
   2c636:	f7ff fe97 	bl	2c368 <z_spin_lock_valid>
   2c63a:	b968      	cbnz	r0, 2c658 <z_impl_k_thread_suspend+0x38>
   2c63c:	234a      	movs	r3, #74	; 0x4a
   2c63e:	4a1b      	ldr	r2, [pc, #108]	; (2c6ac <z_impl_k_thread_suspend+0x8c>)
   2c640:	491b      	ldr	r1, [pc, #108]	; (2c6b0 <z_impl_k_thread_suspend+0x90>)
   2c642:	481c      	ldr	r0, [pc, #112]	; (2c6b4 <z_impl_k_thread_suspend+0x94>)
   2c644:	f002 fbc7 	bl	2edd6 <printk>
   2c648:	4917      	ldr	r1, [pc, #92]	; (2c6a8 <z_impl_k_thread_suspend+0x88>)
   2c64a:	481b      	ldr	r0, [pc, #108]	; (2c6b8 <z_impl_k_thread_suspend+0x98>)
   2c64c:	f002 fbc3 	bl	2edd6 <printk>
   2c650:	214a      	movs	r1, #74	; 0x4a
   2c652:	4816      	ldr	r0, [pc, #88]	; (2c6ac <z_impl_k_thread_suspend+0x8c>)
   2c654:	f002 fc05 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c658:	4813      	ldr	r0, [pc, #76]	; (2c6a8 <z_impl_k_thread_suspend+0x88>)
   2c65a:	f7ff fea3 	bl	2c3a4 <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   2c65e:	4628      	mov	r0, r5
   2c660:	f7ff f89c 	bl	2b79c <z_thread_single_suspend>
	if (thread == _current) {
   2c664:	4b15      	ldr	r3, [pc, #84]	; (2c6bc <z_impl_k_thread_suspend+0x9c>)
   2c666:	689b      	ldr	r3, [r3, #8]
   2c668:	42ab      	cmp	r3, r5
   2c66a:	d105      	bne.n	2c678 <z_impl_k_thread_suspend+0x58>
		z_reschedule(&lock, key);
   2c66c:	4621      	mov	r1, r4
}
   2c66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   2c672:	480d      	ldr	r0, [pc, #52]	; (2c6a8 <z_impl_k_thread_suspend+0x88>)
   2c674:	f7fe bcfa 	b.w	2b06c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c678:	480b      	ldr	r0, [pc, #44]	; (2c6a8 <z_impl_k_thread_suspend+0x88>)
   2c67a:	f7ff fe83 	bl	2c384 <z_spin_unlock_valid>
   2c67e:	b968      	cbnz	r0, 2c69c <z_impl_k_thread_suspend+0x7c>
   2c680:	235d      	movs	r3, #93	; 0x5d
   2c682:	4a0a      	ldr	r2, [pc, #40]	; (2c6ac <z_impl_k_thread_suspend+0x8c>)
   2c684:	490e      	ldr	r1, [pc, #56]	; (2c6c0 <z_impl_k_thread_suspend+0xa0>)
   2c686:	480b      	ldr	r0, [pc, #44]	; (2c6b4 <z_impl_k_thread_suspend+0x94>)
   2c688:	f002 fba5 	bl	2edd6 <printk>
   2c68c:	4906      	ldr	r1, [pc, #24]	; (2c6a8 <z_impl_k_thread_suspend+0x88>)
   2c68e:	480d      	ldr	r0, [pc, #52]	; (2c6c4 <z_impl_k_thread_suspend+0xa4>)
   2c690:	f002 fba1 	bl	2edd6 <printk>
   2c694:	215d      	movs	r1, #93	; 0x5d
   2c696:	4805      	ldr	r0, [pc, #20]	; (2c6ac <z_impl_k_thread_suspend+0x8c>)
   2c698:	f002 fbe3 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2c69c:	f384 8811 	msr	BASEPRI, r4
   2c6a0:	f3bf 8f6f 	isb	sy
}
   2c6a4:	bd38      	pop	{r3, r4, r5, pc}
   2c6a6:	bf00      	nop
   2c6a8:	200214d8 	.word	0x200214d8
   2c6ac:	00031a38 	.word	0x00031a38
   2c6b0:	00031a5e 	.word	0x00031a5e
   2c6b4:	000316d1 	.word	0x000316d1
   2c6b8:	00031a73 	.word	0x00031a73
   2c6bc:	200213cc 	.word	0x200213cc
   2c6c0:	00031a8b 	.word	0x00031a8b
   2c6c4:	00031aa2 	.word	0x00031aa2

0002c6c8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   2c6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c6cc:	4605      	mov	r5, r0
   2c6ce:	b086      	sub	sp, #24
   2c6d0:	460e      	mov	r6, r1
   2c6d2:	4617      	mov	r7, r2
   2c6d4:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   2c6d6:	f003 fa96 	bl	2fc06 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2c6da:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2c6de:	2000      	movs	r0, #0
   2c6e0:	4b09      	ldr	r3, [pc, #36]	; (2c708 <k_work_q_start+0x40>)
   2c6e2:	e9cd 0004 	strd	r0, r0, [sp, #16]
   2c6e6:	e9cd 0802 	strd	r0, r8, [sp, #8]
   2c6ea:	e9cd 5000 	strd	r5, r0, [sp]
   2c6ee:	463a      	mov	r2, r7
   2c6f0:	4631      	mov	r1, r6
   2c6f2:	4620      	mov	r0, r4
   2c6f4:	f7ff feb6 	bl	2c464 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   2c6f8:	4620      	mov	r0, r4
   2c6fa:	4904      	ldr	r1, [pc, #16]	; (2c70c <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   2c6fc:	b006      	add	sp, #24
   2c6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c702:	f003 baea 	b.w	2fcda <z_impl_k_thread_name_set>
   2c706:	bf00      	nop
   2c708:	0002ee2d 	.word	0x0002ee2d
   2c70c:	000331dc 	.word	0x000331dc

0002c710 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   2c710:	4b03      	ldr	r3, [pc, #12]	; (2c720 <elapsed+0x10>)
   2c712:	681b      	ldr	r3, [r3, #0]
   2c714:	b90b      	cbnz	r3, 2c71a <elapsed+0xa>
   2c716:	f7f2 ba23 	b.w	1eb60 <z_clock_elapsed>
}
   2c71a:	2000      	movs	r0, #0
   2c71c:	4770      	bx	lr
   2c71e:	bf00      	nop
   2c720:	200214dc 	.word	0x200214dc

0002c724 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2c724:	6803      	ldr	r3, [r0, #0]
   2c726:	b140      	cbz	r0, 2c73a <remove_timeout+0x16>
   2c728:	4a07      	ldr	r2, [pc, #28]	; (2c748 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   2c72a:	6852      	ldr	r2, [r2, #4]
   2c72c:	4290      	cmp	r0, r2
   2c72e:	d004      	beq.n	2c73a <remove_timeout+0x16>
	if (next(t) != NULL) {
   2c730:	b11b      	cbz	r3, 2c73a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   2c732:	689a      	ldr	r2, [r3, #8]
   2c734:	6881      	ldr	r1, [r0, #8]
   2c736:	440a      	add	r2, r1
   2c738:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   2c73a:	6842      	ldr	r2, [r0, #4]
   2c73c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2c73e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c740:	2300      	movs	r3, #0
	node->prev = NULL;
   2c742:	e9c0 3300 	strd	r3, r3, [r0]
}
   2c746:	4770      	bx	lr
   2c748:	20026754 	.word	0x20026754

0002c74c <next_timeout>:
	return list->head == list;
   2c74c:	4b0b      	ldr	r3, [pc, #44]	; (2c77c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   2c74e:	b510      	push	{r4, lr}
   2c750:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c752:	429c      	cmp	r4, r3
   2c754:	bf08      	it	eq
   2c756:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   2c758:	f7ff ffda 	bl	2c710 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2c75c:	b154      	cbz	r4, 2c774 <next_timeout+0x28>
   2c75e:	68a3      	ldr	r3, [r4, #8]
   2c760:	1a18      	subs	r0, r3, r0
   2c762:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2c766:	4b06      	ldr	r3, [pc, #24]	; (2c780 <next_timeout+0x34>)
   2c768:	691b      	ldr	r3, [r3, #16]
   2c76a:	b113      	cbz	r3, 2c772 <next_timeout+0x26>
   2c76c:	4298      	cmp	r0, r3
   2c76e:	bfa8      	it	ge
   2c770:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2c772:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2c774:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2c778:	e7f5      	b.n	2c766 <next_timeout+0x1a>
   2c77a:	bf00      	nop
   2c77c:	20026754 	.word	0x20026754
   2c780:	200213cc 	.word	0x200213cc

0002c784 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2c784:	6803      	ldr	r3, [r0, #0]
{
   2c786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c78a:	4604      	mov	r4, r0
   2c78c:	460e      	mov	r6, r1
   2c78e:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2c790:	b163      	cbz	r3, 2c7ac <z_add_timeout+0x28>
   2c792:	4943      	ldr	r1, [pc, #268]	; (2c8a0 <z_add_timeout+0x11c>)
   2c794:	2358      	movs	r3, #88	; 0x58
   2c796:	4a43      	ldr	r2, [pc, #268]	; (2c8a4 <z_add_timeout+0x120>)
   2c798:	4843      	ldr	r0, [pc, #268]	; (2c8a8 <z_add_timeout+0x124>)
   2c79a:	f002 fb1c 	bl	2edd6 <printk>
   2c79e:	4843      	ldr	r0, [pc, #268]	; (2c8ac <z_add_timeout+0x128>)
   2c7a0:	f002 fb19 	bl	2edd6 <printk>
   2c7a4:	2158      	movs	r1, #88	; 0x58
   2c7a6:	483f      	ldr	r0, [pc, #252]	; (2c8a4 <z_add_timeout+0x120>)
   2c7a8:	f002 fb5b 	bl	2ee62 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   2c7ac:	2d01      	cmp	r5, #1
   2c7ae:	bfb8      	it	lt
   2c7b0:	2501      	movlt	r5, #1
	to->fn = fn;
   2c7b2:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   2c7b4:	f04f 0320 	mov.w	r3, #32
   2c7b8:	f3ef 8811 	mrs	r8, BASEPRI
   2c7bc:	f383 8811 	msr	BASEPRI, r3
   2c7c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c7c4:	483a      	ldr	r0, [pc, #232]	; (2c8b0 <z_add_timeout+0x12c>)
   2c7c6:	f7ff fdcf 	bl	2c368 <z_spin_lock_valid>
   2c7ca:	b968      	cbnz	r0, 2c7e8 <z_add_timeout+0x64>
   2c7cc:	234a      	movs	r3, #74	; 0x4a
   2c7ce:	4a39      	ldr	r2, [pc, #228]	; (2c8b4 <z_add_timeout+0x130>)
   2c7d0:	4939      	ldr	r1, [pc, #228]	; (2c8b8 <z_add_timeout+0x134>)
   2c7d2:	4835      	ldr	r0, [pc, #212]	; (2c8a8 <z_add_timeout+0x124>)
   2c7d4:	f002 faff 	bl	2edd6 <printk>
   2c7d8:	4935      	ldr	r1, [pc, #212]	; (2c8b0 <z_add_timeout+0x12c>)
   2c7da:	4838      	ldr	r0, [pc, #224]	; (2c8bc <z_add_timeout+0x138>)
   2c7dc:	f002 fafb 	bl	2edd6 <printk>
   2c7e0:	214a      	movs	r1, #74	; 0x4a
   2c7e2:	4834      	ldr	r0, [pc, #208]	; (2c8b4 <z_add_timeout+0x130>)
   2c7e4:	f002 fb3d 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c7e8:	4831      	ldr	r0, [pc, #196]	; (2c8b0 <z_add_timeout+0x12c>)
   2c7ea:	f7ff fddb 	bl	2c3a4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2c7ee:	f7ff ff8f 	bl	2c710 <elapsed>
   2c7f2:	4428      	add	r0, r5
	return list->head == list;
   2c7f4:	4d32      	ldr	r5, [pc, #200]	; (2c8c0 <z_add_timeout+0x13c>)
   2c7f6:	60a0      	str	r0, [r4, #8]
   2c7f8:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c7fa:	42ae      	cmp	r6, r5
   2c7fc:	d005      	beq.n	2c80a <z_add_timeout+0x86>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   2c7fe:	4f29      	ldr	r7, [pc, #164]	; (2c8a4 <z_add_timeout+0x120>)
   2c800:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2c8cc <z_add_timeout+0x148>
   2c804:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2c8a8 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   2c808:	b936      	cbnz	r6, 2c818 <z_add_timeout+0x94>
	node->prev = list->tail;
   2c80a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2c80c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2c80e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2c810:	686b      	ldr	r3, [r5, #4]
   2c812:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2c814:	606c      	str	r4, [r5, #4]
   2c816:	e01a      	b.n	2c84e <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   2c818:	68b3      	ldr	r3, [r6, #8]
   2c81a:	2b00      	cmp	r3, #0
   2c81c:	da0c      	bge.n	2c838 <z_add_timeout+0xb4>
   2c81e:	4649      	mov	r1, r9
   2c820:	2361      	movs	r3, #97	; 0x61
   2c822:	463a      	mov	r2, r7
   2c824:	4650      	mov	r0, sl
   2c826:	f002 fad6 	bl	2edd6 <printk>
   2c82a:	4820      	ldr	r0, [pc, #128]	; (2c8ac <z_add_timeout+0x128>)
   2c82c:	f002 fad3 	bl	2edd6 <printk>
   2c830:	2161      	movs	r1, #97	; 0x61
   2c832:	4638      	mov	r0, r7
   2c834:	f002 fb15 	bl	2ee62 <assert_post_action>

			if (t->dticks > to->dticks) {
   2c838:	68b2      	ldr	r2, [r6, #8]
   2c83a:	68a3      	ldr	r3, [r4, #8]
   2c83c:	429a      	cmp	r2, r3
   2c83e:	dd28      	ble.n	2c892 <z_add_timeout+0x10e>
				t->dticks -= to->dticks;
   2c840:	1ad3      	subs	r3, r2, r3
   2c842:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   2c844:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2c846:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   2c84a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2c84c:	6074      	str	r4, [r6, #4]
	return list->head == list;
   2c84e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c850:	42ab      	cmp	r3, r5
   2c852:	d006      	beq.n	2c862 <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2c854:	429c      	cmp	r4, r3
   2c856:	d104      	bne.n	2c862 <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   2c858:	f7ff ff78 	bl	2c74c <next_timeout>
   2c85c:	2100      	movs	r1, #0
   2c85e:	f7f2 f8f1 	bl	1ea44 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c862:	4813      	ldr	r0, [pc, #76]	; (2c8b0 <z_add_timeout+0x12c>)
   2c864:	f7ff fd8e 	bl	2c384 <z_spin_unlock_valid>
   2c868:	b968      	cbnz	r0, 2c886 <z_add_timeout+0x102>
   2c86a:	235d      	movs	r3, #93	; 0x5d
   2c86c:	4a11      	ldr	r2, [pc, #68]	; (2c8b4 <z_add_timeout+0x130>)
   2c86e:	4915      	ldr	r1, [pc, #84]	; (2c8c4 <z_add_timeout+0x140>)
   2c870:	480d      	ldr	r0, [pc, #52]	; (2c8a8 <z_add_timeout+0x124>)
   2c872:	f002 fab0 	bl	2edd6 <printk>
   2c876:	490e      	ldr	r1, [pc, #56]	; (2c8b0 <z_add_timeout+0x12c>)
   2c878:	4813      	ldr	r0, [pc, #76]	; (2c8c8 <z_add_timeout+0x144>)
   2c87a:	f002 faac 	bl	2edd6 <printk>
   2c87e:	215d      	movs	r1, #93	; 0x5d
   2c880:	480c      	ldr	r0, [pc, #48]	; (2c8b4 <z_add_timeout+0x130>)
   2c882:	f002 faee 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2c886:	f388 8811 	msr	BASEPRI, r8
   2c88a:	f3bf 8f6f 	isb	sy
		}
	}
}
   2c88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   2c892:	1a9b      	subs	r3, r3, r2
   2c894:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   2c896:	686b      	ldr	r3, [r5, #4]
   2c898:	429e      	cmp	r6, r3
   2c89a:	d0b6      	beq.n	2c80a <z_add_timeout+0x86>
   2c89c:	6836      	ldr	r6, [r6, #0]
   2c89e:	e7b3      	b.n	2c808 <z_add_timeout+0x84>
   2c8a0:	0003320a 	.word	0x0003320a
   2c8a4:	000331e6 	.word	0x000331e6
   2c8a8:	000316d1 	.word	0x000316d1
   2c8ac:	000323ee 	.word	0x000323ee
   2c8b0:	200214e0 	.word	0x200214e0
   2c8b4:	00031a38 	.word	0x00031a38
   2c8b8:	00031a5e 	.word	0x00031a5e
   2c8bc:	00031a73 	.word	0x00031a73
   2c8c0:	20026754 	.word	0x20026754
   2c8c4:	00031a8b 	.word	0x00031a8b
   2c8c8:	00031aa2 	.word	0x00031aa2
   2c8cc:	0003322a 	.word	0x0003322a

0002c8d0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2c8d0:	b538      	push	{r3, r4, r5, lr}
   2c8d2:	4604      	mov	r4, r0
	__asm__ volatile(
   2c8d4:	f04f 0320 	mov.w	r3, #32
   2c8d8:	f3ef 8511 	mrs	r5, BASEPRI
   2c8dc:	f383 8811 	msr	BASEPRI, r3
   2c8e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c8e4:	481a      	ldr	r0, [pc, #104]	; (2c950 <z_abort_timeout+0x80>)
   2c8e6:	f7ff fd3f 	bl	2c368 <z_spin_lock_valid>
   2c8ea:	b968      	cbnz	r0, 2c908 <z_abort_timeout+0x38>
   2c8ec:	234a      	movs	r3, #74	; 0x4a
   2c8ee:	4a19      	ldr	r2, [pc, #100]	; (2c954 <z_abort_timeout+0x84>)
   2c8f0:	4919      	ldr	r1, [pc, #100]	; (2c958 <z_abort_timeout+0x88>)
   2c8f2:	481a      	ldr	r0, [pc, #104]	; (2c95c <z_abort_timeout+0x8c>)
   2c8f4:	f002 fa6f 	bl	2edd6 <printk>
   2c8f8:	4915      	ldr	r1, [pc, #84]	; (2c950 <z_abort_timeout+0x80>)
   2c8fa:	4819      	ldr	r0, [pc, #100]	; (2c960 <z_abort_timeout+0x90>)
   2c8fc:	f002 fa6b 	bl	2edd6 <printk>
   2c900:	214a      	movs	r1, #74	; 0x4a
   2c902:	4814      	ldr	r0, [pc, #80]	; (2c954 <z_abort_timeout+0x84>)
   2c904:	f002 faad 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c908:	4811      	ldr	r0, [pc, #68]	; (2c950 <z_abort_timeout+0x80>)
   2c90a:	f7ff fd4b 	bl	2c3a4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2c90e:	6823      	ldr	r3, [r4, #0]
   2c910:	b1db      	cbz	r3, 2c94a <z_abort_timeout+0x7a>
			remove_timeout(to);
   2c912:	4620      	mov	r0, r4
   2c914:	f7ff ff06 	bl	2c724 <remove_timeout>
			ret = 0;
   2c918:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c91a:	480d      	ldr	r0, [pc, #52]	; (2c950 <z_abort_timeout+0x80>)
   2c91c:	f7ff fd32 	bl	2c384 <z_spin_unlock_valid>
   2c920:	b968      	cbnz	r0, 2c93e <z_abort_timeout+0x6e>
   2c922:	235d      	movs	r3, #93	; 0x5d
   2c924:	4a0b      	ldr	r2, [pc, #44]	; (2c954 <z_abort_timeout+0x84>)
   2c926:	490f      	ldr	r1, [pc, #60]	; (2c964 <z_abort_timeout+0x94>)
   2c928:	480c      	ldr	r0, [pc, #48]	; (2c95c <z_abort_timeout+0x8c>)
   2c92a:	f002 fa54 	bl	2edd6 <printk>
   2c92e:	4908      	ldr	r1, [pc, #32]	; (2c950 <z_abort_timeout+0x80>)
   2c930:	480d      	ldr	r0, [pc, #52]	; (2c968 <z_abort_timeout+0x98>)
   2c932:	f002 fa50 	bl	2edd6 <printk>
   2c936:	215d      	movs	r1, #93	; 0x5d
   2c938:	4806      	ldr	r0, [pc, #24]	; (2c954 <z_abort_timeout+0x84>)
   2c93a:	f002 fa92 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2c93e:	f385 8811 	msr	BASEPRI, r5
   2c942:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2c946:	4620      	mov	r0, r4
   2c948:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2c94a:	f06f 0415 	mvn.w	r4, #21
   2c94e:	e7e4      	b.n	2c91a <z_abort_timeout+0x4a>
   2c950:	200214e0 	.word	0x200214e0
   2c954:	00031a38 	.word	0x00031a38
   2c958:	00031a5e 	.word	0x00031a5e
   2c95c:	000316d1 	.word	0x000316d1
   2c960:	00031a73 	.word	0x00031a73
   2c964:	00031a8b 	.word	0x00031a8b
   2c968:	00031aa2 	.word	0x00031aa2

0002c96c <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   2c96c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2c96e:	f04f 0320 	mov.w	r3, #32
   2c972:	f3ef 8511 	mrs	r5, BASEPRI
   2c976:	f383 8811 	msr	BASEPRI, r3
   2c97a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c97e:	4818      	ldr	r0, [pc, #96]	; (2c9e0 <z_get_next_timeout_expiry+0x74>)
   2c980:	f7ff fcf2 	bl	2c368 <z_spin_lock_valid>
   2c984:	b968      	cbnz	r0, 2c9a2 <z_get_next_timeout_expiry+0x36>
   2c986:	234a      	movs	r3, #74	; 0x4a
   2c988:	4a16      	ldr	r2, [pc, #88]	; (2c9e4 <z_get_next_timeout_expiry+0x78>)
   2c98a:	4917      	ldr	r1, [pc, #92]	; (2c9e8 <z_get_next_timeout_expiry+0x7c>)
   2c98c:	4817      	ldr	r0, [pc, #92]	; (2c9ec <z_get_next_timeout_expiry+0x80>)
   2c98e:	f002 fa22 	bl	2edd6 <printk>
   2c992:	4913      	ldr	r1, [pc, #76]	; (2c9e0 <z_get_next_timeout_expiry+0x74>)
   2c994:	4816      	ldr	r0, [pc, #88]	; (2c9f0 <z_get_next_timeout_expiry+0x84>)
   2c996:	f002 fa1e 	bl	2edd6 <printk>
   2c99a:	214a      	movs	r1, #74	; 0x4a
   2c99c:	4811      	ldr	r0, [pc, #68]	; (2c9e4 <z_get_next_timeout_expiry+0x78>)
   2c99e:	f002 fa60 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c9a2:	480f      	ldr	r0, [pc, #60]	; (2c9e0 <z_get_next_timeout_expiry+0x74>)
   2c9a4:	f7ff fcfe 	bl	2c3a4 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2c9a8:	f7ff fed0 	bl	2c74c <next_timeout>
   2c9ac:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c9ae:	480c      	ldr	r0, [pc, #48]	; (2c9e0 <z_get_next_timeout_expiry+0x74>)
   2c9b0:	f7ff fce8 	bl	2c384 <z_spin_unlock_valid>
   2c9b4:	b968      	cbnz	r0, 2c9d2 <z_get_next_timeout_expiry+0x66>
   2c9b6:	235d      	movs	r3, #93	; 0x5d
   2c9b8:	4a0a      	ldr	r2, [pc, #40]	; (2c9e4 <z_get_next_timeout_expiry+0x78>)
   2c9ba:	490e      	ldr	r1, [pc, #56]	; (2c9f4 <z_get_next_timeout_expiry+0x88>)
   2c9bc:	480b      	ldr	r0, [pc, #44]	; (2c9ec <z_get_next_timeout_expiry+0x80>)
   2c9be:	f002 fa0a 	bl	2edd6 <printk>
   2c9c2:	4907      	ldr	r1, [pc, #28]	; (2c9e0 <z_get_next_timeout_expiry+0x74>)
   2c9c4:	480c      	ldr	r0, [pc, #48]	; (2c9f8 <z_get_next_timeout_expiry+0x8c>)
   2c9c6:	f002 fa06 	bl	2edd6 <printk>
   2c9ca:	215d      	movs	r1, #93	; 0x5d
   2c9cc:	4805      	ldr	r0, [pc, #20]	; (2c9e4 <z_get_next_timeout_expiry+0x78>)
   2c9ce:	f002 fa48 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2c9d2:	f385 8811 	msr	BASEPRI, r5
   2c9d6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2c9da:	4620      	mov	r0, r4
   2c9dc:	bd38      	pop	{r3, r4, r5, pc}
   2c9de:	bf00      	nop
   2c9e0:	200214e0 	.word	0x200214e0
   2c9e4:	00031a38 	.word	0x00031a38
   2c9e8:	00031a5e 	.word	0x00031a5e
   2c9ec:	000316d1 	.word	0x000316d1
   2c9f0:	00031a73 	.word	0x00031a73
   2c9f4:	00031a8b 	.word	0x00031a8b
   2c9f8:	00031aa2 	.word	0x00031aa2

0002c9fc <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   2c9fc:	b570      	push	{r4, r5, r6, lr}
   2c9fe:	4604      	mov	r4, r0
   2ca00:	460e      	mov	r6, r1
	__asm__ volatile(
   2ca02:	f04f 0320 	mov.w	r3, #32
   2ca06:	f3ef 8511 	mrs	r5, BASEPRI
   2ca0a:	f383 8811 	msr	BASEPRI, r3
   2ca0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ca12:	481b      	ldr	r0, [pc, #108]	; (2ca80 <z_set_timeout_expiry+0x84>)
   2ca14:	f7ff fca8 	bl	2c368 <z_spin_lock_valid>
   2ca18:	b968      	cbnz	r0, 2ca36 <z_set_timeout_expiry+0x3a>
   2ca1a:	234a      	movs	r3, #74	; 0x4a
   2ca1c:	4a19      	ldr	r2, [pc, #100]	; (2ca84 <z_set_timeout_expiry+0x88>)
   2ca1e:	491a      	ldr	r1, [pc, #104]	; (2ca88 <z_set_timeout_expiry+0x8c>)
   2ca20:	481a      	ldr	r0, [pc, #104]	; (2ca8c <z_set_timeout_expiry+0x90>)
   2ca22:	f002 f9d8 	bl	2edd6 <printk>
   2ca26:	4916      	ldr	r1, [pc, #88]	; (2ca80 <z_set_timeout_expiry+0x84>)
   2ca28:	4819      	ldr	r0, [pc, #100]	; (2ca90 <z_set_timeout_expiry+0x94>)
   2ca2a:	f002 f9d4 	bl	2edd6 <printk>
   2ca2e:	214a      	movs	r1, #74	; 0x4a
   2ca30:	4814      	ldr	r0, [pc, #80]	; (2ca84 <z_set_timeout_expiry+0x88>)
   2ca32:	f002 fa16 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ca36:	4812      	ldr	r0, [pc, #72]	; (2ca80 <z_set_timeout_expiry+0x84>)
   2ca38:	f7ff fcb4 	bl	2c3a4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   2ca3c:	f7ff fe86 	bl	2c74c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2ca40:	2801      	cmp	r0, #1
   2ca42:	dd05      	ble.n	2ca50 <z_set_timeout_expiry+0x54>
   2ca44:	42a0      	cmp	r0, r4
   2ca46:	dd03      	ble.n	2ca50 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   2ca48:	4631      	mov	r1, r6
   2ca4a:	4620      	mov	r0, r4
   2ca4c:	f7f1 fffa 	bl	1ea44 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ca50:	480b      	ldr	r0, [pc, #44]	; (2ca80 <z_set_timeout_expiry+0x84>)
   2ca52:	f7ff fc97 	bl	2c384 <z_spin_unlock_valid>
   2ca56:	b968      	cbnz	r0, 2ca74 <z_set_timeout_expiry+0x78>
   2ca58:	235d      	movs	r3, #93	; 0x5d
   2ca5a:	4a0a      	ldr	r2, [pc, #40]	; (2ca84 <z_set_timeout_expiry+0x88>)
   2ca5c:	490d      	ldr	r1, [pc, #52]	; (2ca94 <z_set_timeout_expiry+0x98>)
   2ca5e:	480b      	ldr	r0, [pc, #44]	; (2ca8c <z_set_timeout_expiry+0x90>)
   2ca60:	f002 f9b9 	bl	2edd6 <printk>
   2ca64:	4906      	ldr	r1, [pc, #24]	; (2ca80 <z_set_timeout_expiry+0x84>)
   2ca66:	480c      	ldr	r0, [pc, #48]	; (2ca98 <z_set_timeout_expiry+0x9c>)
   2ca68:	f002 f9b5 	bl	2edd6 <printk>
   2ca6c:	215d      	movs	r1, #93	; 0x5d
   2ca6e:	4805      	ldr	r0, [pc, #20]	; (2ca84 <z_set_timeout_expiry+0x88>)
   2ca70:	f002 f9f7 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2ca74:	f385 8811 	msr	BASEPRI, r5
   2ca78:	f3bf 8f6f 	isb	sy
		}
	}
}
   2ca7c:	bd70      	pop	{r4, r5, r6, pc}
   2ca7e:	bf00      	nop
   2ca80:	200214e0 	.word	0x200214e0
   2ca84:	00031a38 	.word	0x00031a38
   2ca88:	00031a5e 	.word	0x00031a5e
   2ca8c:	000316d1 	.word	0x000316d1
   2ca90:	00031a73 	.word	0x00031a73
   2ca94:	00031a8b 	.word	0x00031a8b
   2ca98:	00031aa2 	.word	0x00031aa2

0002ca9c <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   2ca9c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2caa0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2caa2:	f7fe fe45 	bl	2b730 <z_time_slice>
	__asm__ volatile(
   2caa6:	f04f 0320 	mov.w	r3, #32
   2caaa:	f3ef 8511 	mrs	r5, BASEPRI
   2caae:	f383 8811 	msr	BASEPRI, r3
   2cab2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cab6:	4848      	ldr	r0, [pc, #288]	; (2cbd8 <z_clock_announce+0x13c>)
   2cab8:	f7ff fc56 	bl	2c368 <z_spin_lock_valid>
   2cabc:	b968      	cbnz	r0, 2cada <z_clock_announce+0x3e>
   2cabe:	234a      	movs	r3, #74	; 0x4a
   2cac0:	4a46      	ldr	r2, [pc, #280]	; (2cbdc <z_clock_announce+0x140>)
   2cac2:	4947      	ldr	r1, [pc, #284]	; (2cbe0 <z_clock_announce+0x144>)
   2cac4:	4847      	ldr	r0, [pc, #284]	; (2cbe4 <z_clock_announce+0x148>)
   2cac6:	f002 f986 	bl	2edd6 <printk>
   2caca:	4943      	ldr	r1, [pc, #268]	; (2cbd8 <z_clock_announce+0x13c>)
   2cacc:	4846      	ldr	r0, [pc, #280]	; (2cbe8 <z_clock_announce+0x14c>)
   2cace:	f002 f982 	bl	2edd6 <printk>
   2cad2:	214a      	movs	r1, #74	; 0x4a
   2cad4:	4841      	ldr	r0, [pc, #260]	; (2cbdc <z_clock_announce+0x140>)
   2cad6:	f002 f9c4 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2cada:	4f44      	ldr	r7, [pc, #272]	; (2cbec <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2cadc:	4e44      	ldr	r6, [pc, #272]	; (2cbf0 <z_clock_announce+0x154>)
   2cade:	46b9      	mov	r9, r7
   2cae0:	483d      	ldr	r0, [pc, #244]	; (2cbd8 <z_clock_announce+0x13c>)
	return list->head == list;
   2cae2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2cbfc <z_clock_announce+0x160>
   2cae6:	f7ff fc5d 	bl	2c3a4 <z_spin_lock_set_owner>
   2caea:	6034      	str	r4, [r6, #0]
   2caec:	f8d8 4000 	ldr.w	r4, [r8]
   2caf0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2caf2:	4544      	cmp	r4, r8
   2caf4:	e9d7 bc00 	ldrd	fp, ip, [r7]
   2caf8:	d005      	beq.n	2cb06 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2cafa:	b124      	cbz	r4, 2cb06 <z_clock_announce+0x6a>
   2cafc:	68a3      	ldr	r3, [r4, #8]
   2cafe:	4293      	cmp	r3, r2
   2cb00:	dd26      	ble.n	2cb50 <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2cb02:	1a9b      	subs	r3, r3, r2
   2cb04:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2cb06:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2cb08:	eb1b 0002 	adds.w	r0, fp, r2
   2cb0c:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   2cb10:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   2cb14:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   2cb16:	f7ff fe19 	bl	2c74c <next_timeout>
   2cb1a:	4621      	mov	r1, r4
   2cb1c:	f7f1 ff92 	bl	1ea44 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cb20:	482d      	ldr	r0, [pc, #180]	; (2cbd8 <z_clock_announce+0x13c>)
   2cb22:	f7ff fc2f 	bl	2c384 <z_spin_unlock_valid>
   2cb26:	b968      	cbnz	r0, 2cb44 <z_clock_announce+0xa8>
   2cb28:	235d      	movs	r3, #93	; 0x5d
   2cb2a:	4a2c      	ldr	r2, [pc, #176]	; (2cbdc <z_clock_announce+0x140>)
   2cb2c:	4931      	ldr	r1, [pc, #196]	; (2cbf4 <z_clock_announce+0x158>)
   2cb2e:	482d      	ldr	r0, [pc, #180]	; (2cbe4 <z_clock_announce+0x148>)
   2cb30:	f002 f951 	bl	2edd6 <printk>
   2cb34:	4928      	ldr	r1, [pc, #160]	; (2cbd8 <z_clock_announce+0x13c>)
   2cb36:	4830      	ldr	r0, [pc, #192]	; (2cbf8 <z_clock_announce+0x15c>)
   2cb38:	f002 f94d 	bl	2edd6 <printk>
   2cb3c:	215d      	movs	r1, #93	; 0x5d
   2cb3e:	4827      	ldr	r0, [pc, #156]	; (2cbdc <z_clock_announce+0x140>)
   2cb40:	f002 f98f 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2cb44:	f385 8811 	msr	BASEPRI, r5
   2cb48:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2cb4c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   2cb50:	eb1b 0003 	adds.w	r0, fp, r3
   2cb54:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   2cb58:	1ad3      	subs	r3, r2, r3
   2cb5a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   2cb5c:	2300      	movs	r3, #0
		curr_tick += dt;
   2cb5e:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   2cb62:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   2cb64:	4620      	mov	r0, r4
   2cb66:	f7ff fddd 	bl	2c724 <remove_timeout>
   2cb6a:	481b      	ldr	r0, [pc, #108]	; (2cbd8 <z_clock_announce+0x13c>)
   2cb6c:	f7ff fc0a 	bl	2c384 <z_spin_unlock_valid>
   2cb70:	b968      	cbnz	r0, 2cb8e <z_clock_announce+0xf2>
   2cb72:	235d      	movs	r3, #93	; 0x5d
   2cb74:	4a19      	ldr	r2, [pc, #100]	; (2cbdc <z_clock_announce+0x140>)
   2cb76:	491f      	ldr	r1, [pc, #124]	; (2cbf4 <z_clock_announce+0x158>)
   2cb78:	481a      	ldr	r0, [pc, #104]	; (2cbe4 <z_clock_announce+0x148>)
   2cb7a:	f002 f92c 	bl	2edd6 <printk>
   2cb7e:	4916      	ldr	r1, [pc, #88]	; (2cbd8 <z_clock_announce+0x13c>)
   2cb80:	481d      	ldr	r0, [pc, #116]	; (2cbf8 <z_clock_announce+0x15c>)
   2cb82:	f002 f928 	bl	2edd6 <printk>
   2cb86:	215d      	movs	r1, #93	; 0x5d
   2cb88:	4814      	ldr	r0, [pc, #80]	; (2cbdc <z_clock_announce+0x140>)
   2cb8a:	f002 f96a 	bl	2ee62 <assert_post_action>
   2cb8e:	f385 8811 	msr	BASEPRI, r5
   2cb92:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2cb96:	68e3      	ldr	r3, [r4, #12]
   2cb98:	4620      	mov	r0, r4
   2cb9a:	4798      	blx	r3
	__asm__ volatile(
   2cb9c:	f04f 0320 	mov.w	r3, #32
   2cba0:	f3ef 8511 	mrs	r5, BASEPRI
   2cba4:	f383 8811 	msr	BASEPRI, r3
   2cba8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cbac:	480a      	ldr	r0, [pc, #40]	; (2cbd8 <z_clock_announce+0x13c>)
   2cbae:	f7ff fbdb 	bl	2c368 <z_spin_lock_valid>
   2cbb2:	b968      	cbnz	r0, 2cbd0 <z_clock_announce+0x134>
   2cbb4:	234a      	movs	r3, #74	; 0x4a
   2cbb6:	4a09      	ldr	r2, [pc, #36]	; (2cbdc <z_clock_announce+0x140>)
   2cbb8:	4909      	ldr	r1, [pc, #36]	; (2cbe0 <z_clock_announce+0x144>)
   2cbba:	480a      	ldr	r0, [pc, #40]	; (2cbe4 <z_clock_announce+0x148>)
   2cbbc:	f002 f90b 	bl	2edd6 <printk>
   2cbc0:	4905      	ldr	r1, [pc, #20]	; (2cbd8 <z_clock_announce+0x13c>)
   2cbc2:	4809      	ldr	r0, [pc, #36]	; (2cbe8 <z_clock_announce+0x14c>)
   2cbc4:	f002 f907 	bl	2edd6 <printk>
   2cbc8:	214a      	movs	r1, #74	; 0x4a
   2cbca:	4804      	ldr	r0, [pc, #16]	; (2cbdc <z_clock_announce+0x140>)
   2cbcc:	f002 f949 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2cbd0:	4801      	ldr	r0, [pc, #4]	; (2cbd8 <z_clock_announce+0x13c>)
   2cbd2:	f7ff fbe7 	bl	2c3a4 <z_spin_lock_set_owner>
	return k;
   2cbd6:	e789      	b.n	2caec <z_clock_announce+0x50>
   2cbd8:	200214e0 	.word	0x200214e0
   2cbdc:	00031a38 	.word	0x00031a38
   2cbe0:	00031a5e 	.word	0x00031a5e
   2cbe4:	000316d1 	.word	0x000316d1
   2cbe8:	00031a73 	.word	0x00031a73
   2cbec:	20020000 	.word	0x20020000
   2cbf0:	200214dc 	.word	0x200214dc
   2cbf4:	00031a8b 	.word	0x00031a8b
   2cbf8:	00031aa2 	.word	0x00031aa2
   2cbfc:	20026754 	.word	0x20026754

0002cc00 <z_tick_get>:

s64_t z_tick_get(void)
{
   2cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cc04:	f04f 0320 	mov.w	r3, #32
   2cc08:	f3ef 8611 	mrs	r6, BASEPRI
   2cc0c:	f383 8811 	msr	BASEPRI, r3
   2cc10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cc14:	481b      	ldr	r0, [pc, #108]	; (2cc84 <z_tick_get+0x84>)
   2cc16:	f7ff fba7 	bl	2c368 <z_spin_lock_valid>
   2cc1a:	b968      	cbnz	r0, 2cc38 <z_tick_get+0x38>
   2cc1c:	234a      	movs	r3, #74	; 0x4a
   2cc1e:	4a1a      	ldr	r2, [pc, #104]	; (2cc88 <z_tick_get+0x88>)
   2cc20:	491a      	ldr	r1, [pc, #104]	; (2cc8c <z_tick_get+0x8c>)
   2cc22:	481b      	ldr	r0, [pc, #108]	; (2cc90 <z_tick_get+0x90>)
   2cc24:	f002 f8d7 	bl	2edd6 <printk>
   2cc28:	4916      	ldr	r1, [pc, #88]	; (2cc84 <z_tick_get+0x84>)
   2cc2a:	481a      	ldr	r0, [pc, #104]	; (2cc94 <z_tick_get+0x94>)
   2cc2c:	f002 f8d3 	bl	2edd6 <printk>
   2cc30:	214a      	movs	r1, #74	; 0x4a
   2cc32:	4815      	ldr	r0, [pc, #84]	; (2cc88 <z_tick_get+0x88>)
   2cc34:	f002 f915 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2cc38:	4812      	ldr	r0, [pc, #72]	; (2cc84 <z_tick_get+0x84>)
   2cc3a:	f7ff fbb3 	bl	2c3a4 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2cc3e:	f7f1 ff8f 	bl	1eb60 <z_clock_elapsed>
   2cc42:	4b15      	ldr	r3, [pc, #84]	; (2cc98 <z_tick_get+0x98>)
   2cc44:	e9d3 4500 	ldrd	r4, r5, [r3]
   2cc48:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cc4a:	480e      	ldr	r0, [pc, #56]	; (2cc84 <z_tick_get+0x84>)
   2cc4c:	f145 0800 	adc.w	r8, r5, #0
   2cc50:	f7ff fb98 	bl	2c384 <z_spin_unlock_valid>
   2cc54:	b968      	cbnz	r0, 2cc72 <z_tick_get+0x72>
   2cc56:	235d      	movs	r3, #93	; 0x5d
   2cc58:	4a0b      	ldr	r2, [pc, #44]	; (2cc88 <z_tick_get+0x88>)
   2cc5a:	4910      	ldr	r1, [pc, #64]	; (2cc9c <z_tick_get+0x9c>)
   2cc5c:	480c      	ldr	r0, [pc, #48]	; (2cc90 <z_tick_get+0x90>)
   2cc5e:	f002 f8ba 	bl	2edd6 <printk>
   2cc62:	4908      	ldr	r1, [pc, #32]	; (2cc84 <z_tick_get+0x84>)
   2cc64:	480e      	ldr	r0, [pc, #56]	; (2cca0 <z_tick_get+0xa0>)
   2cc66:	f002 f8b6 	bl	2edd6 <printk>
   2cc6a:	215d      	movs	r1, #93	; 0x5d
   2cc6c:	4806      	ldr	r0, [pc, #24]	; (2cc88 <z_tick_get+0x88>)
   2cc6e:	f002 f8f8 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2cc72:	f386 8811 	msr	BASEPRI, r6
   2cc76:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2cc7a:	4638      	mov	r0, r7
   2cc7c:	4641      	mov	r1, r8
   2cc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cc82:	bf00      	nop
   2cc84:	200214e0 	.word	0x200214e0
   2cc88:	00031a38 	.word	0x00031a38
   2cc8c:	00031a5e 	.word	0x00031a5e
   2cc90:	000316d1 	.word	0x000316d1
   2cc94:	00031a73 	.word	0x00031a73
   2cc98:	20020000 	.word	0x20020000
   2cc9c:	00031a8b 	.word	0x00031a8b
   2cca0:	00031aa2 	.word	0x00031aa2

0002cca4 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   2cca4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2cca6:	6883      	ldr	r3, [r0, #8]
{
   2cca8:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   2ccaa:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   2ccac:	b964      	cbnz	r4, 2ccc8 <k_poll_poller_cb+0x24>
   2ccae:	4915      	ldr	r1, [pc, #84]	; (2cd04 <k_poll_poller_cb+0x60>)
   2ccb0:	23e0      	movs	r3, #224	; 0xe0
   2ccb2:	4a15      	ldr	r2, [pc, #84]	; (2cd08 <k_poll_poller_cb+0x64>)
   2ccb4:	4815      	ldr	r0, [pc, #84]	; (2cd0c <k_poll_poller_cb+0x68>)
   2ccb6:	f002 f88e 	bl	2edd6 <printk>
   2ccba:	4815      	ldr	r0, [pc, #84]	; (2cd10 <k_poll_poller_cb+0x6c>)
   2ccbc:	f002 f88b 	bl	2edd6 <printk>
   2ccc0:	21e0      	movs	r1, #224	; 0xe0
   2ccc2:	4811      	ldr	r0, [pc, #68]	; (2cd08 <k_poll_poller_cb+0x64>)
   2ccc4:	f002 f8cd 	bl	2ee62 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   2ccc8:	7b63      	ldrb	r3, [r4, #13]
   2ccca:	079a      	lsls	r2, r3, #30
   2cccc:	d401      	bmi.n	2ccd2 <k_poll_poller_cb+0x2e>
		return 0;
   2ccce:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   2ccd0:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   2ccd2:	6a23      	ldr	r3, [r4, #32]
   2ccd4:	3302      	adds	r3, #2
   2ccd6:	d012      	beq.n	2ccfe <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   2ccd8:	4620      	mov	r0, r4
   2ccda:	f7fe faa9 	bl	2b230 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2ccde:	2d08      	cmp	r5, #8
   2cce0:	bf0c      	ite	eq
   2cce2:	f06f 0303 	mvneq.w	r3, #3
   2cce6:	2300      	movne	r3, #0
   2cce8:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2ccea:	7b63      	ldrb	r3, [r4, #13]
   2ccec:	06db      	lsls	r3, r3, #27
   2ccee:	d1ee      	bne.n	2ccce <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   2ccf0:	69a5      	ldr	r5, [r4, #24]
   2ccf2:	2d00      	cmp	r5, #0
   2ccf4:	d1eb      	bne.n	2ccce <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   2ccf6:	4620      	mov	r0, r4
   2ccf8:	f7fe fba2 	bl	2b440 <z_add_thread_to_ready_q>
	return 0;
   2ccfc:	e7e7      	b.n	2ccce <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   2ccfe:	f06f 000a 	mvn.w	r0, #10
   2cd02:	e7e5      	b.n	2ccd0 <k_poll_poller_cb+0x2c>
   2cd04:	000333a7 	.word	0x000333a7
   2cd08:	00033386 	.word	0x00033386
   2cd0c:	000316d1 	.word	0x000316d1
   2cd10:	000333bd 	.word	0x000333bd

0002cd14 <clear_event_registrations>:
{
   2cd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cd18:	2414      	movs	r4, #20
   2cd1a:	4680      	mov	r8, r0
   2cd1c:	4617      	mov	r7, r2
	while (num_events--) {
   2cd1e:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2cd22:	4d48      	ldr	r5, [pc, #288]	; (2ce44 <clear_event_registrations+0x130>)
   2cd24:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2ce80 <clear_event_registrations+0x16c>
   2cd28:	4e47      	ldr	r6, [pc, #284]	; (2ce48 <clear_event_registrations+0x134>)
	while (num_events--) {
   2cd2a:	4544      	cmp	r4, r8
   2cd2c:	d101      	bne.n	2cd32 <clear_event_registrations+0x1e>
}
   2cd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2cd32:	2300      	movs	r3, #0
   2cd34:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2cd38:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2cd3c:	f003 030f 	and.w	r3, r3, #15
   2cd40:	2b04      	cmp	r3, #4
   2cd42:	d83d      	bhi.n	2cdc0 <clear_event_registrations+0xac>
   2cd44:	e8df f003 	tbb	[pc, r3]
   2cd48:	3c032d49 	.word	0x3c032d49
   2cd4c:	1e          	.byte	0x1e
   2cd4d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2cd4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2cd52:	b963      	cbnz	r3, 2cd6e <clear_event_registrations+0x5a>
   2cd54:	493d      	ldr	r1, [pc, #244]	; (2ce4c <clear_event_registrations+0x138>)
   2cd56:	2396      	movs	r3, #150	; 0x96
   2cd58:	462a      	mov	r2, r5
   2cd5a:	4630      	mov	r0, r6
   2cd5c:	f002 f83b 	bl	2edd6 <printk>
   2cd60:	483b      	ldr	r0, [pc, #236]	; (2ce50 <clear_event_registrations+0x13c>)
   2cd62:	f002 f838 	bl	2edd6 <printk>
   2cd66:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2cd68:	4628      	mov	r0, r5
   2cd6a:	f002 f87a 	bl	2ee62 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2cd6e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2cd72:	b393      	cbz	r3, 2cdda <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   2cd74:	f854 2c10 	ldr.w	r2, [r4, #-16]
   2cd78:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2cd7a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2cd7c:	2300      	movs	r3, #0
	node->prev = NULL;
   2cd7e:	e944 3305 	strd	r3, r3, [r4, #-20]
   2cd82:	e02a      	b.n	2cdda <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2cd84:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2cd88:	2b00      	cmp	r3, #0
   2cd8a:	d1f0      	bne.n	2cd6e <clear_event_registrations+0x5a>
   2cd8c:	4931      	ldr	r1, [pc, #196]	; (2ce54 <clear_event_registrations+0x140>)
   2cd8e:	239a      	movs	r3, #154	; 0x9a
   2cd90:	462a      	mov	r2, r5
   2cd92:	4630      	mov	r0, r6
   2cd94:	f002 f81f 	bl	2edd6 <printk>
   2cd98:	482f      	ldr	r0, [pc, #188]	; (2ce58 <clear_event_registrations+0x144>)
   2cd9a:	f002 f81c 	bl	2edd6 <printk>
   2cd9e:	219a      	movs	r1, #154	; 0x9a
   2cda0:	e7e2      	b.n	2cd68 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2cda2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2cda6:	2b00      	cmp	r3, #0
   2cda8:	d1e1      	bne.n	2cd6e <clear_event_registrations+0x5a>
   2cdaa:	492c      	ldr	r1, [pc, #176]	; (2ce5c <clear_event_registrations+0x148>)
   2cdac:	239e      	movs	r3, #158	; 0x9e
   2cdae:	462a      	mov	r2, r5
   2cdb0:	4630      	mov	r0, r6
   2cdb2:	f002 f810 	bl	2edd6 <printk>
   2cdb6:	482a      	ldr	r0, [pc, #168]	; (2ce60 <clear_event_registrations+0x14c>)
   2cdb8:	f002 f80d 	bl	2edd6 <printk>
   2cdbc:	219e      	movs	r1, #158	; 0x9e
   2cdbe:	e7d3      	b.n	2cd68 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   2cdc0:	4649      	mov	r1, r9
   2cdc2:	23a5      	movs	r3, #165	; 0xa5
   2cdc4:	462a      	mov	r2, r5
   2cdc6:	4630      	mov	r0, r6
   2cdc8:	f002 f805 	bl	2edd6 <printk>
   2cdcc:	4825      	ldr	r0, [pc, #148]	; (2ce64 <clear_event_registrations+0x150>)
   2cdce:	f002 f802 	bl	2edd6 <printk>
   2cdd2:	21a5      	movs	r1, #165	; 0xa5
   2cdd4:	4628      	mov	r0, r5
   2cdd6:	f002 f844 	bl	2ee62 <assert_post_action>
   2cdda:	4823      	ldr	r0, [pc, #140]	; (2ce68 <clear_event_registrations+0x154>)
   2cddc:	f7ff fad2 	bl	2c384 <z_spin_unlock_valid>
   2cde0:	b968      	cbnz	r0, 2cdfe <clear_event_registrations+0xea>
   2cde2:	235d      	movs	r3, #93	; 0x5d
   2cde4:	4a21      	ldr	r2, [pc, #132]	; (2ce6c <clear_event_registrations+0x158>)
   2cde6:	4922      	ldr	r1, [pc, #136]	; (2ce70 <clear_event_registrations+0x15c>)
   2cde8:	4630      	mov	r0, r6
   2cdea:	f001 fff4 	bl	2edd6 <printk>
   2cdee:	491e      	ldr	r1, [pc, #120]	; (2ce68 <clear_event_registrations+0x154>)
   2cdf0:	4820      	ldr	r0, [pc, #128]	; (2ce74 <clear_event_registrations+0x160>)
   2cdf2:	f001 fff0 	bl	2edd6 <printk>
   2cdf6:	215d      	movs	r1, #93	; 0x5d
   2cdf8:	481c      	ldr	r0, [pc, #112]	; (2ce6c <clear_event_registrations+0x158>)
   2cdfa:	f002 f832 	bl	2ee62 <assert_post_action>
   2cdfe:	f387 8811 	msr	BASEPRI, r7
   2ce02:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2ce06:	f04f 0320 	mov.w	r3, #32
   2ce0a:	f3ef 8711 	mrs	r7, BASEPRI
   2ce0e:	f383 8811 	msr	BASEPRI, r3
   2ce12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ce16:	4814      	ldr	r0, [pc, #80]	; (2ce68 <clear_event_registrations+0x154>)
   2ce18:	f7ff faa6 	bl	2c368 <z_spin_lock_valid>
   2ce1c:	b968      	cbnz	r0, 2ce3a <clear_event_registrations+0x126>
   2ce1e:	234a      	movs	r3, #74	; 0x4a
   2ce20:	4a12      	ldr	r2, [pc, #72]	; (2ce6c <clear_event_registrations+0x158>)
   2ce22:	4915      	ldr	r1, [pc, #84]	; (2ce78 <clear_event_registrations+0x164>)
   2ce24:	4630      	mov	r0, r6
   2ce26:	f001 ffd6 	bl	2edd6 <printk>
   2ce2a:	490f      	ldr	r1, [pc, #60]	; (2ce68 <clear_event_registrations+0x154>)
   2ce2c:	4813      	ldr	r0, [pc, #76]	; (2ce7c <clear_event_registrations+0x168>)
   2ce2e:	f001 ffd2 	bl	2edd6 <printk>
   2ce32:	214a      	movs	r1, #74	; 0x4a
   2ce34:	480d      	ldr	r0, [pc, #52]	; (2ce6c <clear_event_registrations+0x158>)
   2ce36:	f002 f814 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ce3a:	480b      	ldr	r0, [pc, #44]	; (2ce68 <clear_event_registrations+0x154>)
   2ce3c:	f7ff fab2 	bl	2c3a4 <z_spin_lock_set_owner>
	return k;
   2ce40:	3c14      	subs	r4, #20
   2ce42:	e772      	b.n	2cd2a <clear_event_registrations+0x16>
   2ce44:	00033386 	.word	0x00033386
   2ce48:	000316d1 	.word	0x000316d1
   2ce4c:	00033239 	.word	0x00033239
   2ce50:	00033253 	.word	0x00033253
   2ce54:	00033268 	.word	0x00033268
   2ce58:	00033284 	.word	0x00033284
   2ce5c:	00033295 	.word	0x00033295
   2ce60:	000332b2 	.word	0x000332b2
   2ce64:	000332c9 	.word	0x000332c9
   2ce68:	200214e4 	.word	0x200214e4
   2ce6c:	00031a38 	.word	0x00031a38
   2ce70:	00031a8b 	.word	0x00031a8b
   2ce74:	00031aa2 	.word	0x00031aa2
   2ce78:	00031a5e 	.word	0x00031a5e
   2ce7c:	00031a73 	.word	0x00031a73
   2ce80:	00033029 	.word	0x00033029

0002ce84 <register_events>:
{
   2ce84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2ce88:	2700      	movs	r7, #0
{
   2ce8a:	468a      	mov	sl, r1
   2ce8c:	4615      	mov	r5, r2
   2ce8e:	4604      	mov	r4, r0
	int events_registered = 0;
   2ce90:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ce92:	4e69      	ldr	r6, [pc, #420]	; (2d038 <register_events+0x1b4>)
   2ce94:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2d078 <register_events+0x1f4>
{
   2ce98:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2ce9a:	4557      	cmp	r7, sl
   2ce9c:	db03      	blt.n	2cea6 <register_events+0x22>
}
   2ce9e:	4648      	mov	r0, r9
   2cea0:	b003      	add	sp, #12
   2cea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cea6:	f04f 0320 	mov.w	r3, #32
   2ceaa:	f3ef 8b11 	mrs	fp, BASEPRI
   2ceae:	f383 8811 	msr	BASEPRI, r3
   2ceb2:	f3bf 8f6f 	isb	sy
   2ceb6:	4630      	mov	r0, r6
   2ceb8:	f7ff fa56 	bl	2c368 <z_spin_lock_valid>
   2cebc:	b968      	cbnz	r0, 2ceda <register_events+0x56>
   2cebe:	234a      	movs	r3, #74	; 0x4a
   2cec0:	4642      	mov	r2, r8
   2cec2:	495e      	ldr	r1, [pc, #376]	; (2d03c <register_events+0x1b8>)
   2cec4:	485e      	ldr	r0, [pc, #376]	; (2d040 <register_events+0x1bc>)
   2cec6:	f001 ff86 	bl	2edd6 <printk>
   2ceca:	4631      	mov	r1, r6
   2cecc:	485d      	ldr	r0, [pc, #372]	; (2d044 <register_events+0x1c0>)
   2cece:	f001 ff82 	bl	2edd6 <printk>
   2ced2:	214a      	movs	r1, #74	; 0x4a
   2ced4:	4640      	mov	r0, r8
   2ced6:	f001 ffc4 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ceda:	4630      	mov	r0, r6
   2cedc:	f7ff fa62 	bl	2c3a4 <z_spin_lock_set_owner>
	switch (event->type) {
   2cee0:	7b63      	ldrb	r3, [r4, #13]
   2cee2:	f003 030f 	and.w	r3, r3, #15
   2cee6:	2b04      	cmp	r3, #4
   2cee8:	d844      	bhi.n	2cf74 <register_events+0xf0>
   2ceea:	e8df f003 	tbb	[pc, r3]
   2ceee:	3d2d      	.short	0x3d2d
   2cef0:	4303      	.short	0x4303
   2cef2:	2a          	.byte	0x2a
   2cef3:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   2cef4:	6923      	ldr	r3, [r4, #16]
   2cef6:	689b      	ldr	r3, [r3, #8]
   2cef8:	b333      	cbz	r3, 2cf48 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2cefa:	2202      	movs	r2, #2
	event->poller = NULL;
   2cefc:	2100      	movs	r1, #0
	event->state |= state;
   2cefe:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   2cf00:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2cf02:	f3c3 3004 	ubfx	r0, r3, #12, #5
   2cf06:	4302      	orrs	r2, r0
   2cf08:	f362 3310 	bfi	r3, r2, #12, #5
   2cf0c:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2cf0e:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cf10:	4630      	mov	r0, r6
   2cf12:	f7ff fa37 	bl	2c384 <z_spin_unlock_valid>
   2cf16:	b968      	cbnz	r0, 2cf34 <register_events+0xb0>
   2cf18:	235d      	movs	r3, #93	; 0x5d
   2cf1a:	4642      	mov	r2, r8
   2cf1c:	494a      	ldr	r1, [pc, #296]	; (2d048 <register_events+0x1c4>)
   2cf1e:	4848      	ldr	r0, [pc, #288]	; (2d040 <register_events+0x1bc>)
   2cf20:	f001 ff59 	bl	2edd6 <printk>
   2cf24:	4631      	mov	r1, r6
   2cf26:	4849      	ldr	r0, [pc, #292]	; (2d04c <register_events+0x1c8>)
   2cf28:	f001 ff55 	bl	2edd6 <printk>
   2cf2c:	215d      	movs	r1, #93	; 0x5d
   2cf2e:	4640      	mov	r0, r8
   2cf30:	f001 ff97 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2cf34:	f38b 8811 	msr	BASEPRI, fp
   2cf38:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2cf3c:	3701      	adds	r7, #1
   2cf3e:	3414      	adds	r4, #20
   2cf40:	e7ab      	b.n	2ce9a <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   2cf42:	6923      	ldr	r3, [r4, #16]
   2cf44:	681b      	ldr	r3, [r3, #0]
   2cf46:	bb33      	cbnz	r3, 2cf96 <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   2cf48:	9b01      	ldr	r3, [sp, #4]
   2cf4a:	2b00      	cmp	r3, #0
   2cf4c:	d1e0      	bne.n	2cf10 <register_events+0x8c>
   2cf4e:	782b      	ldrb	r3, [r5, #0]
   2cf50:	2b00      	cmp	r3, #0
   2cf52:	d0dd      	beq.n	2cf10 <register_events+0x8c>
	switch (event->type) {
   2cf54:	7b63      	ldrb	r3, [r4, #13]
   2cf56:	f003 030f 	and.w	r3, r3, #15
   2cf5a:	2b04      	cmp	r3, #4
   2cf5c:	d85d      	bhi.n	2d01a <register_events+0x196>
   2cf5e:	e8df f003 	tbb	[pc, r3]
   2cf62:	4931      	.short	0x4931
   2cf64:	5c1c      	.short	0x5c1c
   2cf66:	35          	.byte	0x35
   2cf67:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2cf68:	6923      	ldr	r3, [r4, #16]
   2cf6a:	689b      	ldr	r3, [r3, #8]
   2cf6c:	2b00      	cmp	r3, #0
   2cf6e:	d0eb      	beq.n	2cf48 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   2cf70:	2201      	movs	r2, #1
   2cf72:	e7c3      	b.n	2cefc <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2cf74:	2350      	movs	r3, #80	; 0x50
   2cf76:	4a36      	ldr	r2, [pc, #216]	; (2d050 <register_events+0x1cc>)
   2cf78:	4936      	ldr	r1, [pc, #216]	; (2d054 <register_events+0x1d0>)
   2cf7a:	4831      	ldr	r0, [pc, #196]	; (2d040 <register_events+0x1bc>)
   2cf7c:	f001 ff2b 	bl	2edd6 <printk>
   2cf80:	7b61      	ldrb	r1, [r4, #13]
   2cf82:	4835      	ldr	r0, [pc, #212]	; (2d058 <register_events+0x1d4>)
   2cf84:	f001 010f 	and.w	r1, r1, #15
   2cf88:	f001 ff25 	bl	2edd6 <printk>
   2cf8c:	2150      	movs	r1, #80	; 0x50
   2cf8e:	4830      	ldr	r0, [pc, #192]	; (2d050 <register_events+0x1cc>)
   2cf90:	f001 ff67 	bl	2ee62 <assert_post_action>
		break;
   2cf94:	e7d8      	b.n	2cf48 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2cf96:	2204      	movs	r2, #4
   2cf98:	e7b0      	b.n	2cefc <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2cf9a:	6923      	ldr	r3, [r4, #16]
   2cf9c:	b963      	cbnz	r3, 2cfb8 <register_events+0x134>
   2cf9e:	492f      	ldr	r1, [pc, #188]	; (2d05c <register_events+0x1d8>)
   2cfa0:	2375      	movs	r3, #117	; 0x75
   2cfa2:	4a2b      	ldr	r2, [pc, #172]	; (2d050 <register_events+0x1cc>)
   2cfa4:	4826      	ldr	r0, [pc, #152]	; (2d040 <register_events+0x1bc>)
   2cfa6:	f001 ff16 	bl	2edd6 <printk>
   2cfaa:	482d      	ldr	r0, [pc, #180]	; (2d060 <register_events+0x1dc>)
   2cfac:	f001 ff13 	bl	2edd6 <printk>
   2cfb0:	2175      	movs	r1, #117	; 0x75
   2cfb2:	4827      	ldr	r0, [pc, #156]	; (2d050 <register_events+0x1cc>)
   2cfb4:	f001 ff55 	bl	2ee62 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2cfb8:	462a      	mov	r2, r5
   2cfba:	4621      	mov	r1, r4
   2cfbc:	6920      	ldr	r0, [r4, #16]
   2cfbe:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2cfc0:	f002 fecc 	bl	2fd5c <add_event>
	event->poller = poller;
   2cfc4:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   2cfc6:	f109 0901 	add.w	r9, r9, #1
   2cfca:	e7a1      	b.n	2cf10 <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2cfcc:	6923      	ldr	r3, [r4, #16]
   2cfce:	b963      	cbnz	r3, 2cfea <register_events+0x166>
   2cfd0:	4924      	ldr	r1, [pc, #144]	; (2d064 <register_events+0x1e0>)
   2cfd2:	2379      	movs	r3, #121	; 0x79
   2cfd4:	4a1e      	ldr	r2, [pc, #120]	; (2d050 <register_events+0x1cc>)
   2cfd6:	481a      	ldr	r0, [pc, #104]	; (2d040 <register_events+0x1bc>)
   2cfd8:	f001 fefd 	bl	2edd6 <printk>
   2cfdc:	4822      	ldr	r0, [pc, #136]	; (2d068 <register_events+0x1e4>)
   2cfde:	f001 fefa 	bl	2edd6 <printk>
   2cfe2:	2179      	movs	r1, #121	; 0x79
   2cfe4:	481a      	ldr	r0, [pc, #104]	; (2d050 <register_events+0x1cc>)
   2cfe6:	f001 ff3c 	bl	2ee62 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   2cfea:	6920      	ldr	r0, [r4, #16]
   2cfec:	462a      	mov	r2, r5
   2cfee:	4621      	mov	r1, r4
   2cff0:	300c      	adds	r0, #12
   2cff2:	e7e5      	b.n	2cfc0 <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2cff4:	6923      	ldr	r3, [r4, #16]
   2cff6:	b963      	cbnz	r3, 2d012 <register_events+0x18e>
   2cff8:	491c      	ldr	r1, [pc, #112]	; (2d06c <register_events+0x1e8>)
   2cffa:	237d      	movs	r3, #125	; 0x7d
   2cffc:	4a14      	ldr	r2, [pc, #80]	; (2d050 <register_events+0x1cc>)
   2cffe:	4810      	ldr	r0, [pc, #64]	; (2d040 <register_events+0x1bc>)
   2d000:	f001 fee9 	bl	2edd6 <printk>
   2d004:	481a      	ldr	r0, [pc, #104]	; (2d070 <register_events+0x1ec>)
   2d006:	f001 fee6 	bl	2edd6 <printk>
   2d00a:	217d      	movs	r1, #125	; 0x7d
   2d00c:	4810      	ldr	r0, [pc, #64]	; (2d050 <register_events+0x1cc>)
   2d00e:	f001 ff28 	bl	2ee62 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2d012:	462a      	mov	r2, r5
   2d014:	4621      	mov	r1, r4
   2d016:	6920      	ldr	r0, [r4, #16]
   2d018:	e7d2      	b.n	2cfc0 <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   2d01a:	2384      	movs	r3, #132	; 0x84
   2d01c:	4a0c      	ldr	r2, [pc, #48]	; (2d050 <register_events+0x1cc>)
   2d01e:	490d      	ldr	r1, [pc, #52]	; (2d054 <register_events+0x1d0>)
   2d020:	4807      	ldr	r0, [pc, #28]	; (2d040 <register_events+0x1bc>)
   2d022:	f001 fed8 	bl	2edd6 <printk>
   2d026:	4813      	ldr	r0, [pc, #76]	; (2d074 <register_events+0x1f0>)
   2d028:	f001 fed5 	bl	2edd6 <printk>
   2d02c:	2184      	movs	r1, #132	; 0x84
   2d02e:	4808      	ldr	r0, [pc, #32]	; (2d050 <register_events+0x1cc>)
   2d030:	f001 ff17 	bl	2ee62 <assert_post_action>
		break;
   2d034:	e7c6      	b.n	2cfc4 <register_events+0x140>
   2d036:	bf00      	nop
   2d038:	200214e4 	.word	0x200214e4
   2d03c:	00031a5e 	.word	0x00031a5e
   2d040:	000316d1 	.word	0x000316d1
   2d044:	00031a73 	.word	0x00031a73
   2d048:	00031a8b 	.word	0x00031a8b
   2d04c:	00031aa2 	.word	0x00031aa2
   2d050:	00033386 	.word	0x00033386
   2d054:	00033029 	.word	0x00033029
   2d058:	000333dc 	.word	0x000333dc
   2d05c:	00033239 	.word	0x00033239
   2d060:	00033253 	.word	0x00033253
   2d064:	00033268 	.word	0x00033268
   2d068:	00033284 	.word	0x00033284
   2d06c:	00033295 	.word	0x00033295
   2d070:	000332b2 	.word	0x000332b2
   2d074:	000332c9 	.word	0x000332c9
   2d078:	00031a38 	.word	0x00031a38

0002d07c <k_poll_event_init>:
{
   2d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d07e:	4604      	mov	r4, r0
   2d080:	460f      	mov	r7, r1
   2d082:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2d084:	4616      	mov	r6, r2
   2d086:	b162      	cbz	r2, 2d0a2 <k_poll_event_init+0x26>
   2d088:	491c      	ldr	r1, [pc, #112]	; (2d0fc <k_poll_event_init+0x80>)
   2d08a:	232a      	movs	r3, #42	; 0x2a
   2d08c:	4a1c      	ldr	r2, [pc, #112]	; (2d100 <k_poll_event_init+0x84>)
   2d08e:	481d      	ldr	r0, [pc, #116]	; (2d104 <k_poll_event_init+0x88>)
   2d090:	f001 fea1 	bl	2edd6 <printk>
   2d094:	481c      	ldr	r0, [pc, #112]	; (2d108 <k_poll_event_init+0x8c>)
   2d096:	f001 fe9e 	bl	2edd6 <printk>
   2d09a:	212a      	movs	r1, #42	; 0x2a
   2d09c:	4818      	ldr	r0, [pc, #96]	; (2d100 <k_poll_event_init+0x84>)
   2d09e:	f001 fee0 	bl	2ee62 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2d0a2:	2f0f      	cmp	r7, #15
   2d0a4:	d90c      	bls.n	2d0c0 <k_poll_event_init+0x44>
   2d0a6:	4919      	ldr	r1, [pc, #100]	; (2d10c <k_poll_event_init+0x90>)
   2d0a8:	232b      	movs	r3, #43	; 0x2b
   2d0aa:	4a15      	ldr	r2, [pc, #84]	; (2d100 <k_poll_event_init+0x84>)
   2d0ac:	4815      	ldr	r0, [pc, #84]	; (2d104 <k_poll_event_init+0x88>)
   2d0ae:	f001 fe92 	bl	2edd6 <printk>
   2d0b2:	4817      	ldr	r0, [pc, #92]	; (2d110 <k_poll_event_init+0x94>)
   2d0b4:	f001 fe8f 	bl	2edd6 <printk>
   2d0b8:	212b      	movs	r1, #43	; 0x2b
   2d0ba:	4811      	ldr	r0, [pc, #68]	; (2d100 <k_poll_event_init+0x84>)
   2d0bc:	f001 fed1 	bl	2ee62 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   2d0c0:	b965      	cbnz	r5, 2d0dc <k_poll_event_init+0x60>
   2d0c2:	4914      	ldr	r1, [pc, #80]	; (2d114 <k_poll_event_init+0x98>)
   2d0c4:	232c      	movs	r3, #44	; 0x2c
   2d0c6:	4a0e      	ldr	r2, [pc, #56]	; (2d100 <k_poll_event_init+0x84>)
   2d0c8:	480e      	ldr	r0, [pc, #56]	; (2d104 <k_poll_event_init+0x88>)
   2d0ca:	f001 fe84 	bl	2edd6 <printk>
   2d0ce:	4812      	ldr	r0, [pc, #72]	; (2d118 <k_poll_event_init+0x9c>)
   2d0d0:	f001 fe81 	bl	2edd6 <printk>
   2d0d4:	212c      	movs	r1, #44	; 0x2c
   2d0d6:	480a      	ldr	r0, [pc, #40]	; (2d100 <k_poll_event_init+0x84>)
   2d0d8:	f001 fec3 	bl	2ee62 <assert_post_action>
	event->type = type;
   2d0dc:	7b63      	ldrb	r3, [r4, #13]
   2d0de:	f367 0303 	bfi	r3, r7, #0, #4
   2d0e2:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   2d0e4:	7ba3      	ldrb	r3, [r4, #14]
   2d0e6:	f366 0341 	bfi	r3, r6, #1, #1
   2d0ea:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   2d0ec:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   2d0ee:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   2d0f0:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   2d0f2:	4b0a      	ldr	r3, [pc, #40]	; (2d11c <k_poll_event_init+0xa0>)
   2d0f4:	4013      	ands	r3, r2
	event->obj = obj;
   2d0f6:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   2d0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d0fc:	000332df 	.word	0x000332df
   2d100:	00033386 	.word	0x00033386
   2d104:	000316d1 	.word	0x000316d1
   2d108:	000332ff 	.word	0x000332ff
   2d10c:	00033325 	.word	0x00033325
   2d110:	00033349 	.word	0x00033349
   2d114:	00033359 	.word	0x00033359
   2d118:	0003336c 	.word	0x0003336c
   2d11c:	00020fff 	.word	0x00020fff

0002d120 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   2d120:	2301      	movs	r3, #1
{
   2d122:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d124:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   2d126:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   2d12a:	4b70      	ldr	r3, [pc, #448]	; (2d2ec <z_impl_k_poll+0x1cc>)
{
   2d12c:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   2d12e:	689b      	ldr	r3, [r3, #8]
{
   2d130:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   2d132:	9304      	str	r3, [sp, #16]
   2d134:	4b6e      	ldr	r3, [pc, #440]	; (2d2f0 <z_impl_k_poll+0x1d0>)
{
   2d136:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   2d138:	9305      	str	r3, [sp, #20]
   2d13a:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   2d13e:	b163      	cbz	r3, 2d15a <z_impl_k_poll+0x3a>
   2d140:	496c      	ldr	r1, [pc, #432]	; (2d2f4 <z_impl_k_poll+0x1d4>)
   2d142:	23ff      	movs	r3, #255	; 0xff
   2d144:	4a6c      	ldr	r2, [pc, #432]	; (2d2f8 <z_impl_k_poll+0x1d8>)
   2d146:	486d      	ldr	r0, [pc, #436]	; (2d2fc <z_impl_k_poll+0x1dc>)
   2d148:	f001 fe45 	bl	2edd6 <printk>
   2d14c:	486c      	ldr	r0, [pc, #432]	; (2d300 <z_impl_k_poll+0x1e0>)
   2d14e:	f001 fe42 	bl	2edd6 <printk>
   2d152:	21ff      	movs	r1, #255	; 0xff
   2d154:	4868      	ldr	r0, [pc, #416]	; (2d2f8 <z_impl_k_poll+0x1d8>)
   2d156:	f001 fe84 	bl	2ee62 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2d15a:	b974      	cbnz	r4, 2d17a <z_impl_k_poll+0x5a>
   2d15c:	4969      	ldr	r1, [pc, #420]	; (2d304 <z_impl_k_poll+0x1e4>)
   2d15e:	f44f 7380 	mov.w	r3, #256	; 0x100
   2d162:	4a65      	ldr	r2, [pc, #404]	; (2d2f8 <z_impl_k_poll+0x1d8>)
   2d164:	4865      	ldr	r0, [pc, #404]	; (2d2fc <z_impl_k_poll+0x1dc>)
   2d166:	f001 fe36 	bl	2edd6 <printk>
   2d16a:	4867      	ldr	r0, [pc, #412]	; (2d308 <z_impl_k_poll+0x1e8>)
   2d16c:	f001 fe33 	bl	2edd6 <printk>
   2d170:	f44f 7180 	mov.w	r1, #256	; 0x100
   2d174:	4860      	ldr	r0, [pc, #384]	; (2d2f8 <z_impl_k_poll+0x1d8>)
   2d176:	f001 fe74 	bl	2ee62 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2d17a:	2d00      	cmp	r5, #0
   2d17c:	da0e      	bge.n	2d19c <z_impl_k_poll+0x7c>
   2d17e:	4963      	ldr	r1, [pc, #396]	; (2d30c <z_impl_k_poll+0x1ec>)
   2d180:	f240 1301 	movw	r3, #257	; 0x101
   2d184:	4a5c      	ldr	r2, [pc, #368]	; (2d2f8 <z_impl_k_poll+0x1d8>)
   2d186:	485d      	ldr	r0, [pc, #372]	; (2d2fc <z_impl_k_poll+0x1dc>)
   2d188:	f001 fe25 	bl	2edd6 <printk>
   2d18c:	4860      	ldr	r0, [pc, #384]	; (2d310 <z_impl_k_poll+0x1f0>)
   2d18e:	f001 fe22 	bl	2edd6 <printk>
   2d192:	f240 1101 	movw	r1, #257	; 0x101
   2d196:	4858      	ldr	r0, [pc, #352]	; (2d2f8 <z_impl_k_poll+0x1d8>)
   2d198:	f001 fe63 	bl	2ee62 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   2d19c:	fab6 f386 	clz	r3, r6
   2d1a0:	aa03      	add	r2, sp, #12
   2d1a2:	095b      	lsrs	r3, r3, #5
   2d1a4:	4629      	mov	r1, r5
   2d1a6:	4620      	mov	r0, r4
   2d1a8:	f7ff fe6c 	bl	2ce84 <register_events>
   2d1ac:	4607      	mov	r7, r0
	__asm__ volatile(
   2d1ae:	f04f 0320 	mov.w	r3, #32
   2d1b2:	f3ef 8511 	mrs	r5, BASEPRI
   2d1b6:	f383 8811 	msr	BASEPRI, r3
   2d1ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d1be:	4855      	ldr	r0, [pc, #340]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d1c0:	f7ff f8d2 	bl	2c368 <z_spin_lock_valid>
   2d1c4:	b968      	cbnz	r0, 2d1e2 <z_impl_k_poll+0xc2>
   2d1c6:	234a      	movs	r3, #74	; 0x4a
   2d1c8:	4a53      	ldr	r2, [pc, #332]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d1ca:	4954      	ldr	r1, [pc, #336]	; (2d31c <z_impl_k_poll+0x1fc>)
   2d1cc:	484b      	ldr	r0, [pc, #300]	; (2d2fc <z_impl_k_poll+0x1dc>)
   2d1ce:	f001 fe02 	bl	2edd6 <printk>
   2d1d2:	4950      	ldr	r1, [pc, #320]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d1d4:	4852      	ldr	r0, [pc, #328]	; (2d320 <z_impl_k_poll+0x200>)
   2d1d6:	f001 fdfe 	bl	2edd6 <printk>
   2d1da:	214a      	movs	r1, #74	; 0x4a
   2d1dc:	484e      	ldr	r0, [pc, #312]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d1de:	f001 fe40 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d1e2:	484c      	ldr	r0, [pc, #304]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d1e4:	f7ff f8de 	bl	2c3a4 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   2d1e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d1ec:	b9f3      	cbnz	r3, 2d22c <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   2d1ee:	4620      	mov	r0, r4
   2d1f0:	462a      	mov	r2, r5
   2d1f2:	4639      	mov	r1, r7
   2d1f4:	f7ff fd8e 	bl	2cd14 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d1f8:	4846      	ldr	r0, [pc, #280]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d1fa:	f7ff f8c3 	bl	2c384 <z_spin_unlock_valid>
   2d1fe:	b968      	cbnz	r0, 2d21c <z_impl_k_poll+0xfc>
   2d200:	235d      	movs	r3, #93	; 0x5d
   2d202:	4a45      	ldr	r2, [pc, #276]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d204:	4947      	ldr	r1, [pc, #284]	; (2d324 <z_impl_k_poll+0x204>)
   2d206:	483d      	ldr	r0, [pc, #244]	; (2d2fc <z_impl_k_poll+0x1dc>)
   2d208:	f001 fde5 	bl	2edd6 <printk>
   2d20c:	4941      	ldr	r1, [pc, #260]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d20e:	4846      	ldr	r0, [pc, #280]	; (2d328 <z_impl_k_poll+0x208>)
   2d210:	f001 fde1 	bl	2edd6 <printk>
   2d214:	215d      	movs	r1, #93	; 0x5d
   2d216:	4840      	ldr	r0, [pc, #256]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d218:	f001 fe23 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2d21c:	f385 8811 	msr	BASEPRI, r5
   2d220:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   2d224:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2d226:	4628      	mov	r0, r5
   2d228:	b007      	add	sp, #28
   2d22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   2d22c:	2300      	movs	r3, #0
   2d22e:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   2d232:	b9c6      	cbnz	r6, 2d266 <z_impl_k_poll+0x146>
   2d234:	4837      	ldr	r0, [pc, #220]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d236:	f7ff f8a5 	bl	2c384 <z_spin_unlock_valid>
   2d23a:	b968      	cbnz	r0, 2d258 <z_impl_k_poll+0x138>
   2d23c:	235d      	movs	r3, #93	; 0x5d
   2d23e:	4a36      	ldr	r2, [pc, #216]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d240:	4938      	ldr	r1, [pc, #224]	; (2d324 <z_impl_k_poll+0x204>)
   2d242:	482e      	ldr	r0, [pc, #184]	; (2d2fc <z_impl_k_poll+0x1dc>)
   2d244:	f001 fdc7 	bl	2edd6 <printk>
   2d248:	4932      	ldr	r1, [pc, #200]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d24a:	4837      	ldr	r0, [pc, #220]	; (2d328 <z_impl_k_poll+0x208>)
   2d24c:	f001 fdc3 	bl	2edd6 <printk>
   2d250:	215d      	movs	r1, #93	; 0x5d
   2d252:	4831      	ldr	r0, [pc, #196]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d254:	f001 fe05 	bl	2ee62 <assert_post_action>
   2d258:	f385 8811 	msr	BASEPRI, r5
   2d25c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2d260:	f06f 050a 	mvn.w	r5, #10
   2d264:	e7df      	b.n	2d226 <z_impl_k_poll+0x106>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2d266:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2d268:	4629      	mov	r1, r5
   2d26a:	4633      	mov	r3, r6
   2d26c:	4829      	ldr	r0, [pc, #164]	; (2d314 <z_impl_k_poll+0x1f4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2d26e:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2d272:	f7fe fc9f 	bl	2bbb4 <z_pend_curr>
   2d276:	4605      	mov	r5, r0
	__asm__ volatile(
   2d278:	f04f 0320 	mov.w	r3, #32
   2d27c:	f3ef 8611 	mrs	r6, BASEPRI
   2d280:	f383 8811 	msr	BASEPRI, r3
   2d284:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d288:	4822      	ldr	r0, [pc, #136]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d28a:	f7ff f86d 	bl	2c368 <z_spin_lock_valid>
   2d28e:	b968      	cbnz	r0, 2d2ac <z_impl_k_poll+0x18c>
   2d290:	234a      	movs	r3, #74	; 0x4a
   2d292:	4a21      	ldr	r2, [pc, #132]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d294:	4921      	ldr	r1, [pc, #132]	; (2d31c <z_impl_k_poll+0x1fc>)
   2d296:	4819      	ldr	r0, [pc, #100]	; (2d2fc <z_impl_k_poll+0x1dc>)
   2d298:	f001 fd9d 	bl	2edd6 <printk>
   2d29c:	491d      	ldr	r1, [pc, #116]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d29e:	4820      	ldr	r0, [pc, #128]	; (2d320 <z_impl_k_poll+0x200>)
   2d2a0:	f001 fd99 	bl	2edd6 <printk>
   2d2a4:	214a      	movs	r1, #74	; 0x4a
   2d2a6:	481c      	ldr	r0, [pc, #112]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d2a8:	f001 fddb 	bl	2ee62 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d2ac:	4819      	ldr	r0, [pc, #100]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d2ae:	f7ff f879 	bl	2c3a4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2d2b2:	4620      	mov	r0, r4
   2d2b4:	4632      	mov	r2, r6
   2d2b6:	4639      	mov	r1, r7
   2d2b8:	f7ff fd2c 	bl	2cd14 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d2bc:	4815      	ldr	r0, [pc, #84]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d2be:	f7ff f861 	bl	2c384 <z_spin_unlock_valid>
   2d2c2:	b968      	cbnz	r0, 2d2e0 <z_impl_k_poll+0x1c0>
   2d2c4:	235d      	movs	r3, #93	; 0x5d
   2d2c6:	4a14      	ldr	r2, [pc, #80]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d2c8:	4916      	ldr	r1, [pc, #88]	; (2d324 <z_impl_k_poll+0x204>)
   2d2ca:	480c      	ldr	r0, [pc, #48]	; (2d2fc <z_impl_k_poll+0x1dc>)
   2d2cc:	f001 fd83 	bl	2edd6 <printk>
   2d2d0:	4910      	ldr	r1, [pc, #64]	; (2d314 <z_impl_k_poll+0x1f4>)
   2d2d2:	4815      	ldr	r0, [pc, #84]	; (2d328 <z_impl_k_poll+0x208>)
   2d2d4:	f001 fd7f 	bl	2edd6 <printk>
   2d2d8:	215d      	movs	r1, #93	; 0x5d
   2d2da:	480f      	ldr	r0, [pc, #60]	; (2d318 <z_impl_k_poll+0x1f8>)
   2d2dc:	f001 fdc1 	bl	2ee62 <assert_post_action>
	__asm__ volatile(
   2d2e0:	f386 8811 	msr	BASEPRI, r6
   2d2e4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2d2e8:	e79d      	b.n	2d226 <z_impl_k_poll+0x106>
   2d2ea:	bf00      	nop
   2d2ec:	200213cc 	.word	0x200213cc
   2d2f0:	0002cca5 	.word	0x0002cca5
   2d2f4:	00032fc9 	.word	0x00032fc9
   2d2f8:	00033386 	.word	0x00033386
   2d2fc:	000316d1 	.word	0x000316d1
   2d300:	000323ee 	.word	0x000323ee
   2d304:	000333f9 	.word	0x000333f9
   2d308:	0003340f 	.word	0x0003340f
   2d30c:	0003341e 	.word	0x0003341e
   2d310:	0003342e 	.word	0x0003342e
   2d314:	200214e4 	.word	0x200214e4
   2d318:	00031a38 	.word	0x00031a38
   2d31c:	00031a5e 	.word	0x00031a5e
   2d320:	00031a73 	.word	0x00031a73
   2d324:	00031a8b 	.word	0x00031a8b
   2d328:	00031aa2 	.word	0x00031aa2

0002d32c <__assert_func>:
   2d32c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d32e:	461c      	mov	r4, r3
   2d330:	4b09      	ldr	r3, [pc, #36]	; (2d358 <__assert_func+0x2c>)
   2d332:	4605      	mov	r5, r0
   2d334:	681b      	ldr	r3, [r3, #0]
   2d336:	68d8      	ldr	r0, [r3, #12]
   2d338:	b152      	cbz	r2, 2d350 <__assert_func+0x24>
   2d33a:	4b08      	ldr	r3, [pc, #32]	; (2d35c <__assert_func+0x30>)
   2d33c:	9100      	str	r1, [sp, #0]
   2d33e:	4908      	ldr	r1, [pc, #32]	; (2d360 <__assert_func+0x34>)
   2d340:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2d344:	462b      	mov	r3, r5
   2d346:	4622      	mov	r2, r4
   2d348:	f000 f80e 	bl	2d368 <fiprintf>
   2d34c:	f002 ff2d 	bl	301aa <abort>
   2d350:	4b04      	ldr	r3, [pc, #16]	; (2d364 <__assert_func+0x38>)
   2d352:	461a      	mov	r2, r3
   2d354:	e7f2      	b.n	2d33c <__assert_func+0x10>
   2d356:	bf00      	nop
   2d358:	2002675c 	.word	0x2002675c
   2d35c:	0003343b 	.word	0x0003343b
   2d360:	00033448 	.word	0x00033448
   2d364:	000323f0 	.word	0x000323f0

0002d368 <fiprintf>:
   2d368:	b40e      	push	{r1, r2, r3}
   2d36a:	b503      	push	{r0, r1, lr}
   2d36c:	ab03      	add	r3, sp, #12
   2d36e:	4601      	mov	r1, r0
   2d370:	4805      	ldr	r0, [pc, #20]	; (2d388 <fiprintf+0x20>)
   2d372:	f853 2b04 	ldr.w	r2, [r3], #4
   2d376:	6800      	ldr	r0, [r0, #0]
   2d378:	9301      	str	r3, [sp, #4]
   2d37a:	f000 f807 	bl	2d38c <_vfiprintf_r>
   2d37e:	b002      	add	sp, #8
   2d380:	f85d eb04 	ldr.w	lr, [sp], #4
   2d384:	b003      	add	sp, #12
   2d386:	4770      	bx	lr
   2d388:	2002675c 	.word	0x2002675c

0002d38c <_vfiprintf_r>:
   2d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d390:	460d      	mov	r5, r1
   2d392:	b09d      	sub	sp, #116	; 0x74
   2d394:	4614      	mov	r4, r2
   2d396:	461e      	mov	r6, r3
   2d398:	4607      	mov	r7, r0
   2d39a:	b118      	cbz	r0, 2d3a4 <_vfiprintf_r+0x18>
   2d39c:	6983      	ldr	r3, [r0, #24]
   2d39e:	b90b      	cbnz	r3, 2d3a4 <_vfiprintf_r+0x18>
   2d3a0:	f000 ff24 	bl	2e1ec <__sinit>
   2d3a4:	4b85      	ldr	r3, [pc, #532]	; (2d5bc <_vfiprintf_r+0x230>)
   2d3a6:	429d      	cmp	r5, r3
   2d3a8:	d11b      	bne.n	2d3e2 <_vfiprintf_r+0x56>
   2d3aa:	687d      	ldr	r5, [r7, #4]
   2d3ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2d3ae:	07d9      	lsls	r1, r3, #31
   2d3b0:	d405      	bmi.n	2d3be <_vfiprintf_r+0x32>
   2d3b2:	89ab      	ldrh	r3, [r5, #12]
   2d3b4:	059a      	lsls	r2, r3, #22
   2d3b6:	d402      	bmi.n	2d3be <_vfiprintf_r+0x32>
   2d3b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2d3ba:	f002 ffc0 	bl	3033e <__retarget_lock_acquire_recursive>
   2d3be:	89ab      	ldrh	r3, [r5, #12]
   2d3c0:	071b      	lsls	r3, r3, #28
   2d3c2:	d501      	bpl.n	2d3c8 <_vfiprintf_r+0x3c>
   2d3c4:	692b      	ldr	r3, [r5, #16]
   2d3c6:	b9eb      	cbnz	r3, 2d404 <_vfiprintf_r+0x78>
   2d3c8:	4629      	mov	r1, r5
   2d3ca:	4638      	mov	r0, r7
   2d3cc:	f000 fd7a 	bl	2dec4 <__swsetup_r>
   2d3d0:	b1c0      	cbz	r0, 2d404 <_vfiprintf_r+0x78>
   2d3d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2d3d4:	07d8      	lsls	r0, r3, #31
   2d3d6:	d50e      	bpl.n	2d3f6 <_vfiprintf_r+0x6a>
   2d3d8:	f04f 30ff 	mov.w	r0, #4294967295
   2d3dc:	b01d      	add	sp, #116	; 0x74
   2d3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d3e2:	4b77      	ldr	r3, [pc, #476]	; (2d5c0 <_vfiprintf_r+0x234>)
   2d3e4:	429d      	cmp	r5, r3
   2d3e6:	d101      	bne.n	2d3ec <_vfiprintf_r+0x60>
   2d3e8:	68bd      	ldr	r5, [r7, #8]
   2d3ea:	e7df      	b.n	2d3ac <_vfiprintf_r+0x20>
   2d3ec:	4b75      	ldr	r3, [pc, #468]	; (2d5c4 <_vfiprintf_r+0x238>)
   2d3ee:	429d      	cmp	r5, r3
   2d3f0:	bf08      	it	eq
   2d3f2:	68fd      	ldreq	r5, [r7, #12]
   2d3f4:	e7da      	b.n	2d3ac <_vfiprintf_r+0x20>
   2d3f6:	89ab      	ldrh	r3, [r5, #12]
   2d3f8:	0599      	lsls	r1, r3, #22
   2d3fa:	d4ed      	bmi.n	2d3d8 <_vfiprintf_r+0x4c>
   2d3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2d3fe:	f002 ff9f 	bl	30340 <__retarget_lock_release_recursive>
   2d402:	e7e9      	b.n	2d3d8 <_vfiprintf_r+0x4c>
   2d404:	2300      	movs	r3, #0
   2d406:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 2d5c8 <_vfiprintf_r+0x23c>
   2d40a:	f04f 0a01 	mov.w	sl, #1
   2d40e:	9603      	str	r6, [sp, #12]
   2d410:	9309      	str	r3, [sp, #36]	; 0x24
   2d412:	2320      	movs	r3, #32
   2d414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2d418:	2330      	movs	r3, #48	; 0x30
   2d41a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2d41e:	4623      	mov	r3, r4
   2d420:	461e      	mov	r6, r3
   2d422:	f813 2b01 	ldrb.w	r2, [r3], #1
   2d426:	b10a      	cbz	r2, 2d42c <_vfiprintf_r+0xa0>
   2d428:	2a25      	cmp	r2, #37	; 0x25
   2d42a:	d1f9      	bne.n	2d420 <_vfiprintf_r+0x94>
   2d42c:	ebb6 0b04 	subs.w	fp, r6, r4
   2d430:	d00b      	beq.n	2d44a <_vfiprintf_r+0xbe>
   2d432:	465b      	mov	r3, fp
   2d434:	4622      	mov	r2, r4
   2d436:	4629      	mov	r1, r5
   2d438:	4638      	mov	r0, r7
   2d43a:	f002 fd18 	bl	2fe6e <__sfputs_r>
   2d43e:	3001      	adds	r0, #1
   2d440:	f000 80a3 	beq.w	2d58a <_vfiprintf_r+0x1fe>
   2d444:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d446:	445b      	add	r3, fp
   2d448:	9309      	str	r3, [sp, #36]	; 0x24
   2d44a:	7833      	ldrb	r3, [r6, #0]
   2d44c:	2b00      	cmp	r3, #0
   2d44e:	f000 809c 	beq.w	2d58a <_vfiprintf_r+0x1fe>
   2d452:	2300      	movs	r3, #0
   2d454:	f04f 32ff 	mov.w	r2, #4294967295
   2d458:	3601      	adds	r6, #1
   2d45a:	9304      	str	r3, [sp, #16]
   2d45c:	9307      	str	r3, [sp, #28]
   2d45e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2d462:	931a      	str	r3, [sp, #104]	; 0x68
   2d464:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2d468:	4634      	mov	r4, r6
   2d46a:	2205      	movs	r2, #5
   2d46c:	4856      	ldr	r0, [pc, #344]	; (2d5c8 <_vfiprintf_r+0x23c>)
   2d46e:	f814 1b01 	ldrb.w	r1, [r4], #1
   2d472:	f002 fcb4 	bl	2fdde <memchr>
   2d476:	9b04      	ldr	r3, [sp, #16]
   2d478:	b9c0      	cbnz	r0, 2d4ac <_vfiprintf_r+0x120>
   2d47a:	06da      	lsls	r2, r3, #27
   2d47c:	bf44      	itt	mi
   2d47e:	2220      	movmi	r2, #32
   2d480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2d484:	0718      	lsls	r0, r3, #28
   2d486:	bf44      	itt	mi
   2d488:	222b      	movmi	r2, #43	; 0x2b
   2d48a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2d48e:	7832      	ldrb	r2, [r6, #0]
   2d490:	2a2a      	cmp	r2, #42	; 0x2a
   2d492:	d013      	beq.n	2d4bc <_vfiprintf_r+0x130>
   2d494:	4634      	mov	r4, r6
   2d496:	9a07      	ldr	r2, [sp, #28]
   2d498:	2000      	movs	r0, #0
   2d49a:	260a      	movs	r6, #10
   2d49c:	4621      	mov	r1, r4
   2d49e:	f811 3b01 	ldrb.w	r3, [r1], #1
   2d4a2:	3b30      	subs	r3, #48	; 0x30
   2d4a4:	2b09      	cmp	r3, #9
   2d4a6:	d94b      	bls.n	2d540 <_vfiprintf_r+0x1b4>
   2d4a8:	b970      	cbnz	r0, 2d4c8 <_vfiprintf_r+0x13c>
   2d4aa:	e014      	b.n	2d4d6 <_vfiprintf_r+0x14a>
   2d4ac:	eba0 0009 	sub.w	r0, r0, r9
   2d4b0:	4626      	mov	r6, r4
   2d4b2:	fa0a f000 	lsl.w	r0, sl, r0
   2d4b6:	4318      	orrs	r0, r3
   2d4b8:	9004      	str	r0, [sp, #16]
   2d4ba:	e7d5      	b.n	2d468 <_vfiprintf_r+0xdc>
   2d4bc:	9a03      	ldr	r2, [sp, #12]
   2d4be:	1d11      	adds	r1, r2, #4
   2d4c0:	6812      	ldr	r2, [r2, #0]
   2d4c2:	2a00      	cmp	r2, #0
   2d4c4:	9103      	str	r1, [sp, #12]
   2d4c6:	db01      	blt.n	2d4cc <_vfiprintf_r+0x140>
   2d4c8:	9207      	str	r2, [sp, #28]
   2d4ca:	e004      	b.n	2d4d6 <_vfiprintf_r+0x14a>
   2d4cc:	4252      	negs	r2, r2
   2d4ce:	f043 0302 	orr.w	r3, r3, #2
   2d4d2:	9207      	str	r2, [sp, #28]
   2d4d4:	9304      	str	r3, [sp, #16]
   2d4d6:	7823      	ldrb	r3, [r4, #0]
   2d4d8:	2b2e      	cmp	r3, #46	; 0x2e
   2d4da:	d10c      	bne.n	2d4f6 <_vfiprintf_r+0x16a>
   2d4dc:	7863      	ldrb	r3, [r4, #1]
   2d4de:	2b2a      	cmp	r3, #42	; 0x2a
   2d4e0:	d133      	bne.n	2d54a <_vfiprintf_r+0x1be>
   2d4e2:	9b03      	ldr	r3, [sp, #12]
   2d4e4:	3402      	adds	r4, #2
   2d4e6:	1d1a      	adds	r2, r3, #4
   2d4e8:	681b      	ldr	r3, [r3, #0]
   2d4ea:	2b00      	cmp	r3, #0
   2d4ec:	9203      	str	r2, [sp, #12]
   2d4ee:	bfb8      	it	lt
   2d4f0:	f04f 33ff 	movlt.w	r3, #4294967295
   2d4f4:	9305      	str	r3, [sp, #20]
   2d4f6:	4e35      	ldr	r6, [pc, #212]	; (2d5cc <_vfiprintf_r+0x240>)
   2d4f8:	2203      	movs	r2, #3
   2d4fa:	7821      	ldrb	r1, [r4, #0]
   2d4fc:	4630      	mov	r0, r6
   2d4fe:	f002 fc6e 	bl	2fdde <memchr>
   2d502:	b138      	cbz	r0, 2d514 <_vfiprintf_r+0x188>
   2d504:	2340      	movs	r3, #64	; 0x40
   2d506:	1b80      	subs	r0, r0, r6
   2d508:	3401      	adds	r4, #1
   2d50a:	fa03 f000 	lsl.w	r0, r3, r0
   2d50e:	9b04      	ldr	r3, [sp, #16]
   2d510:	4303      	orrs	r3, r0
   2d512:	9304      	str	r3, [sp, #16]
   2d514:	f814 1b01 	ldrb.w	r1, [r4], #1
   2d518:	2206      	movs	r2, #6
   2d51a:	482d      	ldr	r0, [pc, #180]	; (2d5d0 <_vfiprintf_r+0x244>)
   2d51c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2d520:	f002 fc5d 	bl	2fdde <memchr>
   2d524:	2800      	cmp	r0, #0
   2d526:	d03f      	beq.n	2d5a8 <_vfiprintf_r+0x21c>
   2d528:	4b2a      	ldr	r3, [pc, #168]	; (2d5d4 <_vfiprintf_r+0x248>)
   2d52a:	bb13      	cbnz	r3, 2d572 <_vfiprintf_r+0x1e6>
   2d52c:	9b03      	ldr	r3, [sp, #12]
   2d52e:	3307      	adds	r3, #7
   2d530:	f023 0307 	bic.w	r3, r3, #7
   2d534:	3308      	adds	r3, #8
   2d536:	9303      	str	r3, [sp, #12]
   2d538:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d53a:	4443      	add	r3, r8
   2d53c:	9309      	str	r3, [sp, #36]	; 0x24
   2d53e:	e76e      	b.n	2d41e <_vfiprintf_r+0x92>
   2d540:	fb06 3202 	mla	r2, r6, r2, r3
   2d544:	2001      	movs	r0, #1
   2d546:	460c      	mov	r4, r1
   2d548:	e7a8      	b.n	2d49c <_vfiprintf_r+0x110>
   2d54a:	2300      	movs	r3, #0
   2d54c:	3401      	adds	r4, #1
   2d54e:	260a      	movs	r6, #10
   2d550:	4619      	mov	r1, r3
   2d552:	9305      	str	r3, [sp, #20]
   2d554:	4620      	mov	r0, r4
   2d556:	f810 2b01 	ldrb.w	r2, [r0], #1
   2d55a:	3a30      	subs	r2, #48	; 0x30
   2d55c:	2a09      	cmp	r2, #9
   2d55e:	d903      	bls.n	2d568 <_vfiprintf_r+0x1dc>
   2d560:	2b00      	cmp	r3, #0
   2d562:	d0c8      	beq.n	2d4f6 <_vfiprintf_r+0x16a>
   2d564:	9105      	str	r1, [sp, #20]
   2d566:	e7c6      	b.n	2d4f6 <_vfiprintf_r+0x16a>
   2d568:	fb06 2101 	mla	r1, r6, r1, r2
   2d56c:	2301      	movs	r3, #1
   2d56e:	4604      	mov	r4, r0
   2d570:	e7f0      	b.n	2d554 <_vfiprintf_r+0x1c8>
   2d572:	ab03      	add	r3, sp, #12
   2d574:	462a      	mov	r2, r5
   2d576:	a904      	add	r1, sp, #16
   2d578:	4638      	mov	r0, r7
   2d57a:	9300      	str	r3, [sp, #0]
   2d57c:	4b16      	ldr	r3, [pc, #88]	; (2d5d8 <_vfiprintf_r+0x24c>)
   2d57e:	f000 f82d 	bl	2d5dc <_printf_float>
   2d582:	f1b0 3fff 	cmp.w	r0, #4294967295
   2d586:	4680      	mov	r8, r0
   2d588:	d1d6      	bne.n	2d538 <_vfiprintf_r+0x1ac>
   2d58a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2d58c:	07d9      	lsls	r1, r3, #31
   2d58e:	d405      	bmi.n	2d59c <_vfiprintf_r+0x210>
   2d590:	89ab      	ldrh	r3, [r5, #12]
   2d592:	059a      	lsls	r2, r3, #22
   2d594:	d402      	bmi.n	2d59c <_vfiprintf_r+0x210>
   2d596:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2d598:	f002 fed2 	bl	30340 <__retarget_lock_release_recursive>
   2d59c:	89ab      	ldrh	r3, [r5, #12]
   2d59e:	065b      	lsls	r3, r3, #25
   2d5a0:	f53f af1a 	bmi.w	2d3d8 <_vfiprintf_r+0x4c>
   2d5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d5a6:	e719      	b.n	2d3dc <_vfiprintf_r+0x50>
   2d5a8:	ab03      	add	r3, sp, #12
   2d5aa:	462a      	mov	r2, r5
   2d5ac:	a904      	add	r1, sp, #16
   2d5ae:	4638      	mov	r0, r7
   2d5b0:	9300      	str	r3, [sp, #0]
   2d5b2:	4b09      	ldr	r3, [pc, #36]	; (2d5d8 <_vfiprintf_r+0x24c>)
   2d5b4:	f000 fa3c 	bl	2da30 <_printf_i>
   2d5b8:	e7e3      	b.n	2d582 <_vfiprintf_r+0x1f6>
   2d5ba:	bf00      	nop
   2d5bc:	000314cc 	.word	0x000314cc
   2d5c0:	000314ec 	.word	0x000314ec
   2d5c4:	000314ac 	.word	0x000314ac
   2d5c8:	00033578 	.word	0x00033578
   2d5cc:	0003357e 	.word	0x0003357e
   2d5d0:	00033582 	.word	0x00033582
   2d5d4:	0002d5dd 	.word	0x0002d5dd
   2d5d8:	0002fe6f 	.word	0x0002fe6f

0002d5dc <_printf_float>:
   2d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d5e0:	b08d      	sub	sp, #52	; 0x34
   2d5e2:	460c      	mov	r4, r1
   2d5e4:	4616      	mov	r6, r2
   2d5e6:	461f      	mov	r7, r3
   2d5e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   2d5ec:	4605      	mov	r5, r0
   2d5ee:	f000 fe7b 	bl	2e2e8 <_localeconv_r>
   2d5f2:	6803      	ldr	r3, [r0, #0]
   2d5f4:	4618      	mov	r0, r3
   2d5f6:	9306      	str	r3, [sp, #24]
   2d5f8:	f7ef fd3e 	bl	1d078 <strlen>
   2d5fc:	2300      	movs	r3, #0
   2d5fe:	9007      	str	r0, [sp, #28]
   2d600:	930a      	str	r3, [sp, #40]	; 0x28
   2d602:	f8d8 3000 	ldr.w	r3, [r8]
   2d606:	f894 a018 	ldrb.w	sl, [r4, #24]
   2d60a:	3307      	adds	r3, #7
   2d60c:	f8d4 b000 	ldr.w	fp, [r4]
   2d610:	f023 0307 	bic.w	r3, r3, #7
   2d614:	f103 0208 	add.w	r2, r3, #8
   2d618:	f8c8 2000 	str.w	r2, [r8]
   2d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d620:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2d624:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   2d628:	f04f 32ff 	mov.w	r2, #4294967295
   2d62c:	ed8d 7b04 	vstr	d7, [sp, #16]
   2d630:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   2d634:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   2d638:	4640      	mov	r0, r8
   2d63a:	4ba6      	ldr	r3, [pc, #664]	; (2d8d4 <_printf_float+0x2f8>)
   2d63c:	4649      	mov	r1, r9
   2d63e:	f7ef fcd3 	bl	1cfe8 <__aeabi_dcmpun>
   2d642:	bb70      	cbnz	r0, 2d6a2 <_printf_float+0xc6>
   2d644:	f04f 32ff 	mov.w	r2, #4294967295
   2d648:	4ba2      	ldr	r3, [pc, #648]	; (2d8d4 <_printf_float+0x2f8>)
   2d64a:	4640      	mov	r0, r8
   2d64c:	4649      	mov	r1, r9
   2d64e:	f7ef fcad 	bl	1cfac <__aeabi_dcmple>
   2d652:	bb30      	cbnz	r0, 2d6a2 <_printf_float+0xc6>
   2d654:	2200      	movs	r2, #0
   2d656:	2300      	movs	r3, #0
   2d658:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2d65c:	f7ef fc9c 	bl	1cf98 <__aeabi_dcmplt>
   2d660:	b110      	cbz	r0, 2d668 <_printf_float+0x8c>
   2d662:	232d      	movs	r3, #45	; 0x2d
   2d664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2d668:	4a9b      	ldr	r2, [pc, #620]	; (2d8d8 <_printf_float+0x2fc>)
   2d66a:	4b9c      	ldr	r3, [pc, #624]	; (2d8dc <_printf_float+0x300>)
   2d66c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2d670:	bf94      	ite	ls
   2d672:	4690      	movls	r8, r2
   2d674:	4698      	movhi	r8, r3
   2d676:	f04f 0900 	mov.w	r9, #0
   2d67a:	2303      	movs	r3, #3
   2d67c:	f02b 0204 	bic.w	r2, fp, #4
   2d680:	6123      	str	r3, [r4, #16]
   2d682:	6022      	str	r2, [r4, #0]
   2d684:	9700      	str	r7, [sp, #0]
   2d686:	4633      	mov	r3, r6
   2d688:	aa0b      	add	r2, sp, #44	; 0x2c
   2d68a:	4621      	mov	r1, r4
   2d68c:	4628      	mov	r0, r5
   2d68e:	f002 fc90 	bl	2ffb2 <_printf_common>
   2d692:	3001      	adds	r0, #1
   2d694:	f040 808c 	bne.w	2d7b0 <_printf_float+0x1d4>
   2d698:	f04f 30ff 	mov.w	r0, #4294967295
   2d69c:	b00d      	add	sp, #52	; 0x34
   2d69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d6a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2d6a6:	4610      	mov	r0, r2
   2d6a8:	4619      	mov	r1, r3
   2d6aa:	f7ef fc9d 	bl	1cfe8 <__aeabi_dcmpun>
   2d6ae:	b140      	cbz	r0, 2d6c2 <_printf_float+0xe6>
   2d6b0:	9b05      	ldr	r3, [sp, #20]
   2d6b2:	4a8b      	ldr	r2, [pc, #556]	; (2d8e0 <_printf_float+0x304>)
   2d6b4:	2b00      	cmp	r3, #0
   2d6b6:	bfbc      	itt	lt
   2d6b8:	232d      	movlt	r3, #45	; 0x2d
   2d6ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2d6be:	4b89      	ldr	r3, [pc, #548]	; (2d8e4 <_printf_float+0x308>)
   2d6c0:	e7d4      	b.n	2d66c <_printf_float+0x90>
   2d6c2:	6863      	ldr	r3, [r4, #4]
   2d6c4:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   2d6c8:	1c5a      	adds	r2, r3, #1
   2d6ca:	d13e      	bne.n	2d74a <_printf_float+0x16e>
   2d6cc:	2306      	movs	r3, #6
   2d6ce:	6063      	str	r3, [r4, #4]
   2d6d0:	2300      	movs	r3, #0
   2d6d2:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   2d6d6:	6861      	ldr	r1, [r4, #4]
   2d6d8:	4628      	mov	r0, r5
   2d6da:	9303      	str	r3, [sp, #12]
   2d6dc:	ab0a      	add	r3, sp, #40	; 0x28
   2d6de:	6022      	str	r2, [r4, #0]
   2d6e0:	e9cd a301 	strd	sl, r3, [sp, #4]
   2d6e4:	ab09      	add	r3, sp, #36	; 0x24
   2d6e6:	ed9d 0b04 	vldr	d0, [sp, #16]
   2d6ea:	9300      	str	r3, [sp, #0]
   2d6ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   2d6f0:	f002 fbcf 	bl	2fe92 <__cvt>
   2d6f4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2d6f8:	4680      	mov	r8, r0
   2d6fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   2d6fc:	d108      	bne.n	2d710 <_printf_float+0x134>
   2d6fe:	1cc8      	adds	r0, r1, #3
   2d700:	db02      	blt.n	2d708 <_printf_float+0x12c>
   2d702:	6863      	ldr	r3, [r4, #4]
   2d704:	4299      	cmp	r1, r3
   2d706:	dd41      	ble.n	2d78c <_printf_float+0x1b0>
   2d708:	f1aa 0a02 	sub.w	sl, sl, #2
   2d70c:	fa5f fa8a 	uxtb.w	sl, sl
   2d710:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2d714:	d820      	bhi.n	2d758 <_printf_float+0x17c>
   2d716:	3901      	subs	r1, #1
   2d718:	4652      	mov	r2, sl
   2d71a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2d71e:	9109      	str	r1, [sp, #36]	; 0x24
   2d720:	f002 fc14 	bl	2ff4c <__exponent>
   2d724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d726:	4681      	mov	r9, r0
   2d728:	1813      	adds	r3, r2, r0
   2d72a:	2a01      	cmp	r2, #1
   2d72c:	6123      	str	r3, [r4, #16]
   2d72e:	dc02      	bgt.n	2d736 <_printf_float+0x15a>
   2d730:	6822      	ldr	r2, [r4, #0]
   2d732:	07d2      	lsls	r2, r2, #31
   2d734:	d501      	bpl.n	2d73a <_printf_float+0x15e>
   2d736:	3301      	adds	r3, #1
   2d738:	6123      	str	r3, [r4, #16]
   2d73a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2d73e:	2b00      	cmp	r3, #0
   2d740:	d0a0      	beq.n	2d684 <_printf_float+0xa8>
   2d742:	232d      	movs	r3, #45	; 0x2d
   2d744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2d748:	e79c      	b.n	2d684 <_printf_float+0xa8>
   2d74a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2d74e:	d1bf      	bne.n	2d6d0 <_printf_float+0xf4>
   2d750:	2b00      	cmp	r3, #0
   2d752:	d1bd      	bne.n	2d6d0 <_printf_float+0xf4>
   2d754:	2301      	movs	r3, #1
   2d756:	e7ba      	b.n	2d6ce <_printf_float+0xf2>
   2d758:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2d75c:	d118      	bne.n	2d790 <_printf_float+0x1b4>
   2d75e:	2900      	cmp	r1, #0
   2d760:	6863      	ldr	r3, [r4, #4]
   2d762:	dd0b      	ble.n	2d77c <_printf_float+0x1a0>
   2d764:	6121      	str	r1, [r4, #16]
   2d766:	b913      	cbnz	r3, 2d76e <_printf_float+0x192>
   2d768:	6822      	ldr	r2, [r4, #0]
   2d76a:	07d0      	lsls	r0, r2, #31
   2d76c:	d502      	bpl.n	2d774 <_printf_float+0x198>
   2d76e:	3301      	adds	r3, #1
   2d770:	440b      	add	r3, r1
   2d772:	6123      	str	r3, [r4, #16]
   2d774:	65a1      	str	r1, [r4, #88]	; 0x58
   2d776:	f04f 0900 	mov.w	r9, #0
   2d77a:	e7de      	b.n	2d73a <_printf_float+0x15e>
   2d77c:	b913      	cbnz	r3, 2d784 <_printf_float+0x1a8>
   2d77e:	6822      	ldr	r2, [r4, #0]
   2d780:	07d2      	lsls	r2, r2, #31
   2d782:	d501      	bpl.n	2d788 <_printf_float+0x1ac>
   2d784:	3302      	adds	r3, #2
   2d786:	e7f4      	b.n	2d772 <_printf_float+0x196>
   2d788:	2301      	movs	r3, #1
   2d78a:	e7f2      	b.n	2d772 <_printf_float+0x196>
   2d78c:	f04f 0a67 	mov.w	sl, #103	; 0x67
   2d790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d792:	4299      	cmp	r1, r3
   2d794:	db05      	blt.n	2d7a2 <_printf_float+0x1c6>
   2d796:	6823      	ldr	r3, [r4, #0]
   2d798:	6121      	str	r1, [r4, #16]
   2d79a:	07d8      	lsls	r0, r3, #31
   2d79c:	d5ea      	bpl.n	2d774 <_printf_float+0x198>
   2d79e:	1c4b      	adds	r3, r1, #1
   2d7a0:	e7e7      	b.n	2d772 <_printf_float+0x196>
   2d7a2:	2900      	cmp	r1, #0
   2d7a4:	bfd4      	ite	le
   2d7a6:	f1c1 0202 	rsble	r2, r1, #2
   2d7aa:	2201      	movgt	r2, #1
   2d7ac:	4413      	add	r3, r2
   2d7ae:	e7e0      	b.n	2d772 <_printf_float+0x196>
   2d7b0:	6823      	ldr	r3, [r4, #0]
   2d7b2:	055a      	lsls	r2, r3, #21
   2d7b4:	d407      	bmi.n	2d7c6 <_printf_float+0x1ea>
   2d7b6:	6923      	ldr	r3, [r4, #16]
   2d7b8:	4642      	mov	r2, r8
   2d7ba:	4631      	mov	r1, r6
   2d7bc:	4628      	mov	r0, r5
   2d7be:	47b8      	blx	r7
   2d7c0:	3001      	adds	r0, #1
   2d7c2:	d12b      	bne.n	2d81c <_printf_float+0x240>
   2d7c4:	e768      	b.n	2d698 <_printf_float+0xbc>
   2d7c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2d7ca:	f240 80dc 	bls.w	2d986 <_printf_float+0x3aa>
   2d7ce:	2200      	movs	r2, #0
   2d7d0:	2300      	movs	r3, #0
   2d7d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2d7d6:	f7ef fbd5 	bl	1cf84 <__aeabi_dcmpeq>
   2d7da:	2800      	cmp	r0, #0
   2d7dc:	d033      	beq.n	2d846 <_printf_float+0x26a>
   2d7de:	2301      	movs	r3, #1
   2d7e0:	4a41      	ldr	r2, [pc, #260]	; (2d8e8 <_printf_float+0x30c>)
   2d7e2:	4631      	mov	r1, r6
   2d7e4:	4628      	mov	r0, r5
   2d7e6:	47b8      	blx	r7
   2d7e8:	3001      	adds	r0, #1
   2d7ea:	f43f af55 	beq.w	2d698 <_printf_float+0xbc>
   2d7ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2d7f2:	429a      	cmp	r2, r3
   2d7f4:	db02      	blt.n	2d7fc <_printf_float+0x220>
   2d7f6:	6823      	ldr	r3, [r4, #0]
   2d7f8:	07d8      	lsls	r0, r3, #31
   2d7fa:	d50f      	bpl.n	2d81c <_printf_float+0x240>
   2d7fc:	4631      	mov	r1, r6
   2d7fe:	4628      	mov	r0, r5
   2d800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2d804:	47b8      	blx	r7
   2d806:	3001      	adds	r0, #1
   2d808:	f43f af46 	beq.w	2d698 <_printf_float+0xbc>
   2d80c:	f04f 0800 	mov.w	r8, #0
   2d810:	f104 091a 	add.w	r9, r4, #26
   2d814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d816:	3b01      	subs	r3, #1
   2d818:	4543      	cmp	r3, r8
   2d81a:	dc09      	bgt.n	2d830 <_printf_float+0x254>
   2d81c:	6823      	ldr	r3, [r4, #0]
   2d81e:	079b      	lsls	r3, r3, #30
   2d820:	f100 8101 	bmi.w	2da26 <_printf_float+0x44a>
   2d824:	68e0      	ldr	r0, [r4, #12]
   2d826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d828:	4298      	cmp	r0, r3
   2d82a:	bfb8      	it	lt
   2d82c:	4618      	movlt	r0, r3
   2d82e:	e735      	b.n	2d69c <_printf_float+0xc0>
   2d830:	2301      	movs	r3, #1
   2d832:	464a      	mov	r2, r9
   2d834:	4631      	mov	r1, r6
   2d836:	4628      	mov	r0, r5
   2d838:	47b8      	blx	r7
   2d83a:	3001      	adds	r0, #1
   2d83c:	f43f af2c 	beq.w	2d698 <_printf_float+0xbc>
   2d840:	f108 0801 	add.w	r8, r8, #1
   2d844:	e7e6      	b.n	2d814 <_printf_float+0x238>
   2d846:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d848:	2b00      	cmp	r3, #0
   2d84a:	dc2b      	bgt.n	2d8a4 <_printf_float+0x2c8>
   2d84c:	2301      	movs	r3, #1
   2d84e:	4a26      	ldr	r2, [pc, #152]	; (2d8e8 <_printf_float+0x30c>)
   2d850:	4631      	mov	r1, r6
   2d852:	4628      	mov	r0, r5
   2d854:	47b8      	blx	r7
   2d856:	3001      	adds	r0, #1
   2d858:	f43f af1e 	beq.w	2d698 <_printf_float+0xbc>
   2d85c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2d860:	4313      	orrs	r3, r2
   2d862:	d102      	bne.n	2d86a <_printf_float+0x28e>
   2d864:	6823      	ldr	r3, [r4, #0]
   2d866:	07d9      	lsls	r1, r3, #31
   2d868:	d5d8      	bpl.n	2d81c <_printf_float+0x240>
   2d86a:	4631      	mov	r1, r6
   2d86c:	4628      	mov	r0, r5
   2d86e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2d872:	47b8      	blx	r7
   2d874:	3001      	adds	r0, #1
   2d876:	f43f af0f 	beq.w	2d698 <_printf_float+0xbc>
   2d87a:	f04f 0900 	mov.w	r9, #0
   2d87e:	f104 0a1a 	add.w	sl, r4, #26
   2d882:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d884:	425b      	negs	r3, r3
   2d886:	454b      	cmp	r3, r9
   2d888:	dc01      	bgt.n	2d88e <_printf_float+0x2b2>
   2d88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d88c:	e794      	b.n	2d7b8 <_printf_float+0x1dc>
   2d88e:	2301      	movs	r3, #1
   2d890:	4652      	mov	r2, sl
   2d892:	4631      	mov	r1, r6
   2d894:	4628      	mov	r0, r5
   2d896:	47b8      	blx	r7
   2d898:	3001      	adds	r0, #1
   2d89a:	f43f aefd 	beq.w	2d698 <_printf_float+0xbc>
   2d89e:	f109 0901 	add.w	r9, r9, #1
   2d8a2:	e7ee      	b.n	2d882 <_printf_float+0x2a6>
   2d8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d8a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2d8a8:	429a      	cmp	r2, r3
   2d8aa:	bfa8      	it	ge
   2d8ac:	461a      	movge	r2, r3
   2d8ae:	2a00      	cmp	r2, #0
   2d8b0:	4691      	mov	r9, r2
   2d8b2:	dd07      	ble.n	2d8c4 <_printf_float+0x2e8>
   2d8b4:	4613      	mov	r3, r2
   2d8b6:	4631      	mov	r1, r6
   2d8b8:	4642      	mov	r2, r8
   2d8ba:	4628      	mov	r0, r5
   2d8bc:	47b8      	blx	r7
   2d8be:	3001      	adds	r0, #1
   2d8c0:	f43f aeea 	beq.w	2d698 <_printf_float+0xbc>
   2d8c4:	f104 031a 	add.w	r3, r4, #26
   2d8c8:	f04f 0b00 	mov.w	fp, #0
   2d8cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2d8d0:	9304      	str	r3, [sp, #16]
   2d8d2:	e015      	b.n	2d900 <_printf_float+0x324>
   2d8d4:	7fefffff 	.word	0x7fefffff
   2d8d8:	00033589 	.word	0x00033589
   2d8dc:	00031899 	.word	0x00031899
   2d8e0:	0003358d 	.word	0x0003358d
   2d8e4:	00033591 	.word	0x00033591
   2d8e8:	00033029 	.word	0x00033029
   2d8ec:	2301      	movs	r3, #1
   2d8ee:	9a04      	ldr	r2, [sp, #16]
   2d8f0:	4631      	mov	r1, r6
   2d8f2:	4628      	mov	r0, r5
   2d8f4:	47b8      	blx	r7
   2d8f6:	3001      	adds	r0, #1
   2d8f8:	f43f aece 	beq.w	2d698 <_printf_float+0xbc>
   2d8fc:	f10b 0b01 	add.w	fp, fp, #1
   2d900:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   2d904:	ebaa 0309 	sub.w	r3, sl, r9
   2d908:	455b      	cmp	r3, fp
   2d90a:	dcef      	bgt.n	2d8ec <_printf_float+0x310>
   2d90c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2d910:	429a      	cmp	r2, r3
   2d912:	db1b      	blt.n	2d94c <_printf_float+0x370>
   2d914:	6823      	ldr	r3, [r4, #0]
   2d916:	07da      	lsls	r2, r3, #31
   2d918:	d418      	bmi.n	2d94c <_printf_float+0x370>
   2d91a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2d91e:	4592      	cmp	sl, r2
   2d920:	db1c      	blt.n	2d95c <_printf_float+0x380>
   2d922:	eba3 090a 	sub.w	r9, r3, sl
   2d926:	f1b9 0f00 	cmp.w	r9, #0
   2d92a:	dd08      	ble.n	2d93e <_printf_float+0x362>
   2d92c:	464b      	mov	r3, r9
   2d92e:	eb08 020a 	add.w	r2, r8, sl
   2d932:	4631      	mov	r1, r6
   2d934:	4628      	mov	r0, r5
   2d936:	47b8      	blx	r7
   2d938:	3001      	adds	r0, #1
   2d93a:	f43f aead 	beq.w	2d698 <_printf_float+0xbc>
   2d93e:	f04f 0800 	mov.w	r8, #0
   2d942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2d946:	f104 0a1a 	add.w	sl, r4, #26
   2d94a:	e014      	b.n	2d976 <_printf_float+0x39a>
   2d94c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2d950:	4631      	mov	r1, r6
   2d952:	4628      	mov	r0, r5
   2d954:	47b8      	blx	r7
   2d956:	3001      	adds	r0, #1
   2d958:	d1df      	bne.n	2d91a <_printf_float+0x33e>
   2d95a:	e69d      	b.n	2d698 <_printf_float+0xbc>
   2d95c:	eba3 0902 	sub.w	r9, r3, r2
   2d960:	e7e1      	b.n	2d926 <_printf_float+0x34a>
   2d962:	2301      	movs	r3, #1
   2d964:	4652      	mov	r2, sl
   2d966:	4631      	mov	r1, r6
   2d968:	4628      	mov	r0, r5
   2d96a:	47b8      	blx	r7
   2d96c:	3001      	adds	r0, #1
   2d96e:	f43f ae93 	beq.w	2d698 <_printf_float+0xbc>
   2d972:	f108 0801 	add.w	r8, r8, #1
   2d976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2d97a:	1a9b      	subs	r3, r3, r2
   2d97c:	eba3 0309 	sub.w	r3, r3, r9
   2d980:	4543      	cmp	r3, r8
   2d982:	dcee      	bgt.n	2d962 <_printf_float+0x386>
   2d984:	e74a      	b.n	2d81c <_printf_float+0x240>
   2d986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d988:	2a01      	cmp	r2, #1
   2d98a:	dc01      	bgt.n	2d990 <_printf_float+0x3b4>
   2d98c:	07db      	lsls	r3, r3, #31
   2d98e:	d537      	bpl.n	2da00 <_printf_float+0x424>
   2d990:	2301      	movs	r3, #1
   2d992:	4642      	mov	r2, r8
   2d994:	4631      	mov	r1, r6
   2d996:	4628      	mov	r0, r5
   2d998:	47b8      	blx	r7
   2d99a:	3001      	adds	r0, #1
   2d99c:	f43f ae7c 	beq.w	2d698 <_printf_float+0xbc>
   2d9a0:	4631      	mov	r1, r6
   2d9a2:	4628      	mov	r0, r5
   2d9a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2d9a8:	47b8      	blx	r7
   2d9aa:	3001      	adds	r0, #1
   2d9ac:	f43f ae74 	beq.w	2d698 <_printf_float+0xbc>
   2d9b0:	2200      	movs	r2, #0
   2d9b2:	2300      	movs	r3, #0
   2d9b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2d9b8:	f7ef fae4 	bl	1cf84 <__aeabi_dcmpeq>
   2d9bc:	b9d8      	cbnz	r0, 2d9f6 <_printf_float+0x41a>
   2d9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d9c0:	f108 0201 	add.w	r2, r8, #1
   2d9c4:	3b01      	subs	r3, #1
   2d9c6:	4631      	mov	r1, r6
   2d9c8:	4628      	mov	r0, r5
   2d9ca:	47b8      	blx	r7
   2d9cc:	3001      	adds	r0, #1
   2d9ce:	d10e      	bne.n	2d9ee <_printf_float+0x412>
   2d9d0:	e662      	b.n	2d698 <_printf_float+0xbc>
   2d9d2:	2301      	movs	r3, #1
   2d9d4:	4652      	mov	r2, sl
   2d9d6:	4631      	mov	r1, r6
   2d9d8:	4628      	mov	r0, r5
   2d9da:	47b8      	blx	r7
   2d9dc:	3001      	adds	r0, #1
   2d9de:	f43f ae5b 	beq.w	2d698 <_printf_float+0xbc>
   2d9e2:	f108 0801 	add.w	r8, r8, #1
   2d9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d9e8:	3b01      	subs	r3, #1
   2d9ea:	4543      	cmp	r3, r8
   2d9ec:	dcf1      	bgt.n	2d9d2 <_printf_float+0x3f6>
   2d9ee:	464b      	mov	r3, r9
   2d9f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2d9f4:	e6e1      	b.n	2d7ba <_printf_float+0x1de>
   2d9f6:	f04f 0800 	mov.w	r8, #0
   2d9fa:	f104 0a1a 	add.w	sl, r4, #26
   2d9fe:	e7f2      	b.n	2d9e6 <_printf_float+0x40a>
   2da00:	2301      	movs	r3, #1
   2da02:	4642      	mov	r2, r8
   2da04:	e7df      	b.n	2d9c6 <_printf_float+0x3ea>
   2da06:	2301      	movs	r3, #1
   2da08:	464a      	mov	r2, r9
   2da0a:	4631      	mov	r1, r6
   2da0c:	4628      	mov	r0, r5
   2da0e:	47b8      	blx	r7
   2da10:	3001      	adds	r0, #1
   2da12:	f43f ae41 	beq.w	2d698 <_printf_float+0xbc>
   2da16:	f108 0801 	add.w	r8, r8, #1
   2da1a:	68e3      	ldr	r3, [r4, #12]
   2da1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2da1e:	1a9b      	subs	r3, r3, r2
   2da20:	4543      	cmp	r3, r8
   2da22:	dcf0      	bgt.n	2da06 <_printf_float+0x42a>
   2da24:	e6fe      	b.n	2d824 <_printf_float+0x248>
   2da26:	f04f 0800 	mov.w	r8, #0
   2da2a:	f104 0919 	add.w	r9, r4, #25
   2da2e:	e7f4      	b.n	2da1a <_printf_float+0x43e>

0002da30 <_printf_i>:
   2da30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2da34:	4606      	mov	r6, r0
   2da36:	460c      	mov	r4, r1
   2da38:	f101 0043 	add.w	r0, r1, #67	; 0x43
   2da3c:	7e09      	ldrb	r1, [r1, #24]
   2da3e:	b085      	sub	sp, #20
   2da40:	4698      	mov	r8, r3
   2da42:	296e      	cmp	r1, #110	; 0x6e
   2da44:	4617      	mov	r7, r2
   2da46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2da48:	f000 80ba 	beq.w	2dbc0 <_printf_i+0x190>
   2da4c:	d824      	bhi.n	2da98 <_printf_i+0x68>
   2da4e:	2963      	cmp	r1, #99	; 0x63
   2da50:	d039      	beq.n	2dac6 <_printf_i+0x96>
   2da52:	d80a      	bhi.n	2da6a <_printf_i+0x3a>
   2da54:	2900      	cmp	r1, #0
   2da56:	f000 80c3 	beq.w	2dbe0 <_printf_i+0x1b0>
   2da5a:	2958      	cmp	r1, #88	; 0x58
   2da5c:	f000 8091 	beq.w	2db82 <_printf_i+0x152>
   2da60:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2da64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   2da68:	e035      	b.n	2dad6 <_printf_i+0xa6>
   2da6a:	2964      	cmp	r1, #100	; 0x64
   2da6c:	d001      	beq.n	2da72 <_printf_i+0x42>
   2da6e:	2969      	cmp	r1, #105	; 0x69
   2da70:	d1f6      	bne.n	2da60 <_printf_i+0x30>
   2da72:	6825      	ldr	r5, [r4, #0]
   2da74:	681a      	ldr	r2, [r3, #0]
   2da76:	f015 0f80 	tst.w	r5, #128	; 0x80
   2da7a:	f102 0104 	add.w	r1, r2, #4
   2da7e:	d02c      	beq.n	2dada <_printf_i+0xaa>
   2da80:	6812      	ldr	r2, [r2, #0]
   2da82:	6019      	str	r1, [r3, #0]
   2da84:	2a00      	cmp	r2, #0
   2da86:	da03      	bge.n	2da90 <_printf_i+0x60>
   2da88:	232d      	movs	r3, #45	; 0x2d
   2da8a:	4252      	negs	r2, r2
   2da8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2da90:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 2dc50 <_printf_i+0x220>
   2da94:	230a      	movs	r3, #10
   2da96:	e03f      	b.n	2db18 <_printf_i+0xe8>
   2da98:	2973      	cmp	r1, #115	; 0x73
   2da9a:	f000 80a5 	beq.w	2dbe8 <_printf_i+0x1b8>
   2da9e:	d808      	bhi.n	2dab2 <_printf_i+0x82>
   2daa0:	296f      	cmp	r1, #111	; 0x6f
   2daa2:	d021      	beq.n	2dae8 <_printf_i+0xb8>
   2daa4:	2970      	cmp	r1, #112	; 0x70
   2daa6:	d1db      	bne.n	2da60 <_printf_i+0x30>
   2daa8:	6822      	ldr	r2, [r4, #0]
   2daaa:	f042 0220 	orr.w	r2, r2, #32
   2daae:	6022      	str	r2, [r4, #0]
   2dab0:	e003      	b.n	2daba <_printf_i+0x8a>
   2dab2:	2975      	cmp	r1, #117	; 0x75
   2dab4:	d018      	beq.n	2dae8 <_printf_i+0xb8>
   2dab6:	2978      	cmp	r1, #120	; 0x78
   2dab8:	d1d2      	bne.n	2da60 <_printf_i+0x30>
   2daba:	2278      	movs	r2, #120	; 0x78
   2dabc:	f8df c194 	ldr.w	ip, [pc, #404]	; 2dc54 <_printf_i+0x224>
   2dac0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   2dac4:	e061      	b.n	2db8a <_printf_i+0x15a>
   2dac6:	681a      	ldr	r2, [r3, #0]
   2dac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2dacc:	1d11      	adds	r1, r2, #4
   2dace:	6019      	str	r1, [r3, #0]
   2dad0:	6813      	ldr	r3, [r2, #0]
   2dad2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2dad6:	2301      	movs	r3, #1
   2dad8:	e093      	b.n	2dc02 <_printf_i+0x1d2>
   2dada:	6812      	ldr	r2, [r2, #0]
   2dadc:	f015 0f40 	tst.w	r5, #64	; 0x40
   2dae0:	6019      	str	r1, [r3, #0]
   2dae2:	bf18      	it	ne
   2dae4:	b212      	sxthne	r2, r2
   2dae6:	e7cd      	b.n	2da84 <_printf_i+0x54>
   2dae8:	f8d4 c000 	ldr.w	ip, [r4]
   2daec:	681a      	ldr	r2, [r3, #0]
   2daee:	f01c 0f80 	tst.w	ip, #128	; 0x80
   2daf2:	f102 0504 	add.w	r5, r2, #4
   2daf6:	601d      	str	r5, [r3, #0]
   2daf8:	d001      	beq.n	2dafe <_printf_i+0xce>
   2dafa:	6812      	ldr	r2, [r2, #0]
   2dafc:	e003      	b.n	2db06 <_printf_i+0xd6>
   2dafe:	f01c 0f40 	tst.w	ip, #64	; 0x40
   2db02:	d0fa      	beq.n	2dafa <_printf_i+0xca>
   2db04:	8812      	ldrh	r2, [r2, #0]
   2db06:	296f      	cmp	r1, #111	; 0x6f
   2db08:	f8df c144 	ldr.w	ip, [pc, #324]	; 2dc50 <_printf_i+0x220>
   2db0c:	bf0c      	ite	eq
   2db0e:	2308      	moveq	r3, #8
   2db10:	230a      	movne	r3, #10
   2db12:	2100      	movs	r1, #0
   2db14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2db18:	6865      	ldr	r5, [r4, #4]
   2db1a:	2d00      	cmp	r5, #0
   2db1c:	60a5      	str	r5, [r4, #8]
   2db1e:	bfa2      	ittt	ge
   2db20:	6821      	ldrge	r1, [r4, #0]
   2db22:	f021 0104 	bicge.w	r1, r1, #4
   2db26:	6021      	strge	r1, [r4, #0]
   2db28:	b90a      	cbnz	r2, 2db2e <_printf_i+0xfe>
   2db2a:	2d00      	cmp	r5, #0
   2db2c:	d046      	beq.n	2dbbc <_printf_i+0x18c>
   2db2e:	4605      	mov	r5, r0
   2db30:	4293      	cmp	r3, r2
   2db32:	fbb2 f1f3 	udiv	r1, r2, r3
   2db36:	fb03 2e11 	mls	lr, r3, r1, r2
   2db3a:	f81c e00e 	ldrb.w	lr, [ip, lr]
   2db3e:	f805 ed01 	strb.w	lr, [r5, #-1]!
   2db42:	d939      	bls.n	2dbb8 <_printf_i+0x188>
   2db44:	2b08      	cmp	r3, #8
   2db46:	d10b      	bne.n	2db60 <_printf_i+0x130>
   2db48:	6823      	ldr	r3, [r4, #0]
   2db4a:	07da      	lsls	r2, r3, #31
   2db4c:	d508      	bpl.n	2db60 <_printf_i+0x130>
   2db4e:	6923      	ldr	r3, [r4, #16]
   2db50:	6862      	ldr	r2, [r4, #4]
   2db52:	429a      	cmp	r2, r3
   2db54:	bfde      	ittt	le
   2db56:	2330      	movle	r3, #48	; 0x30
   2db58:	f805 3c01 	strble.w	r3, [r5, #-1]
   2db5c:	f105 35ff 	addle.w	r5, r5, #4294967295
   2db60:	1b40      	subs	r0, r0, r5
   2db62:	6120      	str	r0, [r4, #16]
   2db64:	f8cd 8000 	str.w	r8, [sp]
   2db68:	463b      	mov	r3, r7
   2db6a:	aa03      	add	r2, sp, #12
   2db6c:	4621      	mov	r1, r4
   2db6e:	4630      	mov	r0, r6
   2db70:	f002 fa1f 	bl	2ffb2 <_printf_common>
   2db74:	3001      	adds	r0, #1
   2db76:	d149      	bne.n	2dc0c <_printf_i+0x1dc>
   2db78:	f04f 30ff 	mov.w	r0, #4294967295
   2db7c:	b005      	add	sp, #20
   2db7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2db82:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 2dc50 <_printf_i+0x220>
   2db86:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   2db8a:	681d      	ldr	r5, [r3, #0]
   2db8c:	6821      	ldr	r1, [r4, #0]
   2db8e:	f855 2b04 	ldr.w	r2, [r5], #4
   2db92:	601d      	str	r5, [r3, #0]
   2db94:	060d      	lsls	r5, r1, #24
   2db96:	d50b      	bpl.n	2dbb0 <_printf_i+0x180>
   2db98:	07cd      	lsls	r5, r1, #31
   2db9a:	bf44      	itt	mi
   2db9c:	f041 0120 	orrmi.w	r1, r1, #32
   2dba0:	6021      	strmi	r1, [r4, #0]
   2dba2:	b91a      	cbnz	r2, 2dbac <_printf_i+0x17c>
   2dba4:	6823      	ldr	r3, [r4, #0]
   2dba6:	f023 0320 	bic.w	r3, r3, #32
   2dbaa:	6023      	str	r3, [r4, #0]
   2dbac:	2310      	movs	r3, #16
   2dbae:	e7b0      	b.n	2db12 <_printf_i+0xe2>
   2dbb0:	064b      	lsls	r3, r1, #25
   2dbb2:	bf48      	it	mi
   2dbb4:	b292      	uxthmi	r2, r2
   2dbb6:	e7ef      	b.n	2db98 <_printf_i+0x168>
   2dbb8:	460a      	mov	r2, r1
   2dbba:	e7b9      	b.n	2db30 <_printf_i+0x100>
   2dbbc:	4605      	mov	r5, r0
   2dbbe:	e7c1      	b.n	2db44 <_printf_i+0x114>
   2dbc0:	681a      	ldr	r2, [r3, #0]
   2dbc2:	f8d4 c000 	ldr.w	ip, [r4]
   2dbc6:	1d15      	adds	r5, r2, #4
   2dbc8:	6961      	ldr	r1, [r4, #20]
   2dbca:	f01c 0f80 	tst.w	ip, #128	; 0x80
   2dbce:	601d      	str	r5, [r3, #0]
   2dbd0:	6813      	ldr	r3, [r2, #0]
   2dbd2:	d001      	beq.n	2dbd8 <_printf_i+0x1a8>
   2dbd4:	6019      	str	r1, [r3, #0]
   2dbd6:	e003      	b.n	2dbe0 <_printf_i+0x1b0>
   2dbd8:	f01c 0f40 	tst.w	ip, #64	; 0x40
   2dbdc:	d0fa      	beq.n	2dbd4 <_printf_i+0x1a4>
   2dbde:	8019      	strh	r1, [r3, #0]
   2dbe0:	2300      	movs	r3, #0
   2dbe2:	4605      	mov	r5, r0
   2dbe4:	6123      	str	r3, [r4, #16]
   2dbe6:	e7bd      	b.n	2db64 <_printf_i+0x134>
   2dbe8:	681a      	ldr	r2, [r3, #0]
   2dbea:	1d11      	adds	r1, r2, #4
   2dbec:	6019      	str	r1, [r3, #0]
   2dbee:	2100      	movs	r1, #0
   2dbf0:	6815      	ldr	r5, [r2, #0]
   2dbf2:	6862      	ldr	r2, [r4, #4]
   2dbf4:	4628      	mov	r0, r5
   2dbf6:	f002 f8f2 	bl	2fdde <memchr>
   2dbfa:	b108      	cbz	r0, 2dc00 <_printf_i+0x1d0>
   2dbfc:	1b40      	subs	r0, r0, r5
   2dbfe:	6060      	str	r0, [r4, #4]
   2dc00:	6863      	ldr	r3, [r4, #4]
   2dc02:	6123      	str	r3, [r4, #16]
   2dc04:	2300      	movs	r3, #0
   2dc06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2dc0a:	e7ab      	b.n	2db64 <_printf_i+0x134>
   2dc0c:	6923      	ldr	r3, [r4, #16]
   2dc0e:	462a      	mov	r2, r5
   2dc10:	4639      	mov	r1, r7
   2dc12:	4630      	mov	r0, r6
   2dc14:	47c0      	blx	r8
   2dc16:	3001      	adds	r0, #1
   2dc18:	d0ae      	beq.n	2db78 <_printf_i+0x148>
   2dc1a:	6823      	ldr	r3, [r4, #0]
   2dc1c:	079b      	lsls	r3, r3, #30
   2dc1e:	d413      	bmi.n	2dc48 <_printf_i+0x218>
   2dc20:	68e0      	ldr	r0, [r4, #12]
   2dc22:	9b03      	ldr	r3, [sp, #12]
   2dc24:	4298      	cmp	r0, r3
   2dc26:	bfb8      	it	lt
   2dc28:	4618      	movlt	r0, r3
   2dc2a:	e7a7      	b.n	2db7c <_printf_i+0x14c>
   2dc2c:	2301      	movs	r3, #1
   2dc2e:	464a      	mov	r2, r9
   2dc30:	4639      	mov	r1, r7
   2dc32:	4630      	mov	r0, r6
   2dc34:	47c0      	blx	r8
   2dc36:	3001      	adds	r0, #1
   2dc38:	d09e      	beq.n	2db78 <_printf_i+0x148>
   2dc3a:	3501      	adds	r5, #1
   2dc3c:	68e3      	ldr	r3, [r4, #12]
   2dc3e:	9a03      	ldr	r2, [sp, #12]
   2dc40:	1a9b      	subs	r3, r3, r2
   2dc42:	42ab      	cmp	r3, r5
   2dc44:	dcf2      	bgt.n	2dc2c <_printf_i+0x1fc>
   2dc46:	e7eb      	b.n	2dc20 <_printf_i+0x1f0>
   2dc48:	2500      	movs	r5, #0
   2dc4a:	f104 0919 	add.w	r9, r4, #25
   2dc4e:	e7f5      	b.n	2dc3c <_printf_i+0x20c>
   2dc50:	00033595 	.word	0x00033595
   2dc54:	000335a6 	.word	0x000335a6

0002dc58 <sniprintf>:
   2dc58:	b40c      	push	{r2, r3}
   2dc5a:	4b18      	ldr	r3, [pc, #96]	; (2dcbc <sniprintf+0x64>)
   2dc5c:	b530      	push	{r4, r5, lr}
   2dc5e:	1e0c      	subs	r4, r1, #0
   2dc60:	b09d      	sub	sp, #116	; 0x74
   2dc62:	681d      	ldr	r5, [r3, #0]
   2dc64:	da08      	bge.n	2dc78 <sniprintf+0x20>
   2dc66:	238b      	movs	r3, #139	; 0x8b
   2dc68:	f04f 30ff 	mov.w	r0, #4294967295
   2dc6c:	602b      	str	r3, [r5, #0]
   2dc6e:	b01d      	add	sp, #116	; 0x74
   2dc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2dc74:	b002      	add	sp, #8
   2dc76:	4770      	bx	lr
   2dc78:	f44f 7302 	mov.w	r3, #520	; 0x208
   2dc7c:	9002      	str	r0, [sp, #8]
   2dc7e:	9006      	str	r0, [sp, #24]
   2dc80:	a902      	add	r1, sp, #8
   2dc82:	f8ad 3014 	strh.w	r3, [sp, #20]
   2dc86:	bf14      	ite	ne
   2dc88:	f104 33ff 	addne.w	r3, r4, #4294967295
   2dc8c:	4623      	moveq	r3, r4
   2dc8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2dc90:	4628      	mov	r0, r5
   2dc92:	9304      	str	r3, [sp, #16]
   2dc94:	9307      	str	r3, [sp, #28]
   2dc96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2dc9a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2dc9e:	ab21      	add	r3, sp, #132	; 0x84
   2dca0:	9301      	str	r3, [sp, #4]
   2dca2:	f000 fc63 	bl	2e56c <_svfiprintf_r>
   2dca6:	1c43      	adds	r3, r0, #1
   2dca8:	bfbc      	itt	lt
   2dcaa:	238b      	movlt	r3, #139	; 0x8b
   2dcac:	602b      	strlt	r3, [r5, #0]
   2dcae:	2c00      	cmp	r4, #0
   2dcb0:	d0dd      	beq.n	2dc6e <sniprintf+0x16>
   2dcb2:	9b02      	ldr	r3, [sp, #8]
   2dcb4:	2200      	movs	r2, #0
   2dcb6:	701a      	strb	r2, [r3, #0]
   2dcb8:	e7d9      	b.n	2dc6e <sniprintf+0x16>
   2dcba:	bf00      	nop
   2dcbc:	2002675c 	.word	0x2002675c

0002dcc0 <_strtol_l.isra.0>:
   2dcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dcc4:	4686      	mov	lr, r0
   2dcc6:	4f39      	ldr	r7, [pc, #228]	; (2ddac <_strtol_l.isra.0+0xec>)
   2dcc8:	4608      	mov	r0, r1
   2dcca:	4605      	mov	r5, r0
   2dccc:	f815 4b01 	ldrb.w	r4, [r5], #1
   2dcd0:	5de6      	ldrb	r6, [r4, r7]
   2dcd2:	f016 0608 	ands.w	r6, r6, #8
   2dcd6:	d135      	bne.n	2dd44 <_strtol_l.isra.0+0x84>
   2dcd8:	2c2d      	cmp	r4, #45	; 0x2d
   2dcda:	d135      	bne.n	2dd48 <_strtol_l.isra.0+0x88>
   2dcdc:	782c      	ldrb	r4, [r5, #0]
   2dcde:	f04f 0801 	mov.w	r8, #1
   2dce2:	1c85      	adds	r5, r0, #2
   2dce4:	2b00      	cmp	r3, #0
   2dce6:	d05c      	beq.n	2dda2 <_strtol_l.isra.0+0xe2>
   2dce8:	2b10      	cmp	r3, #16
   2dcea:	d109      	bne.n	2dd00 <_strtol_l.isra.0+0x40>
   2dcec:	2c30      	cmp	r4, #48	; 0x30
   2dcee:	d107      	bne.n	2dd00 <_strtol_l.isra.0+0x40>
   2dcf0:	7828      	ldrb	r0, [r5, #0]
   2dcf2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2dcf6:	2858      	cmp	r0, #88	; 0x58
   2dcf8:	d14e      	bne.n	2dd98 <_strtol_l.isra.0+0xd8>
   2dcfa:	786c      	ldrb	r4, [r5, #1]
   2dcfc:	2310      	movs	r3, #16
   2dcfe:	3502      	adds	r5, #2
   2dd00:	f1b8 0f00 	cmp.w	r8, #0
   2dd04:	f04f 0700 	mov.w	r7, #0
   2dd08:	bf14      	ite	ne
   2dd0a:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   2dd0e:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   2dd12:	4638      	mov	r0, r7
   2dd14:	fbbc f9f3 	udiv	r9, ip, r3
   2dd18:	fb03 ca19 	mls	sl, r3, r9, ip
   2dd1c:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2dd20:	2e09      	cmp	r6, #9
   2dd22:	d817      	bhi.n	2dd54 <_strtol_l.isra.0+0x94>
   2dd24:	4634      	mov	r4, r6
   2dd26:	42a3      	cmp	r3, r4
   2dd28:	dd23      	ble.n	2dd72 <_strtol_l.isra.0+0xb2>
   2dd2a:	1c7e      	adds	r6, r7, #1
   2dd2c:	d007      	beq.n	2dd3e <_strtol_l.isra.0+0x7e>
   2dd2e:	4581      	cmp	r9, r0
   2dd30:	d31c      	bcc.n	2dd6c <_strtol_l.isra.0+0xac>
   2dd32:	d101      	bne.n	2dd38 <_strtol_l.isra.0+0x78>
   2dd34:	45a2      	cmp	sl, r4
   2dd36:	db19      	blt.n	2dd6c <_strtol_l.isra.0+0xac>
   2dd38:	fb00 4003 	mla	r0, r0, r3, r4
   2dd3c:	2701      	movs	r7, #1
   2dd3e:	f815 4b01 	ldrb.w	r4, [r5], #1
   2dd42:	e7eb      	b.n	2dd1c <_strtol_l.isra.0+0x5c>
   2dd44:	4628      	mov	r0, r5
   2dd46:	e7c0      	b.n	2dcca <_strtol_l.isra.0+0xa>
   2dd48:	2c2b      	cmp	r4, #43	; 0x2b
   2dd4a:	46b0      	mov	r8, r6
   2dd4c:	bf04      	itt	eq
   2dd4e:	782c      	ldrbeq	r4, [r5, #0]
   2dd50:	1c85      	addeq	r5, r0, #2
   2dd52:	e7c7      	b.n	2dce4 <_strtol_l.isra.0+0x24>
   2dd54:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2dd58:	2e19      	cmp	r6, #25
   2dd5a:	d801      	bhi.n	2dd60 <_strtol_l.isra.0+0xa0>
   2dd5c:	3c37      	subs	r4, #55	; 0x37
   2dd5e:	e7e2      	b.n	2dd26 <_strtol_l.isra.0+0x66>
   2dd60:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2dd64:	2e19      	cmp	r6, #25
   2dd66:	d804      	bhi.n	2dd72 <_strtol_l.isra.0+0xb2>
   2dd68:	3c57      	subs	r4, #87	; 0x57
   2dd6a:	e7dc      	b.n	2dd26 <_strtol_l.isra.0+0x66>
   2dd6c:	f04f 37ff 	mov.w	r7, #4294967295
   2dd70:	e7e5      	b.n	2dd3e <_strtol_l.isra.0+0x7e>
   2dd72:	1c7b      	adds	r3, r7, #1
   2dd74:	d106      	bne.n	2dd84 <_strtol_l.isra.0+0xc4>
   2dd76:	2322      	movs	r3, #34	; 0x22
   2dd78:	4660      	mov	r0, ip
   2dd7a:	f8ce 3000 	str.w	r3, [lr]
   2dd7e:	b942      	cbnz	r2, 2dd92 <_strtol_l.isra.0+0xd2>
   2dd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2dd84:	f1b8 0f00 	cmp.w	r8, #0
   2dd88:	d000      	beq.n	2dd8c <_strtol_l.isra.0+0xcc>
   2dd8a:	4240      	negs	r0, r0
   2dd8c:	2a00      	cmp	r2, #0
   2dd8e:	d0f7      	beq.n	2dd80 <_strtol_l.isra.0+0xc0>
   2dd90:	b107      	cbz	r7, 2dd94 <_strtol_l.isra.0+0xd4>
   2dd92:	1e69      	subs	r1, r5, #1
   2dd94:	6011      	str	r1, [r2, #0]
   2dd96:	e7f3      	b.n	2dd80 <_strtol_l.isra.0+0xc0>
   2dd98:	2430      	movs	r4, #48	; 0x30
   2dd9a:	2b00      	cmp	r3, #0
   2dd9c:	d1b0      	bne.n	2dd00 <_strtol_l.isra.0+0x40>
   2dd9e:	2308      	movs	r3, #8
   2dda0:	e7ae      	b.n	2dd00 <_strtol_l.isra.0+0x40>
   2dda2:	2c30      	cmp	r4, #48	; 0x30
   2dda4:	d0a4      	beq.n	2dcf0 <_strtol_l.isra.0+0x30>
   2dda6:	230a      	movs	r3, #10
   2dda8:	e7aa      	b.n	2dd00 <_strtol_l.isra.0+0x40>
   2ddaa:	bf00      	nop
   2ddac:	00033478 	.word	0x00033478

0002ddb0 <strtol>:
   2ddb0:	4613      	mov	r3, r2
   2ddb2:	460a      	mov	r2, r1
   2ddb4:	4601      	mov	r1, r0
   2ddb6:	4802      	ldr	r0, [pc, #8]	; (2ddc0 <strtol+0x10>)
   2ddb8:	6800      	ldr	r0, [r0, #0]
   2ddba:	f7ff bf81 	b.w	2dcc0 <_strtol_l.isra.0>
   2ddbe:	bf00      	nop
   2ddc0:	2002675c 	.word	0x2002675c

0002ddc4 <vsniprintf>:
   2ddc4:	b507      	push	{r0, r1, r2, lr}
   2ddc6:	9300      	str	r3, [sp, #0]
   2ddc8:	4613      	mov	r3, r2
   2ddca:	460a      	mov	r2, r1
   2ddcc:	4601      	mov	r1, r0
   2ddce:	4803      	ldr	r0, [pc, #12]	; (2dddc <vsniprintf+0x18>)
   2ddd0:	6800      	ldr	r0, [r0, #0]
   2ddd2:	f002 f9be 	bl	30152 <_vsniprintf_r>
   2ddd6:	b003      	add	sp, #12
   2ddd8:	f85d fb04 	ldr.w	pc, [sp], #4
   2dddc:	2002675c 	.word	0x2002675c

0002dde0 <_vsiprintf_r>:
   2dde0:	b500      	push	{lr}
   2dde2:	b09b      	sub	sp, #108	; 0x6c
   2dde4:	9100      	str	r1, [sp, #0]
   2dde6:	9104      	str	r1, [sp, #16]
   2dde8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2ddec:	9105      	str	r1, [sp, #20]
   2ddee:	9102      	str	r1, [sp, #8]
   2ddf0:	4905      	ldr	r1, [pc, #20]	; (2de08 <_vsiprintf_r+0x28>)
   2ddf2:	9103      	str	r1, [sp, #12]
   2ddf4:	4669      	mov	r1, sp
   2ddf6:	f000 fbb9 	bl	2e56c <_svfiprintf_r>
   2ddfa:	9b00      	ldr	r3, [sp, #0]
   2ddfc:	2200      	movs	r2, #0
   2ddfe:	701a      	strb	r2, [r3, #0]
   2de00:	b01b      	add	sp, #108	; 0x6c
   2de02:	f85d fb04 	ldr.w	pc, [sp], #4
   2de06:	bf00      	nop
   2de08:	ffff0208 	.word	0xffff0208

0002de0c <vsiprintf>:
   2de0c:	4613      	mov	r3, r2
   2de0e:	460a      	mov	r2, r1
   2de10:	4601      	mov	r1, r0
   2de12:	4802      	ldr	r0, [pc, #8]	; (2de1c <vsiprintf+0x10>)
   2de14:	6800      	ldr	r0, [r0, #0]
   2de16:	f7ff bfe3 	b.w	2dde0 <_vsiprintf_r>
   2de1a:	bf00      	nop
   2de1c:	2002675c 	.word	0x2002675c

0002de20 <__swbuf_r>:
   2de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de22:	460e      	mov	r6, r1
   2de24:	4614      	mov	r4, r2
   2de26:	4605      	mov	r5, r0
   2de28:	b118      	cbz	r0, 2de32 <__swbuf_r+0x12>
   2de2a:	6983      	ldr	r3, [r0, #24]
   2de2c:	b90b      	cbnz	r3, 2de32 <__swbuf_r+0x12>
   2de2e:	f000 f9dd 	bl	2e1ec <__sinit>
   2de32:	4b21      	ldr	r3, [pc, #132]	; (2deb8 <__swbuf_r+0x98>)
   2de34:	429c      	cmp	r4, r3
   2de36:	d12b      	bne.n	2de90 <__swbuf_r+0x70>
   2de38:	686c      	ldr	r4, [r5, #4]
   2de3a:	69a3      	ldr	r3, [r4, #24]
   2de3c:	60a3      	str	r3, [r4, #8]
   2de3e:	89a3      	ldrh	r3, [r4, #12]
   2de40:	071a      	lsls	r2, r3, #28
   2de42:	d52f      	bpl.n	2dea4 <__swbuf_r+0x84>
   2de44:	6923      	ldr	r3, [r4, #16]
   2de46:	b36b      	cbz	r3, 2dea4 <__swbuf_r+0x84>
   2de48:	6923      	ldr	r3, [r4, #16]
   2de4a:	b2f6      	uxtb	r6, r6
   2de4c:	6820      	ldr	r0, [r4, #0]
   2de4e:	4637      	mov	r7, r6
   2de50:	1ac0      	subs	r0, r0, r3
   2de52:	6963      	ldr	r3, [r4, #20]
   2de54:	4283      	cmp	r3, r0
   2de56:	dc04      	bgt.n	2de62 <__swbuf_r+0x42>
   2de58:	4621      	mov	r1, r4
   2de5a:	4628      	mov	r0, r5
   2de5c:	f000 f948 	bl	2e0f0 <_fflush_r>
   2de60:	bb30      	cbnz	r0, 2deb0 <__swbuf_r+0x90>
   2de62:	68a3      	ldr	r3, [r4, #8]
   2de64:	3001      	adds	r0, #1
   2de66:	3b01      	subs	r3, #1
   2de68:	60a3      	str	r3, [r4, #8]
   2de6a:	6823      	ldr	r3, [r4, #0]
   2de6c:	1c5a      	adds	r2, r3, #1
   2de6e:	6022      	str	r2, [r4, #0]
   2de70:	701e      	strb	r6, [r3, #0]
   2de72:	6963      	ldr	r3, [r4, #20]
   2de74:	4283      	cmp	r3, r0
   2de76:	d004      	beq.n	2de82 <__swbuf_r+0x62>
   2de78:	89a3      	ldrh	r3, [r4, #12]
   2de7a:	07db      	lsls	r3, r3, #31
   2de7c:	d506      	bpl.n	2de8c <__swbuf_r+0x6c>
   2de7e:	2e0a      	cmp	r6, #10
   2de80:	d104      	bne.n	2de8c <__swbuf_r+0x6c>
   2de82:	4621      	mov	r1, r4
   2de84:	4628      	mov	r0, r5
   2de86:	f000 f933 	bl	2e0f0 <_fflush_r>
   2de8a:	b988      	cbnz	r0, 2deb0 <__swbuf_r+0x90>
   2de8c:	4638      	mov	r0, r7
   2de8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2de90:	4b0a      	ldr	r3, [pc, #40]	; (2debc <__swbuf_r+0x9c>)
   2de92:	429c      	cmp	r4, r3
   2de94:	d101      	bne.n	2de9a <__swbuf_r+0x7a>
   2de96:	68ac      	ldr	r4, [r5, #8]
   2de98:	e7cf      	b.n	2de3a <__swbuf_r+0x1a>
   2de9a:	4b09      	ldr	r3, [pc, #36]	; (2dec0 <__swbuf_r+0xa0>)
   2de9c:	429c      	cmp	r4, r3
   2de9e:	bf08      	it	eq
   2dea0:	68ec      	ldreq	r4, [r5, #12]
   2dea2:	e7ca      	b.n	2de3a <__swbuf_r+0x1a>
   2dea4:	4621      	mov	r1, r4
   2dea6:	4628      	mov	r0, r5
   2dea8:	f000 f80c 	bl	2dec4 <__swsetup_r>
   2deac:	2800      	cmp	r0, #0
   2deae:	d0cb      	beq.n	2de48 <__swbuf_r+0x28>
   2deb0:	f04f 37ff 	mov.w	r7, #4294967295
   2deb4:	e7ea      	b.n	2de8c <__swbuf_r+0x6c>
   2deb6:	bf00      	nop
   2deb8:	000314cc 	.word	0x000314cc
   2debc:	000314ec 	.word	0x000314ec
   2dec0:	000314ac 	.word	0x000314ac

0002dec4 <__swsetup_r>:
   2dec4:	4b32      	ldr	r3, [pc, #200]	; (2df90 <__swsetup_r+0xcc>)
   2dec6:	b570      	push	{r4, r5, r6, lr}
   2dec8:	681d      	ldr	r5, [r3, #0]
   2deca:	4606      	mov	r6, r0
   2decc:	460c      	mov	r4, r1
   2dece:	b125      	cbz	r5, 2deda <__swsetup_r+0x16>
   2ded0:	69ab      	ldr	r3, [r5, #24]
   2ded2:	b913      	cbnz	r3, 2deda <__swsetup_r+0x16>
   2ded4:	4628      	mov	r0, r5
   2ded6:	f000 f989 	bl	2e1ec <__sinit>
   2deda:	4b2e      	ldr	r3, [pc, #184]	; (2df94 <__swsetup_r+0xd0>)
   2dedc:	429c      	cmp	r4, r3
   2dede:	d10f      	bne.n	2df00 <__swsetup_r+0x3c>
   2dee0:	686c      	ldr	r4, [r5, #4]
   2dee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2dee6:	b29a      	uxth	r2, r3
   2dee8:	0715      	lsls	r5, r2, #28
   2deea:	d42c      	bmi.n	2df46 <__swsetup_r+0x82>
   2deec:	06d0      	lsls	r0, r2, #27
   2deee:	d411      	bmi.n	2df14 <__swsetup_r+0x50>
   2def0:	2209      	movs	r2, #9
   2def2:	6032      	str	r2, [r6, #0]
   2def4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2def8:	f04f 30ff 	mov.w	r0, #4294967295
   2defc:	81a3      	strh	r3, [r4, #12]
   2defe:	e03e      	b.n	2df7e <__swsetup_r+0xba>
   2df00:	4b25      	ldr	r3, [pc, #148]	; (2df98 <__swsetup_r+0xd4>)
   2df02:	429c      	cmp	r4, r3
   2df04:	d101      	bne.n	2df0a <__swsetup_r+0x46>
   2df06:	68ac      	ldr	r4, [r5, #8]
   2df08:	e7eb      	b.n	2dee2 <__swsetup_r+0x1e>
   2df0a:	4b24      	ldr	r3, [pc, #144]	; (2df9c <__swsetup_r+0xd8>)
   2df0c:	429c      	cmp	r4, r3
   2df0e:	bf08      	it	eq
   2df10:	68ec      	ldreq	r4, [r5, #12]
   2df12:	e7e6      	b.n	2dee2 <__swsetup_r+0x1e>
   2df14:	0751      	lsls	r1, r2, #29
   2df16:	d512      	bpl.n	2df3e <__swsetup_r+0x7a>
   2df18:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2df1a:	b141      	cbz	r1, 2df2e <__swsetup_r+0x6a>
   2df1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2df20:	4299      	cmp	r1, r3
   2df22:	d002      	beq.n	2df2a <__swsetup_r+0x66>
   2df24:	4630      	mov	r0, r6
   2df26:	f000 fa79 	bl	2e41c <_free_r>
   2df2a:	2300      	movs	r3, #0
   2df2c:	6363      	str	r3, [r4, #52]	; 0x34
   2df2e:	89a3      	ldrh	r3, [r4, #12]
   2df30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2df34:	81a3      	strh	r3, [r4, #12]
   2df36:	2300      	movs	r3, #0
   2df38:	6063      	str	r3, [r4, #4]
   2df3a:	6923      	ldr	r3, [r4, #16]
   2df3c:	6023      	str	r3, [r4, #0]
   2df3e:	89a3      	ldrh	r3, [r4, #12]
   2df40:	f043 0308 	orr.w	r3, r3, #8
   2df44:	81a3      	strh	r3, [r4, #12]
   2df46:	6923      	ldr	r3, [r4, #16]
   2df48:	b94b      	cbnz	r3, 2df5e <__swsetup_r+0x9a>
   2df4a:	89a3      	ldrh	r3, [r4, #12]
   2df4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2df50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2df54:	d003      	beq.n	2df5e <__swsetup_r+0x9a>
   2df56:	4621      	mov	r1, r4
   2df58:	4630      	mov	r0, r6
   2df5a:	f000 f9c9 	bl	2e2f0 <__smakebuf_r>
   2df5e:	89a2      	ldrh	r2, [r4, #12]
   2df60:	f012 0301 	ands.w	r3, r2, #1
   2df64:	d00c      	beq.n	2df80 <__swsetup_r+0xbc>
   2df66:	2300      	movs	r3, #0
   2df68:	60a3      	str	r3, [r4, #8]
   2df6a:	6963      	ldr	r3, [r4, #20]
   2df6c:	425b      	negs	r3, r3
   2df6e:	61a3      	str	r3, [r4, #24]
   2df70:	6923      	ldr	r3, [r4, #16]
   2df72:	b953      	cbnz	r3, 2df8a <__swsetup_r+0xc6>
   2df74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2df78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   2df7c:	d1ba      	bne.n	2def4 <__swsetup_r+0x30>
   2df7e:	bd70      	pop	{r4, r5, r6, pc}
   2df80:	0792      	lsls	r2, r2, #30
   2df82:	bf58      	it	pl
   2df84:	6963      	ldrpl	r3, [r4, #20]
   2df86:	60a3      	str	r3, [r4, #8]
   2df88:	e7f2      	b.n	2df70 <__swsetup_r+0xac>
   2df8a:	2000      	movs	r0, #0
   2df8c:	e7f7      	b.n	2df7e <__swsetup_r+0xba>
   2df8e:	bf00      	nop
   2df90:	2002675c 	.word	0x2002675c
   2df94:	000314cc 	.word	0x000314cc
   2df98:	000314ec 	.word	0x000314ec
   2df9c:	000314ac 	.word	0x000314ac

0002dfa0 <__chk_fail>:
   2dfa0:	b500      	push	{lr}
   2dfa2:	b08d      	sub	sp, #52	; 0x34
   2dfa4:	4b0f      	ldr	r3, [pc, #60]	; (2dfe4 <__chk_fail+0x44>)
   2dfa6:	466a      	mov	r2, sp
   2dfa8:	f103 0628 	add.w	r6, r3, #40	; 0x28
   2dfac:	4615      	mov	r5, r2
   2dfae:	6818      	ldr	r0, [r3, #0]
   2dfb0:	3308      	adds	r3, #8
   2dfb2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   2dfb6:	4614      	mov	r4, r2
   2dfb8:	42b3      	cmp	r3, r6
   2dfba:	c403      	stmia	r4!, {r0, r1}
   2dfbc:	4622      	mov	r2, r4
   2dfbe:	d1f6      	bne.n	2dfae <__chk_fail+0xe>
   2dfc0:	6818      	ldr	r0, [r3, #0]
   2dfc2:	889b      	ldrh	r3, [r3, #4]
   2dfc4:	6020      	str	r0, [r4, #0]
   2dfc6:	4628      	mov	r0, r5
   2dfc8:	80a3      	strh	r3, [r4, #4]
   2dfca:	f7ef f855 	bl	1d078 <strlen>
   2dfce:	4629      	mov	r1, r5
   2dfd0:	4602      	mov	r2, r0
   2dfd2:	2002      	movs	r0, #2
   2dfd4:	f001 f803 	bl	2efde <_write>
   2dfd8:	2006      	movs	r0, #6
   2dfda:	f000 fbcf 	bl	2e77c <raise>
   2dfde:	207f      	movs	r0, #127	; 0x7f
   2dfe0:	f7f1 ff20 	bl	1fe24 <_exit>
   2dfe4:	000335b7 	.word	0x000335b7

0002dfe8 <__sflush_r>:
   2dfe8:	898a      	ldrh	r2, [r1, #12]
   2dfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dfee:	4605      	mov	r5, r0
   2dff0:	0710      	lsls	r0, r2, #28
   2dff2:	460c      	mov	r4, r1
   2dff4:	d458      	bmi.n	2e0a8 <__sflush_r+0xc0>
   2dff6:	684b      	ldr	r3, [r1, #4]
   2dff8:	2b00      	cmp	r3, #0
   2dffa:	dc05      	bgt.n	2e008 <__sflush_r+0x20>
   2dffc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2dffe:	2b00      	cmp	r3, #0
   2e000:	dc02      	bgt.n	2e008 <__sflush_r+0x20>
   2e002:	2000      	movs	r0, #0
   2e004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2e00a:	2e00      	cmp	r6, #0
   2e00c:	d0f9      	beq.n	2e002 <__sflush_r+0x1a>
   2e00e:	2300      	movs	r3, #0
   2e010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2e014:	682f      	ldr	r7, [r5, #0]
   2e016:	602b      	str	r3, [r5, #0]
   2e018:	d032      	beq.n	2e080 <__sflush_r+0x98>
   2e01a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   2e01c:	89a3      	ldrh	r3, [r4, #12]
   2e01e:	075a      	lsls	r2, r3, #29
   2e020:	d505      	bpl.n	2e02e <__sflush_r+0x46>
   2e022:	6863      	ldr	r3, [r4, #4]
   2e024:	1ac0      	subs	r0, r0, r3
   2e026:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e028:	b10b      	cbz	r3, 2e02e <__sflush_r+0x46>
   2e02a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2e02c:	1ac0      	subs	r0, r0, r3
   2e02e:	2300      	movs	r3, #0
   2e030:	4602      	mov	r2, r0
   2e032:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2e034:	4628      	mov	r0, r5
   2e036:	6a21      	ldr	r1, [r4, #32]
   2e038:	47b0      	blx	r6
   2e03a:	1c43      	adds	r3, r0, #1
   2e03c:	89a3      	ldrh	r3, [r4, #12]
   2e03e:	d106      	bne.n	2e04e <__sflush_r+0x66>
   2e040:	6829      	ldr	r1, [r5, #0]
   2e042:	291d      	cmp	r1, #29
   2e044:	d82c      	bhi.n	2e0a0 <__sflush_r+0xb8>
   2e046:	4a29      	ldr	r2, [pc, #164]	; (2e0ec <__sflush_r+0x104>)
   2e048:	40ca      	lsrs	r2, r1
   2e04a:	07d6      	lsls	r6, r2, #31
   2e04c:	d528      	bpl.n	2e0a0 <__sflush_r+0xb8>
   2e04e:	2200      	movs	r2, #0
   2e050:	04d9      	lsls	r1, r3, #19
   2e052:	6062      	str	r2, [r4, #4]
   2e054:	6922      	ldr	r2, [r4, #16]
   2e056:	6022      	str	r2, [r4, #0]
   2e058:	d504      	bpl.n	2e064 <__sflush_r+0x7c>
   2e05a:	1c42      	adds	r2, r0, #1
   2e05c:	d101      	bne.n	2e062 <__sflush_r+0x7a>
   2e05e:	682b      	ldr	r3, [r5, #0]
   2e060:	b903      	cbnz	r3, 2e064 <__sflush_r+0x7c>
   2e062:	6560      	str	r0, [r4, #84]	; 0x54
   2e064:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2e066:	602f      	str	r7, [r5, #0]
   2e068:	2900      	cmp	r1, #0
   2e06a:	d0ca      	beq.n	2e002 <__sflush_r+0x1a>
   2e06c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2e070:	4299      	cmp	r1, r3
   2e072:	d002      	beq.n	2e07a <__sflush_r+0x92>
   2e074:	4628      	mov	r0, r5
   2e076:	f000 f9d1 	bl	2e41c <_free_r>
   2e07a:	2000      	movs	r0, #0
   2e07c:	6360      	str	r0, [r4, #52]	; 0x34
   2e07e:	e7c1      	b.n	2e004 <__sflush_r+0x1c>
   2e080:	6a21      	ldr	r1, [r4, #32]
   2e082:	2301      	movs	r3, #1
   2e084:	4628      	mov	r0, r5
   2e086:	47b0      	blx	r6
   2e088:	1c41      	adds	r1, r0, #1
   2e08a:	d1c7      	bne.n	2e01c <__sflush_r+0x34>
   2e08c:	682b      	ldr	r3, [r5, #0]
   2e08e:	2b00      	cmp	r3, #0
   2e090:	d0c4      	beq.n	2e01c <__sflush_r+0x34>
   2e092:	2b1d      	cmp	r3, #29
   2e094:	d001      	beq.n	2e09a <__sflush_r+0xb2>
   2e096:	2b16      	cmp	r3, #22
   2e098:	d101      	bne.n	2e09e <__sflush_r+0xb6>
   2e09a:	602f      	str	r7, [r5, #0]
   2e09c:	e7b1      	b.n	2e002 <__sflush_r+0x1a>
   2e09e:	89a3      	ldrh	r3, [r4, #12]
   2e0a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e0a4:	81a3      	strh	r3, [r4, #12]
   2e0a6:	e7ad      	b.n	2e004 <__sflush_r+0x1c>
   2e0a8:	690f      	ldr	r7, [r1, #16]
   2e0aa:	2f00      	cmp	r7, #0
   2e0ac:	d0a9      	beq.n	2e002 <__sflush_r+0x1a>
   2e0ae:	0793      	lsls	r3, r2, #30
   2e0b0:	680e      	ldr	r6, [r1, #0]
   2e0b2:	600f      	str	r7, [r1, #0]
   2e0b4:	bf0c      	ite	eq
   2e0b6:	694b      	ldreq	r3, [r1, #20]
   2e0b8:	2300      	movne	r3, #0
   2e0ba:	eba6 0807 	sub.w	r8, r6, r7
   2e0be:	608b      	str	r3, [r1, #8]
   2e0c0:	f1b8 0f00 	cmp.w	r8, #0
   2e0c4:	dd9d      	ble.n	2e002 <__sflush_r+0x1a>
   2e0c6:	4643      	mov	r3, r8
   2e0c8:	463a      	mov	r2, r7
   2e0ca:	6a21      	ldr	r1, [r4, #32]
   2e0cc:	4628      	mov	r0, r5
   2e0ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2e0d0:	47b0      	blx	r6
   2e0d2:	2800      	cmp	r0, #0
   2e0d4:	dc06      	bgt.n	2e0e4 <__sflush_r+0xfc>
   2e0d6:	89a3      	ldrh	r3, [r4, #12]
   2e0d8:	f04f 30ff 	mov.w	r0, #4294967295
   2e0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e0e0:	81a3      	strh	r3, [r4, #12]
   2e0e2:	e78f      	b.n	2e004 <__sflush_r+0x1c>
   2e0e4:	4407      	add	r7, r0
   2e0e6:	eba8 0800 	sub.w	r8, r8, r0
   2e0ea:	e7e9      	b.n	2e0c0 <__sflush_r+0xd8>
   2e0ec:	20400001 	.word	0x20400001

0002e0f0 <_fflush_r>:
   2e0f0:	b538      	push	{r3, r4, r5, lr}
   2e0f2:	690b      	ldr	r3, [r1, #16]
   2e0f4:	4605      	mov	r5, r0
   2e0f6:	460c      	mov	r4, r1
   2e0f8:	b913      	cbnz	r3, 2e100 <_fflush_r+0x10>
   2e0fa:	2500      	movs	r5, #0
   2e0fc:	4628      	mov	r0, r5
   2e0fe:	bd38      	pop	{r3, r4, r5, pc}
   2e100:	b118      	cbz	r0, 2e10a <_fflush_r+0x1a>
   2e102:	6983      	ldr	r3, [r0, #24]
   2e104:	b90b      	cbnz	r3, 2e10a <_fflush_r+0x1a>
   2e106:	f000 f871 	bl	2e1ec <__sinit>
   2e10a:	4b14      	ldr	r3, [pc, #80]	; (2e15c <_fflush_r+0x6c>)
   2e10c:	429c      	cmp	r4, r3
   2e10e:	d11b      	bne.n	2e148 <_fflush_r+0x58>
   2e110:	686c      	ldr	r4, [r5, #4]
   2e112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2e116:	2b00      	cmp	r3, #0
   2e118:	d0ef      	beq.n	2e0fa <_fflush_r+0xa>
   2e11a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2e11c:	07d0      	lsls	r0, r2, #31
   2e11e:	d404      	bmi.n	2e12a <_fflush_r+0x3a>
   2e120:	0599      	lsls	r1, r3, #22
   2e122:	d402      	bmi.n	2e12a <_fflush_r+0x3a>
   2e124:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e126:	f002 f90a 	bl	3033e <__retarget_lock_acquire_recursive>
   2e12a:	4628      	mov	r0, r5
   2e12c:	4621      	mov	r1, r4
   2e12e:	f7ff ff5b 	bl	2dfe8 <__sflush_r>
   2e132:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2e134:	4605      	mov	r5, r0
   2e136:	07da      	lsls	r2, r3, #31
   2e138:	d4e0      	bmi.n	2e0fc <_fflush_r+0xc>
   2e13a:	89a3      	ldrh	r3, [r4, #12]
   2e13c:	059b      	lsls	r3, r3, #22
   2e13e:	d4dd      	bmi.n	2e0fc <_fflush_r+0xc>
   2e140:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e142:	f002 f8fd 	bl	30340 <__retarget_lock_release_recursive>
   2e146:	e7d9      	b.n	2e0fc <_fflush_r+0xc>
   2e148:	4b05      	ldr	r3, [pc, #20]	; (2e160 <_fflush_r+0x70>)
   2e14a:	429c      	cmp	r4, r3
   2e14c:	d101      	bne.n	2e152 <_fflush_r+0x62>
   2e14e:	68ac      	ldr	r4, [r5, #8]
   2e150:	e7df      	b.n	2e112 <_fflush_r+0x22>
   2e152:	4b04      	ldr	r3, [pc, #16]	; (2e164 <_fflush_r+0x74>)
   2e154:	429c      	cmp	r4, r3
   2e156:	bf08      	it	eq
   2e158:	68ec      	ldreq	r4, [r5, #12]
   2e15a:	e7da      	b.n	2e112 <_fflush_r+0x22>
   2e15c:	000314cc 	.word	0x000314cc
   2e160:	000314ec 	.word	0x000314ec
   2e164:	000314ac 	.word	0x000314ac

0002e168 <std>:
   2e168:	2300      	movs	r3, #0
   2e16a:	b510      	push	{r4, lr}
   2e16c:	4604      	mov	r4, r0
   2e16e:	6083      	str	r3, [r0, #8]
   2e170:	8181      	strh	r1, [r0, #12]
   2e172:	4619      	mov	r1, r3
   2e174:	6643      	str	r3, [r0, #100]	; 0x64
   2e176:	81c2      	strh	r2, [r0, #14]
   2e178:	2208      	movs	r2, #8
   2e17a:	6183      	str	r3, [r0, #24]
   2e17c:	e9c0 3300 	strd	r3, r3, [r0]
   2e180:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2e184:	305c      	adds	r0, #92	; 0x5c
   2e186:	f001 fe53 	bl	2fe30 <memset>
   2e18a:	4b05      	ldr	r3, [pc, #20]	; (2e1a0 <std+0x38>)
   2e18c:	6224      	str	r4, [r4, #32]
   2e18e:	6263      	str	r3, [r4, #36]	; 0x24
   2e190:	4b04      	ldr	r3, [pc, #16]	; (2e1a4 <std+0x3c>)
   2e192:	62a3      	str	r3, [r4, #40]	; 0x28
   2e194:	4b04      	ldr	r3, [pc, #16]	; (2e1a8 <std+0x40>)
   2e196:	62e3      	str	r3, [r4, #44]	; 0x2c
   2e198:	4b04      	ldr	r3, [pc, #16]	; (2e1ac <std+0x44>)
   2e19a:	6323      	str	r3, [r4, #48]	; 0x30
   2e19c:	bd10      	pop	{r4, pc}
   2e19e:	bf00      	nop
   2e1a0:	00030a47 	.word	0x00030a47
   2e1a4:	00030a69 	.word	0x00030a69
   2e1a8:	00030aa1 	.word	0x00030aa1
   2e1ac:	00030ac5 	.word	0x00030ac5

0002e1b0 <_cleanup_r>:
   2e1b0:	4901      	ldr	r1, [pc, #4]	; (2e1b8 <_cleanup_r+0x8>)
   2e1b2:	f002 b8a5 	b.w	30300 <_fwalk_reent>
   2e1b6:	bf00      	nop
   2e1b8:	0002e0f1 	.word	0x0002e0f1

0002e1bc <__sfp_lock_acquire>:
   2e1bc:	4801      	ldr	r0, [pc, #4]	; (2e1c4 <__sfp_lock_acquire+0x8>)
   2e1be:	f002 b8be 	b.w	3033e <__retarget_lock_acquire_recursive>
   2e1c2:	bf00      	nop
   2e1c4:	20022a90 	.word	0x20022a90

0002e1c8 <__sfp_lock_release>:
   2e1c8:	4801      	ldr	r0, [pc, #4]	; (2e1d0 <__sfp_lock_release+0x8>)
   2e1ca:	f002 b8b9 	b.w	30340 <__retarget_lock_release_recursive>
   2e1ce:	bf00      	nop
   2e1d0:	20022a90 	.word	0x20022a90

0002e1d4 <__sinit_lock_acquire>:
   2e1d4:	4801      	ldr	r0, [pc, #4]	; (2e1dc <__sinit_lock_acquire+0x8>)
   2e1d6:	f002 b8b2 	b.w	3033e <__retarget_lock_acquire_recursive>
   2e1da:	bf00      	nop
   2e1dc:	20022a8b 	.word	0x20022a8b

0002e1e0 <__sinit_lock_release>:
   2e1e0:	4801      	ldr	r0, [pc, #4]	; (2e1e8 <__sinit_lock_release+0x8>)
   2e1e2:	f002 b8ad 	b.w	30340 <__retarget_lock_release_recursive>
   2e1e6:	bf00      	nop
   2e1e8:	20022a8b 	.word	0x20022a8b

0002e1ec <__sinit>:
   2e1ec:	b510      	push	{r4, lr}
   2e1ee:	4604      	mov	r4, r0
   2e1f0:	f7ff fff0 	bl	2e1d4 <__sinit_lock_acquire>
   2e1f4:	69a3      	ldr	r3, [r4, #24]
   2e1f6:	b11b      	cbz	r3, 2e200 <__sinit+0x14>
   2e1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e1fc:	f7ff bff0 	b.w	2e1e0 <__sinit_lock_release>
   2e200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2e204:	6523      	str	r3, [r4, #80]	; 0x50
   2e206:	4620      	mov	r0, r4
   2e208:	4b12      	ldr	r3, [pc, #72]	; (2e254 <__sinit+0x68>)
   2e20a:	4a13      	ldr	r2, [pc, #76]	; (2e258 <__sinit+0x6c>)
   2e20c:	681b      	ldr	r3, [r3, #0]
   2e20e:	62a2      	str	r2, [r4, #40]	; 0x28
   2e210:	42a3      	cmp	r3, r4
   2e212:	bf04      	itt	eq
   2e214:	2301      	moveq	r3, #1
   2e216:	61a3      	streq	r3, [r4, #24]
   2e218:	f000 f820 	bl	2e25c <__sfp>
   2e21c:	6060      	str	r0, [r4, #4]
   2e21e:	4620      	mov	r0, r4
   2e220:	f000 f81c 	bl	2e25c <__sfp>
   2e224:	60a0      	str	r0, [r4, #8]
   2e226:	4620      	mov	r0, r4
   2e228:	f000 f818 	bl	2e25c <__sfp>
   2e22c:	2200      	movs	r2, #0
   2e22e:	60e0      	str	r0, [r4, #12]
   2e230:	2104      	movs	r1, #4
   2e232:	6860      	ldr	r0, [r4, #4]
   2e234:	f7ff ff98 	bl	2e168 <std>
   2e238:	2201      	movs	r2, #1
   2e23a:	2109      	movs	r1, #9
   2e23c:	68a0      	ldr	r0, [r4, #8]
   2e23e:	f7ff ff93 	bl	2e168 <std>
   2e242:	2202      	movs	r2, #2
   2e244:	2112      	movs	r1, #18
   2e246:	68e0      	ldr	r0, [r4, #12]
   2e248:	f7ff ff8e 	bl	2e168 <std>
   2e24c:	2301      	movs	r3, #1
   2e24e:	61a3      	str	r3, [r4, #24]
   2e250:	e7d2      	b.n	2e1f8 <__sinit+0xc>
   2e252:	bf00      	nop
   2e254:	000314a8 	.word	0x000314a8
   2e258:	0002e1b1 	.word	0x0002e1b1

0002e25c <__sfp>:
   2e25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e25e:	4607      	mov	r7, r0
   2e260:	f7ff ffac 	bl	2e1bc <__sfp_lock_acquire>
   2e264:	4b1e      	ldr	r3, [pc, #120]	; (2e2e0 <__sfp+0x84>)
   2e266:	681e      	ldr	r6, [r3, #0]
   2e268:	69b3      	ldr	r3, [r6, #24]
   2e26a:	b913      	cbnz	r3, 2e272 <__sfp+0x16>
   2e26c:	4630      	mov	r0, r6
   2e26e:	f7ff ffbd 	bl	2e1ec <__sinit>
   2e272:	3648      	adds	r6, #72	; 0x48
   2e274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   2e278:	3b01      	subs	r3, #1
   2e27a:	d503      	bpl.n	2e284 <__sfp+0x28>
   2e27c:	6833      	ldr	r3, [r6, #0]
   2e27e:	b30b      	cbz	r3, 2e2c4 <__sfp+0x68>
   2e280:	6836      	ldr	r6, [r6, #0]
   2e282:	e7f7      	b.n	2e274 <__sfp+0x18>
   2e284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2e288:	b9d5      	cbnz	r5, 2e2c0 <__sfp+0x64>
   2e28a:	4b16      	ldr	r3, [pc, #88]	; (2e2e4 <__sfp+0x88>)
   2e28c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2e290:	6665      	str	r5, [r4, #100]	; 0x64
   2e292:	60e3      	str	r3, [r4, #12]
   2e294:	f002 f852 	bl	3033c <__retarget_lock_init_recursive>
   2e298:	f7ff ff96 	bl	2e1c8 <__sfp_lock_release>
   2e29c:	6025      	str	r5, [r4, #0]
   2e29e:	61a5      	str	r5, [r4, #24]
   2e2a0:	2208      	movs	r2, #8
   2e2a2:	4629      	mov	r1, r5
   2e2a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2e2a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2e2ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2e2b0:	f001 fdbe 	bl	2fe30 <memset>
   2e2b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   2e2b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   2e2bc:	4620      	mov	r0, r4
   2e2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e2c0:	3468      	adds	r4, #104	; 0x68
   2e2c2:	e7d9      	b.n	2e278 <__sfp+0x1c>
   2e2c4:	2104      	movs	r1, #4
   2e2c6:	4638      	mov	r0, r7
   2e2c8:	f002 f804 	bl	302d4 <__sfmoreglue>
   2e2cc:	4604      	mov	r4, r0
   2e2ce:	6030      	str	r0, [r6, #0]
   2e2d0:	2800      	cmp	r0, #0
   2e2d2:	d1d5      	bne.n	2e280 <__sfp+0x24>
   2e2d4:	f7ff ff78 	bl	2e1c8 <__sfp_lock_release>
   2e2d8:	230c      	movs	r3, #12
   2e2da:	603b      	str	r3, [r7, #0]
   2e2dc:	e7ee      	b.n	2e2bc <__sfp+0x60>
   2e2de:	bf00      	nop
   2e2e0:	000314a8 	.word	0x000314a8
   2e2e4:	ffff0001 	.word	0xffff0001

0002e2e8 <_localeconv_r>:
   2e2e8:	4800      	ldr	r0, [pc, #0]	; (2e2ec <_localeconv_r+0x4>)
   2e2ea:	4770      	bx	lr
   2e2ec:	200268b0 	.word	0x200268b0

0002e2f0 <__smakebuf_r>:
   2e2f0:	898b      	ldrh	r3, [r1, #12]
   2e2f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e2f4:	079d      	lsls	r5, r3, #30
   2e2f6:	4606      	mov	r6, r0
   2e2f8:	460c      	mov	r4, r1
   2e2fa:	d507      	bpl.n	2e30c <__smakebuf_r+0x1c>
   2e2fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2e300:	6023      	str	r3, [r4, #0]
   2e302:	6123      	str	r3, [r4, #16]
   2e304:	2301      	movs	r3, #1
   2e306:	6163      	str	r3, [r4, #20]
   2e308:	b002      	add	sp, #8
   2e30a:	bd70      	pop	{r4, r5, r6, pc}
   2e30c:	ab01      	add	r3, sp, #4
   2e30e:	466a      	mov	r2, sp
   2e310:	f002 f817 	bl	30342 <__swhatbuf_r>
   2e314:	9900      	ldr	r1, [sp, #0]
   2e316:	4605      	mov	r5, r0
   2e318:	4630      	mov	r0, r6
   2e31a:	f000 f8cd 	bl	2e4b8 <_malloc_r>
   2e31e:	b948      	cbnz	r0, 2e334 <__smakebuf_r+0x44>
   2e320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2e324:	059a      	lsls	r2, r3, #22
   2e326:	d4ef      	bmi.n	2e308 <__smakebuf_r+0x18>
   2e328:	f023 0303 	bic.w	r3, r3, #3
   2e32c:	f043 0302 	orr.w	r3, r3, #2
   2e330:	81a3      	strh	r3, [r4, #12]
   2e332:	e7e3      	b.n	2e2fc <__smakebuf_r+0xc>
   2e334:	4b0d      	ldr	r3, [pc, #52]	; (2e36c <__smakebuf_r+0x7c>)
   2e336:	62b3      	str	r3, [r6, #40]	; 0x28
   2e338:	89a3      	ldrh	r3, [r4, #12]
   2e33a:	6020      	str	r0, [r4, #0]
   2e33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e340:	6120      	str	r0, [r4, #16]
   2e342:	81a3      	strh	r3, [r4, #12]
   2e344:	9b00      	ldr	r3, [sp, #0]
   2e346:	6163      	str	r3, [r4, #20]
   2e348:	9b01      	ldr	r3, [sp, #4]
   2e34a:	b15b      	cbz	r3, 2e364 <__smakebuf_r+0x74>
   2e34c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2e350:	4630      	mov	r0, r6
   2e352:	f000 fa61 	bl	2e818 <_isatty_r>
   2e356:	b128      	cbz	r0, 2e364 <__smakebuf_r+0x74>
   2e358:	89a3      	ldrh	r3, [r4, #12]
   2e35a:	f023 0303 	bic.w	r3, r3, #3
   2e35e:	f043 0301 	orr.w	r3, r3, #1
   2e362:	81a3      	strh	r3, [r4, #12]
   2e364:	89a3      	ldrh	r3, [r4, #12]
   2e366:	431d      	orrs	r5, r3
   2e368:	81a5      	strh	r5, [r4, #12]
   2e36a:	e7cd      	b.n	2e308 <__smakebuf_r+0x18>
   2e36c:	0002e1b1 	.word	0x0002e1b1

0002e370 <malloc>:
   2e370:	4b02      	ldr	r3, [pc, #8]	; (2e37c <malloc+0xc>)
   2e372:	4601      	mov	r1, r0
   2e374:	6818      	ldr	r0, [r3, #0]
   2e376:	f000 b89f 	b.w	2e4b8 <_malloc_r>
   2e37a:	bf00      	nop
   2e37c:	2002675c 	.word	0x2002675c

0002e380 <__pow5mult>:
   2e380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e384:	4615      	mov	r5, r2
   2e386:	f012 0203 	ands.w	r2, r2, #3
   2e38a:	4606      	mov	r6, r0
   2e38c:	460f      	mov	r7, r1
   2e38e:	d007      	beq.n	2e3a0 <__pow5mult+0x20>
   2e390:	3a01      	subs	r2, #1
   2e392:	4c21      	ldr	r4, [pc, #132]	; (2e418 <__pow5mult+0x98>)
   2e394:	2300      	movs	r3, #0
   2e396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2e39a:	f002 f85b 	bl	30454 <__multadd>
   2e39e:	4607      	mov	r7, r0
   2e3a0:	10ad      	asrs	r5, r5, #2
   2e3a2:	d035      	beq.n	2e410 <__pow5mult+0x90>
   2e3a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2e3a6:	b93c      	cbnz	r4, 2e3b8 <__pow5mult+0x38>
   2e3a8:	2010      	movs	r0, #16
   2e3aa:	f7ff ffe1 	bl	2e370 <malloc>
   2e3ae:	6270      	str	r0, [r6, #36]	; 0x24
   2e3b0:	6004      	str	r4, [r0, #0]
   2e3b2:	60c4      	str	r4, [r0, #12]
   2e3b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2e3b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2e3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2e3c0:	b94c      	cbnz	r4, 2e3d6 <__pow5mult+0x56>
   2e3c2:	f240 2171 	movw	r1, #625	; 0x271
   2e3c6:	4630      	mov	r0, r6
   2e3c8:	f002 f8d1 	bl	3056e <__i2b>
   2e3cc:	2300      	movs	r3, #0
   2e3ce:	4604      	mov	r4, r0
   2e3d0:	f8c8 0008 	str.w	r0, [r8, #8]
   2e3d4:	6003      	str	r3, [r0, #0]
   2e3d6:	f04f 0800 	mov.w	r8, #0
   2e3da:	07eb      	lsls	r3, r5, #31
   2e3dc:	d50a      	bpl.n	2e3f4 <__pow5mult+0x74>
   2e3de:	4639      	mov	r1, r7
   2e3e0:	4622      	mov	r2, r4
   2e3e2:	4630      	mov	r0, r6
   2e3e4:	f002 f8cc 	bl	30580 <__multiply>
   2e3e8:	4681      	mov	r9, r0
   2e3ea:	4639      	mov	r1, r7
   2e3ec:	4630      	mov	r0, r6
   2e3ee:	464f      	mov	r7, r9
   2e3f0:	f002 f819 	bl	30426 <_Bfree>
   2e3f4:	106d      	asrs	r5, r5, #1
   2e3f6:	d00b      	beq.n	2e410 <__pow5mult+0x90>
   2e3f8:	6820      	ldr	r0, [r4, #0]
   2e3fa:	b938      	cbnz	r0, 2e40c <__pow5mult+0x8c>
   2e3fc:	4622      	mov	r2, r4
   2e3fe:	4621      	mov	r1, r4
   2e400:	4630      	mov	r0, r6
   2e402:	f002 f8bd 	bl	30580 <__multiply>
   2e406:	6020      	str	r0, [r4, #0]
   2e408:	f8c0 8000 	str.w	r8, [r0]
   2e40c:	4604      	mov	r4, r0
   2e40e:	e7e4      	b.n	2e3da <__pow5mult+0x5a>
   2e410:	4638      	mov	r0, r7
   2e412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e416:	bf00      	nop
   2e418:	0003150c 	.word	0x0003150c

0002e41c <_free_r>:
   2e41c:	b538      	push	{r3, r4, r5, lr}
   2e41e:	4605      	mov	r5, r0
   2e420:	2900      	cmp	r1, #0
   2e422:	d045      	beq.n	2e4b0 <_free_r+0x94>
   2e424:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2e428:	1f0c      	subs	r4, r1, #4
   2e42a:	2b00      	cmp	r3, #0
   2e42c:	bfb8      	it	lt
   2e42e:	18e4      	addlt	r4, r4, r3
   2e430:	f000 fa14 	bl	2e85c <__malloc_lock>
   2e434:	4a1f      	ldr	r2, [pc, #124]	; (2e4b4 <_free_r+0x98>)
   2e436:	6813      	ldr	r3, [r2, #0]
   2e438:	4610      	mov	r0, r2
   2e43a:	b933      	cbnz	r3, 2e44a <_free_r+0x2e>
   2e43c:	6063      	str	r3, [r4, #4]
   2e43e:	6014      	str	r4, [r2, #0]
   2e440:	4628      	mov	r0, r5
   2e442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e446:	f000 ba0f 	b.w	2e868 <__malloc_unlock>
   2e44a:	42a3      	cmp	r3, r4
   2e44c:	d90c      	bls.n	2e468 <_free_r+0x4c>
   2e44e:	6821      	ldr	r1, [r4, #0]
   2e450:	1862      	adds	r2, r4, r1
   2e452:	4293      	cmp	r3, r2
   2e454:	bf02      	ittt	eq
   2e456:	681a      	ldreq	r2, [r3, #0]
   2e458:	685b      	ldreq	r3, [r3, #4]
   2e45a:	1852      	addeq	r2, r2, r1
   2e45c:	6063      	str	r3, [r4, #4]
   2e45e:	bf08      	it	eq
   2e460:	6022      	streq	r2, [r4, #0]
   2e462:	6004      	str	r4, [r0, #0]
   2e464:	e7ec      	b.n	2e440 <_free_r+0x24>
   2e466:	4613      	mov	r3, r2
   2e468:	685a      	ldr	r2, [r3, #4]
   2e46a:	b10a      	cbz	r2, 2e470 <_free_r+0x54>
   2e46c:	42a2      	cmp	r2, r4
   2e46e:	d9fa      	bls.n	2e466 <_free_r+0x4a>
   2e470:	6819      	ldr	r1, [r3, #0]
   2e472:	1858      	adds	r0, r3, r1
   2e474:	42a0      	cmp	r0, r4
   2e476:	d10b      	bne.n	2e490 <_free_r+0x74>
   2e478:	6820      	ldr	r0, [r4, #0]
   2e47a:	4401      	add	r1, r0
   2e47c:	1858      	adds	r0, r3, r1
   2e47e:	6019      	str	r1, [r3, #0]
   2e480:	4282      	cmp	r2, r0
   2e482:	d1dd      	bne.n	2e440 <_free_r+0x24>
   2e484:	6810      	ldr	r0, [r2, #0]
   2e486:	6852      	ldr	r2, [r2, #4]
   2e488:	4401      	add	r1, r0
   2e48a:	605a      	str	r2, [r3, #4]
   2e48c:	6019      	str	r1, [r3, #0]
   2e48e:	e7d7      	b.n	2e440 <_free_r+0x24>
   2e490:	d902      	bls.n	2e498 <_free_r+0x7c>
   2e492:	230c      	movs	r3, #12
   2e494:	602b      	str	r3, [r5, #0]
   2e496:	e7d3      	b.n	2e440 <_free_r+0x24>
   2e498:	6820      	ldr	r0, [r4, #0]
   2e49a:	1821      	adds	r1, r4, r0
   2e49c:	428a      	cmp	r2, r1
   2e49e:	bf02      	ittt	eq
   2e4a0:	6811      	ldreq	r1, [r2, #0]
   2e4a2:	6852      	ldreq	r2, [r2, #4]
   2e4a4:	1809      	addeq	r1, r1, r0
   2e4a6:	6062      	str	r2, [r4, #4]
   2e4a8:	bf08      	it	eq
   2e4aa:	6021      	streq	r1, [r4, #0]
   2e4ac:	605c      	str	r4, [r3, #4]
   2e4ae:	e7c7      	b.n	2e440 <_free_r+0x24>
   2e4b0:	bd38      	pop	{r3, r4, r5, pc}
   2e4b2:	bf00      	nop
   2e4b4:	200214e8 	.word	0x200214e8

0002e4b8 <_malloc_r>:
   2e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e4ba:	1ccd      	adds	r5, r1, #3
   2e4bc:	4606      	mov	r6, r0
   2e4be:	f025 0503 	bic.w	r5, r5, #3
   2e4c2:	3508      	adds	r5, #8
   2e4c4:	2d0c      	cmp	r5, #12
   2e4c6:	bf38      	it	cc
   2e4c8:	250c      	movcc	r5, #12
   2e4ca:	2d00      	cmp	r5, #0
   2e4cc:	db01      	blt.n	2e4d2 <_malloc_r+0x1a>
   2e4ce:	42a9      	cmp	r1, r5
   2e4d0:	d903      	bls.n	2e4da <_malloc_r+0x22>
   2e4d2:	230c      	movs	r3, #12
   2e4d4:	6033      	str	r3, [r6, #0]
   2e4d6:	2000      	movs	r0, #0
   2e4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e4da:	f000 f9bf 	bl	2e85c <__malloc_lock>
   2e4de:	4921      	ldr	r1, [pc, #132]	; (2e564 <_malloc_r+0xac>)
   2e4e0:	680a      	ldr	r2, [r1, #0]
   2e4e2:	4614      	mov	r4, r2
   2e4e4:	b99c      	cbnz	r4, 2e50e <_malloc_r+0x56>
   2e4e6:	4f20      	ldr	r7, [pc, #128]	; (2e568 <_malloc_r+0xb0>)
   2e4e8:	683b      	ldr	r3, [r7, #0]
   2e4ea:	b923      	cbnz	r3, 2e4f6 <_malloc_r+0x3e>
   2e4ec:	4621      	mov	r1, r4
   2e4ee:	4630      	mov	r0, r6
   2e4f0:	f000 f934 	bl	2e75c <_sbrk_r>
   2e4f4:	6038      	str	r0, [r7, #0]
   2e4f6:	4629      	mov	r1, r5
   2e4f8:	4630      	mov	r0, r6
   2e4fa:	f000 f92f 	bl	2e75c <_sbrk_r>
   2e4fe:	1c43      	adds	r3, r0, #1
   2e500:	d123      	bne.n	2e54a <_malloc_r+0x92>
   2e502:	230c      	movs	r3, #12
   2e504:	4630      	mov	r0, r6
   2e506:	6033      	str	r3, [r6, #0]
   2e508:	f000 f9ae 	bl	2e868 <__malloc_unlock>
   2e50c:	e7e3      	b.n	2e4d6 <_malloc_r+0x1e>
   2e50e:	6823      	ldr	r3, [r4, #0]
   2e510:	1b5b      	subs	r3, r3, r5
   2e512:	d417      	bmi.n	2e544 <_malloc_r+0x8c>
   2e514:	2b0b      	cmp	r3, #11
   2e516:	d903      	bls.n	2e520 <_malloc_r+0x68>
   2e518:	6023      	str	r3, [r4, #0]
   2e51a:	441c      	add	r4, r3
   2e51c:	6025      	str	r5, [r4, #0]
   2e51e:	e004      	b.n	2e52a <_malloc_r+0x72>
   2e520:	6863      	ldr	r3, [r4, #4]
   2e522:	42a2      	cmp	r2, r4
   2e524:	bf0c      	ite	eq
   2e526:	600b      	streq	r3, [r1, #0]
   2e528:	6053      	strne	r3, [r2, #4]
   2e52a:	4630      	mov	r0, r6
   2e52c:	f000 f99c 	bl	2e868 <__malloc_unlock>
   2e530:	f104 000b 	add.w	r0, r4, #11
   2e534:	1d23      	adds	r3, r4, #4
   2e536:	f020 0007 	bic.w	r0, r0, #7
   2e53a:	1ac2      	subs	r2, r0, r3
   2e53c:	d0cc      	beq.n	2e4d8 <_malloc_r+0x20>
   2e53e:	1a1b      	subs	r3, r3, r0
   2e540:	50a3      	str	r3, [r4, r2]
   2e542:	e7c9      	b.n	2e4d8 <_malloc_r+0x20>
   2e544:	4622      	mov	r2, r4
   2e546:	6864      	ldr	r4, [r4, #4]
   2e548:	e7cc      	b.n	2e4e4 <_malloc_r+0x2c>
   2e54a:	1cc4      	adds	r4, r0, #3
   2e54c:	f024 0403 	bic.w	r4, r4, #3
   2e550:	42a0      	cmp	r0, r4
   2e552:	d0e3      	beq.n	2e51c <_malloc_r+0x64>
   2e554:	1a21      	subs	r1, r4, r0
   2e556:	4630      	mov	r0, r6
   2e558:	f000 f900 	bl	2e75c <_sbrk_r>
   2e55c:	3001      	adds	r0, #1
   2e55e:	d1dd      	bne.n	2e51c <_malloc_r+0x64>
   2e560:	e7cf      	b.n	2e502 <_malloc_r+0x4a>
   2e562:	bf00      	nop
   2e564:	200214e8 	.word	0x200214e8
   2e568:	200214ec 	.word	0x200214ec

0002e56c <_svfiprintf_r>:
   2e56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e570:	461e      	mov	r6, r3
   2e572:	898b      	ldrh	r3, [r1, #12]
   2e574:	b09d      	sub	sp, #116	; 0x74
   2e576:	4607      	mov	r7, r0
   2e578:	061b      	lsls	r3, r3, #24
   2e57a:	460d      	mov	r5, r1
   2e57c:	4614      	mov	r4, r2
   2e57e:	d50e      	bpl.n	2e59e <_svfiprintf_r+0x32>
   2e580:	690b      	ldr	r3, [r1, #16]
   2e582:	b963      	cbnz	r3, 2e59e <_svfiprintf_r+0x32>
   2e584:	2140      	movs	r1, #64	; 0x40
   2e586:	f7ff ff97 	bl	2e4b8 <_malloc_r>
   2e58a:	6028      	str	r0, [r5, #0]
   2e58c:	6128      	str	r0, [r5, #16]
   2e58e:	b920      	cbnz	r0, 2e59a <_svfiprintf_r+0x2e>
   2e590:	230c      	movs	r3, #12
   2e592:	603b      	str	r3, [r7, #0]
   2e594:	f04f 30ff 	mov.w	r0, #4294967295
   2e598:	e0c9      	b.n	2e72e <_svfiprintf_r+0x1c2>
   2e59a:	2340      	movs	r3, #64	; 0x40
   2e59c:	616b      	str	r3, [r5, #20]
   2e59e:	2300      	movs	r3, #0
   2e5a0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2e748 <_svfiprintf_r+0x1dc>
   2e5a4:	f04f 0a01 	mov.w	sl, #1
   2e5a8:	9603      	str	r6, [sp, #12]
   2e5aa:	9309      	str	r3, [sp, #36]	; 0x24
   2e5ac:	2320      	movs	r3, #32
   2e5ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2e5b2:	2330      	movs	r3, #48	; 0x30
   2e5b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2e5b8:	4623      	mov	r3, r4
   2e5ba:	461e      	mov	r6, r3
   2e5bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   2e5c0:	b10a      	cbz	r2, 2e5c6 <_svfiprintf_r+0x5a>
   2e5c2:	2a25      	cmp	r2, #37	; 0x25
   2e5c4:	d1f9      	bne.n	2e5ba <_svfiprintf_r+0x4e>
   2e5c6:	ebb6 0b04 	subs.w	fp, r6, r4
   2e5ca:	d00b      	beq.n	2e5e4 <_svfiprintf_r+0x78>
   2e5cc:	465b      	mov	r3, fp
   2e5ce:	4622      	mov	r2, r4
   2e5d0:	4629      	mov	r1, r5
   2e5d2:	4638      	mov	r0, r7
   2e5d4:	f002 f9b2 	bl	3093c <__ssputs_r>
   2e5d8:	3001      	adds	r0, #1
   2e5da:	f000 80a3 	beq.w	2e724 <_svfiprintf_r+0x1b8>
   2e5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e5e0:	445b      	add	r3, fp
   2e5e2:	9309      	str	r3, [sp, #36]	; 0x24
   2e5e4:	7833      	ldrb	r3, [r6, #0]
   2e5e6:	2b00      	cmp	r3, #0
   2e5e8:	f000 809c 	beq.w	2e724 <_svfiprintf_r+0x1b8>
   2e5ec:	2300      	movs	r3, #0
   2e5ee:	f04f 32ff 	mov.w	r2, #4294967295
   2e5f2:	3601      	adds	r6, #1
   2e5f4:	9304      	str	r3, [sp, #16]
   2e5f6:	9307      	str	r3, [sp, #28]
   2e5f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2e5fc:	931a      	str	r3, [sp, #104]	; 0x68
   2e5fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2e602:	4634      	mov	r4, r6
   2e604:	2205      	movs	r2, #5
   2e606:	4850      	ldr	r0, [pc, #320]	; (2e748 <_svfiprintf_r+0x1dc>)
   2e608:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e60c:	f001 fbe7 	bl	2fdde <memchr>
   2e610:	9b04      	ldr	r3, [sp, #16]
   2e612:	b9c0      	cbnz	r0, 2e646 <_svfiprintf_r+0xda>
   2e614:	06d9      	lsls	r1, r3, #27
   2e616:	bf44      	itt	mi
   2e618:	2220      	movmi	r2, #32
   2e61a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2e61e:	071a      	lsls	r2, r3, #28
   2e620:	bf44      	itt	mi
   2e622:	222b      	movmi	r2, #43	; 0x2b
   2e624:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2e628:	7832      	ldrb	r2, [r6, #0]
   2e62a:	2a2a      	cmp	r2, #42	; 0x2a
   2e62c:	d013      	beq.n	2e656 <_svfiprintf_r+0xea>
   2e62e:	4634      	mov	r4, r6
   2e630:	9a07      	ldr	r2, [sp, #28]
   2e632:	2000      	movs	r0, #0
   2e634:	260a      	movs	r6, #10
   2e636:	4621      	mov	r1, r4
   2e638:	f811 3b01 	ldrb.w	r3, [r1], #1
   2e63c:	3b30      	subs	r3, #48	; 0x30
   2e63e:	2b09      	cmp	r3, #9
   2e640:	d94b      	bls.n	2e6da <_svfiprintf_r+0x16e>
   2e642:	b970      	cbnz	r0, 2e662 <_svfiprintf_r+0xf6>
   2e644:	e014      	b.n	2e670 <_svfiprintf_r+0x104>
   2e646:	eba0 0009 	sub.w	r0, r0, r9
   2e64a:	4626      	mov	r6, r4
   2e64c:	fa0a f000 	lsl.w	r0, sl, r0
   2e650:	4318      	orrs	r0, r3
   2e652:	9004      	str	r0, [sp, #16]
   2e654:	e7d5      	b.n	2e602 <_svfiprintf_r+0x96>
   2e656:	9a03      	ldr	r2, [sp, #12]
   2e658:	1d11      	adds	r1, r2, #4
   2e65a:	6812      	ldr	r2, [r2, #0]
   2e65c:	2a00      	cmp	r2, #0
   2e65e:	9103      	str	r1, [sp, #12]
   2e660:	db01      	blt.n	2e666 <_svfiprintf_r+0xfa>
   2e662:	9207      	str	r2, [sp, #28]
   2e664:	e004      	b.n	2e670 <_svfiprintf_r+0x104>
   2e666:	4252      	negs	r2, r2
   2e668:	f043 0302 	orr.w	r3, r3, #2
   2e66c:	9207      	str	r2, [sp, #28]
   2e66e:	9304      	str	r3, [sp, #16]
   2e670:	7823      	ldrb	r3, [r4, #0]
   2e672:	2b2e      	cmp	r3, #46	; 0x2e
   2e674:	d10c      	bne.n	2e690 <_svfiprintf_r+0x124>
   2e676:	7863      	ldrb	r3, [r4, #1]
   2e678:	2b2a      	cmp	r3, #42	; 0x2a
   2e67a:	d133      	bne.n	2e6e4 <_svfiprintf_r+0x178>
   2e67c:	9b03      	ldr	r3, [sp, #12]
   2e67e:	3402      	adds	r4, #2
   2e680:	1d1a      	adds	r2, r3, #4
   2e682:	681b      	ldr	r3, [r3, #0]
   2e684:	2b00      	cmp	r3, #0
   2e686:	9203      	str	r2, [sp, #12]
   2e688:	bfb8      	it	lt
   2e68a:	f04f 33ff 	movlt.w	r3, #4294967295
   2e68e:	9305      	str	r3, [sp, #20]
   2e690:	4e2e      	ldr	r6, [pc, #184]	; (2e74c <_svfiprintf_r+0x1e0>)
   2e692:	2203      	movs	r2, #3
   2e694:	7821      	ldrb	r1, [r4, #0]
   2e696:	4630      	mov	r0, r6
   2e698:	f001 fba1 	bl	2fdde <memchr>
   2e69c:	b138      	cbz	r0, 2e6ae <_svfiprintf_r+0x142>
   2e69e:	2340      	movs	r3, #64	; 0x40
   2e6a0:	1b80      	subs	r0, r0, r6
   2e6a2:	3401      	adds	r4, #1
   2e6a4:	fa03 f000 	lsl.w	r0, r3, r0
   2e6a8:	9b04      	ldr	r3, [sp, #16]
   2e6aa:	4303      	orrs	r3, r0
   2e6ac:	9304      	str	r3, [sp, #16]
   2e6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e6b2:	2206      	movs	r2, #6
   2e6b4:	4826      	ldr	r0, [pc, #152]	; (2e750 <_svfiprintf_r+0x1e4>)
   2e6b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2e6ba:	f001 fb90 	bl	2fdde <memchr>
   2e6be:	2800      	cmp	r0, #0
   2e6c0:	d038      	beq.n	2e734 <_svfiprintf_r+0x1c8>
   2e6c2:	4b24      	ldr	r3, [pc, #144]	; (2e754 <_svfiprintf_r+0x1e8>)
   2e6c4:	bb13      	cbnz	r3, 2e70c <_svfiprintf_r+0x1a0>
   2e6c6:	9b03      	ldr	r3, [sp, #12]
   2e6c8:	3307      	adds	r3, #7
   2e6ca:	f023 0307 	bic.w	r3, r3, #7
   2e6ce:	3308      	adds	r3, #8
   2e6d0:	9303      	str	r3, [sp, #12]
   2e6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e6d4:	4443      	add	r3, r8
   2e6d6:	9309      	str	r3, [sp, #36]	; 0x24
   2e6d8:	e76e      	b.n	2e5b8 <_svfiprintf_r+0x4c>
   2e6da:	fb06 3202 	mla	r2, r6, r2, r3
   2e6de:	2001      	movs	r0, #1
   2e6e0:	460c      	mov	r4, r1
   2e6e2:	e7a8      	b.n	2e636 <_svfiprintf_r+0xca>
   2e6e4:	2300      	movs	r3, #0
   2e6e6:	3401      	adds	r4, #1
   2e6e8:	260a      	movs	r6, #10
   2e6ea:	4619      	mov	r1, r3
   2e6ec:	9305      	str	r3, [sp, #20]
   2e6ee:	4620      	mov	r0, r4
   2e6f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   2e6f4:	3a30      	subs	r2, #48	; 0x30
   2e6f6:	2a09      	cmp	r2, #9
   2e6f8:	d903      	bls.n	2e702 <_svfiprintf_r+0x196>
   2e6fa:	2b00      	cmp	r3, #0
   2e6fc:	d0c8      	beq.n	2e690 <_svfiprintf_r+0x124>
   2e6fe:	9105      	str	r1, [sp, #20]
   2e700:	e7c6      	b.n	2e690 <_svfiprintf_r+0x124>
   2e702:	fb06 2101 	mla	r1, r6, r1, r2
   2e706:	2301      	movs	r3, #1
   2e708:	4604      	mov	r4, r0
   2e70a:	e7f0      	b.n	2e6ee <_svfiprintf_r+0x182>
   2e70c:	ab03      	add	r3, sp, #12
   2e70e:	462a      	mov	r2, r5
   2e710:	a904      	add	r1, sp, #16
   2e712:	4638      	mov	r0, r7
   2e714:	9300      	str	r3, [sp, #0]
   2e716:	4b10      	ldr	r3, [pc, #64]	; (2e758 <_svfiprintf_r+0x1ec>)
   2e718:	f7fe ff60 	bl	2d5dc <_printf_float>
   2e71c:	f1b0 3fff 	cmp.w	r0, #4294967295
   2e720:	4680      	mov	r8, r0
   2e722:	d1d6      	bne.n	2e6d2 <_svfiprintf_r+0x166>
   2e724:	89ab      	ldrh	r3, [r5, #12]
   2e726:	065b      	lsls	r3, r3, #25
   2e728:	f53f af34 	bmi.w	2e594 <_svfiprintf_r+0x28>
   2e72c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2e72e:	b01d      	add	sp, #116	; 0x74
   2e730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e734:	ab03      	add	r3, sp, #12
   2e736:	462a      	mov	r2, r5
   2e738:	a904      	add	r1, sp, #16
   2e73a:	4638      	mov	r0, r7
   2e73c:	9300      	str	r3, [sp, #0]
   2e73e:	4b06      	ldr	r3, [pc, #24]	; (2e758 <_svfiprintf_r+0x1ec>)
   2e740:	f7ff f976 	bl	2da30 <_printf_i>
   2e744:	e7ea      	b.n	2e71c <_svfiprintf_r+0x1b0>
   2e746:	bf00      	nop
   2e748:	00033578 	.word	0x00033578
   2e74c:	0003357e 	.word	0x0003357e
   2e750:	00033582 	.word	0x00033582
   2e754:	0002d5dd 	.word	0x0002d5dd
   2e758:	0003093d 	.word	0x0003093d

0002e75c <_sbrk_r>:
   2e75c:	b538      	push	{r3, r4, r5, lr}
   2e75e:	2300      	movs	r3, #0
   2e760:	4c05      	ldr	r4, [pc, #20]	; (2e778 <_sbrk_r+0x1c>)
   2e762:	4605      	mov	r5, r0
   2e764:	4608      	mov	r0, r1
   2e766:	6023      	str	r3, [r4, #0]
   2e768:	f7f1 fb64 	bl	1fe34 <_sbrk>
   2e76c:	1c43      	adds	r3, r0, #1
   2e76e:	d102      	bne.n	2e776 <_sbrk_r+0x1a>
   2e770:	6823      	ldr	r3, [r4, #0]
   2e772:	b103      	cbz	r3, 2e776 <_sbrk_r+0x1a>
   2e774:	602b      	str	r3, [r5, #0]
   2e776:	bd38      	pop	{r3, r4, r5, pc}
   2e778:	20022a84 	.word	0x20022a84

0002e77c <raise>:
   2e77c:	4b02      	ldr	r3, [pc, #8]	; (2e788 <raise+0xc>)
   2e77e:	4601      	mov	r1, r0
   2e780:	6818      	ldr	r0, [r3, #0]
   2e782:	f002 b936 	b.w	309f2 <_raise_r>
   2e786:	bf00      	nop
   2e788:	2002675c 	.word	0x2002675c

0002e78c <_kill_r>:
   2e78c:	b538      	push	{r3, r4, r5, lr}
   2e78e:	2300      	movs	r3, #0
   2e790:	4c06      	ldr	r4, [pc, #24]	; (2e7ac <_kill_r+0x20>)
   2e792:	4605      	mov	r5, r0
   2e794:	4608      	mov	r0, r1
   2e796:	4611      	mov	r1, r2
   2e798:	6023      	str	r3, [r4, #0]
   2e79a:	f000 fc2b 	bl	2eff4 <_kill>
   2e79e:	1c43      	adds	r3, r0, #1
   2e7a0:	d102      	bne.n	2e7a8 <_kill_r+0x1c>
   2e7a2:	6823      	ldr	r3, [r4, #0]
   2e7a4:	b103      	cbz	r3, 2e7a8 <_kill_r+0x1c>
   2e7a6:	602b      	str	r3, [r5, #0]
   2e7a8:	bd38      	pop	{r3, r4, r5, pc}
   2e7aa:	bf00      	nop
   2e7ac:	20022a84 	.word	0x20022a84

0002e7b0 <_write_r>:
   2e7b0:	b538      	push	{r3, r4, r5, lr}
   2e7b2:	4605      	mov	r5, r0
   2e7b4:	4c06      	ldr	r4, [pc, #24]	; (2e7d0 <_write_r+0x20>)
   2e7b6:	4608      	mov	r0, r1
   2e7b8:	4611      	mov	r1, r2
   2e7ba:	2200      	movs	r2, #0
   2e7bc:	6022      	str	r2, [r4, #0]
   2e7be:	461a      	mov	r2, r3
   2e7c0:	f000 fc0d 	bl	2efde <_write>
   2e7c4:	1c43      	adds	r3, r0, #1
   2e7c6:	d102      	bne.n	2e7ce <_write_r+0x1e>
   2e7c8:	6823      	ldr	r3, [r4, #0]
   2e7ca:	b103      	cbz	r3, 2e7ce <_write_r+0x1e>
   2e7cc:	602b      	str	r3, [r5, #0]
   2e7ce:	bd38      	pop	{r3, r4, r5, pc}
   2e7d0:	20022a84 	.word	0x20022a84

0002e7d4 <_close_r>:
   2e7d4:	b538      	push	{r3, r4, r5, lr}
   2e7d6:	2300      	movs	r3, #0
   2e7d8:	4c05      	ldr	r4, [pc, #20]	; (2e7f0 <_close_r+0x1c>)
   2e7da:	4605      	mov	r5, r0
   2e7dc:	4608      	mov	r0, r1
   2e7de:	6023      	str	r3, [r4, #0]
   2e7e0:	f000 fc01 	bl	2efe6 <_close>
   2e7e4:	1c43      	adds	r3, r0, #1
   2e7e6:	d102      	bne.n	2e7ee <_close_r+0x1a>
   2e7e8:	6823      	ldr	r3, [r4, #0]
   2e7ea:	b103      	cbz	r3, 2e7ee <_close_r+0x1a>
   2e7ec:	602b      	str	r3, [r5, #0]
   2e7ee:	bd38      	pop	{r3, r4, r5, pc}
   2e7f0:	20022a84 	.word	0x20022a84

0002e7f4 <_fstat_r>:
   2e7f4:	b538      	push	{r3, r4, r5, lr}
   2e7f6:	2300      	movs	r3, #0
   2e7f8:	4c06      	ldr	r4, [pc, #24]	; (2e814 <_fstat_r+0x20>)
   2e7fa:	4605      	mov	r5, r0
   2e7fc:	4608      	mov	r0, r1
   2e7fe:	4611      	mov	r1, r2
   2e800:	6023      	str	r3, [r4, #0]
   2e802:	f000 fbfb 	bl	2effc <_fstat>
   2e806:	1c43      	adds	r3, r0, #1
   2e808:	d102      	bne.n	2e810 <_fstat_r+0x1c>
   2e80a:	6823      	ldr	r3, [r4, #0]
   2e80c:	b103      	cbz	r3, 2e810 <_fstat_r+0x1c>
   2e80e:	602b      	str	r3, [r5, #0]
   2e810:	bd38      	pop	{r3, r4, r5, pc}
   2e812:	bf00      	nop
   2e814:	20022a84 	.word	0x20022a84

0002e818 <_isatty_r>:
   2e818:	b538      	push	{r3, r4, r5, lr}
   2e81a:	2300      	movs	r3, #0
   2e81c:	4c05      	ldr	r4, [pc, #20]	; (2e834 <_isatty_r+0x1c>)
   2e81e:	4605      	mov	r5, r0
   2e820:	4608      	mov	r0, r1
   2e822:	6023      	str	r3, [r4, #0]
   2e824:	f000 fbe4 	bl	2eff0 <_isatty>
   2e828:	1c43      	adds	r3, r0, #1
   2e82a:	d102      	bne.n	2e832 <_isatty_r+0x1a>
   2e82c:	6823      	ldr	r3, [r4, #0]
   2e82e:	b103      	cbz	r3, 2e832 <_isatty_r+0x1a>
   2e830:	602b      	str	r3, [r5, #0]
   2e832:	bd38      	pop	{r3, r4, r5, pc}
   2e834:	20022a84 	.word	0x20022a84

0002e838 <_lseek_r>:
   2e838:	b538      	push	{r3, r4, r5, lr}
   2e83a:	4605      	mov	r5, r0
   2e83c:	4c06      	ldr	r4, [pc, #24]	; (2e858 <_lseek_r+0x20>)
   2e83e:	4608      	mov	r0, r1
   2e840:	4611      	mov	r1, r2
   2e842:	2200      	movs	r2, #0
   2e844:	6022      	str	r2, [r4, #0]
   2e846:	461a      	mov	r2, r3
   2e848:	f000 fbd0 	bl	2efec <_lseek>
   2e84c:	1c43      	adds	r3, r0, #1
   2e84e:	d102      	bne.n	2e856 <_lseek_r+0x1e>
   2e850:	6823      	ldr	r3, [r4, #0]
   2e852:	b103      	cbz	r3, 2e856 <_lseek_r+0x1e>
   2e854:	602b      	str	r3, [r5, #0]
   2e856:	bd38      	pop	{r3, r4, r5, pc}
   2e858:	20022a84 	.word	0x20022a84

0002e85c <__malloc_lock>:
   2e85c:	4801      	ldr	r0, [pc, #4]	; (2e864 <__malloc_lock+0x8>)
   2e85e:	f001 bd6e 	b.w	3033e <__retarget_lock_acquire_recursive>
   2e862:	bf00      	nop
   2e864:	20022a8c 	.word	0x20022a8c

0002e868 <__malloc_unlock>:
   2e868:	4801      	ldr	r0, [pc, #4]	; (2e870 <__malloc_unlock+0x8>)
   2e86a:	f001 bd69 	b.w	30340 <__retarget_lock_release_recursive>
   2e86e:	bf00      	nop
   2e870:	20022a8c 	.word	0x20022a8c

0002e874 <_read_r>:
   2e874:	b538      	push	{r3, r4, r5, lr}
   2e876:	4605      	mov	r5, r0
   2e878:	4c06      	ldr	r4, [pc, #24]	; (2e894 <_read_r+0x20>)
   2e87a:	4608      	mov	r0, r1
   2e87c:	4611      	mov	r1, r2
   2e87e:	2200      	movs	r2, #0
   2e880:	6022      	str	r2, [r4, #0]
   2e882:	461a      	mov	r2, r3
   2e884:	f000 fba7 	bl	2efd6 <_read>
   2e888:	1c43      	adds	r3, r0, #1
   2e88a:	d102      	bne.n	2e892 <_read_r+0x1e>
   2e88c:	6823      	ldr	r3, [r4, #0]
   2e88e:	b103      	cbz	r3, 2e892 <_read_r+0x1e>
   2e890:	602b      	str	r3, [r5, #0]
   2e892:	bd38      	pop	{r3, r4, r5, pc}
   2e894:	20022a84 	.word	0x20022a84

0002e898 <get_bit_ptr>:
{
   2e898:	b570      	push	{r4, r5, r6, lr}
   2e89a:	250c      	movs	r5, #12
   2e89c:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   2e89e:	f990 000b 	ldrsb.w	r0, [r0, #11]
   2e8a2:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   2e8a4:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   2e8a6:	4610      	mov	r0, r2
   2e8a8:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   2e8ac:	bfb8      	it	lt
   2e8ae:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   2e8b0:	2a00      	cmp	r2, #0
   2e8b2:	bfb8      	it	lt
   2e8b4:	f102 001f 	addlt.w	r0, r2, #31
   2e8b8:	1140      	asrs	r0, r0, #5
   2e8ba:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   2e8be:	6019      	str	r1, [r3, #0]
}
   2e8c0:	f002 001f 	and.w	r0, r2, #31
   2e8c4:	bd70      	pop	{r4, r5, r6, pc}

0002e8c6 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   2e8c6:	f04f 0320 	mov.w	r3, #32
   2e8ca:	f3ef 8011 	mrs	r0, BASEPRI
   2e8ce:	f383 8811 	msr	BASEPRI, r3
   2e8d2:	f3bf 8f6f 	isb	sy
}
   2e8d6:	4770      	bx	lr

0002e8d8 <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2e8d8:	07c3      	lsls	r3, r0, #31
   2e8da:	d503      	bpl.n	2e8e4 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   2e8dc:	f381 8811 	msr	BASEPRI, r1
   2e8e0:	f3bf 8f6f 	isb	sy
}
   2e8e4:	4770      	bx	lr

0002e8e6 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   2e8e6:	23ff      	movs	r3, #255	; 0xff
{
   2e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2e8ec:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   2e8ee:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2e8f0:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   2e8f2:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   2e8f4:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2e8f8:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2e8fa:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2e8fc:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   2e900:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2e904:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   2e906:	4598      	cmp	r8, r3
   2e908:	dc05      	bgt.n	2e916 <z_sys_mem_pool_base_init+0x30>
   2e90a:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   2e90c:	4619      	mov	r1, r3
   2e90e:	428f      	cmp	r7, r1
   2e910:	dc20      	bgt.n	2e954 <z_sys_mem_pool_base_init+0x6e>
}
   2e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   2e916:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   2e91a:	fb09 fe03 	mul.w	lr, r9, r3
   2e91e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   2e922:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   2e924:	eb0a 040e 	add.w	r4, sl, lr
   2e928:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   2e92c:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   2e930:	d805      	bhi.n	2e93e <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   2e932:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   2e934:	0892      	lsrs	r2, r2, #2
   2e936:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   2e93a:	3301      	adds	r3, #1
   2e93c:	e7e3      	b.n	2e906 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   2e93e:	f115 041f 	adds.w	r4, r5, #31
   2e942:	bf48      	it	mi
   2e944:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   2e948:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   2e94a:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   2e94e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2e952:	e7ef      	b.n	2e934 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   2e954:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   2e956:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   2e958:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   2e95c:	18ec      	adds	r4, r5, r3
	node->next = list;
   2e95e:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   2e962:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   2e964:	3101      	adds	r1, #1
   2e966:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   2e968:	6895      	ldr	r5, [r2, #8]
   2e96a:	4433      	add	r3, r6
   2e96c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2e96e:	6094      	str	r4, [r2, #8]
   2e970:	e7cd      	b.n	2e90e <z_sys_mem_pool_base_init+0x28>

0002e972 <z_sys_mem_pool_block_alloc>:
{
   2e972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e976:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   2e978:	7a84      	ldrb	r4, [r0, #10]
{
   2e97a:	af00      	add	r7, sp, #0
   2e97c:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   2e980:	00a3      	lsls	r3, r4, #2
   2e982:	3307      	adds	r3, #7
   2e984:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   2e988:	ebad 0d03 	sub.w	sp, sp, r3
   2e98c:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   2e98e:	4653      	mov	r3, sl
   2e990:	6842      	ldr	r2, [r0, #4]
{
   2e992:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   2e994:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   2e998:	2200      	movs	r2, #0
   2e99a:	4294      	cmp	r4, r2
   2e99c:	f102 39ff 	add.w	r9, r2, #4294967295
   2e9a0:	dd09      	ble.n	2e9b6 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   2e9a2:	b122      	cbz	r2, 2e9ae <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   2e9a4:	6818      	ldr	r0, [r3, #0]
   2e9a6:	0880      	lsrs	r0, r0, #2
   2e9a8:	f020 0003 	bic.w	r0, r0, #3
   2e9ac:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   2e9ae:	f853 0f04 	ldr.w	r0, [r3, #4]!
   2e9b2:	4288      	cmp	r0, r1
   2e9b4:	d208      	bcs.n	2e9c8 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   2e9b6:	f1b9 3fff 	cmp.w	r9, #4294967295
   2e9ba:	d107      	bne.n	2e9cc <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   2e9bc:	2300      	movs	r3, #0
   2e9be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2e9c0:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   2e9c2:	f06f 000b 	mvn.w	r0, #11
   2e9c6:	e02c      	b.n	2ea22 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   2e9c8:	3201      	adds	r2, #1
   2e9ca:	e7e6      	b.n	2e99a <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2e9cc:	7c28      	ldrb	r0, [r5, #16]
   2e9ce:	f010 0001 	ands.w	r0, r0, #1
   2e9d2:	d001      	beq.n	2e9d8 <z_sys_mem_pool_block_alloc+0x66>
   2e9d4:	f7ff ff77 	bl	2e8c6 <pool_irq_lock.isra.2.part.3>
   2e9d8:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   2e9da:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   2e9dc:	464e      	mov	r6, r9
   2e9de:	68ea      	ldr	r2, [r5, #12]
   2e9e0:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   2e9e4:	461a      	mov	r2, r3
   2e9e6:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2e9ea:	4294      	cmp	r4, r2
   2e9ec:	d11d      	bne.n	2ea2a <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   2e9ee:	3e01      	subs	r6, #1
   2e9f0:	1c72      	adds	r2, r6, #1
   2e9f2:	f1a3 030c 	sub.w	r3, r3, #12
   2e9f6:	d1f5      	bne.n	2e9e4 <z_sys_mem_pool_block_alloc+0x72>
   2e9f8:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   2e9fa:	4641      	mov	r1, r8
   2e9fc:	7c28      	ldrb	r0, [r5, #16]
   2e9fe:	f7ff ff6b 	bl	2e8d8 <pool_irq_unlock.isra.4>
	*data_p = data;
   2ea02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ea04:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   2ea06:	2c00      	cmp	r4, #0
   2ea08:	d0db      	beq.n	2e9c2 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   2ea0a:	68bb      	ldr	r3, [r7, #8]
	return 0;
   2ea0c:	2000      	movs	r0, #0
	*level_p = alloc_l;
   2ea0e:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2ea12:	682b      	ldr	r3, [r5, #0]
   2ea14:	1ae4      	subs	r4, r4, r3
   2ea16:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   2ea1a:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   2ea1e:	687b      	ldr	r3, [r7, #4]
   2ea20:	601c      	str	r4, [r3, #0]
}
   2ea22:	371c      	adds	r7, #28
   2ea24:	46bd      	mov	sp, r7
   2ea26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   2ea2a:	e9d4 3200 	ldrd	r3, r2, [r4]
   2ea2e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2ea30:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ea32:	2300      	movs	r3, #0
	node->prev = NULL;
   2ea34:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2ea38:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   2ea3a:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2ea3e:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   2ea40:	f107 0b14 	add.w	fp, r7, #20
   2ea44:	fb92 f2f1 	sdiv	r2, r2, r1
   2ea48:	465b      	mov	r3, fp
   2ea4a:	4631      	mov	r1, r6
   2ea4c:	4628      	mov	r0, r5
   2ea4e:	f7ff ff23 	bl	2e898 <get_bit_ptr>
	*word |= (1<<bit);
   2ea52:	2201      	movs	r2, #1
   2ea54:	6979      	ldr	r1, [r7, #20]
   2ea56:	fa02 f000 	lsl.w	r0, r2, r0
   2ea5a:	680b      	ldr	r3, [r1, #0]
   2ea5c:	603a      	str	r2, [r7, #0]
   2ea5e:	4303      	orrs	r3, r0
   2ea60:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   2ea62:	454e      	cmp	r6, r9
   2ea64:	dac9      	bge.n	2e9fa <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2ea66:	682a      	ldr	r2, [r5, #0]
   2ea68:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   2ea6c:	1aa2      	subs	r2, r4, r2
   2ea6e:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   2ea72:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   2ea74:	465b      	mov	r3, fp
   2ea76:	0092      	lsls	r2, r2, #2
   2ea78:	4631      	mov	r1, r6
   2ea7a:	4628      	mov	r0, r5
   2ea7c:	f7ff ff0c 	bl	2e898 <get_bit_ptr>
	*word |= (1<<bit);
   2ea80:	697a      	ldr	r2, [r7, #20]
   2ea82:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   2ea84:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   2ea86:	fa03 f000 	lsl.w	r0, r3, r0
   2ea8a:	6813      	ldr	r3, [r2, #0]
   2ea8c:	4303      	orrs	r3, r0
   2ea8e:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   2ea90:	230c      	movs	r3, #12
   2ea92:	2203      	movs	r2, #3
   2ea94:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   2ea98:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   2ea9c:	f101 0e04 	add.w	lr, r1, #4
   2eaa0:	1823      	adds	r3, r4, r0
   2eaa2:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   2eaa4:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   2eaa6:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   2eaaa:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   2eaac:	688a      	ldr	r2, [r1, #8]
   2eaae:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   2eab0:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   2eab2:	608b      	str	r3, [r1, #8]
   2eab4:	3a01      	subs	r2, #1
   2eab6:	4403      	add	r3, r0
   2eab8:	60fa      	str	r2, [r7, #12]
   2eaba:	d1f3      	bne.n	2eaa4 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   2eabc:	4641      	mov	r1, r8
   2eabe:	7c28      	ldrb	r0, [r5, #16]
   2eac0:	f7ff ff0a 	bl	2e8d8 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2eac4:	7c2b      	ldrb	r3, [r5, #16]
   2eac6:	07db      	lsls	r3, r3, #31
   2eac8:	d503      	bpl.n	2ead2 <z_sys_mem_pool_block_alloc+0x160>
   2eaca:	f7ff fefc 	bl	2e8c6 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   2eace:	4680      	mov	r8, r0
   2ead0:	e7c7      	b.n	2ea62 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   2ead2:	68f8      	ldr	r0, [r7, #12]
   2ead4:	e7fb      	b.n	2eace <z_sys_mem_pool_block_alloc+0x15c>

0002ead6 <arch_printk_char_out>:
}
   2ead6:	2000      	movs	r0, #0
   2ead8:	4770      	bx	lr

0002eada <print_err>:
{
   2eada:	b570      	push	{r4, r5, r6, lr}
   2eadc:	460d      	mov	r5, r1
   2eade:	4604      	mov	r4, r0
	out('E', ctx);
   2eae0:	2045      	movs	r0, #69	; 0x45
   2eae2:	47a0      	blx	r4
	out('R', ctx);
   2eae4:	4629      	mov	r1, r5
   2eae6:	2052      	movs	r0, #82	; 0x52
   2eae8:	47a0      	blx	r4
	out('R', ctx);
   2eaea:	4629      	mov	r1, r5
   2eaec:	4623      	mov	r3, r4
}
   2eaee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   2eaf2:	2052      	movs	r0, #82	; 0x52
   2eaf4:	4718      	bx	r3

0002eaf6 <z_vprintk>:
{
   2eaf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   2eafa:	f04f 0800 	mov.w	r8, #0
{
   2eafe:	4606      	mov	r6, r0
   2eb00:	460f      	mov	r7, r1
   2eb02:	461c      	mov	r4, r3
	int min_width = -1;
   2eb04:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   2eb08:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   2eb0a:	4645      	mov	r5, r8
{
   2eb0c:	b08b      	sub	sp, #44	; 0x2c
   2eb0e:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   2eb10:	9b02      	ldr	r3, [sp, #8]
   2eb12:	7818      	ldrb	r0, [r3, #0]
   2eb14:	b910      	cbnz	r0, 2eb1c <z_vprintk+0x26>
}
   2eb16:	b00b      	add	sp, #44	; 0x2c
   2eb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   2eb1c:	b945      	cbnz	r5, 2eb30 <z_vprintk+0x3a>
			if (*fmt != '%') {
   2eb1e:	2825      	cmp	r0, #37	; 0x25
   2eb20:	f000 814b 	beq.w	2edba <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   2eb24:	4639      	mov	r1, r7
   2eb26:	47b0      	blx	r6
		++fmt;
   2eb28:	9b02      	ldr	r3, [sp, #8]
   2eb2a:	3301      	adds	r3, #1
   2eb2c:	9302      	str	r3, [sp, #8]
   2eb2e:	e7ef      	b.n	2eb10 <z_vprintk+0x1a>
			switch (*fmt) {
   2eb30:	2864      	cmp	r0, #100	; 0x64
   2eb32:	d06d      	beq.n	2ec10 <z_vprintk+0x11a>
   2eb34:	d819      	bhi.n	2eb6a <z_vprintk+0x74>
   2eb36:	2839      	cmp	r0, #57	; 0x39
   2eb38:	d80a      	bhi.n	2eb50 <z_vprintk+0x5a>
   2eb3a:	2831      	cmp	r0, #49	; 0x31
   2eb3c:	d25f      	bcs.n	2ebfe <z_vprintk+0x108>
   2eb3e:	282d      	cmp	r0, #45	; 0x2d
   2eb40:	f000 8141 	beq.w	2edc6 <z_vprintk+0x2d0>
   2eb44:	2830      	cmp	r0, #48	; 0x30
   2eb46:	d04b      	beq.n	2ebe0 <z_vprintk+0xea>
   2eb48:	2825      	cmp	r0, #37	; 0x25
   2eb4a:	d107      	bne.n	2eb5c <z_vprintk+0x66>
				out((int)'%', ctx);
   2eb4c:	4639      	mov	r1, r7
   2eb4e:	e132      	b.n	2edb6 <z_vprintk+0x2c0>
			switch (*fmt) {
   2eb50:	2858      	cmp	r0, #88	; 0x58
   2eb52:	f000 80bb 	beq.w	2eccc <z_vprintk+0x1d6>
   2eb56:	2863      	cmp	r0, #99	; 0x63
   2eb58:	f000 812a 	beq.w	2edb0 <z_vprintk+0x2ba>
				out((int)'%', ctx);
   2eb5c:	4639      	mov	r1, r7
   2eb5e:	2025      	movs	r0, #37	; 0x25
   2eb60:	47b0      	blx	r6
				out((int)*fmt, ctx);
   2eb62:	9b02      	ldr	r3, [sp, #8]
   2eb64:	4639      	mov	r1, r7
   2eb66:	7818      	ldrb	r0, [r3, #0]
   2eb68:	e125      	b.n	2edb6 <z_vprintk+0x2c0>
			switch (*fmt) {
   2eb6a:	2870      	cmp	r0, #112	; 0x70
   2eb6c:	f000 80a4 	beq.w	2ecb8 <z_vprintk+0x1c2>
   2eb70:	d811      	bhi.n	2eb96 <z_vprintk+0xa0>
   2eb72:	2869      	cmp	r0, #105	; 0x69
   2eb74:	d04c      	beq.n	2ec10 <z_vprintk+0x11a>
   2eb76:	286c      	cmp	r0, #108	; 0x6c
   2eb78:	d105      	bne.n	2eb86 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   2eb7a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2eb7e:	d12a      	bne.n	2ebd6 <z_vprintk+0xe0>
					length_mod = 'L';
   2eb80:	f04f 084c 	mov.w	r8, #76	; 0x4c
   2eb84:	e7d0      	b.n	2eb28 <z_vprintk+0x32>
			switch (*fmt) {
   2eb86:	2868      	cmp	r0, #104	; 0x68
   2eb88:	d1e8      	bne.n	2eb5c <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   2eb8a:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   2eb8e:	d122      	bne.n	2ebd6 <z_vprintk+0xe0>
					length_mod = 'H';
   2eb90:	f04f 0848 	mov.w	r8, #72	; 0x48
   2eb94:	e7c8      	b.n	2eb28 <z_vprintk+0x32>
			switch (*fmt) {
   2eb96:	2875      	cmp	r0, #117	; 0x75
   2eb98:	d072      	beq.n	2ec80 <z_vprintk+0x18a>
   2eb9a:	d818      	bhi.n	2ebce <z_vprintk+0xd8>
   2eb9c:	2873      	cmp	r0, #115	; 0x73
   2eb9e:	d1dd      	bne.n	2eb5c <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   2eba0:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   2eba4:	46ab      	mov	fp, r5
   2eba6:	465b      	mov	r3, fp
   2eba8:	f81b 0b01 	ldrb.w	r0, [fp], #1
   2ebac:	2800      	cmp	r0, #0
   2ebae:	f040 80fc 	bne.w	2edaa <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   2ebb2:	f1b9 0f03 	cmp.w	r9, #3
   2ebb6:	f040 810c 	bne.w	2edd2 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   2ebba:	1b5d      	subs	r5, r3, r5
   2ebbc:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   2ebc0:	2d00      	cmp	r5, #0
   2ebc2:	dd49      	ble.n	2ec58 <z_vprintk+0x162>
						out(' ', ctx);
   2ebc4:	4639      	mov	r1, r7
   2ebc6:	2020      	movs	r0, #32
   2ebc8:	47b0      	blx	r6
   2ebca:	3d01      	subs	r5, #1
   2ebcc:	e7f8      	b.n	2ebc0 <z_vprintk+0xca>
			switch (*fmt) {
   2ebce:	2878      	cmp	r0, #120	; 0x78
   2ebd0:	d07c      	beq.n	2eccc <z_vprintk+0x1d6>
   2ebd2:	287a      	cmp	r0, #122	; 0x7a
   2ebd4:	d1c2      	bne.n	2eb5c <z_vprintk+0x66>
				} else if (length_mod == 0) {
   2ebd6:	f1b8 0f00 	cmp.w	r8, #0
   2ebda:	d1bf      	bne.n	2eb5c <z_vprintk+0x66>
   2ebdc:	4680      	mov	r8, r0
   2ebde:	e7a3      	b.n	2eb28 <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   2ebe0:	f1ba 0f00 	cmp.w	sl, #0
   2ebe4:	da0e      	bge.n	2ec04 <z_vprintk+0x10e>
   2ebe6:	f1b9 0f00 	cmp.w	r9, #0
   2ebea:	f000 80ef 	beq.w	2edcc <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   2ebee:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   2ebf2:	f1b9 0f00 	cmp.w	r9, #0
   2ebf6:	bf08      	it	eq
   2ebf8:	f04f 0902 	moveq.w	r9, #2
   2ebfc:	e794      	b.n	2eb28 <z_vprintk+0x32>
				if (min_width < 0) {
   2ebfe:	f1ba 0f00 	cmp.w	sl, #0
   2ec02:	dbf4      	blt.n	2ebee <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   2ec04:	230a      	movs	r3, #10
   2ec06:	fb03 0a0a 	mla	sl, r3, sl, r0
   2ec0a:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   2ec0e:	e7f0      	b.n	2ebf2 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   2ec10:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   2ec14:	d102      	bne.n	2ec1c <z_vprintk+0x126>
					d = va_arg(ap, int);
   2ec16:	f854 5b04 	ldr.w	r5, [r4], #4
   2ec1a:	e020      	b.n	2ec5e <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   2ec1c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2ec20:	d0f9      	beq.n	2ec16 <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   2ec22:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2ec26:	d1f6      	bne.n	2ec16 <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   2ec28:	3407      	adds	r4, #7
   2ec2a:	f024 0407 	bic.w	r4, r4, #7
   2ec2e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   2ec32:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   2ec36:	9106      	str	r1, [sp, #24]
   2ec38:	f143 0100 	adc.w	r1, r3, #0
   2ec3c:	9107      	str	r1, [sp, #28]
   2ec3e:	2100      	movs	r1, #0
   2ec40:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   2ec44:	f04f 30ff 	mov.w	r0, #4294967295
   2ec48:	4561      	cmp	r1, ip
   2ec4a:	bf08      	it	eq
   2ec4c:	4558      	cmpeq	r0, fp
   2ec4e:	d205      	bcs.n	2ec5c <z_vprintk+0x166>
						print_err(out, ctx);
   2ec50:	4639      	mov	r1, r7
   2ec52:	4630      	mov	r0, r6
   2ec54:	f7ff ff41 	bl	2eada <print_err>
			might_format = 0;
   2ec58:	2500      	movs	r5, #0
				break;
   2ec5a:	e765      	b.n	2eb28 <z_vprintk+0x32>
					d = lld;
   2ec5c:	4615      	mov	r5, r2
				if (d < 0) {
   2ec5e:	2d00      	cmp	r5, #0
   2ec60:	da05      	bge.n	2ec6e <z_vprintk+0x178>
					out((int)'-', ctx);
   2ec62:	4639      	mov	r1, r7
   2ec64:	202d      	movs	r0, #45	; 0x2d
   2ec66:	47b0      	blx	r6
					d = -d;
   2ec68:	426d      	negs	r5, r5
					min_width--;
   2ec6a:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   2ec6e:	464b      	mov	r3, r9
   2ec70:	462a      	mov	r2, r5
   2ec72:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   2ec76:	4639      	mov	r1, r7
   2ec78:	4630      	mov	r0, r6
   2ec7a:	f7ef f951 	bl	1df20 <_printk_dec_ulong>
				break;
   2ec7e:	e7eb      	b.n	2ec58 <z_vprintk+0x162>
				if (length_mod == 'z') {
   2ec80:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   2ec84:	d102      	bne.n	2ec8c <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   2ec86:	f854 2b04 	ldr.w	r2, [r4], #4
   2ec8a:	e011      	b.n	2ecb0 <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   2ec8c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2ec90:	d0f9      	beq.n	2ec86 <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   2ec92:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2ec96:	d1f6      	bne.n	2ec86 <z_vprintk+0x190>
					if (llu > ~0UL) {
   2ec98:	2100      	movs	r1, #0
   2ec9a:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   2ec9e:	3407      	adds	r4, #7
   2eca0:	f024 0407 	bic.w	r4, r4, #7
   2eca4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   2eca8:	4299      	cmp	r1, r3
   2ecaa:	bf08      	it	eq
   2ecac:	4290      	cmpeq	r0, r2
   2ecae:	d3cf      	bcc.n	2ec50 <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   2ecb0:	f8cd a000 	str.w	sl, [sp]
   2ecb4:	464b      	mov	r3, r9
   2ecb6:	e7de      	b.n	2ec76 <z_vprintk+0x180>
				out('0', ctx);
   2ecb8:	4639      	mov	r1, r7
   2ecba:	2030      	movs	r0, #48	; 0x30
   2ecbc:	47b0      	blx	r6
				out('x', ctx);
   2ecbe:	4639      	mov	r1, r7
   2ecc0:	2078      	movs	r0, #120	; 0x78
   2ecc2:	47b0      	blx	r6
					min_width = 8;
   2ecc4:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   2ecc8:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   2eccc:	9b02      	ldr	r3, [sp, #8]
   2ecce:	781b      	ldrb	r3, [r3, #0]
   2ecd0:	2b70      	cmp	r3, #112	; 0x70
   2ecd2:	d104      	bne.n	2ecde <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   2ecd4:	f854 3b04 	ldr.w	r3, [r4], #4
   2ecd8:	9304      	str	r3, [sp, #16]
   2ecda:	2300      	movs	r3, #0
   2ecdc:	e00d      	b.n	2ecfa <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   2ecde:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2ece2:	d0f7      	beq.n	2ecd4 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   2ece4:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2ece8:	d1f4      	bne.n	2ecd4 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   2ecea:	3407      	adds	r4, #7
   2ecec:	f024 0307 	bic.w	r3, r4, #7
   2ecf0:	461c      	mov	r4, r3
   2ecf2:	f854 2b08 	ldr.w	r2, [r4], #8
   2ecf6:	685b      	ldr	r3, [r3, #4]
   2ecf8:	9204      	str	r2, [sp, #16]
	int digits = 0;
   2ecfa:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   2ecfc:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   2ecfe:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   2ed02:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   2ed04:	9105      	str	r1, [sp, #20]
		shift -= 4;
   2ed06:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   2ed0a:	9804      	ldr	r0, [sp, #16]
   2ed0c:	f1cb 0c20 	rsb	ip, fp, #32
   2ed10:	f1ab 0120 	sub.w	r1, fp, #32
   2ed14:	fa20 f00b 	lsr.w	r0, r0, fp
   2ed18:	fa03 fc0c 	lsl.w	ip, r3, ip
   2ed1c:	ea40 000c 	orr.w	r0, r0, ip
   2ed20:	fa23 f101 	lsr.w	r1, r3, r1
   2ed24:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   2ed26:	f010 000f 	ands.w	r0, r0, #15
   2ed2a:	d106      	bne.n	2ed3a <z_vprintk+0x244>
   2ed2c:	9905      	ldr	r1, [sp, #20]
   2ed2e:	b911      	cbnz	r1, 2ed36 <z_vprintk+0x240>
   2ed30:	f1bb 0f00 	cmp.w	fp, #0
   2ed34:	d122      	bne.n	2ed7c <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   2ed36:	2130      	movs	r1, #48	; 0x30
   2ed38:	e003      	b.n	2ed42 <z_vprintk+0x24c>
   2ed3a:	2809      	cmp	r0, #9
   2ed3c:	bf8c      	ite	hi
   2ed3e:	2157      	movhi	r1, #87	; 0x57
   2ed40:	2130      	movls	r1, #48	; 0x30
   2ed42:	4408      	add	r0, r1
			out((int)nibble, ctx);
   2ed44:	b240      	sxtb	r0, r0
   2ed46:	4639      	mov	r1, r7
   2ed48:	9308      	str	r3, [sp, #32]
   2ed4a:	9205      	str	r2, [sp, #20]
   2ed4c:	47b0      	blx	r6
			digits++;
   2ed4e:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   2ed50:	9a05      	ldr	r2, [sp, #20]
			digits++;
   2ed52:	3301      	adds	r3, #1
   2ed54:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   2ed56:	9b08      	ldr	r3, [sp, #32]
   2ed58:	f1bb 0f00 	cmp.w	fp, #0
   2ed5c:	d123      	bne.n	2eda6 <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   2ed5e:	f1b9 0f03 	cmp.w	r9, #3
   2ed62:	f47f af79 	bne.w	2ec58 <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   2ed66:	9b03      	ldr	r3, [sp, #12]
   2ed68:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   2ed6c:	2d00      	cmp	r5, #0
   2ed6e:	f77f af73 	ble.w	2ec58 <z_vprintk+0x162>
			out(' ', ctx);
   2ed72:	4639      	mov	r1, r7
   2ed74:	2020      	movs	r0, #32
   2ed76:	47b0      	blx	r6
   2ed78:	3d01      	subs	r5, #1
   2ed7a:	e7f7      	b.n	2ed6c <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   2ed7c:	1e51      	subs	r1, r2, #1
   2ed7e:	4592      	cmp	sl, r2
   2ed80:	9108      	str	r1, [sp, #32]
   2ed82:	db07      	blt.n	2ed94 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   2ed84:	f1b9 0f01 	cmp.w	r9, #1
   2ed88:	d106      	bne.n	2ed98 <z_vprintk+0x2a2>
				out('0', ctx);
   2ed8a:	4639      	mov	r1, r7
   2ed8c:	2030      	movs	r0, #48	; 0x30
   2ed8e:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   2ed90:	47b0      	blx	r6
   2ed92:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   2ed94:	9a08      	ldr	r2, [sp, #32]
   2ed96:	e7b6      	b.n	2ed06 <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   2ed98:	f1b9 0f02 	cmp.w	r9, #2
   2ed9c:	d1fa      	bne.n	2ed94 <z_vprintk+0x29e>
   2ed9e:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   2eda0:	4639      	mov	r1, r7
   2eda2:	2020      	movs	r0, #32
   2eda4:	e7f4      	b.n	2ed90 <z_vprintk+0x29a>
			found_largest_digit = 1;
   2eda6:	9505      	str	r5, [sp, #20]
   2eda8:	e7ad      	b.n	2ed06 <z_vprintk+0x210>
					out((int)(*s++), ctx);
   2edaa:	4639      	mov	r1, r7
   2edac:	47b0      	blx	r6
   2edae:	e6fa      	b.n	2eba6 <z_vprintk+0xb0>
				out(c, ctx);
   2edb0:	4639      	mov	r1, r7
   2edb2:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   2edb6:	47b0      	blx	r6
   2edb8:	e74e      	b.n	2ec58 <z_vprintk+0x162>
				length_mod = 0;
   2edba:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   2edbc:	46a9      	mov	r9, r5
				min_width = -1;
   2edbe:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   2edc2:	2501      	movs	r5, #1
   2edc4:	e6b0      	b.n	2eb28 <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   2edc6:	f04f 0903 	mov.w	r9, #3
   2edca:	e6ad      	b.n	2eb28 <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   2edcc:	f04f 0901 	mov.w	r9, #1
   2edd0:	e6aa      	b.n	2eb28 <z_vprintk+0x32>
			might_format = 0;
   2edd2:	4605      	mov	r5, r0
   2edd4:	e6a8      	b.n	2eb28 <z_vprintk+0x32>

0002edd6 <printk>:
{
   2edd6:	b40f      	push	{r0, r1, r2, r3}
   2edd8:	b507      	push	{r0, r1, r2, lr}
   2edda:	a904      	add	r1, sp, #16
   2eddc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2ede0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2ede2:	f7ef f8e9 	bl	1dfb8 <vprintk>
}
   2ede6:	b003      	add	sp, #12
   2ede8:	f85d eb04 	ldr.w	lr, [sp], #4
   2edec:	b004      	add	sp, #16
   2edee:	4770      	bx	lr

0002edf0 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2edf0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2edf2:	f7fd f9bb 	bl	2c16c <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2edf6:	2000      	movs	r0, #0
   2edf8:	bd08      	pop	{r3, pc}

0002edfa <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   2edfa:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2edfc:	f7fd fa00 	bl	2c200 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2ee00:	f110 0f0b 	cmn.w	r0, #11
   2ee04:	d005      	beq.n	2ee12 <sys_sem_take+0x18>
   2ee06:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2ee0a:	bf08      	it	eq
   2ee0c:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2ee10:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2ee12:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2ee16:	e7fb      	b.n	2ee10 <sys_sem_take+0x16>

0002ee18 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2ee18:	4604      	mov	r4, r0
   2ee1a:	b508      	push	{r3, lr}
   2ee1c:	4608      	mov	r0, r1
   2ee1e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2ee20:	461a      	mov	r2, r3
   2ee22:	47a0      	blx	r4
	return z_impl_k_current_get();
   2ee24:	f7fd f99c 	bl	2c160 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2ee28:	f7f0 fd36 	bl	1f898 <z_impl_k_thread_abort>

0002ee2c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2ee2c:	b510      	push	{r4, lr}
   2ee2e:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   2ee30:	f04f 31ff 	mov.w	r1, #4294967295
   2ee34:	4620      	mov	r0, r4
   2ee36:	f7fb ffab 	bl	2ad90 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2ee3a:	4603      	mov	r3, r0
   2ee3c:	2800      	cmp	r0, #0
   2ee3e:	d0f7      	beq.n	2ee30 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   2ee40:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ee42:	3308      	adds	r3, #8
   2ee44:	e8d3 1fef 	ldaex	r1, [r3]
   2ee48:	f021 0c01 	bic.w	ip, r1, #1
   2ee4c:	e8c3 cfee 	stlex	lr, ip, [r3]
   2ee50:	f1be 0f00 	cmp.w	lr, #0
   2ee54:	d1f6      	bne.n	2ee44 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   2ee56:	07cb      	lsls	r3, r1, #31
   2ee58:	d500      	bpl.n	2ee5c <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2ee5a:	4790      	blx	r2
	z_impl_k_yield();
   2ee5c:	f7fd f802 	bl	2be64 <z_impl_k_yield>
   2ee60:	e7e6      	b.n	2ee30 <z_work_q_main+0x4>

0002ee62 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2ee62:	4040      	eors	r0, r0
   2ee64:	f380 8811 	msr	BASEPRI, r0
   2ee68:	f04f 0004 	mov.w	r0, #4
   2ee6c:	df02      	svc	2
}
   2ee6e:	4770      	bx	lr

0002ee70 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2ee70:	4770      	bx	lr

0002ee72 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2ee72:	f7fa bffb 	b.w	29e6c <SystemInit>

0002ee76 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   2ee76:	6843      	ldr	r3, [r0, #4]
}
   2ee78:	7958      	ldrb	r0, [r3, #5]
   2ee7a:	4770      	bx	lr

0002ee7c <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   2ee7c:	f7ef bec0 	b.w	1ec00 <z_timer_cycle_get_32>

0002ee80 <dummy_timestamp>:
   2ee80:	2000      	movs	r0, #0
   2ee82:	4770      	bx	lr

0002ee84 <log_string_sync>:
{
   2ee84:	b40e      	push	{r1, r2, r3}
   2ee86:	b503      	push	{r0, r1, lr}
   2ee88:	aa03      	add	r2, sp, #12
   2ee8a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   2ee8e:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   2ee90:	f7ef f8be 	bl	1e010 <log_generic>
}
   2ee94:	b002      	add	sp, #8
   2ee96:	f85d eb04 	ldr.w	lr, [sp], #4
   2ee9a:	b003      	add	sp, #12
   2ee9c:	4770      	bx	lr

0002ee9e <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   2ee9e:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   2eea0:	f7ef f92c 	bl	1e0fc <log_init>
	}

	return 0;
}
   2eea4:	2000      	movs	r0, #0
   2eea6:	bd08      	pop	{r3, pc}

0002eea8 <log_strdup>:
}
   2eea8:	4770      	bx	lr

0002eeaa <out_func>:
{
   2eeaa:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   2eeac:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   2eeb0:	9001      	str	r0, [sp, #4]
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   2eeb2:	6852      	ldr	r2, [r2, #4]
   2eeb4:	2101      	movs	r1, #1
   2eeb6:	a801      	add	r0, sp, #4
   2eeb8:	4798      	blx	r3
}
   2eeba:	2000      	movs	r0, #0
   2eebc:	b003      	add	sp, #12
   2eebe:	f85d fb04 	ldr.w	pc, [sp], #4

0002eec2 <buffer_write>:
{
   2eec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2eec4:	4606      	mov	r6, r0
   2eec6:	460d      	mov	r5, r1
   2eec8:	4614      	mov	r4, r2
   2eeca:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2eecc:	4621      	mov	r1, r4
   2eece:	4628      	mov	r0, r5
   2eed0:	463a      	mov	r2, r7
   2eed2:	47b0      	blx	r6
	} while (len != 0);
   2eed4:	1a24      	subs	r4, r4, r0
		buf += processed;
   2eed6:	4405      	add	r5, r0
	} while (len != 0);
   2eed8:	d1f8      	bne.n	2eecc <buffer_write+0xa>
}
   2eeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002eedc <log_output_flush>:
		     log_output->control_block->offset,
   2eedc:	6842      	ldr	r2, [r0, #4]
{
   2eede:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   2eee0:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   2eee4:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   2eee6:	6881      	ldr	r1, [r0, #8]
   2eee8:	6800      	ldr	r0, [r0, #0]
   2eeea:	f7ff ffea 	bl	2eec2 <buffer_write>
	log_output->control_block->offset = 0;
   2eeee:	2200      	movs	r2, #0
   2eef0:	6863      	ldr	r3, [r4, #4]
   2eef2:	601a      	str	r2, [r3, #0]
}
   2eef4:	bd10      	pop	{r4, pc}

0002eef6 <clkstarted_handle>:
{
   2eef6:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   2eef8:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2eefa:	6883      	ldr	r3, [r0, #8]
{
   2eefc:	4605      	mov	r5, r0
	sub_data->started = true;
   2eefe:	fb04 3401 	mla	r4, r4, r1, r3
   2ef02:	2301      	movs	r3, #1
   2ef04:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   2ef06:	f04f 0320 	mov.w	r3, #32
   2ef0a:	f3ef 8111 	mrs	r1, BASEPRI
   2ef0e:	f383 8811 	msr	BASEPRI, r3
   2ef12:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2ef16:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2ef18:	b12b      	cbz	r3, 2ef26 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ef1a:	6860      	ldr	r0, [r4, #4]
   2ef1c:	681a      	ldr	r2, [r3, #0]
   2ef1e:	4283      	cmp	r3, r0
	list->head = node;
   2ef20:	6022      	str	r2, [r4, #0]
	list->tail = node;
   2ef22:	bf08      	it	eq
   2ef24:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   2ef26:	f381 8811 	msr	BASEPRI, r1
   2ef2a:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   2ef2e:	b903      	cbnz	r3, 2ef32 <clkstarted_handle+0x3c>
}
   2ef30:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   2ef32:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   2ef36:	4628      	mov	r0, r5
   2ef38:	4790      	blx	r2
   2ef3a:	e7e4      	b.n	2ef06 <clkstarted_handle+0x10>

0002ef3c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   2ef3c:	2200      	movs	r2, #0
   2ef3e:	f7ef bbb5 	b.w	1e6ac <clock_async_start>

0002ef42 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2ef42:	4770      	bx	lr

0002ef44 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2ef44:	f7ef beae 	b.w	1eca4 <_DoInit>

0002ef48 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   2ef48:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2ef4a:	f7ff fffb 	bl	2ef44 <SEGGER_RTT_Init>

	return 0;
}
   2ef4e:	2000      	movs	r0, #0
   2ef50:	bd08      	pop	{r3, pc}

0002ef52 <z_irq_spurious>:
	z_arm_reserved();
   2ef52:	f7ef bfb9 	b.w	1eec8 <z_arm_bus_fault>

0002ef56 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2ef56:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2ef58:	f383 880b 	msr	PSPLIM, r3
}
   2ef5c:	4770      	bx	lr

0002ef5e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2ef5e:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   2ef60:	6800      	ldr	r0, [r0, #0]
   2ef62:	f7f0 b8c7 	b.w	1f0f4 <z_arm_fatal_error>

0002ef66 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2ef66:	b508      	push	{r3, lr}
	handler();
   2ef68:	f7ef ffb8 	bl	1eedc <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   2ef6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   2ef70:	f7ef bf1e 	b.w	1edb0 <z_arm_exc_exit>

0002ef74 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   2ef74:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   2ef76:	2100      	movs	r1, #0
   2ef78:	a801      	add	r0, sp, #4
   2ef7a:	f7f0 feeb 	bl	1fd54 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   2ef7e:	b003      	add	sp, #12
   2ef80:	f85d fb04 	ldr.w	pc, [sp], #4

0002ef84 <mpu_configure_region>:
{
   2ef84:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   2ef86:	684b      	ldr	r3, [r1, #4]
{
   2ef88:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   2ef8a:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   2ef8c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2ef90:	890d      	ldrh	r5, [r1, #8]
   2ef92:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   2ef94:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2ef96:	f024 041f 	bic.w	r4, r4, #31
   2ef9a:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   2ef9c:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2efa0:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   2efa2:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2efa6:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   2efaa:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   2efac:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2efb0:	9303      	str	r3, [sp, #12]
   2efb2:	f7f0 fcf1 	bl	1f998 <region_allocate_and_init>
}
   2efb6:	b005      	add	sp, #20
   2efb8:	bd30      	pop	{r4, r5, pc}

0002efba <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2efba:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2efbe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2efc2:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2efc4:	bf08      	it	eq
   2efc6:	f06f 0015 	mvneq.w	r0, #21
   2efca:	4770      	bx	lr

0002efcc <_stdout_hook_default>:
}
   2efcc:	f04f 30ff 	mov.w	r0, #4294967295
   2efd0:	4770      	bx	lr

0002efd2 <_stdin_hook_default>:
}
   2efd2:	2000      	movs	r0, #0
   2efd4:	4770      	bx	lr

0002efd6 <_read>:
{
   2efd6:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2efd8:	4611      	mov	r1, r2
   2efda:	f7f0 bef7 	b.w	1fdcc <z_impl_zephyr_read_stdin>

0002efde <_write>:
{
   2efde:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2efe0:	4611      	mov	r1, r2
   2efe2:	f7f0 bf07 	b.w	1fdf4 <z_impl_zephyr_write_stdout>

0002efe6 <_close>:
   2efe6:	f04f 30ff 	mov.w	r0, #4294967295
   2efea:	4770      	bx	lr

0002efec <_lseek>:
}
   2efec:	2000      	movs	r0, #0
   2efee:	4770      	bx	lr

0002eff0 <_isatty>:
}
   2eff0:	2001      	movs	r0, #1
   2eff2:	4770      	bx	lr

0002eff4 <_kill>:
}
   2eff4:	2000      	movs	r0, #0
   2eff6:	4770      	bx	lr

0002eff8 <_getpid>:
}
   2eff8:	2000      	movs	r0, #0
   2effa:	4770      	bx	lr

0002effc <_fstat>:
	st->st_mode = S_IFCHR;
   2effc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2f000:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2f002:	604b      	str	r3, [r1, #4]
}
   2f004:	4770      	bx	lr

0002f006 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2f006:	f7fa bfe1 	b.w	29fcc <z_impl_z_errno>

0002f00a <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   2f00a:	b508      	push	{r3, lr}
	net_if_init();
   2f00c:	f7f0 ffba 	bl	1ff84 <net_if_init>
	net_if_post_init();
   2f010:	f7f0 ffcc 	bl	1ffac <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2f014:	2000      	movs	r0, #0
   2f016:	bd08      	pop	{r3, pc}

0002f018 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2f018:	b110      	cbz	r0, 2f020 <net_if_l2+0x8>
   2f01a:	6800      	ldr	r0, [r0, #0]
   2f01c:	b100      	cbz	r0, 2f020 <net_if_l2+0x8>
	return iface->if_dev->l2;
   2f01e:	6840      	ldr	r0, [r0, #4]
}
   2f020:	4770      	bx	lr

0002f022 <l2_flags_get>:
{
   2f022:	b510      	push	{r4, lr}
   2f024:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2f026:	f7ff fff7 	bl	2f018 <net_if_l2>
   2f02a:	b128      	cbz	r0, 2f038 <l2_flags_get+0x16>
   2f02c:	68c3      	ldr	r3, [r0, #12]
   2f02e:	b11b      	cbz	r3, 2f038 <l2_flags_get+0x16>
}
   2f030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2f034:	4610      	mov	r0, r2
   2f036:	4718      	bx	r3
}
   2f038:	2000      	movs	r0, #0
   2f03a:	bd10      	pop	{r4, pc}

0002f03c <gpio_nrfx_write>:
{
   2f03c:	b510      	push	{r4, lr}
	return port->config->config_info;
   2f03e:	6804      	ldr	r4, [r0, #0]
   2f040:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f042:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2f044:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f046:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2f048:	69c0      	ldr	r0, [r0, #28]
   2f04a:	d103      	bne.n	2f054 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   2f04c:	4058      	eors	r0, r3
    p_reg->OUT = value;
   2f04e:	6060      	str	r0, [r4, #4]
}
   2f050:	2000      	movs	r0, #0
   2f052:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   2f054:	3300      	adds	r3, #0
   2f056:	f04f 0101 	mov.w	r1, #1
   2f05a:	bf18      	it	ne
   2f05c:	2301      	movne	r3, #1
   2f05e:	40d0      	lsrs	r0, r2
   2f060:	f000 0001 	and.w	r0, r0, #1
   2f064:	4091      	lsls	r1, r2
   2f066:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   2f068:	bf14      	ite	ne
   2f06a:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   2f06c:	60e1      	streq	r1, [r4, #12]
   2f06e:	e7ef      	b.n	2f050 <gpio_nrfx_write+0x14>

0002f070 <gpio_nrfx_read>:
{
   2f070:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   2f072:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   2f074:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f076:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   2f078:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f07a:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2f07c:	2901      	cmp	r1, #1
    return p_reg->DIR;
   2f07e:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   2f080:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   2f082:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   2f084:	ea80 0004 	eor.w	r0, r0, r4
   2f088:	ea84 0405 	eor.w	r4, r4, r5
   2f08c:	ea04 0406 	and.w	r4, r4, r6
   2f090:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   2f094:	bf1c      	itt	ne
   2f096:	40d0      	lsrne	r0, r2
   2f098:	f000 0001 	andne.w	r0, r0, #1
   2f09c:	6018      	str	r0, [r3, #0]
}
   2f09e:	2000      	movs	r0, #0
   2f0a0:	bd70      	pop	{r4, r5, r6, pc}

0002f0a2 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2f0a2:	2901      	cmp	r1, #1
{
   2f0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2f0a8:	bf18      	it	ne
   2f0aa:	b2d4      	uxtbne	r4, r2
{
   2f0ac:	4606      	mov	r6, r0
		to_pin   = pin;
   2f0ae:	bf12      	itee	ne
   2f0b0:	4625      	movne	r5, r4
		to_pin   = 31U;
   2f0b2:	251f      	moveq	r5, #31
		from_pin = 0U;
   2f0b4:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2f0b6:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   2f0ba:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2f0bc:	42ac      	cmp	r4, r5
   2f0be:	d902      	bls.n	2f0c6 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   2f0c0:	2000      	movs	r0, #0
}
   2f0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2f0c6:	68fb      	ldr	r3, [r7, #12]
   2f0c8:	fa08 f204 	lsl.w	r2, r8, r4
   2f0cc:	ea23 0302 	bic.w	r3, r3, r2
   2f0d0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2f0d2:	4621      	mov	r1, r4
   2f0d4:	4630      	mov	r0, r6
   2f0d6:	f7f1 f80d 	bl	200f4 <gpiote_pin_int_cfg>
		if (res != 0) {
   2f0da:	2800      	cmp	r0, #0
   2f0dc:	d1f1      	bne.n	2f0c2 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2f0de:	3401      	adds	r4, #1
   2f0e0:	b2e4      	uxtb	r4, r4
   2f0e2:	e7eb      	b.n	2f0bc <gpio_nrfx_pin_disable_callback+0x1a>

0002f0e4 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2f0e4:	2901      	cmp	r1, #1
{
   2f0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2f0ea:	bf18      	it	ne
   2f0ec:	b2d4      	uxtbne	r4, r2
{
   2f0ee:	4606      	mov	r6, r0
		to_pin   = pin;
   2f0f0:	bf12      	itee	ne
   2f0f2:	4625      	movne	r5, r4
		to_pin   = 31U;
   2f0f4:	251f      	moveq	r5, #31
		from_pin = 0U;
   2f0f6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2f0f8:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   2f0fc:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2f0fe:	42ac      	cmp	r4, r5
   2f100:	d902      	bls.n	2f108 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   2f102:	2000      	movs	r0, #0
}
   2f104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2f108:	68fb      	ldr	r3, [r7, #12]
   2f10a:	fa08 f204 	lsl.w	r2, r8, r4
   2f10e:	4313      	orrs	r3, r2
   2f110:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2f112:	4621      	mov	r1, r4
   2f114:	4630      	mov	r0, r6
   2f116:	f7f0 ffed 	bl	200f4 <gpiote_pin_int_cfg>
		if (res != 0) {
   2f11a:	2800      	cmp	r0, #0
   2f11c:	d1f2      	bne.n	2f104 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2f11e:	3401      	adds	r4, #1
   2f120:	b2e4      	uxtb	r4, r4
   2f122:	e7ec      	b.n	2f0fe <gpio_nrfx_pin_enable_callback+0x1a>

0002f124 <flash_nrf_write_protection>:
}
   2f124:	2000      	movs	r0, #0
   2f126:	4770      	bx	lr

0002f128 <is_regular_addr_valid>:
{
   2f128:	b538      	push	{r3, r4, r5, lr}
   2f12a:	4604      	mov	r4, r0
   2f12c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2f12e:	f000 fd3b 	bl	2fba8 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2f132:	4284      	cmp	r4, r0
   2f134:	d209      	bcs.n	2f14a <is_regular_addr_valid+0x22>
   2f136:	2c00      	cmp	r4, #0
   2f138:	db07      	blt.n	2f14a <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2f13a:	42a8      	cmp	r0, r5
   2f13c:	d305      	bcc.n	2f14a <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2f13e:	442c      	add	r4, r5
	    len > flash_size ||
   2f140:	4284      	cmp	r4, r0
   2f142:	bf8c      	ite	hi
   2f144:	2000      	movhi	r0, #0
   2f146:	2001      	movls	r0, #1
}
   2f148:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2f14a:	2000      	movs	r0, #0
   2f14c:	e7fc      	b.n	2f148 <is_regular_addr_valid+0x20>

0002f14e <flash_nrf_read>:
{
   2f14e:	b570      	push	{r4, r5, r6, lr}
   2f150:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2f152:	4619      	mov	r1, r3
   2f154:	4628      	mov	r0, r5
{
   2f156:	4616      	mov	r6, r2
   2f158:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2f15a:	f7ff ffe5 	bl	2f128 <is_regular_addr_valid>
   2f15e:	b170      	cbz	r0, 2f17e <flash_nrf_read+0x30>
	if (!len) {
   2f160:	b184      	cbz	r4, 2f184 <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   2f162:	f5b5 3fe1 	cmp.w	r5, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   2f166:	4622      	mov	r2, r4
   2f168:	4629      	mov	r1, r5
   2f16a:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   2f16c:	da03      	bge.n	2f176 <flash_nrf_read+0x28>
}
   2f16e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   2f172:	f7e8 bf35 	b.w	17fe0 <spm_request_read>
   2f176:	f000 fe4e 	bl	2fe16 <memcpy>
   2f17a:	2000      	movs	r0, #0
}
   2f17c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2f17e:	f06f 0015 	mvn.w	r0, #21
   2f182:	e7fb      	b.n	2f17c <flash_nrf_read+0x2e>
		return 0;
   2f184:	4620      	mov	r0, r4
   2f186:	e7f9      	b.n	2f17c <flash_nrf_read+0x2e>

0002f188 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   2f188:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   2f18a:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   2f18c:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   2f18e:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   2f190:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   2f192:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   2f194:	b159      	cbz	r1, 2f1ae <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f196:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2f19a:	b141      	cbz	r1, 2f1ae <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   2f19c:	f44f 7180 	mov.w	r1, #256	; 0x100
   2f1a0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f1a4:	2101      	movs	r1, #1
   2f1a6:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   2f1a8:	2300      	movs	r3, #0
   2f1aa:	7393      	strb	r3, [r2, #14]
		return;
   2f1ac:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f1ae:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2f1b2:	b111      	cbz	r1, 2f1ba <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f1b4:	2100      	movs	r1, #0
   2f1b6:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2f1ba:	6813      	ldr	r3, [r2, #0]
   2f1bc:	b10b      	cbz	r3, 2f1c2 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   2f1be:	6850      	ldr	r0, [r2, #4]
   2f1c0:	4718      	bx	r3
}
   2f1c2:	4770      	bx	lr

0002f1c4 <uarte_nrfx_config_get>:
{
   2f1c4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2f1c6:	6882      	ldr	r2, [r0, #8]
   2f1c8:	e892 0003 	ldmia.w	r2, {r0, r1}
   2f1cc:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2f1d0:	2000      	movs	r0, #0
   2f1d2:	4770      	bx	lr

0002f1d4 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   2f1d4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2f1d6:	689b      	ldr	r3, [r3, #8]
   2f1d8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f1da:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f1de:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2f1e2:	4770      	bx	lr

0002f1e4 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   2f1e4:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2f1e6:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   2f1e8:	689b      	ldr	r3, [r3, #8]
   2f1ea:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f1ec:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f1f0:	b138      	cbz	r0, 2f202 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   2f1f2:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f1f4:	2000      	movs	r0, #0
   2f1f6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f1f8:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f1fa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f1fe:	601a      	str	r2, [r3, #0]
	return 0;
   2f200:	4770      	bx	lr
		return -1;
   2f202:	f04f 30ff 	mov.w	r0, #4294967295
}
   2f206:	4770      	bx	lr

0002f208 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f208:	2200      	movs	r2, #0
	return dev->config->config_info;
   2f20a:	6803      	ldr	r3, [r0, #0]
{
   2f20c:	b082      	sub	sp, #8
	return config->uarte_regs;
   2f20e:	689b      	ldr	r3, [r3, #8]
{
   2f210:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   2f214:	681b      	ldr	r3, [r3, #0]
   2f216:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f21a:	f10d 0207 	add.w	r2, sp, #7
   2f21e:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f222:	2201      	movs	r2, #1
   2f224:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f228:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f22a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2f22e:	2900      	cmp	r1, #0
   2f230:	d0fb      	beq.n	2f22a <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f232:	60da      	str	r2, [r3, #12]
}
   2f234:	b002      	add	sp, #8
   2f236:	4770      	bx	lr

0002f238 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   2f238:	6803      	ldr	r3, [r0, #0]
{
   2f23a:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2f23c:	689b      	ldr	r3, [r3, #8]
   2f23e:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f240:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2f244:	b1bb      	cbz	r3, 2f276 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2f246:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   2f248:	68ab      	ldr	r3, [r5, #8]
   2f24a:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f24c:	2300      	movs	r3, #0
   2f24e:	4290      	cmp	r0, r2
   2f250:	bfa8      	it	ge
   2f252:	4610      	movge	r0, r2
   2f254:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   2f258:	68aa      	ldr	r2, [r5, #8]
   2f25a:	4283      	cmp	r3, r0
   2f25c:	6892      	ldr	r2, [r2, #8]
   2f25e:	db06      	blt.n	2f26e <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f260:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f262:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f266:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f26a:	60a3      	str	r3, [r4, #8]
}
   2f26c:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2f26e:	5cce      	ldrb	r6, [r1, r3]
   2f270:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   2f272:	3301      	adds	r3, #1
   2f274:	e7f0      	b.n	2f258 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   2f276:	4618      	mov	r0, r3
   2f278:	e7f8      	b.n	2f26c <uarte_nrfx_fifo_fill+0x34>

0002f27a <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   2f27a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2f27c:	689b      	ldr	r3, [r3, #8]
   2f27e:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f280:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f284:	b143      	cbz	r3, 2f298 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2f286:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f288:	2000      	movs	r0, #0
   2f28a:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f28e:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   2f290:	7b1b      	ldrb	r3, [r3, #12]
   2f292:	700b      	strb	r3, [r1, #0]
   2f294:	6010      	str	r0, [r2, #0]
   2f296:	4770      	bx	lr
	int num_rx = 0;
   2f298:	4618      	mov	r0, r3
}
   2f29a:	4770      	bx	lr

0002f29c <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   2f29c:	2100      	movs	r1, #0
	return dev->config->config_info;
   2f29e:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   2f2a0:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   2f2a2:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   2f2a4:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   2f2a6:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2f2a8:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   2f2aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   2f2ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f2b2:	4770      	bx	lr

0002f2b4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2f2b4:	2201      	movs	r2, #1
   2f2b6:	6883      	ldr	r3, [r0, #8]
   2f2b8:	689b      	ldr	r3, [r3, #8]
   2f2ba:	739a      	strb	r2, [r3, #14]
}
   2f2bc:	4770      	bx	lr

0002f2be <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   2f2be:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2f2c0:	689b      	ldr	r3, [r3, #8]
   2f2c2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f2c4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2f2c8:	b118      	cbz	r0, 2f2d2 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   2f2ca:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   2f2ce:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   2f2d2:	4770      	bx	lr

0002f2d4 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   2f2d4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2f2d6:	689b      	ldr	r3, [r3, #8]
   2f2d8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f2da:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2f2de:	3000      	adds	r0, #0
   2f2e0:	bf18      	it	ne
   2f2e2:	2001      	movne	r0, #1
   2f2e4:	4770      	bx	lr

0002f2e6 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2f2e6:	2210      	movs	r2, #16
	return dev->config->config_info;
   2f2e8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2f2ea:	689b      	ldr	r3, [r3, #8]
   2f2ec:	681b      	ldr	r3, [r3, #0]
   2f2ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f2f2:	4770      	bx	lr

0002f2f4 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2f2f4:	2210      	movs	r2, #16
	return dev->config->config_info;
   2f2f6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2f2f8:	689b      	ldr	r3, [r3, #8]
   2f2fa:	681b      	ldr	r3, [r3, #0]
   2f2fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2f300:	4770      	bx	lr

0002f302 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2f302:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   2f306:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2f308:	689b      	ldr	r3, [r3, #8]
   2f30a:	681b      	ldr	r3, [r3, #0]
   2f30c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f310:	4770      	bx	lr

0002f312 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2f312:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   2f316:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2f318:	689b      	ldr	r3, [r3, #8]
   2f31a:	681b      	ldr	r3, [r3, #0]
   2f31c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2f320:	4770      	bx	lr

0002f322 <uarte_nrfx_irq_update>:
}
   2f322:	2001      	movs	r0, #1
   2f324:	4770      	bx	lr

0002f326 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2f326:	6883      	ldr	r3, [r0, #8]
   2f328:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   2f32a:	e9c3 1200 	strd	r1, r2, [r3]
}
   2f32e:	4770      	bx	lr

0002f330 <uarte_nrfx_irq_is_pending>:
{
   2f330:	b508      	push	{r3, lr}
	return dev->config->config_info;
   2f332:	6803      	ldr	r3, [r0, #0]
{
   2f334:	4602      	mov	r2, r0
	return config->uarte_regs;
   2f336:	689b      	ldr	r3, [r3, #8]
   2f338:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   2f33a:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   2f33e:	05db      	lsls	r3, r3, #23
   2f340:	d405      	bmi.n	2f34e <uarte_nrfx_irq_is_pending+0x1e>
   2f342:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   2f346:	f010 0010 	ands.w	r0, r0, #16
   2f34a:	d106      	bne.n	2f35a <uarte_nrfx_irq_is_pending+0x2a>
}
   2f34c:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2f34e:	f7ff ffb6 	bl	2f2be <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   2f352:	2800      	cmp	r0, #0
   2f354:	d0f5      	beq.n	2f342 <uarte_nrfx_irq_is_pending+0x12>
		||
   2f356:	2001      	movs	r0, #1
   2f358:	e7f8      	b.n	2f34c <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   2f35a:	4610      	mov	r0, r2
   2f35c:	f7ff ffba 	bl	2f2d4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2f360:	3000      	adds	r0, #0
   2f362:	bf18      	it	ne
   2f364:	2001      	movne	r0, #1
   2f366:	e7f1      	b.n	2f34c <uarte_nrfx_irq_is_pending+0x1c>

0002f368 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2f368:	2000      	movs	r0, #0
   2f36a:	4770      	bx	lr

0002f36c <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2f36c:	4668      	mov	r0, sp
   2f36e:	f020 0107 	bic.w	r1, r0, #7
   2f372:	468d      	mov	sp, r1
   2f374:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   2f376:	f7f4 fe27 	bl	23fc8 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2f37a:	f7ef fe2f 	bl	1efdc <_arch_isr_direct_pm>
   2f37e:	f7ef fd17 	bl	1edb0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2f382:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2f386:	4685      	mov	sp, r0
   2f388:	4770      	bx	lr

0002f38a <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2f38a:	4668      	mov	r0, sp
   2f38c:	f020 0107 	bic.w	r1, r0, #7
   2f390:	468d      	mov	sp, r1
   2f392:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   2f394:	f7f5 fa10 	bl	247b8 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2f398:	f7ef fe20 	bl	1efdc <_arch_isr_direct_pm>
   2f39c:	f7ef fd08 	bl	1edb0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2f3a0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2f3a4:	4685      	mov	sp, r0
   2f3a6:	4770      	bx	lr

0002f3a8 <trace_task_create>:
{
   2f3a8:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2f3aa:	201d      	movs	r0, #29
   2f3ac:	2200      	movs	r2, #0
   2f3ae:	2106      	movs	r1, #6
   2f3b0:	f7ef fde2 	bl	1ef78 <z_arm_irq_priority_set>
}
   2f3b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2f3b8:	201d      	movs	r0, #29
   2f3ba:	f7ef bdcd 	b.w	1ef58 <arch_irq_enable>

0002f3be <read_task_create>:
{
   2f3be:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2f3c0:	201c      	movs	r0, #28
   2f3c2:	2200      	movs	r2, #0
   2f3c4:	2106      	movs	r1, #6
   2f3c6:	f7ef fdd7 	bl	1ef78 <z_arm_irq_priority_set>
}
   2f3ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2f3ce:	201c      	movs	r0, #28
   2f3d0:	f7ef bdc2 	b.w	1ef58 <arch_irq_enable>

0002f3d4 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   2f3d4:	2000      	movs	r0, #0
   2f3d6:	4770      	bx	lr

0002f3d8 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   2f3d8:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   2f3dc:	bf18      	it	ne
   2f3de:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   2f3e0:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   2f3e2:	bf48      	it	mi
   2f3e4:	f043 0308 	orrmi.w	r3, r3, #8
}
   2f3e8:	4618      	mov	r0, r3
   2f3ea:	4770      	bx	lr

0002f3ec <z_to_nrf_family>:
	switch (z_family) {
   2f3ec:	2803      	cmp	r0, #3
   2f3ee:	d00f      	beq.n	2f410 <z_to_nrf_family+0x24>
   2f3f0:	d808      	bhi.n	2f404 <z_to_nrf_family+0x18>
   2f3f2:	2801      	cmp	r0, #1
   2f3f4:	d00e      	beq.n	2f414 <z_to_nrf_family+0x28>
   2f3f6:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   2f3f8:	bf08      	it	eq
   2f3fa:	200a      	moveq	r0, #10
   2f3fc:	bf18      	it	ne
   2f3fe:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   2f402:	4770      	bx	lr
	switch (z_family) {
   2f404:	2866      	cmp	r0, #102	; 0x66
   2f406:	d006      	beq.n	2f416 <z_to_nrf_family+0x2a>
   2f408:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   2f40a:	bf08      	it	eq
   2f40c:	2001      	moveq	r0, #1
   2f40e:	e7f5      	b.n	2f3fc <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   2f410:	2005      	movs	r0, #5
   2f412:	4770      	bx	lr
		return NRF_AF_INET;
   2f414:	2002      	movs	r0, #2
}
   2f416:	4770      	bx	lr

0002f418 <z_to_nrf_protocol>:
	switch (proto) {
   2f418:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2f41c:	d01d      	beq.n	2f45a <z_to_nrf_protocol+0x42>
   2f41e:	dc08      	bgt.n	2f432 <z_to_nrf_protocol+0x1a>
   2f420:	2806      	cmp	r0, #6
   2f422:	d01d      	beq.n	2f460 <z_to_nrf_protocol+0x48>
   2f424:	2811      	cmp	r0, #17
   2f426:	d01d      	beq.n	2f464 <z_to_nrf_protocol+0x4c>
   2f428:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   2f42a:	bf18      	it	ne
   2f42c:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2f430:	4770      	bx	lr
	switch (proto) {
   2f432:	f240 2301 	movw	r3, #513	; 0x201
   2f436:	4298      	cmp	r0, r3
   2f438:	d015      	beq.n	2f466 <z_to_nrf_protocol+0x4e>
   2f43a:	dc06      	bgt.n	2f44a <z_to_nrf_protocol+0x32>
   2f43c:	f240 1311 	movw	r3, #273	; 0x111
   2f440:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   2f442:	bf08      	it	eq
   2f444:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   2f448:	e7ef      	b.n	2f42a <z_to_nrf_protocol+0x12>
	switch (proto) {
   2f44a:	f240 2302 	movw	r3, #514	; 0x202
   2f44e:	4298      	cmp	r0, r3
   2f450:	d009      	beq.n	2f466 <z_to_nrf_protocol+0x4e>
   2f452:	f240 2303 	movw	r3, #515	; 0x203
   2f456:	4298      	cmp	r0, r3
   2f458:	e7e7      	b.n	2f42a <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   2f45a:	f44f 7082 	mov.w	r0, #260	; 0x104
   2f45e:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   2f460:	2001      	movs	r0, #1
   2f462:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   2f464:	2002      	movs	r0, #2
}
   2f466:	4770      	bx	lr

0002f468 <nrf91_bsdlib_socket_offload_init>:
}
   2f468:	2000      	movs	r0, #0
   2f46a:	4770      	bx	lr

0002f46c <nrf91_socket_offload_freeaddrinfo>:
{
   2f46c:	b538      	push	{r3, r4, r5, lr}
   2f46e:	4604      	mov	r4, r0
	while (next != NULL) {
   2f470:	b904      	cbnz	r4, 2f474 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2f472:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2f474:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   2f476:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   2f478:	f000 fbb4 	bl	2fbe4 <k_free>
		k_free(this);
   2f47c:	4620      	mov	r0, r4
   2f47e:	f000 fbb1 	bl	2fbe4 <k_free>
		next = next->ai_next;
   2f482:	462c      	mov	r4, r5
   2f484:	e7f4      	b.n	2f470 <nrf91_socket_offload_freeaddrinfo+0x4>

0002f486 <z_to_nrf_addrinfo_hints>:
{
   2f486:	b538      	push	{r3, r4, r5, lr}
   2f488:	460c      	mov	r4, r1
   2f48a:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2f48c:	221c      	movs	r2, #28
   2f48e:	2100      	movs	r1, #0
   2f490:	1d20      	adds	r0, r4, #4
   2f492:	f000 fccd 	bl	2fe30 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2f496:	2300      	movs	r3, #0
   2f498:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2f49a:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   2f49c:	2b03      	cmp	r3, #3
   2f49e:	d003      	beq.n	2f4a8 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   2f4a0:	2b04      	cmp	r3, #4
   2f4a2:	bf08      	it	eq
   2f4a4:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2f4a8:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   2f4aa:	88a8      	ldrh	r0, [r5, #4]
   2f4ac:	f7ff ff9e 	bl	2f3ec <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2f4b0:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2f4b4:	d00b      	beq.n	2f4ce <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   2f4b6:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2f4b8:	68e8      	ldr	r0, [r5, #12]
   2f4ba:	f7ff ffad 	bl	2f418 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2f4be:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2f4c2:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2f4c4:	d003      	beq.n	2f4ce <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   2f4c6:	69a8      	ldr	r0, [r5, #24]
   2f4c8:	b108      	cbz	r0, 2f4ce <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   2f4ca:	61a0      	str	r0, [r4, #24]
	return 0;
   2f4cc:	2000      	movs	r0, #0
}
   2f4ce:	bd38      	pop	{r3, r4, r5, pc}

0002f4d0 <nrf91_socket_offload_send>:
{
   2f4d0:	b570      	push	{r4, r5, r6, lr}
   2f4d2:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2f4d4:	4618      	mov	r0, r3
{
   2f4d6:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2f4d8:	f7ff ff7e 	bl	2f3d8 <z_to_nrf_flags>
   2f4dc:	462a      	mov	r2, r5
   2f4de:	4603      	mov	r3, r0
   2f4e0:	4620      	mov	r0, r4
}
   2f4e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2f4e6:	f7f6 beaf 	b.w	26248 <nrf_send>

0002f4ea <nrf91_socket_offload_recv>:
{
   2f4ea:	b570      	push	{r4, r5, r6, lr}
   2f4ec:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2f4ee:	4618      	mov	r0, r3
{
   2f4f0:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2f4f2:	f7ff ff71 	bl	2f3d8 <z_to_nrf_flags>
   2f4f6:	462a      	mov	r2, r5
   2f4f8:	4603      	mov	r3, r0
   2f4fa:	4620      	mov	r0, r4
}
   2f4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2f500:	f7f6 bed8 	b.w	262b4 <nrf_recv>

0002f504 <nrf91_socket_offload_getsockopt>:
{
   2f504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f508:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   2f50a:	2300      	movs	r3, #0
{
   2f50c:	b086      	sub	sp, #24
   2f50e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   2f512:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2f516:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   2f51a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   2f51e:	4607      	mov	r7, r0
   2f520:	460c      	mov	r4, r1
   2f522:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2f524:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2f526:	d002      	beq.n	2f52e <nrf91_socket_offload_getsockopt+0x2a>
   2f528:	dc2b      	bgt.n	2f582 <nrf91_socket_offload_getsockopt+0x7e>
   2f52a:	2901      	cmp	r1, #1
   2f52c:	d13d      	bne.n	2f5aa <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2f52e:	aa02      	add	r2, sp, #8
   2f530:	4631      	mov	r1, r6
   2f532:	4620      	mov	r0, r4
   2f534:	f7f1 fb88 	bl	20c48 <z_to_nrf_optname>
   2f538:	2800      	cmp	r0, #0
   2f53a:	db36      	blt.n	2f5aa <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   2f53c:	2c01      	cmp	r4, #1
   2f53e:	d128      	bne.n	2f592 <nrf91_socket_offload_getsockopt+0x8e>
   2f540:	2e14      	cmp	r6, #20
   2f542:	d126      	bne.n	2f592 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   2f544:	2308      	movs	r3, #8
   2f546:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   2f548:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2f54a:	aa03      	add	r2, sp, #12
   2f54c:	9200      	str	r2, [sp, #0]
   2f54e:	4638      	mov	r0, r7
   2f550:	9a02      	ldr	r2, [sp, #8]
   2f552:	4621      	mov	r1, r4
   2f554:	f7f6 ff2e 	bl	263b4 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2f558:	4607      	mov	r7, r0
   2f55a:	b970      	cbnz	r0, 2f57a <nrf91_socket_offload_getsockopt+0x76>
   2f55c:	b16d      	cbz	r5, 2f57a <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   2f55e:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2f560:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   2f562:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2f566:	d108      	bne.n	2f57a <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   2f568:	2e04      	cmp	r6, #4
   2f56a:	d114      	bne.n	2f596 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   2f56c:	6828      	ldr	r0, [r5, #0]
   2f56e:	f7f1 fa3d 	bl	209ec <bsd_os_errno_set>
				*(int *)optval = errno;
   2f572:	f7ff fd48 	bl	2f006 <__errno>
   2f576:	6803      	ldr	r3, [r0, #0]
   2f578:	602b      	str	r3, [r5, #0]
}
   2f57a:	4638      	mov	r0, r7
   2f57c:	b006      	add	sp, #24
   2f57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2f582:	f240 2302 	movw	r3, #514	; 0x202
   2f586:	4299      	cmp	r1, r3
   2f588:	d0d1      	beq.n	2f52e <nrf91_socket_offload_getsockopt+0x2a>
   2f58a:	f240 2303 	movw	r3, #515	; 0x203
   2f58e:	4299      	cmp	r1, r3
   2f590:	e7cc      	b.n	2f52c <nrf91_socket_offload_getsockopt+0x28>
   2f592:	462b      	mov	r3, r5
   2f594:	e7d9      	b.n	2f54a <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   2f596:	2e14      	cmp	r6, #20
   2f598:	d1ef      	bne.n	2f57a <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   2f59a:	9b04      	ldr	r3, [sp, #16]
   2f59c:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   2f59e:	9b05      	ldr	r3, [sp, #20]
   2f5a0:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   2f5a2:	2308      	movs	r3, #8
   2f5a4:	f8c8 3000 	str.w	r3, [r8]
   2f5a8:	e7e7      	b.n	2f57a <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   2f5aa:	f7ff fd2c 	bl	2f006 <__errno>
   2f5ae:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2f5b0:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2f5b4:	6003      	str	r3, [r0, #0]
	return retval;
   2f5b6:	e7e0      	b.n	2f57a <nrf91_socket_offload_getsockopt+0x76>

0002f5b8 <nrf91_socket_offload_poll>:
{
   2f5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f5ba:	b091      	sub	sp, #68	; 0x44
   2f5bc:	4605      	mov	r5, r0
   2f5be:	460c      	mov	r4, r1
   2f5c0:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   2f5c2:	2100      	movs	r1, #0
   2f5c4:	2240      	movs	r2, #64	; 0x40
   2f5c6:	4668      	mov	r0, sp
   2f5c8:	f000 fc32 	bl	2fe30 <memset>
	for (int i = 0; i < nfds; i++) {
   2f5cc:	466a      	mov	r2, sp
   2f5ce:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   2f5d0:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   2f5d2:	42a1      	cmp	r1, r4
   2f5d4:	db0c      	blt.n	2f5f0 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2f5d6:	4632      	mov	r2, r6
   2f5d8:	4621      	mov	r1, r4
   2f5da:	4668      	mov	r0, sp
   2f5dc:	f7f6 ff0a 	bl	263f4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   2f5e0:	2200      	movs	r2, #0
   2f5e2:	462b      	mov	r3, r5
		fds[i].revents = 0;
   2f5e4:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   2f5e6:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   2f5e8:	42a2      	cmp	r2, r4
   2f5ea:	db1a      	blt.n	2f622 <nrf91_socket_offload_poll+0x6a>
}
   2f5ec:	b011      	add	sp, #68	; 0x44
   2f5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   2f5f0:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   2f5f4:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   2f5f8:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   2f5fa:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   2f5fc:	bf48      	it	mi
   2f5fe:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   2f600:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   2f604:	bf44      	itt	mi
   2f606:	f043 0301 	orrmi.w	r3, r3, #1
   2f60a:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   2f60c:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   2f60e:	bf48      	it	mi
   2f610:	8893      	ldrhmi	r3, [r2, #4]
   2f612:	f102 0208 	add.w	r2, r2, #8
   2f616:	bf44      	itt	mi
   2f618:	f043 0302 	orrmi.w	r3, r3, #2
   2f61c:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   2f620:	e7d7      	b.n	2f5d2 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   2f622:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   2f626:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   2f628:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   2f62a:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   2f62c:	bf48      	it	mi
   2f62e:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   2f630:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   2f632:	bf48      	it	mi
   2f634:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   2f636:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   2f63a:	bf44      	itt	mi
   2f63c:	f045 0504 	orrmi.w	r5, r5, #4
   2f640:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   2f642:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   2f644:	bf48      	it	mi
   2f646:	88dd      	ldrhmi	r5, [r3, #6]
   2f648:	f103 0308 	add.w	r3, r3, #8
   2f64c:	bf44      	itt	mi
   2f64e:	f045 0508 	orrmi.w	r5, r5, #8
   2f652:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   2f656:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   2f658:	bf42      	ittt	mi
   2f65a:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   2f65e:	f045 0520 	orrmi.w	r5, r5, #32
   2f662:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   2f666:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   2f668:	bf42      	ittt	mi
   2f66a:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   2f66e:	f041 0110 	orrmi.w	r1, r1, #16
   2f672:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   2f676:	e7b7      	b.n	2f5e8 <nrf91_socket_offload_poll+0x30>

0002f678 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2f678:	f7f6 be48 	b.w	2630c <nrf_listen>

0002f67c <nrf91_socket_offload_close>:
	return nrf_close(sd);
   2f67c:	f7f6 bdba 	b.w	261f4 <nrf_close>

0002f680 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   2f680:	2903      	cmp	r1, #3
{
   2f682:	b508      	push	{r3, lr}
	switch (cmd) {
   2f684:	d00b      	beq.n	2f69e <nrf91_socket_offload_fcntl+0x1e>
   2f686:	2904      	cmp	r1, #4
   2f688:	d111      	bne.n	2f6ae <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   2f68a:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   2f68c:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   2f690:	d10d      	bne.n	2f6ae <nrf91_socket_offload_fcntl+0x2e>
}
   2f692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2f696:	1392      	asrs	r2, r2, #14
   2f698:	2101      	movs	r1, #1
   2f69a:	f7f6 bead 	b.w	263f8 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   2f69e:	2200      	movs	r2, #0
   2f6a0:	2102      	movs	r1, #2
   2f6a2:	f7f6 fea9 	bl	263f8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   2f6a6:	0380      	lsls	r0, r0, #14
   2f6a8:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   2f6ac:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   2f6ae:	f7ff fcaa 	bl	2f006 <__errno>
   2f6b2:	2316      	movs	r3, #22
   2f6b4:	6003      	str	r3, [r0, #0]
	return retval;
   2f6b6:	f04f 30ff 	mov.w	r0, #4294967295
   2f6ba:	e7f7      	b.n	2f6ac <nrf91_socket_offload_fcntl+0x2c>

0002f6bc <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2f6bc:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2f6be:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2f6c0:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2f6c2:	4603      	mov	r3, r0
{
   2f6c4:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2f6c6:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f6ca:	f101 0210 	add.w	r2, r1, #16
   2f6ce:	f102 0410 	add.w	r4, r2, #16
   2f6d2:	f852 5b04 	ldr.w	r5, [r2], #4
   2f6d6:	42a2      	cmp	r2, r4
   2f6d8:	f843 5b04 	str.w	r5, [r3], #4
   2f6dc:	d1f9      	bne.n	2f6d2 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   2f6de:	6a0b      	ldr	r3, [r1, #32]
   2f6e0:	7503      	strb	r3, [r0, #20]
}
   2f6e2:	bd30      	pop	{r4, r5, pc}

0002f6e4 <nrf91_socket_offload_getaddrinfo>:
{
   2f6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f6e8:	4614      	mov	r4, r2
   2f6ea:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   2f6ec:	2100      	movs	r1, #0
{
   2f6ee:	b093      	sub	sp, #76	; 0x4c
   2f6f0:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2f6f2:	2220      	movs	r2, #32
   2f6f4:	a802      	add	r0, sp, #8
{
   2f6f6:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2f6f8:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2f6fa:	f000 fb99 	bl	2fe30 <memset>
	if (hints != NULL) {
   2f6fe:	b194      	cbz	r4, 2f726 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2f700:	a902      	add	r1, sp, #8
   2f702:	4620      	mov	r0, r4
   2f704:	f7ff febf 	bl	2f486 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2f708:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2f70c:	f000 80bf 	beq.w	2f88e <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   2f710:	306a      	adds	r0, #106	; 0x6a
   2f712:	f000 80bf 	beq.w	2f894 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   2f716:	69e0      	ldr	r0, [r4, #28]
   2f718:	b120      	cbz	r0, 2f724 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2f71a:	ac0a      	add	r4, sp, #40	; 0x28
   2f71c:	4621      	mov	r1, r4
   2f71e:	f7ff feb2 	bl	2f486 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2f722:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2f724:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2f726:	4628      	mov	r0, r5
   2f728:	ab01      	add	r3, sp, #4
   2f72a:	4622      	mov	r2, r4
   2f72c:	4631      	mov	r1, r6
   2f72e:	f7f6 fe5d 	bl	263ec <nrf_getaddrinfo>
	if (retval != 0) {
   2f732:	4605      	mov	r5, r0
   2f734:	b1b0      	cbz	r0, 2f764 <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   2f736:	2823      	cmp	r0, #35	; 0x23
   2f738:	f000 80af 	beq.w	2f89a <nrf91_socket_offload_getaddrinfo+0x1b6>
   2f73c:	dc0a      	bgt.n	2f754 <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   2f73e:	280c      	cmp	r0, #12
   2f740:	bf08      	it	eq
   2f742:	f06f 0509 	mvneq.w	r5, #9
   2f746:	bf18      	it	ne
   2f748:	f06f 050a 	mvnne.w	r5, #10
}
   2f74c:	4628      	mov	r0, r5
   2f74e:	b013      	add	sp, #76	; 0x4c
   2f750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   2f754:	282f      	cmp	r0, #47	; 0x2f
   2f756:	f000 80a3 	beq.w	2f8a0 <nrf91_socket_offload_getaddrinfo+0x1bc>
		return DNS_EAI_SYSTEM;
   2f75a:	2873      	cmp	r0, #115	; 0x73
   2f75c:	bf08      	it	eq
   2f75e:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   2f762:	e7f0      	b.n	2f746 <nrf91_socket_offload_getaddrinfo+0x62>
	struct addrinfo *latest_z_res = NULL;
   2f764:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2f766:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2f768:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2f76a:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2f76c:	b91e      	cbnz	r6, 2f776 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   2f76e:	9801      	ldr	r0, [sp, #4]
   2f770:	f7f6 fe3e 	bl	263f0 <nrf_freeaddrinfo>
	return retval;
   2f774:	e7ea      	b.n	2f74c <nrf91_socket_offload_getaddrinfo+0x68>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   2f776:	2020      	movs	r0, #32
   2f778:	f7fa ff7e 	bl	2a678 <k_malloc>
		if (next_z_res == NULL) {
   2f77c:	4604      	mov	r4, r0
   2f77e:	2800      	cmp	r0, #0
   2f780:	d07a      	beq.n	2f878 <nrf91_socket_offload_getaddrinfo+0x194>
	family = nrf_to_z_family(nrf_in->ai_family);
   2f782:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2f784:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2f786:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2f788:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2f78c:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2f790:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   2f792:	d033      	beq.n	2f7fc <nrf91_socket_offload_getaddrinfo+0x118>
   2f794:	dc09      	bgt.n	2f7aa <nrf91_socket_offload_getaddrinfo+0xc6>
   2f796:	2a01      	cmp	r2, #1
   2f798:	d032      	beq.n	2f800 <nrf91_socket_offload_getaddrinfo+0x11c>
   2f79a:	2a02      	cmp	r2, #2
   2f79c:	d032      	beq.n	2f804 <nrf91_socket_offload_getaddrinfo+0x120>
			k_free(next_z_res);
   2f79e:	4620      	mov	r0, r4
   2f7a0:	f000 fa20 	bl	2fbe4 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2f7a4:	f06f 0508 	mvn.w	r5, #8
   2f7a8:	e068      	b.n	2f87c <nrf91_socket_offload_getaddrinfo+0x198>
	switch (nrf_family) {
   2f7aa:	2a0a      	cmp	r2, #10
   2f7ac:	d02c      	beq.n	2f808 <nrf91_socket_offload_getaddrinfo+0x124>
   2f7ae:	2a66      	cmp	r2, #102	; 0x66
   2f7b0:	d1f5      	bne.n	2f79e <nrf91_socket_offload_getaddrinfo+0xba>
		return AF_LTE;
   2f7b2:	4613      	mov	r3, r2
	z_out->ai_family = family;
   2f7b4:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2f7b6:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   2f7b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   2f7bc:	d045      	beq.n	2f84a <nrf91_socket_offload_getaddrinfo+0x166>
   2f7be:	dc25      	bgt.n	2f80c <nrf91_socket_offload_getaddrinfo+0x128>
   2f7c0:	2b01      	cmp	r3, #1
   2f7c2:	d047      	beq.n	2f854 <nrf91_socket_offload_getaddrinfo+0x170>
   2f7c4:	2b02      	cmp	r3, #2
   2f7c6:	d043      	beq.n	2f850 <nrf91_socket_offload_getaddrinfo+0x16c>
   2f7c8:	bb43      	cbnz	r3, 2f81c <nrf91_socket_offload_getaddrinfo+0x138>
	if (nrf_in->ai_family == NRF_AF_INET) {
   2f7ca:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2f7cc:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2f7ce:	d143      	bne.n	2f858 <nrf91_socket_offload_getaddrinfo+0x174>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2f7d0:	2008      	movs	r0, #8
   2f7d2:	f7fa ff51 	bl	2a678 <k_malloc>
   2f7d6:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   2f7d8:	2800      	cmp	r0, #0
   2f7da:	d04a      	beq.n	2f872 <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2f7dc:	2308      	movs	r3, #8
   2f7de:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2f7e0:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2f7e2:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f7e4:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2f7e6:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   2f7e8:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f7ea:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2f7ec:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2f7ee:	f1b8 0f00 	cmp.w	r8, #0
   2f7f2:	d149      	bne.n	2f888 <nrf91_socket_offload_getaddrinfo+0x1a4>
			*res = next_z_res;
   2f7f4:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2f7f6:	69f6      	ldr	r6, [r6, #28]
   2f7f8:	46a0      	mov	r8, r4
   2f7fa:	e7b7      	b.n	2f76c <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   2f7fc:	2303      	movs	r3, #3
   2f7fe:	e7d9      	b.n	2f7b4 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_LOCAL;
   2f800:	2367      	movs	r3, #103	; 0x67
   2f802:	e7d7      	b.n	2f7b4 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET;
   2f804:	2301      	movs	r3, #1
   2f806:	e7d5      	b.n	2f7b4 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET6;
   2f808:	2302      	movs	r3, #2
   2f80a:	e7d3      	b.n	2f7b4 <nrf91_socket_offload_getaddrinfo+0xd0>
	switch (proto) {
   2f80c:	f240 2101 	movw	r1, #513	; 0x201
   2f810:	428b      	cmp	r3, r1
   2f812:	d0da      	beq.n	2f7ca <nrf91_socket_offload_getaddrinfo+0xe6>
   2f814:	dc0d      	bgt.n	2f832 <nrf91_socket_offload_getaddrinfo+0x14e>
   2f816:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2f81a:	d013      	beq.n	2f844 <nrf91_socket_offload_getaddrinfo+0x160>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2f81c:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2f820:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   2f822:	2300      	movs	r3, #0
   2f824:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   2f826:	4620      	mov	r0, r4
   2f828:	f000 f9dc 	bl	2fbe4 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2f82c:	f06f 0506 	mvn.w	r5, #6
   2f830:	e024      	b.n	2f87c <nrf91_socket_offload_getaddrinfo+0x198>
	switch (proto) {
   2f832:	f240 2102 	movw	r1, #514	; 0x202
   2f836:	428b      	cmp	r3, r1
   2f838:	d0c7      	beq.n	2f7ca <nrf91_socket_offload_getaddrinfo+0xe6>
   2f83a:	f240 2103 	movw	r1, #515	; 0x203
   2f83e:	428b      	cmp	r3, r1
   2f840:	d0c3      	beq.n	2f7ca <nrf91_socket_offload_getaddrinfo+0xe6>
   2f842:	e7eb      	b.n	2f81c <nrf91_socket_offload_getaddrinfo+0x138>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2f844:	f240 1311 	movw	r3, #273	; 0x111
   2f848:	e7bf      	b.n	2f7ca <nrf91_socket_offload_getaddrinfo+0xe6>
   2f84a:	f44f 7381 	mov.w	r3, #258	; 0x102
   2f84e:	e7bc      	b.n	2f7ca <nrf91_socket_offload_getaddrinfo+0xe6>
   2f850:	2311      	movs	r3, #17
   2f852:	e7ba      	b.n	2f7ca <nrf91_socket_offload_getaddrinfo+0xe6>
   2f854:	2306      	movs	r3, #6
   2f856:	e7b8      	b.n	2f7ca <nrf91_socket_offload_getaddrinfo+0xe6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2f858:	2a0a      	cmp	r2, #10
   2f85a:	d1e4      	bne.n	2f826 <nrf91_socket_offload_getaddrinfo+0x142>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2f85c:	2018      	movs	r0, #24
   2f85e:	f7fa ff0b 	bl	2a678 <k_malloc>
   2f862:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   2f864:	b128      	cbz	r0, 2f872 <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2f866:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2f868:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2f86a:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   2f86c:	f7ff ff26 	bl	2f6bc <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2f870:	e7bd      	b.n	2f7ee <nrf91_socket_offload_getaddrinfo+0x10a>
			k_free(next_z_res);
   2f872:	4620      	mov	r0, r4
   2f874:	f000 f9b6 	bl	2fbe4 <k_free>
			retval = DNS_EAI_MEMORY;
   2f878:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   2f87c:	6838      	ldr	r0, [r7, #0]
   2f87e:	f7ff fdf5 	bl	2f46c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2f882:	2300      	movs	r3, #0
   2f884:	603b      	str	r3, [r7, #0]
   2f886:	e772      	b.n	2f76e <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   2f888:	f8c8 401c 	str.w	r4, [r8, #28]
   2f88c:	e7b3      	b.n	2f7f6 <nrf91_socket_offload_getaddrinfo+0x112>
			return DNS_EAI_SOCKTYPE;
   2f88e:	f06f 0506 	mvn.w	r5, #6
   2f892:	e75b      	b.n	2f74c <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   2f894:	f06f 0508 	mvn.w	r5, #8
   2f898:	e758      	b.n	2f74c <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   2f89a:	f06f 0502 	mvn.w	r5, #2
   2f89e:	e755      	b.n	2f74c <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   2f8a0:	f06f 0501 	mvn.w	r5, #1
   2f8a4:	e752      	b.n	2f74c <nrf91_socket_offload_getaddrinfo+0x68>

0002f8a6 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2f8a6:	2224      	movs	r2, #36	; 0x24
{
   2f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2f8aa:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2f8ac:	8842      	ldrh	r2, [r0, #2]
{
   2f8ae:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2f8b0:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2f8b2:	220a      	movs	r2, #10
{
   2f8b4:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   2f8b6:	604a      	str	r2, [r1, #4]
   2f8b8:	f101 0610 	add.w	r6, r1, #16
   2f8bc:	1d02      	adds	r2, r0, #4
   2f8be:	f100 0714 	add.w	r7, r0, #20
   2f8c2:	4635      	mov	r5, r6
   2f8c4:	6810      	ldr	r0, [r2, #0]
   2f8c6:	6851      	ldr	r1, [r2, #4]
   2f8c8:	3208      	adds	r2, #8
   2f8ca:	c503      	stmia	r5!, {r0, r1}
   2f8cc:	42ba      	cmp	r2, r7
   2f8ce:	462e      	mov	r6, r5
   2f8d0:	d1f7      	bne.n	2f8c2 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2f8d2:	7d22      	ldrb	r2, [r4, #20]
   2f8d4:	621a      	str	r2, [r3, #32]
}
   2f8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f8d8 <nrf91_socket_offload_sendto>:
{
   2f8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f8dc:	b08d      	sub	sp, #52	; 0x34
   2f8de:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2f8e0:	4605      	mov	r5, r0
   2f8e2:	460e      	mov	r6, r1
   2f8e4:	4617      	mov	r7, r2
   2f8e6:	4698      	mov	r8, r3
	if (to == NULL) {
   2f8e8:	b96c      	cbnz	r4, 2f906 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2f8ea:	4618      	mov	r0, r3
   2f8ec:	f7ff fd74 	bl	2f3d8 <z_to_nrf_flags>
   2f8f0:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2f8f4:	4603      	mov	r3, r0
   2f8f6:	463a      	mov	r2, r7
   2f8f8:	4631      	mov	r1, r6
   2f8fa:	4628      	mov	r0, r5
   2f8fc:	f7f6 fc88 	bl	26210 <nrf_sendto>
}
   2f900:	b00d      	add	sp, #52	; 0x34
   2f902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   2f906:	8823      	ldrh	r3, [r4, #0]
   2f908:	2b01      	cmp	r3, #1
   2f90a:	d110      	bne.n	2f92e <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   2f90c:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f90e:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2f910:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   2f914:	2302      	movs	r3, #2
   2f916:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f918:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2f91a:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f91c:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f91e:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2f922:	f7ff fd59 	bl	2f3d8 <z_to_nrf_flags>
   2f926:	ab03      	add	r3, sp, #12
   2f928:	9101      	str	r1, [sp, #4]
   2f92a:	9300      	str	r3, [sp, #0]
   2f92c:	e7e2      	b.n	2f8f4 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   2f92e:	2b02      	cmp	r3, #2
   2f930:	d10c      	bne.n	2f94c <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   2f932:	f10d 090c 	add.w	r9, sp, #12
   2f936:	4649      	mov	r1, r9
   2f938:	4620      	mov	r0, r4
   2f93a:	f7ff ffb4 	bl	2f8a6 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2f93e:	4640      	mov	r0, r8
   2f940:	f7ff fd4a 	bl	2f3d8 <z_to_nrf_flags>
   2f944:	2324      	movs	r3, #36	; 0x24
   2f946:	e9cd 9300 	strd	r9, r3, [sp]
   2f94a:	e7d3      	b.n	2f8f4 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   2f94c:	f7ff fb5b 	bl	2f006 <__errno>
   2f950:	2386      	movs	r3, #134	; 0x86
   2f952:	6003      	str	r3, [r0, #0]
	return retval;
   2f954:	f04f 30ff 	mov.w	r0, #4294967295
   2f958:	e7d2      	b.n	2f900 <nrf91_socket_offload_sendto+0x28>

0002f95a <nrf91_socket_offload_recvfrom>:
{
   2f95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f95e:	4605      	mov	r5, r0
   2f960:	b08c      	sub	sp, #48	; 0x30
   2f962:	4618      	mov	r0, r3
   2f964:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   2f968:	4690      	mov	r8, r2
	if (from == NULL) {
   2f96a:	f7ff fd35 	bl	2f3d8 <z_to_nrf_flags>
   2f96e:	4603      	mov	r3, r0
   2f970:	b954      	cbnz	r4, 2f988 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2f972:	4628      	mov	r0, r5
   2f974:	e9cd 4400 	strd	r4, r4, [sp]
   2f978:	4642      	mov	r2, r8
   2f97a:	f7f6 fc7f 	bl	2627c <nrf_recvfrom>
   2f97e:	4605      	mov	r5, r0
}
   2f980:	4628      	mov	r0, r5
   2f982:	b00c      	add	sp, #48	; 0x30
   2f984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2f988:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2f98a:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2f98c:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2f98e:	aa02      	add	r2, sp, #8
   2f990:	9201      	str	r2, [sp, #4]
   2f992:	4628      	mov	r0, r5
   2f994:	9700      	str	r7, [sp, #0]
   2f996:	4642      	mov	r2, r8
   2f998:	f7f6 fc70 	bl	2627c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2f99c:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2f99e:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   2f9a0:	2b02      	cmp	r3, #2
   2f9a2:	d109      	bne.n	2f9b8 <nrf91_socket_offload_recvfrom+0x5e>
	ptr->sin_port = nrf_in->sin_port;
   2f9a4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2f9a8:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2f9aa:	2301      	movs	r3, #1
   2f9ac:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f9ae:	9b06      	ldr	r3, [sp, #24]
   2f9b0:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2f9b2:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2f9b4:	6033      	str	r3, [r6, #0]
	return retval;
   2f9b6:	e7e3      	b.n	2f980 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2f9b8:	2b0a      	cmp	r3, #10
   2f9ba:	d1e1      	bne.n	2f980 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2f9bc:	4639      	mov	r1, r7
   2f9be:	4620      	mov	r0, r4
   2f9c0:	f7ff fe7c 	bl	2f6bc <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2f9c4:	2318      	movs	r3, #24
   2f9c6:	e7f5      	b.n	2f9b4 <nrf91_socket_offload_recvfrom+0x5a>

0002f9c8 <nrf91_socket_offload_connect>:
{
   2f9c8:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   2f9ca:	880c      	ldrh	r4, [r1, #0]
{
   2f9cc:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   2f9ce:	2c01      	cmp	r4, #1
{
   2f9d0:	4605      	mov	r5, r0
   2f9d2:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2f9d4:	d10e      	bne.n	2f9f4 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   2f9d6:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f9d8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2f9da:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2f9de:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f9e0:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2f9e2:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f9e4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f9e8:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   2f9ea:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2f9ec:	f7f6 fc7c 	bl	262e8 <nrf_connect>
}
   2f9f0:	b00b      	add	sp, #44	; 0x2c
   2f9f2:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   2f9f4:	2c02      	cmp	r4, #2
   2f9f6:	d107      	bne.n	2fa08 <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2f9f8:	a901      	add	r1, sp, #4
   2f9fa:	4618      	mov	r0, r3
   2f9fc:	f7ff ff53 	bl	2f8a6 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2fa00:	2224      	movs	r2, #36	; 0x24
   2fa02:	a901      	add	r1, sp, #4
   2fa04:	4628      	mov	r0, r5
   2fa06:	e7f1      	b.n	2f9ec <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2fa08:	f7f6 fc6e 	bl	262e8 <nrf_connect>
		if (retval < 0) {
   2fa0c:	2800      	cmp	r0, #0
   2fa0e:	daef      	bge.n	2f9f0 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   2fa10:	f7ff faf9 	bl	2f006 <__errno>
   2fa14:	2386      	movs	r3, #134	; 0x86
   2fa16:	6003      	str	r3, [r0, #0]
   2fa18:	f04f 30ff 	mov.w	r0, #4294967295
   2fa1c:	e7e8      	b.n	2f9f0 <nrf91_socket_offload_connect+0x28>

0002fa1e <nrf91_socket_offload_accept>:
{
   2fa1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa20:	4616      	mov	r6, r2
   2fa22:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   2fa24:	460c      	mov	r4, r1
   2fa26:	b1f1      	cbz	r1, 2fa66 <nrf91_socket_offload_accept+0x48>
   2fa28:	b302      	cbz	r2, 2fa6c <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2fa2a:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   2fa2c:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2fa2e:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   2fa30:	bf0c      	ite	eq
   2fa32:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2fa34:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   2fa36:	ad01      	add	r5, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2fa38:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   2fa3a:	4629      	mov	r1, r5
   2fa3c:	f7f6 fc76 	bl	2632c <nrf_accept>
	if (retval < 0) {
   2fa40:	1e07      	subs	r7, r0, #0
   2fa42:	db22      	blt.n	2fa8a <nrf91_socket_offload_accept+0x6c>
	if ((addr != NULL) && (addrlen != NULL)) {
   2fa44:	b164      	cbz	r4, 2fa60 <nrf91_socket_offload_accept+0x42>
   2fa46:	b15e      	cbz	r6, 2fa60 <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   2fa48:	686b      	ldr	r3, [r5, #4]
   2fa4a:	2b02      	cmp	r3, #2
   2fa4c:	d110      	bne.n	2fa70 <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   2fa4e:	2308      	movs	r3, #8
   2fa50:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   2fa52:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2fa56:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2fa58:	2301      	movs	r3, #1
   2fa5a:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2fa5c:	9b04      	ldr	r3, [sp, #16]
   2fa5e:	6063      	str	r3, [r4, #4]
}
   2fa60:	4638      	mov	r0, r7
   2fa62:	b00b      	add	sp, #44	; 0x2c
   2fa64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2fa66:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2fa68:	460d      	mov	r5, r1
   2fa6a:	e7e6      	b.n	2fa3a <nrf91_socket_offload_accept+0x1c>
   2fa6c:	4615      	mov	r5, r2
   2fa6e:	e7e4      	b.n	2fa3a <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   2fa70:	2b0a      	cmp	r3, #10
   2fa72:	d106      	bne.n	2fa82 <nrf91_socket_offload_accept+0x64>
			*addrlen = sizeof(struct sockaddr_in6);
   2fa74:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   2fa76:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   2fa78:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   2fa7a:	4620      	mov	r0, r4
   2fa7c:	f7ff fe1e 	bl	2f6bc <nrf_to_z_ipv6>
   2fa80:	e7ee      	b.n	2fa60 <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   2fa82:	f7ff fac0 	bl	2f006 <__errno>
   2fa86:	2386      	movs	r3, #134	; 0x86
   2fa88:	6003      	str	r3, [r0, #0]
		return -1;
   2fa8a:	f04f 37ff 	mov.w	r7, #4294967295
   2fa8e:	e7e7      	b.n	2fa60 <nrf91_socket_offload_accept+0x42>

0002fa90 <nrf91_socket_offload_socket>:
{
   2fa90:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   2fa92:	b280      	uxth	r0, r0
   2fa94:	f7ff fcaa 	bl	2f3ec <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2fa98:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   2fa9c:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   2fa9e:	d106      	bne.n	2faae <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   2faa0:	f7ff fab1 	bl	2f006 <__errno>
   2faa4:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2faa6:	6003      	str	r3, [r0, #0]
}
   2faa8:	f04f 30ff 	mov.w	r0, #4294967295
   2faac:	bd10      	pop	{r4, pc}
	switch (socktype) {
   2faae:	2903      	cmp	r1, #3
   2fab0:	d003      	beq.n	2faba <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   2fab2:	2904      	cmp	r1, #4
   2fab4:	bf08      	it	eq
   2fab6:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   2faba:	4610      	mov	r0, r2
   2fabc:	f7ff fcac 	bl	2f418 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   2fac0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   2fac4:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2fac6:	d103      	bne.n	2fad0 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   2fac8:	f7ff fa9d 	bl	2f006 <__errno>
   2facc:	237b      	movs	r3, #123	; 0x7b
   2face:	e7ea      	b.n	2faa6 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   2fad0:	4620      	mov	r0, r4
}
   2fad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   2fad6:	f7f6 bb7b 	b.w	261d0 <nrf_socket>

0002fada <nrf91_socket_offload_setsockopt>:
{
   2fada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   2fade:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   2fae2:	b086      	sub	sp, #24
   2fae4:	4680      	mov	r8, r0
   2fae6:	460c      	mov	r4, r1
   2fae8:	4617      	mov	r7, r2
   2faea:	461d      	mov	r5, r3
   2faec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   2faee:	d002      	beq.n	2faf6 <nrf91_socket_offload_setsockopt+0x1c>
   2faf0:	dc1c      	bgt.n	2fb2c <nrf91_socket_offload_setsockopt+0x52>
   2faf2:	2901      	cmp	r1, #1
   2faf4:	d122      	bne.n	2fb3c <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2faf6:	aa03      	add	r2, sp, #12
   2faf8:	4639      	mov	r1, r7
   2fafa:	4620      	mov	r0, r4
   2fafc:	f7f1 f8a4 	bl	20c48 <z_to_nrf_optname>
   2fb00:	2800      	cmp	r0, #0
   2fb02:	db1b      	blt.n	2fb3c <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   2fb04:	2c01      	cmp	r4, #1
   2fb06:	d107      	bne.n	2fb18 <nrf91_socket_offload_setsockopt+0x3e>
   2fb08:	2f14      	cmp	r7, #20
   2fb0a:	d105      	bne.n	2fb18 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   2fb0c:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2fb0e:	682b      	ldr	r3, [r5, #0]
   2fb10:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2fb12:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   2fb14:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2fb16:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2fb18:	9600      	str	r6, [sp, #0]
   2fb1a:	462b      	mov	r3, r5
   2fb1c:	9a03      	ldr	r2, [sp, #12]
   2fb1e:	4621      	mov	r1, r4
   2fb20:	4640      	mov	r0, r8
   2fb22:	f7f6 fc2b 	bl	2637c <nrf_setsockopt>
}
   2fb26:	b006      	add	sp, #24
   2fb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2fb2c:	f240 2302 	movw	r3, #514	; 0x202
   2fb30:	4299      	cmp	r1, r3
   2fb32:	d0e0      	beq.n	2faf6 <nrf91_socket_offload_setsockopt+0x1c>
   2fb34:	f240 2303 	movw	r3, #515	; 0x203
   2fb38:	4299      	cmp	r1, r3
   2fb3a:	e7db      	b.n	2faf4 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   2fb3c:	f7ff fa63 	bl	2f006 <__errno>
   2fb40:	236d      	movs	r3, #109	; 0x6d
   2fb42:	6003      	str	r3, [r0, #0]
   2fb44:	f04f 30ff 	mov.w	r0, #4294967295
   2fb48:	e7ed      	b.n	2fb26 <nrf91_socket_offload_setsockopt+0x4c>

0002fb4a <nrf91_socket_offload_bind>:
{
   2fb4a:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   2fb4c:	880a      	ldrh	r2, [r1, #0]
{
   2fb4e:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2fb50:	2a01      	cmp	r2, #1
{
   2fb52:	4604      	mov	r4, r0
   2fb54:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2fb56:	d10e      	bne.n	2fb76 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   2fb58:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2fb5a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2fb5c:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2fb60:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2fb62:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2fb64:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2fb66:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2fb6a:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   2fb6c:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2fb6e:	f7f6 fbf3 	bl	26358 <nrf_bind>
}
   2fb72:	b00a      	add	sp, #40	; 0x28
   2fb74:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2fb76:	2a02      	cmp	r2, #2
   2fb78:	d107      	bne.n	2fb8a <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2fb7a:	a901      	add	r1, sp, #4
   2fb7c:	4618      	mov	r0, r3
   2fb7e:	f7ff fe92 	bl	2f8a6 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2fb82:	2224      	movs	r2, #36	; 0x24
   2fb84:	a901      	add	r1, sp, #4
   2fb86:	4620      	mov	r0, r4
   2fb88:	e7f1      	b.n	2fb6e <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2fb8a:	f7ff fa3c 	bl	2f006 <__errno>
   2fb8e:	2386      	movs	r3, #134	; 0x86
   2fb90:	6003      	str	r3, [r0, #0]
   2fb92:	f04f 30ff 	mov.w	r0, #4294967295
   2fb96:	e7ec      	b.n	2fb72 <nrf91_socket_offload_bind+0x28>

0002fb98 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   2fb98:	6843      	ldr	r3, [r0, #4]
   2fb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2fb9c:	b103      	cbz	r3, 2fba0 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2fb9e:	4718      	bx	r3
}
   2fba0:	4770      	bx	lr

0002fba2 <response_handler>:
	write_uart_string(response);
   2fba2:	4608      	mov	r0, r1
   2fba4:	f7f1 bc66 	b.w	21474 <write_uart_string>

0002fba8 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2fba8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2fbac:	4770      	bx	lr

0002fbae <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2fbae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2fbb2:	4770      	bx	lr

0002fbb4 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2fbb4:	f44f 7080 	mov.w	r0, #256	; 0x100
   2fbb8:	4770      	bx	lr

0002fbba <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2fbba:	f7ff b9c2 	b.w	2ef42 <z_clock_idle_exit>

0002fbbe <k_mem_pool_malloc>:
{
   2fbbe:	b507      	push	{r0, r1, r2, lr}
   2fbc0:	2204      	movs	r2, #4
   2fbc2:	188a      	adds	r2, r1, r2
   2fbc4:	d204      	bcs.n	2fbd0 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2fbc6:	2300      	movs	r3, #0
   2fbc8:	4669      	mov	r1, sp
   2fbca:	f7fa fc8f 	bl	2a4ec <k_mem_pool_alloc>
   2fbce:	b118      	cbz	r0, 2fbd8 <k_mem_pool_malloc+0x1a>
		return NULL;
   2fbd0:	2000      	movs	r0, #0
}
   2fbd2:	b003      	add	sp, #12
   2fbd4:	f85d fb04 	ldr.w	pc, [sp], #4
   2fbd8:	e9dd 3200 	ldrd	r3, r2, [sp]
   2fbdc:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2fbde:	9800      	ldr	r0, [sp, #0]
   2fbe0:	3004      	adds	r0, #4
   2fbe2:	e7f6      	b.n	2fbd2 <k_mem_pool_malloc+0x14>

0002fbe4 <k_free>:
	if (ptr != NULL) {
   2fbe4:	b110      	cbz	r0, 2fbec <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2fbe6:	3804      	subs	r0, #4
   2fbe8:	f7fa bce8 	b.w	2a5bc <k_mem_pool_free_id>
}
   2fbec:	4770      	bx	lr

0002fbee <z_queue_node_peek>:
{
   2fbee:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2fbf0:	4604      	mov	r4, r0
   2fbf2:	b130      	cbz	r0, 2fc02 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2fbf4:	6802      	ldr	r2, [r0, #0]
   2fbf6:	0793      	lsls	r3, r2, #30
   2fbf8:	d003      	beq.n	2fc02 <z_queue_node_peek+0x14>
		ret = anode->data;
   2fbfa:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2fbfc:	b109      	cbz	r1, 2fc02 <z_queue_node_peek+0x14>
			k_free(anode);
   2fbfe:	f7ff fff1 	bl	2fbe4 <k_free>
}
   2fc02:	4620      	mov	r0, r4
   2fc04:	bd10      	pop	{r4, pc}

0002fc06 <z_impl_k_queue_init>:
	list->head = NULL;
   2fc06:	2300      	movs	r3, #0
	list->tail = NULL;
   2fc08:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2fc0c:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2fc0e:	f100 030c 	add.w	r3, r0, #12
	list->tail = (sys_dnode_t *)list;
   2fc12:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   2fc16:	4770      	bx	lr

0002fc18 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2fc18:	460a      	mov	r2, r1
   2fc1a:	2300      	movs	r3, #0
   2fc1c:	6841      	ldr	r1, [r0, #4]
   2fc1e:	f7fb b82f 	b.w	2ac80 <queue_insert>

0002fc22 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2fc22:	7b43      	ldrb	r3, [r0, #13]
   2fc24:	06db      	lsls	r3, r3, #27
   2fc26:	bf03      	ittte	eq
   2fc28:	6980      	ldreq	r0, [r0, #24]
   2fc2a:	fab0 f080 	clzeq	r0, r0
   2fc2e:	0940      	lsreq	r0, r0, #5
   2fc30:	2000      	movne	r0, #0
}
   2fc32:	4770      	bx	lr

0002fc34 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2fc34:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2fc38:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2fc3c:	4298      	cmp	r0, r3
   2fc3e:	bfac      	ite	ge
   2fc40:	2000      	movge	r0, #0
   2fc42:	2001      	movlt	r0, #1
   2fc44:	4770      	bx	lr

0002fc46 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2fc46:	4603      	mov	r3, r0
   2fc48:	b920      	cbnz	r0, 2fc54 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2fc4a:	f3ef 8205 	mrs	r2, IPSR
   2fc4e:	b90a      	cbnz	r2, 2fc54 <z_reschedule_irqlock+0xe>
   2fc50:	f7ef b968 	b.w	1ef24 <arch_swap>
   2fc54:	f383 8811 	msr	BASEPRI, r3
   2fc58:	f3bf 8f6f 	isb	sy
}
   2fc5c:	4770      	bx	lr

0002fc5e <z_reschedule_unlocked>:
	__asm__ volatile(
   2fc5e:	f04f 0320 	mov.w	r3, #32
   2fc62:	f3ef 8011 	mrs	r0, BASEPRI
   2fc66:	f383 8811 	msr	BASEPRI, r3
   2fc6a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2fc6e:	f7ff bfea 	b.w	2fc46 <z_reschedule_irqlock>

0002fc72 <z_priq_dumb_best>:
	return list->head == list;
   2fc72:	6803      	ldr	r3, [r0, #0]
}
   2fc74:	4298      	cmp	r0, r3
   2fc76:	bf14      	ite	ne
   2fc78:	4618      	movne	r0, r3
   2fc7a:	2000      	moveq	r0, #0
   2fc7c:	4770      	bx	lr

0002fc7e <z_unpend_all>:
{
   2fc7e:	b570      	push	{r4, r5, r6, lr}
   2fc80:	4606      	mov	r6, r0
	int need_sched = 0;
   2fc82:	2500      	movs	r5, #0
   2fc84:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2fc86:	42a6      	cmp	r6, r4
   2fc88:	d000      	beq.n	2fc8c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2fc8a:	b90c      	cbnz	r4, 2fc90 <z_unpend_all+0x12>
}
   2fc8c:	4628      	mov	r0, r5
   2fc8e:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   2fc90:	4620      	mov	r0, r4
   2fc92:	f7fb facd 	bl	2b230 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   2fc96:	4620      	mov	r0, r4
   2fc98:	f7ff ffc3 	bl	2fc22 <z_is_thread_ready>
		need_sched = 1;
   2fc9c:	2501      	movs	r5, #1
   2fc9e:	2800      	cmp	r0, #0
   2fca0:	d0f0      	beq.n	2fc84 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   2fca2:	4620      	mov	r0, r4
   2fca4:	f7fb fbcc 	bl	2b440 <z_add_thread_to_ready_q>
   2fca8:	e7ec      	b.n	2fc84 <z_unpend_all+0x6>

0002fcaa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2fcaa:	b15a      	cbz	r2, 2fcc4 <z_impl_k_sem_init+0x1a>
   2fcac:	428a      	cmp	r2, r1
   2fcae:	d309      	bcc.n	2fcc4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2fcb0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2fcb4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2fcb8:	e9c0 0000 	strd	r0, r0, [r0]
   2fcbc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2fcc0:	2000      	movs	r0, #0
   2fcc2:	4770      	bx	lr
		return -EINVAL;
   2fcc4:	f06f 0015 	mvn.w	r0, #21
}
   2fcc8:	4770      	bx	lr

0002fcca <k_is_in_isr>:
   2fcca:	f3ef 8005 	mrs	r0, IPSR
}
   2fcce:	3000      	adds	r0, #0
   2fcd0:	bf18      	it	ne
   2fcd2:	2001      	movne	r0, #1
   2fcd4:	4770      	bx	lr

0002fcd6 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2fcd6:	f7ee b991 	b.w	1dffc <arch_busy_wait>

0002fcda <z_impl_k_thread_name_set>:
}
   2fcda:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2fcde:	4770      	bx	lr

0002fce0 <k_thread_name_get>:
}
   2fce0:	2000      	movs	r0, #0
   2fce2:	4770      	bx	lr

0002fce4 <z_new_thread_init>:
{
   2fce4:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   2fce6:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   2fce8:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   2fcea:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   2fcec:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   2fcee:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   2fcf0:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   2fcf2:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   2fcf4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   2fcf8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   2fcfc:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   2fd00:	bd10      	pop	{r4, pc}

0002fd02 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   2fd02:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   2fd04:	f7fc ff7c 	bl	2cc00 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2fd08:	bd08      	pop	{r3, pc}

0002fd0a <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   2fd0a:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   2fd0c:	f7fc ff78 	bl	2cc00 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   2fd10:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2fd14:	fba0 2304 	umull	r2, r3, r0, r4
   2fd18:	fb04 3301 	mla	r3, r4, r1, r3
   2fd1c:	0bd0      	lsrs	r0, r2, #15
}
   2fd1e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2fd22:	0bd9      	lsrs	r1, r3, #15
   2fd24:	bd10      	pop	{r4, pc}

0002fd26 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   2fd26:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2fd28:	6884      	ldr	r4, [r0, #8]
{
   2fd2a:	4605      	mov	r5, r0
   2fd2c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   2fd2e:	b19c      	cbz	r4, 2fd58 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2fd30:	68a3      	ldr	r3, [r4, #8]
   2fd32:	b95b      	cbnz	r3, 2fd4c <signal_poll_event+0x26>
	int retcode = 0;
   2fd34:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   2fd36:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2fd38:	2300      	movs	r3, #0
   2fd3a:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2fd3c:	68eb      	ldr	r3, [r5, #12]
   2fd3e:	f3c3 3204 	ubfx	r2, r3, #12, #5
   2fd42:	4316      	orrs	r6, r2
   2fd44:	f366 3310 	bfi	r3, r6, #12, #5
   2fd48:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   2fd4a:	e004      	b.n	2fd56 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2fd4c:	4798      	blx	r3
		poller->is_polling = false;
   2fd4e:	2300      	movs	r3, #0
		if (retcode < 0) {
   2fd50:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2fd52:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2fd54:	daf0      	bge.n	2fd38 <signal_poll_event+0x12>
}
   2fd56:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2fd58:	4620      	mov	r0, r4
   2fd5a:	e7ed      	b.n	2fd38 <signal_poll_event+0x12>

0002fd5c <add_event>:
{
   2fd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fd5e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2fd60:	e9d0 2300 	ldrd	r2, r3, [r0]
   2fd64:	4290      	cmp	r0, r2
   2fd66:	4604      	mov	r4, r0
   2fd68:	460d      	mov	r5, r1
   2fd6a:	d106      	bne.n	2fd7a <add_event+0x1e>
	node->prev = list->tail;
   2fd6c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2fd6e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   2fd70:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2fd72:	6863      	ldr	r3, [r4, #4]
   2fd74:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2fd76:	6065      	str	r5, [r4, #4]
}
   2fd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2fd7a:	2b00      	cmp	r3, #0
   2fd7c:	d0f6      	beq.n	2fd6c <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2fd7e:	689b      	ldr	r3, [r3, #8]
   2fd80:	6879      	ldr	r1, [r7, #4]
   2fd82:	6858      	ldr	r0, [r3, #4]
   2fd84:	f7ff ff56 	bl	2fc34 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2fd88:	2800      	cmp	r0, #0
   2fd8a:	d1ef      	bne.n	2fd6c <add_event+0x10>
	return list->head == list;
   2fd8c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2fd8e:	42b4      	cmp	r4, r6
   2fd90:	d0ec      	beq.n	2fd6c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2fd92:	2e00      	cmp	r6, #0
   2fd94:	d0ea      	beq.n	2fd6c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2fd96:	68b3      	ldr	r3, [r6, #8]
   2fd98:	6878      	ldr	r0, [r7, #4]
   2fd9a:	6859      	ldr	r1, [r3, #4]
   2fd9c:	f7ff ff4a 	bl	2fc34 <z_is_t1_higher_prio_than_t2>
   2fda0:	b128      	cbz	r0, 2fdae <add_event+0x52>
	node->prev = successor->prev;
   2fda2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2fda4:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2fda8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2fdaa:	6075      	str	r5, [r6, #4]
			return;
   2fdac:	e7e4      	b.n	2fd78 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2fdae:	6863      	ldr	r3, [r4, #4]
   2fdb0:	429e      	cmp	r6, r3
   2fdb2:	d0db      	beq.n	2fd6c <add_event+0x10>
   2fdb4:	6836      	ldr	r6, [r6, #0]
   2fdb6:	e7ec      	b.n	2fd92 <add_event+0x36>

0002fdb8 <z_handle_obj_poll_events>:
	return list->head == list;
   2fdb8:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2fdba:	4298      	cmp	r0, r3
   2fdbc:	d009      	beq.n	2fdd2 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2fdbe:	e9d3 2000 	ldrd	r2, r0, [r3]
   2fdc2:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   2fdc4:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   2fdc6:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   2fdc8:	4618      	mov	r0, r3
	node->prev = NULL;
   2fdca:	e9c3 2200 	strd	r2, r2, [r3]
   2fdce:	f7ff bfaa 	b.w	2fd26 <signal_poll_event>
	}
}
   2fdd2:	4770      	bx	lr

0002fdd4 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   2fdd4:	4770      	bx	lr

0002fdd6 <atoi>:
   2fdd6:	220a      	movs	r2, #10
   2fdd8:	2100      	movs	r1, #0
   2fdda:	f7fd bfe9 	b.w	2ddb0 <strtol>

0002fdde <memchr>:
   2fdde:	b2c9      	uxtb	r1, r1
   2fde0:	4402      	add	r2, r0
   2fde2:	b510      	push	{r4, lr}
   2fde4:	4290      	cmp	r0, r2
   2fde6:	4603      	mov	r3, r0
   2fde8:	d101      	bne.n	2fdee <memchr+0x10>
   2fdea:	2300      	movs	r3, #0
   2fdec:	e003      	b.n	2fdf6 <memchr+0x18>
   2fdee:	781c      	ldrb	r4, [r3, #0]
   2fdf0:	3001      	adds	r0, #1
   2fdf2:	428c      	cmp	r4, r1
   2fdf4:	d1f6      	bne.n	2fde4 <memchr+0x6>
   2fdf6:	4618      	mov	r0, r3
   2fdf8:	bd10      	pop	{r4, pc}

0002fdfa <memcmp>:
   2fdfa:	b530      	push	{r4, r5, lr}
   2fdfc:	3901      	subs	r1, #1
   2fdfe:	2400      	movs	r4, #0
   2fe00:	42a2      	cmp	r2, r4
   2fe02:	d101      	bne.n	2fe08 <memcmp+0xe>
   2fe04:	2000      	movs	r0, #0
   2fe06:	e005      	b.n	2fe14 <memcmp+0x1a>
   2fe08:	5d03      	ldrb	r3, [r0, r4]
   2fe0a:	3401      	adds	r4, #1
   2fe0c:	5d0d      	ldrb	r5, [r1, r4]
   2fe0e:	42ab      	cmp	r3, r5
   2fe10:	d0f6      	beq.n	2fe00 <memcmp+0x6>
   2fe12:	1b58      	subs	r0, r3, r5
   2fe14:	bd30      	pop	{r4, r5, pc}

0002fe16 <memcpy>:
   2fe16:	440a      	add	r2, r1
   2fe18:	1e43      	subs	r3, r0, #1
   2fe1a:	4291      	cmp	r1, r2
   2fe1c:	d100      	bne.n	2fe20 <memcpy+0xa>
   2fe1e:	4770      	bx	lr
   2fe20:	b510      	push	{r4, lr}
   2fe22:	f811 4b01 	ldrb.w	r4, [r1], #1
   2fe26:	4291      	cmp	r1, r2
   2fe28:	f803 4f01 	strb.w	r4, [r3, #1]!
   2fe2c:	d1f9      	bne.n	2fe22 <memcpy+0xc>
   2fe2e:	bd10      	pop	{r4, pc}

0002fe30 <memset>:
   2fe30:	4402      	add	r2, r0
   2fe32:	4603      	mov	r3, r0
   2fe34:	4293      	cmp	r3, r2
   2fe36:	d100      	bne.n	2fe3a <memset+0xa>
   2fe38:	4770      	bx	lr
   2fe3a:	f803 1b01 	strb.w	r1, [r3], #1
   2fe3e:	e7f9      	b.n	2fe34 <memset+0x4>

0002fe40 <__sfputc_r>:
   2fe40:	6893      	ldr	r3, [r2, #8]
   2fe42:	3b01      	subs	r3, #1
   2fe44:	2b00      	cmp	r3, #0
   2fe46:	6093      	str	r3, [r2, #8]
   2fe48:	b410      	push	{r4}
   2fe4a:	da08      	bge.n	2fe5e <__sfputc_r+0x1e>
   2fe4c:	6994      	ldr	r4, [r2, #24]
   2fe4e:	42a3      	cmp	r3, r4
   2fe50:	db01      	blt.n	2fe56 <__sfputc_r+0x16>
   2fe52:	290a      	cmp	r1, #10
   2fe54:	d103      	bne.n	2fe5e <__sfputc_r+0x1e>
   2fe56:	f85d 4b04 	ldr.w	r4, [sp], #4
   2fe5a:	f7fd bfe1 	b.w	2de20 <__swbuf_r>
   2fe5e:	6813      	ldr	r3, [r2, #0]
   2fe60:	1c58      	adds	r0, r3, #1
   2fe62:	6010      	str	r0, [r2, #0]
   2fe64:	4608      	mov	r0, r1
   2fe66:	7019      	strb	r1, [r3, #0]
   2fe68:	f85d 4b04 	ldr.w	r4, [sp], #4
   2fe6c:	4770      	bx	lr

0002fe6e <__sfputs_r>:
   2fe6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fe70:	4606      	mov	r6, r0
   2fe72:	460f      	mov	r7, r1
   2fe74:	4614      	mov	r4, r2
   2fe76:	18d5      	adds	r5, r2, r3
   2fe78:	42ac      	cmp	r4, r5
   2fe7a:	d101      	bne.n	2fe80 <__sfputs_r+0x12>
   2fe7c:	2000      	movs	r0, #0
   2fe7e:	e007      	b.n	2fe90 <__sfputs_r+0x22>
   2fe80:	463a      	mov	r2, r7
   2fe82:	f814 1b01 	ldrb.w	r1, [r4], #1
   2fe86:	4630      	mov	r0, r6
   2fe88:	f7ff ffda 	bl	2fe40 <__sfputc_r>
   2fe8c:	1c43      	adds	r3, r0, #1
   2fe8e:	d1f3      	bne.n	2fe78 <__sfputs_r+0xa>
   2fe90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fe92 <__cvt>:
   2fe92:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2fe96:	ec55 4b10 	vmov	r4, r5, d0
   2fe9a:	2d00      	cmp	r5, #0
   2fe9c:	460e      	mov	r6, r1
   2fe9e:	4691      	mov	r9, r2
   2fea0:	4619      	mov	r1, r3
   2fea2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   2fea6:	f04f 0200 	mov.w	r2, #0
   2feaa:	da03      	bge.n	2feb4 <__cvt+0x22>
   2feac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   2feb0:	222d      	movs	r2, #45	; 0x2d
   2feb2:	461d      	mov	r5, r3
   2feb4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2feb6:	700a      	strb	r2, [r1, #0]
   2feb8:	f027 0720 	bic.w	r7, r7, #32
   2febc:	2f46      	cmp	r7, #70	; 0x46
   2febe:	d004      	beq.n	2feca <__cvt+0x38>
   2fec0:	2f45      	cmp	r7, #69	; 0x45
   2fec2:	d100      	bne.n	2fec6 <__cvt+0x34>
   2fec4:	3601      	adds	r6, #1
   2fec6:	2102      	movs	r1, #2
   2fec8:	e000      	b.n	2fecc <__cvt+0x3a>
   2feca:	2103      	movs	r1, #3
   2fecc:	ab03      	add	r3, sp, #12
   2fece:	4632      	mov	r2, r6
   2fed0:	9301      	str	r3, [sp, #4]
   2fed2:	ab02      	add	r3, sp, #8
   2fed4:	ec45 4b10 	vmov	d0, r4, r5
   2fed8:	9300      	str	r3, [sp, #0]
   2feda:	4653      	mov	r3, sl
   2fedc:	f7ed f8d4 	bl	1d088 <_dtoa_r>
   2fee0:	2f47      	cmp	r7, #71	; 0x47
   2fee2:	4680      	mov	r8, r0
   2fee4:	d102      	bne.n	2feec <__cvt+0x5a>
   2fee6:	f019 0f01 	tst.w	r9, #1
   2feea:	d022      	beq.n	2ff32 <__cvt+0xa0>
   2feec:	2f46      	cmp	r7, #70	; 0x46
   2feee:	eb08 0906 	add.w	r9, r8, r6
   2fef2:	d111      	bne.n	2ff18 <__cvt+0x86>
   2fef4:	f898 3000 	ldrb.w	r3, [r8]
   2fef8:	2b30      	cmp	r3, #48	; 0x30
   2fefa:	d10a      	bne.n	2ff12 <__cvt+0x80>
   2fefc:	2200      	movs	r2, #0
   2fefe:	2300      	movs	r3, #0
   2ff00:	4620      	mov	r0, r4
   2ff02:	4629      	mov	r1, r5
   2ff04:	f7ed f83e 	bl	1cf84 <__aeabi_dcmpeq>
   2ff08:	b918      	cbnz	r0, 2ff12 <__cvt+0x80>
   2ff0a:	f1c6 0601 	rsb	r6, r6, #1
   2ff0e:	f8ca 6000 	str.w	r6, [sl]
   2ff12:	f8da 3000 	ldr.w	r3, [sl]
   2ff16:	4499      	add	r9, r3
   2ff18:	2200      	movs	r2, #0
   2ff1a:	2300      	movs	r3, #0
   2ff1c:	4620      	mov	r0, r4
   2ff1e:	4629      	mov	r1, r5
   2ff20:	f7ed f830 	bl	1cf84 <__aeabi_dcmpeq>
   2ff24:	b108      	cbz	r0, 2ff2a <__cvt+0x98>
   2ff26:	f8cd 900c 	str.w	r9, [sp, #12]
   2ff2a:	2230      	movs	r2, #48	; 0x30
   2ff2c:	9b03      	ldr	r3, [sp, #12]
   2ff2e:	454b      	cmp	r3, r9
   2ff30:	d308      	bcc.n	2ff44 <__cvt+0xb2>
   2ff32:	9b03      	ldr	r3, [sp, #12]
   2ff34:	4640      	mov	r0, r8
   2ff36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ff38:	eba3 0308 	sub.w	r3, r3, r8
   2ff3c:	6013      	str	r3, [r2, #0]
   2ff3e:	b004      	add	sp, #16
   2ff40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ff44:	1c59      	adds	r1, r3, #1
   2ff46:	9103      	str	r1, [sp, #12]
   2ff48:	701a      	strb	r2, [r3, #0]
   2ff4a:	e7ef      	b.n	2ff2c <__cvt+0x9a>

0002ff4c <__exponent>:
   2ff4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ff4e:	2900      	cmp	r1, #0
   2ff50:	7002      	strb	r2, [r0, #0]
   2ff52:	bfba      	itte	lt
   2ff54:	4249      	neglt	r1, r1
   2ff56:	232d      	movlt	r3, #45	; 0x2d
   2ff58:	232b      	movge	r3, #43	; 0x2b
   2ff5a:	2909      	cmp	r1, #9
   2ff5c:	7043      	strb	r3, [r0, #1]
   2ff5e:	dd22      	ble.n	2ffa6 <__exponent+0x5a>
   2ff60:	f10d 0307 	add.w	r3, sp, #7
   2ff64:	260a      	movs	r6, #10
   2ff66:	461f      	mov	r7, r3
   2ff68:	2963      	cmp	r1, #99	; 0x63
   2ff6a:	f103 35ff 	add.w	r5, r3, #4294967295
   2ff6e:	fb91 f2f6 	sdiv	r2, r1, r6
   2ff72:	fb06 1412 	mls	r4, r6, r2, r1
   2ff76:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2ff7a:	f803 4c01 	strb.w	r4, [r3, #-1]
   2ff7e:	dc0a      	bgt.n	2ff96 <__exponent+0x4a>
   2ff80:	3230      	adds	r2, #48	; 0x30
   2ff82:	3b02      	subs	r3, #2
   2ff84:	f805 2c01 	strb.w	r2, [r5, #-1]
   2ff88:	1c82      	adds	r2, r0, #2
   2ff8a:	42bb      	cmp	r3, r7
   2ff8c:	4614      	mov	r4, r2
   2ff8e:	d305      	bcc.n	2ff9c <__exponent+0x50>
   2ff90:	1a20      	subs	r0, r4, r0
   2ff92:	b003      	add	sp, #12
   2ff94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ff96:	462b      	mov	r3, r5
   2ff98:	4611      	mov	r1, r2
   2ff9a:	e7e5      	b.n	2ff68 <__exponent+0x1c>
   2ff9c:	f813 1b01 	ldrb.w	r1, [r3], #1
   2ffa0:	f802 1b01 	strb.w	r1, [r2], #1
   2ffa4:	e7f1      	b.n	2ff8a <__exponent+0x3e>
   2ffa6:	2330      	movs	r3, #48	; 0x30
   2ffa8:	1d04      	adds	r4, r0, #4
   2ffaa:	4419      	add	r1, r3
   2ffac:	7083      	strb	r3, [r0, #2]
   2ffae:	70c1      	strb	r1, [r0, #3]
   2ffb0:	e7ee      	b.n	2ff90 <__exponent+0x44>

0002ffb2 <_printf_common>:
   2ffb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ffb6:	4691      	mov	r9, r2
   2ffb8:	461f      	mov	r7, r3
   2ffba:	688a      	ldr	r2, [r1, #8]
   2ffbc:	4606      	mov	r6, r0
   2ffbe:	690b      	ldr	r3, [r1, #16]
   2ffc0:	460c      	mov	r4, r1
   2ffc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2ffc6:	4293      	cmp	r3, r2
   2ffc8:	bfb8      	it	lt
   2ffca:	4613      	movlt	r3, r2
   2ffcc:	f8c9 3000 	str.w	r3, [r9]
   2ffd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2ffd4:	b112      	cbz	r2, 2ffdc <_printf_common+0x2a>
   2ffd6:	3301      	adds	r3, #1
   2ffd8:	f8c9 3000 	str.w	r3, [r9]
   2ffdc:	6823      	ldr	r3, [r4, #0]
   2ffde:	0699      	lsls	r1, r3, #26
   2ffe0:	bf42      	ittt	mi
   2ffe2:	f8d9 3000 	ldrmi.w	r3, [r9]
   2ffe6:	3302      	addmi	r3, #2
   2ffe8:	f8c9 3000 	strmi.w	r3, [r9]
   2ffec:	6825      	ldr	r5, [r4, #0]
   2ffee:	f015 0506 	ands.w	r5, r5, #6
   2fff2:	d107      	bne.n	30004 <_printf_common+0x52>
   2fff4:	f104 0a19 	add.w	sl, r4, #25
   2fff8:	68e3      	ldr	r3, [r4, #12]
   2fffa:	f8d9 2000 	ldr.w	r2, [r9]
   2fffe:	1a9b      	subs	r3, r3, r2
   30000:	42ab      	cmp	r3, r5
   30002:	dc2b      	bgt.n	3005c <_printf_common+0xaa>
   30004:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   30008:	6822      	ldr	r2, [r4, #0]
   3000a:	3300      	adds	r3, #0
   3000c:	bf18      	it	ne
   3000e:	2301      	movne	r3, #1
   30010:	0692      	lsls	r2, r2, #26
   30012:	d430      	bmi.n	30076 <_printf_common+0xc4>
   30014:	f104 0243 	add.w	r2, r4, #67	; 0x43
   30018:	4639      	mov	r1, r7
   3001a:	4630      	mov	r0, r6
   3001c:	47c0      	blx	r8
   3001e:	3001      	adds	r0, #1
   30020:	d023      	beq.n	3006a <_printf_common+0xb8>
   30022:	6823      	ldr	r3, [r4, #0]
   30024:	341a      	adds	r4, #26
   30026:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   3002a:	f003 0306 	and.w	r3, r3, #6
   3002e:	f8d9 2000 	ldr.w	r2, [r9]
   30032:	f04f 0900 	mov.w	r9, #0
   30036:	2b04      	cmp	r3, #4
   30038:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3003c:	bf08      	it	eq
   3003e:	1aad      	subeq	r5, r5, r2
   30040:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   30044:	bf14      	ite	ne
   30046:	2500      	movne	r5, #0
   30048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3004c:	4293      	cmp	r3, r2
   3004e:	bfc4      	itt	gt
   30050:	1a9b      	subgt	r3, r3, r2
   30052:	18ed      	addgt	r5, r5, r3
   30054:	454d      	cmp	r5, r9
   30056:	d11a      	bne.n	3008e <_printf_common+0xdc>
   30058:	2000      	movs	r0, #0
   3005a:	e008      	b.n	3006e <_printf_common+0xbc>
   3005c:	2301      	movs	r3, #1
   3005e:	4652      	mov	r2, sl
   30060:	4639      	mov	r1, r7
   30062:	4630      	mov	r0, r6
   30064:	47c0      	blx	r8
   30066:	3001      	adds	r0, #1
   30068:	d103      	bne.n	30072 <_printf_common+0xc0>
   3006a:	f04f 30ff 	mov.w	r0, #4294967295
   3006e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30072:	3501      	adds	r5, #1
   30074:	e7c0      	b.n	2fff8 <_printf_common+0x46>
   30076:	18e1      	adds	r1, r4, r3
   30078:	1c5a      	adds	r2, r3, #1
   3007a:	2030      	movs	r0, #48	; 0x30
   3007c:	3302      	adds	r3, #2
   3007e:	4422      	add	r2, r4
   30080:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   30084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   30088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3008c:	e7c2      	b.n	30014 <_printf_common+0x62>
   3008e:	2301      	movs	r3, #1
   30090:	4622      	mov	r2, r4
   30092:	4639      	mov	r1, r7
   30094:	4630      	mov	r0, r6
   30096:	47c0      	blx	r8
   30098:	3001      	adds	r0, #1
   3009a:	d0e6      	beq.n	3006a <_printf_common+0xb8>
   3009c:	f109 0901 	add.w	r9, r9, #1
   300a0:	e7d8      	b.n	30054 <_printf_common+0xa2>

000300a2 <__sprintf_chk>:
   300a2:	b408      	push	{r3}
   300a4:	b517      	push	{r0, r1, r2, r4, lr}
   300a6:	ab05      	add	r3, sp, #20
   300a8:	1e14      	subs	r4, r2, #0
   300aa:	f853 1b04 	ldr.w	r1, [r3], #4
   300ae:	9301      	str	r3, [sp, #4]
   300b0:	da07      	bge.n	300c2 <__sprintf_chk+0x20>
   300b2:	461a      	mov	r2, r3
   300b4:	f7fd feaa 	bl	2de0c <vsiprintf>
   300b8:	b003      	add	sp, #12
   300ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   300be:	b001      	add	sp, #4
   300c0:	4770      	bx	lr
   300c2:	460a      	mov	r2, r1
   300c4:	4621      	mov	r1, r4
   300c6:	f7fd fe7d 	bl	2ddc4 <vsniprintf>
   300ca:	2800      	cmp	r0, #0
   300cc:	dbf4      	blt.n	300b8 <__sprintf_chk+0x16>
   300ce:	42a0      	cmp	r0, r4
   300d0:	d3f2      	bcc.n	300b8 <__sprintf_chk+0x16>
   300d2:	f7fd ff65 	bl	2dfa0 <__chk_fail>

000300d6 <strchr>:
   300d6:	b2c9      	uxtb	r1, r1
   300d8:	4603      	mov	r3, r0
   300da:	f810 2b01 	ldrb.w	r2, [r0], #1
   300de:	b11a      	cbz	r2, 300e8 <strchr+0x12>
   300e0:	428a      	cmp	r2, r1
   300e2:	d1f9      	bne.n	300d8 <strchr+0x2>
   300e4:	4618      	mov	r0, r3
   300e6:	4770      	bx	lr
   300e8:	2900      	cmp	r1, #0
   300ea:	bf18      	it	ne
   300ec:	2300      	movne	r3, #0
   300ee:	e7f9      	b.n	300e4 <strchr+0xe>

000300f0 <strcpy>:
   300f0:	4603      	mov	r3, r0
   300f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   300f6:	f803 2b01 	strb.w	r2, [r3], #1
   300fa:	2a00      	cmp	r2, #0
   300fc:	d1f9      	bne.n	300f2 <strcpy+0x2>
   300fe:	4770      	bx	lr

00030100 <strncmp>:
   30100:	b510      	push	{r4, lr}
   30102:	b16a      	cbz	r2, 30120 <strncmp+0x20>
   30104:	3901      	subs	r1, #1
   30106:	1884      	adds	r4, r0, r2
   30108:	f810 3b01 	ldrb.w	r3, [r0], #1
   3010c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   30110:	4293      	cmp	r3, r2
   30112:	d103      	bne.n	3011c <strncmp+0x1c>
   30114:	42a0      	cmp	r0, r4
   30116:	d001      	beq.n	3011c <strncmp+0x1c>
   30118:	2b00      	cmp	r3, #0
   3011a:	d1f5      	bne.n	30108 <strncmp+0x8>
   3011c:	1a98      	subs	r0, r3, r2
   3011e:	bd10      	pop	{r4, pc}
   30120:	4610      	mov	r0, r2
   30122:	e7fc      	b.n	3011e <strncmp+0x1e>

00030124 <strstr>:
   30124:	b5f0      	push	{r4, r5, r6, r7, lr}
   30126:	780c      	ldrb	r4, [r1, #0]
   30128:	b164      	cbz	r4, 30144 <strstr+0x20>
   3012a:	4603      	mov	r3, r0
   3012c:	781a      	ldrb	r2, [r3, #0]
   3012e:	4618      	mov	r0, r3
   30130:	1c5e      	adds	r6, r3, #1
   30132:	b90a      	cbnz	r2, 30138 <strstr+0x14>
   30134:	4610      	mov	r0, r2
   30136:	e005      	b.n	30144 <strstr+0x20>
   30138:	4294      	cmp	r4, r2
   3013a:	d108      	bne.n	3014e <strstr+0x2a>
   3013c:	460d      	mov	r5, r1
   3013e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   30142:	b902      	cbnz	r2, 30146 <strstr+0x22>
   30144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30146:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   3014a:	4297      	cmp	r7, r2
   3014c:	d0f7      	beq.n	3013e <strstr+0x1a>
   3014e:	4633      	mov	r3, r6
   30150:	e7ec      	b.n	3012c <strstr+0x8>

00030152 <_vsniprintf_r>:
   30152:	b530      	push	{r4, r5, lr}
   30154:	1e14      	subs	r4, r2, #0
   30156:	4605      	mov	r5, r0
   30158:	b09b      	sub	sp, #108	; 0x6c
   3015a:	4618      	mov	r0, r3
   3015c:	da05      	bge.n	3016a <_vsniprintf_r+0x18>
   3015e:	238b      	movs	r3, #139	; 0x8b
   30160:	f04f 30ff 	mov.w	r0, #4294967295
   30164:	602b      	str	r3, [r5, #0]
   30166:	b01b      	add	sp, #108	; 0x6c
   30168:	bd30      	pop	{r4, r5, pc}
   3016a:	f44f 7302 	mov.w	r3, #520	; 0x208
   3016e:	9100      	str	r1, [sp, #0]
   30170:	9104      	str	r1, [sp, #16]
   30172:	4602      	mov	r2, r0
   30174:	f8ad 300c 	strh.w	r3, [sp, #12]
   30178:	bf14      	ite	ne
   3017a:	f104 33ff 	addne.w	r3, r4, #4294967295
   3017e:	4623      	moveq	r3, r4
   30180:	4669      	mov	r1, sp
   30182:	4628      	mov	r0, r5
   30184:	9302      	str	r3, [sp, #8]
   30186:	9305      	str	r3, [sp, #20]
   30188:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3018c:	f8ad 300e 	strh.w	r3, [sp, #14]
   30190:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   30192:	f7fe f9eb 	bl	2e56c <_svfiprintf_r>
   30196:	1c43      	adds	r3, r0, #1
   30198:	bfbc      	itt	lt
   3019a:	238b      	movlt	r3, #139	; 0x8b
   3019c:	602b      	strlt	r3, [r5, #0]
   3019e:	2c00      	cmp	r4, #0
   301a0:	d0e1      	beq.n	30166 <_vsniprintf_r+0x14>
   301a2:	9b00      	ldr	r3, [sp, #0]
   301a4:	2200      	movs	r2, #0
   301a6:	701a      	strb	r2, [r3, #0]
   301a8:	e7dd      	b.n	30166 <_vsniprintf_r+0x14>

000301aa <abort>:
   301aa:	b508      	push	{r3, lr}
   301ac:	2006      	movs	r0, #6
   301ae:	f7fe fae5 	bl	2e77c <raise>
   301b2:	2001      	movs	r0, #1
   301b4:	f7ef fe36 	bl	1fe24 <_exit>

000301b8 <quorem>:
   301b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   301bc:	6903      	ldr	r3, [r0, #16]
   301be:	4680      	mov	r8, r0
   301c0:	690c      	ldr	r4, [r1, #16]
   301c2:	42a3      	cmp	r3, r4
   301c4:	f2c0 8084 	blt.w	302d0 <quorem+0x118>
   301c8:	3c01      	subs	r4, #1
   301ca:	f108 0514 	add.w	r5, r8, #20
   301ce:	f101 0714 	add.w	r7, r1, #20
   301d2:	00a0      	lsls	r0, r4, #2
   301d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   301d8:	182b      	adds	r3, r5, r0
   301da:	eb07 0900 	add.w	r9, r7, r0
   301de:	9301      	str	r3, [sp, #4]
   301e0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   301e4:	3301      	adds	r3, #1
   301e6:	429a      	cmp	r2, r3
   301e8:	fbb2 f6f3 	udiv	r6, r2, r3
   301ec:	d333      	bcc.n	30256 <quorem+0x9e>
   301ee:	f04f 0a00 	mov.w	sl, #0
   301f2:	46bc      	mov	ip, r7
   301f4:	46ae      	mov	lr, r5
   301f6:	46d3      	mov	fp, sl
   301f8:	f85c 2b04 	ldr.w	r2, [ip], #4
   301fc:	b293      	uxth	r3, r2
   301fe:	45e1      	cmp	r9, ip
   30200:	ea4f 4212 	mov.w	r2, r2, lsr #16
   30204:	fb06 a303 	mla	r3, r6, r3, sl
   30208:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3020c:	b29b      	uxth	r3, r3
   3020e:	fb06 a202 	mla	r2, r6, r2, sl
   30212:	ebab 0303 	sub.w	r3, fp, r3
   30216:	f8de b000 	ldr.w	fp, [lr]
   3021a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   3021e:	fa1f fb8b 	uxth.w	fp, fp
   30222:	445b      	add	r3, fp
   30224:	fa1f fb82 	uxth.w	fp, r2
   30228:	f8de 2000 	ldr.w	r2, [lr]
   3022c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   30230:	eb02 4223 	add.w	r2, r2, r3, asr #16
   30234:	b29b      	uxth	r3, r3
   30236:	ea4f 4b22 	mov.w	fp, r2, asr #16
   3023a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3023e:	f84e 3b04 	str.w	r3, [lr], #4
   30242:	d2d9      	bcs.n	301f8 <quorem+0x40>
   30244:	582b      	ldr	r3, [r5, r0]
   30246:	b933      	cbnz	r3, 30256 <quorem+0x9e>
   30248:	9b01      	ldr	r3, [sp, #4]
   3024a:	3b04      	subs	r3, #4
   3024c:	429d      	cmp	r5, r3
   3024e:	461a      	mov	r2, r3
   30250:	d332      	bcc.n	302b8 <quorem+0x100>
   30252:	f8c8 4010 	str.w	r4, [r8, #16]
   30256:	4640      	mov	r0, r8
   30258:	f000 fa74 	bl	30744 <__mcmp>
   3025c:	2800      	cmp	r0, #0
   3025e:	db27      	blt.n	302b0 <quorem+0xf8>
   30260:	3601      	adds	r6, #1
   30262:	4628      	mov	r0, r5
   30264:	f04f 0c00 	mov.w	ip, #0
   30268:	f857 1b04 	ldr.w	r1, [r7], #4
   3026c:	f8d0 e000 	ldr.w	lr, [r0]
   30270:	b28b      	uxth	r3, r1
   30272:	45b9      	cmp	r9, r7
   30274:	fa1f f28e 	uxth.w	r2, lr
   30278:	ebac 0303 	sub.w	r3, ip, r3
   3027c:	4413      	add	r3, r2
   3027e:	ea4f 4211 	mov.w	r2, r1, lsr #16
   30282:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   30286:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3028a:	b29b      	uxth	r3, r3
   3028c:	ea4f 4c22 	mov.w	ip, r2, asr #16
   30290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   30294:	f840 3b04 	str.w	r3, [r0], #4
   30298:	d2e6      	bcs.n	30268 <quorem+0xb0>
   3029a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3029e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   302a2:	b92a      	cbnz	r2, 302b0 <quorem+0xf8>
   302a4:	3b04      	subs	r3, #4
   302a6:	429d      	cmp	r5, r3
   302a8:	461a      	mov	r2, r3
   302aa:	d30b      	bcc.n	302c4 <quorem+0x10c>
   302ac:	f8c8 4010 	str.w	r4, [r8, #16]
   302b0:	4630      	mov	r0, r6
   302b2:	b003      	add	sp, #12
   302b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   302b8:	6812      	ldr	r2, [r2, #0]
   302ba:	3b04      	subs	r3, #4
   302bc:	2a00      	cmp	r2, #0
   302be:	d1c8      	bne.n	30252 <quorem+0x9a>
   302c0:	3c01      	subs	r4, #1
   302c2:	e7c3      	b.n	3024c <quorem+0x94>
   302c4:	6812      	ldr	r2, [r2, #0]
   302c6:	3b04      	subs	r3, #4
   302c8:	2a00      	cmp	r2, #0
   302ca:	d1ef      	bne.n	302ac <quorem+0xf4>
   302cc:	3c01      	subs	r4, #1
   302ce:	e7ea      	b.n	302a6 <quorem+0xee>
   302d0:	2000      	movs	r0, #0
   302d2:	e7ee      	b.n	302b2 <quorem+0xfa>

000302d4 <__sfmoreglue>:
   302d4:	b570      	push	{r4, r5, r6, lr}
   302d6:	1e4a      	subs	r2, r1, #1
   302d8:	2568      	movs	r5, #104	; 0x68
   302da:	460e      	mov	r6, r1
   302dc:	4355      	muls	r5, r2
   302de:	f105 0174 	add.w	r1, r5, #116	; 0x74
   302e2:	f7fe f8e9 	bl	2e4b8 <_malloc_r>
   302e6:	4604      	mov	r4, r0
   302e8:	b140      	cbz	r0, 302fc <__sfmoreglue+0x28>
   302ea:	2100      	movs	r1, #0
   302ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
   302f0:	e9c0 1600 	strd	r1, r6, [r0]
   302f4:	300c      	adds	r0, #12
   302f6:	60a0      	str	r0, [r4, #8]
   302f8:	f7ff fd9a 	bl	2fe30 <memset>
   302fc:	4620      	mov	r0, r4
   302fe:	bd70      	pop	{r4, r5, r6, pc}

00030300 <_fwalk_reent>:
   30300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30304:	4680      	mov	r8, r0
   30306:	4689      	mov	r9, r1
   30308:	f100 0448 	add.w	r4, r0, #72	; 0x48
   3030c:	2600      	movs	r6, #0
   3030e:	b914      	cbnz	r4, 30316 <_fwalk_reent+0x16>
   30310:	4630      	mov	r0, r6
   30312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30316:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   3031a:	3f01      	subs	r7, #1
   3031c:	d501      	bpl.n	30322 <_fwalk_reent+0x22>
   3031e:	6824      	ldr	r4, [r4, #0]
   30320:	e7f5      	b.n	3030e <_fwalk_reent+0xe>
   30322:	89ab      	ldrh	r3, [r5, #12]
   30324:	2b01      	cmp	r3, #1
   30326:	d907      	bls.n	30338 <_fwalk_reent+0x38>
   30328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   3032c:	3301      	adds	r3, #1
   3032e:	d003      	beq.n	30338 <_fwalk_reent+0x38>
   30330:	4629      	mov	r1, r5
   30332:	4640      	mov	r0, r8
   30334:	47c8      	blx	r9
   30336:	4306      	orrs	r6, r0
   30338:	3568      	adds	r5, #104	; 0x68
   3033a:	e7ee      	b.n	3031a <_fwalk_reent+0x1a>

0003033c <__retarget_lock_init_recursive>:
   3033c:	4770      	bx	lr

0003033e <__retarget_lock_acquire_recursive>:
   3033e:	4770      	bx	lr

00030340 <__retarget_lock_release_recursive>:
   30340:	4770      	bx	lr

00030342 <__swhatbuf_r>:
   30342:	b570      	push	{r4, r5, r6, lr}
   30344:	460e      	mov	r6, r1
   30346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3034a:	b096      	sub	sp, #88	; 0x58
   3034c:	4614      	mov	r4, r2
   3034e:	2900      	cmp	r1, #0
   30350:	461d      	mov	r5, r3
   30352:	da07      	bge.n	30364 <__swhatbuf_r+0x22>
   30354:	2300      	movs	r3, #0
   30356:	602b      	str	r3, [r5, #0]
   30358:	89b3      	ldrh	r3, [r6, #12]
   3035a:	061a      	lsls	r2, r3, #24
   3035c:	d410      	bmi.n	30380 <__swhatbuf_r+0x3e>
   3035e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   30362:	e00e      	b.n	30382 <__swhatbuf_r+0x40>
   30364:	466a      	mov	r2, sp
   30366:	f7fe fa45 	bl	2e7f4 <_fstat_r>
   3036a:	2800      	cmp	r0, #0
   3036c:	dbf2      	blt.n	30354 <__swhatbuf_r+0x12>
   3036e:	9a01      	ldr	r2, [sp, #4]
   30370:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   30374:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   30378:	425a      	negs	r2, r3
   3037a:	415a      	adcs	r2, r3
   3037c:	602a      	str	r2, [r5, #0]
   3037e:	e7ee      	b.n	3035e <__swhatbuf_r+0x1c>
   30380:	2340      	movs	r3, #64	; 0x40
   30382:	2000      	movs	r0, #0
   30384:	6023      	str	r3, [r4, #0]
   30386:	b016      	add	sp, #88	; 0x58
   30388:	bd70      	pop	{r4, r5, r6, pc}

0003038a <memmove>:
   3038a:	4288      	cmp	r0, r1
   3038c:	eb01 0302 	add.w	r3, r1, r2
   30390:	b510      	push	{r4, lr}
   30392:	d902      	bls.n	3039a <memmove+0x10>
   30394:	4283      	cmp	r3, r0
   30396:	461c      	mov	r4, r3
   30398:	d807      	bhi.n	303aa <memmove+0x20>
   3039a:	1e42      	subs	r2, r0, #1
   3039c:	4299      	cmp	r1, r3
   3039e:	d008      	beq.n	303b2 <memmove+0x28>
   303a0:	f811 4b01 	ldrb.w	r4, [r1], #1
   303a4:	f802 4f01 	strb.w	r4, [r2, #1]!
   303a8:	e7f8      	b.n	3039c <memmove+0x12>
   303aa:	1883      	adds	r3, r0, r2
   303ac:	1a9a      	subs	r2, r3, r2
   303ae:	429a      	cmp	r2, r3
   303b0:	d100      	bne.n	303b4 <memmove+0x2a>
   303b2:	bd10      	pop	{r4, pc}
   303b4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   303b8:	f803 1d01 	strb.w	r1, [r3, #-1]!
   303bc:	e7f7      	b.n	303ae <memmove+0x24>

000303be <_Balloc>:
   303be:	b570      	push	{r4, r5, r6, lr}
   303c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
   303c2:	4604      	mov	r4, r0
   303c4:	460e      	mov	r6, r1
   303c6:	b93d      	cbnz	r5, 303d8 <_Balloc+0x1a>
   303c8:	2010      	movs	r0, #16
   303ca:	f7fd ffd1 	bl	2e370 <malloc>
   303ce:	6260      	str	r0, [r4, #36]	; 0x24
   303d0:	6005      	str	r5, [r0, #0]
   303d2:	60c5      	str	r5, [r0, #12]
   303d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
   303d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   303da:	68eb      	ldr	r3, [r5, #12]
   303dc:	b183      	cbz	r3, 30400 <_Balloc+0x42>
   303de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   303e0:	68db      	ldr	r3, [r3, #12]
   303e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   303e6:	b9b8      	cbnz	r0, 30418 <_Balloc+0x5a>
   303e8:	2101      	movs	r1, #1
   303ea:	4620      	mov	r0, r4
   303ec:	fa01 f506 	lsl.w	r5, r1, r6
   303f0:	1d6a      	adds	r2, r5, #5
   303f2:	0092      	lsls	r2, r2, #2
   303f4:	f000 fa6e 	bl	308d4 <_calloc_r>
   303f8:	b160      	cbz	r0, 30414 <_Balloc+0x56>
   303fa:	e9c0 6501 	strd	r6, r5, [r0, #4]
   303fe:	e00e      	b.n	3041e <_Balloc+0x60>
   30400:	2221      	movs	r2, #33	; 0x21
   30402:	2104      	movs	r1, #4
   30404:	4620      	mov	r0, r4
   30406:	f000 fa65 	bl	308d4 <_calloc_r>
   3040a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3040c:	60e8      	str	r0, [r5, #12]
   3040e:	68db      	ldr	r3, [r3, #12]
   30410:	2b00      	cmp	r3, #0
   30412:	d1e4      	bne.n	303de <_Balloc+0x20>
   30414:	2000      	movs	r0, #0
   30416:	bd70      	pop	{r4, r5, r6, pc}
   30418:	6802      	ldr	r2, [r0, #0]
   3041a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   3041e:	2300      	movs	r3, #0
   30420:	e9c0 3303 	strd	r3, r3, [r0, #12]
   30424:	e7f7      	b.n	30416 <_Balloc+0x58>

00030426 <_Bfree>:
   30426:	b570      	push	{r4, r5, r6, lr}
   30428:	6a44      	ldr	r4, [r0, #36]	; 0x24
   3042a:	4606      	mov	r6, r0
   3042c:	460d      	mov	r5, r1
   3042e:	b93c      	cbnz	r4, 30440 <_Bfree+0x1a>
   30430:	2010      	movs	r0, #16
   30432:	f7fd ff9d 	bl	2e370 <malloc>
   30436:	6270      	str	r0, [r6, #36]	; 0x24
   30438:	6004      	str	r4, [r0, #0]
   3043a:	60c4      	str	r4, [r0, #12]
   3043c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   30440:	b13d      	cbz	r5, 30452 <_Bfree+0x2c>
   30442:	6a73      	ldr	r3, [r6, #36]	; 0x24
   30444:	686a      	ldr	r2, [r5, #4]
   30446:	68db      	ldr	r3, [r3, #12]
   30448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3044c:	6029      	str	r1, [r5, #0]
   3044e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   30452:	bd70      	pop	{r4, r5, r6, pc}

00030454 <__multadd>:
   30454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30458:	f101 0c14 	add.w	ip, r1, #20
   3045c:	461f      	mov	r7, r3
   3045e:	4606      	mov	r6, r0
   30460:	460c      	mov	r4, r1
   30462:	690d      	ldr	r5, [r1, #16]
   30464:	2300      	movs	r3, #0
   30466:	f8dc 0000 	ldr.w	r0, [ip]
   3046a:	3301      	adds	r3, #1
   3046c:	b281      	uxth	r1, r0
   3046e:	429d      	cmp	r5, r3
   30470:	ea4f 4010 	mov.w	r0, r0, lsr #16
   30474:	fb02 7101 	mla	r1, r2, r1, r7
   30478:	ea4f 4711 	mov.w	r7, r1, lsr #16
   3047c:	b289      	uxth	r1, r1
   3047e:	fb02 7000 	mla	r0, r2, r0, r7
   30482:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   30486:	ea4f 4710 	mov.w	r7, r0, lsr #16
   3048a:	f84c 1b04 	str.w	r1, [ip], #4
   3048e:	dcea      	bgt.n	30466 <__multadd+0x12>
   30490:	b1d7      	cbz	r7, 304c8 <__multadd+0x74>
   30492:	68a3      	ldr	r3, [r4, #8]
   30494:	42ab      	cmp	r3, r5
   30496:	dc12      	bgt.n	304be <__multadd+0x6a>
   30498:	6861      	ldr	r1, [r4, #4]
   3049a:	4630      	mov	r0, r6
   3049c:	3101      	adds	r1, #1
   3049e:	f7ff ff8e 	bl	303be <_Balloc>
   304a2:	6922      	ldr	r2, [r4, #16]
   304a4:	4680      	mov	r8, r0
   304a6:	f104 010c 	add.w	r1, r4, #12
   304aa:	3202      	adds	r2, #2
   304ac:	300c      	adds	r0, #12
   304ae:	0092      	lsls	r2, r2, #2
   304b0:	f7ff fcb1 	bl	2fe16 <memcpy>
   304b4:	4621      	mov	r1, r4
   304b6:	4644      	mov	r4, r8
   304b8:	4630      	mov	r0, r6
   304ba:	f7ff ffb4 	bl	30426 <_Bfree>
   304be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   304c2:	3501      	adds	r5, #1
   304c4:	615f      	str	r7, [r3, #20]
   304c6:	6125      	str	r5, [r4, #16]
   304c8:	4620      	mov	r0, r4
   304ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000304ce <__hi0bits>:
   304ce:	0c02      	lsrs	r2, r0, #16
   304d0:	4603      	mov	r3, r0
   304d2:	0412      	lsls	r2, r2, #16
   304d4:	b9ca      	cbnz	r2, 3050a <__hi0bits+0x3c>
   304d6:	0403      	lsls	r3, r0, #16
   304d8:	2010      	movs	r0, #16
   304da:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   304de:	bf04      	itt	eq
   304e0:	021b      	lsleq	r3, r3, #8
   304e2:	3008      	addeq	r0, #8
   304e4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   304e8:	bf04      	itt	eq
   304ea:	011b      	lsleq	r3, r3, #4
   304ec:	3004      	addeq	r0, #4
   304ee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   304f2:	bf04      	itt	eq
   304f4:	009b      	lsleq	r3, r3, #2
   304f6:	3002      	addeq	r0, #2
   304f8:	2b00      	cmp	r3, #0
   304fa:	db05      	blt.n	30508 <__hi0bits+0x3a>
   304fc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   30500:	f100 0001 	add.w	r0, r0, #1
   30504:	bf08      	it	eq
   30506:	2020      	moveq	r0, #32
   30508:	4770      	bx	lr
   3050a:	2000      	movs	r0, #0
   3050c:	e7e5      	b.n	304da <__hi0bits+0xc>

0003050e <__lo0bits>:
   3050e:	6803      	ldr	r3, [r0, #0]
   30510:	4601      	mov	r1, r0
   30512:	f013 0207 	ands.w	r2, r3, #7
   30516:	d00b      	beq.n	30530 <__lo0bits+0x22>
   30518:	07da      	lsls	r2, r3, #31
   3051a:	d424      	bmi.n	30566 <__lo0bits+0x58>
   3051c:	0798      	lsls	r0, r3, #30
   3051e:	bf47      	ittee	mi
   30520:	085b      	lsrmi	r3, r3, #1
   30522:	2001      	movmi	r0, #1
   30524:	089b      	lsrpl	r3, r3, #2
   30526:	2002      	movpl	r0, #2
   30528:	bf4c      	ite	mi
   3052a:	600b      	strmi	r3, [r1, #0]
   3052c:	600b      	strpl	r3, [r1, #0]
   3052e:	4770      	bx	lr
   30530:	b298      	uxth	r0, r3
   30532:	b9b0      	cbnz	r0, 30562 <__lo0bits+0x54>
   30534:	0c1b      	lsrs	r3, r3, #16
   30536:	2010      	movs	r0, #16
   30538:	f013 0fff 	tst.w	r3, #255	; 0xff
   3053c:	bf04      	itt	eq
   3053e:	0a1b      	lsreq	r3, r3, #8
   30540:	3008      	addeq	r0, #8
   30542:	071a      	lsls	r2, r3, #28
   30544:	bf04      	itt	eq
   30546:	091b      	lsreq	r3, r3, #4
   30548:	3004      	addeq	r0, #4
   3054a:	079a      	lsls	r2, r3, #30
   3054c:	bf04      	itt	eq
   3054e:	089b      	lsreq	r3, r3, #2
   30550:	3002      	addeq	r0, #2
   30552:	07da      	lsls	r2, r3, #31
   30554:	d403      	bmi.n	3055e <__lo0bits+0x50>
   30556:	085b      	lsrs	r3, r3, #1
   30558:	f100 0001 	add.w	r0, r0, #1
   3055c:	d005      	beq.n	3056a <__lo0bits+0x5c>
   3055e:	600b      	str	r3, [r1, #0]
   30560:	4770      	bx	lr
   30562:	4610      	mov	r0, r2
   30564:	e7e8      	b.n	30538 <__lo0bits+0x2a>
   30566:	2000      	movs	r0, #0
   30568:	4770      	bx	lr
   3056a:	2020      	movs	r0, #32
   3056c:	4770      	bx	lr

0003056e <__i2b>:
   3056e:	b510      	push	{r4, lr}
   30570:	460c      	mov	r4, r1
   30572:	2101      	movs	r1, #1
   30574:	f7ff ff23 	bl	303be <_Balloc>
   30578:	2201      	movs	r2, #1
   3057a:	6144      	str	r4, [r0, #20]
   3057c:	6102      	str	r2, [r0, #16]
   3057e:	bd10      	pop	{r4, pc}

00030580 <__multiply>:
   30580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30584:	4690      	mov	r8, r2
   30586:	690a      	ldr	r2, [r1, #16]
   30588:	460c      	mov	r4, r1
   3058a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   3058e:	429a      	cmp	r2, r3
   30590:	bfbe      	ittt	lt
   30592:	460b      	movlt	r3, r1
   30594:	4644      	movlt	r4, r8
   30596:	4698      	movlt	r8, r3
   30598:	6927      	ldr	r7, [r4, #16]
   3059a:	68a3      	ldr	r3, [r4, #8]
   3059c:	f8d8 9010 	ldr.w	r9, [r8, #16]
   305a0:	6861      	ldr	r1, [r4, #4]
   305a2:	eb07 0609 	add.w	r6, r7, r9
   305a6:	42b3      	cmp	r3, r6
   305a8:	bfb8      	it	lt
   305aa:	3101      	addlt	r1, #1
   305ac:	f7ff ff07 	bl	303be <_Balloc>
   305b0:	f100 0514 	add.w	r5, r0, #20
   305b4:	2200      	movs	r2, #0
   305b6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   305ba:	462b      	mov	r3, r5
   305bc:	4573      	cmp	r3, lr
   305be:	d316      	bcc.n	305ee <__multiply+0x6e>
   305c0:	f104 0314 	add.w	r3, r4, #20
   305c4:	f108 0214 	add.w	r2, r8, #20
   305c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   305cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   305d0:	9300      	str	r3, [sp, #0]
   305d2:	9b00      	ldr	r3, [sp, #0]
   305d4:	9201      	str	r2, [sp, #4]
   305d6:	4293      	cmp	r3, r2
   305d8:	d80c      	bhi.n	305f4 <__multiply+0x74>
   305da:	2e00      	cmp	r6, #0
   305dc:	dd03      	ble.n	305e6 <__multiply+0x66>
   305de:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   305e2:	2b00      	cmp	r3, #0
   305e4:	d059      	beq.n	3069a <__multiply+0x11a>
   305e6:	6106      	str	r6, [r0, #16]
   305e8:	b003      	add	sp, #12
   305ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   305ee:	f843 2b04 	str.w	r2, [r3], #4
   305f2:	e7e3      	b.n	305bc <__multiply+0x3c>
   305f4:	f8b2 a000 	ldrh.w	sl, [r2]
   305f8:	f1ba 0f00 	cmp.w	sl, #0
   305fc:	d023      	beq.n	30646 <__multiply+0xc6>
   305fe:	f104 0914 	add.w	r9, r4, #20
   30602:	46ac      	mov	ip, r5
   30604:	f04f 0800 	mov.w	r8, #0
   30608:	f859 1b04 	ldr.w	r1, [r9], #4
   3060c:	f8dc b000 	ldr.w	fp, [ip]
   30610:	b28b      	uxth	r3, r1
   30612:	454f      	cmp	r7, r9
   30614:	fa1f fb8b 	uxth.w	fp, fp
   30618:	fb0a b303 	mla	r3, sl, r3, fp
   3061c:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   30620:	f8dc 1000 	ldr.w	r1, [ip]
   30624:	4443      	add	r3, r8
   30626:	ea4f 4811 	mov.w	r8, r1, lsr #16
   3062a:	fb0a 810b 	mla	r1, sl, fp, r8
   3062e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   30632:	b29b      	uxth	r3, r3
   30634:	ea4f 4811 	mov.w	r8, r1, lsr #16
   30638:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3063c:	f84c 3b04 	str.w	r3, [ip], #4
   30640:	d8e2      	bhi.n	30608 <__multiply+0x88>
   30642:	f8cc 8000 	str.w	r8, [ip]
   30646:	9b01      	ldr	r3, [sp, #4]
   30648:	3204      	adds	r2, #4
   3064a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   3064e:	f1b9 0f00 	cmp.w	r9, #0
   30652:	d020      	beq.n	30696 <__multiply+0x116>
   30654:	682b      	ldr	r3, [r5, #0]
   30656:	f104 0814 	add.w	r8, r4, #20
   3065a:	46ac      	mov	ip, r5
   3065c:	f04f 0a00 	mov.w	sl, #0
   30660:	f8b8 1000 	ldrh.w	r1, [r8]
   30664:	b29b      	uxth	r3, r3
   30666:	f8bc b002 	ldrh.w	fp, [ip, #2]
   3066a:	fb09 b101 	mla	r1, r9, r1, fp
   3066e:	448a      	add	sl, r1
   30670:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   30674:	f84c 3b04 	str.w	r3, [ip], #4
   30678:	f858 3b04 	ldr.w	r3, [r8], #4
   3067c:	f8bc 1000 	ldrh.w	r1, [ip]
   30680:	0c1b      	lsrs	r3, r3, #16
   30682:	4547      	cmp	r7, r8
   30684:	fb09 1303 	mla	r3, r9, r3, r1
   30688:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   3068c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   30690:	d8e6      	bhi.n	30660 <__multiply+0xe0>
   30692:	f8cc 3000 	str.w	r3, [ip]
   30696:	3504      	adds	r5, #4
   30698:	e79b      	b.n	305d2 <__multiply+0x52>
   3069a:	3e01      	subs	r6, #1
   3069c:	e79d      	b.n	305da <__multiply+0x5a>

0003069e <__lshift>:
   3069e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   306a2:	460c      	mov	r4, r1
   306a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   306a8:	4607      	mov	r7, r0
   306aa:	4616      	mov	r6, r2
   306ac:	6923      	ldr	r3, [r4, #16]
   306ae:	6849      	ldr	r1, [r1, #4]
   306b0:	eb0a 0903 	add.w	r9, sl, r3
   306b4:	68a3      	ldr	r3, [r4, #8]
   306b6:	f109 0501 	add.w	r5, r9, #1
   306ba:	42ab      	cmp	r3, r5
   306bc:	db33      	blt.n	30726 <__lshift+0x88>
   306be:	4638      	mov	r0, r7
   306c0:	f7ff fe7d 	bl	303be <_Balloc>
   306c4:	2300      	movs	r3, #0
   306c6:	4680      	mov	r8, r0
   306c8:	f100 0114 	add.w	r1, r0, #20
   306cc:	f100 0210 	add.w	r2, r0, #16
   306d0:	4618      	mov	r0, r3
   306d2:	4553      	cmp	r3, sl
   306d4:	db2a      	blt.n	3072c <__lshift+0x8e>
   306d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   306da:	f104 0314 	add.w	r3, r4, #20
   306de:	6920      	ldr	r0, [r4, #16]
   306e0:	f016 021f 	ands.w	r2, r6, #31
   306e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   306e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   306ec:	d022      	beq.n	30734 <__lshift+0x96>
   306ee:	f1c2 0e20 	rsb	lr, r2, #32
   306f2:	2000      	movs	r0, #0
   306f4:	681e      	ldr	r6, [r3, #0]
   306f6:	4096      	lsls	r6, r2
   306f8:	4330      	orrs	r0, r6
   306fa:	f841 0b04 	str.w	r0, [r1], #4
   306fe:	f853 0b04 	ldr.w	r0, [r3], #4
   30702:	459c      	cmp	ip, r3
   30704:	fa20 f00e 	lsr.w	r0, r0, lr
   30708:	d8f4      	bhi.n	306f4 <__lshift+0x56>
   3070a:	6008      	str	r0, [r1, #0]
   3070c:	b108      	cbz	r0, 30712 <__lshift+0x74>
   3070e:	f109 0502 	add.w	r5, r9, #2
   30712:	3d01      	subs	r5, #1
   30714:	4638      	mov	r0, r7
   30716:	4621      	mov	r1, r4
   30718:	f8c8 5010 	str.w	r5, [r8, #16]
   3071c:	f7ff fe83 	bl	30426 <_Bfree>
   30720:	4640      	mov	r0, r8
   30722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30726:	3101      	adds	r1, #1
   30728:	005b      	lsls	r3, r3, #1
   3072a:	e7c6      	b.n	306ba <__lshift+0x1c>
   3072c:	f842 0f04 	str.w	r0, [r2, #4]!
   30730:	3301      	adds	r3, #1
   30732:	e7ce      	b.n	306d2 <__lshift+0x34>
   30734:	3904      	subs	r1, #4
   30736:	f853 2b04 	ldr.w	r2, [r3], #4
   3073a:	459c      	cmp	ip, r3
   3073c:	f841 2f04 	str.w	r2, [r1, #4]!
   30740:	d8f9      	bhi.n	30736 <__lshift+0x98>
   30742:	e7e6      	b.n	30712 <__lshift+0x74>

00030744 <__mcmp>:
   30744:	6903      	ldr	r3, [r0, #16]
   30746:	690a      	ldr	r2, [r1, #16]
   30748:	1a9b      	subs	r3, r3, r2
   3074a:	b530      	push	{r4, r5, lr}
   3074c:	d10c      	bne.n	30768 <__mcmp+0x24>
   3074e:	0092      	lsls	r2, r2, #2
   30750:	3014      	adds	r0, #20
   30752:	3114      	adds	r1, #20
   30754:	1884      	adds	r4, r0, r2
   30756:	4411      	add	r1, r2
   30758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   3075c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   30760:	4295      	cmp	r5, r2
   30762:	d003      	beq.n	3076c <__mcmp+0x28>
   30764:	d305      	bcc.n	30772 <__mcmp+0x2e>
   30766:	2301      	movs	r3, #1
   30768:	4618      	mov	r0, r3
   3076a:	bd30      	pop	{r4, r5, pc}
   3076c:	42a0      	cmp	r0, r4
   3076e:	d3f3      	bcc.n	30758 <__mcmp+0x14>
   30770:	e7fa      	b.n	30768 <__mcmp+0x24>
   30772:	f04f 33ff 	mov.w	r3, #4294967295
   30776:	e7f7      	b.n	30768 <__mcmp+0x24>

00030778 <__mdiff>:
   30778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3077c:	460d      	mov	r5, r1
   3077e:	4607      	mov	r7, r0
   30780:	4611      	mov	r1, r2
   30782:	4614      	mov	r4, r2
   30784:	4628      	mov	r0, r5
   30786:	f7ff ffdd 	bl	30744 <__mcmp>
   3078a:	1e06      	subs	r6, r0, #0
   3078c:	d108      	bne.n	307a0 <__mdiff+0x28>
   3078e:	4631      	mov	r1, r6
   30790:	4638      	mov	r0, r7
   30792:	f7ff fe14 	bl	303be <_Balloc>
   30796:	2301      	movs	r3, #1
   30798:	e9c0 3604 	strd	r3, r6, [r0, #16]
   3079c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   307a0:	bfa3      	ittte	ge
   307a2:	4623      	movge	r3, r4
   307a4:	462c      	movge	r4, r5
   307a6:	2600      	movge	r6, #0
   307a8:	2601      	movlt	r6, #1
   307aa:	bfa8      	it	ge
   307ac:	461d      	movge	r5, r3
   307ae:	6861      	ldr	r1, [r4, #4]
   307b0:	4638      	mov	r0, r7
   307b2:	f7ff fe04 	bl	303be <_Balloc>
   307b6:	f105 0914 	add.w	r9, r5, #20
   307ba:	60c6      	str	r6, [r0, #12]
   307bc:	f104 0214 	add.w	r2, r4, #20
   307c0:	6926      	ldr	r6, [r4, #16]
   307c2:	f100 0114 	add.w	r1, r0, #20
   307c6:	692b      	ldr	r3, [r5, #16]
   307c8:	f04f 0e00 	mov.w	lr, #0
   307cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   307d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   307d4:	f852 ab04 	ldr.w	sl, [r2], #4
   307d8:	f859 5b04 	ldr.w	r5, [r9], #4
   307dc:	fa1f f38a 	uxth.w	r3, sl
   307e0:	4694      	mov	ip, r2
   307e2:	b2ac      	uxth	r4, r5
   307e4:	45c8      	cmp	r8, r9
   307e6:	4473      	add	r3, lr
   307e8:	eba3 0304 	sub.w	r3, r3, r4
   307ec:	ea4f 4415 	mov.w	r4, r5, lsr #16
   307f0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   307f4:	eb04 4423 	add.w	r4, r4, r3, asr #16
   307f8:	b29b      	uxth	r3, r3
   307fa:	ea4f 4e24 	mov.w	lr, r4, asr #16
   307fe:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   30802:	f841 4b04 	str.w	r4, [r1], #4
   30806:	d8e5      	bhi.n	307d4 <__mdiff+0x5c>
   30808:	45bc      	cmp	ip, r7
   3080a:	d304      	bcc.n	30816 <__mdiff+0x9e>
   3080c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   30810:	b183      	cbz	r3, 30834 <__mdiff+0xbc>
   30812:	6106      	str	r6, [r0, #16]
   30814:	e7c2      	b.n	3079c <__mdiff+0x24>
   30816:	f85c 4b04 	ldr.w	r4, [ip], #4
   3081a:	b2a2      	uxth	r2, r4
   3081c:	4472      	add	r2, lr
   3081e:	1413      	asrs	r3, r2, #16
   30820:	b292      	uxth	r2, r2
   30822:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   30826:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   3082a:	ea4f 4e23 	mov.w	lr, r3, asr #16
   3082e:	f841 2b04 	str.w	r2, [r1], #4
   30832:	e7e9      	b.n	30808 <__mdiff+0x90>
   30834:	3e01      	subs	r6, #1
   30836:	e7e9      	b.n	3080c <__mdiff+0x94>

00030838 <__d2b>:
   30838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3083c:	ec59 8b10 	vmov	r8, r9, d0
   30840:	f3c9 540a 	ubfx	r4, r9, #20, #11
   30844:	460e      	mov	r6, r1
   30846:	2101      	movs	r1, #1
   30848:	4615      	mov	r5, r2
   3084a:	f7ff fdb8 	bl	303be <_Balloc>
   3084e:	f3c9 0313 	ubfx	r3, r9, #0, #20
   30852:	4607      	mov	r7, r0
   30854:	bb2c      	cbnz	r4, 308a2 <__d2b+0x6a>
   30856:	9301      	str	r3, [sp, #4]
   30858:	f1b8 0300 	subs.w	r3, r8, #0
   3085c:	d026      	beq.n	308ac <__d2b+0x74>
   3085e:	4668      	mov	r0, sp
   30860:	9300      	str	r3, [sp, #0]
   30862:	f7ff fe54 	bl	3050e <__lo0bits>
   30866:	9900      	ldr	r1, [sp, #0]
   30868:	b1f0      	cbz	r0, 308a8 <__d2b+0x70>
   3086a:	9a01      	ldr	r2, [sp, #4]
   3086c:	f1c0 0320 	rsb	r3, r0, #32
   30870:	fa02 f303 	lsl.w	r3, r2, r3
   30874:	40c2      	lsrs	r2, r0
   30876:	430b      	orrs	r3, r1
   30878:	9201      	str	r2, [sp, #4]
   3087a:	617b      	str	r3, [r7, #20]
   3087c:	9b01      	ldr	r3, [sp, #4]
   3087e:	2b00      	cmp	r3, #0
   30880:	61bb      	str	r3, [r7, #24]
   30882:	bf14      	ite	ne
   30884:	2102      	movne	r1, #2
   30886:	2101      	moveq	r1, #1
   30888:	6139      	str	r1, [r7, #16]
   3088a:	b1c4      	cbz	r4, 308be <__d2b+0x86>
   3088c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   30890:	4404      	add	r4, r0
   30892:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   30896:	6034      	str	r4, [r6, #0]
   30898:	6028      	str	r0, [r5, #0]
   3089a:	4638      	mov	r0, r7
   3089c:	b003      	add	sp, #12
   3089e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   308a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   308a6:	e7d6      	b.n	30856 <__d2b+0x1e>
   308a8:	6179      	str	r1, [r7, #20]
   308aa:	e7e7      	b.n	3087c <__d2b+0x44>
   308ac:	a801      	add	r0, sp, #4
   308ae:	f7ff fe2e 	bl	3050e <__lo0bits>
   308b2:	9b01      	ldr	r3, [sp, #4]
   308b4:	2101      	movs	r1, #1
   308b6:	3020      	adds	r0, #32
   308b8:	617b      	str	r3, [r7, #20]
   308ba:	6139      	str	r1, [r7, #16]
   308bc:	e7e5      	b.n	3088a <__d2b+0x52>
   308be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   308c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   308c6:	6030      	str	r0, [r6, #0]
   308c8:	6918      	ldr	r0, [r3, #16]
   308ca:	f7ff fe00 	bl	304ce <__hi0bits>
   308ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   308d2:	e7e1      	b.n	30898 <__d2b+0x60>

000308d4 <_calloc_r>:
   308d4:	b538      	push	{r3, r4, r5, lr}
   308d6:	fb02 f401 	mul.w	r4, r2, r1
   308da:	4621      	mov	r1, r4
   308dc:	f7fd fdec 	bl	2e4b8 <_malloc_r>
   308e0:	4605      	mov	r5, r0
   308e2:	b118      	cbz	r0, 308ec <_calloc_r+0x18>
   308e4:	4622      	mov	r2, r4
   308e6:	2100      	movs	r1, #0
   308e8:	f7ff faa2 	bl	2fe30 <memset>
   308ec:	4628      	mov	r0, r5
   308ee:	bd38      	pop	{r3, r4, r5, pc}

000308f0 <_realloc_r>:
   308f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   308f2:	4607      	mov	r7, r0
   308f4:	4614      	mov	r4, r2
   308f6:	460e      	mov	r6, r1
   308f8:	b921      	cbnz	r1, 30904 <_realloc_r+0x14>
   308fa:	4611      	mov	r1, r2
   308fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30900:	f7fd bdda 	b.w	2e4b8 <_malloc_r>
   30904:	b922      	cbnz	r2, 30910 <_realloc_r+0x20>
   30906:	4625      	mov	r5, r4
   30908:	f7fd fd88 	bl	2e41c <_free_r>
   3090c:	4628      	mov	r0, r5
   3090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30910:	f000 f8ee 	bl	30af0 <_malloc_usable_size_r>
   30914:	42a0      	cmp	r0, r4
   30916:	d20f      	bcs.n	30938 <_realloc_r+0x48>
   30918:	4621      	mov	r1, r4
   3091a:	4638      	mov	r0, r7
   3091c:	f7fd fdcc 	bl	2e4b8 <_malloc_r>
   30920:	4605      	mov	r5, r0
   30922:	2800      	cmp	r0, #0
   30924:	d0f2      	beq.n	3090c <_realloc_r+0x1c>
   30926:	4631      	mov	r1, r6
   30928:	4622      	mov	r2, r4
   3092a:	f7ff fa74 	bl	2fe16 <memcpy>
   3092e:	4631      	mov	r1, r6
   30930:	4638      	mov	r0, r7
   30932:	f7fd fd73 	bl	2e41c <_free_r>
   30936:	e7e9      	b.n	3090c <_realloc_r+0x1c>
   30938:	4635      	mov	r5, r6
   3093a:	e7e7      	b.n	3090c <_realloc_r+0x1c>

0003093c <__ssputs_r>:
   3093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30940:	688e      	ldr	r6, [r1, #8]
   30942:	4682      	mov	sl, r0
   30944:	460c      	mov	r4, r1
   30946:	4691      	mov	r9, r2
   30948:	429e      	cmp	r6, r3
   3094a:	4698      	mov	r8, r3
   3094c:	d838      	bhi.n	309c0 <__ssputs_r+0x84>
   3094e:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   30952:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   30956:	d031      	beq.n	309bc <__ssputs_r+0x80>
   30958:	6962      	ldr	r2, [r4, #20]
   3095a:	3301      	adds	r3, #1
   3095c:	6825      	ldr	r5, [r4, #0]
   3095e:	6909      	ldr	r1, [r1, #16]
   30960:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30964:	1a6f      	subs	r7, r5, r1
   30966:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   3096a:	443b      	add	r3, r7
   3096c:	1055      	asrs	r5, r2, #1
   3096e:	429d      	cmp	r5, r3
   30970:	bf38      	it	cc
   30972:	461d      	movcc	r5, r3
   30974:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   30978:	d030      	beq.n	309dc <__ssputs_r+0xa0>
   3097a:	4629      	mov	r1, r5
   3097c:	f7fd fd9c 	bl	2e4b8 <_malloc_r>
   30980:	4606      	mov	r6, r0
   30982:	b950      	cbnz	r0, 3099a <__ssputs_r+0x5e>
   30984:	230c      	movs	r3, #12
   30986:	f04f 30ff 	mov.w	r0, #4294967295
   3098a:	f8ca 3000 	str.w	r3, [sl]
   3098e:	89a3      	ldrh	r3, [r4, #12]
   30990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   30994:	81a3      	strh	r3, [r4, #12]
   30996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3099a:	463a      	mov	r2, r7
   3099c:	6921      	ldr	r1, [r4, #16]
   3099e:	f7ff fa3a 	bl	2fe16 <memcpy>
   309a2:	89a3      	ldrh	r3, [r4, #12]
   309a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   309a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   309ac:	81a3      	strh	r3, [r4, #12]
   309ae:	6126      	str	r6, [r4, #16]
   309b0:	443e      	add	r6, r7
   309b2:	6165      	str	r5, [r4, #20]
   309b4:	1bed      	subs	r5, r5, r7
   309b6:	6026      	str	r6, [r4, #0]
   309b8:	4646      	mov	r6, r8
   309ba:	60a5      	str	r5, [r4, #8]
   309bc:	4546      	cmp	r6, r8
   309be:	d900      	bls.n	309c2 <__ssputs_r+0x86>
   309c0:	4646      	mov	r6, r8
   309c2:	4632      	mov	r2, r6
   309c4:	4649      	mov	r1, r9
   309c6:	6820      	ldr	r0, [r4, #0]
   309c8:	f7ff fcdf 	bl	3038a <memmove>
   309cc:	68a3      	ldr	r3, [r4, #8]
   309ce:	2000      	movs	r0, #0
   309d0:	1b9b      	subs	r3, r3, r6
   309d2:	60a3      	str	r3, [r4, #8]
   309d4:	6823      	ldr	r3, [r4, #0]
   309d6:	441e      	add	r6, r3
   309d8:	6026      	str	r6, [r4, #0]
   309da:	e7dc      	b.n	30996 <__ssputs_r+0x5a>
   309dc:	462a      	mov	r2, r5
   309de:	f7ff ff87 	bl	308f0 <_realloc_r>
   309e2:	4606      	mov	r6, r0
   309e4:	2800      	cmp	r0, #0
   309e6:	d1e2      	bne.n	309ae <__ssputs_r+0x72>
   309e8:	6921      	ldr	r1, [r4, #16]
   309ea:	4650      	mov	r0, sl
   309ec:	f7fd fd16 	bl	2e41c <_free_r>
   309f0:	e7c8      	b.n	30984 <__ssputs_r+0x48>

000309f2 <_raise_r>:
   309f2:	291f      	cmp	r1, #31
   309f4:	b538      	push	{r3, r4, r5, lr}
   309f6:	4604      	mov	r4, r0
   309f8:	460d      	mov	r5, r1
   309fa:	d904      	bls.n	30a06 <_raise_r+0x14>
   309fc:	2316      	movs	r3, #22
   309fe:	6003      	str	r3, [r0, #0]
   30a00:	f04f 30ff 	mov.w	r0, #4294967295
   30a04:	bd38      	pop	{r3, r4, r5, pc}
   30a06:	6c42      	ldr	r2, [r0, #68]	; 0x44
   30a08:	b112      	cbz	r2, 30a10 <_raise_r+0x1e>
   30a0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   30a0e:	b94b      	cbnz	r3, 30a24 <_raise_r+0x32>
   30a10:	4620      	mov	r0, r4
   30a12:	f000 f816 	bl	30a42 <_getpid_r>
   30a16:	462a      	mov	r2, r5
   30a18:	4601      	mov	r1, r0
   30a1a:	4620      	mov	r0, r4
   30a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30a20:	f7fd beb4 	b.w	2e78c <_kill_r>
   30a24:	2b01      	cmp	r3, #1
   30a26:	d00a      	beq.n	30a3e <_raise_r+0x4c>
   30a28:	1c59      	adds	r1, r3, #1
   30a2a:	d103      	bne.n	30a34 <_raise_r+0x42>
   30a2c:	2316      	movs	r3, #22
   30a2e:	6003      	str	r3, [r0, #0]
   30a30:	2001      	movs	r0, #1
   30a32:	e7e7      	b.n	30a04 <_raise_r+0x12>
   30a34:	2400      	movs	r4, #0
   30a36:	4628      	mov	r0, r5
   30a38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   30a3c:	4798      	blx	r3
   30a3e:	2000      	movs	r0, #0
   30a40:	e7e0      	b.n	30a04 <_raise_r+0x12>

00030a42 <_getpid_r>:
   30a42:	f7fe bad9 	b.w	2eff8 <_getpid>

00030a46 <__sread>:
   30a46:	b510      	push	{r4, lr}
   30a48:	460c      	mov	r4, r1
   30a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30a4e:	f7fd ff11 	bl	2e874 <_read_r>
   30a52:	2800      	cmp	r0, #0
   30a54:	bfab      	itete	ge
   30a56:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   30a58:	89a3      	ldrhlt	r3, [r4, #12]
   30a5a:	181b      	addge	r3, r3, r0
   30a5c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   30a60:	bfac      	ite	ge
   30a62:	6563      	strge	r3, [r4, #84]	; 0x54
   30a64:	81a3      	strhlt	r3, [r4, #12]
   30a66:	bd10      	pop	{r4, pc}

00030a68 <__swrite>:
   30a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30a6c:	461f      	mov	r7, r3
   30a6e:	898b      	ldrh	r3, [r1, #12]
   30a70:	4605      	mov	r5, r0
   30a72:	460c      	mov	r4, r1
   30a74:	05db      	lsls	r3, r3, #23
   30a76:	4616      	mov	r6, r2
   30a78:	d505      	bpl.n	30a86 <__swrite+0x1e>
   30a7a:	2302      	movs	r3, #2
   30a7c:	2200      	movs	r2, #0
   30a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30a82:	f7fd fed9 	bl	2e838 <_lseek_r>
   30a86:	89a3      	ldrh	r3, [r4, #12]
   30a88:	4632      	mov	r2, r6
   30a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   30a8e:	4628      	mov	r0, r5
   30a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   30a94:	81a3      	strh	r3, [r4, #12]
   30a96:	463b      	mov	r3, r7
   30a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30a9c:	f7fd be88 	b.w	2e7b0 <_write_r>

00030aa0 <__sseek>:
   30aa0:	b510      	push	{r4, lr}
   30aa2:	460c      	mov	r4, r1
   30aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30aa8:	f7fd fec6 	bl	2e838 <_lseek_r>
   30aac:	1c43      	adds	r3, r0, #1
   30aae:	89a3      	ldrh	r3, [r4, #12]
   30ab0:	bf15      	itete	ne
   30ab2:	6560      	strne	r0, [r4, #84]	; 0x54
   30ab4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   30ab8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   30abc:	81a3      	strheq	r3, [r4, #12]
   30abe:	bf18      	it	ne
   30ac0:	81a3      	strhne	r3, [r4, #12]
   30ac2:	bd10      	pop	{r4, pc}

00030ac4 <__sclose>:
   30ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30ac8:	f7fd be84 	b.w	2e7d4 <_close_r>

00030acc <__ascii_mbtowc>:
   30acc:	b082      	sub	sp, #8
   30ace:	b901      	cbnz	r1, 30ad2 <__ascii_mbtowc+0x6>
   30ad0:	a901      	add	r1, sp, #4
   30ad2:	b142      	cbz	r2, 30ae6 <__ascii_mbtowc+0x1a>
   30ad4:	b14b      	cbz	r3, 30aea <__ascii_mbtowc+0x1e>
   30ad6:	7813      	ldrb	r3, [r2, #0]
   30ad8:	600b      	str	r3, [r1, #0]
   30ada:	7812      	ldrb	r2, [r2, #0]
   30adc:	1c10      	adds	r0, r2, #0
   30ade:	bf18      	it	ne
   30ae0:	2001      	movne	r0, #1
   30ae2:	b002      	add	sp, #8
   30ae4:	4770      	bx	lr
   30ae6:	4610      	mov	r0, r2
   30ae8:	e7fb      	b.n	30ae2 <__ascii_mbtowc+0x16>
   30aea:	f06f 0001 	mvn.w	r0, #1
   30aee:	e7f8      	b.n	30ae2 <__ascii_mbtowc+0x16>

00030af0 <_malloc_usable_size_r>:
   30af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   30af4:	1f18      	subs	r0, r3, #4
   30af6:	2b00      	cmp	r3, #0
   30af8:	bfbc      	itt	lt
   30afa:	580b      	ldrlt	r3, [r1, r0]
   30afc:	18c0      	addlt	r0, r0, r3
   30afe:	4770      	bx	lr

00030b00 <__ascii_wctomb>:
   30b00:	b149      	cbz	r1, 30b16 <__ascii_wctomb+0x16>
   30b02:	2aff      	cmp	r2, #255	; 0xff
   30b04:	bf8d      	iteet	hi
   30b06:	238a      	movhi	r3, #138	; 0x8a
   30b08:	700a      	strbls	r2, [r1, #0]
   30b0a:	2001      	movls	r0, #1
   30b0c:	6003      	strhi	r3, [r0, #0]
   30b0e:	bf88      	it	hi
   30b10:	f04f 30ff 	movhi.w	r0, #4294967295
   30b14:	4770      	bx	lr
   30b16:	4608      	mov	r0, r1
   30b18:	4770      	bx	lr
